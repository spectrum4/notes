
kernel8-rpi4.elf:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000080000 <_start>:
   80000:	d5384240 	mrs	x0, currentel
   80004:	f100101f 	cmp	x0, #0x4
   80008:	54000380 	b.eq	80078 <_start+0x78>  // b.none
   8000c:	58000420 	ldr	x0, 80090 <_start+0x90>
   80010:	d51c4100 	msr	sp_el1, x0
   80014:	58000420 	ldr	x0, 80098 <_start+0x98>
   80018:	d51cc000 	msr	vbar_el2, x0
   8001c:	d53ce100 	mrs	x0, cnthctl_el2
   80020:	b2400400 	orr	x0, x0, #0x3
   80024:	d51ce100 	msr	cnthctl_el2, x0
   80028:	d51ce07f 	msr	cntvoff_el2, xzr
   8002c:	d5380000 	mrs	x0, midr_el1
   80030:	d53800a1 	mrs	x1, mpidr_el1
   80034:	d51c0000 	msr	vpidr_el2, x0
   80038:	d51c00a1 	msr	vmpidr_el2, x1
   8003c:	d2867fe0 	mov	x0, #0x33ff                	// #13311
   80040:	d51c1140 	msr	cptr_el2, x0
   80044:	d51c117f 	msr	hstr_el2, xzr
   80048:	d2a00600 	mov	x0, #0x300000              	// #3145728
   8004c:	d5181040 	msr	cpacr_el1, x0
   80050:	d2b00000 	mov	x0, #0x80000000            	// #2147483648
   80054:	d51c1100 	msr	hcr_el2, x0
   80058:	d2810000 	mov	x0, #0x800                 	// #2048
   8005c:	f2a61a00 	movk	x0, #0x30d0, lsl #16
   80060:	d5181000 	msr	sctlr_el1, x0
   80064:	d2807880 	mov	x0, #0x3c4                 	// #964
   80068:	d51c4000 	msr	spsr_el2, x0
   8006c:	10000060 	adr	x0, 80078 <_start+0x78>
   80070:	d51c4020 	msr	elr_el2, x0
   80074:	d69f03e0 	eret
   80078:	58000140 	ldr	x0, 800a0 <_start+0xa0>
   8007c:	9100001f 	mov	sp, x0
   80080:	580000c0 	ldr	x0, 80098 <_start+0x98>
   80084:	d518c000 	msr	vbar_el1, x0
   80088:	140097fe 	b	a6080 <sysinit>
   8008c:	00000000 	udf	#0
   80090:	00308000 	.word	0x00308000
   80094:	00000000 	.word	0x00000000
   80098:	000af000 	.word	0x000af000
   8009c:	00000000 	.word	0x00000000
   800a0:	002a0000 	.word	0x002a0000
   800a4:	00000000 	.word	0x00000000

Disassembly of section .text:

0000000000080800 <main>:
   80800:	d285de0c 	mov	x12, #0x2ef0                	// #12016
   80804:	cb2c63ff 	sub	sp, sp, x12
   80808:	910043e0 	add	x0, sp, #0x10
   8080c:	a9007bfd 	stp	x29, x30, [sp]
   80810:	910003fd 	mov	x29, sp
   80814:	94000033 	bl	808e0 <CKernel::CKernel()>
   80818:	910043e0 	add	x0, sp, #0x10
   8081c:	9400009d 	bl	80a90 <CKernel::Initialize()>
   80820:	72001c1f 	tst	w0, #0xff
   80824:	540000a0 	b.eq	80838 <main+0x38>  // b.none
   80828:	910043e0 	add	x0, sp, #0x10
   8082c:	940000cd 	bl	80b60 <CKernel::Run()>
   80830:	7100081f 	cmp	w0, #0x2
   80834:	54000040 	b.eq	8083c <main+0x3c>  // b.none
   80838:	940095ee 	bl	a5ff0 <halt>
   8083c:	94009605 	bl	a6050 <reboot>

0000000000080840 <CKernel::ShutdownHandler()>:
   80840:	b00001e0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   80844:	f9404000 	ldr	x0, [x0, #128]
   80848:	b4000080 	cbz	x0, 80858 <CKernel::ShutdownHandler()+0x18>
   8084c:	52800041 	mov	w1, #0x2                   	// #2
   80850:	b92ed801 	str	w1, [x0, #11992]
   80854:	d65f03c0 	ret
   80858:	90000181 	adrp	x1, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   8085c:	90000180 	adrp	x0, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   80860:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   80864:	913aa021 	add	x1, x1, #0xea8
   80868:	910003fd 	mov	x29, sp
   8086c:	913ae000 	add	x0, x0, #0xeb8
   80870:	528013c2 	mov	w2, #0x9e                  	// #158
   80874:	94007533 	bl	9dd40 <assertion_failed>
   80878:	d503201f 	nop
   8087c:	d503201f 	nop

0000000000080880 <CKernel::KeyboardRemovedHandler(CDevice*, void*)>:
   80880:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80884:	910003fd 	mov	x29, sp
   80888:	f9000bf3 	str	x19, [sp, #16]
   8088c:	b00001f3 	adrp	x19, bd000 <CNetDevice::s_SpeedString+0x18>
   80890:	f9404260 	ldr	x0, [x19, #128]
   80894:	b40001a0 	cbz	x0, 808c8 <CKernel::KeyboardRemovedHandler(CDevice*, void*)+0x48>
   80898:	94007c5e 	bl	9fa10 <CLogger::Get()>
   8089c:	90000183 	adrp	x3, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   808a0:	b00001a1 	adrp	x1, b5000 <_etext+0x4158>
   808a4:	913b2063 	add	x3, x3, #0xec8
   808a8:	91342021 	add	x1, x1, #0xd08
   808ac:	52800082 	mov	w2, #0x4                   	// #4
   808b0:	94007e44 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   808b4:	f9404260 	ldr	x0, [x19, #128]
   808b8:	f9400bf3 	ldr	x19, [sp, #16]
   808bc:	f917681f 	str	xzr, [x0, #11984]
   808c0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   808c4:	d65f03c0 	ret
   808c8:	90000181 	adrp	x1, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   808cc:	90000180 	adrp	x0, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   808d0:	913aa021 	add	x1, x1, #0xea8
   808d4:	913ae000 	add	x0, x0, #0xeb8
   808d8:	52801722 	mov	w2, #0xb9                  	// #185
   808dc:	94007519 	bl	9dd40 <assertion_failed>

00000000000808e0 <CKernel::CKernel()>:
   808e0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   808e4:	d2837102 	mov	x2, #0x1b88                	// #7048
   808e8:	910003fd 	mov	x29, sp
   808ec:	d2857103 	mov	x3, #0x2b88                	// #11144
   808f0:	52800001 	mov	w1, #0x0                   	// #0
   808f4:	a90153f3 	stp	x19, x20, [sp, #16]
   808f8:	aa0003f3 	mov	x19, x0
   808fc:	91006014 	add	x20, x0, #0x18
   80900:	a9025bf5 	stp	x21, x22, [sp, #32]
   80904:	8b020015 	add	x21, x0, x2
   80908:	8b030016 	add	x22, x0, x3
   8090c:	f9001bf7 	str	x23, [sp, #48]
   80910:	94007480 	bl	9db10 <CActLED::CActLED(bool)>
   80914:	aa1403e0 	mov	x0, x20
   80918:	94007ac2 	bl	9f420 <CKernelOptions::CKernelOptions()>
   8091c:	91230260 	add	x0, x19, #0x8c0
   80920:	940077d8 	bl	9e880 <CDeviceNameService::CDeviceNameService()>
   80924:	aa1403e0 	mov	x0, x20
   80928:	940079be 	bl	9f020 <CKernelOptions::GetWidth() const>
   8092c:	2a0003f7 	mov	w23, w0
   80930:	aa1403e0 	mov	x0, x20
   80934:	940079bf 	bl	9f030 <CKernelOptions::GetHeight() const>
   80938:	2a1703e1 	mov	w1, w23
   8093c:	2a0003e2 	mov	w2, w0
   80940:	52800004 	mov	w4, #0x0                   	// #0
   80944:	91234260 	add	x0, x19, #0x8d0
   80948:	52800003 	mov	w3, #0x0                   	// #0
   8094c:	940083a9 	bl	a17f0 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>
   80950:	52800003 	mov	w3, #0x0                   	// #0
   80954:	52800002 	mov	w2, #0x0                   	// #0
   80958:	d2800001 	mov	x1, #0x0                   	// #0
   8095c:	9127a260 	add	x0, x19, #0x9e8
   80960:	94008a78 	bl	a3340 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>
   80964:	d2837004 	mov	x4, #0x1b80                	// #7040
   80968:	8b040260 	add	x0, x19, x4
   8096c:	9400a0d9 	bl	a8cd0 <CExceptionHandler::CExceptionHandler()>
   80970:	aa1503e0 	mov	x0, x21
   80974:	9400a857 	bl	aaad0 <CInterruptSystem::CInterruptSystem()>
   80978:	aa1503e1 	mov	x1, x21
   8097c:	aa1603e0 	mov	x0, x22
   80980:	9400960c 	bl	a61b0 <CTimer::CTimer(CInterruptSystem*)>
   80984:	aa1403e0 	mov	x0, x20
   80988:	940079b2 	bl	9f050 <CKernelOptions::GetLogLevel() const>
   8098c:	d2857e05 	mov	x5, #0x2bf0                	// #11248
   80990:	aa1603e2 	mov	x2, x22
   80994:	2a0003e1 	mov	w1, w0
   80998:	52800023 	mov	w3, #0x1                   	// #1
   8099c:	8b050260 	add	x0, x19, x5
   809a0:	94007bdc 	bl	9f910 <CLogger::CLogger(unsigned int, CTimer*, bool)>
   809a4:	d285bb06 	mov	x6, #0x2dd8                	// #11736
   809a8:	aa1603e2 	mov	x2, x22
   809ac:	8b060260 	add	x0, x19, x6
   809b0:	aa1503e1 	mov	x1, x21
   809b4:	d2800005 	mov	x5, #0x0                   	// #0
   809b8:	52800004 	mov	w4, #0x0                   	// #0
   809bc:	52800023 	mov	w3, #0x1                   	// #1
   809c0:	94000a7c 	bl	833b0 <CXHCIDevice::CXHCIDevice(CInterruptSystem*, CTimer*, bool, unsigned int, CXHCISharedMemAllocator*)>
   809c4:	b00001e4 	adrp	x4, bd000 <CNetDevice::s_SpeedString+0x18>
   809c8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   809cc:	aa1303e0 	mov	x0, x19
   809d0:	52803e83 	mov	w3, #0x1f4                 	// #500
   809d4:	52801902 	mov	w2, #0xc8                  	// #200
   809d8:	528000a1 	mov	w1, #0x5                   	// #5
   809dc:	f9004093 	str	x19, [x4, #128]
   809e0:	f9401bf7 	ldr	x23, [sp, #48]
   809e4:	f9176a7f 	str	xzr, [x19, #11984]
   809e8:	b92eda7f 	str	wzr, [x19, #11992]
   809ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   809f0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   809f4:	1400749b 	b	9dc60 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
   809f8:	d503201f 	nop
   809fc:	d503201f 	nop

0000000000080a00 <CKernel::~CKernel()>:
   80a00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80a04:	910003fd 	mov	x29, sp
   80a08:	b00001e1 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   80a0c:	f9000bf3 	str	x19, [sp, #16]
   80a10:	aa0003f3 	mov	x19, x0
   80a14:	d285bb00 	mov	x0, #0x2dd8                	// #11736
   80a18:	8b000260 	add	x0, x19, x0
   80a1c:	f900403f 	str	xzr, [x1, #128]
   80a20:	94000b98 	bl	83880 <CXHCIDevice::~CXHCIDevice()>
   80a24:	d2857e01 	mov	x1, #0x2bf0                	// #11248
   80a28:	8b010260 	add	x0, x19, x1
   80a2c:	94007bd1 	bl	9f970 <CLogger::~CLogger()>
   80a30:	d2857102 	mov	x2, #0x2b88                	// #11144
   80a34:	8b020260 	add	x0, x19, x2
   80a38:	94009602 	bl	a6240 <CTimer::~CTimer()>
   80a3c:	d2837103 	mov	x3, #0x1b88                	// #7048
   80a40:	8b030260 	add	x0, x19, x3
   80a44:	9400a833 	bl	aab10 <CInterruptSystem::~CInterruptSystem()>
   80a48:	d2837004 	mov	x4, #0x1b80                	// #7040
   80a4c:	8b040260 	add	x0, x19, x4
   80a50:	9400a000 	bl	a8a50 <CExceptionHandler::~CExceptionHandler()>
   80a54:	9127a260 	add	x0, x19, #0x9e8
   80a58:	94008e8a 	bl	a4480 <CSerialDevice::~CSerialDevice()>
   80a5c:	91234260 	add	x0, x19, #0x8d0
   80a60:	940082a4 	bl	a14f0 <CScreenDevice::~CScreenDevice()>
   80a64:	91230260 	add	x0, x19, #0x8c0
   80a68:	94007796 	bl	9e8c0 <CDeviceNameService::~CDeviceNameService()>
   80a6c:	91006260 	add	x0, x19, #0x18
   80a70:	94007954 	bl	9efc0 <CKernelOptions::~CKernelOptions()>
   80a74:	aa1303e0 	mov	x0, x19
   80a78:	f9400bf3 	ldr	x19, [sp, #16]
   80a7c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80a80:	1400745c 	b	9dbf0 <CActLED::~CActLED()>
   80a84:	d503201f 	nop
   80a88:	d503201f 	nop
   80a8c:	d503201f 	nop

0000000000080a90 <CKernel::Initialize()>:
   80a90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80a94:	910003fd 	mov	x29, sp
   80a98:	a90153f3 	stp	x19, x20, [sp, #16]
   80a9c:	91234014 	add	x20, x0, #0x8d0
   80aa0:	aa0003f3 	mov	x19, x0
   80aa4:	aa1403e0 	mov	x0, x20
   80aa8:	94008796 	bl	a2900 <CScreenDevice::Initialize()>
   80aac:	72001c1f 	tst	w0, #0xff
   80ab0:	540000a1 	b.ne	80ac4 <CKernel::Initialize()+0x34>  // b.any
   80ab4:	52800000 	mov	w0, #0x0                   	// #0
   80ab8:	a94153f3 	ldp	x19, x20, [sp, #16]
   80abc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80ac0:	d65f03c0 	ret
   80ac4:	52984001 	mov	w1, #0xc200                	// #49664
   80ac8:	72a00021 	movk	w1, #0x1, lsl #16
   80acc:	52800004 	mov	w4, #0x0                   	// #0
   80ad0:	52800023 	mov	w3, #0x1                   	// #1
   80ad4:	52800102 	mov	w2, #0x8                   	// #8
   80ad8:	9127a260 	add	x0, x19, #0x9e8
   80adc:	94008aa5 	bl	a3570 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)>
   80ae0:	72001c1f 	tst	w0, #0xff
   80ae4:	54fffe80 	b.eq	80ab4 <CKernel::Initialize()+0x24>  // b.none
   80ae8:	91006260 	add	x0, x19, #0x18
   80aec:	94007955 	bl	9f040 <CKernelOptions::GetLogDevice() const>
   80af0:	aa0003e1 	mov	x1, x0
   80af4:	52800002 	mov	w2, #0x0                   	// #0
   80af8:	91230260 	add	x0, x19, #0x8c0
   80afc:	9400780d 	bl	9eb30 <CDeviceNameService::GetDevice(char const*, bool)>
   80b00:	aa0003e1 	mov	x1, x0
   80b04:	d2857e03 	mov	x3, #0x2bf0                	// #11248
   80b08:	f100003f 	cmp	x1, #0x0
   80b0c:	8b030260 	add	x0, x19, x3
   80b10:	9a941021 	csel	x1, x1, x20, ne	// ne = any
   80b14:	94007dcb 	bl	a0240 <CLogger::Initialize(CDevice*)>
   80b18:	72001c1f 	tst	w0, #0xff
   80b1c:	54fffcc0 	b.eq	80ab4 <CKernel::Initialize()+0x24>  // b.none
   80b20:	d2837102 	mov	x2, #0x1b88                	// #7048
   80b24:	8b020260 	add	x0, x19, x2
   80b28:	9400a812 	bl	aab70 <CInterruptSystem::Initialize()>
   80b2c:	72001c1f 	tst	w0, #0xff
   80b30:	54fffc20 	b.eq	80ab4 <CKernel::Initialize()+0x24>  // b.none
   80b34:	d2857101 	mov	x1, #0x2b88                	// #11144
   80b38:	8b010260 	add	x0, x19, x1
   80b3c:	940098a9 	bl	a6de0 <CTimer::Initialize()>
   80b40:	72001c1f 	tst	w0, #0xff
   80b44:	54fffb80 	b.eq	80ab4 <CKernel::Initialize()+0x24>  // b.none
   80b48:	d285bb00 	mov	x0, #0x2dd8                	// #11736
   80b4c:	52800021 	mov	w1, #0x1                   	// #1
   80b50:	8b000260 	add	x0, x19, x0
   80b54:	a94153f3 	ldp	x19, x20, [sp, #16]
   80b58:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80b5c:	14000bd9 	b	83ac0 <CXHCIDevice::Initialize(bool)>

0000000000080b60 <CKernel::Run()>:
   80b60:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   80b64:	d2857e01 	mov	x1, #0x2bf0                	// #11248
   80b68:	910003fd 	mov	x29, sp
   80b6c:	90000183 	adrp	x3, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   80b70:	52800062 	mov	w2, #0x3                   	// #3
   80b74:	913b8063 	add	x3, x3, #0xee0
   80b78:	a90363f7 	stp	x23, x24, [sp, #48]
   80b7c:	8b010018 	add	x24, x0, x1
   80b80:	b00001b7 	adrp	x23, b5000 <_etext+0x4158>
   80b84:	913422f7 	add	x23, x23, #0xd08
   80b88:	aa1703e1 	mov	x1, x23
   80b8c:	a90153f3 	stp	x19, x20, [sp, #16]
   80b90:	aa0003f3 	mov	x19, x0
   80b94:	aa1803e0 	mov	x0, x24
   80b98:	94007d8a 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   80b9c:	aa1803e0 	mov	x0, x24
   80ba0:	aa1703e1 	mov	x1, x23
   80ba4:	90000183 	adrp	x3, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   80ba8:	913c2063 	add	x3, x3, #0xf08
   80bac:	52800062 	mov	w2, #0x3                   	// #3
   80bb0:	94007d84 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   80bb4:	b96eda74 	ldr	w20, [x19, #11992]
   80bb8:	35000454 	cbnz	w20, 80c40 <CKernel::Run()+0xe0>
   80bbc:	d285bb00 	mov	x0, #0x2dd8                	// #11736
   80bc0:	a9025bf5 	stp	x21, x22, [sp, #32]
   80bc4:	91234276 	add	x22, x19, #0x8d0
   80bc8:	8b000275 	add	x21, x19, x0
   80bcc:	a9046bf9 	stp	x25, x26, [sp, #64]
   80bd0:	9000019a 	adrp	x26, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   80bd4:	913d035a 	add	x26, x26, #0xf40
   80bd8:	90000019 	adrp	x25, 80000 <_start>
   80bdc:	91220339 	add	x25, x25, #0x880
   80be0:	f9002bfb 	str	x27, [sp, #80]
   80be4:	9123027b 	add	x27, x19, #0x8c0
   80be8:	aa1503e0 	mov	x0, x21
   80bec:	94000089 	bl	80e10 <CUSBHostController::UpdatePlugAndPlay()>
   80bf0:	72001c1f 	tst	w0, #0xff
   80bf4:	54000060 	b.eq	80c00 <CKernel::Run()+0xa0>  // b.none
   80bf8:	f9576a60 	ldr	x0, [x19, #11984]
   80bfc:	b40002c0 	cbz	x0, 80c54 <CKernel::Run()+0xf4>
   80c00:	f9576a60 	ldr	x0, [x19, #11984]
   80c04:	b4000060 	cbz	x0, 80c10 <CKernel::Run()+0xb0>
   80c08:	f9576a60 	ldr	x0, [x19, #11984]
   80c0c:	9400035d 	bl	81980 <CUSBKeyboardDevice::UpdateLEDs()>
   80c10:	2a1403e2 	mov	w2, w20
   80c14:	52800001 	mov	w1, #0x0                   	// #0
   80c18:	aa1603e0 	mov	x0, x22
   80c1c:	11000694 	add	w20, w20, #0x1
   80c20:	94008954 	bl	a3170 <CScreenDevice::Rotor(unsigned int, unsigned int)>
   80c24:	52800c80 	mov	w0, #0x64                  	// #100
   80c28:	940098d6 	bl	a6f80 <CTimer::SimpleMsDelay(unsigned int)>
   80c2c:	b96eda60 	ldr	w0, [x19, #11992]
   80c30:	34fffdc0 	cbz	w0, 80be8 <CKernel::Run()+0x88>
   80c34:	a9425bf5 	ldp	x21, x22, [sp, #32]
   80c38:	a9446bf9 	ldp	x25, x26, [sp, #64]
   80c3c:	f9402bfb 	ldr	x27, [sp, #80]
   80c40:	a94363f7 	ldp	x23, x24, [sp, #48]
   80c44:	b96eda60 	ldr	w0, [x19, #11992]
   80c48:	a94153f3 	ldp	x19, x20, [sp, #16]
   80c4c:	a8c67bfd 	ldp	x29, x30, [sp], #96
   80c50:	d65f03c0 	ret
   80c54:	52800002 	mov	w2, #0x0                   	// #0
   80c58:	aa1a03e1 	mov	x1, x26
   80c5c:	aa1b03e0 	mov	x0, x27
   80c60:	940077b4 	bl	9eb30 <CDeviceNameService::GetDevice(char const*, bool)>
   80c64:	f9176a60 	str	x0, [x19, #11984]
   80c68:	d2800002 	mov	x2, #0x0                   	// #0
   80c6c:	aa1903e1 	mov	x1, x25
   80c70:	f9576a60 	ldr	x0, [x19, #11984]
   80c74:	b4fffc60 	cbz	x0, 80c00 <CKernel::Run()+0xa0>
   80c78:	f9576a60 	ldr	x0, [x19, #11984]
   80c7c:	940076b9 	bl	9e760 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)>
   80c80:	90000001 	adrp	x1, 80000 <_start>
   80c84:	91210021 	add	x1, x1, #0x840
   80c88:	f9576a60 	ldr	x0, [x19, #11984]
   80c8c:	940002c5 	bl	817a0 <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>
   80c90:	f9576a60 	ldr	x0, [x19, #11984]
   80c94:	90000001 	adrp	x1, 80000 <_start>
   80c98:	91330021 	add	x1, x1, #0xcc0
   80c9c:	940002b9 	bl	81780 <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>
   80ca0:	90000183 	adrp	x3, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   80ca4:	913d2063 	add	x3, x3, #0xf48
   80ca8:	52800062 	mov	w2, #0x3                   	// #3
   80cac:	aa1703e1 	mov	x1, x23
   80cb0:	aa1803e0 	mov	x0, x24
   80cb4:	94007d43 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   80cb8:	17ffffd2 	b	80c00 <CKernel::Run()+0xa0>
   80cbc:	d503201f 	nop

0000000000080cc0 <CKernel::KeyPressedHandler(char const*)>:
   80cc0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80cc4:	b00001e1 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   80cc8:	910003fd 	mov	x29, sp
   80ccc:	a90153f3 	stp	x19, x20, [sp, #16]
   80cd0:	f9404034 	ldr	x20, [x1, #128]
   80cd4:	b4000134 	cbz	x20, 80cf8 <CKernel::KeyPressedHandler(char const*)+0x38>
   80cd8:	aa0003f3 	mov	x19, x0
   80cdc:	94009935 	bl	a71b0 <strlen>
   80ce0:	aa0003e2 	mov	x2, x0
   80ce4:	aa1303e1 	mov	x1, x19
   80ce8:	91234280 	add	x0, x20, #0x8d0
   80cec:	a94153f3 	ldp	x19, x20, [sp, #16]
   80cf0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80cf4:	140088c7 	b	a3010 <CScreenDevice::Write(void const*, unsigned long)>
   80cf8:	90000181 	adrp	x1, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   80cfc:	90000180 	adrp	x0, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   80d00:	913aa021 	add	x1, x1, #0xea8
   80d04:	913ae000 	add	x0, x0, #0xeb8
   80d08:	528011c2 	mov	w2, #0x8e                  	// #142
   80d0c:	9400740d 	bl	9dd40 <assertion_failed>

0000000000080d10 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)>:
   80d10:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   80d14:	910003fd 	mov	x29, sp
   80d18:	a9025bf5 	stp	x21, x22, [sp, #32]
   80d1c:	b00001f6 	adrp	x22, bd000 <CNetDevice::s_SpeedString+0x18>
   80d20:	f94042c3 	ldr	x3, [x22, #128]
   80d24:	a90153f3 	stp	x19, x20, [sp, #16]
   80d28:	b4000683 	cbz	x3, 80df8 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xe8>
   80d2c:	12001c15 	and	w21, w0, #0xff
   80d30:	9100c3e0 	add	x0, sp, #0x30
   80d34:	aa0103f3 	mov	x19, x1
   80d38:	91001834 	add	x20, x1, #0x6
   80d3c:	94008e45 	bl	a4650 <CString::CString()>
   80d40:	90000181 	adrp	x1, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   80d44:	2a1503e2 	mov	w2, w21
   80d48:	9100c3e0 	add	x0, sp, #0x30
   80d4c:	913d8021 	add	x1, x1, #0xf60
   80d50:	b00001b5 	adrp	x21, b5000 <_etext+0x4158>
   80d54:	9101a2b5 	add	x21, x21, #0x68
   80d58:	94009476 	bl	a5f30 <CString::Format(char const*, ...)>
   80d5c:	14000004 	b	80d6c <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x5c>
   80d60:	91000673 	add	x19, x19, #0x1
   80d64:	eb14027f 	cmp	x19, x20
   80d68:	54000260 	b.eq	80db4 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0xa4>  // b.none
   80d6c:	39400260 	ldrb	w0, [x19]
   80d70:	34ffff80 	cbz	w0, 80d60 <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x50>
   80d74:	910143e0 	add	x0, sp, #0x50
   80d78:	91000673 	add	x19, x19, #0x1
   80d7c:	94008e35 	bl	a4650 <CString::CString()>
   80d80:	385ff262 	ldurb	w2, [x19, #-1]
   80d84:	aa1503e1 	mov	x1, x21
   80d88:	910143e0 	add	x0, sp, #0x50
   80d8c:	94009469 	bl	a5f30 <CString::Format(char const*, ...)>
   80d90:	910143e0 	add	x0, sp, #0x50
   80d94:	94008e73 	bl	a4760 <CString::operator char const*() const>
   80d98:	aa0003e1 	mov	x1, x0
   80d9c:	9100c3e0 	add	x0, sp, #0x30
   80da0:	94008ecc 	bl	a48d0 <CString::Append(char const*)>
   80da4:	910143e0 	add	x0, sp, #0x50
   80da8:	94008dee 	bl	a4560 <CString::~CString()>
   80dac:	eb14027f 	cmp	x19, x20
   80db0:	54fffde1 	b.ne	80d6c <CKernel::KeyStatusHandlerRaw(unsigned char, unsigned char const*)+0x5c>  // b.any
   80db4:	f94042d3 	ldr	x19, [x22, #128]
   80db8:	d2857e01 	mov	x1, #0x2bf0                	// #11248
   80dbc:	9100c3e0 	add	x0, sp, #0x30
   80dc0:	8b010273 	add	x19, x19, x1
   80dc4:	94008e67 	bl	a4760 <CString::operator char const*() const>
   80dc8:	b00001a1 	adrp	x1, b5000 <_etext+0x4158>
   80dcc:	aa0003e3 	mov	x3, x0
   80dd0:	91342021 	add	x1, x1, #0xd08
   80dd4:	aa1303e0 	mov	x0, x19
   80dd8:	52800062 	mov	w2, #0x3                   	// #3
   80ddc:	94007cf9 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   80de0:	9100c3e0 	add	x0, sp, #0x30
   80de4:	94008ddf 	bl	a4560 <CString::~CString()>
   80de8:	a94153f3 	ldp	x19, x20, [sp, #16]
   80dec:	a9425bf5 	ldp	x21, x22, [sp, #32]
   80df0:	a8c77bfd 	ldp	x29, x30, [sp], #112
   80df4:	d65f03c0 	ret
   80df8:	90000181 	adrp	x1, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   80dfc:	90000180 	adrp	x0, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   80e00:	913aa021 	add	x1, x1, #0xea8
   80e04:	913ae000 	add	x0, x0, #0xeb8
   80e08:	52801482 	mov	w2, #0xa4                  	// #164
   80e0c:	940073cd 	bl	9dd40 <assertion_failed>

0000000000080e10 <CUSBHostController::UpdatePlugAndPlay()>:
   80e10:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   80e14:	910003fd 	mov	x29, sp
   80e18:	a90153f3 	stp	x19, x20, [sp, #16]
   80e1c:	a9025bf5 	stp	x21, x22, [sp, #32]
   80e20:	f9001bf7 	str	x23, [sp, #48]
   80e24:	39402017 	ldrb	w23, [x0, #8]
   80e28:	34000777 	cbz	w23, 80f14 <CUSBHostController::UpdatePlugAndPlay()+0x104>
   80e2c:	39402413 	ldrb	w19, [x0, #9]
   80e30:	aa0003f5 	mov	x21, x0
   80e34:	3900241f 	strb	wzr, [x0, #9]
   80e38:	b9401800 	ldr	w0, [x0, #24]
   80e3c:	35000500 	cbnz	w0, 80edc <CUSBHostController::UpdatePlugAndPlay()+0xcc>
   80e40:	910042b6 	add	x22, x21, #0x10
   80e44:	aa1603e0 	mov	x0, x22
   80e48:	94008092 	bl	a1090 <CPtrList::GetFirst() const>
   80e4c:	aa0003f4 	mov	x20, x0
   80e50:	b40006e0 	cbz	x0, 80f2c <CUSBHostController::UpdatePlugAndPlay()+0x11c>
   80e54:	940080ab 	bl	a1100 <CPtrList::GetPtr(TPtrListElement*)>
   80e58:	aa0003f3 	mov	x19, x0
   80e5c:	aa1403e1 	mov	x1, x20
   80e60:	aa1603e0 	mov	x0, x22
   80e64:	9400813f 	bl	a1360 <CPtrList::Remove(TPtrListElement*)>
   80e68:	b9401aa0 	ldr	w0, [x21, #24]
   80e6c:	35000220 	cbnz	w0, 80eb0 <CUSBHostController::UpdatePlugAndPlay()+0xa0>
   80e70:	b4000253 	cbz	x19, 80eb8 <CUSBHostController::UpdatePlugAndPlay()+0xa8>
   80e74:	39400261 	ldrb	w1, [x19]
   80e78:	f9400660 	ldr	x0, [x19, #8]
   80e7c:	340002a1 	cbz	w1, 80ed0 <CUSBHostController::UpdatePlugAndPlay()+0xc0>
   80e80:	b40003e0 	cbz	x0, 80efc <CUSBHostController::UpdatePlugAndPlay()+0xec>
   80e84:	f9400001 	ldr	x1, [x0]
   80e88:	f9401021 	ldr	x1, [x1, #32]
   80e8c:	d63f0020 	blr	x1
   80e90:	aa1303e0 	mov	x0, x19
   80e94:	d2800201 	mov	x1, #0x10                  	// #16
   80e98:	94009d1a 	bl	a8300 <operator delete(void*, unsigned long)>
   80e9c:	b9401aa0 	ldr	w0, [x21, #24]
   80ea0:	2a1703f3 	mov	w19, w23
   80ea4:	34fffd00 	cbz	w0, 80e44 <CUSBHostController::UpdatePlugAndPlay()+0x34>
   80ea8:	9400a0a6 	bl	a9140 <EnterCritical>
   80eac:	17ffffe6 	b	80e44 <CUSBHostController::UpdatePlugAndPlay()+0x34>
   80eb0:	9400a0d4 	bl	a9200 <LeaveCritical>
   80eb4:	b5fffe13 	cbnz	x19, 80e74 <CUSBHostController::UpdatePlugAndPlay()+0x64>
   80eb8:	90000181 	adrp	x1, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   80ebc:	90000180 	adrp	x0, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   80ec0:	913e0021 	add	x1, x1, #0xf80
   80ec4:	913ea000 	add	x0, x0, #0xfa8
   80ec8:	528014c2 	mov	w2, #0xa6                  	// #166
   80ecc:	9400739d 	bl	9dd40 <assertion_failed>
   80ed0:	b40000a0 	cbz	x0, 80ee4 <CUSBHostController::UpdatePlugAndPlay()+0xd4>
   80ed4:	940007f7 	bl	82eb0 <CUSBStandardHub::HandlePortStatusChange()>
   80ed8:	17ffffee 	b	80e90 <CUSBHostController::UpdatePlugAndPlay()+0x80>
   80edc:	9400a099 	bl	a9140 <EnterCritical>
   80ee0:	17ffffd8 	b	80e40 <CUSBHostController::UpdatePlugAndPlay()+0x30>
   80ee4:	90000181 	adrp	x1, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   80ee8:	90000180 	adrp	x0, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   80eec:	913e0021 	add	x1, x1, #0xf80
   80ef0:	913f4000 	add	x0, x0, #0xfd0
   80ef4:	528015c2 	mov	w2, #0xae                  	// #174
   80ef8:	94007392 	bl	9dd40 <assertion_failed>
   80efc:	90000181 	adrp	x1, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   80f00:	90000180 	adrp	x0, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   80f04:	913e0021 	add	x1, x1, #0xf80
   80f08:	913ee000 	add	x0, x0, #0xfb8
   80f0c:	52801522 	mov	w2, #0xa9                  	// #169
   80f10:	9400738c 	bl	9dd40 <assertion_failed>
   80f14:	90000181 	adrp	x1, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   80f18:	90000180 	adrp	x0, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   80f1c:	913e0021 	add	x1, x1, #0xf80
   80f20:	913e6000 	add	x0, x0, #0xf98
   80f24:	528012c2 	mov	w2, #0x96                  	// #150
   80f28:	94007386 	bl	9dd40 <assertion_failed>
   80f2c:	b9401aa0 	ldr	w0, [x21, #24]
   80f30:	350000e0 	cbnz	w0, 80f4c <CUSBHostController::UpdatePlugAndPlay()+0x13c>
   80f34:	2a1303e0 	mov	w0, w19
   80f38:	a94153f3 	ldp	x19, x20, [sp, #16]
   80f3c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   80f40:	f9401bf7 	ldr	x23, [sp, #48]
   80f44:	a8c47bfd 	ldp	x29, x30, [sp], #64
   80f48:	d65f03c0 	ret
   80f4c:	9400a0ad 	bl	a9200 <LeaveCritical>
   80f50:	17fffff9 	b	80f34 <CUSBHostController::UpdatePlugAndPlay()+0x124>
   80f54:	d503201f 	nop
   80f58:	d503201f 	nop
   80f5c:	d503201f 	nop

0000000000080f60 <CUSBHostController::CUSBHostController(bool)>:
   80f60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80f64:	910003fd 	mov	x29, sp
   80f68:	52800023 	mov	w3, #0x1                   	// #1
   80f6c:	b00001a2 	adrp	x2, b5000 <_etext+0x4158>
   80f70:	91348042 	add	x2, x2, #0xd20
   80f74:	f9000bf3 	str	x19, [sp, #16]
   80f78:	aa0003f3 	mov	x19, x0
   80f7c:	91004000 	add	x0, x0, #0x10
   80f80:	f9000262 	str	x2, [x19]
   80f84:	39002261 	strb	w1, [x19, #8]
   80f88:	39002663 	strb	w3, [x19, #9]
   80f8c:	94008031 	bl	a1050 <CPtrList::CPtrList()>
   80f90:	52800020 	mov	w0, #0x1                   	// #1
   80f94:	b00001e1 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   80f98:	f9004433 	str	x19, [x1, #136]
   80f9c:	b9001a60 	str	w0, [x19, #24]
   80fa0:	f9400bf3 	ldr	x19, [sp, #16]
   80fa4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80fa8:	d65f03c0 	ret
   80fac:	d503201f 	nop

0000000000080fb0 <CUSBHostController::~CUSBHostController()>:
   80fb0:	b00001a1 	adrp	x1, b5000 <_etext+0x4158>
   80fb4:	91348021 	add	x1, x1, #0xd20
   80fb8:	b00001e2 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   80fbc:	f8010401 	str	x1, [x0], #16
   80fc0:	f900445f 	str	xzr, [x2, #136]
   80fc4:	14008027 	b	a1060 <CPtrList::~CPtrList()>
   80fc8:	d503201f 	nop
   80fcc:	d503201f 	nop

0000000000080fd0 <CUSBHostController::~CUSBHostController()>:
   80fd0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80fd4:	b00001a1 	adrp	x1, b5000 <_etext+0x4158>
   80fd8:	91348021 	add	x1, x1, #0xd20
   80fdc:	910003fd 	mov	x29, sp
   80fe0:	b00001e2 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   80fe4:	f9000bf3 	str	x19, [sp, #16]
   80fe8:	aa0003f3 	mov	x19, x0
   80fec:	f8010401 	str	x1, [x0], #16
   80ff0:	f900445f 	str	xzr, [x2, #136]
   80ff4:	9400801b 	bl	a1060 <CPtrList::~CPtrList()>
   80ff8:	aa1303e0 	mov	x0, x19
   80ffc:	d2800401 	mov	x1, #0x20                  	// #32
   81000:	f9400bf3 	ldr	x19, [sp, #16]
   81004:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81008:	14009cbe 	b	a8300 <operator delete(void*, unsigned long)>
   8100c:	d503201f 	nop

0000000000081010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>:
   81010:	a9b17bfd 	stp	x29, x30, [sp, #-240]!
   81014:	910003fd 	mov	x29, sp
   81018:	a9025bf5 	stp	x21, x22, [sp, #32]
   8101c:	aa0003f5 	mov	x21, x0
   81020:	d2800100 	mov	x0, #0x8                   	// #8
   81024:	12003cf6 	and	w22, w7, #0xffff
   81028:	a90153f3 	stp	x19, x20, [sp, #16]
   8102c:	aa0103f4 	mov	x20, x1
   81030:	a90363f7 	stp	x23, x24, [sp, #48]
   81034:	12003cb8 	and	w24, w5, #0xffff
   81038:	aa0603f7 	mov	x23, x6
   8103c:	a9046bf9 	stp	x25, x26, [sp, #64]
   81040:	12003c99 	and	w25, w4, #0xffff
   81044:	12001c7a 	and	w26, w3, #0xff
   81048:	f9002bfb 	str	x27, [sp, #80]
   8104c:	12001c5b 	and	w27, w2, #0xff
   81050:	94009c84 	bl	a8260 <operator new(unsigned long)>
   81054:	aa0003f3 	mov	x19, x0
   81058:	53087f27 	lsr	w7, w25, #8
   8105c:	3900001b 	strb	w27, [x0]
   81060:	53087f06 	lsr	w6, w24, #8
   81064:	53087ec5 	lsr	w5, w22, #8
   81068:	3900041a 	strb	w26, [x0, #1]
   8106c:	aa0003e4 	mov	x4, x0
   81070:	aa1703e2 	mov	x2, x23
   81074:	39000a79 	strb	w25, [x19, #2]
   81078:	2a1603e3 	mov	w3, w22
   8107c:	aa1403e1 	mov	x1, x20
   81080:	39000e67 	strb	w7, [x19, #3]
   81084:	910183e0 	add	x0, sp, #0x60
   81088:	39001278 	strb	w24, [x19, #4]
   8108c:	39001666 	strb	w6, [x19, #5]
   81090:	39001a76 	strb	w22, [x19, #6]
   81094:	39001e65 	strb	w5, [x19, #7]
   81098:	94000282 	bl	81aa0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   8109c:	f94002a3 	ldr	x3, [x21]
   810a0:	aa1503e0 	mov	x0, x21
   810a4:	910183e1 	add	x1, sp, #0x60
   810a8:	52800002 	mov	w2, #0x0                   	// #0
   810ac:	f9401063 	ldr	x3, [x3, #32]
   810b0:	d63f0060 	blr	x3
   810b4:	72001c1f 	tst	w0, #0xff
   810b8:	54000241 	b.ne	81100 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xf0>  // b.any
   810bc:	b40002b4 	cbz	x20, 81110 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0x100>
   810c0:	aa1403e0 	mov	x0, x20
   810c4:	12800014 	mov	w20, #0xffffffff            	// #-1
   810c8:	940024c2 	bl	8a3d0 <CUSBEndpoint::ResetPID()>
   810cc:	aa1303e0 	mov	x0, x19
   810d0:	d2800101 	mov	x1, #0x8                   	// #8
   810d4:	94009c8b 	bl	a8300 <operator delete(void*, unsigned long)>
   810d8:	910183e0 	add	x0, sp, #0x60
   810dc:	94000291 	bl	81b20 <CUSBRequest::~CUSBRequest()>
   810e0:	2a1403e0 	mov	w0, w20
   810e4:	a94153f3 	ldp	x19, x20, [sp, #16]
   810e8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   810ec:	a94363f7 	ldp	x23, x24, [sp, #48]
   810f0:	a9446bf9 	ldp	x25, x26, [sp, #64]
   810f4:	f9402bfb 	ldr	x27, [sp, #80]
   810f8:	a8cf7bfd 	ldp	x29, x30, [sp], #240
   810fc:	d65f03c0 	ret
   81100:	910183e0 	add	x0, sp, #0x60
   81104:	940002a7 	bl	81ba0 <CUSBRequest::GetResultLength() const>
   81108:	2a0003f4 	mov	w20, w0
   8110c:	17fffff0 	b	810cc <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xbc>
   81110:	f0000161 	adrp	x1, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   81114:	f0000160 	adrp	x0, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   81118:	913e0021 	add	x1, x1, #0xf80
   8111c:	913fa000 	add	x0, x0, #0xfe8
   81120:	52800f22 	mov	w2, #0x79                  	// #121
   81124:	94007307 	bl	9dd40 <assertion_failed>
   81128:	d503201f 	nop
   8112c:	d503201f 	nop

0000000000081130 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>:
   81130:	12001cc8 	and	w8, w6, #0xff
   81134:	12003ce9 	and	w9, w7, #0xffff
   81138:	12001c63 	and	w3, w3, #0xff
   8113c:	53181c42 	ubfiz	w2, w2, #8, #8
   81140:	aa0403e6 	mov	x6, x4
   81144:	2a0503e7 	mov	w7, w5
   81148:	2a030044 	orr	w4, w2, w3
   8114c:	2a0903e5 	mov	w5, w9
   81150:	2a0803e2 	mov	w2, w8
   81154:	528000c3 	mov	w3, #0x6                   	// #6
   81158:	17ffffae 	b	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8115c:	d503201f 	nop

0000000000081160 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>:
   81160:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   81164:	12001c44 	and	w4, w2, #0xff
   81168:	910003fd 	mov	x29, sp
   8116c:	52800007 	mov	w7, #0x0                   	// #0
   81170:	d2800006 	mov	x6, #0x0                   	// #0
   81174:	52800005 	mov	w5, #0x0                   	// #0
   81178:	528000a3 	mov	w3, #0x5                   	// #5
   8117c:	52800002 	mov	w2, #0x0                   	// #0
   81180:	97ffffa4 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   81184:	37f800e0 	tbnz	w0, #31, 811a0 <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)+0x40>
   81188:	940097da 	bl	a70f0 <CTimer::Get()>
   8118c:	52800640 	mov	w0, #0x32                  	// #50
   81190:	9400977c 	bl	a6f80 <CTimer::SimpleMsDelay(unsigned int)>
   81194:	52800020 	mov	w0, #0x1                   	// #1
   81198:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8119c:	d65f03c0 	ret
   811a0:	52800000 	mov	w0, #0x0                   	// #0
   811a4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   811a8:	d65f03c0 	ret
   811ac:	d503201f 	nop

00000000000811b0 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>:
   811b0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   811b4:	12001c44 	and	w4, w2, #0xff
   811b8:	910003fd 	mov	x29, sp
   811bc:	52800007 	mov	w7, #0x0                   	// #0
   811c0:	d2800006 	mov	x6, #0x0                   	// #0
   811c4:	52800005 	mov	w5, #0x0                   	// #0
   811c8:	52800123 	mov	w3, #0x9                   	// #9
   811cc:	52800002 	mov	w2, #0x0                   	// #0
   811d0:	97ffff90 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   811d4:	37f800e0 	tbnz	w0, #31, 811f0 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)+0x40>
   811d8:	940097c6 	bl	a70f0 <CTimer::Get()>
   811dc:	52800640 	mov	w0, #0x32                  	// #50
   811e0:	94009768 	bl	a6f80 <CTimer::SimpleMsDelay(unsigned int)>
   811e4:	52800020 	mov	w0, #0x1                   	// #1
   811e8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   811ec:	d65f03c0 	ret
   811f0:	52800000 	mov	w0, #0x0                   	// #0
   811f4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   811f8:	d65f03c0 	ret
   811fc:	d503201f 	nop

0000000000081200 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>:
   81200:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
   81204:	910003fd 	mov	x29, sp
   81208:	a90153f3 	stp	x19, x20, [sp, #16]
   8120c:	aa0003f3 	mov	x19, x0
   81210:	2a0403f4 	mov	w20, w4
   81214:	910083e0 	add	x0, sp, #0x20
   81218:	d2800004 	mov	x4, #0x0                   	// #0
   8121c:	94000221 	bl	81aa0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   81220:	f9400263 	ldr	x3, [x19]
   81224:	2a1403e2 	mov	w2, w20
   81228:	aa1303e0 	mov	x0, x19
   8122c:	910083e1 	add	x1, sp, #0x20
   81230:	f9401063 	ldr	x3, [x3, #32]
   81234:	d63f0060 	blr	x3
   81238:	72001c1f 	tst	w0, #0xff
   8123c:	54000140 	b.eq	81264 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x64>  // b.none
   81240:	910083e0 	add	x0, sp, #0x20
   81244:	94000257 	bl	81ba0 <CUSBRequest::GetResultLength() const>
   81248:	2a0003f3 	mov	w19, w0
   8124c:	910083e0 	add	x0, sp, #0x20
   81250:	94000234 	bl	81b20 <CUSBRequest::~CUSBRequest()>
   81254:	2a1303e0 	mov	w0, w19
   81258:	a94153f3 	ldp	x19, x20, [sp, #16]
   8125c:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   81260:	d65f03c0 	ret
   81264:	12800013 	mov	w19, #0xffffffff            	// #-1
   81268:	17fffff9 	b	8124c <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x4c>
   8126c:	d503201f 	nop

0000000000081270 <CUSBHostController::IsPlugAndPlay() const>:
   81270:	39402000 	ldrb	w0, [x0, #8]
   81274:	d65f03c0 	ret
   81278:	d503201f 	nop
   8127c:	d503201f 	nop

0000000000081280 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)>:
   81280:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   81284:	910003fd 	mov	x29, sp
   81288:	a90153f3 	stp	x19, x20, [sp, #16]
   8128c:	a9025bf5 	stp	x21, x22, [sp, #32]
   81290:	aa0003f5 	mov	x21, x0
   81294:	39402000 	ldrb	w0, [x0, #8]
   81298:	340004c0 	cbz	w0, 81330 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0xb0>
   8129c:	aa0103f3 	mov	x19, x1
   812a0:	b4000541 	cbz	x1, 81348 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0xc8>
   812a4:	d2800200 	mov	x0, #0x10                  	// #16
   812a8:	94009bee 	bl	a8260 <operator new(unsigned long)>
   812ac:	52800022 	mov	w2, #0x1                   	// #1
   812b0:	b9401aa1 	ldr	w1, [x21, #24]
   812b4:	aa0003f6 	mov	x22, x0
   812b8:	f9000413 	str	x19, [x0, #8]
   812bc:	39000002 	strb	w2, [x0]
   812c0:	350002a1 	cbnz	w1, 81314 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0x94>
   812c4:	910042b3 	add	x19, x21, #0x10
   812c8:	aa1303e0 	mov	x0, x19
   812cc:	94007f71 	bl	a1090 <CPtrList::GetFirst() const>
   812d0:	aa0003e1 	mov	x1, x0
   812d4:	b4000460 	cbz	x0, 81360 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0xe0>
   812d8:	aa1303e0 	mov	x0, x19
   812dc:	aa0103f4 	mov	x20, x1
   812e0:	94007f70 	bl	a10a0 <CPtrList::GetNext(TPtrListElement*) const>
   812e4:	aa0003e1 	mov	x1, x0
   812e8:	b5ffff80 	cbnz	x0, 812d8 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0x58>
   812ec:	aa1303e0 	mov	x0, x19
   812f0:	aa1603e2 	mov	x2, x22
   812f4:	aa1403e1 	mov	x1, x20
   812f8:	94007fda 	bl	a1260 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   812fc:	b9401aa0 	ldr	w0, [x21, #24]
   81300:	35000100 	cbnz	w0, 81320 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0xa0>
   81304:	a94153f3 	ldp	x19, x20, [sp, #16]
   81308:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8130c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81310:	d65f03c0 	ret
   81314:	2a0103e0 	mov	w0, w1
   81318:	94009f8a 	bl	a9140 <EnterCritical>
   8131c:	17ffffea 	b	812c4 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0x44>
   81320:	a94153f3 	ldp	x19, x20, [sp, #16]
   81324:	a9425bf5 	ldp	x21, x22, [sp, #32]
   81328:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8132c:	14009fb5 	b	a9200 <LeaveCritical>
   81330:	f0000161 	adrp	x1, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   81334:	f0000160 	adrp	x0, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   81338:	913e0021 	add	x1, x1, #0xf80
   8133c:	913e6000 	add	x0, x0, #0xf98
   81340:	52801802 	mov	w2, #0xc0                  	// #192
   81344:	9400727f 	bl	9dd40 <assertion_failed>
   81348:	f0000161 	adrp	x1, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   8134c:	f0000160 	adrp	x0, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   81350:	913e0021 	add	x1, x1, #0xf80
   81354:	913f0000 	add	x0, x0, #0xfc0
   81358:	52801822 	mov	w2, #0xc1                  	// #193
   8135c:	94007279 	bl	9dd40 <assertion_failed>
   81360:	d2800014 	mov	x20, #0x0                   	// #0
   81364:	17ffffe2 	b	812ec <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0x6c>
   81368:	d503201f 	nop
   8136c:	d503201f 	nop

0000000000081370 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)>:
   81370:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   81374:	910003fd 	mov	x29, sp
   81378:	a90153f3 	stp	x19, x20, [sp, #16]
   8137c:	a9025bf5 	stp	x21, x22, [sp, #32]
   81380:	aa0003f5 	mov	x21, x0
   81384:	39402000 	ldrb	w0, [x0, #8]
   81388:	340004c0 	cbz	w0, 81420 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0xb0>
   8138c:	aa0103f3 	mov	x19, x1
   81390:	b4000541 	cbz	x1, 81438 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0xc8>
   81394:	d2800200 	mov	x0, #0x10                  	// #16
   81398:	94009bb2 	bl	a8260 <operator new(unsigned long)>
   8139c:	b9401aa1 	ldr	w1, [x21, #24]
   813a0:	aa0003f6 	mov	x22, x0
   813a4:	3900001f 	strb	wzr, [x0]
   813a8:	f9000413 	str	x19, [x0, #8]
   813ac:	350002c1 	cbnz	w1, 81404 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0x94>
   813b0:	910042b3 	add	x19, x21, #0x10
   813b4:	aa1303e0 	mov	x0, x19
   813b8:	94007f36 	bl	a1090 <CPtrList::GetFirst() const>
   813bc:	aa0003e1 	mov	x1, x0
   813c0:	b4000480 	cbz	x0, 81450 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0xe0>
   813c4:	d503201f 	nop
   813c8:	aa1303e0 	mov	x0, x19
   813cc:	aa0103f4 	mov	x20, x1
   813d0:	94007f34 	bl	a10a0 <CPtrList::GetNext(TPtrListElement*) const>
   813d4:	aa0003e1 	mov	x1, x0
   813d8:	b5ffff80 	cbnz	x0, 813c8 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0x58>
   813dc:	aa1303e0 	mov	x0, x19
   813e0:	aa1603e2 	mov	x2, x22
   813e4:	aa1403e1 	mov	x1, x20
   813e8:	94007f9e 	bl	a1260 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   813ec:	b9401aa0 	ldr	w0, [x21, #24]
   813f0:	35000100 	cbnz	w0, 81410 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0xa0>
   813f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   813f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   813fc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81400:	d65f03c0 	ret
   81404:	2a0103e0 	mov	w0, w1
   81408:	94009f4e 	bl	a9140 <EnterCritical>
   8140c:	17ffffe9 	b	813b0 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0x40>
   81410:	a94153f3 	ldp	x19, x20, [sp, #16]
   81414:	a9425bf5 	ldp	x21, x22, [sp, #32]
   81418:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8141c:	14009f79 	b	a9200 <LeaveCritical>
   81420:	f0000161 	adrp	x1, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   81424:	f0000160 	adrp	x0, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   81428:	913e0021 	add	x1, x1, #0xf80
   8142c:	913e6000 	add	x0, x0, #0xf98
   81430:	52801b22 	mov	w2, #0xd9                  	// #217
   81434:	94007243 	bl	9dd40 <assertion_failed>
   81438:	f0000161 	adrp	x1, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   8143c:	f0000160 	adrp	x0, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   81440:	913e0021 	add	x1, x1, #0xf80
   81444:	913f6000 	add	x0, x0, #0xfd8
   81448:	52801b42 	mov	w2, #0xda                  	// #218
   8144c:	9400723d 	bl	9dd40 <assertion_failed>
   81450:	d2800014 	mov	x20, #0x0                   	// #0
   81454:	17ffffe2 	b	813dc <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0x6c>
   81458:	d503201f 	nop
   8145c:	d503201f 	nop

0000000000081460 <CUSBHostController::Get()>:
   81460:	900001e0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   81464:	f9404400 	ldr	x0, [x0, #136]
   81468:	b4000040 	cbz	x0, 81470 <CUSBHostController::Get()+0x10>
   8146c:	d65f03c0 	ret
   81470:	f0000161 	adrp	x1, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   81474:	f0000160 	adrp	x0, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   81478:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8147c:	913e0021 	add	x1, x1, #0xf80
   81480:	910003fd 	mov	x29, sp
   81484:	913ae000 	add	x0, x0, #0xeb8
   81488:	52801e82 	mov	w2, #0xf4                  	// #244
   8148c:	9400722d 	bl	9dd40 <assertion_failed>

0000000000081490 <CUSBHostController::CancelDeviceTransactions(CUSBDevice*)>:
   81490:	d65f03c0 	ret
	...

00000000000814a0 <proxy_handler(unsigned char, unsigned char const*, void*)>:
   814a0:	aa0203f0 	mov	x16, x2
   814a4:	d61f0200 	br	x16
   814a8:	d503201f 	nop
   814ac:	d503201f 	nop

00000000000814b0 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   814b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   814b4:	910003fd 	mov	x29, sp
   814b8:	900001a1 	adrp	x1, b5000 <_etext+0x4158>
   814bc:	9135a021 	add	x1, x1, #0xd68
   814c0:	f9000bf3 	str	x19, [sp, #16]
   814c4:	aa0003f3 	mov	x19, x0
   814c8:	b9459400 	ldr	w0, [x0, #1428]
   814cc:	f9000261 	str	x1, [x19]
   814d0:	f902be7f 	str	xzr, [x19, #1400]
   814d4:	350000e0 	cbnz	w0, 814f0 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x40>
   814d8:	91012260 	add	x0, x19, #0x48
   814dc:	94006b19 	bl	9c140 <CKeyboardBehaviour::~CKeyboardBehaviour()>
   814e0:	aa1303e0 	mov	x0, x19
   814e4:	f9400bf3 	ldr	x19, [sp, #16]
   814e8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   814ec:	140030e1 	b	8d870 <CUSBHIDDevice::~CUSBHIDDevice()>
   814f0:	940075f8 	bl	9ecd0 <CDeviceNameService::Get()>
   814f4:	900001a1 	adrp	x1, b5000 <_etext+0x4158>
   814f8:	b9459662 	ldr	w2, [x19, #1428]
   814fc:	52800003 	mov	w3, #0x0                   	// #0
   81500:	91374021 	add	x1, x1, #0xdd0
   81504:	9400761f 	bl	9ed80 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   81508:	b9459661 	ldr	w1, [x19, #1428]
   8150c:	900001e0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   81510:	91024000 	add	x0, x0, #0x90
   81514:	94009d2f 	bl	a89d0 <CNumberPool::FreeNumber(unsigned int)>
   81518:	91012260 	add	x0, x19, #0x48
   8151c:	94006b09 	bl	9c140 <CKeyboardBehaviour::~CKeyboardBehaviour()>
   81520:	aa1303e0 	mov	x0, x19
   81524:	f9400bf3 	ldr	x19, [sp, #16]
   81528:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8152c:	140030d1 	b	8d870 <CUSBHIDDevice::~CUSBHIDDevice()>

0000000000081530 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   81530:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81534:	910003fd 	mov	x29, sp
   81538:	f9000bf3 	str	x19, [sp, #16]
   8153c:	aa0003f3 	mov	x19, x0
   81540:	97ffffdc 	bl	814b0 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>
   81544:	aa1303e0 	mov	x0, x19
   81548:	d280b301 	mov	x1, #0x598                 	// #1432
   8154c:	f9400bf3 	ldr	x19, [sp, #16]
   81550:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81554:	14009b6b 	b	a8300 <operator delete(void*, unsigned long)>
   81558:	d503201f 	nop
   8155c:	d503201f 	nop

0000000000081560 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)>:
   81560:	f100003f 	cmp	x1, #0x0
   81564:	7a481840 	ccmp	w2, #0x8, #0x0, ne	// ne = any
   81568:	54000d81 	b.ne	81718 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x1b8>  // b.any
   8156c:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   81570:	910003fd 	mov	x29, sp
   81574:	a9025bf5 	stp	x21, x22, [sp, #32]
   81578:	aa0003f6 	mov	x22, x0
   8157c:	aa0103f5 	mov	x21, x1
   81580:	a90363f7 	stp	x23, x24, [sp, #48]
   81584:	aa0103f8 	mov	x24, x1
   81588:	f942bec3 	ldr	x3, [x22, #1400]
   8158c:	384026a0 	ldrb	w0, [x21], #2
   81590:	b4000be3 	cbz	x3, 8170c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x1ac>
   81594:	aa1503e1 	mov	x1, x21
   81598:	f942c2c2 	ldr	x2, [x22, #1408]
   8159c:	d63f0060 	blr	x3
   815a0:	395622c0 	ldrb	w0, [x22, #1416]
   815a4:	34000ac0 	cbz	w0, 816fc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x19c>
   815a8:	a90153f3 	stp	x19, x20, [sp, #16]
   815ac:	a9046bf9 	stp	x25, x26, [sp, #64]
   815b0:	39400300 	ldrb	w0, [x24]
   815b4:	52801013 	mov	w19, #0x80                  	// #128
   815b8:	52800014 	mov	w20, #0x0                   	// #0
   815bc:	52800037 	mov	w23, #0x1                   	// #1
   815c0:	910122d9 	add	x25, x22, #0x48
   815c4:	14000008 	b	815e4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x84>
   815c8:	35000922 	cbnz	w2, 816ec <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x18c>
   815cc:	11000694 	add	w20, w20, #0x1
   815d0:	11000673 	add	w19, w19, #0x1
   815d4:	7100229f 	cmp	w20, #0x8
   815d8:	12001e73 	and	w19, w19, #0xff
   815dc:	54000220 	b.eq	81620 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc0>  // b.none
   815e0:	39400300 	ldrb	w0, [x24]
   815e4:	1ad422e3 	lsl	w3, w23, w20
   815e8:	395626c2 	ldrb	w2, [x22, #1417]
   815ec:	6a03001f 	tst	w0, w3
   815f0:	0a030042 	and	w2, w2, w3
   815f4:	54fffea0 	b.eq	815c8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x68>  // b.none
   815f8:	35fffea2 	cbnz	w2, 815cc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x6c>
   815fc:	2a1303e1 	mov	w1, w19
   81600:	aa1903e0 	mov	x0, x25
   81604:	11000694 	add	w20, w20, #0x1
   81608:	11000673 	add	w19, w19, #0x1
   8160c:	94006b61 	bl	9c390 <CKeyboardBehaviour::KeyPressed(unsigned char)>
   81610:	7100229f 	cmp	w20, #0x8
   81614:	12001e73 	and	w19, w19, #0xff
   81618:	54fffe41 	b.ne	815e0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x80>  // b.any
   8161c:	d503201f 	nop
   81620:	91162ed9 	add	x25, x22, #0x58b
   81624:	911646d4 	add	x20, x22, #0x591
   81628:	aa1903f3 	mov	x19, x25
   8162c:	91002317 	add	x23, x24, #0x8
   81630:	910122da 	add	x26, x22, #0x48
   81634:	14000004 	b	81644 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xe4>
   81638:	91000673 	add	x19, x19, #0x1
   8163c:	eb14027f 	cmp	x19, x20
   81640:	540001c0 	b.eq	81678 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x118>  // b.none
   81644:	39400261 	ldrb	w1, [x19]
   81648:	34ffff81 	cbz	w1, 81638 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xd8>
   8164c:	aa1503e2 	mov	x2, x21
   81650:	38401443 	ldrb	w3, [x2], #1
   81654:	6b01007f 	cmp	w3, w1
   81658:	54ffff00 	b.eq	81638 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xd8>  // b.none
   8165c:	eb0202ff 	cmp	x23, x2
   81660:	54ffff81 	b.ne	81650 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xf0>  // b.any
   81664:	aa1a03e0 	mov	x0, x26
   81668:	91000673 	add	x19, x19, #0x1
   8166c:	94006b5d 	bl	9c3e0 <CKeyboardBehaviour::KeyReleased(unsigned char)>
   81670:	eb14027f 	cmp	x19, x20
   81674:	54fffe81 	b.ne	81644 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xe4>  // b.any
   81678:	aa1503f3 	mov	x19, x21
   8167c:	910122d5 	add	x21, x22, #0x48
   81680:	14000004 	b	81690 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x130>
   81684:	91000673 	add	x19, x19, #0x1
   81688:	eb1302ff 	cmp	x23, x19
   8168c:	540001e0 	b.eq	816c8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x168>  // b.none
   81690:	39400261 	ldrb	w1, [x19]
   81694:	34ffff81 	cbz	w1, 81684 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x124>
   81698:	aa1903e2 	mov	x2, x25
   8169c:	d503201f 	nop
   816a0:	38401443 	ldrb	w3, [x2], #1
   816a4:	6b01007f 	cmp	w3, w1
   816a8:	54fffee0 	b.eq	81684 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x124>  // b.none
   816ac:	eb14005f 	cmp	x2, x20
   816b0:	54ffff81 	b.ne	816a0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x140>  // b.any
   816b4:	aa1503e0 	mov	x0, x21
   816b8:	91000673 	add	x19, x19, #0x1
   816bc:	94006b35 	bl	9c390 <CKeyboardBehaviour::KeyPressed(unsigned char)>
   816c0:	eb1302ff 	cmp	x23, x19
   816c4:	54fffe61 	b.ne	81690 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x130>  // b.any
   816c8:	aa1803e1 	mov	x1, x24
   816cc:	911626c0 	add	x0, x22, #0x589
   816d0:	a94153f3 	ldp	x19, x20, [sp, #16]
   816d4:	d2800102 	mov	x2, #0x8                   	// #8
   816d8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   816dc:	a94363f7 	ldp	x23, x24, [sp, #48]
   816e0:	a9446bf9 	ldp	x25, x26, [sp, #64]
   816e4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   816e8:	14009858 	b	a7848 <memcpy>
   816ec:	2a1303e1 	mov	w1, w19
   816f0:	aa1903e0 	mov	x0, x25
   816f4:	94006b3b 	bl	9c3e0 <CKeyboardBehaviour::KeyReleased(unsigned char)>
   816f8:	17ffffb5 	b	815cc <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x6c>
   816fc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   81700:	a94363f7 	ldp	x23, x24, [sp, #48]
   81704:	a8c57bfd 	ldp	x29, x30, [sp], #80
   81708:	d65f03c0 	ret
   8170c:	a90153f3 	stp	x19, x20, [sp, #16]
   81710:	a9046bf9 	stp	x25, x26, [sp, #64]
   81714:	17ffffa8 	b	815b4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x54>
   81718:	d65f03c0 	ret
   8171c:	d503201f 	nop

0000000000081720 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>:
   81720:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81724:	52800102 	mov	w2, #0x8                   	// #8
   81728:	910003fd 	mov	x29, sp
   8172c:	f9000bf3 	str	x19, [sp, #16]
   81730:	aa0003f3 	mov	x19, x0
   81734:	94003037 	bl	8d810 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   81738:	aa1303e0 	mov	x0, x19
   8173c:	900001a1 	adrp	x1, b5000 <_etext+0x4158>
   81740:	9135a021 	add	x1, x1, #0xd68
   81744:	f8048401 	str	x1, [x0], #72
   81748:	94006a76 	bl	9c120 <CKeyboardBehaviour::CKeyboardBehaviour()>
   8174c:	91162660 	add	x0, x19, #0x589
   81750:	d2800102 	mov	x2, #0x8                   	// #8
   81754:	f902be7f 	str	xzr, [x19, #1400]
   81758:	52800001 	mov	w1, #0x0                   	// #0
   8175c:	f902c27f 	str	xzr, [x19, #1408]
   81760:	3916227f 	strb	wzr, [x19, #1416]
   81764:	3916467f 	strb	wzr, [x19, #1425]
   81768:	b905967f 	str	wzr, [x19, #1428]
   8176c:	f9400bf3 	ldr	x19, [sp, #16]
   81770:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81774:	1400981d 	b	a77e8 <memset>
   81778:	d503201f 	nop
   8177c:	d503201f 	nop

0000000000081780 <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>:
   81780:	91012000 	add	x0, x0, #0x48
   81784:	14006a77 	b	9c160 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>
   81788:	d503201f 	nop
   8178c:	d503201f 	nop

0000000000081790 <CUSBKeyboardDevice::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   81790:	91012000 	add	x0, x0, #0x48
   81794:	14006a7f 	b	9c190 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>
   81798:	d503201f 	nop
   8179c:	d503201f 	nop

00000000000817a0 <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>:
   817a0:	91012000 	add	x0, x0, #0x48
   817a4:	14006a87 	b	9c1c0 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>
   817a8:	d503201f 	nop
   817ac:	d503201f 	nop

00000000000817b0 <CUSBKeyboardDevice::GetLEDStatus() const>:
   817b0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   817b4:	91012000 	add	x0, x0, #0x48
   817b8:	910003fd 	mov	x29, sp
   817bc:	94006a8d 	bl	9c1f0 <CKeyboardBehaviour::GetLEDStatus() const>
   817c0:	12000800 	and	w0, w0, #0x7
   817c4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   817c8:	d65f03c0 	ret
   817cc:	d503201f 	nop

00000000000817d0 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*, void*), bool, void*)>:
   817d0:	b40000c1 	cbz	x1, 817e8 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*, void*), bool, void*)+0x18>
   817d4:	12001c42 	and	w2, w2, #0xff
   817d8:	f902bc01 	str	x1, [x0, #1400]
   817dc:	f902c003 	str	x3, [x0, #1408]
   817e0:	39162002 	strb	w2, [x0, #1416]
   817e4:	d65f03c0 	ret
   817e8:	f0000161 	adrp	x1, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   817ec:	90000180 	adrp	x0, b1000 <_etext+0x158>
   817f0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   817f4:	913fe021 	add	x1, x1, #0xff8
   817f8:	910003fd 	mov	x29, sp
   817fc:	91002000 	add	x0, x0, #0x8
   81800:	528010e2 	mov	w2, #0x87                  	// #135
   81804:	9400714f 	bl	9dd40 <assertion_failed>
   81808:	d503201f 	nop
   8180c:	d503201f 	nop

0000000000081810 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*), bool)>:
   81810:	90000003 	adrp	x3, 81000 <CUSBHostController::~CUSBHostController()+0x30>
   81814:	91128063 	add	x3, x3, #0x4a0
   81818:	f902c001 	str	x1, [x0, #1408]
   8181c:	39162002 	strb	w2, [x0, #1416]
   81820:	f902bc03 	str	x3, [x0, #1400]
   81824:	d65f03c0 	ret
   81828:	d503201f 	nop
   8182c:	d503201f 	nop

0000000000081830 <CUSBKeyboardDevice::UnregisterKeyStatusHandlerRaw()>:
   81830:	f902bc1f 	str	xzr, [x0, #1400]
   81834:	f902c01f 	str	xzr, [x0, #1408]
   81838:	d65f03c0 	ret
   8183c:	d503201f 	nop

0000000000081840 <CUSBKeyboardDevice::SetLEDs(unsigned char)>:
   81840:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   81844:	910003fd 	mov	x29, sp
   81848:	a90153f3 	stp	x19, x20, [sp, #16]
   8184c:	9101bff3 	add	x19, sp, #0x6f
   81850:	aa0003f4 	mov	x20, x0
   81854:	927ae673 	and	x19, x19, #0xffffffffffffffc0
   81858:	f90013f5 	str	x21, [sp, #32]
   8185c:	a9007e7f 	stp	xzr, xzr, [x19]
   81860:	39000261 	strb	w1, [x19]
   81864:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   81868:	a9027e7f 	stp	xzr, xzr, [x19, #32]
   8186c:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   81870:	94002410 	bl	8a8b0 <CUSBFunction::GetHost() const>
   81874:	aa0003f5 	mov	x21, x0
   81878:	aa1403e0 	mov	x0, x20
   8187c:	94002401 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   81880:	aa0003e1 	mov	x1, x0
   81884:	aa1403e0 	mov	x0, x20
   81888:	aa0103f4 	mov	x20, x1
   8188c:	94002475 	bl	8aa60 <CUSBFunction::GetInterfaceNumber() const>
   81890:	12001c05 	and	w5, w0, #0xff
   81894:	aa1303e6 	mov	x6, x19
   81898:	aa1403e1 	mov	x1, x20
   8189c:	aa1503e0 	mov	x0, x21
   818a0:	52800027 	mov	w7, #0x1                   	// #1
   818a4:	52804004 	mov	w4, #0x200                 	// #512
   818a8:	52800123 	mov	w3, #0x9                   	// #9
   818ac:	52800422 	mov	w2, #0x21                  	// #33
   818b0:	97fffdd8 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   818b4:	2a2003e0 	mvn	w0, w0
   818b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   818bc:	531f7c00 	lsr	w0, w0, #31
   818c0:	f94013f5 	ldr	x21, [sp, #32]
   818c4:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   818c8:	d65f03c0 	ret
   818cc:	d503201f 	nop

00000000000818d0 <CUSBKeyboardDevice::Configure()>:
   818d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   818d4:	52800001 	mov	w1, #0x0                   	// #0
   818d8:	910003fd 	mov	x29, sp
   818dc:	a90153f3 	stp	x19, x20, [sp, #16]
   818e0:	aa0003f3 	mov	x19, x0
   818e4:	9400300f 	bl	8d920 <CUSBHIDDevice::ConfigureHID(unsigned int)>
   818e8:	72001c1f 	tst	w0, #0xff
   818ec:	540002c0 	b.eq	81944 <CUSBKeyboardDevice::Configure()+0x74>  // b.none
   818f0:	39564661 	ldrb	w1, [x19, #1425]
   818f4:	aa1303e0 	mov	x0, x19
   818f8:	900001b4 	adrp	x20, b5000 <_etext+0x4158>
   818fc:	91374294 	add	x20, x20, #0xdd0
   81900:	97ffffd0 	bl	81840 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   81904:	900001e0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   81908:	91002282 	add	x2, x20, #0x8
   8190c:	52800021 	mov	w1, #0x1                   	// #1
   81910:	91024000 	add	x0, x0, #0x90
   81914:	94009bff 	bl	a8910 <CNumberPool::AllocateNumber(bool, char const*)>
   81918:	b9059660 	str	w0, [x19, #1428]
   8191c:	940074ed 	bl	9ecd0 <CDeviceNameService::Get()>
   81920:	b9459662 	ldr	w2, [x19, #1428]
   81924:	aa1403e1 	mov	x1, x20
   81928:	aa1303e3 	mov	x3, x19
   8192c:	52800004 	mov	w4, #0x0                   	// #0
   81930:	940074f4 	bl	9ed00 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   81934:	aa1303e0 	mov	x0, x19
   81938:	a94153f3 	ldp	x19, x20, [sp, #16]
   8193c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81940:	14003138 	b	8de20 <CUSBHIDDevice::StartRequest()>
   81944:	94007833 	bl	9fa10 <CLogger::Get()>
   81948:	900001a1 	adrp	x1, b5000 <_etext+0x4158>
   8194c:	91374021 	add	x1, x1, #0xdd0
   81950:	90000183 	adrp	x3, b1000 <_etext+0x158>
   81954:	91002021 	add	x1, x1, #0x8
   81958:	9100a063 	add	x3, x3, #0x28
   8195c:	52800022 	mov	w2, #0x1                   	// #1
   81960:	94007a18 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   81964:	52800000 	mov	w0, #0x0                   	// #0
   81968:	a94153f3 	ldp	x19, x20, [sp, #16]
   8196c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81970:	d65f03c0 	ret
   81974:	d503201f 	nop
   81978:	d503201f 	nop
   8197c:	d503201f 	nop

0000000000081980 <CUSBKeyboardDevice::UpdateLEDs()>:
   81980:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81984:	910003fd 	mov	x29, sp
   81988:	f9000bf3 	str	x19, [sp, #16]
   8198c:	aa0003f3 	mov	x19, x0
   81990:	f942bc00 	ldr	x0, [x0, #1400]
   81994:	b4000060 	cbz	x0, 819a0 <CUSBKeyboardDevice::UpdateLEDs()+0x20>
   81998:	39562260 	ldrb	w0, [x19, #1416]
   8199c:	340000e0 	cbz	w0, 819b8 <CUSBKeyboardDevice::UpdateLEDs()+0x38>
   819a0:	91012260 	add	x0, x19, #0x48
   819a4:	94006a13 	bl	9c1f0 <CKeyboardBehaviour::GetLEDStatus() const>
   819a8:	39564661 	ldrb	w1, [x19, #1425]
   819ac:	12000802 	and	w2, w0, #0x7
   819b0:	6b02003f 	cmp	w1, w2
   819b4:	54000081 	b.ne	819c4 <CUSBKeyboardDevice::UpdateLEDs()+0x44>  // b.any
   819b8:	f9400bf3 	ldr	x19, [sp, #16]
   819bc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   819c0:	d65f03c0 	ret
   819c4:	2a0203e1 	mov	w1, w2
   819c8:	aa1303e0 	mov	x0, x19
   819cc:	39164662 	strb	w2, [x19, #1425]
   819d0:	97ffff9c 	bl	81840 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   819d4:	72001c1f 	tst	w0, #0xff
   819d8:	54ffff01 	b.ne	819b8 <CUSBKeyboardDevice::UpdateLEDs()+0x38>  // b.any
   819dc:	9400780d 	bl	9fa10 <CLogger::Get()>
   819e0:	900001a1 	adrp	x1, b5000 <_etext+0x4158>
   819e4:	91374021 	add	x1, x1, #0xdd0
   819e8:	f9400bf3 	ldr	x19, [sp, #16]
   819ec:	90000183 	adrp	x3, b1000 <_etext+0x158>
   819f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   819f4:	91002021 	add	x1, x1, #0x8
   819f8:	91012063 	add	x3, x3, #0x48
   819fc:	52800022 	mov	w2, #0x1                   	// #1
   81a00:	140079f0 	b	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   81a04:	d503201f 	nop
   81a08:	d503201f 	nop
   81a0c:	d503201f 	nop

0000000000081a10 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)>:
   81a10:	12001c21 	and	w1, w1, #0xff
   81a14:	8b224002 	add	x2, x0, w2, uxtw
   81a18:	14000004 	b	81a28 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x18>
   81a1c:	38401403 	ldrb	w3, [x0], #1
   81a20:	6b01007f 	cmp	w3, w1
   81a24:	540000a0 	b.eq	81a38 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x28>  // b.none
   81a28:	eb02001f 	cmp	x0, x2
   81a2c:	54ffff81 	b.ne	81a1c <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0xc>  // b.any
   81a30:	52800000 	mov	w0, #0x0                   	// #0
   81a34:	d65f03c0 	ret
   81a38:	52800020 	mov	w0, #0x1                   	// #1
   81a3c:	d65f03c0 	ret

0000000000081a40 <CUSBFunction::GetHubInfo() const>:
   81a40:	d2800000 	mov	x0, #0x0                   	// #0
   81a44:	d65f03c0 	ret
	...

0000000000081a50 <_GLOBAL__sub_I__ZN18CUSBKeyboardDevice18s_DeviceNumberPoolE>:
   81a50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81a54:	910003fd 	mov	x29, sp
   81a58:	528007e2 	mov	w2, #0x3f                  	// #63
   81a5c:	52800021 	mov	w1, #0x1                   	// #1
   81a60:	f9000bf3 	str	x19, [sp, #16]
   81a64:	900001f3 	adrp	x19, bd000 <CNetDevice::s_SpeedString+0x18>
   81a68:	91024273 	add	x19, x19, #0x90
   81a6c:	aa1303e0 	mov	x0, x19
   81a70:	94009b8c 	bl	a88a0 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   81a74:	900001e2 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   81a78:	f0000120 	adrp	x0, a8000 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x20>
   81a7c:	aa1303e1 	mov	x1, x19
   81a80:	91074042 	add	x2, x2, #0x1d0
   81a84:	f9400bf3 	ldr	x19, [sp, #16]
   81a88:	91240000 	add	x0, x0, #0x900
   81a8c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81a90:	1400914c 	b	a5fc0 <__cxa_atexit>
	...

0000000000081aa0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>:
   81aa0:	d2c00125 	mov	x5, #0x900000000           	// #38654705664
   81aa4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   81aa8:	910003fd 	mov	x29, sp
   81aac:	a9001001 	stp	x1, x4, [x0]
   81ab0:	f9000802 	str	x2, [x0, #16]
   81ab4:	29037c03 	stp	w3, wzr, [x0, #24]
   81ab8:	f9001005 	str	x5, [x0, #32]
   81abc:	b900281f 	str	wzr, [x0, #40]
   81ac0:	a9077c1f 	stp	xzr, xzr, [x0, #112]
   81ac4:	f900401f 	str	xzr, [x0, #128]
   81ac8:	3902201f 	strb	wzr, [x0, #136]
   81acc:	b40000c1 	cbz	x1, 81ae4 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x44>
   81ad0:	7100007f 	cmp	w3, #0x0
   81ad4:	fa401840 	ccmp	x2, #0x0, #0x0, ne	// ne = any
   81ad8:	54000120 	b.eq	81afc <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x5c>  // b.none
   81adc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   81ae0:	d65f03c0 	ret
   81ae4:	90000181 	adrp	x1, b1000 <_etext+0x158>
   81ae8:	90000180 	adrp	x0, b1000 <_etext+0x158>
   81aec:	91018021 	add	x1, x1, #0x60
   81af0:	9101c000 	add	x0, x0, #0x70
   81af4:	528004a2 	mov	w2, #0x25                  	// #37
   81af8:	94007092 	bl	9dd40 <assertion_failed>
   81afc:	90000181 	adrp	x1, b1000 <_etext+0x158>
   81b00:	90000180 	adrp	x0, b1000 <_etext+0x158>
   81b04:	91018021 	add	x1, x1, #0x60
   81b08:	91022000 	add	x0, x0, #0x88
   81b0c:	528004c2 	mov	w2, #0x26                  	// #38
   81b10:	9400708c 	bl	9dd40 <assertion_failed>
   81b14:	d503201f 	nop
   81b18:	d503201f 	nop
   81b1c:	d503201f 	nop

0000000000081b20 <CUSBRequest::~CUSBRequest()>:
   81b20:	d65f03c0 	ret
   81b24:	d503201f 	nop
   81b28:	d503201f 	nop
   81b2c:	d503201f 	nop

0000000000081b30 <CUSBRequest::GetEndpoint() const>:
   81b30:	f9400000 	ldr	x0, [x0]
   81b34:	b4000040 	cbz	x0, 81b3c <CUSBRequest::GetEndpoint() const+0xc>
   81b38:	d65f03c0 	ret
   81b3c:	90000181 	adrp	x1, b1000 <_etext+0x158>
   81b40:	90000180 	adrp	x0, b1000 <_etext+0x158>
   81b44:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   81b48:	91018021 	add	x1, x1, #0x60
   81b4c:	910003fd 	mov	x29, sp
   81b50:	9101c000 	add	x0, x0, #0x70
   81b54:	52800662 	mov	w2, #0x33                  	// #51
   81b58:	9400707a 	bl	9dd40 <assertion_failed>
   81b5c:	d503201f 	nop

0000000000081b60 <CUSBRequest::SetStatus(int)>:
   81b60:	b9001c01 	str	w1, [x0, #28]
   81b64:	d65f03c0 	ret
   81b68:	d503201f 	nop
   81b6c:	d503201f 	nop

0000000000081b70 <CUSBRequest::SetResultLen(unsigned int)>:
   81b70:	b9002001 	str	w1, [x0, #32]
   81b74:	d65f03c0 	ret
   81b78:	d503201f 	nop
   81b7c:	d503201f 	nop

0000000000081b80 <CUSBRequest::SetUSBError(TUSBError)>:
   81b80:	b9002401 	str	w1, [x0, #36]
   81b84:	d65f03c0 	ret
   81b88:	d503201f 	nop
   81b8c:	d503201f 	nop

0000000000081b90 <CUSBRequest::GetStatus() const>:
   81b90:	b9401c00 	ldr	w0, [x0, #28]
   81b94:	d65f03c0 	ret
   81b98:	d503201f 	nop
   81b9c:	d503201f 	nop

0000000000081ba0 <CUSBRequest::GetResultLength() const>:
   81ba0:	b9401c01 	ldr	w1, [x0, #28]
   81ba4:	34000061 	cbz	w1, 81bb0 <CUSBRequest::GetResultLength() const+0x10>
   81ba8:	b9402000 	ldr	w0, [x0, #32]
   81bac:	d65f03c0 	ret
   81bb0:	90000181 	adrp	x1, b1000 <_etext+0x158>
   81bb4:	90000180 	adrp	x0, b1000 <_etext+0x158>
   81bb8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   81bbc:	91018021 	add	x1, x1, #0x60
   81bc0:	910003fd 	mov	x29, sp
   81bc4:	9102c000 	add	x0, x0, #0xb0
   81bc8:	528009a2 	mov	w2, #0x4d                  	// #77
   81bcc:	9400705d 	bl	9dd40 <assertion_failed>

0000000000081bd0 <CUSBRequest::GetUSBError() const>:
   81bd0:	b9401c01 	ldr	w1, [x0, #28]
   81bd4:	35000061 	cbnz	w1, 81be0 <CUSBRequest::GetUSBError() const+0x10>
   81bd8:	b9402400 	ldr	w0, [x0, #36]
   81bdc:	d65f03c0 	ret
   81be0:	90000181 	adrp	x1, b1000 <_etext+0x158>
   81be4:	90000180 	adrp	x0, b1000 <_etext+0x158>
   81be8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   81bec:	91018021 	add	x1, x1, #0x60
   81bf0:	910003fd 	mov	x29, sp
   81bf4:	91030000 	add	x0, x0, #0xc0
   81bf8:	52800a82 	mov	w2, #0x54                  	// #84
   81bfc:	94007051 	bl	9dd40 <assertion_failed>

0000000000081c00 <CUSBRequest::GetSetupData()>:
   81c00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81c04:	910003fd 	mov	x29, sp
   81c08:	f9000bf3 	str	x19, [sp, #16]
   81c0c:	aa0003f3 	mov	x19, x0
   81c10:	f9400000 	ldr	x0, [x0]
   81c14:	940021d3 	bl	8a360 <CUSBEndpoint::GetType() const>
   81c18:	350000c0 	cbnz	w0, 81c30 <CUSBRequest::GetSetupData()+0x30>
   81c1c:	f9400660 	ldr	x0, [x19, #8]
   81c20:	b4000140 	cbz	x0, 81c48 <CUSBRequest::GetSetupData()+0x48>
   81c24:	f9400bf3 	ldr	x19, [sp, #16]
   81c28:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81c2c:	d65f03c0 	ret
   81c30:	90000181 	adrp	x1, b1000 <_etext+0x158>
   81c34:	90000180 	adrp	x0, b1000 <_etext+0x158>
   81c38:	91018021 	add	x1, x1, #0x60
   81c3c:	91034000 	add	x0, x0, #0xd0
   81c40:	52800b62 	mov	w2, #0x5b                  	// #91
   81c44:	9400703f 	bl	9dd40 <assertion_failed>
   81c48:	90000181 	adrp	x1, b1000 <_etext+0x158>
   81c4c:	90000180 	adrp	x0, b1000 <_etext+0x158>
   81c50:	91018021 	add	x1, x1, #0x60
   81c54:	91040000 	add	x0, x0, #0x100
   81c58:	52800b82 	mov	w2, #0x5c                  	// #92
   81c5c:	94007039 	bl	9dd40 <assertion_failed>

0000000000081c60 <CUSBRequest::GetBuffer()>:
   81c60:	aa0003e1 	mov	x1, x0
   81c64:	f9400800 	ldr	x0, [x0, #16]
   81c68:	b4000040 	cbz	x0, 81c70 <CUSBRequest::GetBuffer()+0x10>
   81c6c:	d65f03c0 	ret
   81c70:	b9401821 	ldr	w1, [x1, #24]
   81c74:	34ffffc1 	cbz	w1, 81c6c <CUSBRequest::GetBuffer()+0xc>
   81c78:	90000181 	adrp	x1, b1000 <_etext+0x158>
   81c7c:	90000180 	adrp	x0, b1000 <_etext+0x158>
   81c80:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   81c84:	91018021 	add	x1, x1, #0x60
   81c88:	910003fd 	mov	x29, sp
   81c8c:	91022000 	add	x0, x0, #0x88
   81c90:	52800c62 	mov	w2, #0x63                  	// #99
   81c94:	9400702b 	bl	9dd40 <assertion_failed>
   81c98:	d503201f 	nop
   81c9c:	d503201f 	nop

0000000000081ca0 <CUSBRequest::GetBufLen() const>:
   81ca0:	b9401800 	ldr	w0, [x0, #24]
   81ca4:	d65f03c0 	ret
   81ca8:	d503201f 	nop
   81cac:	d503201f 	nop

0000000000081cb0 <CUSBRequest::AddIsoPacket(unsigned short)>:
   81cb0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   81cb4:	910003fd 	mov	x29, sp
   81cb8:	b9402802 	ldr	w2, [x0, #40]
   81cbc:	71007c5f 	cmp	w2, #0x1f
   81cc0:	54000188 	b.hi	81cf0 <CUSBRequest::AddIsoPacket(unsigned short)+0x40>  // b.pmore
   81cc4:	12003c21 	and	w1, w1, #0xffff
   81cc8:	34000201 	cbz	w1, 81d08 <CUSBRequest::AddIsoPacket(unsigned short)+0x58>
   81ccc:	b9401803 	ldr	w3, [x0, #24]
   81cd0:	6b03003f 	cmp	w1, w3
   81cd4:	54000268 	b.hi	81d20 <CUSBRequest::AddIsoPacket(unsigned short)+0x70>  // b.pmore
   81cd8:	11000443 	add	w3, w2, #0x1
   81cdc:	8b224402 	add	x2, x0, w2, uxtw #1
   81ce0:	b9002803 	str	w3, [x0, #40]
   81ce4:	79005841 	strh	w1, [x2, #44]
   81ce8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   81cec:	d65f03c0 	ret
   81cf0:	90000181 	adrp	x1, b1000 <_etext+0x158>
   81cf4:	90000180 	adrp	x0, b1000 <_etext+0x158>
   81cf8:	91018021 	add	x1, x1, #0x60
   81cfc:	91046000 	add	x0, x0, #0x118
   81d00:	52800e02 	mov	w2, #0x70                  	// #112
   81d04:	9400700f 	bl	9dd40 <assertion_failed>
   81d08:	90000181 	adrp	x1, b1000 <_etext+0x158>
   81d0c:	90000180 	adrp	x0, b1000 <_etext+0x158>
   81d10:	91018021 	add	x1, x1, #0x60
   81d14:	91050000 	add	x0, x0, #0x140
   81d18:	52800e22 	mov	w2, #0x71                  	// #113
   81d1c:	94007009 	bl	9dd40 <assertion_failed>
   81d20:	90000181 	adrp	x1, b1000 <_etext+0x158>
   81d24:	90000180 	adrp	x0, b1000 <_etext+0x158>
   81d28:	91018021 	add	x1, x1, #0x60
   81d2c:	91056000 	add	x0, x0, #0x158
   81d30:	52800e42 	mov	w2, #0x72                  	// #114
   81d34:	94007003 	bl	9dd40 <assertion_failed>
   81d38:	d503201f 	nop
   81d3c:	d503201f 	nop

0000000000081d40 <CUSBRequest::GetNumIsoPackets() const>:
   81d40:	b9402800 	ldr	w0, [x0, #40]
   81d44:	34000040 	cbz	w0, 81d4c <CUSBRequest::GetNumIsoPackets() const+0xc>
   81d48:	d65f03c0 	ret
   81d4c:	90000181 	adrp	x1, b1000 <_etext+0x158>
   81d50:	90000180 	adrp	x0, b1000 <_etext+0x158>
   81d54:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   81d58:	91018021 	add	x1, x1, #0x60
   81d5c:	910003fd 	mov	x29, sp
   81d60:	9105e000 	add	x0, x0, #0x178
   81d64:	52800f22 	mov	w2, #0x79                  	// #121
   81d68:	94006ff6 	bl	9dd40 <assertion_failed>
   81d6c:	d503201f 	nop

0000000000081d70 <CUSBRequest::GetIsoPacketSize(unsigned int) const>:
   81d70:	b9402802 	ldr	w2, [x0, #40]
   81d74:	6b01005f 	cmp	w2, w1
   81d78:	54000089 	b.ls	81d88 <CUSBRequest::GetIsoPacketSize(unsigned int) const+0x18>  // b.plast
   81d7c:	8b214401 	add	x1, x0, w1, uxtw #1
   81d80:	79405820 	ldrh	w0, [x1, #44]
   81d84:	d65f03c0 	ret
   81d88:	90000181 	adrp	x1, b1000 <_etext+0x158>
   81d8c:	90000180 	adrp	x0, b1000 <_etext+0x158>
   81d90:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   81d94:	91018021 	add	x1, x1, #0x60
   81d98:	910003fd 	mov	x29, sp
   81d9c:	91064000 	add	x0, x0, #0x190
   81da0:	52801002 	mov	w2, #0x80                  	// #128
   81da4:	94006fe7 	bl	9dd40 <assertion_failed>
   81da8:	d503201f 	nop
   81dac:	d503201f 	nop

0000000000081db0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>:
   81db0:	a9070801 	stp	x1, x2, [x0, #112]
   81db4:	f9004003 	str	x3, [x0, #128]
   81db8:	b4000041 	cbz	x1, 81dc0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)+0x10>
   81dbc:	d65f03c0 	ret
   81dc0:	90000181 	adrp	x1, b1000 <_etext+0x158>
   81dc4:	90000180 	adrp	x0, b1000 <_etext+0x158>
   81dc8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   81dcc:	91018021 	add	x1, x1, #0x60
   81dd0:	910003fd 	mov	x29, sp
   81dd4:	9106c000 	add	x0, x0, #0x1b0
   81dd8:	52801162 	mov	w2, #0x8b                  	// #139
   81ddc:	94006fd9 	bl	9dd40 <assertion_failed>

0000000000081de0 <CUSBRequest::CallCompletionRoutine()>:
   81de0:	f9403803 	ldr	x3, [x0, #112]
   81de4:	b4000083 	cbz	x3, 81df4 <CUSBRequest::CallCompletionRoutine()+0x14>
   81de8:	aa0303f0 	mov	x16, x3
   81dec:	a9478801 	ldp	x1, x2, [x0, #120]
   81df0:	d61f0200 	br	x16
   81df4:	90000181 	adrp	x1, b1000 <_etext+0x158>
   81df8:	90000180 	adrp	x0, b1000 <_etext+0x158>
   81dfc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   81e00:	91018021 	add	x1, x1, #0x60
   81e04:	910003fd 	mov	x29, sp
   81e08:	9106c000 	add	x0, x0, #0x1b0
   81e0c:	52801202 	mov	w2, #0x90                  	// #144
   81e10:	94006fcc 	bl	9dd40 <assertion_failed>
   81e14:	d503201f 	nop
   81e18:	d503201f 	nop
   81e1c:	d503201f 	nop

0000000000081e20 <CUSBRequest::SetCompleteOnNAK()>:
   81e20:	52800021 	mov	w1, #0x1                   	// #1
   81e24:	39022001 	strb	w1, [x0, #136]
   81e28:	d65f03c0 	ret
   81e2c:	d503201f 	nop

0000000000081e30 <CUSBRequest::IsCompleteOnNAK() const>:
   81e30:	39422000 	ldrb	w0, [x0, #136]
   81e34:	d65f03c0 	ret
   81e38:	d503201f 	nop
   81e3c:	d503201f 	nop

0000000000081e40 <CUSBRequest::operator new(unsigned long)>:
   81e40:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   81e44:	f102401f 	cmp	x0, #0x90
   81e48:	910003fd 	mov	x29, sp
   81e4c:	540000c1 	b.ne	81e64 <CUSBRequest::operator new(unsigned long)+0x24>  // b.any
   81e50:	900001e0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   81e54:	f9405000 	ldr	x0, [x0, #160]
   81e58:	b4000120 	cbz	x0, 81e7c <CUSBRequest::operator new(unsigned long)+0x3c>
   81e5c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   81e60:	14007118 	b	9e2c0 <CClassAllocator::Allocate()>
   81e64:	90000181 	adrp	x1, b1000 <_etext+0x158>
   81e68:	90000180 	adrp	x0, b1000 <_etext+0x158>
   81e6c:	91018021 	add	x1, x1, #0x60
   81e70:	91074000 	add	x0, x0, #0x1d0
   81e74:	528013e2 	mov	w2, #0x9f                  	// #159
   81e78:	94006fb2 	bl	9dd40 <assertion_failed>
   81e7c:	90000181 	adrp	x1, b1000 <_etext+0x158>
   81e80:	90000180 	adrp	x0, b1000 <_etext+0x158>
   81e84:	91018021 	add	x1, x1, #0x60
   81e88:	9107c000 	add	x0, x0, #0x1f0
   81e8c:	528013e2 	mov	w2, #0x9f                  	// #159
   81e90:	94006fac 	bl	9dd40 <assertion_failed>
   81e94:	d503201f 	nop
   81e98:	d503201f 	nop
   81e9c:	d503201f 	nop

0000000000081ea0 <CUSBRequest::operator delete(void*, unsigned long)>:
   81ea0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   81ea4:	f102403f 	cmp	x1, #0x90
   81ea8:	910003fd 	mov	x29, sp
   81eac:	540000e1 	b.ne	81ec8 <CUSBRequest::operator delete(void*, unsigned long)+0x28>  // b.any
   81eb0:	aa0003e1 	mov	x1, x0
   81eb4:	900001e0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   81eb8:	f9405000 	ldr	x0, [x0, #160]
   81ebc:	b4000120 	cbz	x0, 81ee0 <CUSBRequest::operator delete(void*, unsigned long)+0x40>
   81ec0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   81ec4:	14007133 	b	9e390 <CClassAllocator::Free(void*)>
   81ec8:	90000181 	adrp	x1, b1000 <_etext+0x158>
   81ecc:	90000180 	adrp	x0, b1000 <_etext+0x158>
   81ed0:	91018021 	add	x1, x1, #0x60
   81ed4:	91074000 	add	x0, x0, #0x1d0
   81ed8:	528013e2 	mov	w2, #0x9f                  	// #159
   81edc:	94006f99 	bl	9dd40 <assertion_failed>
   81ee0:	90000181 	adrp	x1, b1000 <_etext+0x158>
   81ee4:	90000180 	adrp	x0, b1000 <_etext+0x158>
   81ee8:	91018021 	add	x1, x1, #0x60
   81eec:	9107c000 	add	x0, x0, #0x1f0
   81ef0:	528013e2 	mov	w2, #0x9f                  	// #159
   81ef4:	94006f93 	bl	9dd40 <assertion_failed>
   81ef8:	d503201f 	nop
   81efc:	d503201f 	nop

0000000000081f00 <CUSBRequest::InitAllocator(unsigned int)>:
   81f00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81f04:	910003fd 	mov	x29, sp
   81f08:	a90153f3 	stp	x19, x20, [sp, #16]
   81f0c:	900001f4 	adrp	x20, bd000 <CNetDevice::s_SpeedString+0x18>
   81f10:	f9405281 	ldr	x1, [x20, #160]
   81f14:	b50001c1 	cbnz	x1, 81f4c <CUSBRequest::InitAllocator(unsigned int)+0x4c>
   81f18:	2a0003f3 	mov	w19, w0
   81f1c:	d2800700 	mov	x0, #0x38                  	// #56
   81f20:	940098d0 	bl	a8260 <operator new(unsigned long)>
   81f24:	2a1303e2 	mov	w2, w19
   81f28:	d2801201 	mov	x1, #0x90                  	// #144
   81f2c:	aa0003f3 	mov	x19, x0
   81f30:	90000183 	adrp	x3, b1000 <_etext+0x158>
   81f34:	91088063 	add	x3, x3, #0x220
   81f38:	94007086 	bl	9e150 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, char const*)>
   81f3c:	f9005293 	str	x19, [x20, #160]
   81f40:	a94153f3 	ldp	x19, x20, [sp, #16]
   81f44:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81f48:	d65f03c0 	ret
   81f4c:	90000181 	adrp	x1, b1000 <_etext+0x158>
   81f50:	90000180 	adrp	x0, b1000 <_etext+0x158>
   81f54:	91018021 	add	x1, x1, #0x60
   81f58:	91082000 	add	x0, x0, #0x208
   81f5c:	528013e2 	mov	w2, #0x9f                  	// #159
   81f60:	94006f78 	bl	9dd40 <assertion_failed>
   81f64:	d503201f 	nop
   81f68:	d503201f 	nop
   81f6c:	d503201f 	nop

0000000000081f70 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>:
   81f70:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   81f74:	910003fd 	mov	x29, sp
   81f78:	f90013f5 	str	x21, [sp, #32]
   81f7c:	900001f5 	adrp	x21, bd000 <CNetDevice::s_SpeedString+0x18>
   81f80:	a90153f3 	stp	x19, x20, [sp, #16]
   81f84:	2a0003f3 	mov	w19, w0
   81f88:	2a0103f4 	mov	w20, w1
   81f8c:	f94052a0 	ldr	x0, [x21, #160]
   81f90:	b40000e0 	cbz	x0, 81fac <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x3c>
   81f94:	2a0103e2 	mov	w2, w1
   81f98:	2a1303e1 	mov	w1, w19
   81f9c:	a94153f3 	ldp	x19, x20, [sp, #16]
   81fa0:	f94013f5 	ldr	x21, [sp, #32]
   81fa4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81fa8:	1400707a 	b	9e190 <CClassAllocator::Extend(unsigned int, unsigned int)>
   81fac:	d2800700 	mov	x0, #0x38                  	// #56
   81fb0:	940098ac 	bl	a8260 <operator new(unsigned long)>
   81fb4:	2a1403e3 	mov	w3, w20
   81fb8:	2a1303e2 	mov	w2, w19
   81fbc:	aa0003f4 	mov	x20, x0
   81fc0:	d2801201 	mov	x1, #0x90                  	// #144
   81fc4:	90000184 	adrp	x4, b1000 <_etext+0x158>
   81fc8:	91088084 	add	x4, x4, #0x220
   81fcc:	94007069 	bl	9e170 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, unsigned int, char const*)>
   81fd0:	f90052b4 	str	x20, [x21, #160]
   81fd4:	a94153f3 	ldp	x19, x20, [sp, #16]
   81fd8:	f94013f5 	ldr	x21, [sp, #32]
   81fdc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   81fe0:	d65f03c0 	ret
	...

0000000000081ff0 <CUSBStandardHub::GetHubInfo() const>:
   81ff0:	f9406800 	ldr	x0, [x0, #208]
   81ff4:	d65f03c0 	ret
   81ff8:	d503201f 	nop
   81ffc:	d503201f 	nop

0000000000082000 <CUSBStandardHub::~CUSBStandardHub()>:
   82000:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   82004:	910003fd 	mov	x29, sp
   82008:	f0000181 	adrp	x1, b5000 <_etext+0x4158>
   8200c:	9137c021 	add	x1, x1, #0xdf0
   82010:	a90153f3 	stp	x19, x20, [sp, #16]
   82014:	aa0003f4 	mov	x20, x0
   82018:	b940d800 	ldr	w0, [x0, #216]
   8201c:	f9000281 	str	x1, [x20]
   82020:	35000660 	cbnz	w0, 820ec <CUSBStandardHub::~CUSBStandardHub()+0xec>
   82024:	f9406a80 	ldr	x0, [x20, #208]
   82028:	b4000060 	cbz	x0, 82034 <CUSBStandardHub::~CUSBStandardHub()+0x34>
   8202c:	d2800101 	mov	x1, #0x8                   	// #8
   82030:	940098b4 	bl	a8300 <operator delete(void*, unsigned long)>
   82034:	b9404280 	ldr	w0, [x20, #64]
   82038:	f9006a9f 	str	xzr, [x20, #208]
   8203c:	340002c0 	cbz	w0, 82094 <CUSBStandardHub::~CUSBStandardHub()+0x94>
   82040:	91022293 	add	x19, x20, #0x88
   82044:	f90013f5 	str	x21, [sp, #32]
   82048:	52800015 	mov	w21, #0x0                   	// #0
   8204c:	d503201f 	nop
   82050:	f9400260 	ldr	x0, [x19]
   82054:	110006b5 	add	w21, w21, #0x1
   82058:	d2800081 	mov	x1, #0x4                   	// #4
   8205c:	b4000040 	cbz	x0, 82064 <CUSBStandardHub::~CUSBStandardHub()+0x64>
   82060:	940098a8 	bl	a8300 <operator delete(void*, unsigned long)>
   82064:	f900027f 	str	xzr, [x19]
   82068:	f85c0260 	ldur	x0, [x19, #-64]
   8206c:	b4000080 	cbz	x0, 8207c <CUSBStandardHub::~CUSBStandardHub()+0x7c>
   82070:	f9400001 	ldr	x1, [x0]
   82074:	f9400421 	ldr	x1, [x1, #8]
   82078:	d63f0020 	blr	x1
   8207c:	b9404280 	ldr	w0, [x20, #64]
   82080:	91002273 	add	x19, x19, #0x8
   82084:	f81b827f 	stur	xzr, [x19, #-72]
   82088:	6b15001f 	cmp	w0, w21
   8208c:	54fffe28 	b.hi	82050 <CUSBStandardHub::~CUSBStandardHub()+0x50>  // b.pmore
   82090:	f94013f5 	ldr	x21, [sp, #32]
   82094:	b900429f 	str	wzr, [x20, #64]
   82098:	f9401e80 	ldr	x0, [x20, #56]
   8209c:	b4000040 	cbz	x0, 820a4 <CUSBStandardHub::~CUSBStandardHub()+0xa4>
   820a0:	9400988c 	bl	a82d0 <operator delete[](void*)>
   820a4:	f9001e9f 	str	xzr, [x20, #56]
   820a8:	f9401a93 	ldr	x19, [x20, #48]
   820ac:	b40000d3 	cbz	x19, 820c4 <CUSBStandardHub::~CUSBStandardHub()+0xc4>
   820b0:	aa1303e0 	mov	x0, x19
   820b4:	9400208b 	bl	8a2e0 <CUSBEndpoint::~CUSBEndpoint()>
   820b8:	aa1303e0 	mov	x0, x19
   820bc:	d2800401 	mov	x1, #0x20                  	// #32
   820c0:	94009890 	bl	a8300 <operator delete(void*, unsigned long)>
   820c4:	f9001a9f 	str	xzr, [x20, #48]
   820c8:	f9401680 	ldr	x0, [x20, #40]
   820cc:	b4000060 	cbz	x0, 820d8 <CUSBStandardHub::~CUSBStandardHub()+0xd8>
   820d0:	d2800121 	mov	x1, #0x9                   	// #9
   820d4:	9400988b 	bl	a8300 <operator delete(void*, unsigned long)>
   820d8:	aa1403e0 	mov	x0, x20
   820dc:	f900169f 	str	xzr, [x20, #40]
   820e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   820e4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   820e8:	140020d2 	b	8a430 <CUSBFunction::~CUSBFunction()>
   820ec:	940072f9 	bl	9ecd0 <CDeviceNameService::Get()>
   820f0:	b940da82 	ldr	w2, [x20, #216]
   820f4:	f0000181 	adrp	x1, b5000 <_etext+0x4158>
   820f8:	52800003 	mov	w3, #0x0                   	// #0
   820fc:	91394021 	add	x1, x1, #0xe50
   82100:	94007320 	bl	9ed80 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   82104:	b940da81 	ldr	w1, [x20, #216]
   82108:	f00001c0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   8210c:	9102a000 	add	x0, x0, #0xa8
   82110:	94009a30 	bl	a89d0 <CNumberPool::FreeNumber(unsigned int)>
   82114:	17ffffc4 	b	82024 <CUSBStandardHub::~CUSBStandardHub()+0x24>
   82118:	d503201f 	nop
   8211c:	d503201f 	nop

0000000000082120 <CUSBStandardHub::~CUSBStandardHub()>:
   82120:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82124:	910003fd 	mov	x29, sp
   82128:	f9000bf3 	str	x19, [sp, #16]
   8212c:	aa0003f3 	mov	x19, x0
   82130:	97ffffb4 	bl	82000 <CUSBStandardHub::~CUSBStandardHub()>
   82134:	aa1303e0 	mov	x0, x19
   82138:	d2801c01 	mov	x1, #0xe0                  	// #224
   8213c:	f9400bf3 	ldr	x19, [sp, #16]
   82140:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82144:	1400986f 	b	a8300 <operator delete(void*, unsigned long)>
   82148:	d503201f 	nop
   8214c:	d503201f 	nop

0000000000082150 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>:
   82150:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82154:	910003fd 	mov	x29, sp
   82158:	f9000bf3 	str	x19, [sp, #16]
   8215c:	aa0003f3 	mov	x19, x0
   82160:	94002158 	bl	8a6c0 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   82164:	f0000184 	adrp	x4, b5000 <_etext+0x4158>
   82168:	9137c084 	add	x4, x4, #0xdf0
   8216c:	a902fe7f 	stp	xzr, xzr, [x19, #40]
   82170:	91012263 	add	x3, x19, #0x48
   82174:	91022262 	add	x2, x19, #0x88
   82178:	91032260 	add	x0, x19, #0xc8
   8217c:	d2800001 	mov	x1, #0x0                   	// #0
   82180:	f9000264 	str	x4, [x19]
   82184:	f9001e7f 	str	xzr, [x19, #56]
   82188:	b900427f 	str	wzr, [x19, #64]
   8218c:	3901127f 	strb	wzr, [x19, #68]
   82190:	f9006a7f 	str	xzr, [x19, #208]
   82194:	b900da7f 	str	wzr, [x19, #216]
   82198:	f821787f 	str	xzr, [x3, x1, lsl #3]
   8219c:	f821785f 	str	xzr, [x2, x1, lsl #3]
   821a0:	3821681f 	strb	wzr, [x0, x1]
   821a4:	91000421 	add	x1, x1, #0x1
   821a8:	f100203f 	cmp	x1, #0x8
   821ac:	54ffff61 	b.ne	82198 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x48>  // b.any
   821b0:	f9400bf3 	ldr	x19, [sp, #16]
   821b4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   821b8:	d65f03c0 	ret
   821bc:	d503201f 	nop

00000000000821c0 <CUSBStandardHub::DisablePort(unsigned int)>:
   821c0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   821c4:	910003fd 	mov	x29, sp
   821c8:	a90153f3 	stp	x19, x20, [sp, #16]
   821cc:	2a0103f3 	mov	w19, w1
   821d0:	b9404001 	ldr	w1, [x0, #64]
   821d4:	a9025bf5 	stp	x21, x22, [sp, #32]
   821d8:	6b13003f 	cmp	w1, w19
   821dc:	540004c9 	b.ls	82274 <CUSBStandardHub::DisablePort(unsigned int)+0xb4>  // b.plast
   821e0:	aa0003f4 	mov	x20, x0
   821e4:	11000676 	add	w22, w19, #0x1
   821e8:	940021b2 	bl	8a8b0 <CUSBFunction::GetHost() const>
   821ec:	aa0003f5 	mov	x21, x0
   821f0:	aa1403e0 	mov	x0, x20
   821f4:	940021a3 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   821f8:	52800024 	mov	w4, #0x1                   	// #1
   821fc:	aa0003e1 	mov	x1, x0
   82200:	2a1603e5 	mov	w5, w22
   82204:	aa1503e0 	mov	x0, x21
   82208:	2a0403e3 	mov	w3, w4
   8220c:	52800007 	mov	w7, #0x0                   	// #0
   82210:	d2800006 	mov	x6, #0x0                   	// #0
   82214:	52800462 	mov	w2, #0x23                  	// #35
   82218:	97fffb7e 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8221c:	37f80100 	tbnz	w0, #31, 8223c <CUSBStandardHub::DisablePort(unsigned int)+0x7c>
   82220:	8b334293 	add	x19, x20, w19, uxtw
   82224:	52800020 	mov	w0, #0x1                   	// #1
   82228:	3903227f 	strb	wzr, [x19, #200]
   8222c:	a94153f3 	ldp	x19, x20, [sp, #16]
   82230:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82234:	a8c37bfd 	ldp	x29, x30, [sp], #48
   82238:	d65f03c0 	ret
   8223c:	940075f5 	bl	9fa10 <CLogger::Get()>
   82240:	f0000181 	adrp	x1, b5000 <_etext+0x4158>
   82244:	91394021 	add	x1, x1, #0xe50
   82248:	f0000163 	adrp	x3, b1000 <_etext+0x158>
   8224c:	2a1603e4 	mov	w4, w22
   82250:	91002021 	add	x1, x1, #0x8
   82254:	91098063 	add	x3, x3, #0x260
   82258:	52800022 	mov	w2, #0x1                   	// #1
   8225c:	940077d9 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   82260:	52800000 	mov	w0, #0x0                   	// #0
   82264:	a94153f3 	ldp	x19, x20, [sp, #16]
   82268:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8226c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   82270:	d65f03c0 	ret
   82274:	f0000161 	adrp	x1, b1000 <_etext+0x158>
   82278:	f0000160 	adrp	x0, b1000 <_etext+0x158>
   8227c:	9108c021 	add	x1, x1, #0x230
   82280:	91092000 	add	x0, x0, #0x248
   82284:	52801b62 	mov	w2, #0xdb                  	// #219
   82288:	94006eae 	bl	9dd40 <assertion_failed>
   8228c:	d503201f 	nop

0000000000082290 <CUSBStandardHub::RemoveDeviceAt(unsigned int)>:
   82290:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   82294:	910003fd 	mov	x29, sp
   82298:	a90153f3 	stp	x19, x20, [sp, #16]
   8229c:	2a0103f3 	mov	w19, w1
   822a0:	f90013f5 	str	x21, [sp, #32]
   822a4:	aa0003f5 	mov	x21, x0
   822a8:	97ffffc6 	bl	821c0 <CUSBStandardHub::DisablePort(unsigned int)>
   822ac:	72001c1f 	tst	w0, #0xff
   822b0:	2a0003f4 	mov	w20, w0
   822b4:	54000100 	b.eq	822d4 <CUSBStandardHub::RemoveDeviceAt(unsigned int)+0x44>  // b.none
   822b8:	8b334eb3 	add	x19, x21, w19, uxtw #3
   822bc:	f9402660 	ldr	x0, [x19, #72]
   822c0:	b4000080 	cbz	x0, 822d0 <CUSBStandardHub::RemoveDeviceAt(unsigned int)+0x40>
   822c4:	f9400001 	ldr	x1, [x0]
   822c8:	f9400421 	ldr	x1, [x1, #8]
   822cc:	d63f0020 	blr	x1
   822d0:	f900267f 	str	xzr, [x19, #72]
   822d4:	2a1403e0 	mov	w0, w20
   822d8:	a94153f3 	ldp	x19, x20, [sp, #16]
   822dc:	f94013f5 	ldr	x21, [sp, #32]
   822e0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   822e4:	d65f03c0 	ret
   822e8:	d503201f 	nop
   822ec:	d503201f 	nop

00000000000822f0 <CUSBStandardHub::StartStatusChangeRequest()>:
   822f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   822f4:	910003fd 	mov	x29, sp
   822f8:	b9404003 	ldr	w3, [x0, #64]
   822fc:	a90153f3 	stp	x19, x20, [sp, #16]
   82300:	34000463 	cbz	w3, 8238c <CUSBStandardHub::StartStatusChangeRequest()+0x9c>
   82304:	aa0003f3 	mov	x19, x0
   82308:	11002063 	add	w3, w3, #0x8
   8230c:	f9401c00 	ldr	x0, [x0, #56]
   82310:	53037c74 	lsr	w20, w3, #3
   82314:	b4000340 	cbz	x0, 8237c <CUSBStandardHub::StartStatusChangeRequest()+0x8c>
   82318:	f9401a60 	ldr	x0, [x19, #48]
   8231c:	b4000440 	cbz	x0, 823a4 <CUSBStandardHub::StartStatusChangeRequest()+0xb4>
   82320:	d2801200 	mov	x0, #0x90                  	// #144
   82324:	97fffec7 	bl	81e40 <CUSBRequest::operator new(unsigned long)>
   82328:	a9430a61 	ldp	x1, x2, [x19, #48]
   8232c:	d2800004 	mov	x4, #0x0                   	// #0
   82330:	2a1403e3 	mov	w3, w20
   82334:	aa0003f4 	mov	x20, x0
   82338:	97fffdda 	bl	81aa0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   8233c:	90000001 	adrp	x1, 82000 <CUSBStandardHub::~CUSBStandardHub()>
   82340:	aa1303e3 	mov	x3, x19
   82344:	aa1403e0 	mov	x0, x20
   82348:	91124021 	add	x1, x1, #0x490
   8234c:	d2800002 	mov	x2, #0x0                   	// #0
   82350:	97fffe98 	bl	81db0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   82354:	aa1303e0 	mov	x0, x19
   82358:	94002156 	bl	8a8b0 <CUSBFunction::GetHost() const>
   8235c:	f9400003 	ldr	x3, [x0]
   82360:	aa1403e1 	mov	x1, x20
   82364:	52800002 	mov	w2, #0x0                   	// #0
   82368:	a94153f3 	ldp	x19, x20, [sp, #16]
   8236c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82370:	f9401463 	ldr	x3, [x3, #40]
   82374:	aa0303f0 	mov	x16, x3
   82378:	d61f0200 	br	x16
   8237c:	92407280 	and	x0, x20, #0x1fffffff
   82380:	940097c0 	bl	a8280 <operator new[](unsigned long)>
   82384:	f9001e60 	str	x0, [x19, #56]
   82388:	17ffffe4 	b	82318 <CUSBStandardHub::StartStatusChangeRequest()+0x28>
   8238c:	f0000161 	adrp	x1, b1000 <_etext+0x158>
   82390:	f0000160 	adrp	x0, b1000 <_etext+0x158>
   82394:	9108c021 	add	x1, x1, #0x230
   82398:	9109e000 	add	x0, x0, #0x278
   8239c:	52803c42 	mov	w2, #0x1e2                 	// #482
   823a0:	94006e68 	bl	9dd40 <assertion_failed>
   823a4:	f0000161 	adrp	x1, b1000 <_etext+0x158>
   823a8:	f0000160 	adrp	x0, b1000 <_etext+0x158>
   823ac:	9108c021 	add	x1, x1, #0x230
   823b0:	910a2000 	add	x0, x0, #0x288
   823b4:	52803d62 	mov	w2, #0x1eb                 	// #491
   823b8:	94006e62 	bl	9dd40 <assertion_failed>
   823bc:	d503201f 	nop

00000000000823c0 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)>:
   823c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   823c4:	910003fd 	mov	x29, sp
   823c8:	a90153f3 	stp	x19, x20, [sp, #16]
   823cc:	b40003e1 	cbz	x1, 82448 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x88>
   823d0:	aa0003f4 	mov	x20, x0
   823d4:	aa0103e0 	mov	x0, x1
   823d8:	aa0103f3 	mov	x19, x1
   823dc:	97fffded 	bl	81b90 <CUSBRequest::GetStatus() const>
   823e0:	340001e0 	cbz	w0, 8241c <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x5c>
   823e4:	aa1303e0 	mov	x0, x19
   823e8:	97fffdee 	bl	81ba0 <CUSBRequest::GetResultLength() const>
   823ec:	34000400 	cbz	w0, 8246c <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0xac>
   823f0:	aa1403e0 	mov	x0, x20
   823f4:	9400212f 	bl	8a8b0 <CUSBFunction::GetHost() const>
   823f8:	aa1403e1 	mov	x1, x20
   823fc:	97fffbdd 	bl	81370 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)>
   82400:	aa1303e0 	mov	x0, x19
   82404:	97fffdc7 	bl	81b20 <CUSBRequest::~CUSBRequest()>
   82408:	aa1303e0 	mov	x0, x19
   8240c:	d2801201 	mov	x1, #0x90                  	// #144
   82410:	a94153f3 	ldp	x19, x20, [sp, #16]
   82414:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82418:	17fffea2 	b	81ea0 <CUSBRequest::operator delete(void*, unsigned long)>
   8241c:	aa1303e0 	mov	x0, x19
   82420:	97fffdec 	bl	81bd0 <CUSBRequest::GetUSBError() const>
   82424:	71000c1f 	cmp	w0, #0x3
   82428:	540001c0 	b.eq	82460 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0xa0>  // b.none
   8242c:	aa1303e0 	mov	x0, x19
   82430:	97fffdbc 	bl	81b20 <CUSBRequest::~CUSBRequest()>
   82434:	aa1303e0 	mov	x0, x19
   82438:	d2801201 	mov	x1, #0x90                  	// #144
   8243c:	a94153f3 	ldp	x19, x20, [sp, #16]
   82440:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82444:	17fffe97 	b	81ea0 <CUSBRequest::operator delete(void*, unsigned long)>
   82448:	f0000161 	adrp	x1, b1000 <_etext+0x158>
   8244c:	f0000160 	adrp	x0, b1000 <_etext+0x158>
   82450:	9108c021 	add	x1, x1, #0x230
   82454:	910aa000 	add	x0, x0, #0x2a8
   82458:	52803ea2 	mov	w2, #0x1f5                 	// #501
   8245c:	94006e39 	bl	9dd40 <assertion_failed>
   82460:	aa1403e0 	mov	x0, x20
   82464:	97ffffa3 	bl	822f0 <CUSBStandardHub::StartStatusChangeRequest()>
   82468:	17fffff1 	b	8242c <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x6c>
   8246c:	f0000161 	adrp	x1, b1000 <_etext+0x158>
   82470:	f0000160 	adrp	x0, b1000 <_etext+0x158>
   82474:	9108c021 	add	x1, x1, #0x230
   82478:	910ae000 	add	x0, x0, #0x2b8
   8247c:	52803f22 	mov	w2, #0x1f9                 	// #505
   82480:	94006e30 	bl	9dd40 <assertion_failed>
   82484:	d503201f 	nop
   82488:	d503201f 	nop
   8248c:	d503201f 	nop

0000000000082490 <CUSBStandardHub::CompletionStub(CUSBRequest*, void*, void*)>:
   82490:	b4000082 	cbz	x2, 824a0 <CUSBStandardHub::CompletionStub(CUSBRequest*, void*, void*)+0x10>
   82494:	aa0003e1 	mov	x1, x0
   82498:	aa0203e0 	mov	x0, x2
   8249c:	17ffffc9 	b	823c0 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)>
   824a0:	f0000161 	adrp	x1, b1000 <_etext+0x158>
   824a4:	f0000160 	adrp	x0, b1000 <_etext+0x158>
   824a8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   824ac:	9108c021 	add	x1, x1, #0x230
   824b0:	910003fd 	mov	x29, sp
   824b4:	910b6000 	add	x0, x0, #0x2d8
   824b8:	52804162 	mov	w2, #0x20b                 	// #523
   824bc:	94006e21 	bl	9dd40 <assertion_failed>

00000000000824c0 <CUSBStandardHub::Initialize()>:
   824c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   824c4:	910003fd 	mov	x29, sp
   824c8:	a90153f3 	stp	x19, x20, [sp, #16]
   824cc:	aa0003f3 	mov	x19, x0
   824d0:	94001fd0 	bl	8a410 <CUSBFunction::Initialize()>
   824d4:	72001c00 	ands	w0, w0, #0xff
   824d8:	54000860 	b.eq	825e4 <CUSBStandardHub::Initialize()+0x124>  // b.none
   824dc:	f9401660 	ldr	x0, [x19, #40]
   824e0:	b5000a00 	cbnz	x0, 82620 <CUSBStandardHub::Initialize()+0x160>
   824e4:	d2800120 	mov	x0, #0x9                   	// #9
   824e8:	9400975e 	bl	a8260 <operator new(unsigned long)>
   824ec:	aa0003e1 	mov	x1, x0
   824f0:	aa1303e0 	mov	x0, x19
   824f4:	f9001661 	str	x1, [x19, #40]
   824f8:	940020ee 	bl	8a8b0 <CUSBFunction::GetHost() const>
   824fc:	aa0003f4 	mov	x20, x0
   82500:	aa1303e0 	mov	x0, x19
   82504:	940020df 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   82508:	aa0003e1 	mov	x1, x0
   8250c:	52800007 	mov	w7, #0x0                   	// #0
   82510:	f9401664 	ldr	x4, [x19, #40]
   82514:	aa1403e0 	mov	x0, x20
   82518:	12800be6 	mov	w6, #0xffffffa0            	// #-96
   8251c:	52800125 	mov	w5, #0x9                   	// #9
   82520:	52800003 	mov	w3, #0x0                   	// #0
   82524:	52800522 	mov	w2, #0x29                  	// #41
   82528:	97fffb02 	bl	81130 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   8252c:	7100241f 	cmp	w0, #0x9
   82530:	540003e1 	b.ne	825ac <CUSBStandardHub::Initialize()+0xec>  // b.any
   82534:	f9401660 	ldr	x0, [x19, #40]
   82538:	39400800 	ldrb	w0, [x0, #2]
   8253c:	7100201f 	cmp	w0, #0x8
   82540:	b9004260 	str	w0, [x19, #64]
   82544:	54000568 	b.hi	825f0 <CUSBStandardHub::Initialize()+0x130>  // b.pmore
   82548:	d2800100 	mov	x0, #0x8                   	// #8
   8254c:	94009745 	bl	a8260 <operator new(unsigned long)>
   82550:	b9404262 	ldr	w2, [x19, #64]
   82554:	aa0003e1 	mov	x1, x0
   82558:	aa1303e0 	mov	x0, x19
   8255c:	f9006a61 	str	x1, [x19, #208]
   82560:	b9000022 	str	w2, [x1]
   82564:	94002163 	bl	8aaf0 <CUSBFunction::GetInterfaceProtocol() const>
   82568:	f9401663 	ldr	x3, [x19, #40]
   8256c:	12001c01 	and	w1, w0, #0xff
   82570:	aa1303e0 	mov	x0, x19
   82574:	7100083f 	cmp	w1, #0x2
   82578:	f9406a62 	ldr	x2, [x19, #208]
   8257c:	1a9f17e1 	cset	w1, eq	// eq = none
   82580:	39001041 	strb	w1, [x2, #4]
   82584:	39400c61 	ldrb	w1, [x3, #3]
   82588:	d3451821 	ubfx	x1, x1, #5, #2
   8258c:	39001441 	strb	w1, [x2, #5]
   82590:	940020b0 	bl	8a850 <CUSBFunction::GetDevice() const>
   82594:	f9400001 	ldr	x1, [x0]
   82598:	a94153f3 	ldp	x19, x20, [sp, #16]
   8259c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   825a0:	f9401021 	ldr	x1, [x1, #32]
   825a4:	aa0103f0 	mov	x16, x1
   825a8:	d61f0200 	br	x16
   825ac:	94007519 	bl	9fa10 <CLogger::Get()>
   825b0:	f0000181 	adrp	x1, b5000 <_etext+0x4158>
   825b4:	91394021 	add	x1, x1, #0xe50
   825b8:	f0000163 	adrp	x3, b1000 <_etext+0x158>
   825bc:	91002021 	add	x1, x1, #0x8
   825c0:	910be063 	add	x3, x3, #0x2f8
   825c4:	52800022 	mov	w2, #0x1                   	// #1
   825c8:	940076fe 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   825cc:	f9401660 	ldr	x0, [x19, #40]
   825d0:	b4000060 	cbz	x0, 825dc <CUSBStandardHub::Initialize()+0x11c>
   825d4:	d2800121 	mov	x1, #0x9                   	// #9
   825d8:	9400974a 	bl	a8300 <operator delete(void*, unsigned long)>
   825dc:	52800000 	mov	w0, #0x0                   	// #0
   825e0:	f900167f 	str	xzr, [x19, #40]
   825e4:	a94153f3 	ldp	x19, x20, [sp, #16]
   825e8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   825ec:	d65f03c0 	ret
   825f0:	94007508 	bl	9fa10 <CLogger::Get()>
   825f4:	f0000181 	adrp	x1, b5000 <_etext+0x4158>
   825f8:	91394021 	add	x1, x1, #0xe50
   825fc:	b9404264 	ldr	w4, [x19, #64]
   82600:	f0000163 	adrp	x3, b1000 <_etext+0x158>
   82604:	91002021 	add	x1, x1, #0x8
   82608:	910c6063 	add	x3, x3, #0x318
   8260c:	52800022 	mov	w2, #0x1                   	// #1
   82610:	940076ec 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   82614:	f9401660 	ldr	x0, [x19, #40]
   82618:	b5fffde0 	cbnz	x0, 825d4 <CUSBStandardHub::Initialize()+0x114>
   8261c:	17fffff0 	b	825dc <CUSBStandardHub::Initialize()+0x11c>
   82620:	f0000161 	adrp	x1, b1000 <_etext+0x158>
   82624:	f0000160 	adrp	x0, b1000 <_etext+0x158>
   82628:	9108c021 	add	x1, x1, #0x230
   8262c:	910ba000 	add	x0, x0, #0x2e8
   82630:	52800c42 	mov	w2, #0x62                  	// #98
   82634:	94006dc3 	bl	9dd40 <assertion_failed>
   82638:	d503201f 	nop
   8263c:	d503201f 	nop

0000000000082640 <CUSBStandardHub::EnumeratePorts()>:
   82640:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   82644:	910003fd 	mov	x29, sp
   82648:	a9025bf5 	stp	x21, x22, [sp, #32]
   8264c:	aa0003f5 	mov	x21, x0
   82650:	94002098 	bl	8a8b0 <CUSBFunction::GetHost() const>
   82654:	b4002680 	cbz	x0, 82b24 <CUSBStandardHub::EnumeratePorts()+0x4e4>
   82658:	aa0003f6 	mov	x22, x0
   8265c:	aa1503e0 	mov	x0, x21
   82660:	a90363f7 	stp	x23, x24, [sp, #48]
   82664:	94002087 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   82668:	aa0003f7 	mov	x23, x0
   8266c:	b4002700 	cbz	x0, 82b4c <CUSBStandardHub::EnumeratePorts()+0x50c>
   82670:	b94042a0 	ldr	w0, [x21, #64]
   82674:	a90153f3 	stp	x19, x20, [sp, #16]
   82678:	340027c0 	cbz	w0, 82b70 <CUSBStandardHub::EnumeratePorts()+0x530>
   8267c:	394112b4 	ldrb	w20, [x21, #68]
   82680:	34001b54 	cbz	w20, 829e8 <CUSBStandardHub::EnumeratePorts()+0x3a8>
   82684:	a90573fb 	stp	x27, x28, [sp, #80]
   82688:	910122bb 	add	x27, x21, #0x48
   8268c:	f000017c 	adrp	x28, b1000 <_etext+0x158>
   82690:	910f6380 	add	x0, x28, #0x3d8
   82694:	aa1b03f4 	mov	x20, x27
   82698:	52800033 	mov	w19, #0x1                   	// #1
   8269c:	a9046bf9 	stp	x25, x26, [sp, #64]
   826a0:	f000019a 	adrp	x26, b5000 <_etext+0x4158>
   826a4:	9139435a 	add	x26, x26, #0xe50
   826a8:	9100235a 	add	x26, x26, #0x8
   826ac:	51000679 	sub	w25, w19, #0x1
   826b0:	f90037e0 	str	x0, [sp, #104]
   826b4:	f9400280 	ldr	x0, [x20]
   826b8:	b50009e0 	cbnz	x0, 827f4 <CUSBStandardHub::EnumeratePorts()+0x1b4>
   826bc:	d503201f 	nop
   826c0:	f9402286 	ldr	x6, [x20, #64]
   826c4:	b4001826 	cbz	x6, 829c8 <CUSBStandardHub::EnumeratePorts()+0x388>
   826c8:	12003e78 	and	w24, w19, #0xffff
   826cc:	52800087 	mov	w7, #0x4                   	// #4
   826d0:	2a1803e5 	mov	w5, w24
   826d4:	52800004 	mov	w4, #0x0                   	// #0
   826d8:	52800003 	mov	w3, #0x0                   	// #0
   826dc:	12800b82 	mov	w2, #0xffffffa3            	// #-93
   826e0:	aa1703e1 	mov	x1, x23
   826e4:	aa1603e0 	mov	x0, x22
   826e8:	97fffa4a 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   826ec:	7100101f 	cmp	w0, #0x4
   826f0:	2a0003fc 	mov	w28, w0
   826f4:	540015a1 	b.ne	829a8 <CUSBStandardHub::EnumeratePorts()+0x368>  // b.any
   826f8:	f9402281 	ldr	x1, [x20, #64]
   826fc:	39400020 	ldrb	w0, [x1]
   82700:	39400421 	ldrb	w1, [x1, #1]
   82704:	2a012000 	orr	w0, w0, w1, lsl #8
   82708:	36001cc1 	tbz	w1, #0, 82aa0 <CUSBStandardHub::EnumeratePorts()+0x460>
   8270c:	36000620 	tbz	w0, #0, 827d0 <CUSBStandardHub::EnumeratePorts()+0x190>
   82710:	52800007 	mov	w7, #0x0                   	// #0
   82714:	d2800006 	mov	x6, #0x0                   	// #0
   82718:	2a1803e5 	mov	w5, w24
   8271c:	2a1c03e4 	mov	w4, w28
   82720:	52800063 	mov	w3, #0x3                   	// #3
   82724:	52800462 	mov	w2, #0x23                  	// #35
   82728:	aa1703e1 	mov	x1, x23
   8272c:	aa1603e0 	mov	x0, x22
   82730:	97fffa38 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   82734:	37f81a60 	tbnz	w0, #31, 82a80 <CUSBStandardHub::EnumeratePorts()+0x440>
   82738:	9400926e 	bl	a70f0 <CTimer::Get()>
   8273c:	52800c80 	mov	w0, #0x64                  	// #100
   82740:	94009210 	bl	a6f80 <CTimer::SimpleMsDelay(unsigned int)>
   82744:	2a1c03e7 	mov	w7, w28
   82748:	2a1803e5 	mov	w5, w24
   8274c:	f9402286 	ldr	x6, [x20, #64]
   82750:	52800004 	mov	w4, #0x0                   	// #0
   82754:	52800003 	mov	w3, #0x0                   	// #0
   82758:	12800b82 	mov	w2, #0xffffffa3            	// #-93
   8275c:	aa1703e1 	mov	x1, x23
   82760:	aa1603e0 	mov	x0, x22
   82764:	97fffa2b 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   82768:	7100101f 	cmp	w0, #0x4
   8276c:	54002961 	b.ne	82c98 <CUSBStandardHub::EnumeratePorts()+0x658>  // b.any
   82770:	f9402280 	ldr	x0, [x20, #64]
   82774:	39400001 	ldrb	w1, [x0]
   82778:	39400400 	ldrb	w0, [x0, #1]
   8277c:	2a002020 	orr	w0, w1, w0, lsl #8
   82780:	36081c41 	tbz	w1, #1, 82b08 <CUSBStandardHub::EnumeratePorts()+0x4c8>
   82784:	37182920 	tbnz	w0, #3, 82ca8 <CUSBStandardHub::EnumeratePorts()+0x668>
   82788:	52800018 	mov	w24, #0x0                   	// #0
   8278c:	36481280 	tbz	w0, #9, 829dc <CUSBStandardHub::EnumeratePorts()+0x39c>
   82790:	f9400280 	ldr	x0, [x20]
   82794:	b5001fe0 	cbnz	x0, 82b90 <CUSBStandardHub::EnumeratePorts()+0x550>
   82798:	d2803b00 	mov	x0, #0x1d8                 	// #472
   8279c:	940096b1 	bl	a8260 <operator new(unsigned long)>
   827a0:	2a1803e2 	mov	w2, w24
   827a4:	2a1903e4 	mov	w4, w25
   827a8:	aa0003f8 	mov	x24, x0
   827ac:	aa1503e3 	mov	x3, x21
   827b0:	aa1603e1 	mov	x1, x22
   827b4:	940014a3 	bl	87a40 <CXHCIUSBDevice::CXHCIUSBDevice(CXHCIDevice*, TUSBSpeed, CUSBStandardHub*, unsigned int)>
   827b8:	aa1803e0 	mov	x0, x24
   827bc:	f9000298 	str	x24, [x20]
   827c0:	94001654 	bl	88110 <CXHCIUSBDevice::Initialize()>
   827c4:	72001c1f 	tst	w0, #0xff
   827c8:	540014e0 	b.eq	82a64 <CUSBStandardHub::EnumeratePorts()+0x424>  // b.none
   827cc:	d503201f 	nop
   827d0:	b94042a1 	ldr	w1, [x21, #64]
   827d4:	91002294 	add	x20, x20, #0x8
   827d8:	11000660 	add	w0, w19, #0x1
   827dc:	6b13003f 	cmp	w1, w19
   827e0:	54000169 	b.ls	8280c <CUSBStandardHub::EnumeratePorts()+0x1cc>  // b.plast
   827e4:	2a0003f3 	mov	w19, w0
   827e8:	f9400280 	ldr	x0, [x20]
   827ec:	51000679 	sub	w25, w19, #0x1
   827f0:	b4fff680 	cbz	x0, 826c0 <CUSBStandardHub::EnumeratePorts()+0x80>
   827f4:	9400172b 	bl	884a0 <CUSBDevice::ReScanDevices()>
   827f8:	b94042a1 	ldr	w1, [x21, #64]
   827fc:	91002294 	add	x20, x20, #0x8
   82800:	11000660 	add	w0, w19, #0x1
   82804:	6b13003f 	cmp	w1, w19
   82808:	54fffee8 	b.hi	827e4 <CUSBStandardHub::EnumeratePorts()+0x1a4>  // b.pmore
   8280c:	34000621 	cbz	w1, 828d0 <CUSBStandardHub::EnumeratePorts()+0x290>
   82810:	f0000194 	adrp	x20, b5000 <_etext+0x4158>
   82814:	91394294 	add	x20, x20, #0xe50
   82818:	f0000178 	adrp	x24, b1000 <_etext+0x158>
   8281c:	91116318 	add	x24, x24, #0x458
   82820:	91002294 	add	x20, x20, #0x8
   82824:	d2800013 	mov	x19, #0x0                   	// #0
   82828:	1400000b 	b	82854 <CUSBStandardHub::EnumeratePorts()+0x214>
   8282c:	94007479 	bl	9fa10 <CLogger::Get()>
   82830:	aa1403e1 	mov	x1, x20
   82834:	2a1903e4 	mov	w4, w25
   82838:	aa1803e3 	mov	x3, x24
   8283c:	52800082 	mov	w2, #0x4                   	// #4
   82840:	94007660 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   82844:	b94042a1 	ldr	w1, [x21, #64]
   82848:	91000673 	add	x19, x19, #0x1
   8284c:	6b13003f 	cmp	w1, w19
   82850:	54000409 	b.ls	828d0 <CUSBStandardHub::EnumeratePorts()+0x290>  // b.plast
   82854:	f8737b60 	ldr	x0, [x27, x19, lsl #3]
   82858:	11000679 	add	w25, w19, #0x1
   8285c:	b4ffff60 	cbz	x0, 82848 <CUSBStandardHub::EnumeratePorts()+0x208>
   82860:	910322a2 	add	x2, x21, #0xc8
   82864:	38736843 	ldrb	w3, [x2, x19]
   82868:	35ffff03 	cbnz	w3, 82848 <CUSBStandardHub::EnumeratePorts()+0x208>
   8286c:	f9400001 	ldr	x1, [x0]
   82870:	52800023 	mov	w3, #0x1                   	// #1
   82874:	38336843 	strb	w3, [x2, x19]
   82878:	f9400c21 	ldr	x1, [x1, #24]
   8287c:	d63f0020 	blr	x1
   82880:	72001c1f 	tst	w0, #0xff
   82884:	54fffd41 	b.ne	8282c <CUSBStandardHub::EnumeratePorts()+0x1ec>  // b.any
   82888:	94007462 	bl	9fa10 <CLogger::Get()>
   8288c:	f0000163 	adrp	x3, b1000 <_etext+0x158>
   82890:	2a1903e4 	mov	w4, w25
   82894:	9110c063 	add	x3, x3, #0x430
   82898:	52800042 	mov	w2, #0x2                   	// #2
   8289c:	aa1403e1 	mov	x1, x20
   828a0:	94007648 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   828a4:	f8737b60 	ldr	x0, [x27, x19, lsl #3]
   828a8:	b4000080 	cbz	x0, 828b8 <CUSBStandardHub::EnumeratePorts()+0x278>
   828ac:	f9400001 	ldr	x1, [x0]
   828b0:	f9400421 	ldr	x1, [x1, #8]
   828b4:	d63f0020 	blr	x1
   828b8:	b94042a1 	ldr	w1, [x21, #64]
   828bc:	f8337b7f 	str	xzr, [x27, x19, lsl #3]
   828c0:	91000673 	add	x19, x19, #0x1
   828c4:	6b13003f 	cmp	w1, w19
   828c8:	54fffc68 	b.hi	82854 <CUSBStandardHub::EnumeratePorts()+0x214>  // b.pmore
   828cc:	d503201f 	nop
   828d0:	a9446bf9 	ldp	x25, x26, [sp, #64]
   828d4:	a94573fb 	ldp	x27, x28, [sp, #80]
   828d8:	d2800080 	mov	x0, #0x4                   	// #4
   828dc:	94009661 	bl	a8260 <operator new(unsigned long)>
   828e0:	aa0003e6 	mov	x6, x0
   828e4:	52800087 	mov	w7, #0x4                   	// #4
   828e8:	aa0003f4 	mov	x20, x0
   828ec:	52800005 	mov	w5, #0x0                   	// #0
   828f0:	52800004 	mov	w4, #0x0                   	// #0
   828f4:	52800003 	mov	w3, #0x0                   	// #0
   828f8:	12800be2 	mov	w2, #0xffffffa0            	// #-96
   828fc:	aa1703e1 	mov	x1, x23
   82900:	aa1603e0 	mov	x0, x22
   82904:	97fff9c3 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   82908:	7100101f 	cmp	w0, #0x4
   8290c:	540014e1 	b.ne	82ba8 <CUSBStandardHub::EnumeratePorts()+0x568>  // b.any
   82910:	39400280 	ldrb	w0, [x20]
   82914:	36081580 	tbz	w0, #1, 82bc4 <CUSBStandardHub::EnumeratePorts()+0x584>
   82918:	b94042a0 	ldr	w0, [x21, #64]
   8291c:	52800001 	mov	w1, #0x0                   	// #0
   82920:	34000200 	cbz	w0, 82960 <CUSBStandardHub::EnumeratePorts()+0x320>
   82924:	d503201f 	nop
   82928:	11000433 	add	w19, w1, #0x1
   8292c:	52800007 	mov	w7, #0x0                   	// #0
   82930:	aa1703e1 	mov	x1, x23
   82934:	2a1303e5 	mov	w5, w19
   82938:	d2800006 	mov	x6, #0x0                   	// #0
   8293c:	52800104 	mov	w4, #0x8                   	// #8
   82940:	52800023 	mov	w3, #0x1                   	// #1
   82944:	52800462 	mov	w2, #0x23                  	// #35
   82948:	aa1603e0 	mov	x0, x22
   8294c:	97fff9b1 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   82950:	b94042a0 	ldr	w0, [x21, #64]
   82954:	2a1303e1 	mov	w1, w19
   82958:	6b13001f 	cmp	w0, w19
   8295c:	54fffe68 	b.hi	82928 <CUSBStandardHub::EnumeratePorts()+0x2e8>  // b.pmore
   82960:	9400742c 	bl	9fa10 <CLogger::Get()>
   82964:	f0000181 	adrp	x1, b5000 <_etext+0x4158>
   82968:	91394021 	add	x1, x1, #0xe50
   8296c:	f0000163 	adrp	x3, b1000 <_etext+0x158>
   82970:	91002021 	add	x1, x1, #0x8
   82974:	91124063 	add	x3, x3, #0x490
   82978:	52800022 	mov	w2, #0x1                   	// #1
   8297c:	94007611 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   82980:	aa1403e0 	mov	x0, x20
   82984:	d2800081 	mov	x1, #0x4                   	// #4
   82988:	9400965e 	bl	a8300 <operator delete(void*, unsigned long)>
   8298c:	52800014 	mov	w20, #0x0                   	// #0
   82990:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82994:	2a1403e0 	mov	w0, w20
   82998:	a94153f3 	ldp	x19, x20, [sp, #16]
   8299c:	a94363f7 	ldp	x23, x24, [sp, #48]
   829a0:	a8c77bfd 	ldp	x29, x30, [sp], #112
   829a4:	d65f03c0 	ret
   829a8:	9400741a 	bl	9fa10 <CLogger::Get()>
   829ac:	f0000163 	adrp	x3, b1000 <_etext+0x158>
   829b0:	2a1303e4 	mov	w4, w19
   829b4:	910da063 	add	x3, x3, #0x368
   829b8:	52800022 	mov	w2, #0x1                   	// #1
   829bc:	aa1a03e1 	mov	x1, x26
   829c0:	94007600 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   829c4:	17ffff83 	b	827d0 <CUSBStandardHub::EnumeratePorts()+0x190>
   829c8:	d2800080 	mov	x0, #0x4                   	// #4
   829cc:	94009625 	bl	a8260 <operator new(unsigned long)>
   829d0:	aa0003e6 	mov	x6, x0
   829d4:	f9002280 	str	x0, [x20, #64]
   829d8:	17ffff3c 	b	826c8 <CUSBStandardHub::EnumeratePorts()+0x88>
   829dc:	d34a2800 	ubfx	x0, x0, #10, #1
   829e0:	11000418 	add	w24, w0, #0x1
   829e4:	17ffff6b 	b	82790 <CUSBStandardHub::EnumeratePorts()+0x150>
   829e8:	52800013 	mov	w19, #0x0                   	// #0
   829ec:	14000004 	b	829fc <CUSBStandardHub::EnumeratePorts()+0x3bc>
   829f0:	b94042a0 	ldr	w0, [x21, #64]
   829f4:	6b00027f 	cmp	w19, w0
   829f8:	54000602 	b.cs	82ab8 <CUSBStandardHub::EnumeratePorts()+0x478>  // b.hs, b.nlast
   829fc:	11000673 	add	w19, w19, #0x1
   82a00:	52800007 	mov	w7, #0x0                   	// #0
   82a04:	2a1303e5 	mov	w5, w19
   82a08:	d2800006 	mov	x6, #0x0                   	// #0
   82a0c:	52800104 	mov	w4, #0x8                   	// #8
   82a10:	52800063 	mov	w3, #0x3                   	// #3
   82a14:	52800462 	mov	w2, #0x23                  	// #35
   82a18:	aa1703e1 	mov	x1, x23
   82a1c:	aa1603e0 	mov	x0, x22
   82a20:	97fff97c 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   82a24:	36fffe60 	tbz	w0, #31, 829f0 <CUSBStandardHub::EnumeratePorts()+0x3b0>
   82a28:	940073fa 	bl	9fa10 <CLogger::Get()>
   82a2c:	f0000181 	adrp	x1, b5000 <_etext+0x4158>
   82a30:	91394021 	add	x1, x1, #0xe50
   82a34:	f0000163 	adrp	x3, b1000 <_etext+0x158>
   82a38:	2a1303e4 	mov	w4, w19
   82a3c:	91002021 	add	x1, x1, #0x8
   82a40:	910d4063 	add	x3, x3, #0x350
   82a44:	52800022 	mov	w2, #0x1                   	// #1
   82a48:	940075de 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   82a4c:	2a1403e0 	mov	w0, w20
   82a50:	a94153f3 	ldp	x19, x20, [sp, #16]
   82a54:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82a58:	a94363f7 	ldp	x23, x24, [sp, #48]
   82a5c:	a8c77bfd 	ldp	x29, x30, [sp], #112
   82a60:	d65f03c0 	ret
   82a64:	f9400280 	ldr	x0, [x20]
   82a68:	b4000080 	cbz	x0, 82a78 <CUSBStandardHub::EnumeratePorts()+0x438>
   82a6c:	f9400001 	ldr	x1, [x0]
   82a70:	f9400421 	ldr	x1, [x1, #8]
   82a74:	d63f0020 	blr	x1
   82a78:	f900029f 	str	xzr, [x20]
   82a7c:	17ffff55 	b	827d0 <CUSBStandardHub::EnumeratePorts()+0x190>
   82a80:	940073e4 	bl	9fa10 <CLogger::Get()>
   82a84:	f0000163 	adrp	x3, b1000 <_etext+0x158>
   82a88:	2a1303e4 	mov	w4, w19
   82a8c:	910f0063 	add	x3, x3, #0x3c0
   82a90:	52800022 	mov	w2, #0x1                   	// #1
   82a94:	aa1a03e1 	mov	x1, x26
   82a98:	940075ca 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   82a9c:	17ffff4d 	b	827d0 <CUSBStandardHub::EnumeratePorts()+0x190>
   82aa0:	f0000161 	adrp	x1, b1000 <_etext+0x158>
   82aa4:	f0000160 	adrp	x0, b1000 <_etext+0x158>
   82aa8:	9108c021 	add	x1, x1, #0x230
   82aac:	910e2000 	add	x0, x0, #0x388
   82ab0:	52802722 	mov	w2, #0x139                 	// #313
   82ab4:	94006ca3 	bl	9dd40 <assertion_failed>
   82ab8:	52800020 	mov	w0, #0x1                   	// #1
   82abc:	390112a0 	strb	w0, [x21, #68]
   82ac0:	940071bc 	bl	9f1b0 <CKernelOptions::Get()>
   82ac4:	b4000140 	cbz	x0, 82aec <CUSBStandardHub::EnumeratePorts()+0x4ac>
   82ac8:	9400716a 	bl	9f070 <CKernelOptions::GetUSBPowerDelay() const>
   82acc:	2a0003f3 	mov	w19, w0
   82ad0:	340000e0 	cbz	w0, 82aec <CUSBStandardHub::EnumeratePorts()+0x4ac>
   82ad4:	94009187 	bl	a70f0 <CTimer::Get()>
   82ad8:	2a1303e0 	mov	w0, w19
   82adc:	94009129 	bl	a6f80 <CTimer::SimpleMsDelay(unsigned int)>
   82ae0:	b94042a0 	ldr	w0, [x21, #64]
   82ae4:	35ffdd00 	cbnz	w0, 82684 <CUSBStandardHub::EnumeratePorts()+0x44>
   82ae8:	17ffff7c 	b	828d8 <CUSBStandardHub::EnumeratePorts()+0x298>
   82aec:	94009181 	bl	a70f0 <CTimer::Get()>
   82af0:	52803fd3 	mov	w19, #0x1fe                 	// #510
   82af4:	2a1303e0 	mov	w0, w19
   82af8:	94009122 	bl	a6f80 <CTimer::SimpleMsDelay(unsigned int)>
   82afc:	b94042a0 	ldr	w0, [x21, #64]
   82b00:	35ffdc20 	cbnz	w0, 82684 <CUSBStandardHub::EnumeratePorts()+0x44>
   82b04:	17ffff75 	b	828d8 <CUSBStandardHub::EnumeratePorts()+0x298>
   82b08:	940073c2 	bl	9fa10 <CLogger::Get()>
   82b0c:	2a1303e4 	mov	w4, w19
   82b10:	52800022 	mov	w2, #0x1                   	// #1
   82b14:	f94037e3 	ldr	x3, [sp, #104]
   82b18:	aa1a03e1 	mov	x1, x26
   82b1c:	940075a9 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   82b20:	17ffff2c 	b	827d0 <CUSBStandardHub::EnumeratePorts()+0x190>
   82b24:	f0000161 	adrp	x1, b1000 <_etext+0x158>
   82b28:	f0000160 	adrp	x0, b1000 <_etext+0x158>
   82b2c:	a90153f3 	stp	x19, x20, [sp, #16]
   82b30:	9108c021 	add	x1, x1, #0x230
   82b34:	910cc000 	add	x0, x0, #0x330
   82b38:	52801ee2 	mov	w2, #0xf7                  	// #247
   82b3c:	a90363f7 	stp	x23, x24, [sp, #48]
   82b40:	a9046bf9 	stp	x25, x26, [sp, #64]
   82b44:	a90573fb 	stp	x27, x28, [sp, #80]
   82b48:	94006c7e 	bl	9dd40 <assertion_failed>
   82b4c:	f0000161 	adrp	x1, b1000 <_etext+0x158>
   82b50:	f0000160 	adrp	x0, b1000 <_etext+0x158>
   82b54:	a90153f3 	stp	x19, x20, [sp, #16]
   82b58:	9108c021 	add	x1, x1, #0x230
   82b5c:	910d0000 	add	x0, x0, #0x340
   82b60:	52801f42 	mov	w2, #0xfa                  	// #250
   82b64:	a9046bf9 	stp	x25, x26, [sp, #64]
   82b68:	a90573fb 	stp	x27, x28, [sp, #80]
   82b6c:	94006c75 	bl	9dd40 <assertion_failed>
   82b70:	f0000161 	adrp	x1, b1000 <_etext+0x158>
   82b74:	f0000160 	adrp	x0, b1000 <_etext+0x158>
   82b78:	a9046bf9 	stp	x25, x26, [sp, #64]
   82b7c:	9108c021 	add	x1, x1, #0x230
   82b80:	9109e000 	add	x0, x0, #0x278
   82b84:	52801f82 	mov	w2, #0xfc                  	// #252
   82b88:	a90573fb 	stp	x27, x28, [sp, #80]
   82b8c:	94006c6d 	bl	9dd40 <assertion_failed>
   82b90:	f0000161 	adrp	x1, b1000 <_etext+0x158>
   82b94:	f0000160 	adrp	x0, b1000 <_etext+0x158>
   82b98:	9108c021 	add	x1, x1, #0x230
   82b9c:	91106000 	add	x0, x0, #0x418
   82ba0:	52802ec2 	mov	w2, #0x176                 	// #374
   82ba4:	94006c67 	bl	9dd40 <assertion_failed>
   82ba8:	9400739a 	bl	9fa10 <CLogger::Get()>
   82bac:	f0000181 	adrp	x1, b5000 <_etext+0x4158>
   82bb0:	91394021 	add	x1, x1, #0xe50
   82bb4:	f0000163 	adrp	x3, b1000 <_etext+0x158>
   82bb8:	91002021 	add	x1, x1, #0x8
   82bbc:	9111e063 	add	x3, x3, #0x478
   82bc0:	17ffff6e 	b	82978 <CUSBStandardHub::EnumeratePorts()+0x338>
   82bc4:	aa1403e0 	mov	x0, x20
   82bc8:	d2800081 	mov	x1, #0x4                   	// #4
   82bcc:	940095cd 	bl	a8300 <operator delete(void*, unsigned long)>
   82bd0:	b94042a0 	ldr	w0, [x21, #64]
   82bd4:	34000960 	cbz	w0, 82d00 <CUSBStandardHub::EnumeratePorts()+0x6c0>
   82bd8:	d2800033 	mov	x19, #0x1                   	// #1
   82bdc:	a9046bf9 	stp	x25, x26, [sp, #64]
   82be0:	f000019a 	adrp	x26, b5000 <_etext+0x4158>
   82be4:	9139435a 	add	x26, x26, #0xe50
   82be8:	2a1303f4 	mov	w20, w19
   82bec:	9100235a 	add	x26, x26, #0x8
   82bf0:	910202b9 	add	x25, x21, #0x80
   82bf4:	a90573fb 	stp	x27, x28, [sp, #80]
   82bf8:	f000017b 	adrp	x27, b1000 <_etext+0x158>
   82bfc:	910fc37b 	add	x27, x27, #0x3f0
   82c00:	14000006 	b	82c18 <CUSBStandardHub::EnumeratePorts()+0x5d8>
   82c04:	b94042a1 	ldr	w1, [x21, #64]
   82c08:	91000673 	add	x19, x19, #0x1
   82c0c:	51000660 	sub	w0, w19, #0x1
   82c10:	6b00003f 	cmp	w1, w0
   82c14:	54000449 	b.ls	82c9c <CUSBStandardHub::EnumeratePorts()+0x65c>  // b.plast
   82c18:	12003e78 	and	w24, w19, #0xffff
   82c1c:	52800087 	mov	w7, #0x4                   	// #4
   82c20:	f8737b26 	ldr	x6, [x25, x19, lsl #3]
   82c24:	2a1803e5 	mov	w5, w24
   82c28:	52800004 	mov	w4, #0x0                   	// #0
   82c2c:	52800003 	mov	w3, #0x0                   	// #0
   82c30:	12800b82 	mov	w2, #0xffffffa3            	// #-93
   82c34:	aa1703e1 	mov	x1, x23
   82c38:	aa1603e0 	mov	x0, x22
   82c3c:	97fff8f5 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   82c40:	7100101f 	cmp	w0, #0x4
   82c44:	54fffe01 	b.ne	82c04 <CUSBStandardHub::EnumeratePorts()+0x5c4>  // b.any
   82c48:	f8737b20 	ldr	x0, [x25, x19, lsl #3]
   82c4c:	39400000 	ldrb	w0, [x0]
   82c50:	361ffda0 	tbz	w0, #3, 82c04 <CUSBStandardHub::EnumeratePorts()+0x5c4>
   82c54:	aa1703e1 	mov	x1, x23
   82c58:	2a1803e5 	mov	w5, w24
   82c5c:	52800007 	mov	w7, #0x0                   	// #0
   82c60:	d2800006 	mov	x6, #0x0                   	// #0
   82c64:	52800104 	mov	w4, #0x8                   	// #8
   82c68:	52800023 	mov	w3, #0x1                   	// #1
   82c6c:	52800462 	mov	w2, #0x23                  	// #35
   82c70:	aa1603e0 	mov	x0, x22
   82c74:	97fff8e7 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   82c78:	94007366 	bl	9fa10 <CLogger::Get()>
   82c7c:	2a1303e4 	mov	w4, w19
   82c80:	aa1b03e3 	mov	x3, x27
   82c84:	52800022 	mov	w2, #0x1                   	// #1
   82c88:	aa1a03e1 	mov	x1, x26
   82c8c:	52800014 	mov	w20, #0x0                   	// #0
   82c90:	9400754c 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   82c94:	17ffffdc 	b	82c04 <CUSBStandardHub::EnumeratePorts()+0x5c4>
   82c98:	52800014 	mov	w20, #0x0                   	// #0
   82c9c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   82ca0:	a94573fb 	ldp	x27, x28, [sp, #80]
   82ca4:	17ffff6a 	b	82a4c <CUSBStandardHub::EnumeratePorts()+0x40c>
   82ca8:	2a1803e5 	mov	w5, w24
   82cac:	aa1703e1 	mov	x1, x23
   82cb0:	52800007 	mov	w7, #0x0                   	// #0
   82cb4:	d2800006 	mov	x6, #0x0                   	// #0
   82cb8:	52800104 	mov	w4, #0x8                   	// #8
   82cbc:	52800023 	mov	w3, #0x1                   	// #1
   82cc0:	52800462 	mov	w2, #0x23                  	// #35
   82cc4:	aa1603e0 	mov	x0, x22
   82cc8:	97fff8d2 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   82ccc:	94007351 	bl	9fa10 <CLogger::Get()>
   82cd0:	f0000181 	adrp	x1, b5000 <_etext+0x4158>
   82cd4:	91394021 	add	x1, x1, #0xe50
   82cd8:	f0000163 	adrp	x3, b1000 <_etext+0x158>
   82cdc:	2a1303e4 	mov	w4, w19
   82ce0:	91002021 	add	x1, x1, #0x8
   82ce4:	910fc063 	add	x3, x3, #0x3f0
   82ce8:	52800022 	mov	w2, #0x1                   	// #1
   82cec:	52800014 	mov	w20, #0x0                   	// #0
   82cf0:	94007534 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   82cf4:	a9446bf9 	ldp	x25, x26, [sp, #64]
   82cf8:	a94573fb 	ldp	x27, x28, [sp, #80]
   82cfc:	17ffff54 	b	82a4c <CUSBStandardHub::EnumeratePorts()+0x40c>
   82d00:	52800034 	mov	w20, #0x1                   	// #1
   82d04:	17ffff52 	b	82a4c <CUSBStandardHub::EnumeratePorts()+0x40c>
   82d08:	d503201f 	nop
   82d0c:	d503201f 	nop

0000000000082d10 <CUSBStandardHub::ReScanDevices()>:
   82d10:	17fffe4c 	b	82640 <CUSBStandardHub::EnumeratePorts()>
   82d14:	d503201f 	nop
   82d18:	d503201f 	nop
   82d1c:	d503201f 	nop

0000000000082d20 <CUSBStandardHub::Configure()>:
   82d20:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   82d24:	910003fd 	mov	x29, sp
   82d28:	a90153f3 	stp	x19, x20, [sp, #16]
   82d2c:	aa0003f3 	mov	x19, x0
   82d30:	a9025bf5 	stp	x21, x22, [sp, #32]
   82d34:	94001ebb 	bl	8a820 <CUSBFunction::GetNumEndpoints() const>
   82d38:	12001c14 	and	w20, w0, #0xff
   82d3c:	7100069f 	cmp	w20, #0x1
   82d40:	54000181 	b.ne	82d70 <CUSBStandardHub::Configure()+0x50>  // b.any
   82d44:	528000a1 	mov	w1, #0x5                   	// #5
   82d48:	aa1303e0 	mov	x0, x19
   82d4c:	94001ee5 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   82d50:	aa0003f5 	mov	x21, x0
   82d54:	b40000e0 	cbz	x0, 82d70 <CUSBStandardHub::Configure()+0x50>
   82d58:	39c00800 	ldrsb	w0, [x0, #2]
   82d5c:	36f800a0 	tbz	w0, #31, 82d70 <CUSBStandardHub::Configure()+0x50>
   82d60:	39400ea0 	ldrb	w0, [x21, #3]
   82d64:	12001400 	and	w0, w0, #0x3f
   82d68:	71000c1f 	cmp	w0, #0x3
   82d6c:	54000180 	b.eq	82d9c <CUSBStandardHub::Configure()+0x7c>  // b.none
   82d70:	f0000181 	adrp	x1, b5000 <_etext+0x4158>
   82d74:	91394021 	add	x1, x1, #0xe50
   82d78:	aa1303e0 	mov	x0, x19
   82d7c:	91002021 	add	x1, x1, #0x8
   82d80:	52800015 	mov	w21, #0x0                   	// #0
   82d84:	94001ee3 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   82d88:	2a1503e0 	mov	w0, w21
   82d8c:	a94153f3 	ldp	x19, x20, [sp, #16]
   82d90:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82d94:	a8c37bfd 	ldp	x29, x30, [sp], #48
   82d98:	d65f03c0 	ret
   82d9c:	aa1303e0 	mov	x0, x19
   82da0:	94001eac 	bl	8a850 <CUSBFunction::GetDevice() const>
   82da4:	aa0003f6 	mov	x22, x0
   82da8:	d2800400 	mov	x0, #0x20                  	// #32
   82dac:	9400952d 	bl	a8260 <operator new(unsigned long)>
   82db0:	aa1503e2 	mov	x2, x21
   82db4:	aa1603e1 	mov	x1, x22
   82db8:	aa0003f5 	mov	x21, x0
   82dbc:	94001cdd 	bl	8a130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   82dc0:	aa1303e0 	mov	x0, x19
   82dc4:	f9001a75 	str	x21, [x19, #48]
   82dc8:	94001dd2 	bl	8a510 <CUSBFunction::Configure()>
   82dcc:	72001c15 	ands	w21, w0, #0xff
   82dd0:	54000580 	b.eq	82e80 <CUSBStandardHub::Configure()+0x160>  // b.none
   82dd4:	f0000195 	adrp	x21, b5000 <_etext+0x4158>
   82dd8:	913942b5 	add	x21, x21, #0xe50
   82ddc:	910022b6 	add	x22, x21, #0x8
   82de0:	f00001c0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   82de4:	aa1603e2 	mov	x2, x22
   82de8:	2a1403e1 	mov	w1, w20
   82dec:	9102a000 	add	x0, x0, #0xa8
   82df0:	940096c8 	bl	a8910 <CNumberPool::AllocateNumber(bool, char const*)>
   82df4:	b900da60 	str	w0, [x19, #216]
   82df8:	94006fb6 	bl	9ecd0 <CDeviceNameService::Get()>
   82dfc:	b940da62 	ldr	w2, [x19, #216]
   82e00:	aa1503e1 	mov	x1, x21
   82e04:	52800004 	mov	w4, #0x0                   	// #0
   82e08:	aa1303e3 	mov	x3, x19
   82e0c:	94006fbd 	bl	9ed00 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   82e10:	aa1303e0 	mov	x0, x19
   82e14:	97fffe0b 	bl	82640 <CUSBStandardHub::EnumeratePorts()>
   82e18:	72001c15 	ands	w21, w0, #0xff
   82e1c:	54000240 	b.eq	82e64 <CUSBStandardHub::Configure()+0x144>  // b.none
   82e20:	aa1303e0 	mov	x0, x19
   82e24:	94001ea3 	bl	8a8b0 <CUSBFunction::GetHost() const>
   82e28:	97fff912 	bl	81270 <CUSBHostController::IsPlugAndPlay() const>
   82e2c:	72001c1f 	tst	w0, #0xff
   82e30:	54fffac0 	b.eq	82d88 <CUSBStandardHub::Configure()+0x68>  // b.none
   82e34:	aa1303e0 	mov	x0, x19
   82e38:	97fffd2e 	bl	822f0 <CUSBStandardHub::StartStatusChangeRequest()>
   82e3c:	72001c1f 	tst	w0, #0xff
   82e40:	54fffa41 	b.ne	82d88 <CUSBStandardHub::Configure()+0x68>  // b.any
   82e44:	940072f3 	bl	9fa10 <CLogger::Get()>
   82e48:	2a1403e2 	mov	w2, w20
   82e4c:	aa1603e1 	mov	x1, x22
   82e50:	f0000163 	adrp	x3, b1000 <_etext+0x158>
   82e54:	91138063 	add	x3, x3, #0x4e0
   82e58:	52800015 	mov	w21, #0x0                   	// #0
   82e5c:	940074d9 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   82e60:	17ffffca 	b	82d88 <CUSBStandardHub::Configure()+0x68>
   82e64:	940072eb 	bl	9fa10 <CLogger::Get()>
   82e68:	2a1403e2 	mov	w2, w20
   82e6c:	aa1603e1 	mov	x1, x22
   82e70:	f0000163 	adrp	x3, b1000 <_etext+0x158>
   82e74:	91132063 	add	x3, x3, #0x4c8
   82e78:	940074d2 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   82e7c:	17ffffc3 	b	82d88 <CUSBStandardHub::Configure()+0x68>
   82e80:	940072e4 	bl	9fa10 <CLogger::Get()>
   82e84:	f0000181 	adrp	x1, b5000 <_etext+0x4158>
   82e88:	91394021 	add	x1, x1, #0xe50
   82e8c:	f0000163 	adrp	x3, b1000 <_etext+0x158>
   82e90:	2a1403e2 	mov	w2, w20
   82e94:	91002021 	add	x1, x1, #0x8
   82e98:	9112c063 	add	x3, x3, #0x4b0
   82e9c:	940074c9 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   82ea0:	17ffffba 	b	82d88 <CUSBStandardHub::Configure()+0x68>
   82ea4:	d503201f 	nop
   82ea8:	d503201f 	nop
   82eac:	d503201f 	nop

0000000000082eb0 <CUSBStandardHub::HandlePortStatusChange()>:
   82eb0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   82eb4:	910003fd 	mov	x29, sp
   82eb8:	a90153f3 	stp	x19, x20, [sp, #16]
   82ebc:	aa0003f4 	mov	x20, x0
   82ec0:	f9401c00 	ldr	x0, [x0, #56]
   82ec4:	b40019e0 	cbz	x0, 83200 <CUSBStandardHub::HandlePortStatusChange()+0x350>
   82ec8:	b9404281 	ldr	w1, [x20, #64]
   82ecc:	a90363f7 	stp	x23, x24, [sp, #48]
   82ed0:	39400017 	ldrb	w23, [x0]
   82ed4:	71001c3f 	cmp	w1, #0x7
   82ed8:	54000889 	b.ls	82fe8 <CUSBStandardHub::HandlePortStatusChange()+0x138>  // b.plast
   82edc:	71003c3f 	cmp	w1, #0xf
   82ee0:	54001a48 	b.hi	83228 <CUSBStandardHub::HandlePortStatusChange()+0x378>  // b.pmore
   82ee4:	39400002 	ldrb	w2, [x0]
   82ee8:	39400417 	ldrb	w23, [x0, #1]
   82eec:	2a172057 	orr	w23, w2, w23, lsl #8
   82ef0:	370011a2 	tbnz	w2, #0, 83124 <CUSBStandardHub::HandlePortStatusChange()+0x274>
   82ef4:	a9046bf9 	stp	x25, x26, [sp, #64]
   82ef8:	f0000199 	adrp	x25, b5000 <_etext+0x4158>
   82efc:	91394339 	add	x25, x25, #0xe50
   82f00:	9000001a 	adrp	x26, 82000 <CUSBStandardHub::~CUSBStandardHub()>
   82f04:	9134435a 	add	x26, x26, #0xd10
   82f08:	91002339 	add	x25, x25, #0x8
   82f0c:	52800013 	mov	w19, #0x0                   	// #0
   82f10:	a9025bf5 	stp	x21, x22, [sp, #32]
   82f14:	a90573fb 	stp	x27, x28, [sp, #80]
   82f18:	2a1303f8 	mov	w24, w19
   82f1c:	11000673 	add	w19, w19, #0x1
   82f20:	1ad32ae0 	asr	w0, w23, w19
   82f24:	36000480 	tbz	w0, #0, 82fb4 <CUSBStandardHub::HandlePortStatusChange()+0x104>
   82f28:	aa1403e0 	mov	x0, x20
   82f2c:	12003e7b 	and	w27, w19, #0xffff
   82f30:	8b384e96 	add	x22, x20, w24, uxtw #3
   82f34:	94001e5f 	bl	8a8b0 <CUSBFunction::GetHost() const>
   82f38:	aa0003f5 	mov	x21, x0
   82f3c:	aa1403e0 	mov	x0, x20
   82f40:	94001e50 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   82f44:	aa0003e1 	mov	x1, x0
   82f48:	2a1b03e5 	mov	w5, w27
   82f4c:	f94046c6 	ldr	x6, [x22, #136]
   82f50:	aa1503e0 	mov	x0, x21
   82f54:	52800087 	mov	w7, #0x4                   	// #4
   82f58:	52800004 	mov	w4, #0x0                   	// #0
   82f5c:	52800003 	mov	w3, #0x0                   	// #0
   82f60:	12800b82 	mov	w2, #0xffffffa3            	// #-93
   82f64:	97fff82b 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   82f68:	7100101f 	cmp	w0, #0x4
   82f6c:	54000100 	b.eq	82f8c <CUSBStandardHub::HandlePortStatusChange()+0xdc>  // b.none
   82f70:	940072a8 	bl	9fa10 <CLogger::Get()>
   82f74:	f0000163 	adrp	x3, b1000 <_etext+0x158>
   82f78:	2a1303e4 	mov	w4, w19
   82f7c:	91152063 	add	x3, x3, #0x548
   82f80:	52800002 	mov	w2, #0x0                   	// #0
   82f84:	aa1903e1 	mov	x1, x25
   82f88:	9400748e 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   82f8c:	f94046c1 	ldr	x1, [x22, #136]
   82f90:	39400820 	ldrb	w0, [x1, #2]
   82f94:	39400c35 	ldrb	w21, [x1, #3]
   82f98:	2a152015 	orr	w21, w0, w21, lsl #8
   82f9c:	37100f40 	tbnz	w0, #2, 83184 <CUSBStandardHub::HandlePortStatusChange()+0x2d4>
   82fa0:	37180ff5 	tbnz	w21, #3, 8319c <CUSBStandardHub::HandlePortStatusChange()+0x2ec>
   82fa4:	37080915 	tbnz	w21, #1, 830c4 <CUSBStandardHub::HandlePortStatusChange()+0x214>
   82fa8:	372005f5 	tbnz	w21, #4, 83064 <CUSBStandardHub::HandlePortStatusChange()+0x1b4>
   82fac:	37000255 	tbnz	w21, #0, 82ff4 <CUSBStandardHub::HandlePortStatusChange()+0x144>
   82fb0:	b9404281 	ldr	w1, [x20, #64]
   82fb4:	6b01027f 	cmp	w19, w1
   82fb8:	54fffb03 	b.cc	82f18 <CUSBStandardHub::HandlePortStatusChange()+0x68>  // b.lo, b.ul, b.last
   82fbc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82fc0:	a9446bf9 	ldp	x25, x26, [sp, #64]
   82fc4:	a94573fb 	ldp	x27, x28, [sp, #80]
   82fc8:	aa1403e0 	mov	x0, x20
   82fcc:	97fffcc9 	bl	822f0 <CUSBStandardHub::StartStatusChangeRequest()>
   82fd0:	72001c1f 	tst	w0, #0xff
   82fd4:	54001000 	b.eq	831d4 <CUSBStandardHub::HandlePortStatusChange()+0x324>  // b.none
   82fd8:	a94153f3 	ldp	x19, x20, [sp, #16]
   82fdc:	a94363f7 	ldp	x23, x24, [sp, #48]
   82fe0:	a8c67bfd 	ldp	x29, x30, [sp], #96
   82fe4:	d65f03c0 	ret
   82fe8:	370009f7 	tbnz	w23, #0, 83124 <CUSBStandardHub::HandlePortStatusChange()+0x274>
   82fec:	35fff841 	cbnz	w1, 82ef4 <CUSBStandardHub::HandlePortStatusChange()+0x44>
   82ff0:	17fffff6 	b	82fc8 <CUSBStandardHub::HandlePortStatusChange()+0x118>
   82ff4:	aa1403e0 	mov	x0, x20
   82ff8:	94001e2e 	bl	8a8b0 <CUSBFunction::GetHost() const>
   82ffc:	aa0003f5 	mov	x21, x0
   83000:	aa1403e0 	mov	x0, x20
   83004:	94001e1f 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   83008:	aa0003e1 	mov	x1, x0
   8300c:	2a1b03e5 	mov	w5, w27
   83010:	aa1503e0 	mov	x0, x21
   83014:	52800007 	mov	w7, #0x0                   	// #0
   83018:	d2800006 	mov	x6, #0x0                   	// #0
   8301c:	52800204 	mov	w4, #0x10                  	// #16
   83020:	52800023 	mov	w3, #0x1                   	// #1
   83024:	52800462 	mov	w2, #0x23                  	// #35
   83028:	97fff7fa 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8302c:	37f80c40 	tbnz	w0, #31, 831b4 <CUSBStandardHub::HandlePortStatusChange()+0x304>
   83030:	f94046c1 	ldr	x1, [x22, #136]
   83034:	f94026c0 	ldr	x0, [x22, #72]
   83038:	39400021 	ldrb	w1, [x1]
   8303c:	360008a1 	tbz	w1, #0, 83150 <CUSBStandardHub::HandlePortStatusChange()+0x2a0>
   83040:	b5fffb80 	cbnz	x0, 82fb0 <CUSBStandardHub::HandlePortStatusChange()+0x100>
   83044:	f9400280 	ldr	x0, [x20]
   83048:	f9402801 	ldr	x1, [x0, #80]
   8304c:	aa1403e0 	mov	x0, x20
   83050:	eb1a003f 	cmp	x1, x26
   83054:	54000fc1 	b.ne	8324c <CUSBStandardHub::HandlePortStatusChange()+0x39c>  // b.any
   83058:	97fffd7a 	bl	82640 <CUSBStandardHub::EnumeratePorts()>
   8305c:	b9404281 	ldr	w1, [x20, #64]
   83060:	17ffffd5 	b	82fb4 <CUSBStandardHub::HandlePortStatusChange()+0x104>
   83064:	aa1403e0 	mov	x0, x20
   83068:	94001e12 	bl	8a8b0 <CUSBFunction::GetHost() const>
   8306c:	aa0003fc 	mov	x28, x0
   83070:	aa1403e0 	mov	x0, x20
   83074:	94001e03 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   83078:	aa0003e1 	mov	x1, x0
   8307c:	52800007 	mov	w7, #0x0                   	// #0
   83080:	aa1c03e0 	mov	x0, x28
   83084:	d2800006 	mov	x6, #0x0                   	// #0
   83088:	2a1b03e5 	mov	w5, w27
   8308c:	52800284 	mov	w4, #0x14                  	// #20
   83090:	52800023 	mov	w3, #0x1                   	// #1
   83094:	52800462 	mov	w2, #0x23                  	// #35
   83098:	97fff7de 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8309c:	36fff880 	tbz	w0, #31, 82fac <CUSBStandardHub::HandlePortStatusChange()+0xfc>
   830a0:	9400725c 	bl	9fa10 <CLogger::Get()>
   830a4:	d0000163 	adrp	x3, b1000 <_etext+0x158>
   830a8:	2a1303e4 	mov	w4, w19
   830ac:	9117e063 	add	x3, x3, #0x5f8
   830b0:	52800002 	mov	w2, #0x0                   	// #0
   830b4:	aa1903e1 	mov	x1, x25
   830b8:	94007442 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   830bc:	3607f7b5 	tbz	w21, #0, 82fb0 <CUSBStandardHub::HandlePortStatusChange()+0x100>
   830c0:	17ffffcd 	b	82ff4 <CUSBStandardHub::HandlePortStatusChange()+0x144>
   830c4:	aa1403e0 	mov	x0, x20
   830c8:	94001dfa 	bl	8a8b0 <CUSBFunction::GetHost() const>
   830cc:	aa0003fc 	mov	x28, x0
   830d0:	aa1403e0 	mov	x0, x20
   830d4:	94001deb 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   830d8:	aa0003e1 	mov	x1, x0
   830dc:	52800007 	mov	w7, #0x0                   	// #0
   830e0:	aa1c03e0 	mov	x0, x28
   830e4:	d2800006 	mov	x6, #0x0                   	// #0
   830e8:	2a1b03e5 	mov	w5, w27
   830ec:	52800224 	mov	w4, #0x11                  	// #17
   830f0:	52800023 	mov	w3, #0x1                   	// #1
   830f4:	52800462 	mov	w2, #0x23                  	// #35
   830f8:	97fff7c6 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   830fc:	36fff560 	tbz	w0, #31, 82fa8 <CUSBStandardHub::HandlePortStatusChange()+0xf8>
   83100:	94007244 	bl	9fa10 <CLogger::Get()>
   83104:	d0000163 	adrp	x3, b1000 <_etext+0x158>
   83108:	2a1303e4 	mov	w4, w19
   8310c:	91174063 	add	x3, x3, #0x5d0
   83110:	52800002 	mov	w2, #0x0                   	// #0
   83114:	aa1903e1 	mov	x1, x25
   83118:	9400742a 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8311c:	3627f495 	tbz	w21, #4, 82fac <CUSBStandardHub::HandlePortStatusChange()+0xfc>
   83120:	17ffffd1 	b	83064 <CUSBStandardHub::HandlePortStatusChange()+0x1b4>
   83124:	9400723b 	bl	9fa10 <CLogger::Get()>
   83128:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   8312c:	91394021 	add	x1, x1, #0xe50
   83130:	d0000163 	adrp	x3, b1000 <_etext+0x158>
   83134:	91002021 	add	x1, x1, #0x8
   83138:	9114a063 	add	x3, x3, #0x528
   8313c:	52800002 	mov	w2, #0x0                   	// #0
   83140:	94007420 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   83144:	b9404281 	ldr	w1, [x20, #64]
   83148:	35ffed61 	cbnz	w1, 82ef4 <CUSBStandardHub::HandlePortStatusChange()+0x44>
   8314c:	17ffff9f 	b	82fc8 <CUSBStandardHub::HandlePortStatusChange()+0x118>
   83150:	b4fff300 	cbz	x0, 82fb0 <CUSBStandardHub::HandlePortStatusChange()+0x100>
   83154:	2a1803e1 	mov	w1, w24
   83158:	aa1403e0 	mov	x0, x20
   8315c:	97fffc19 	bl	821c0 <CUSBStandardHub::DisablePort(unsigned int)>
   83160:	72001c1f 	tst	w0, #0xff
   83164:	54fff260 	b.eq	82fb0 <CUSBStandardHub::HandlePortStatusChange()+0x100>  // b.none
   83168:	f94026c0 	ldr	x0, [x22, #72]
   8316c:	b4000080 	cbz	x0, 8317c <CUSBStandardHub::HandlePortStatusChange()+0x2cc>
   83170:	f9400001 	ldr	x1, [x0]
   83174:	f9400421 	ldr	x1, [x1, #8]
   83178:	d63f0020 	blr	x1
   8317c:	f90026df 	str	xzr, [x22, #72]
   83180:	17ffff8c 	b	82fb0 <CUSBStandardHub::HandlePortStatusChange()+0x100>
   83184:	d0000161 	adrp	x1, b1000 <_etext+0x158>
   83188:	d0000160 	adrp	x0, b1000 <_etext+0x158>
   8318c:	9108c021 	add	x1, x1, #0x230
   83190:	9115c000 	add	x0, x0, #0x570
   83194:	528046c2 	mov	w2, #0x236                 	// #566
   83198:	94006aea 	bl	9dd40 <assertion_failed>
   8319c:	d0000161 	adrp	x1, b1000 <_etext+0x158>
   831a0:	d0000160 	adrp	x0, b1000 <_etext+0x158>
   831a4:	9108c021 	add	x1, x1, #0x230
   831a8:	91168000 	add	x0, x0, #0x5a0
   831ac:	528046e2 	mov	w2, #0x237                 	// #567
   831b0:	94006ae4 	bl	9dd40 <assertion_failed>
   831b4:	94007217 	bl	9fa10 <CLogger::Get()>
   831b8:	d0000163 	adrp	x3, b1000 <_etext+0x158>
   831bc:	2a1303e4 	mov	w4, w19
   831c0:	91188063 	add	x3, x3, #0x620
   831c4:	52800002 	mov	w2, #0x0                   	// #0
   831c8:	aa1903e1 	mov	x1, x25
   831cc:	940073fd 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   831d0:	17ffff98 	b	83030 <CUSBStandardHub::HandlePortStatusChange()+0x180>
   831d4:	9400720f 	bl	9fa10 <CLogger::Get()>
   831d8:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   831dc:	91394021 	add	x1, x1, #0xe50
   831e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   831e4:	d0000163 	adrp	x3, b1000 <_etext+0x158>
   831e8:	91002021 	add	x1, x1, #0x8
   831ec:	91194063 	add	x3, x3, #0x650
   831f0:	52800022 	mov	w2, #0x1                   	// #1
   831f4:	a94363f7 	ldp	x23, x24, [sp, #48]
   831f8:	a8c67bfd 	ldp	x29, x30, [sp], #96
   831fc:	140073f1 	b	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   83200:	d0000161 	adrp	x1, b1000 <_etext+0x158>
   83204:	d0000160 	adrp	x0, b1000 <_etext+0x158>
   83208:	a9025bf5 	stp	x21, x22, [sp, #32]
   8320c:	9108c021 	add	x1, x1, #0x230
   83210:	9113e000 	add	x0, x0, #0x4f8
   83214:	52804242 	mov	w2, #0x212                 	// #530
   83218:	a90363f7 	stp	x23, x24, [sp, #48]
   8321c:	a9046bf9 	stp	x25, x26, [sp, #64]
   83220:	a90573fb 	stp	x27, x28, [sp, #80]
   83224:	94006ac7 	bl	9dd40 <assertion_failed>
   83228:	d0000161 	adrp	x1, b1000 <_etext+0x158>
   8322c:	d0000160 	adrp	x0, b1000 <_etext+0x158>
   83230:	a9025bf5 	stp	x21, x22, [sp, #32]
   83234:	9108c021 	add	x1, x1, #0x230
   83238:	91146000 	add	x0, x0, #0x518
   8323c:	528042c2 	mov	w2, #0x216                 	// #534
   83240:	a9046bf9 	stp	x25, x26, [sp, #64]
   83244:	a90573fb 	stp	x27, x28, [sp, #80]
   83248:	94006abe 	bl	9dd40 <assertion_failed>
   8324c:	d63f0020 	blr	x1
   83250:	b9404281 	ldr	w1, [x20, #64]
   83254:	17ffff58 	b	82fb4 <CUSBStandardHub::HandlePortStatusChange()+0x104>
	...

0000000000083260 <_GLOBAL__sub_I__ZN15CUSBStandardHub18s_DeviceNumberPoolE>:
   83260:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83264:	910003fd 	mov	x29, sp
   83268:	528007e2 	mov	w2, #0x3f                  	// #63
   8326c:	52800021 	mov	w1, #0x1                   	// #1
   83270:	f9000bf3 	str	x19, [sp, #16]
   83274:	d00001d3 	adrp	x19, bd000 <CNetDevice::s_SpeedString+0x18>
   83278:	9102a273 	add	x19, x19, #0xa8
   8327c:	aa1303e0 	mov	x0, x19
   83280:	94009588 	bl	a88a0 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   83284:	d00001c2 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   83288:	b0000120 	adrp	x0, a8000 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x20>
   8328c:	aa1303e1 	mov	x1, x19
   83290:	91074042 	add	x2, x2, #0x1d0
   83294:	f9400bf3 	ldr	x19, [sp, #16]
   83298:	91240000 	add	x0, x0, #0x900
   8329c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   832a0:	14008b48 	b	a5fc0 <__cxa_atexit>
	...

00000000000832b0 <CXHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)>:
   832b0:	3943c000 	ldrb	w0, [x0, #240]
   832b4:	35000200 	cbnz	w0, 832f4 <CXHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x44>
   832b8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   832bc:	910003fd 	mov	x29, sp
   832c0:	a90153f3 	stp	x19, x20, [sp, #16]
   832c4:	aa0103f3 	mov	x19, x1
   832c8:	b40001a1 	cbz	x1, 832fc <CXHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x4c>
   832cc:	aa0103e0 	mov	x0, x1
   832d0:	2a0203f4 	mov	w20, w2
   832d4:	97fffa17 	bl	81b30 <CUSBRequest::GetEndpoint() const>
   832d8:	94001c42 	bl	8a3e0 <CUSBEndpoint::GetXHCIEndpoint()>
   832dc:	b40001a0 	cbz	x0, 83310 <CXHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x60>
   832e0:	2a1403e2 	mov	w2, w20
   832e4:	aa1303e1 	mov	x1, x19
   832e8:	a94153f3 	ldp	x19, x20, [sp, #16]
   832ec:	a8c27bfd 	ldp	x29, x30, [sp], #32
   832f0:	140005ec 	b	84aa0 <CXHCIEndpoint::Transfer(CUSBRequest*, unsigned int)>
   832f4:	52800000 	mov	w0, #0x0                   	// #0
   832f8:	d65f03c0 	ret
   832fc:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   83300:	913aa021 	add	x1, x1, #0xea8
   83304:	91004020 	add	x0, x1, #0x10
   83308:	528026a2 	mov	w2, #0x135                 	// #309
   8330c:	94006a8d 	bl	9dd40 <assertion_failed>
   83310:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   83314:	913aa021 	add	x1, x1, #0xea8
   83318:	91008020 	add	x0, x1, #0x20
   8331c:	528026e2 	mov	w2, #0x137                 	// #311
   83320:	94006a88 	bl	9dd40 <assertion_failed>
   83324:	d503201f 	nop
   83328:	d503201f 	nop
   8332c:	d503201f 	nop

0000000000083330 <CXHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)>:
   83330:	3943c000 	ldrb	w0, [x0, #240]
   83334:	35000200 	cbnz	w0, 83374 <CXHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x44>
   83338:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8333c:	910003fd 	mov	x29, sp
   83340:	a90153f3 	stp	x19, x20, [sp, #16]
   83344:	aa0103f3 	mov	x19, x1
   83348:	b40001a1 	cbz	x1, 8337c <CXHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x4c>
   8334c:	aa0103e0 	mov	x0, x1
   83350:	2a0203f4 	mov	w20, w2
   83354:	97fff9f7 	bl	81b30 <CUSBRequest::GetEndpoint() const>
   83358:	94001c22 	bl	8a3e0 <CUSBEndpoint::GetXHCIEndpoint()>
   8335c:	b40001a0 	cbz	x0, 83390 <CXHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x60>
   83360:	2a1403e2 	mov	w2, w20
   83364:	aa1303e1 	mov	x1, x19
   83368:	a94153f3 	ldp	x19, x20, [sp, #16]
   8336c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83370:	140005b4 	b	84a40 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)>
   83374:	52800000 	mov	w0, #0x0                   	// #0
   83378:	d65f03c0 	ret
   8337c:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   83380:	913aa021 	add	x1, x1, #0xea8
   83384:	91004020 	add	x0, x1, #0x10
   83388:	52802862 	mov	w2, #0x143                 	// #323
   8338c:	94006a6d 	bl	9dd40 <assertion_failed>
   83390:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   83394:	913aa021 	add	x1, x1, #0xea8
   83398:	91008020 	add	x0, x1, #0x20
   8339c:	528028a2 	mov	w2, #0x145                 	// #325
   833a0:	94006a68 	bl	9dd40 <assertion_failed>
   833a4:	d503201f 	nop
   833a8:	d503201f 	nop
   833ac:	d503201f 	nop

00000000000833b0 <CXHCIDevice::CXHCIDevice(CInterruptSystem*, CTimer*, bool, unsigned int, CXHCISharedMemAllocator*)>:
   833b0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   833b4:	910003fd 	mov	x29, sp
   833b8:	a9025bf5 	stp	x21, x22, [sp, #32]
   833bc:	aa0103f5 	mov	x21, x1
   833c0:	2a0303e1 	mov	w1, w3
   833c4:	2a0403f6 	mov	w22, w4
   833c8:	a90153f3 	stp	x19, x20, [sp, #16]
   833cc:	aa0003f3 	mov	x19, x0
   833d0:	aa0503f4 	mov	x20, x5
   833d4:	97fff6e3 	bl	80f60 <CUSBHostController::CUSBHostController(bool)>
   833d8:	d0000182 	adrp	x2, b5000 <_etext+0x4158>
   833dc:	9139c042 	add	x2, x2, #0xe70
   833e0:	f9001275 	str	x21, [x19, #32]
   833e4:	aa1503e1 	mov	x1, x21
   833e8:	9100c260 	add	x0, x19, #0x30
   833ec:	3900a27f 	strb	wzr, [x19, #40]
   833f0:	f9000262 	str	x2, [x19]
   833f4:	b9002e76 	str	w22, [x19, #44]
   833f8:	94009a22 	bl	a9c80 <CBcmPCIeHostBridge::CBcmPCIeHostBridge(CInterruptSystem*)>
   833fc:	f9005674 	str	x20, [x19, #168]
   83400:	3902c27f 	strb	wzr, [x19, #176]
   83404:	a90bfe7f 	stp	xzr, xzr, [x19, #184]
   83408:	a90cfe7f 	stp	xzr, xzr, [x19, #200]
   8340c:	a90dfe7f 	stp	xzr, xzr, [x19, #216]
   83410:	f900767f 	str	xzr, [x19, #232]
   83414:	3903c27f 	strb	wzr, [x19, #240]
   83418:	b40000b4 	cbz	x20, 8342c <CXHCIDevice::CXHCIDevice(CInterruptSystem*, CTimer*, bool, unsigned int, CXHCISharedMemAllocator*)+0x7c>
   8341c:	a94153f3 	ldp	x19, x20, [sp, #16]
   83420:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83424:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83428:	d65f03c0 	ret
   8342c:	52800021 	mov	w1, #0x1                   	// #1
   83430:	52800200 	mov	w0, #0x10                  	// #16
   83434:	3902c261 	strb	w1, [x19, #176]
   83438:	94009736 	bl	a9110 <CMemorySystem::GetCoherentPage(unsigned int)>
   8343c:	aa0003f5 	mov	x21, x0
   83440:	528007e0 	mov	w0, #0x3f                  	// #63
   83444:	94009733 	bl	a9110 <CMemorySystem::GetCoherentPage(unsigned int)>
   83448:	aa0003f6 	mov	x22, x0
   8344c:	d2800300 	mov	x0, #0x18                  	// #24
   83450:	94009384 	bl	a8260 <operator new(unsigned long)>
   83454:	d29fffe1 	mov	x1, #0xffff                	// #65535
   83458:	aa0003f4 	mov	x20, x0
   8345c:	8b0102c2 	add	x2, x22, x1
   83460:	aa1503e1 	mov	x1, x21
   83464:	94000f67 	bl	87200 <CXHCISharedMemAllocator::CXHCISharedMemAllocator(unsigned long, unsigned long)>
   83468:	f9005674 	str	x20, [x19, #168]
   8346c:	a94153f3 	ldp	x19, x20, [sp, #16]
   83470:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83474:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83478:	d65f03c0 	ret
   8347c:	d503201f 	nop

0000000000083480 <CXHCIDevice::ReScanDevices()>:
   83480:	f9407400 	ldr	x0, [x0, #232]
   83484:	b4000040 	cbz	x0, 8348c <CXHCIDevice::ReScanDevices()+0xc>
   83488:	14000c52 	b	865d0 <CXHCIRootHub::ReScanDevices()>
   8348c:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   83490:	913aa021 	add	x1, x1, #0xea8
   83494:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83498:	9100c020 	add	x0, x1, #0x30
   8349c:	910003fd 	mov	x29, sp
   834a0:	52802542 	mov	w2, #0x12a                 	// #298
   834a4:	94006a27 	bl	9dd40 <assertion_failed>
   834a8:	d503201f 	nop
   834ac:	d503201f 	nop

00000000000834b0 <CXHCIDevice::GetMMIOSpace()>:
   834b0:	f9405c00 	ldr	x0, [x0, #184]
   834b4:	b4000040 	cbz	x0, 834bc <CXHCIDevice::GetMMIOSpace()+0xc>
   834b8:	d65f03c0 	ret
   834bc:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   834c0:	913aa021 	add	x1, x1, #0xea8
   834c4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   834c8:	91010020 	add	x0, x1, #0x40
   834cc:	910003fd 	mov	x29, sp
   834d0:	52802982 	mov	w2, #0x14c                 	// #332
   834d4:	94006a1b 	bl	9dd40 <assertion_failed>
   834d8:	d503201f 	nop
   834dc:	d503201f 	nop

00000000000834e0 <CXHCIDevice::GetSlotManager()>:
   834e0:	f9406000 	ldr	x0, [x0, #192]
   834e4:	b4000040 	cbz	x0, 834ec <CXHCIDevice::GetSlotManager()+0xc>
   834e8:	d65f03c0 	ret
   834ec:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   834f0:	913aa021 	add	x1, x1, #0xea8
   834f4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   834f8:	91014020 	add	x0, x1, #0x50
   834fc:	910003fd 	mov	x29, sp
   83500:	52802a42 	mov	w2, #0x152                 	// #338
   83504:	94006a0f 	bl	9dd40 <assertion_failed>
   83508:	d503201f 	nop
   8350c:	d503201f 	nop

0000000000083510 <CXHCIDevice::GetCommandManager()>:
   83510:	f9406800 	ldr	x0, [x0, #208]
   83514:	b4000040 	cbz	x0, 8351c <CXHCIDevice::GetCommandManager()+0xc>
   83518:	d65f03c0 	ret
   8351c:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   83520:	913aa021 	add	x1, x1, #0xea8
   83524:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83528:	9101a020 	add	x0, x1, #0x68
   8352c:	910003fd 	mov	x29, sp
   83530:	52802b02 	mov	w2, #0x158                 	// #344
   83534:	94006a03 	bl	9dd40 <assertion_failed>
   83538:	d503201f 	nop
   8353c:	d503201f 	nop

0000000000083540 <CXHCIDevice::GetRootHub()>:
   83540:	f9407400 	ldr	x0, [x0, #232]
   83544:	b4000040 	cbz	x0, 8354c <CXHCIDevice::GetRootHub()+0xc>
   83548:	d65f03c0 	ret
   8354c:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   83550:	913aa021 	add	x1, x1, #0xea8
   83554:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83558:	9100c020 	add	x0, x1, #0x30
   8355c:	910003fd 	mov	x29, sp
   83560:	52802bc2 	mov	w2, #0x15e                 	// #350
   83564:	940069f7 	bl	9dd40 <assertion_failed>
   83568:	d503201f 	nop
   8356c:	d503201f 	nop

0000000000083570 <CXHCIDevice::AllocateSharedMem(unsigned long, unsigned long, unsigned long)>:
   83570:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83574:	910003fd 	mov	x29, sp
   83578:	a90153f3 	stp	x19, x20, [sp, #16]
   8357c:	f9405400 	ldr	x0, [x0, #168]
   83580:	b40002e0 	cbz	x0, 835dc <CXHCIDevice::AllocateSharedMem(unsigned long, unsigned long, unsigned long)+0x6c>
   83584:	aa0103f4 	mov	x20, x1
   83588:	94000f3e 	bl	87280 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)>
   8358c:	aa0003f3 	mov	x19, x0
   83590:	b4000100 	cbz	x0, 835b0 <CXHCIDevice::AllocateSharedMem(unsigned long, unsigned long, unsigned long)+0x40>
   83594:	aa1403e2 	mov	x2, x20
   83598:	52800001 	mov	w1, #0x0                   	// #0
   8359c:	94009093 	bl	a77e8 <memset>
   835a0:	aa1303e0 	mov	x0, x19
   835a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   835a8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   835ac:	d65f03c0 	ret
   835b0:	94007118 	bl	9fa10 <CLogger::Get()>
   835b4:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   835b8:	913aa021 	add	x1, x1, #0xea8
   835bc:	91028023 	add	x3, x1, #0xa0
   835c0:	52800022 	mov	w2, #0x1                   	// #1
   835c4:	91030021 	add	x1, x1, #0xc0
   835c8:	940072fe 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   835cc:	aa1303e0 	mov	x0, x19
   835d0:	a94153f3 	ldp	x19, x20, [sp, #16]
   835d4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   835d8:	d65f03c0 	ret
   835dc:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   835e0:	913aa021 	add	x1, x1, #0xea8
   835e4:	91020020 	add	x0, x1, #0x80
   835e8:	52802c82 	mov	w2, #0x164                 	// #356
   835ec:	940069d5 	bl	9dd40 <assertion_failed>

00000000000835f0 <CXHCIDevice::FreeSharedMem(void*)>:
   835f0:	f9405400 	ldr	x0, [x0, #168]
   835f4:	b4000040 	cbz	x0, 835fc <CXHCIDevice::FreeSharedMem(void*)+0xc>
   835f8:	14000fb2 	b	874c0 <CXHCISharedMemAllocator::Free(void*)>
   835fc:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   83600:	913aa021 	add	x1, x1, #0xea8
   83604:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83608:	91020020 	add	x0, x1, #0x80
   8360c:	910003fd 	mov	x29, sp
   83610:	52802e82 	mov	w2, #0x174                 	// #372
   83614:	940069cb 	bl	9dd40 <assertion_failed>
   83618:	d503201f 	nop
   8361c:	d503201f 	nop

0000000000083620 <CXHCIDevice::InterruptHandler()>:
   83620:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   83624:	910003fd 	mov	x29, sp
   83628:	a9025bf5 	stp	x21, x22, [sp, #32]
   8362c:	d0000195 	adrp	x21, b5000 <_etext+0x4158>
   83630:	913aa2b5 	add	x21, x21, #0xea8
   83634:	a90153f3 	stp	x19, x20, [sp, #16]
   83638:	aa0003f4 	mov	x20, x0
   8363c:	f9001bf7 	str	x23, [sp, #48]
   83640:	910302b7 	add	x23, x21, #0xc0
   83644:	940070f3 	bl	9fa10 <CLogger::Get()>
   83648:	910322a3 	add	x3, x21, #0xc8
   8364c:	52800082 	mov	w2, #0x4                   	// #4
   83650:	aa1703e1 	mov	x1, x23
   83654:	940072db 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   83658:	52800081 	mov	w1, #0x4                   	// #4
   8365c:	f9405e80 	ldr	x0, [x20, #184]
   83660:	940008ec 	bl	85a10 <CXHCIMMIOSpace::op_read32(unsigned int)>
   83664:	321d0002 	orr	w2, w0, #0x8
   83668:	2a0003f3 	mov	w19, w0
   8366c:	f9405e80 	ldr	x0, [x20, #184]
   83670:	52800081 	mov	w1, #0x4                   	// #4
   83674:	9400093f 	bl	85b70 <CXHCIMMIOSpace::op_write32(unsigned int, unsigned int)>
   83678:	f9405e96 	ldr	x22, [x20, #184]
   8367c:	52800002 	mov	w2, #0x0                   	// #0
   83680:	52800001 	mov	w1, #0x0                   	// #0
   83684:	aa1603e0 	mov	x0, x22
   83688:	94000912 	bl	85ad0 <CXHCIMMIOSpace::rt_read32(unsigned int, unsigned int)>
   8368c:	2a0003e3 	mov	w3, w0
   83690:	52800002 	mov	w2, #0x0                   	// #0
   83694:	aa1603e0 	mov	x0, x22
   83698:	32000063 	orr	w3, w3, #0x1
   8369c:	52800001 	mov	w1, #0x0                   	// #0
   836a0:	94000964 	bl	85c30 <CXHCIMMIOSpace::rt_write32(unsigned int, unsigned int, unsigned int)>
   836a4:	37000693 	tbnz	w19, #0, 83774 <CXHCIDevice::InterruptHandler()+0x154>
   836a8:	3943c280 	ldrb	w0, [x20, #240]
   836ac:	350003a0 	cbnz	w0, 83720 <CXHCIDevice::InterruptHandler()+0x100>
   836b0:	f9406680 	ldr	x0, [x20, #200]
   836b4:	52800213 	mov	w19, #0x10                  	// #16
   836b8:	d2800016 	mov	x22, #0x0                   	// #0
   836bc:	b50000e0 	cbnz	x0, 836d8 <CXHCIDevice::InterruptHandler()+0xb8>
   836c0:	52803262 	mov	w2, #0x193                 	// #403
   836c4:	aa1503e1 	mov	x1, x21
   836c8:	910382a0 	add	x0, x21, #0xe0
   836cc:	9400699d 	bl	9dd40 <assertion_failed>
   836d0:	f9406680 	ldr	x0, [x20, #200]
   836d4:	aa0303f6 	mov	x22, x3
   836d8:	94000816 	bl	85730 <CXHCIEventManager::HandleEvents()>
   836dc:	aa0003e3 	mov	x3, x0
   836e0:	b40002a0 	cbz	x0, 83734 <CXHCIDevice::InterruptHandler()+0x114>
   836e4:	71000673 	subs	w19, w19, #0x1
   836e8:	54ffff41 	b.ne	836d0 <CXHCIDevice::InterruptHandler()+0xb0>  // b.any
   836ec:	f9405e93 	ldr	x19, [x20, #184]
   836f0:	d00001c1 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   836f4:	aa1303e0 	mov	x0, x19
   836f8:	a94153f3 	ldp	x19, x20, [sp, #16]
   836fc:	52800302 	mov	w2, #0x18                  	// #24
   83700:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83704:	f9417424 	ldr	x4, [x1, #744]
   83708:	52800001 	mov	w1, #0x0                   	// #0
   8370c:	f9401bf7 	ldr	x23, [sp, #48]
   83710:	a8c47bfd 	ldp	x29, x30, [sp], #64
   83714:	aa040063 	orr	x3, x3, x4
   83718:	b27d0063 	orr	x3, x3, #0x8
   8371c:	14000969 	b	85cc0 <CXHCIMMIOSpace::rt_write64(unsigned int, unsigned int, unsigned long)>
   83720:	a94153f3 	ldp	x19, x20, [sp, #16]
   83724:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83728:	f9401bf7 	ldr	x23, [sp, #48]
   8372c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   83730:	d65f03c0 	ret
   83734:	f9405e93 	ldr	x19, [x20, #184]
   83738:	b5000316 	cbnz	x22, 83798 <CXHCIDevice::InterruptHandler()+0x178>
   8373c:	52800302 	mov	w2, #0x18                  	// #24
   83740:	52800001 	mov	w1, #0x0                   	// #0
   83744:	aa1303e0 	mov	x0, x19
   83748:	940008f6 	bl	85b20 <CXHCIMMIOSpace::rt_read64(unsigned int, unsigned int)>
   8374c:	927cec03 	and	x3, x0, #0xfffffffffffffff0
   83750:	52800302 	mov	w2, #0x18                  	// #24
   83754:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83758:	aa1303e0 	mov	x0, x19
   8375c:	b27d0063 	orr	x3, x3, #0x8
   83760:	52800001 	mov	w1, #0x0                   	// #0
   83764:	a94153f3 	ldp	x19, x20, [sp, #16]
   83768:	f9401bf7 	ldr	x23, [sp, #48]
   8376c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   83770:	14000954 	b	85cc0 <CXHCIMMIOSpace::rt_write64(unsigned int, unsigned int, unsigned long)>
   83774:	940070a7 	bl	9fa10 <CLogger::Get()>
   83778:	910342a3 	add	x3, x21, #0xd0
   8377c:	aa1703e1 	mov	x1, x23
   83780:	a94153f3 	ldp	x19, x20, [sp, #16]
   83784:	52800022 	mov	w2, #0x1                   	// #1
   83788:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8378c:	f9401bf7 	ldr	x23, [sp, #48]
   83790:	a8c47bfd 	ldp	x29, x30, [sp], #64
   83794:	1400728b 	b	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   83798:	aa1603e3 	mov	x3, x22
   8379c:	17ffffd5 	b	836f0 <CXHCIDevice::InterruptHandler()+0xd0>

00000000000837a0 <CXHCIDevice::InterruptStub(void*)>:
   837a0:	b4000040 	cbz	x0, 837a8 <CXHCIDevice::InterruptStub(void*)+0x8>
   837a4:	17ffff9f 	b	83620 <CXHCIDevice::InterruptHandler()>
   837a8:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   837ac:	913aa021 	add	x1, x1, #0xea8
   837b0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   837b4:	9103e020 	add	x0, x1, #0xf8
   837b8:	910003fd 	mov	x29, sp
   837bc:	52803582 	mov	w2, #0x1ac                 	// #428
   837c0:	94006960 	bl	9dd40 <assertion_failed>
   837c4:	d503201f 	nop
   837c8:	d503201f 	nop
   837cc:	d503201f 	nop

00000000000837d0 <CXHCIDevice::HWReset()>:
   837d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   837d4:	910003fd 	mov	x29, sp
   837d8:	5290d404 	mov	w4, #0x86a0                	// #34464
   837dc:	72a00024 	movk	w4, #0x1, lsl #16
   837e0:	52800003 	mov	w3, #0x0                   	// #0
   837e4:	52810002 	mov	w2, #0x800                 	// #2048
   837e8:	52800081 	mov	w1, #0x4                   	// #4
   837ec:	a90153f3 	stp	x19, x20, [sp, #16]
   837f0:	aa0003f3 	mov	x19, x0
   837f4:	f9405c00 	ldr	x0, [x0, #184]
   837f8:	94000946 	bl	85d10 <CXHCIMMIOSpace::op_wait32(unsigned int, unsigned int, unsigned int, unsigned int)>
   837fc:	72001c1f 	tst	w0, #0xff
   83800:	540000c1 	b.ne	83818 <CXHCIDevice::HWReset()+0x48>  // b.any
   83804:	52800014 	mov	w20, #0x0                   	// #0
   83808:	2a1403e0 	mov	w0, w20
   8380c:	a94153f3 	ldp	x19, x20, [sp, #16]
   83810:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83814:	d65f03c0 	ret
   83818:	f9405e74 	ldr	x20, [x19, #184]
   8381c:	52800001 	mov	w1, #0x0                   	// #0
   83820:	aa1403e0 	mov	x0, x20
   83824:	9400087b 	bl	85a10 <CXHCIMMIOSpace::op_read32(unsigned int)>
   83828:	321f0002 	orr	w2, w0, #0x2
   8382c:	52800001 	mov	w1, #0x0                   	// #0
   83830:	aa1403e0 	mov	x0, x20
   83834:	940008cf 	bl	85b70 <CXHCIMMIOSpace::op_write32(unsigned int, unsigned int)>
   83838:	5289c404 	mov	w4, #0x4e20                	// #20000
   8383c:	52800003 	mov	w3, #0x0                   	// #0
   83840:	f9405e60 	ldr	x0, [x19, #184]
   83844:	52800042 	mov	w2, #0x2                   	// #2
   83848:	52800001 	mov	w1, #0x0                   	// #0
   8384c:	94000931 	bl	85d10 <CXHCIMMIOSpace::op_wait32(unsigned int, unsigned int, unsigned int, unsigned int)>
   83850:	72001c14 	ands	w20, w0, #0xff
   83854:	54fffd80 	b.eq	83804 <CXHCIDevice::HWReset()+0x34>  // b.none
   83858:	52800081 	mov	w1, #0x4                   	// #4
   8385c:	f9405e60 	ldr	x0, [x19, #184]
   83860:	9400086c 	bl	85a10 <CXHCIMMIOSpace::op_read32(unsigned int)>
   83864:	365ffd20 	tbz	w0, #11, 83808 <CXHCIDevice::HWReset()+0x38>
   83868:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   8386c:	913aa021 	add	x1, x1, #0xea8
   83870:	91042020 	add	x0, x1, #0x108
   83874:	52803802 	mov	w2, #0x1c0                 	// #448
   83878:	94006932 	bl	9dd40 <assertion_failed>
   8387c:	d503201f 	nop

0000000000083880 <CXHCIDevice::~CXHCIDevice()>:
   83880:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83884:	910003fd 	mov	x29, sp
   83888:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   8388c:	9139c021 	add	x1, x1, #0xe70
   83890:	a90153f3 	stp	x19, x20, [sp, #16]
   83894:	aa0003f3 	mov	x19, x0
   83898:	52800020 	mov	w0, #0x1                   	// #1
   8389c:	f9000261 	str	x1, [x19]
   838a0:	3903c260 	strb	w0, [x19, #240]
   838a4:	f9405e74 	ldr	x20, [x19, #184]
   838a8:	b4000154 	cbz	x20, 838d0 <CXHCIDevice::~CXHCIDevice()+0x50>
   838ac:	52800001 	mov	w1, #0x0                   	// #0
   838b0:	aa1403e0 	mov	x0, x20
   838b4:	94000857 	bl	85a10 <CXHCIMMIOSpace::op_read32(unsigned int)>
   838b8:	121f7802 	and	w2, w0, #0xfffffffe
   838bc:	52800001 	mov	w1, #0x0                   	// #0
   838c0:	aa1403e0 	mov	x0, x20
   838c4:	940008ab 	bl	85b70 <CXHCIMMIOSpace::op_write32(unsigned int, unsigned int)>
   838c8:	aa1303e0 	mov	x0, x19
   838cc:	97ffffc1 	bl	837d0 <CXHCIDevice::HWReset()>
   838d0:	3940a260 	ldrb	w0, [x19, #40]
   838d4:	340000c0 	cbz	w0, 838ec <CXHCIDevice::~CXHCIDevice()+0x6c>
   838d8:	f9401260 	ldr	x0, [x19, #32]
   838dc:	b40006a0 	cbz	x0, 839b0 <CXHCIDevice::~CXHCIDevice()+0x130>
   838e0:	528015e1 	mov	w1, #0xaf                  	// #175
   838e4:	94009d37 	bl	aadc0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   838e8:	3900a27f 	strb	wzr, [x19, #40]
   838ec:	a90dfe7f 	stp	xzr, xzr, [x19, #216]
   838f0:	f9406a74 	ldr	x20, [x19, #208]
   838f4:	b40000d4 	cbz	x20, 8390c <CXHCIDevice::~CXHCIDevice()+0x8c>
   838f8:	aa1403e0 	mov	x0, x20
   838fc:	94003f25 	bl	93590 <CXHCICommandManager::~CXHCICommandManager()>
   83900:	aa1403e0 	mov	x0, x20
   83904:	d2800a01 	mov	x1, #0x50                  	// #80
   83908:	9400927e 	bl	a8300 <operator delete(void*, unsigned long)>
   8390c:	f9006a7f 	str	xzr, [x19, #208]
   83910:	f9406674 	ldr	x20, [x19, #200]
   83914:	b40000d4 	cbz	x20, 8392c <CXHCIDevice::~CXHCIDevice()+0xac>
   83918:	aa1403e0 	mov	x0, x20
   8391c:	9400074d 	bl	85650 <CXHCIEventManager::~CXHCIEventManager()>
   83920:	aa1403e0 	mov	x0, x20
   83924:	d2800801 	mov	x1, #0x40                  	// #64
   83928:	94009276 	bl	a8300 <operator delete(void*, unsigned long)>
   8392c:	f900667f 	str	xzr, [x19, #200]
   83930:	f9406274 	ldr	x20, [x19, #192]
   83934:	b40000d4 	cbz	x20, 8394c <CXHCIDevice::~CXHCIDevice()+0xcc>
   83938:	aa1403e0 	mov	x0, x20
   8393c:	94000f3d 	bl	87630 <CXHCISlotManager::~CXHCISlotManager()>
   83940:	aa1403e0 	mov	x0, x20
   83944:	d2802301 	mov	x1, #0x118                 	// #280
   83948:	9400926e 	bl	a8300 <operator delete(void*, unsigned long)>
   8394c:	f900627f 	str	xzr, [x19, #192]
   83950:	f9405e74 	ldr	x20, [x19, #184]
   83954:	b40000d4 	cbz	x20, 8396c <CXHCIDevice::~CXHCIDevice()+0xec>
   83958:	aa1403e0 	mov	x0, x20
   8395c:	94000811 	bl	859a0 <CXHCIMMIOSpace::~CXHCIMMIOSpace()>
   83960:	aa1403e0 	mov	x0, x20
   83964:	d2800801 	mov	x1, #0x40                  	// #64
   83968:	94009266 	bl	a8300 <operator delete(void*, unsigned long)>
   8396c:	3942c260 	ldrb	w0, [x19, #176]
   83970:	f9005e7f 	str	xzr, [x19, #184]
   83974:	34000100 	cbz	w0, 83994 <CXHCIDevice::~CXHCIDevice()+0x114>
   83978:	f9405674 	ldr	x20, [x19, #168]
   8397c:	b40000d4 	cbz	x20, 83994 <CXHCIDevice::~CXHCIDevice()+0x114>
   83980:	aa1403e0 	mov	x0, x20
   83984:	94000e37 	bl	87260 <CXHCISharedMemAllocator::~CXHCISharedMemAllocator()>
   83988:	aa1403e0 	mov	x0, x20
   8398c:	d2800301 	mov	x1, #0x18                  	// #24
   83990:	9400925c 	bl	a8300 <operator delete(void*, unsigned long)>
   83994:	9100c260 	add	x0, x19, #0x30
   83998:	f900567f 	str	xzr, [x19, #168]
   8399c:	940098dd 	bl	a9d10 <CBcmPCIeHostBridge::~CBcmPCIeHostBridge()>
   839a0:	aa1303e0 	mov	x0, x19
   839a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   839a8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   839ac:	17fff581 	b	80fb0 <CUSBHostController::~CUSBHostController()>
   839b0:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   839b4:	913aa021 	add	x1, x1, #0xea8
   839b8:	91054020 	add	x0, x1, #0x150
   839bc:	52800ae2 	mov	w2, #0x57                  	// #87
   839c0:	940068e0 	bl	9dd40 <assertion_failed>
   839c4:	d503201f 	nop
   839c8:	d503201f 	nop
   839cc:	d503201f 	nop

00000000000839d0 <CXHCIDevice::~CXHCIDevice()>:
   839d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   839d4:	910003fd 	mov	x29, sp
   839d8:	f9000bf3 	str	x19, [sp, #16]
   839dc:	aa0003f3 	mov	x19, x0
   839e0:	97ffffa8 	bl	83880 <CXHCIDevice::~CXHCIDevice()>
   839e4:	aa1303e0 	mov	x0, x19
   839e8:	d2801f01 	mov	x1, #0xf8                  	// #248
   839ec:	f9400bf3 	ldr	x19, [sp, #16]
   839f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   839f4:	14009243 	b	a8300 <operator delete(void*, unsigned long)>
   839f8:	d503201f 	nop
   839fc:	d503201f 	nop

0000000000083a00 <CXHCIDevice::DumpStatus()>:
   83a00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83a04:	910003fd 	mov	x29, sp
   83a08:	f9000bf3 	str	x19, [sp, #16]
   83a0c:	aa0003f3 	mov	x19, x0
   83a10:	f9407400 	ldr	x0, [x0, #232]
   83a14:	94000b2b 	bl	866c0 <CXHCIRootHub::DumpStatus()>
   83a18:	f9406660 	ldr	x0, [x19, #200]
   83a1c:	940007b9 	bl	85900 <CXHCIEventManager::DumpStatus()>
   83a20:	f9406a60 	ldr	x0, [x19, #208]
   83a24:	94003eef 	bl	935e0 <CXHCICommandManager::DumpStatus()>
   83a28:	f9406260 	ldr	x0, [x19, #192]
   83a2c:	94000f95 	bl	87880 <CXHCISlotManager::DumpStatus()>
   83a30:	f9405e60 	ldr	x0, [x19, #184]
   83a34:	940008e3 	bl	85dc0 <CXHCIMMIOSpace::DumpStatus()>
   83a38:	52800002 	mov	w2, #0x0                   	// #0
   83a3c:	52800001 	mov	w1, #0x0                   	// #0
   83a40:	9100c260 	add	x0, x19, #0x30
   83a44:	940098b7 	bl	a9d20 <CBcmPCIeHostBridge::DumpStatus(unsigned int, unsigned int)>
   83a48:	3942c260 	ldrb	w0, [x19, #176]
   83a4c:	34000260 	cbz	w0, 83a98 <CXHCIDevice::DumpStatus()+0x98>
   83a50:	f9405660 	ldr	x0, [x19, #168]
   83a54:	b4000280 	cbz	x0, 83aa4 <CXHCIDevice::DumpStatus()+0xa4>
   83a58:	94006fee 	bl	9fa10 <CLogger::Get()>
   83a5c:	aa0003e1 	mov	x1, x0
   83a60:	f9405660 	ldr	x0, [x19, #168]
   83a64:	aa0103f3 	mov	x19, x1
   83a68:	94000e02 	bl	87270 <CXHCISharedMemAllocator::GetFreeSpace() const>
   83a6c:	aa0003e4 	mov	x4, x0
   83a70:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   83a74:	913aa021 	add	x1, x1, #0xea8
   83a78:	aa1303e0 	mov	x0, x19
   83a7c:	f9400bf3 	ldr	x19, [sp, #16]
   83a80:	9105a023 	add	x3, x1, #0x168
   83a84:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83a88:	d34aa484 	ubfx	x4, x4, #10, #32
   83a8c:	91030021 	add	x1, x1, #0xc0
   83a90:	52800082 	mov	w2, #0x4                   	// #4
   83a94:	140071cb 	b	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   83a98:	f9400bf3 	ldr	x19, [sp, #16]
   83a9c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   83aa0:	d65f03c0 	ret
   83aa4:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   83aa8:	913aa021 	add	x1, x1, #0xea8
   83aac:	91020020 	add	x0, x1, #0x80
   83ab0:	52803aa2 	mov	w2, #0x1d5                 	// #469
   83ab4:	940068a3 	bl	9dd40 <assertion_failed>
   83ab8:	d503201f 	nop
   83abc:	d503201f 	nop

0000000000083ac0 <CXHCIDevice::Initialize(bool)>:
   83ac0:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   83ac4:	910003fd 	mov	x29, sp
   83ac8:	a9025bf5 	stp	x21, x22, [sp, #32]
   83acc:	aa0003f5 	mov	x21, x0
   83ad0:	12001c36 	and	w22, w1, #0xff
   83ad4:	52802000 	mov	w0, #0x100                 	// #256
   83ad8:	52800021 	mov	w1, #0x1                   	// #1
   83adc:	a90153f3 	stp	x19, x20, [sp, #16]
   83ae0:	9100c2b4 	add	x20, x21, #0x30
   83ae4:	97fff923 	bl	81f70 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>
   83ae8:	aa1403e0 	mov	x0, x20
   83aec:	94009aa9 	bl	aa590 <CBcmPCIeHostBridge::Initialize()>
   83af0:	72001c13 	ands	w19, w0, #0xff
   83af4:	540005a0 	b.eq	83ba8 <CXHCIDevice::Initialize(bool)+0xe8>  // b.none
   83af8:	52800001 	mov	w1, #0x0                   	// #0
   83afc:	910163e0 	add	x0, sp, #0x58
   83b00:	940068b4 	bl	9ddd0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   83b04:	52a00202 	mov	w2, #0x100000              	// #1048576
   83b08:	52800084 	mov	w4, #0x4                   	// #4
   83b0c:	52800203 	mov	w3, #0x10                  	// #16
   83b10:	910163e0 	add	x0, sp, #0x58
   83b14:	52800b01 	mov	w1, #0x58                  	// #88
   83b18:	72a00061 	movk	w1, #0x3, lsl #16
   83b1c:	b9006fe2 	str	w2, [sp, #108]
   83b20:	910183e2 	add	x2, sp, #0x60
   83b24:	9400690b 	bl	9df50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   83b28:	aa1403e0 	mov	x0, x20
   83b2c:	52806601 	mov	w1, #0x330                 	// #816
   83b30:	72a00181 	movk	w1, #0xc, lsl #16
   83b34:	52800003 	mov	w3, #0x0                   	// #0
   83b38:	52800002 	mov	w2, #0x0                   	// #0
   83b3c:	94009925 	bl	a9fd0 <CBcmPCIeHostBridge::EnableDevice(unsigned int, unsigned int, unsigned int)>
   83b40:	72001c13 	ands	w19, w0, #0xff
   83b44:	54000fc0 	b.eq	83d3c <CXHCIDevice::Initialize(bool)+0x27c>  // b.none
   83b48:	b9402ea0 	ldr	w0, [x21, #44]
   83b4c:	35000ea0 	cbnz	w0, 83d20 <CXHCIDevice::Initialize(bool)+0x260>
   83b50:	d2800040 	mov	x0, #0x2                   	// #2
   83b54:	f2c000c0 	movk	x0, #0x6, lsl #32
   83b58:	79400013 	ldrh	w19, [x0]
   83b5c:	12003e73 	and	w19, w19, #0xffff
   83b60:	7104027f 	cmp	w19, #0x100
   83b64:	540003a0 	b.eq	83bd8 <CXHCIDevice::Initialize(bool)+0x118>  // b.none
   83b68:	94006faa 	bl	9fa10 <CLogger::Get()>
   83b6c:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   83b70:	913aa021 	add	x1, x1, #0xea8
   83b74:	2a1303e4 	mov	w4, w19
   83b78:	91078023 	add	x3, x1, #0x1e0
   83b7c:	52800022 	mov	w2, #0x1                   	// #1
   83b80:	91030021 	add	x1, x1, #0xc0
   83b84:	52800013 	mov	w19, #0x0                   	// #0
   83b88:	9400718e 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   83b8c:	910163e0 	add	x0, sp, #0x58
   83b90:	94006894 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   83b94:	2a1303e0 	mov	w0, w19
   83b98:	a94153f3 	ldp	x19, x20, [sp, #16]
   83b9c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83ba0:	a8c77bfd 	ldp	x29, x30, [sp], #112
   83ba4:	d65f03c0 	ret
   83ba8:	94006f9a 	bl	9fa10 <CLogger::Get()>
   83bac:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   83bb0:	913aa021 	add	x1, x1, #0xea8
   83bb4:	91062023 	add	x3, x1, #0x188
   83bb8:	52800022 	mov	w2, #0x1                   	// #1
   83bbc:	91030021 	add	x1, x1, #0xc0
   83bc0:	94007180 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   83bc4:	2a1303e0 	mov	w0, w19
   83bc8:	a94153f3 	ldp	x19, x20, [sp, #16]
   83bcc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83bd0:	a8c77bfd 	ldp	x29, x30, [sp], #112
   83bd4:	d65f03c0 	ret
   83bd8:	d2800800 	mov	x0, #0x40                  	// #64
   83bdc:	a90363f7 	stp	x23, x24, [sp, #48]
   83be0:	f90023f9 	str	x25, [sp, #64]
   83be4:	9400919f 	bl	a8260 <operator new(unsigned long)>
   83be8:	aa0003f3 	mov	x19, x0
   83bec:	d2c000c1 	mov	x1, #0x600000000           	// #25769803776
   83bf0:	94000748 	bl	85910 <CXHCIMMIOSpace::CXHCIMMIOSpace(unsigned long)>
   83bf4:	aa1303e0 	mov	x0, x19
   83bf8:	52800081 	mov	w1, #0x4                   	// #4
   83bfc:	f9005eb3 	str	x19, [x21, #184]
   83c00:	9400076c 	bl	859b0 <CXHCIMMIOSpace::cap_read32(unsigned int)>
   83c04:	721b081f 	tst	w0, #0xe0
   83c08:	2a0003f3 	mov	w19, w0
   83c0c:	54001680 	b.eq	83edc <CXHCIDevice::Initialize(bool)+0x41c>  // b.none
   83c10:	52800081 	mov	w1, #0x4                   	// #4
   83c14:	f9405ea0 	ldr	x0, [x21, #184]
   83c18:	94000766 	bl	859b0 <CXHCIMMIOSpace::cap_read32(unsigned int)>
   83c1c:	53187c17 	lsr	w23, w0, #24
   83c20:	710016ff 	cmp	w23, #0x5
   83c24:	54001528 	b.hi	83ec8 <CXHCIDevice::Initialize(bool)+0x408>  // b.pmore
   83c28:	52800101 	mov	w1, #0x8                   	// #8
   83c2c:	f9405ea0 	ldr	x0, [x21, #184]
   83c30:	94000760 	bl	859b0 <CXHCIMMIOSpace::cap_read32(unsigned int)>
   83c34:	531b7c18 	lsr	w24, w0, #27
   83c38:	52800201 	mov	w1, #0x10                  	// #16
   83c3c:	f9405ea0 	ldr	x0, [x21, #184]
   83c40:	9400075c 	bl	859b0 <CXHCIMMIOSpace::cap_read32(unsigned int)>
   83c44:	37101560 	tbnz	w0, #2, 83ef0 <CXHCIDevice::Initialize(bool)+0x430>
   83c48:	d0000194 	adrp	x20, b5000 <_etext+0x4158>
   83c4c:	913aa294 	add	x20, x20, #0xea8
   83c50:	94006f70 	bl	9fa10 <CLogger::Get()>
   83c54:	91030299 	add	x25, x20, #0xc0
   83c58:	12001e64 	and	w4, w19, #0xff
   83c5c:	aa1903e1 	mov	x1, x25
   83c60:	910a8283 	add	x3, x20, #0x2a0
   83c64:	2a1803e6 	mov	w6, w24
   83c68:	2a1703e5 	mov	w5, w23
   83c6c:	52800082 	mov	w2, #0x4                   	// #4
   83c70:	94007154 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   83c74:	aa1503e0 	mov	x0, x21
   83c78:	97fffed6 	bl	837d0 <CXHCIDevice::HWReset()>
   83c7c:	72001c13 	ands	w19, w0, #0xff
   83c80:	540006e0 	b.eq	83d5c <CXHCIDevice::Initialize(bool)+0x29c>  // b.none
   83c84:	52800101 	mov	w1, #0x8                   	// #8
   83c88:	f9405ea0 	ldr	x0, [x21, #184]
   83c8c:	94000761 	bl	85a10 <CXHCIMMIOSpace::op_read32(unsigned int)>
   83c90:	360013a0 	tbz	w0, #0, 83f04 <CXHCIDevice::Initialize(bool)+0x444>
   83c94:	d2802300 	mov	x0, #0x118                 	// #280
   83c98:	94009172 	bl	a8260 <operator new(unsigned long)>
   83c9c:	aa0003f3 	mov	x19, x0
   83ca0:	aa1503e1 	mov	x1, x21
   83ca4:	94000e37 	bl	87580 <CXHCISlotManager::CXHCISlotManager(CXHCIDevice*)>
   83ca8:	d2800800 	mov	x0, #0x40                  	// #64
   83cac:	f90062b3 	str	x19, [x21, #192]
   83cb0:	9400916c 	bl	a8260 <operator new(unsigned long)>
   83cb4:	aa0003f3 	mov	x19, x0
   83cb8:	aa1503e1 	mov	x1, x21
   83cbc:	940005e9 	bl	85460 <CXHCIEventManager::CXHCIEventManager(CXHCIDevice*)>
   83cc0:	d2800a00 	mov	x0, #0x50                  	// #80
   83cc4:	f90066b3 	str	x19, [x21, #200]
   83cc8:	94009166 	bl	a8260 <operator new(unsigned long)>
   83ccc:	aa0003f3 	mov	x19, x0
   83cd0:	aa1503e1 	mov	x1, x21
   83cd4:	94003dfb 	bl	934c0 <CXHCICommandManager::CXHCICommandManager(CXHCIDevice*)>
   83cd8:	f9006ab3 	str	x19, [x21, #208]
   83cdc:	f94062a0 	ldr	x0, [x21, #192]
   83ce0:	94000e60 	bl	87660 <CXHCISlotManager::IsValid()>
   83ce4:	72001c1f 	tst	w0, #0xff
   83ce8:	540000a0 	b.eq	83cfc <CXHCIDevice::Initialize(bool)+0x23c>  // b.none
   83cec:	f94066a0 	ldr	x0, [x21, #200]
   83cf0:	94000680 	bl	856f0 <CXHCIEventManager::IsValid()>
   83cf4:	72001c1f 	tst	w0, #0xff
   83cf8:	54000421 	b.ne	83d7c <CXHCIDevice::Initialize(bool)+0x2bc>  // b.any
   83cfc:	94006f45 	bl	9fa10 <CLogger::Get()>
   83d00:	910c8283 	add	x3, x20, #0x320
   83d04:	91030281 	add	x1, x20, #0xc0
   83d08:	52800022 	mov	w2, #0x1                   	// #1
   83d0c:	9400712d 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   83d10:	52800013 	mov	w19, #0x0                   	// #0
   83d14:	a94363f7 	ldp	x23, x24, [sp, #48]
   83d18:	f94023f9 	ldr	x25, [sp, #64]
   83d1c:	17ffff9c 	b	83b8c <CXHCIDevice::Initialize(bool)+0xcc>
   83d20:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   83d24:	913aa021 	add	x1, x1, #0xea8
   83d28:	a90363f7 	stp	x23, x24, [sp, #48]
   83d2c:	91074020 	add	x0, x1, #0x1d0
   83d30:	52801442 	mov	w2, #0xa2                  	// #162
   83d34:	f90023f9 	str	x25, [sp, #64]
   83d38:	94006802 	bl	9dd40 <assertion_failed>
   83d3c:	94006f35 	bl	9fa10 <CLogger::Get()>
   83d40:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   83d44:	913aa021 	add	x1, x1, #0xea8
   83d48:	9106c023 	add	x3, x1, #0x1b0
   83d4c:	52800022 	mov	w2, #0x1                   	// #1
   83d50:	91030021 	add	x1, x1, #0xc0
   83d54:	9400711b 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   83d58:	17ffff8d 	b	83b8c <CXHCIDevice::Initialize(bool)+0xcc>
   83d5c:	94006f2d 	bl	9fa10 <CLogger::Get()>
   83d60:	aa1903e1 	mov	x1, x25
   83d64:	910b2283 	add	x3, x20, #0x2c8
   83d68:	52800022 	mov	w2, #0x1                   	// #1
   83d6c:	94007115 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   83d70:	a94363f7 	ldp	x23, x24, [sp, #48]
   83d74:	f94023f9 	ldr	x25, [sp, #64]
   83d78:	17ffff85 	b	83b8c <CXHCIDevice::Initialize(bool)+0xcc>
   83d7c:	f9406aa0 	ldr	x0, [x21, #208]
   83d80:	94003e14 	bl	935d0 <CXHCICommandManager::IsValid()>
   83d84:	72001c13 	ands	w19, w0, #0xff
   83d88:	54fffba0 	b.eq	83cfc <CXHCIDevice::Initialize(bool)+0x23c>  // b.none
   83d8c:	34000cd8 	cbz	w24, 83f24 <CXHCIDevice::Initialize(bool)+0x464>
   83d90:	d2820003 	mov	x3, #0x1000                	// #4096
   83d94:	d3741301 	ubfiz	x1, x24, #12, #5
   83d98:	aa0303e2 	mov	x2, x3
   83d9c:	aa1503e0 	mov	x0, x21
   83da0:	97fffdf4 	bl	83570 <CXHCIDevice::AllocateSharedMem(unsigned long, unsigned long, unsigned long)>
   83da4:	aa0003e4 	mov	x4, x0
   83da8:	d37d1301 	ubfiz	x1, x24, #3, #5
   83dac:	d2820003 	mov	x3, #0x1000                	// #4096
   83db0:	d2800802 	mov	x2, #0x40                  	// #64
   83db4:	aa1503e0 	mov	x0, x21
   83db8:	f9006ea4 	str	x4, [x21, #216]
   83dbc:	97fffded 	bl	83570 <CXHCIDevice::AllocateSharedMem(unsigned long, unsigned long, unsigned long)>
   83dc0:	f9406ea4 	ldr	x4, [x21, #216]
   83dc4:	aa0003e1 	mov	x1, x0
   83dc8:	f90072a0 	str	x0, [x21, #224]
   83dcc:	f100009f 	cmp	x4, #0x0
   83dd0:	fa401804 	ccmp	x0, #0x0, #0x4, ne	// ne = any
   83dd4:	54000a00 	b.eq	83f14 <CXHCIDevice::Initialize(bool)+0x454>  // b.none
   83dd8:	d00001c0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   83ddc:	910ba000 	add	x0, x0, #0x2e8
   83de0:	d2800003 	mov	x3, #0x0                   	// #0
   83de4:	d503201f 	nop
   83de8:	f9400002 	ldr	x2, [x0]
   83dec:	aa020082 	orr	x2, x4, x2
   83df0:	8b033042 	add	x2, x2, x3, lsl #12
   83df4:	f8237822 	str	x2, [x1, x3, lsl #3]
   83df8:	91000463 	add	x3, x3, #0x1
   83dfc:	6b03031f 	cmp	w24, w3
   83e00:	54ffff48 	b.hi	83de8 <CXHCIDevice::Initialize(bool)+0x328>  // b.pmore
   83e04:	f94062a0 	ldr	x0, [x21, #192]
   83e08:	94000e7a 	bl	877f0 <CXHCISlotManager::AssignScratchpadBufferArray(unsigned long*)>
   83e0c:	d2800700 	mov	x0, #0x38                  	// #56
   83e10:	94009114 	bl	a8260 <operator new(unsigned long)>
   83e14:	2a1703e1 	mov	w1, w23
   83e18:	aa1503e2 	mov	x2, x21
   83e1c:	aa0003f7 	mov	x23, x0
   83e20:	9400097c 	bl	86410 <CXHCIRootHub::CXHCIRootHub(unsigned int, CXHCIDevice*)>
   83e24:	f90076b7 	str	x23, [x21, #232]
   83e28:	f94012a0 	ldr	x0, [x21, #32]
   83e2c:	b40008a0 	cbz	x0, 83f40 <CXHCIDevice::Initialize(bool)+0x480>
   83e30:	aa1503e3 	mov	x3, x21
   83e34:	528015e1 	mov	w1, #0xaf                  	// #175
   83e38:	90000002 	adrp	x2, 83000 <CUSBStandardHub::HandlePortStatusChange()+0x150>
   83e3c:	911e8042 	add	x2, x2, #0x7a0
   83e40:	94009bb8 	bl	aad20 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   83e44:	f9405eb7 	ldr	x23, [x21, #184]
   83e48:	52800020 	mov	w0, #0x1                   	// #1
   83e4c:	52800001 	mov	w1, #0x0                   	// #0
   83e50:	3900a2a0 	strb	w0, [x21, #40]
   83e54:	aa1703e0 	mov	x0, x23
   83e58:	940006ee 	bl	85a10 <CXHCIMMIOSpace::op_read32(unsigned int)>
   83e5c:	321e0002 	orr	w2, w0, #0x4
   83e60:	52800001 	mov	w1, #0x0                   	// #0
   83e64:	aa1703e0 	mov	x0, x23
   83e68:	94000742 	bl	85b70 <CXHCIMMIOSpace::op_write32(unsigned int, unsigned int)>
   83e6c:	f9405eb7 	ldr	x23, [x21, #184]
   83e70:	52800001 	mov	w1, #0x0                   	// #0
   83e74:	aa1703e0 	mov	x0, x23
   83e78:	940006e6 	bl	85a10 <CXHCIMMIOSpace::op_read32(unsigned int)>
   83e7c:	32000002 	orr	w2, w0, #0x1
   83e80:	52800001 	mov	w1, #0x0                   	// #0
   83e84:	aa1703e0 	mov	x0, x23
   83e88:	9400073a 	bl	85b70 <CXHCIMMIOSpace::op_write32(unsigned int, unsigned int)>
   83e8c:	aa1503e0 	mov	x0, x21
   83e90:	97fff4f8 	bl	81270 <CUSBHostController::IsPlugAndPlay() const>
   83e94:	12001c00 	and	w0, w0, #0xff
   83e98:	52000000 	eor	w0, w0, #0x1
   83e9c:	2a0002d6 	orr	w22, w22, w0
   83ea0:	340000b6 	cbz	w22, 83eb4 <CXHCIDevice::Initialize(bool)+0x3f4>
   83ea4:	f94076a0 	ldr	x0, [x21, #232]
   83ea8:	94000992 	bl	864f0 <CXHCIRootHub::Initialize()>
   83eac:	72001c1f 	tst	w0, #0xff
   83eb0:	54000420 	b.eq	83f34 <CXHCIDevice::Initialize(bool)+0x474>  // b.none
   83eb4:	aa1503e0 	mov	x0, x21
   83eb8:	97fffed2 	bl	83a00 <CXHCIDevice::DumpStatus()>
   83ebc:	a94363f7 	ldp	x23, x24, [sp, #48]
   83ec0:	f94023f9 	ldr	x25, [sp, #64]
   83ec4:	17ffff32 	b	83b8c <CXHCIDevice::Initialize(bool)+0xcc>
   83ec8:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   83ecc:	913aa021 	add	x1, x1, #0xea8
   83ed0:	9108a020 	add	x0, x1, #0x228
   83ed4:	52801862 	mov	w2, #0xc3                  	// #195
   83ed8:	9400679a 	bl	9dd40 <assertion_failed>
   83edc:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   83ee0:	913aa021 	add	x1, x1, #0xea8
   83ee4:	91080020 	add	x0, x1, #0x200
   83ee8:	528017a2 	mov	w2, #0xbd                  	// #189
   83eec:	94006795 	bl	9dd40 <assertion_failed>
   83ef0:	d0000181 	adrp	x1, b5000 <_etext+0x4158>
   83ef4:	913aa021 	add	x1, x1, #0xea8
   83ef8:	91094020 	add	x0, x1, #0x250
   83efc:	52801982 	mov	w2, #0xcc                  	// #204
   83f00:	94006790 	bl	9dd40 <assertion_failed>
   83f04:	52801bc2 	mov	w2, #0xde                  	// #222
   83f08:	aa1403e1 	mov	x1, x20
   83f0c:	910b6280 	add	x0, x20, #0x2d8
   83f10:	9400678c 	bl	9dd40 <assertion_failed>
   83f14:	52800013 	mov	w19, #0x0                   	// #0
   83f18:	a94363f7 	ldp	x23, x24, [sp, #48]
   83f1c:	f94023f9 	ldr	x25, [sp, #64]
   83f20:	17ffff1b 	b	83b8c <CXHCIDevice::Initialize(bool)+0xcc>
   83f24:	52801ea2 	mov	w2, #0xf5                  	// #245
   83f28:	aa1403e1 	mov	x1, x20
   83f2c:	910d4280 	add	x0, x20, #0x350
   83f30:	94006784 	bl	9dd40 <assertion_failed>
   83f34:	94006eb7 	bl	9fa10 <CLogger::Get()>
   83f38:	910da283 	add	x3, x20, #0x368
   83f3c:	17ffff72 	b	83d04 <CXHCIDevice::Initialize(bool)+0x244>
   83f40:	52802142 	mov	w2, #0x10a                 	// #266
   83f44:	aa1403e1 	mov	x1, x20
   83f48:	91054280 	add	x0, x20, #0x150
   83f4c:	9400677d 	bl	9dd40 <assertion_failed>

0000000000083f50 <CXHCIEndpoint::CompletionRoutine(CUSBRequest*, void*, void*)>:
   83f50:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   83f54:	910003fd 	mov	x29, sp
   83f58:	b4000102 	cbz	x2, 83f78 <CXHCIEndpoint::CompletionRoutine(CUSBRequest*, void*, void*)+0x28>
   83f5c:	39410040 	ldrb	w0, [x2, #64]
   83f60:	72001c1f 	tst	w0, #0xff
   83f64:	54000161 	b.ne	83f90 <CXHCIEndpoint::CompletionRoutine(CUSBRequest*, void*, void*)+0x40>  // b.any
   83f68:	52800020 	mov	w0, #0x1                   	// #1
   83f6c:	39010040 	strb	w0, [x2, #64]
   83f70:	a8c17bfd 	ldp	x29, x30, [sp], #16
   83f74:	d65f03c0 	ret
   83f78:	d0000161 	adrp	x1, b1000 <_etext+0x158>
   83f7c:	d0000160 	adrp	x0, b1000 <_etext+0x158>
   83f80:	9119a021 	add	x1, x1, #0x668
   83f84:	910b6000 	add	x0, x0, #0x2d8
   83f88:	52803e02 	mov	w2, #0x1f0                 	// #496
   83f8c:	9400676d 	bl	9dd40 <assertion_failed>
   83f90:	d0000161 	adrp	x1, b1000 <_etext+0x158>
   83f94:	d0000160 	adrp	x0, b1000 <_etext+0x158>
   83f98:	9119a021 	add	x1, x1, #0x668
   83f9c:	911a0000 	add	x0, x0, #0x680
   83fa0:	52803e42 	mov	w2, #0x1f2                 	// #498
   83fa4:	94006767 	bl	9dd40 <assertion_failed>
   83fa8:	d503201f 	nop
   83fac:	d503201f 	nop

0000000000083fb0 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, CXHCIDevice*)>:
   83fb0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83fb4:	910003fd 	mov	x29, sp
   83fb8:	a90153f3 	stp	x19, x20, [sp, #16]
   83fbc:	aa0003f3 	mov	x19, x0
   83fc0:	aa0203e0 	mov	x0, x2
   83fc4:	aa0203f4 	mov	x20, x2
   83fc8:	a9000a61 	stp	x1, x2, [x19]
   83fcc:	97fffd39 	bl	834b0 <CXHCIDevice::GetMMIOSpace()>
   83fd0:	aa0003e4 	mov	x4, x0
   83fd4:	52800021 	mov	w1, #0x1                   	// #1
   83fd8:	f900127f 	str	xzr, [x19, #32]
   83fdc:	52800083 	mov	w3, #0x4                   	// #4
   83fe0:	52800022 	mov	w2, #0x1                   	// #1
   83fe4:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   83fe8:	d2800500 	mov	x0, #0x28                  	// #40
   83fec:	f9000a64 	str	x4, [x19, #16]
   83ff0:	39006261 	strb	w1, [x19, #24]
   83ff4:	3900b661 	strb	w1, [x19, #45]
   83ff8:	3900ba63 	strb	w3, [x19, #46]
   83ffc:	39010261 	strb	w1, [x19, #64]
   84000:	f900267f 	str	xzr, [x19, #72]
   84004:	b9005262 	str	w2, [x19, #80]
   84008:	94009096 	bl	a8260 <operator new(unsigned long)>
   8400c:	aa1403e3 	mov	x3, x20
   84010:	52800802 	mov	w2, #0x40                  	// #64
   84014:	aa0003f4 	mov	x20, x0
   84018:	52800001 	mov	w1, #0x0                   	// #0
   8401c:	94000795 	bl	85e70 <CXHCIRing::CXHCIRing(TXHCIRingType, unsigned int, CXHCIDevice*)>
   84020:	aa1403e0 	mov	x0, x20
   84024:	f9001274 	str	x20, [x19, #32]
   84028:	940007ea 	bl	85fd0 <CXHCIRing::IsValid() const>
   8402c:	72001c1f 	tst	w0, #0xff
   84030:	540000a1 	b.ne	84044 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, CXHCIDevice*)+0x94>  // b.any
   84034:	3900627f 	strb	wzr, [x19, #24]
   84038:	a94153f3 	ldp	x19, x20, [sp, #16]
   8403c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84040:	d65f03c0 	ret
   84044:	aa1303e2 	mov	x2, x19
   84048:	3940b661 	ldrb	w1, [x19, #45]
   8404c:	a94153f3 	ldp	x19, x20, [sp, #16]
   84050:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84054:	f9400040 	ldr	x0, [x2]
   84058:	14000eb2 	b	87b20 <CXHCIUSBDevice::RegisterEndpoint(unsigned char, CXHCIEndpoint*)>
   8405c:	d503201f 	nop

0000000000084060 <CXHCIEndpoint::~CXHCIEndpoint()>:
   84060:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84064:	910003fd 	mov	x29, sp
   84068:	39410001 	ldrb	w1, [x0, #64]
   8406c:	f9000bf3 	str	x19, [sp, #16]
   84070:	72001c3f 	tst	w1, #0xff
   84074:	54000200 	b.eq	840b4 <CXHCIEndpoint::~CXHCIEndpoint()+0x54>  // b.none
   84078:	f9402401 	ldr	x1, [x0, #72]
   8407c:	b5000281 	cbnz	x1, 840cc <CXHCIEndpoint::~CXHCIEndpoint()+0x6c>
   84080:	3900b41f 	strb	wzr, [x0, #45]
   84084:	f9401013 	ldr	x19, [x0, #32]
   84088:	b4000113 	cbz	x19, 840a8 <CXHCIEndpoint::~CXHCIEndpoint()+0x48>
   8408c:	aa1303e0 	mov	x0, x19
   84090:	940007c8 	bl	85fb0 <CXHCIRing::~CXHCIRing()>
   84094:	aa1303e0 	mov	x0, x19
   84098:	d2800501 	mov	x1, #0x28                  	// #40
   8409c:	f9400bf3 	ldr	x19, [sp, #16]
   840a0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   840a4:	14009097 	b	a8300 <operator delete(void*, unsigned long)>
   840a8:	f9400bf3 	ldr	x19, [sp, #16]
   840ac:	a8c27bfd 	ldp	x29, x30, [sp], #32
   840b0:	d65f03c0 	ret
   840b4:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   840b8:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   840bc:	9119a021 	add	x1, x1, #0x668
   840c0:	911a2000 	add	x0, x0, #0x688
   840c4:	52801382 	mov	w2, #0x9c                  	// #156
   840c8:	9400671e 	bl	9dd40 <assertion_failed>
   840cc:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   840d0:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   840d4:	9119a021 	add	x1, x1, #0x668
   840d8:	911a8000 	add	x0, x0, #0x6a0
   840dc:	528013a2 	mov	w2, #0x9d                  	// #157
   840e0:	94006718 	bl	9dd40 <assertion_failed>
   840e4:	d503201f 	nop
   840e8:	d503201f 	nop
   840ec:	d503201f 	nop

00000000000840f0 <CXHCIEndpoint::IsValid()>:
   840f0:	39406000 	ldrb	w0, [x0, #24]
   840f4:	d65f03c0 	ret
   840f8:	d503201f 	nop
   840fc:	d503201f 	nop

0000000000084100 <CXHCIEndpoint::GetTransferRing()>:
   84100:	f9401000 	ldr	x0, [x0, #32]
   84104:	b4000040 	cbz	x0, 8410c <CXHCIEndpoint::GetTransferRing()+0xc>
   84108:	d65f03c0 	ret
   8410c:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   84110:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   84114:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   84118:	9119a021 	add	x1, x1, #0x668
   8411c:	910003fd 	mov	x29, sp
   84120:	911b0000 	add	x0, x0, #0x6c0
   84124:	52801642 	mov	w2, #0xb2                  	// #178
   84128:	94006706 	bl	9dd40 <assertion_failed>
   8412c:	d503201f 	nop

0000000000084130 <CXHCIEndpoint::TransferEvent(unsigned char, unsigned int)>:
   84130:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   84134:	910003fd 	mov	x29, sp
   84138:	a90153f3 	stp	x19, x20, [sp, #16]
   8413c:	2a0203f4 	mov	w20, w2
   84140:	aa0003f3 	mov	x19, x0
   84144:	a9025bf5 	stp	x21, x22, [sp, #32]
   84148:	12001c35 	and	w21, w1, #0xff
   8414c:	d0000196 	adrp	x22, b6000 <From+0x98>
   84150:	9108a2d6 	add	x22, x22, #0x228
   84154:	f9001bf7 	str	x23, [sp, #48]
   84158:	94006e2e 	bl	9fa10 <CLogger::Get()>
   8415c:	b0000163 	adrp	x3, b1000 <_etext+0x158>
   84160:	3940b664 	ldrb	w4, [x19, #45]
   84164:	2a1403e6 	mov	w6, w20
   84168:	2a1503e5 	mov	w5, w21
   8416c:	aa1603e1 	mov	x1, x22
   84170:	911b6063 	add	x3, x3, #0x6d8
   84174:	52800082 	mov	w2, #0x4                   	// #4
   84178:	94007012 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8417c:	d5033fbf 	dmb	sy
   84180:	f9401a77 	ldr	x23, [x19, #48]
   84184:	b40002f7 	cbz	x23, 841e0 <CXHCIEndpoint::TransferEvent(unsigned char, unsigned int)+0xb0>
   84188:	710006bf 	cmp	w21, #0x1
   8418c:	7a4d1aa4 	ccmp	w21, #0xd, #0x4, ne	// ne = any
   84190:	54000320 	b.eq	841f4 <CXHCIEndpoint::TransferEvent(unsigned char, unsigned int)+0xc4>  // b.none
   84194:	51003aa0 	sub	w0, w21, #0xe
   84198:	12001c00 	and	w0, w0, #0xff
   8419c:	7100041f 	cmp	w0, #0x1
   841a0:	54000209 	b.ls	841e0 <CXHCIEndpoint::TransferEvent(unsigned char, unsigned int)+0xb0>  // b.plast
   841a4:	aa1703e0 	mov	x0, x23
   841a8:	97fff662 	bl	81b30 <CUSBRequest::GetEndpoint() const>
   841ac:	9400186d 	bl	8a360 <CUSBEndpoint::GetType() const>
   841b0:	71000c1f 	cmp	w0, #0x3
   841b4:	54000621 	b.ne	84278 <CXHCIEndpoint::TransferEvent(unsigned char, unsigned int)+0x148>  // b.any
   841b8:	b9405260 	ldr	w0, [x19, #80]
   841bc:	35000460 	cbnz	w0, 84248 <CXHCIEndpoint::TransferEvent(unsigned char, unsigned int)+0x118>
   841c0:	f9401e60 	ldr	x0, [x19, #56]
   841c4:	a9037e60 	stp	x0, xzr, [x19, #48]
   841c8:	aa1703e0 	mov	x0, x23
   841cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   841d0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   841d4:	f9401bf7 	ldr	x23, [sp, #48]
   841d8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   841dc:	17fff701 	b	81de0 <CUSBRequest::CallCompletionRoutine()>
   841e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   841e4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   841e8:	f9401bf7 	ldr	x23, [sp, #48]
   841ec:	a8c47bfd 	ldp	x29, x30, [sp], #64
   841f0:	d65f03c0 	ret
   841f4:	aa1703e0 	mov	x0, x23
   841f8:	97fff69a 	bl	81c60 <CUSBRequest::GetBuffer()>
   841fc:	aa0003f6 	mov	x22, x0
   84200:	aa1703e0 	mov	x0, x23
   84204:	97fff6a7 	bl	81ca0 <CUSBRequest::GetBufLen() const>
   84208:	2a0003f5 	mov	w21, w0
   8420c:	b40000b6 	cbz	x22, 84220 <CXHCIEndpoint::TransferEvent(unsigned char, unsigned int)+0xf0>
   84210:	34000520 	cbz	w0, 842b4 <CXHCIEndpoint::TransferEvent(unsigned char, unsigned int)+0x184>
   84214:	aa1603e0 	mov	x0, x22
   84218:	2a1503e1 	mov	w1, w21
   8421c:	940094dd 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   84220:	6b15029f 	cmp	w20, w21
   84224:	540003c8 	b.hi	8429c <CXHCIEndpoint::TransferEvent(unsigned char, unsigned int)+0x16c>  // b.pmore
   84228:	4b1402a1 	sub	w1, w21, w20
   8422c:	aa1703e0 	mov	x0, x23
   84230:	97fff650 	bl	81b70 <CUSBRequest::SetResultLen(unsigned int)>
   84234:	aa1703e0 	mov	x0, x23
   84238:	52800021 	mov	w1, #0x1                   	// #1
   8423c:	97fff649 	bl	81b60 <CUSBRequest::SetStatus(int)>
   84240:	b9405260 	ldr	w0, [x19, #80]
   84244:	34fffbe0 	cbz	w0, 841c0 <CXHCIEndpoint::TransferEvent(unsigned char, unsigned int)+0x90>
   84248:	940093be 	bl	a9140 <EnterCritical>
   8424c:	f9401e61 	ldr	x1, [x19, #56]
   84250:	b9405260 	ldr	w0, [x19, #80]
   84254:	a9037e61 	stp	x1, xzr, [x19, #48]
   84258:	34fffb80 	cbz	w0, 841c8 <CXHCIEndpoint::TransferEvent(unsigned char, unsigned int)+0x98>
   8425c:	940093e9 	bl	a9200 <LeaveCritical>
   84260:	aa1703e0 	mov	x0, x23
   84264:	a94153f3 	ldp	x19, x20, [sp, #16]
   84268:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8426c:	f9401bf7 	ldr	x23, [sp, #48]
   84270:	a8c47bfd 	ldp	x29, x30, [sp], #64
   84274:	17fff6db 	b	81de0 <CUSBRequest::CallCompletionRoutine()>
   84278:	94006de6 	bl	9fa10 <CLogger::Get()>
   8427c:	b0000163 	adrp	x3, b1000 <_etext+0x158>
   84280:	3940b665 	ldrb	w5, [x19, #45]
   84284:	2a1503e4 	mov	w4, w21
   84288:	aa1603e1 	mov	x1, x22
   8428c:	911d2063 	add	x3, x3, #0x748
   84290:	52800042 	mov	w2, #0x2                   	// #2
   84294:	94006fcb 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   84298:	17ffffc8 	b	841b8 <CXHCIEndpoint::TransferEvent(unsigned char, unsigned int)+0x88>
   8429c:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   842a0:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   842a4:	9119a021 	add	x1, x1, #0x668
   842a8:	911ca000 	add	x0, x0, #0x728
   842ac:	52803702 	mov	w2, #0x1b8                 	// #440
   842b0:	940066a4 	bl	9dd40 <assertion_failed>
   842b4:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   842b8:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   842bc:	9119a021 	add	x1, x1, #0x668
   842c0:	911c6000 	add	x0, x0, #0x718
   842c4:	52803682 	mov	w2, #0x1b4                 	// #436
   842c8:	9400669e 	bl	9dd40 <assertion_failed>
   842cc:	d503201f 	nop

00000000000842d0 <CXHCIEndpoint::DumpStatus()>:
   842d0:	d100c3ff 	sub	sp, sp, #0x30
   842d4:	a9017bfd 	stp	x29, x30, [sp, #16]
   842d8:	910043fd 	add	x29, sp, #0x10
   842dc:	f90013f3 	str	x19, [sp, #32]
   842e0:	aa0003f3 	mov	x19, x0
   842e4:	39406000 	ldrb	w0, [x0, #24]
   842e8:	34000340 	cbz	w0, 84350 <CXHCIEndpoint::DumpStatus()+0x80>
   842ec:	3940b660 	ldrb	w0, [x19, #45]
   842f0:	7100041f 	cmp	w0, #0x1
   842f4:	54000128 	b.hi	84318 <CXHCIEndpoint::DumpStatus()+0x48>  // b.pmore
   842f8:	f9401260 	ldr	x0, [x19, #32]
   842fc:	b40003e0 	cbz	x0, 84378 <CXHCIEndpoint::DumpStatus()+0xa8>
   84300:	d0000181 	adrp	x1, b6000 <From+0x98>
   84304:	9108a021 	add	x1, x1, #0x228
   84308:	a9417bfd 	ldp	x29, x30, [sp, #16]
   8430c:	f94013f3 	ldr	x19, [sp, #32]
   84310:	9100c3ff 	add	sp, sp, #0x30
   84314:	14000817 	b	86370 <CXHCIRing::DumpStatus(char const*)>
   84318:	94006dbe 	bl	9fa10 <CLogger::Get()>
   8431c:	3940b264 	ldrb	w4, [x19, #44]
   84320:	b0000163 	adrp	x3, b1000 <_etext+0x158>
   84324:	d0000181 	adrp	x1, b6000 <From+0x98>
   84328:	911e2063 	add	x3, x3, #0x788
   8432c:	9108a021 	add	x1, x1, #0x228
   84330:	79405667 	ldrh	w7, [x19, #42]
   84334:	52800082 	mov	w2, #0x4                   	// #4
   84338:	3940a666 	ldrb	w6, [x19, #41]
   8433c:	b90003e4 	str	w4, [sp]
   84340:	3940a265 	ldrb	w5, [x19, #40]
   84344:	3940b664 	ldrb	w4, [x19, #45]
   84348:	94006f9e 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8434c:	17ffffeb 	b	842f8 <CXHCIEndpoint::DumpStatus()+0x28>
   84350:	94006db0 	bl	9fa10 <CLogger::Get()>
   84354:	b0000163 	adrp	x3, b1000 <_etext+0x158>
   84358:	d0000181 	adrp	x1, b6000 <From+0x98>
   8435c:	a9417bfd 	ldp	x29, x30, [sp, #16]
   84360:	911dc063 	add	x3, x3, #0x770
   84364:	9108a021 	add	x1, x1, #0x228
   84368:	52800082 	mov	w2, #0x4                   	// #4
   8436c:	f94013f3 	ldr	x19, [sp, #32]
   84370:	9100c3ff 	add	sp, sp, #0x30
   84374:	14006f93 	b	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   84378:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   8437c:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   84380:	9119a021 	add	x1, x1, #0x668
   84384:	911b0000 	add	x0, x0, #0x6c0
   84388:	52803ce2 	mov	w2, #0x1e7                 	// #487
   8438c:	9400666d 	bl	9dd40 <assertion_failed>

0000000000084390 <CXHCIEndpoint::EnqueueTRB(unsigned int, unsigned int, unsigned int, unsigned int)>:
   84390:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   84394:	910003fd 	mov	x29, sp
   84398:	a90153f3 	stp	x19, x20, [sp, #16]
   8439c:	a9025bf5 	stp	x21, x22, [sp, #32]
   843a0:	a90363f7 	stp	x23, x24, [sp, #48]
   843a4:	aa0003f8 	mov	x24, x0
   843a8:	f9401000 	ldr	x0, [x0, #32]
   843ac:	b4000620 	cbz	x0, 84470 <CXHCIEndpoint::EnqueueTRB(unsigned int, unsigned int, unsigned int, unsigned int)+0xe0>
   843b0:	2a0103f7 	mov	w23, w1
   843b4:	2a0203f6 	mov	w22, w2
   843b8:	2a0303f5 	mov	w21, w3
   843bc:	2a0403f4 	mov	w20, w4
   843c0:	94000740 	bl	860c0 <CXHCIRing::GetEnqueueTRB()>
   843c4:	aa0003f3 	mov	x19, x0
   843c8:	52800000 	mov	w0, #0x0                   	// #0
   843cc:	b4000493 	cbz	x19, 8445c <CXHCIEndpoint::EnqueueTRB(unsigned int, unsigned int, unsigned int, unsigned int)+0xcc>
   843d0:	d3483ea1 	ubfx	x1, x21, #8, #8
   843d4:	d3505ea0 	ubfx	x0, x21, #16, #8
   843d8:	39000275 	strb	w21, [x19]
   843dc:	d3483e84 	ubfx	x4, x20, #8, #8
   843e0:	d3505e83 	ubfx	x3, x20, #16, #8
   843e4:	39001274 	strb	w20, [x19, #4]
   843e8:	d3483ec2 	ubfx	x2, x22, #8, #8
   843ec:	53187eb5 	lsr	w21, w21, #24
   843f0:	39000661 	strb	w1, [x19, #1]
   843f4:	53187e94 	lsr	w20, w20, #24
   843f8:	d3505ec1 	ubfx	x1, x22, #16, #8
   843fc:	39000a60 	strb	w0, [x19, #2]
   84400:	53187ec0 	lsr	w0, w22, #24
   84404:	39000e75 	strb	w21, [x19, #3]
   84408:	39001664 	strb	w4, [x19, #5]
   8440c:	39001a63 	strb	w3, [x19, #6]
   84410:	39001e74 	strb	w20, [x19, #7]
   84414:	39002276 	strb	w22, [x19, #8]
   84418:	39002662 	strb	w2, [x19, #9]
   8441c:	39002a61 	strb	w1, [x19, #10]
   84420:	39002e60 	strb	w0, [x19, #11]
   84424:	f9401300 	ldr	x0, [x24, #32]
   84428:	940007c6 	bl	86340 <CXHCIRing::GetCycleState() const>
   8442c:	2a170001 	orr	w1, w0, w23
   84430:	2a170002 	orr	w2, w0, w23
   84434:	f9401300 	ldr	x0, [x24, #32]
   84438:	d3483c24 	ubfx	x4, x1, #8, #8
   8443c:	d3505c23 	ubfx	x3, x1, #16, #8
   84440:	53187c21 	lsr	w1, w1, #24
   84444:	39003262 	strb	w2, [x19, #12]
   84448:	39003664 	strb	w4, [x19, #13]
   8444c:	39003a63 	strb	w3, [x19, #14]
   84450:	39003e61 	strb	w1, [x19, #15]
   84454:	94000773 	bl	86220 <CXHCIRing::IncrementEnqueue()>
   84458:	52800020 	mov	w0, #0x1                   	// #1
   8445c:	a94153f3 	ldp	x19, x20, [sp, #16]
   84460:	a9425bf5 	ldp	x21, x22, [sp, #32]
   84464:	a94363f7 	ldp	x23, x24, [sp, #48]
   84468:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8446c:	d65f03c0 	ret
   84470:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   84474:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   84478:	9119a021 	add	x1, x1, #0x668
   8447c:	911b0000 	add	x0, x0, #0x6c0
   84480:	52803f02 	mov	w2, #0x1f8                 	// #504
   84484:	9400662f 	bl	9dd40 <assertion_failed>
   84488:	d503201f 	nop
   8448c:	d503201f 	nop

0000000000084490 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]>:
   84490:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   84494:	910003fd 	mov	x29, sp
   84498:	a90153f3 	stp	x19, x20, [sp, #16]
   8449c:	aa0003f4 	mov	x20, x0
   844a0:	aa0103e0 	mov	x0, x1
   844a4:	a9025bf5 	stp	x21, x22, [sp, #32]
   844a8:	aa0103f6 	mov	x22, x1
   844ac:	97fff5ed 	bl	81c60 <CUSBRequest::GetBuffer()>
   844b0:	aa0003f3 	mov	x19, x0
   844b4:	aa1603e0 	mov	x0, x22
   844b8:	97fff5fa 	bl	81ca0 <CUSBRequest::GetBufLen() const>
   844bc:	b9405281 	ldr	w1, [x20, #80]
   844c0:	2a0003f5 	mov	w21, w0
   844c4:	35000dc1 	cbnz	w1, 8467c <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x1ec>
   844c8:	f9401a80 	ldr	x0, [x20, #48]
   844cc:	b4000e00 	cbz	x0, 8468c <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x1fc>
   844d0:	f9401e80 	ldr	x0, [x20, #56]
   844d4:	b50014c0 	cbnz	x0, 8476c <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x2dc>
   844d8:	b9405280 	ldr	w0, [x20, #80]
   844dc:	f9001e96 	str	x22, [x20, #56]
   844e0:	35000dc0 	cbnz	w0, 84698 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x208>
   844e4:	3940ba80 	ldrb	w0, [x20, #46]
   844e8:	370807e0 	tbnz	w0, #1, 845e4 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x154>
   844ec:	7100101f 	cmp	w0, #0x4
   844f0:	54000ea0 	b.eq	846c4 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x234>  // b.none
   844f4:	12000400 	and	w0, w0, #0x3
   844f8:	a90363f7 	stp	x23, x24, [sp, #48]
   844fc:	7100041f 	cmp	w0, #0x1
   84500:	54001e81 	b.ne	848d0 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x440>  // b.any
   84504:	b4002093 	cbz	x19, 84914 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x484>
   84508:	34002175 	cbz	w21, 84934 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x4a4>
   8450c:	f14a027f 	cmp	x19, #0x280, lsl #12
   84510:	54002229 	b.ls	84954 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x4c4>  // b.plast
   84514:	2a1503e1 	mov	w1, w21
   84518:	aa1303e0 	mov	x0, x19
   8451c:	9400941d 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   84520:	aa1603e0 	mov	x0, x22
   84524:	97fff607 	bl	81d40 <CUSBRequest::GetNumIsoPackets() const>
   84528:	2a0003f8 	mov	w24, w0
   8452c:	340023e0 	cbz	w0, 849a8 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x518>
   84530:	a9046bf9 	stp	x25, x26, [sp, #64]
   84534:	5100041a 	sub	w26, w0, #0x1
   84538:	b00001d9 	adrp	x25, bd000 <CNetDevice::s_SpeedString+0x18>
   8453c:	910ba339 	add	x25, x25, #0x2e8
   84540:	530f3b57 	lsl	w23, w26, #17
   84544:	a90573fb 	stp	x27, x28, [sp, #80]
   84548:	5282841c 	mov	w28, #0x1420                	// #5152
   8454c:	72b0001c 	movk	w28, #0x8000, lsl #16
   84550:	5280001b 	mov	w27, #0x0                   	// #0
   84554:	14000006 	b	8456c <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0xdc>
   84558:	1100077b 	add	w27, w27, #0x1
   8455c:	514082f7 	sub	w23, w23, #0x20, lsl #12
   84560:	8b352273 	add	x19, x19, w21, uxth
   84564:	6b1b031f 	cmp	w24, w27
   84568:	54000a60 	b.eq	846b4 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x224>  // b.none
   8456c:	2a1b03e1 	mov	w1, w27
   84570:	aa1603e0 	mov	x0, x22
   84574:	97fff5ff 	bl	81d70 <CUSBRequest::GetIsoPacketSize(unsigned int) const>
   84578:	f9400323 	ldr	x3, [x25]
   8457c:	12003c02 	and	w2, w0, #0xffff
   84580:	6b1b035f 	cmp	w26, w27
   84584:	2a0203f5 	mov	w21, w2
   84588:	aa1403e0 	mov	x0, x20
   8458c:	2a170042 	orr	w2, w2, w23
   84590:	52828001 	mov	w1, #0x1400                	// #5120
   84594:	72b00001 	movk	w1, #0x8000, lsl #16
   84598:	1a810381 	csel	w1, w28, w1, eq	// eq = none
   8459c:	aa030264 	orr	x4, x19, x3
   845a0:	2a130063 	orr	w3, w3, w19
   845a4:	d360fc84 	lsr	x4, x4, #32
   845a8:	97ffff7a 	bl	84390 <CXHCIEndpoint::EnqueueTRB(unsigned int, unsigned int, unsigned int, unsigned int)>
   845ac:	72001c1f 	tst	w0, #0xff
   845b0:	54fffd41 	b.ne	84558 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0xc8>  // b.any
   845b4:	a94363f7 	ldp	x23, x24, [sp, #48]
   845b8:	a9446bf9 	ldp	x25, x26, [sp, #64]
   845bc:	a94573fb 	ldp	x27, x28, [sp, #80]
   845c0:	b9405280 	ldr	w0, [x20, #80]
   845c4:	350006e0 	cbnz	w0, 846a0 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x210>
   845c8:	f9401e81 	ldr	x1, [x20, #56]
   845cc:	b4000701 	cbz	x1, 846ac <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x21c>
   845d0:	f9001e9f 	str	xzr, [x20, #56]
   845d4:	52800013 	mov	w19, #0x0                   	// #0
   845d8:	34000480 	cbz	w0, 84668 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x1d8>
   845dc:	94009309 	bl	a9200 <LeaveCritical>
   845e0:	14000022 	b	84668 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x1d8>
   845e4:	b40012f3 	cbz	x19, 84840 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x3b0>
   845e8:	340013f5 	cbz	w21, 84864 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x3d4>
   845ec:	f14a027f 	cmp	x19, #0x280, lsl #12
   845f0:	540014c9 	b.ls	84888 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x3f8>  // b.plast
   845f4:	2a1503e1 	mov	w1, w21
   845f8:	aa1303e0 	mov	x0, x19
   845fc:	940093e5 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   84600:	b00001c0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   84604:	2a1503e2 	mov	w2, w21
   84608:	f9417403 	ldr	x3, [x0, #744]
   8460c:	52808401 	mov	w1, #0x420                 	// #1056
   84610:	aa1403e0 	mov	x0, x20
   84614:	aa030264 	orr	x4, x19, x3
   84618:	2a130063 	orr	w3, w3, w19
   8461c:	d360fc84 	lsr	x4, x4, #32
   84620:	97ffff5c 	bl	84390 <CXHCIEndpoint::EnqueueTRB(unsigned int, unsigned int, unsigned int, unsigned int)>
   84624:	72001c1f 	tst	w0, #0xff
   84628:	54fffcc0 	b.eq	845c0 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x130>  // b.none
   8462c:	d5033f9f 	dsb	sy
   84630:	f9400280 	ldr	x0, [x20]
   84634:	b40013c0 	cbz	x0, 848ac <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x41c>
   84638:	3940b681 	ldrb	w1, [x20, #45]
   8463c:	51000421 	sub	w1, w1, #0x1
   84640:	12001c21 	and	w1, w1, #0xff
   84644:	7100783f 	cmp	w1, #0x1e
   84648:	54001548 	b.hi	848f0 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x460>  // b.pmore
   8464c:	f9400a95 	ldr	x21, [x20, #16]
   84650:	52800033 	mov	w19, #0x1                   	// #1
   84654:	94000d17 	bl	87ab0 <CXHCIUSBDevice::GetSlotID() const>
   84658:	12001c01 	and	w1, w0, #0xff
   8465c:	3940b682 	ldrb	w2, [x20, #45]
   84660:	aa1503e0 	mov	x0, x21
   84664:	94000553 	bl	85bb0 <CXHCIMMIOSpace::db_write32(unsigned int, unsigned int)>
   84668:	2a1303e0 	mov	w0, w19
   8466c:	a94153f3 	ldp	x19, x20, [sp, #16]
   84670:	a9425bf5 	ldp	x21, x22, [sp, #32]
   84674:	a8c67bfd 	ldp	x29, x30, [sp], #96
   84678:	d65f03c0 	ret
   8467c:	2a0103e0 	mov	w0, w1
   84680:	940092b0 	bl	a9140 <EnterCritical>
   84684:	f9401a80 	ldr	x0, [x20, #48]
   84688:	b5fff240 	cbnz	x0, 844d0 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x40>
   8468c:	b9405280 	ldr	w0, [x20, #80]
   84690:	f9001a96 	str	x22, [x20, #48]
   84694:	34fff280 	cbz	w0, 844e4 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x54>
   84698:	940092da 	bl	a9200 <LeaveCritical>
   8469c:	17ffff92 	b	844e4 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x54>
   846a0:	940092a8 	bl	a9140 <EnterCritical>
   846a4:	b9405280 	ldr	w0, [x20, #80]
   846a8:	17ffffc8 	b	845c8 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x138>
   846ac:	f9001a9f 	str	xzr, [x20, #48]
   846b0:	17ffffc9 	b	845d4 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x144>
   846b4:	a94363f7 	ldp	x23, x24, [sp, #48]
   846b8:	a9446bf9 	ldp	x25, x26, [sp, #64]
   846bc:	a94573fb 	ldp	x27, x28, [sp, #80]
   846c0:	17ffffdb 	b	8462c <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x19c>
   846c4:	aa1603e0 	mov	x0, x22
   846c8:	97fff54e 	bl	81c00 <CUSBRequest::GetSetupData()>
   846cc:	aa0003e3 	mov	x3, x0
   846d0:	b4001700 	cbz	x0, 849b0 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x520>
   846d4:	39c00000 	ldrsb	w0, [x0]
   846d8:	37f805c0 	tbnz	w0, #31, 84790 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x300>
   846dc:	39401064 	ldrb	w4, [x3, #4]
   846e0:	52810801 	mov	w1, #0x840                 	// #2112
   846e4:	710002bf 	cmp	w21, #0x0
   846e8:	52800102 	mov	w2, #0x8                   	// #8
   846ec:	1a9f07f6 	cset	w22, ne	// ne = any
   846f0:	aa1403e0 	mov	x0, x20
   846f4:	39401467 	ldrb	w7, [x3, #5]
   846f8:	2a164421 	orr	w1, w1, w22, lsl #17
   846fc:	531f7ad6 	lsl	w22, w22, #1
   84700:	39400068 	ldrb	w8, [x3]
   84704:	39400466 	ldrb	w6, [x3, #1]
   84708:	aa072087 	orr	x7, x4, x7, lsl #8
   8470c:	39401864 	ldrb	w4, [x3, #6]
   84710:	39400865 	ldrb	w5, [x3, #2]
   84714:	aa062106 	orr	x6, x8, x6, lsl #8
   84718:	39401c68 	ldrb	w8, [x3, #7]
   8471c:	aa0440e4 	orr	x4, x7, x4, lsl #16
   84720:	39400c67 	ldrb	w7, [x3, #3]
   84724:	aa0540c3 	orr	x3, x6, x5, lsl #16
   84728:	2a086084 	orr	w4, w4, w8, lsl #24
   8472c:	2a076063 	orr	w3, w3, w7, lsl #24
   84730:	97ffff18 	bl	84390 <CXHCIEndpoint::EnqueueTRB(unsigned int, unsigned int, unsigned int, unsigned int)>
   84734:	72001c1f 	tst	w0, #0xff
   84738:	54fff440 	b.eq	845c0 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x130>  // b.none
   8473c:	350011d6 	cbnz	w22, 84974 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x4e4>
   84740:	52a00036 	mov	w22, #0x10000               	// #65536
   84744:	52820401 	mov	w1, #0x1020                	// #4128
   84748:	52800004 	mov	w4, #0x0                   	// #0
   8474c:	2a0102c1 	orr	w1, w22, w1
   84750:	52800003 	mov	w3, #0x0                   	// #0
   84754:	52800002 	mov	w2, #0x0                   	// #0
   84758:	aa1403e0 	mov	x0, x20
   8475c:	97ffff0d 	bl	84390 <CXHCIEndpoint::EnqueueTRB(unsigned int, unsigned int, unsigned int, unsigned int)>
   84760:	72001c1f 	tst	w0, #0xff
   84764:	54fff641 	b.ne	8462c <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x19c>  // b.any
   84768:	17ffff96 	b	845c0 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x130>
   8476c:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   84770:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   84774:	a90363f7 	stp	x23, x24, [sp, #48]
   84778:	9119a021 	add	x1, x1, #0x668
   8477c:	911f2000 	add	x0, x0, #0x7c8
   84780:	528021e2 	mov	w2, #0x10f                 	// #271
   84784:	a9046bf9 	stp	x25, x26, [sp, #64]
   84788:	a90573fb 	stp	x27, x28, [sp, #80]
   8478c:	9400656d 	bl	9dd40 <assertion_failed>
   84790:	34001335 	cbz	w21, 849f4 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x564>
   84794:	39401064 	ldrb	w4, [x3, #4]
   84798:	52810801 	mov	w1, #0x840                 	// #2112
   8479c:	72a00061 	movk	w1, #0x3, lsl #16
   847a0:	52800102 	mov	w2, #0x8                   	// #8
   847a4:	aa1403e0 	mov	x0, x20
   847a8:	39401467 	ldrb	w7, [x3, #5]
   847ac:	39400068 	ldrb	w8, [x3]
   847b0:	39400466 	ldrb	w6, [x3, #1]
   847b4:	aa072087 	orr	x7, x4, x7, lsl #8
   847b8:	39401864 	ldrb	w4, [x3, #6]
   847bc:	39400865 	ldrb	w5, [x3, #2]
   847c0:	aa062106 	orr	x6, x8, x6, lsl #8
   847c4:	39401c68 	ldrb	w8, [x3, #7]
   847c8:	aa0440e4 	orr	x4, x7, x4, lsl #16
   847cc:	39400c67 	ldrb	w7, [x3, #3]
   847d0:	aa0540c3 	orr	x3, x6, x5, lsl #16
   847d4:	2a086084 	orr	w4, w4, w8, lsl #24
   847d8:	2a076063 	orr	w3, w3, w7, lsl #24
   847dc:	97fffeed 	bl	84390 <CXHCIEndpoint::EnqueueTRB(unsigned int, unsigned int, unsigned int, unsigned int)>
   847e0:	72001c1f 	tst	w0, #0xff
   847e4:	54ffeee0 	b.eq	845c0 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x130>  // b.none
   847e8:	a90363f7 	stp	x23, x24, [sp, #48]
   847ec:	52800016 	mov	w22, #0x0                   	// #0
   847f0:	52a00037 	mov	w23, #0x10000               	// #65536
   847f4:	b4000f13 	cbz	x19, 849d4 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x544>
   847f8:	f14a027f 	cmp	x19, #0x280, lsl #12
   847fc:	540010e9 	b.ls	84a18 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x588>  // b.plast
   84800:	2a1503e1 	mov	w1, w21
   84804:	aa1303e0 	mov	x0, x19
   84808:	94009362 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   8480c:	b00001c0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   84810:	321606e1 	orr	w1, w23, #0xc00
   84814:	f9417403 	ldr	x3, [x0, #744]
   84818:	2a1503e2 	mov	w2, w21
   8481c:	aa1403e0 	mov	x0, x20
   84820:	aa030264 	orr	x4, x19, x3
   84824:	2a130063 	orr	w3, w3, w19
   84828:	d360fc84 	lsr	x4, x4, #32
   8482c:	97fffed9 	bl	84390 <CXHCIEndpoint::EnqueueTRB(unsigned int, unsigned int, unsigned int, unsigned int)>
   84830:	72001c1f 	tst	w0, #0xff
   84834:	a94363f7 	ldp	x23, x24, [sp, #48]
   84838:	54fff861 	b.ne	84744 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x2b4>  // b.any
   8483c:	17ffff61 	b	845c0 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x130>
   84840:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   84844:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   84848:	a90363f7 	stp	x23, x24, [sp, #48]
   8484c:	9119a021 	add	x1, x1, #0x668
   84850:	911f6000 	add	x0, x0, #0x7d8
   84854:	52802302 	mov	w2, #0x118                 	// #280
   84858:	a9046bf9 	stp	x25, x26, [sp, #64]
   8485c:	a90573fb 	stp	x27, x28, [sp, #80]
   84860:	94006538 	bl	9dd40 <assertion_failed>
   84864:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   84868:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   8486c:	a90363f7 	stp	x23, x24, [sp, #48]
   84870:	9119a021 	add	x1, x1, #0x668
   84874:	911c6000 	add	x0, x0, #0x718
   84878:	52802322 	mov	w2, #0x119                 	// #281
   8487c:	a9046bf9 	stp	x25, x26, [sp, #64]
   84880:	a90573fb 	stp	x27, x28, [sp, #80]
   84884:	9400652f 	bl	9dd40 <assertion_failed>
   84888:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   8488c:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   84890:	a90363f7 	stp	x23, x24, [sp, #48]
   84894:	9119a021 	add	x1, x1, #0x668
   84898:	911fa000 	add	x0, x0, #0x7e8
   8489c:	52802342 	mov	w2, #0x11a                 	// #282
   848a0:	a9046bf9 	stp	x25, x26, [sp, #64]
   848a4:	a90573fb 	stp	x27, x28, [sp, #80]
   848a8:	94006526 	bl	9dd40 <assertion_failed>
   848ac:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   848b0:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   848b4:	a90363f7 	stp	x23, x24, [sp, #48]
   848b8:	9119a021 	add	x1, x1, #0x668
   848bc:	91210000 	add	x0, x0, #0x840
   848c0:	528030e2 	mov	w2, #0x187                 	// #391
   848c4:	a9046bf9 	stp	x25, x26, [sp, #64]
   848c8:	a90573fb 	stp	x27, x28, [sp, #80]
   848cc:	9400651d 	bl	9dd40 <assertion_failed>
   848d0:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   848d4:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   848d8:	a9046bf9 	stp	x25, x26, [sp, #64]
   848dc:	9119a021 	add	x1, x1, #0x668
   848e0:	91208000 	add	x0, x0, #0x820
   848e4:	52802d42 	mov	w2, #0x16a                 	// #362
   848e8:	a90573fb 	stp	x27, x28, [sp, #80]
   848ec:	94006515 	bl	9dd40 <assertion_failed>
   848f0:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   848f4:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   848f8:	a90363f7 	stp	x23, x24, [sp, #48]
   848fc:	9119a021 	add	x1, x1, #0x668
   84900:	91214000 	add	x0, x0, #0x850
   84904:	52803102 	mov	w2, #0x188                 	// #392
   84908:	a9046bf9 	stp	x25, x26, [sp, #64]
   8490c:	a90573fb 	stp	x27, x28, [sp, #80]
   84910:	9400650c 	bl	9dd40 <assertion_failed>
   84914:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   84918:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   8491c:	a9046bf9 	stp	x25, x26, [sp, #64]
   84920:	9119a021 	add	x1, x1, #0x668
   84924:	911f6000 	add	x0, x0, #0x7d8
   84928:	52802d82 	mov	w2, #0x16c                 	// #364
   8492c:	a90573fb 	stp	x27, x28, [sp, #80]
   84930:	94006504 	bl	9dd40 <assertion_failed>
   84934:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   84938:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   8493c:	a9046bf9 	stp	x25, x26, [sp, #64]
   84940:	9119a021 	add	x1, x1, #0x668
   84944:	911c6000 	add	x0, x0, #0x718
   84948:	52802da2 	mov	w2, #0x16d                 	// #365
   8494c:	a90573fb 	stp	x27, x28, [sp, #80]
   84950:	940064fc 	bl	9dd40 <assertion_failed>
   84954:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   84958:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   8495c:	a9046bf9 	stp	x25, x26, [sp, #64]
   84960:	9119a021 	add	x1, x1, #0x668
   84964:	911fa000 	add	x0, x0, #0x7e8
   84968:	52802dc2 	mov	w2, #0x16e                 	// #366
   8496c:	a90573fb 	stp	x27, x28, [sp, #80]
   84970:	940064f4 	bl	9dd40 <assertion_failed>
   84974:	a90363f7 	stp	x23, x24, [sp, #48]
   84978:	b40002f3 	cbz	x19, 849d4 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x544>
   8497c:	52a00036 	mov	w22, #0x10000               	// #65536
   84980:	52800017 	mov	w23, #0x0                   	// #0
   84984:	35fff3b5 	cbnz	w21, 847f8 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x368>
   84988:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   8498c:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   84990:	a9046bf9 	stp	x25, x26, [sp, #64]
   84994:	9119a021 	add	x1, x1, #0x668
   84998:	911c6000 	add	x0, x0, #0x718
   8499c:	52802a62 	mov	w2, #0x153                 	// #339
   849a0:	a90573fb 	stp	x27, x28, [sp, #80]
   849a4:	940064e7 	bl	9dd40 <assertion_failed>
   849a8:	a94363f7 	ldp	x23, x24, [sp, #48]
   849ac:	17ffff20 	b	8462c <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]+0x19c>
   849b0:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   849b4:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   849b8:	a90363f7 	stp	x23, x24, [sp, #48]
   849bc:	9119a021 	add	x1, x1, #0x668
   849c0:	91204000 	add	x0, x0, #0x810
   849c4:	52802522 	mov	w2, #0x129                 	// #297
   849c8:	a9046bf9 	stp	x25, x26, [sp, #64]
   849cc:	a90573fb 	stp	x27, x28, [sp, #80]
   849d0:	940064dc 	bl	9dd40 <assertion_failed>
   849d4:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   849d8:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   849dc:	a9046bf9 	stp	x25, x26, [sp, #64]
   849e0:	9119a021 	add	x1, x1, #0x668
   849e4:	911f6000 	add	x0, x0, #0x7d8
   849e8:	52802a42 	mov	w2, #0x152                 	// #338
   849ec:	a90573fb 	stp	x27, x28, [sp, #80]
   849f0:	940064d4 	bl	9dd40 <assertion_failed>
   849f4:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   849f8:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   849fc:	a90363f7 	stp	x23, x24, [sp, #48]
   84a00:	9119a021 	add	x1, x1, #0x668
   84a04:	911c6000 	add	x0, x0, #0x718
   84a08:	52802602 	mov	w2, #0x130                 	// #304
   84a0c:	a9046bf9 	stp	x25, x26, [sp, #64]
   84a10:	a90573fb 	stp	x27, x28, [sp, #80]
   84a14:	940064cb 	bl	9dd40 <assertion_failed>
   84a18:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   84a1c:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   84a20:	a9046bf9 	stp	x25, x26, [sp, #64]
   84a24:	9119a021 	add	x1, x1, #0x668
   84a28:	911fa000 	add	x0, x0, #0x7e8
   84a2c:	52802a82 	mov	w2, #0x154                 	// #340
   84a30:	a90573fb 	stp	x27, x28, [sp, #80]
   84a34:	940064c3 	bl	9dd40 <assertion_failed>
   84a38:	d503201f 	nop
   84a3c:	d503201f 	nop

0000000000084a40 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)>:
   84a40:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   84a44:	910003fd 	mov	x29, sp
   84a48:	b4000121 	cbz	x1, 84a6c <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x2c>
   84a4c:	350001c2 	cbnz	w2, 84a84 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x44>
   84a50:	39406002 	ldrb	w2, [x0, #24]
   84a54:	35000082 	cbnz	w2, 84a64 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int)+0x24>
   84a58:	52800000 	mov	w0, #0x0                   	// #0
   84a5c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   84a60:	d65f03c0 	ret
   84a64:	a8c17bfd 	ldp	x29, x30, [sp], #16
   84a68:	17fffe8a 	b	84490 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]>
   84a6c:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   84a70:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   84a74:	9119a021 	add	x1, x1, #0x668
   84a78:	910aa000 	add	x0, x0, #0x2a8
   84a7c:	52801fa2 	mov	w2, #0xfd                  	// #253
   84a80:	940064b0 	bl	9dd40 <assertion_failed>
   84a84:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   84a88:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   84a8c:	9119a021 	add	x1, x1, #0x668
   84a90:	9121e000 	add	x0, x0, #0x878
   84a94:	52801fc2 	mov	w2, #0xfe                  	// #254
   84a98:	940064aa 	bl	9dd40 <assertion_failed>
   84a9c:	d503201f 	nop

0000000000084aa0 <CXHCIEndpoint::Transfer(CUSBRequest*, unsigned int)>:
   84aa0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   84aa4:	910003fd 	mov	x29, sp
   84aa8:	a90153f3 	stp	x19, x20, [sp, #16]
   84aac:	a9025bf5 	stp	x21, x22, [sp, #32]
   84ab0:	b4000981 	cbz	x1, 84be0 <CXHCIEndpoint::Transfer(CUSBRequest*, unsigned int)+0x140>
   84ab4:	35000a22 	cbnz	w2, 84bf8 <CXHCIEndpoint::Transfer(CUSBRequest*, unsigned int)+0x158>
   84ab8:	aa0103f5 	mov	x21, x1
   84abc:	f0ffffe1 	adrp	x1, 83000 <CUSBStandardHub::HandlePortStatusChange()+0x150>
   84ac0:	aa0003f3 	mov	x19, x0
   84ac4:	aa0003e3 	mov	x3, x0
   84ac8:	913d4021 	add	x1, x1, #0xf50
   84acc:	aa1503e0 	mov	x0, x21
   84ad0:	d2800002 	mov	x2, #0x0                   	// #0
   84ad4:	97fff4b7 	bl	81db0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   84ad8:	39410260 	ldrb	w0, [x19, #64]
   84adc:	72001c1f 	tst	w0, #0xff
   84ae0:	54000980 	b.eq	84c10 <CXHCIEndpoint::Transfer(CUSBRequest*, unsigned int)+0x170>  // b.none
   84ae4:	39406260 	ldrb	w0, [x19, #24]
   84ae8:	3901027f 	strb	wzr, [x19, #64]
   84aec:	350000e0 	cbnz	w0, 84b08 <CXHCIEndpoint::Transfer(CUSBRequest*, unsigned int)+0x68>
   84af0:	52800014 	mov	w20, #0x0                   	// #0
   84af4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   84af8:	2a1403e0 	mov	w0, w20
   84afc:	a94153f3 	ldp	x19, x20, [sp, #16]
   84b00:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84b04:	d65f03c0 	ret
   84b08:	aa1503e1 	mov	x1, x21
   84b0c:	aa1303e0 	mov	x0, x19
   84b10:	97fffe60 	bl	84490 <CXHCIEndpoint::TransferAsync(CUSBRequest*, unsigned int) [clone .part.0]>
   84b14:	72001c1f 	tst	w0, #0xff
   84b18:	54fffec0 	b.eq	84af0 <CXHCIEndpoint::Transfer(CUSBRequest*, unsigned int)+0x50>  // b.none
   84b1c:	94008975 	bl	a70f0 <CTimer::Get()>
   84b20:	94008654 	bl	a6470 <CTimer::GetTicks() const>
   84b24:	2a0003f6 	mov	w22, w0
   84b28:	14000006 	b	84b40 <CXHCIEndpoint::Transfer(CUSBRequest*, unsigned int)+0xa0>
   84b2c:	94008971 	bl	a70f0 <CTimer::Get()>
   84b30:	94008650 	bl	a6470 <CTimer::GetTicks() const>
   84b34:	4b160002 	sub	w2, w0, w22
   84b38:	71018c5f 	cmp	w2, #0x63
   84b3c:	540001c8 	b.hi	84b74 <CXHCIEndpoint::Transfer(CUSBRequest*, unsigned int)+0xd4>  // b.pmore
   84b40:	39410262 	ldrb	w2, [x19, #64]
   84b44:	72001c54 	ands	w20, w2, #0xff
   84b48:	54ffff20 	b.eq	84b2c <CXHCIEndpoint::Transfer(CUSBRequest*, unsigned int)+0x8c>  // b.none
   84b4c:	d5033fbf 	dmb	sy
   84b50:	aa1503e0 	mov	x0, x21
   84b54:	97fff40f 	bl	81b90 <CUSBRequest::GetStatus() const>
   84b58:	7100001f 	cmp	w0, #0x0
   84b5c:	1a9f07f4 	cset	w20, ne	// ne = any
   84b60:	2a1403e0 	mov	w0, w20
   84b64:	a94153f3 	ldp	x19, x20, [sp, #16]
   84b68:	a9425bf5 	ldp	x21, x22, [sp, #32]
   84b6c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84b70:	d65f03c0 	ret
   84b74:	94006ba7 	bl	9fa10 <CLogger::Get()>
   84b78:	aa0003e1 	mov	x1, x0
   84b7c:	aa1503e0 	mov	x0, x21
   84b80:	aa0103f5 	mov	x21, x1
   84b84:	97fff3eb 	bl	81b30 <CUSBRequest::GetEndpoint() const>
   84b88:	940015f2 	bl	8a350 <CUSBEndpoint::GetNumber() const>
   84b8c:	b0000163 	adrp	x3, b1000 <_etext+0x158>
   84b90:	d0000181 	adrp	x1, b6000 <From+0x98>
   84b94:	12001c04 	and	w4, w0, #0xff
   84b98:	91226063 	add	x3, x3, #0x898
   84b9c:	aa1503e0 	mov	x0, x21
   84ba0:	9108a021 	add	x1, x1, #0x228
   84ba4:	52800082 	mov	w2, #0x4                   	// #4
   84ba8:	94006d86 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   84bac:	f9400260 	ldr	x0, [x19]
   84bb0:	94000c10 	bl	87bf0 <CXHCIUSBDevice::DumpStatus()>
   84bb4:	b9405260 	ldr	w0, [x19, #80]
   84bb8:	35000380 	cbnz	w0, 84c28 <CXHCIEndpoint::Transfer(CUSBRequest*, unsigned int)+0x188>
   84bbc:	f9401e60 	ldr	x0, [x19, #56]
   84bc0:	a9037e60 	stp	x0, xzr, [x19, #48]
   84bc4:	52800020 	mov	w0, #0x1                   	// #1
   84bc8:	39010260 	strb	w0, [x19, #64]
   84bcc:	2a1403e0 	mov	w0, w20
   84bd0:	a94153f3 	ldp	x19, x20, [sp, #16]
   84bd4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   84bd8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84bdc:	d65f03c0 	ret
   84be0:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   84be4:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   84be8:	9119a021 	add	x1, x1, #0x668
   84bec:	910aa000 	add	x0, x0, #0x2a8
   84bf0:	52801a02 	mov	w2, #0xd0                  	// #208
   84bf4:	94006453 	bl	9dd40 <assertion_failed>
   84bf8:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   84bfc:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   84c00:	9119a021 	add	x1, x1, #0x668
   84c04:	9121e000 	add	x0, x0, #0x878
   84c08:	52801a22 	mov	w2, #0xd1                  	// #209
   84c0c:	9400644d 	bl	9dd40 <assertion_failed>
   84c10:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   84c14:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   84c18:	9119a021 	add	x1, x1, #0x668
   84c1c:	911a2000 	add	x0, x0, #0x688
   84c20:	52801aa2 	mov	w2, #0xd5                  	// #213
   84c24:	94006447 	bl	9dd40 <assertion_failed>
   84c28:	94009146 	bl	a9140 <EnterCritical>
   84c2c:	f9401e61 	ldr	x1, [x19, #56]
   84c30:	b9405260 	ldr	w0, [x19, #80]
   84c34:	a9037e61 	stp	x1, xzr, [x19, #48]
   84c38:	34fffc60 	cbz	w0, 84bc4 <CXHCIEndpoint::Transfer(CUSBRequest*, unsigned int)+0x124>
   84c3c:	94009171 	bl	a9200 <LeaveCritical>
   84c40:	17ffffe1 	b	84bc4 <CXHCIEndpoint::Transfer(CUSBRequest*, unsigned int)+0x124>
   84c44:	d503201f 	nop
   84c48:	d503201f 	nop
   84c4c:	d503201f 	nop

0000000000084c50 <CXHCIEndpoint::GetInputContextSetMaxPacketSize()>:
   84c50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   84c54:	910003fd 	mov	x29, sp
   84c58:	a90153f3 	stp	x19, x20, [sp, #16]
   84c5c:	aa0003f3 	mov	x19, x0
   84c60:	f9402400 	ldr	x0, [x0, #72]
   84c64:	b50003c0 	cbnz	x0, 84cdc <CXHCIEndpoint::GetInputContextSetMaxPacketSize()+0x8c>
   84c68:	d28283e0 	mov	x0, #0x141f                	// #5151
   84c6c:	94008d85 	bl	a8280 <operator new[](unsigned long)>
   84c70:	913ffc14 	add	x20, x0, #0xfff
   84c74:	f9002660 	str	x0, [x19, #72]
   84c78:	f9400261 	ldr	x1, [x19]
   84c7c:	9274ce94 	and	x20, x20, #0xfffffffffffff000
   84c80:	b40003a1 	cbz	x1, 84cf4 <CXHCIEndpoint::GetInputContextSetMaxPacketSize()+0xa4>
   84c84:	d2800402 	mov	x2, #0x20                  	// #32
   84c88:	52800001 	mov	w1, #0x0                   	// #0
   84c8c:	aa1403e0 	mov	x0, x20
   84c90:	94008ad6 	bl	a77e8 <memset>
   84c94:	f9400260 	ldr	x0, [x19]
   84c98:	94000b96 	bl	87af0 <CXHCIUSBDevice::GetDeviceContext()>
   84c9c:	aa0003e1 	mov	x1, x0
   84ca0:	d2808002 	mov	x2, #0x400                 	// #1024
   84ca4:	91008280 	add	x0, x20, #0x20
   84ca8:	94008ae8 	bl	a7848 <memcpy>
   84cac:	79405663 	ldrh	w3, [x19, #42]
   84cb0:	aa1403e2 	mov	x2, x20
   84cb4:	b21f03e4 	mov	x4, #0x200000002           	// #8589934594
   84cb8:	aa1403e0 	mov	x0, x20
   84cbc:	d2808401 	mov	x1, #0x420                 	// #1056
   84cc0:	f8040444 	str	x4, [x2], #64
   84cc4:	79000c43 	strh	w3, [x2, #6]
   84cc8:	94009232 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   84ccc:	aa1403e0 	mov	x0, x20
   84cd0:	a94153f3 	ldp	x19, x20, [sp, #16]
   84cd4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   84cd8:	d65f03c0 	ret
   84cdc:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   84ce0:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   84ce4:	9119a021 	add	x1, x1, #0x668
   84ce8:	911a8000 	add	x0, x0, #0x6a0
   84cec:	528041e2 	mov	w2, #0x20f                 	// #527
   84cf0:	94006414 	bl	9dd40 <assertion_failed>
   84cf4:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   84cf8:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   84cfc:	9119a021 	add	x1, x1, #0x668
   84d00:	91210000 	add	x0, x0, #0x840
   84d04:	528042c2 	mov	w2, #0x216                 	// #534
   84d08:	9400640e 	bl	9dd40 <assertion_failed>
   84d0c:	d503201f 	nop

0000000000084d10 <CXHCIEndpoint::SetMaxPacketSize(unsigned int)>:
   84d10:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   84d14:	910003fd 	mov	x29, sp
   84d18:	a90153f3 	stp	x19, x20, [sp, #16]
   84d1c:	f90013f5 	str	x21, [sp, #32]
   84d20:	3940b414 	ldrb	w20, [x0, #45]
   84d24:	7100069f 	cmp	w20, #0x1
   84d28:	54000581 	b.ne	84dd8 <CXHCIEndpoint::SetMaxPacketSize(unsigned int)+0xc8>  // b.any
   84d2c:	aa0003f3 	mov	x19, x0
   84d30:	f9400000 	ldr	x0, [x0]
   84d34:	2a0103f5 	mov	w21, w1
   84d38:	94000eae 	bl	887f0 <CUSBDevice::GetSpeed() const>
   84d3c:	7100041f 	cmp	w0, #0x1
   84d40:	54000421 	b.ne	84dc4 <CXHCIEndpoint::SetMaxPacketSize(unsigned int)+0xb4>  // b.any
   84d44:	510022a0 	sub	w0, w21, #0x8
   84d48:	7100e01f 	cmp	w0, #0x38
   84d4c:	54000528 	b.hi	84df0 <CXHCIEndpoint::SetMaxPacketSize(unsigned int)+0xe0>  // b.pmore
   84d50:	aa1303e0 	mov	x0, x19
   84d54:	79005675 	strh	w21, [x19, #42]
   84d58:	97ffffbe 	bl	84c50 <CXHCIEndpoint::GetInputContextSetMaxPacketSize()>
   84d5c:	aa0003f4 	mov	x20, x0
   84d60:	b4000540 	cbz	x0, 84e08 <CXHCIEndpoint::SetMaxPacketSize(unsigned int)+0xf8>
   84d64:	f9400660 	ldr	x0, [x19, #8]
   84d68:	b40005c0 	cbz	x0, 84e20 <CXHCIEndpoint::SetMaxPacketSize(unsigned int)+0x110>
   84d6c:	f9400261 	ldr	x1, [x19]
   84d70:	b4000641 	cbz	x1, 84e38 <CXHCIEndpoint::SetMaxPacketSize(unsigned int)+0x128>
   84d74:	97fff9e7 	bl	83510 <CXHCIDevice::GetCommandManager()>
   84d78:	aa0003f5 	mov	x21, x0
   84d7c:	f9400260 	ldr	x0, [x19]
   84d80:	94000b4c 	bl	87ab0 <CXHCIUSBDevice::GetSlotID() const>
   84d84:	2a0003e1 	mov	w1, w0
   84d88:	aa1403e2 	mov	x2, x20
   84d8c:	aa1503e0 	mov	x0, x21
   84d90:	94003b3c 	bl	93a80 <CXHCICommandManager::EvaluateContext(unsigned char, TXHCIInputContext*)>
   84d94:	f9402661 	ldr	x1, [x19, #72]
   84d98:	2a0003f4 	mov	w20, w0
   84d9c:	b40005a1 	cbz	x1, 84e50 <CXHCIEndpoint::SetMaxPacketSize(unsigned int)+0x140>
   84da0:	aa0103e0 	mov	x0, x1
   84da4:	94008d4b 	bl	a82d0 <operator delete[](void*)>
   84da8:	7100069f 	cmp	w20, #0x1
   84dac:	1a9f17e0 	cset	w0, eq	// eq = none
   84db0:	f900267f 	str	xzr, [x19, #72]
   84db4:	a94153f3 	ldp	x19, x20, [sp, #16]
   84db8:	f94013f5 	ldr	x21, [sp, #32]
   84dbc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84dc0:	d65f03c0 	ret
   84dc4:	2a1403e0 	mov	w0, w20
   84dc8:	a94153f3 	ldp	x19, x20, [sp, #16]
   84dcc:	f94013f5 	ldr	x21, [sp, #32]
   84dd0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84dd4:	d65f03c0 	ret
   84dd8:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   84ddc:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   84de0:	9119a021 	add	x1, x1, #0x668
   84de4:	9122e000 	add	x0, x0, #0x8b8
   84de8:	52801702 	mov	w2, #0xb8                  	// #184
   84dec:	940063d5 	bl	9dd40 <assertion_failed>
   84df0:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   84df4:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   84df8:	9119a021 	add	x1, x1, #0x668
   84dfc:	91234000 	add	x0, x0, #0x8d0
   84e00:	528017c2 	mov	w2, #0xbe                  	// #190
   84e04:	940063cf 	bl	9dd40 <assertion_failed>
   84e08:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   84e0c:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   84e10:	9119a021 	add	x1, x1, #0x668
   84e14:	91240000 	add	x0, x0, #0x900
   84e18:	52801842 	mov	w2, #0xc2                  	// #194
   84e1c:	940063c9 	bl	9dd40 <assertion_failed>
   84e20:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   84e24:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   84e28:	9119a021 	add	x1, x1, #0x668
   84e2c:	91246000 	add	x0, x0, #0x918
   84e30:	52801882 	mov	w2, #0xc4                  	// #196
   84e34:	940063c3 	bl	9dd40 <assertion_failed>
   84e38:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   84e3c:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   84e40:	9119a021 	add	x1, x1, #0x668
   84e44:	91210000 	add	x0, x0, #0x840
   84e48:	528018a2 	mov	w2, #0xc5                  	// #197
   84e4c:	940063bd 	bl	9dd40 <assertion_failed>
   84e50:	b0000161 	adrp	x1, b1000 <_etext+0x158>
   84e54:	b0000160 	adrp	x0, b1000 <_etext+0x158>
   84e58:	9119a021 	add	x1, x1, #0x668
   84e5c:	9124c000 	add	x0, x0, #0x930
   84e60:	52804ce2 	mov	w2, #0x267                 	// #615
   84e64:	940063b7 	bl	9dd40 <assertion_failed>
   84e68:	d503201f 	nop
   84e6c:	d503201f 	nop

0000000000084e70 <CXHCIEndpoint::GetInputContextConfigureEndpoint()>:
   84e70:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   84e74:	910003fd 	mov	x29, sp
   84e78:	a90153f3 	stp	x19, x20, [sp, #16]
   84e7c:	aa0003f4 	mov	x20, x0
   84e80:	a9025bf5 	stp	x21, x22, [sp, #32]
   84e84:	f9402400 	ldr	x0, [x0, #72]
   84e88:	b5000c80 	cbnz	x0, 85018 <CXHCIEndpoint::GetInputContextConfigureEndpoint()+0x1a8>
   84e8c:	d28283e0 	mov	x0, #0x141f                	// #5151
   84e90:	94008cfc 	bl	a8280 <operator new[](unsigned long)>
   84e94:	913ffc13 	add	x19, x0, #0xfff
   84e98:	d2808402 	mov	x2, #0x420                 	// #1056
   84e9c:	f9002680 	str	x0, [x20, #72]
   84ea0:	9274ce73 	and	x19, x19, #0xfffffffffffff000
   84ea4:	52800001 	mov	w1, #0x0                   	// #0
   84ea8:	aa1303e0 	mov	x0, x19
   84eac:	94008a4f 	bl	a77e8 <memset>
   84eb0:	3940b695 	ldrb	w21, [x20, #45]
   84eb4:	510006b6 	sub	w22, w21, #0x1
   84eb8:	12001ec0 	and	w0, w22, #0xff
   84ebc:	7100781f 	cmp	w0, #0x1e
   84ec0:	54000b88 	b.hi	85030 <CXHCIEndpoint::GetInputContextConfigureEndpoint()+0x1c0>  // b.pmore
   84ec4:	52800021 	mov	w1, #0x1                   	// #1
   84ec8:	f9401280 	ldr	x0, [x20, #32]
   84ecc:	1ad52021 	lsl	w1, w1, w21
   84ed0:	29000661 	stp	w1, w1, [x19]
   84ed4:	b4000ba0 	cbz	x0, 85048 <CXHCIEndpoint::GetInputContextConfigureEndpoint()+0x1d8>
   84ed8:	9400044e 	bl	86010 <CXHCIRing::GetFirstTRB()>
   84edc:	b00001c1 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   84ee0:	93407ed6 	sxtw	x22, w22
   84ee4:	3940ba82 	ldrb	w2, [x20, #46]
   84ee8:	d37b1eb5 	ubfiz	x21, x21, #5, #8
   84eec:	928f8005 	mov	x5, #0xffffffffffff83ff    	// #-31745
   84ef0:	f9417426 	ldr	x6, [x1, #744]
   84ef4:	91000ac1 	add	x1, x22, #0x2
   84ef8:	8b150275 	add	x21, x19, x21
   84efc:	d37be821 	lsl	x1, x1, #5
   84f00:	f2dfff25 	movk	x5, #0xfff9, lsl #32
   84f04:	8b010263 	add	x3, x19, x1
   84f08:	79405684 	ldrh	w4, [x20, #42]
   84f0c:	71001c5f 	cmp	w2, #0x7
   84f10:	aa060000 	orr	x0, x0, x6
   84f14:	b2400000 	orr	x0, x0, #0x1
   84f18:	f90016a0 	str	x0, [x21, #40]
   84f1c:	b9400460 	ldr	w0, [x3, #4]
   84f20:	331d0840 	bfi	w0, w2, #3, #3
   84f24:	33103c80 	bfi	w0, w4, #16, #16
   84f28:	b9000460 	str	w0, [x3, #4]
   84f2c:	390096bf 	strb	wzr, [x21, #37]
   84f30:	f8616a60 	ldr	x0, [x19, x1]
   84f34:	8a050000 	and	x0, x0, x5
   84f38:	b25f0400 	orr	x0, x0, #0x600000000
   84f3c:	f8216a60 	str	x0, [x19, x1]
   84f40:	54000908 	b.hi	85060 <CXHCIEndpoint::GetInputContextConfigureEndpoint()+0x1f0>  // b.pmore
   84f44:	d2800020 	mov	x0, #0x1                   	// #1
   84f48:	d2800441 	mov	x1, #0x22                  	// #34
   84f4c:	9ac22000 	lsl	x0, x0, x2
   84f50:	ea01001f 	tst	x0, x1
   84f54:	54000261 	b.ne	84fa0 <CXHCIEndpoint::GetInputContextConfigureEndpoint()+0x130>  // b.any
   84f58:	d2801101 	mov	x1, #0x88                  	// #136
   84f5c:	ea01001f 	tst	x0, x1
   84f60:	540003e1 	b.ne	84fdc <CXHCIEndpoint::GetInputContextConfigureEndpoint()+0x16c>  // b.any
   84f64:	d2800881 	mov	x1, #0x44                  	// #68
   84f68:	ea01001f 	tst	x0, x1
   84f6c:	540007a0 	b.eq	85060 <CXHCIEndpoint::GetInputContextConfigureEndpoint()+0x1f0>  // b.none
   84f70:	8b161676 	add	x22, x19, x22, lsl #5
   84f74:	d2808401 	mov	x1, #0x420                 	// #1056
   84f78:	b94052c0 	ldr	w0, [x22, #80]
   84f7c:	72802000 	movk	w0, #0x100
   84f80:	b90052c0 	str	w0, [x22, #80]
   84f84:	aa1303e0 	mov	x0, x19
   84f88:	94009182 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   84f8c:	aa1303e0 	mov	x0, x19
   84f90:	a94153f3 	ldp	x19, x20, [sp, #16]
   84f94:	a9425bf5 	ldp	x21, x22, [sp, #32]
   84f98:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84f9c:	d65f03c0 	ret
   84fa0:	3940b280 	ldrb	w0, [x20, #44]
   84fa4:	8b161676 	add	x22, x19, x22, lsl #5
   84fa8:	d2808401 	mov	x1, #0x420                 	// #1056
   84fac:	39008aa0 	strb	w0, [x21, #34]
   84fb0:	b94052c0 	ldr	w0, [x22, #80]
   84fb4:	33003c80 	bfxil	w0, w4, #0, #16
   84fb8:	33103c80 	bfi	w0, w4, #16, #16
   84fbc:	b90052c0 	str	w0, [x22, #80]
   84fc0:	aa1303e0 	mov	x0, x19
   84fc4:	94009173 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   84fc8:	aa1303e0 	mov	x0, x19
   84fcc:	a94153f3 	ldp	x19, x20, [sp, #16]
   84fd0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   84fd4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   84fd8:	d65f03c0 	ret
   84fdc:	3940b280 	ldrb	w0, [x20, #44]
   84fe0:	8b161676 	add	x22, x19, x22, lsl #5
   84fe4:	d2808401 	mov	x1, #0x420                 	// #1056
   84fe8:	39008aa0 	strb	w0, [x21, #34]
   84fec:	b94052c0 	ldr	w0, [x22, #80]
   84ff0:	72800200 	movk	w0, #0x10
   84ff4:	33103c80 	bfi	w0, w4, #16, #16
   84ff8:	b90052c0 	str	w0, [x22, #80]
   84ffc:	aa1303e0 	mov	x0, x19
   85000:	94009164 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   85004:	aa1303e0 	mov	x0, x19
   85008:	a94153f3 	ldp	x19, x20, [sp, #16]
   8500c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   85010:	a8c37bfd 	ldp	x29, x30, [sp], #48
   85014:	d65f03c0 	ret
   85018:	90000161 	adrp	x1, b1000 <_etext+0x158>
   8501c:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85020:	9119a021 	add	x1, x1, #0x668
   85024:	911a8000 	add	x0, x0, #0x6a0
   85028:	52804562 	mov	w2, #0x22b                 	// #555
   8502c:	94006345 	bl	9dd40 <assertion_failed>
   85030:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85034:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85038:	9119a021 	add	x1, x1, #0x668
   8503c:	91214000 	add	x0, x0, #0x850
   85040:	528046a2 	mov	w2, #0x235                 	// #565
   85044:	9400633f 	bl	9dd40 <assertion_failed>
   85048:	90000161 	adrp	x1, b1000 <_etext+0x158>
   8504c:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85050:	9119a021 	add	x1, x1, #0x668
   85054:	911b0000 	add	x0, x0, #0x6c0
   85058:	52804782 	mov	w2, #0x23c                 	// #572
   8505c:	94006339 	bl	9dd40 <assertion_failed>
   85060:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85064:	b0000160 	adrp	x0, b2000 <_etext+0x1158>
   85068:	9119a021 	add	x1, x1, #0x668
   8506c:	910ba000 	add	x0, x0, #0x2e8
   85070:	52804b82 	mov	w2, #0x25c                 	// #604
   85074:	94006333 	bl	9dd40 <assertion_failed>
   85078:	d503201f 	nop
   8507c:	d503201f 	nop

0000000000085080 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)>:
   85080:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   85084:	910003fd 	mov	x29, sp
   85088:	a90153f3 	stp	x19, x20, [sp, #16]
   8508c:	aa0003f3 	mov	x19, x0
   85090:	aa0303e0 	mov	x0, x3
   85094:	aa0203f4 	mov	x20, x2
   85098:	a9025bf5 	stp	x21, x22, [sp, #32]
   8509c:	aa0303f5 	mov	x21, x3
   850a0:	52800036 	mov	w22, #0x1                   	// #1
   850a4:	a9000e61 	stp	x1, x3, [x19]
   850a8:	97fff902 	bl	834b0 <CXHCIDevice::GetMMIOSpace()>
   850ac:	aa0003e2 	mov	x2, x0
   850b0:	52800021 	mov	w1, #0x1                   	// #1
   850b4:	39006276 	strb	w22, [x19, #24]
   850b8:	d2800500 	mov	x0, #0x28                  	// #40
   850bc:	f900127f 	str	xzr, [x19, #32]
   850c0:	f9000a62 	str	x2, [x19, #16]
   850c4:	3900b67f 	strb	wzr, [x19, #45]
   850c8:	3900ba7f 	strb	wzr, [x19, #46]
   850cc:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   850d0:	39010276 	strb	w22, [x19, #64]
   850d4:	f900267f 	str	xzr, [x19, #72]
   850d8:	b9005261 	str	w1, [x19, #80]
   850dc:	94008c61 	bl	a8260 <operator new(unsigned long)>
   850e0:	aa1503e3 	mov	x3, x21
   850e4:	52800802 	mov	w2, #0x40                  	// #64
   850e8:	aa0003f5 	mov	x21, x0
   850ec:	52800001 	mov	w1, #0x0                   	// #0
   850f0:	94000360 	bl	85e70 <CXHCIRing::CXHCIRing(TXHCIRingType, unsigned int, CXHCIDevice*)>
   850f4:	aa1503e0 	mov	x0, x21
   850f8:	f9001275 	str	x21, [x19, #32]
   850fc:	940003b5 	bl	85fd0 <CXHCIRing::IsValid() const>
   85100:	72001c1f 	tst	w0, #0xff
   85104:	540007a0 	b.eq	851f8 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x178>  // b.none
   85108:	b4000df4 	cbz	x20, 852c4 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x244>
   8510c:	39400280 	ldrb	w0, [x20]
   85110:	7100181f 	cmp	w0, #0x6
   85114:	54000f49 	b.ls	852fc <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x27c>  // b.plast
   85118:	39400680 	ldrb	w0, [x20, #1]
   8511c:	7100141f 	cmp	w0, #0x5
   85120:	54000a41 	b.ne	85268 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x1e8>  // b.any
   85124:	39400a81 	ldrb	w1, [x20, #2]
   85128:	39400e82 	ldrb	w2, [x20, #3]
   8512c:	f9400260 	ldr	x0, [x19]
   85130:	3900a261 	strb	w1, [x19, #40]
   85134:	3900a662 	strb	w2, [x19, #41]
   85138:	39401283 	ldrb	w3, [x20, #4]
   8513c:	39401681 	ldrb	w1, [x20, #5]
   85140:	aa012061 	orr	x1, x3, x1, lsl #8
   85144:	12002821 	and	w1, w1, #0x7ff
   85148:	79005661 	strh	w1, [x19, #42]
   8514c:	b4000e40 	cbz	x0, 85314 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x294>
   85150:	37000982 	tbnz	w2, #0, 85280 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x200>
   85154:	3900b27f 	strb	wzr, [x19, #44]
   85158:	94000da6 	bl	887f0 <CUSBDevice::GetSpeed() const>
   8515c:	350000a0 	cbnz	w0, 85170 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0xf0>
   85160:	3940a660 	ldrb	w0, [x19, #41]
   85164:	12000400 	and	w0, w0, #0x3
   85168:	7100081f 	cmp	w0, #0x2
   8516c:	540006a0 	b.eq	85240 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x1c0>  // b.none
   85170:	3940a262 	ldrb	w2, [x19, #40]
   85174:	72000c40 	ands	w0, w2, #0xf
   85178:	54000da0 	b.eq	8532c <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x2ac>  // b.none
   8517c:	531f1803 	ubfiz	w3, w0, #1, #7
   85180:	531f7801 	lsl	w1, w0, #1
   85184:	3940a660 	ldrb	w0, [x19, #41]
   85188:	3900b663 	strb	w3, [x19, #45]
   8518c:	37380402 	tbnz	w2, #7, 8520c <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x18c>
   85190:	12000400 	and	w0, w0, #0x3
   85194:	3900ba60 	strb	w0, [x19, #46]
   85198:	34000400 	cbz	w0, 85218 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x198>
   8519c:	aa1303e0 	mov	x0, x19
   851a0:	97ffff34 	bl	84e70 <CXHCIEndpoint::GetInputContextConfigureEndpoint()>
   851a4:	aa0003f4 	mov	x20, x0
   851a8:	b4000ce0 	cbz	x0, 85344 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x2c4>
   851ac:	f9400660 	ldr	x0, [x19, #8]
   851b0:	b4000d60 	cbz	x0, 8535c <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x2dc>
   851b4:	97fff8d7 	bl	83510 <CXHCIDevice::GetCommandManager()>
   851b8:	aa0003f5 	mov	x21, x0
   851bc:	f9400260 	ldr	x0, [x19]
   851c0:	94000a3c 	bl	87ab0 <CXHCIUSBDevice::GetSlotID() const>
   851c4:	2a0003e1 	mov	w1, w0
   851c8:	aa1403e2 	mov	x2, x20
   851cc:	aa1503e0 	mov	x0, x21
   851d0:	52800003 	mov	w3, #0x0                   	// #0
   851d4:	94003a07 	bl	939f0 <CXHCICommandManager::ConfigureEndpoint(unsigned char, TXHCIInputContext*, bool)>
   851d8:	f9402661 	ldr	x1, [x19, #72]
   851dc:	2a0003f4 	mov	w20, w0
   851e0:	b4000ca1 	cbz	x1, 85374 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x2f4>
   851e4:	aa0103e0 	mov	x0, x1
   851e8:	94008c3a 	bl	a82d0 <operator delete[](void*)>
   851ec:	7100069f 	cmp	w20, #0x1
   851f0:	f900267f 	str	xzr, [x19, #72]
   851f4:	54000180 	b.eq	85224 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x1a4>  // b.none
   851f8:	3900627f 	strb	wzr, [x19, #24]
   851fc:	a94153f3 	ldp	x19, x20, [sp, #16]
   85200:	a9425bf5 	ldp	x21, x22, [sp, #32]
   85204:	a8c37bfd 	ldp	x29, x30, [sp], #48
   85208:	d65f03c0 	ret
   8520c:	11000421 	add	w1, w1, #0x1
   85210:	12000400 	and	w0, w0, #0x3
   85214:	3900b661 	strb	w1, [x19, #45]
   85218:	11001000 	add	w0, w0, #0x4
   8521c:	3900ba60 	strb	w0, [x19, #46]
   85220:	17ffffdf 	b	8519c <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x11c>
   85224:	aa1303e2 	mov	x2, x19
   85228:	3940b661 	ldrb	w1, [x19, #45]
   8522c:	a94153f3 	ldp	x19, x20, [sp, #16]
   85230:	a9425bf5 	ldp	x21, x22, [sp, #32]
   85234:	a8c37bfd 	ldp	x29, x30, [sp], #48
   85238:	f9400040 	ldr	x0, [x2]
   8523c:	14000a39 	b	87b20 <CXHCIUSBDevice::RegisterEndpoint(unsigned char, CXHCIEndpoint*)>
   85240:	79405660 	ldrh	w0, [x19, #42]
   85244:	52800061 	mov	w1, #0x3                   	// #3
   85248:	3900a661 	strb	w1, [x19, #41]
   8524c:	7100201f 	cmp	w0, #0x8
   85250:	54000069 	b.ls	8525c <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x1dc>  // b.plast
   85254:	52800100 	mov	w0, #0x8                   	// #8
   85258:	79005660 	strh	w0, [x19, #42]
   8525c:	52800060 	mov	w0, #0x3                   	// #3
   85260:	3900b260 	strb	w0, [x19, #44]
   85264:	17ffffc3 	b	85170 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0xf0>
   85268:	90000161 	adrp	x1, b1000 <_etext+0x158>
   8526c:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85270:	9119a021 	add	x1, x1, #0x668
   85274:	91260000 	add	x0, x0, #0x980
   85278:	52800ae2 	mov	w2, #0x57                  	// #87
   8527c:	940062b1 	bl	9dd40 <assertion_failed>
   85280:	39401a94 	ldrb	w20, [x20, #6]
   85284:	94000d5b 	bl	887f0 <CUSBDevice::GetSpeed() const>
   85288:	7100041f 	cmp	w0, #0x1
   8528c:	5400028c 	b.gt	852dc <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x25c>
   85290:	52807d01 	mov	w1, #0x3e8                 	// #1000
   85294:	52800060 	mov	w0, #0x3                   	// #3
   85298:	52800fa3 	mov	w3, #0x7d                  	// #125
   8529c:	1b017e81 	mul	w1, w20, w1
   852a0:	1ac02062 	lsl	w2, w3, w0
   852a4:	6b01005f 	cmp	w2, w1
   852a8:	5400072a 	b.ge	8538c <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x30c>  // b.tcont
   852ac:	11000400 	add	w0, w0, #0x1
   852b0:	71002c1f 	cmp	w0, #0xb
   852b4:	54ffff61 	b.ne	852a0 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x220>  // b.any
   852b8:	3900b260 	strb	w0, [x19, #44]
   852bc:	f9400260 	ldr	x0, [x19]
   852c0:	17ffffa6 	b	85158 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0xd8>
   852c4:	90000161 	adrp	x1, b1000 <_etext+0x158>
   852c8:	90000160 	adrp	x0, b1000 <_etext+0x158>
   852cc:	9119a021 	add	x1, x1, #0x668
   852d0:	91254000 	add	x0, x0, #0x950
   852d4:	52800aa2 	mov	w2, #0x55                  	// #85
   852d8:	9400629a 	bl	9dd40 <assertion_failed>
   852dc:	7100429f 	cmp	w20, #0x10
   852e0:	52800200 	mov	w0, #0x10                  	// #16
   852e4:	1a809281 	csel	w1, w20, w0, ls	// ls = plast
   852e8:	72001c3f 	tst	w1, #0xff
   852ec:	1a961021 	csel	w1, w1, w22, ne	// ne = any
   852f0:	51000421 	sub	w1, w1, #0x1
   852f4:	12001c20 	and	w0, w1, #0xff
   852f8:	17fffff0 	b	852b8 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x238>
   852fc:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85300:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85304:	9119a021 	add	x1, x1, #0x668
   85308:	91258000 	add	x0, x0, #0x960
   8530c:	52800ac2 	mov	w2, #0x56                  	// #86
   85310:	9400628c 	bl	9dd40 <assertion_failed>
   85314:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85318:	90000160 	adrp	x0, b1000 <_etext+0x158>
   8531c:	9119a021 	add	x1, x1, #0x668
   85320:	91210000 	add	x0, x0, #0x840
   85324:	52800ba2 	mov	w2, #0x5d                  	// #93
   85328:	94006286 	bl	9dd40 <assertion_failed>
   8532c:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85330:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85334:	9119a021 	add	x1, x1, #0x668
   85338:	9126c000 	add	x0, x0, #0x9b0
   8533c:	52800ee2 	mov	w2, #0x77                  	// #119
   85340:	94006280 	bl	9dd40 <assertion_failed>
   85344:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85348:	90000160 	adrp	x0, b1000 <_etext+0x158>
   8534c:	9119a021 	add	x1, x1, #0x668
   85350:	91240000 	add	x0, x0, #0x900
   85354:	52801102 	mov	w2, #0x88                  	// #136
   85358:	9400627a 	bl	9dd40 <assertion_failed>
   8535c:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85360:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85364:	9119a021 	add	x1, x1, #0x668
   85368:	91246000 	add	x0, x0, #0x918
   8536c:	52801142 	mov	w2, #0x8a                  	// #138
   85370:	94006274 	bl	9dd40 <assertion_failed>
   85374:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85378:	90000160 	adrp	x0, b1000 <_etext+0x158>
   8537c:	9119a021 	add	x1, x1, #0x668
   85380:	9124c000 	add	x0, x0, #0x930
   85384:	52804ce2 	mov	w2, #0x267                 	// #615
   85388:	9400626e 	bl	9dd40 <assertion_failed>
   8538c:	12001c00 	and	w0, w0, #0xff
   85390:	17ffffca 	b	852b8 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)+0x238>
   85394:	d503201f 	nop
   85398:	d503201f 	nop
   8539c:	d503201f 	nop

00000000000853a0 <CXHCIEndpoint::FreeInputContext()>:
   853a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   853a4:	910003fd 	mov	x29, sp
   853a8:	f9000bf3 	str	x19, [sp, #16]
   853ac:	aa0003f3 	mov	x19, x0
   853b0:	f9402400 	ldr	x0, [x0, #72]
   853b4:	b40000c0 	cbz	x0, 853cc <CXHCIEndpoint::FreeInputContext()+0x2c>
   853b8:	94008bc6 	bl	a82d0 <operator delete[](void*)>
   853bc:	f900267f 	str	xzr, [x19, #72]
   853c0:	f9400bf3 	ldr	x19, [sp, #16]
   853c4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   853c8:	d65f03c0 	ret
   853cc:	90000161 	adrp	x1, b1000 <_etext+0x158>
   853d0:	90000160 	adrp	x0, b1000 <_etext+0x158>
   853d4:	9119a021 	add	x1, x1, #0x668
   853d8:	9124c000 	add	x0, x0, #0x930
   853dc:	52804ce2 	mov	w2, #0x267                 	// #615
   853e0:	94006258 	bl	9dd40 <assertion_failed>
   853e4:	d503201f 	nop
   853e8:	d503201f 	nop
   853ec:	d503201f 	nop

00000000000853f0 <CXHCIEndpoint::ConvertInterval(unsigned char, TUSBSpeed)>:
   853f0:	7100043f 	cmp	w1, #0x1
   853f4:	12001c02 	and	w2, w0, #0xff
   853f8:	540001ac 	b.gt	8542c <CXHCIEndpoint::ConvertInterval(unsigned char, TUSBSpeed)+0x3c>
   853fc:	52807d01 	mov	w1, #0x3e8                 	// #1000
   85400:	52800060 	mov	w0, #0x3                   	// #3
   85404:	52800fa3 	mov	w3, #0x7d                  	// #125
   85408:	1b017c41 	mul	w1, w2, w1
   8540c:	d503201f 	nop
   85410:	1ac02062 	lsl	w2, w3, w0
   85414:	6b01005f 	cmp	w2, w1
   85418:	540001aa 	b.ge	8544c <CXHCIEndpoint::ConvertInterval(unsigned char, TUSBSpeed)+0x5c>  // b.tcont
   8541c:	11000400 	add	w0, w0, #0x1
   85420:	71002c1f 	cmp	w0, #0xb
   85424:	54ffff61 	b.ne	85410 <CXHCIEndpoint::ConvertInterval(unsigned char, TUSBSpeed)+0x20>  // b.any
   85428:	d65f03c0 	ret
   8542c:	7100405f 	cmp	w2, #0x10
   85430:	52800200 	mov	w0, #0x10                  	// #16
   85434:	1a809041 	csel	w1, w2, w0, ls	// ls = plast
   85438:	72001c3f 	tst	w1, #0xff
   8543c:	1a9f1421 	csinc	w1, w1, wzr, ne	// ne = any
   85440:	51000421 	sub	w1, w1, #0x1
   85444:	12001c20 	and	w0, w1, #0xff
   85448:	d65f03c0 	ret
   8544c:	12001c00 	and	w0, w0, #0xff
   85450:	d65f03c0 	ret
	...

0000000000085460 <CXHCIEventManager::CXHCIEventManager(CXHCIDevice*)>:
   85460:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   85464:	910003fd 	mov	x29, sp
   85468:	a90153f3 	stp	x19, x20, [sp, #16]
   8546c:	aa0003f3 	mov	x19, x0
   85470:	aa0103e0 	mov	x0, x1
   85474:	aa0103f4 	mov	x20, x1
   85478:	a9025bf5 	stp	x21, x22, [sp, #32]
   8547c:	91004275 	add	x21, x19, #0x10
   85480:	f9000261 	str	x1, [x19]
   85484:	97fff80b 	bl	834b0 <CXHCIDevice::GetMMIOSpace()>
   85488:	aa0003e4 	mov	x4, x0
   8548c:	aa1403e3 	mov	x3, x20
   85490:	aa1503e0 	mov	x0, x21
   85494:	52802002 	mov	w2, #0x100                 	// #256
   85498:	52800021 	mov	w1, #0x1                   	// #1
   8549c:	f9000664 	str	x4, [x19, #8]
   854a0:	94000274 	bl	85e70 <CXHCIRing::CXHCIRing(TXHCIRingType, unsigned int, CXHCIDevice*)>
   854a4:	aa1503e0 	mov	x0, x21
   854a8:	f9001e7f 	str	xzr, [x19, #56]
   854ac:	940002c9 	bl	85fd0 <CXHCIRing::IsValid() const>
   854b0:	72001c1f 	tst	w0, #0xff
   854b4:	54000ae0 	b.eq	85610 <CXHCIEventManager::CXHCIEventManager(CXHCIDevice*)+0x1b0>  // b.none
   854b8:	f9400260 	ldr	x0, [x19]
   854bc:	b4000b20 	cbz	x0, 85620 <CXHCIEventManager::CXHCIEventManager(CXHCIDevice*)+0x1c0>
   854c0:	d2820003 	mov	x3, #0x1000                	// #4096
   854c4:	d2800802 	mov	x2, #0x40                  	// #64
   854c8:	d2800201 	mov	x1, #0x10                  	// #16
   854cc:	97fff829 	bl	83570 <CXHCIDevice::AllocateSharedMem(unsigned long, unsigned long, unsigned long)>
   854d0:	f9001e60 	str	x0, [x19, #56]
   854d4:	b40009e0 	cbz	x0, 85610 <CXHCIEventManager::CXHCIEventManager(CXHCIDevice*)+0x1b0>
   854d8:	aa1503e0 	mov	x0, x21
   854dc:	900001d6 	adrp	x22, bd000 <CNetDevice::s_SpeedString+0x18>
   854e0:	940002cc 	bl	86010 <CXHCIRing::GetFirstTRB()>
   854e4:	f94176c2 	ldr	x2, [x22, #744]
   854e8:	aa0003e1 	mov	x1, x0
   854ec:	aa1503e0 	mov	x0, x21
   854f0:	f9401e74 	ldr	x20, [x19, #56]
   854f4:	aa020021 	orr	x1, x1, x2
   854f8:	53187c25 	lsr	w5, w1, #24
   854fc:	d3609c24 	ubfx	x4, x1, #32, #8
   85500:	d368bc23 	ubfx	x3, x1, #40, #8
   85504:	d370dc22 	ubfx	x2, x1, #48, #8
   85508:	39000281 	strb	w1, [x20]
   8550c:	53083c27 	ubfx	w7, w1, #8, #8
   85510:	53105c26 	ubfx	w6, w1, #16, #8
   85514:	39000e85 	strb	w5, [x20, #3]
   85518:	d378fc21 	lsr	x1, x1, #56
   8551c:	39001284 	strb	w4, [x20, #4]
   85520:	39000687 	strb	w7, [x20, #1]
   85524:	39000a86 	strb	w6, [x20, #2]
   85528:	39001683 	strb	w3, [x20, #5]
   8552c:	39001a82 	strb	w2, [x20, #6]
   85530:	39001e81 	strb	w1, [x20, #7]
   85534:	940002ab 	bl	85fe0 <CXHCIRing::GetTRBCount() const>
   85538:	f9401e62 	ldr	x2, [x19, #56]
   8553c:	2a0003e1 	mov	w1, w0
   85540:	53187c03 	lsr	w3, w0, #24
   85544:	d3483c25 	ubfx	x5, x1, #8, #8
   85548:	d3505c24 	ubfx	x4, x1, #16, #8
   8554c:	f9400660 	ldr	x0, [x19, #8]
   85550:	39002281 	strb	w1, [x20, #8]
   85554:	39002685 	strb	w5, [x20, #9]
   85558:	39002a84 	strb	w4, [x20, #10]
   8555c:	39002e83 	strb	w3, [x20, #11]
   85560:	3900305f 	strb	wzr, [x2, #12]
   85564:	3900345f 	strb	wzr, [x2, #13]
   85568:	3900385f 	strb	wzr, [x2, #14]
   8556c:	39003c5f 	strb	wzr, [x2, #15]
   85570:	b4000640 	cbz	x0, 85638 <CXHCIEventManager::CXHCIEventManager(CXHCIDevice*)+0x1d8>
   85574:	52800023 	mov	w3, #0x1                   	// #1
   85578:	52800102 	mov	w2, #0x8                   	// #8
   8557c:	52800001 	mov	w1, #0x0                   	// #0
   85580:	940001ac 	bl	85c30 <CXHCIMMIOSpace::rt_write32(unsigned int, unsigned int, unsigned int)>
   85584:	f94176c3 	ldr	x3, [x22, #744]
   85588:	52800202 	mov	w2, #0x10                  	// #16
   8558c:	52800001 	mov	w1, #0x0                   	// #0
   85590:	f9401e64 	ldr	x4, [x19, #56]
   85594:	f9400660 	ldr	x0, [x19, #8]
   85598:	aa030083 	orr	x3, x4, x3
   8559c:	940001c9 	bl	85cc0 <CXHCIMMIOSpace::rt_write64(unsigned int, unsigned int, unsigned long)>
   855a0:	aa1503e0 	mov	x0, x21
   855a4:	f9400674 	ldr	x20, [x19, #8]
   855a8:	9400029a 	bl	86010 <CXHCIRing::GetFirstTRB()>
   855ac:	f94176c3 	ldr	x3, [x22, #744]
   855b0:	aa0003e4 	mov	x4, x0
   855b4:	52800302 	mov	w2, #0x18                  	// #24
   855b8:	52800001 	mov	w1, #0x0                   	// #0
   855bc:	aa1403e0 	mov	x0, x20
   855c0:	aa030083 	orr	x3, x4, x3
   855c4:	940001bf 	bl	85cc0 <CXHCIMMIOSpace::rt_write64(unsigned int, unsigned int, unsigned long)>
   855c8:	52803e83 	mov	w3, #0x1f4                 	// #500
   855cc:	52800082 	mov	w2, #0x4                   	// #4
   855d0:	f9400660 	ldr	x0, [x19, #8]
   855d4:	52800001 	mov	w1, #0x0                   	// #0
   855d8:	94000196 	bl	85c30 <CXHCIMMIOSpace::rt_write32(unsigned int, unsigned int, unsigned int)>
   855dc:	f9400673 	ldr	x19, [x19, #8]
   855e0:	52800002 	mov	w2, #0x0                   	// #0
   855e4:	52800001 	mov	w1, #0x0                   	// #0
   855e8:	aa1303e0 	mov	x0, x19
   855ec:	94000139 	bl	85ad0 <CXHCIMMIOSpace::rt_read32(unsigned int, unsigned int)>
   855f0:	321f0003 	orr	w3, w0, #0x2
   855f4:	52800002 	mov	w2, #0x0                   	// #0
   855f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   855fc:	aa1303e0 	mov	x0, x19
   85600:	52800001 	mov	w1, #0x0                   	// #0
   85604:	a94153f3 	ldp	x19, x20, [sp, #16]
   85608:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8560c:	14000189 	b	85c30 <CXHCIMMIOSpace::rt_write32(unsigned int, unsigned int, unsigned int)>
   85610:	a94153f3 	ldp	x19, x20, [sp, #16]
   85614:	a9425bf5 	ldp	x21, x22, [sp, #32]
   85618:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8561c:	d65f03c0 	ret
   85620:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85624:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85628:	91276021 	add	x1, x1, #0x9d8
   8562c:	91246000 	add	x0, x0, #0x918
   85630:	528004c2 	mov	w2, #0x26                  	// #38
   85634:	940061c3 	bl	9dd40 <assertion_failed>
   85638:	90000161 	adrp	x1, b1000 <_etext+0x158>
   8563c:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85640:	91276021 	add	x1, x1, #0x9d8
   85644:	9127c000 	add	x0, x0, #0x9f0
   85648:	52800622 	mov	w2, #0x31                  	// #49
   8564c:	940061bd 	bl	9dd40 <assertion_failed>

0000000000085650 <CXHCIEventManager::~CXHCIEventManager()>:
   85650:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85654:	910003fd 	mov	x29, sp
   85658:	a90153f3 	stp	x19, x20, [sp, #16]
   8565c:	aa0003f3 	mov	x19, x0
   85660:	f9401c00 	ldr	x0, [x0, #56]
   85664:	b4000220 	cbz	x0, 856a8 <CXHCIEventManager::~CXHCIEventManager()+0x58>
   85668:	f9400674 	ldr	x20, [x19, #8]
   8566c:	b40002b4 	cbz	x20, 856c0 <CXHCIEventManager::~CXHCIEventManager()+0x70>
   85670:	52800002 	mov	w2, #0x0                   	// #0
   85674:	52800001 	mov	w1, #0x0                   	// #0
   85678:	aa1403e0 	mov	x0, x20
   8567c:	94000115 	bl	85ad0 <CXHCIMMIOSpace::rt_read32(unsigned int, unsigned int)>
   85680:	121e7803 	and	w3, w0, #0xfffffffd
   85684:	52800002 	mov	w2, #0x0                   	// #0
   85688:	aa1403e0 	mov	x0, x20
   8568c:	52800001 	mov	w1, #0x0                   	// #0
   85690:	94000168 	bl	85c30 <CXHCIMMIOSpace::rt_write32(unsigned int, unsigned int, unsigned int)>
   85694:	f9400260 	ldr	x0, [x19]
   85698:	b4000200 	cbz	x0, 856d8 <CXHCIEventManager::~CXHCIEventManager()+0x88>
   8569c:	f9401e61 	ldr	x1, [x19, #56]
   856a0:	97fff7d4 	bl	835f0 <CXHCIDevice::FreeSharedMem(void*)>
   856a4:	f9001e7f 	str	xzr, [x19, #56]
   856a8:	aa1303e0 	mov	x0, x19
   856ac:	f900067f 	str	xzr, [x19, #8]
   856b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   856b4:	f801041f 	str	xzr, [x0], #16
   856b8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   856bc:	1400023d 	b	85fb0 <CXHCIRing::~CXHCIRing()>
   856c0:	90000161 	adrp	x1, b1000 <_etext+0x158>
   856c4:	90000160 	adrp	x0, b1000 <_etext+0x158>
   856c8:	91276021 	add	x1, x1, #0x9d8
   856cc:	9127c000 	add	x0, x0, #0x9f0
   856d0:	528007c2 	mov	w2, #0x3e                  	// #62
   856d4:	9400619b 	bl	9dd40 <assertion_failed>
   856d8:	90000161 	adrp	x1, b1000 <_etext+0x158>
   856dc:	90000160 	adrp	x0, b1000 <_etext+0x158>
   856e0:	91276021 	add	x1, x1, #0x9d8
   856e4:	91246000 	add	x0, x0, #0x918
   856e8:	52800862 	mov	w2, #0x43                  	// #67
   856ec:	94006195 	bl	9dd40 <assertion_failed>

00000000000856f0 <CXHCIEventManager::IsValid()>:
   856f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   856f4:	910003fd 	mov	x29, sp
   856f8:	f9000bf3 	str	x19, [sp, #16]
   856fc:	aa0003f3 	mov	x19, x0
   85700:	91004000 	add	x0, x0, #0x10
   85704:	94000233 	bl	85fd0 <CXHCIRing::IsValid() const>
   85708:	72001c00 	ands	w0, w0, #0xff
   8570c:	54000080 	b.eq	8571c <CXHCIEventManager::IsValid()+0x2c>  // b.none
   85710:	f9401e60 	ldr	x0, [x19, #56]
   85714:	f100001f 	cmp	x0, #0x0
   85718:	1a9f07e0 	cset	w0, ne	// ne = any
   8571c:	f9400bf3 	ldr	x19, [sp, #16]
   85720:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85724:	d65f03c0 	ret
   85728:	d503201f 	nop
   8572c:	d503201f 	nop

0000000000085730 <CXHCIEventManager::HandleEvents()>:
   85730:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   85734:	910003fd 	mov	x29, sp
   85738:	a90153f3 	stp	x19, x20, [sp, #16]
   8573c:	a9025bf5 	stp	x21, x22, [sp, #32]
   85740:	aa0003f5 	mov	x21, x0
   85744:	f9400000 	ldr	x0, [x0]
   85748:	b4000a60 	cbz	x0, 85894 <CXHCIEventManager::HandleEvents()+0x164>
   8574c:	910042b6 	add	x22, x21, #0x10
   85750:	aa1603e0 	mov	x0, x22
   85754:	9400023b 	bl	86040 <CXHCIRing::GetDequeueTRB()>
   85758:	aa0003f3 	mov	x19, x0
   8575c:	b4000340 	cbz	x0, 857c4 <CXHCIEventManager::HandleEvents()+0x94>
   85760:	39403414 	ldrb	w20, [x0, #13]
   85764:	d342fe94 	lsr	x20, x20, #2
   85768:	71008a9f 	cmp	w20, #0x22
   8576c:	54000840 	b.eq	85874 <CXHCIEventManager::HandleEvents()+0x144>  // b.none
   85770:	54000348 	b.hi	857d8 <CXHCIEventManager::HandleEvents()+0xa8>  // b.pmore
   85774:	7100829f 	cmp	w20, #0x20
   85778:	54000520 	b.eq	8581c <CXHCIEventManager::HandleEvents()+0xec>  // b.none
   8577c:	7100869f 	cmp	w20, #0x21
   85780:	54000681 	b.ne	85850 <CXHCIEventManager::HandleEvents()+0x120>  // b.any
   85784:	f94002a0 	ldr	x0, [x21]
   85788:	97fff762 	bl	83510 <CXHCIDevice::GetCommandManager()>
   8578c:	39400262 	ldrb	w2, [x19]
   85790:	39400663 	ldrb	w3, [x19, #1]
   85794:	39400a61 	ldrb	w1, [x19, #2]
   85798:	39400e64 	ldrb	w4, [x19, #3]
   8579c:	aa032043 	orr	x3, x2, x3, lsl #8
   857a0:	39402e62 	ldrb	w2, [x19, #11]
   857a4:	aa014061 	orr	x1, x3, x1, lsl #16
   857a8:	39403e63 	ldrb	w3, [x19, #15]
   857ac:	aa046021 	orr	x1, x1, x4, lsl #24
   857b0:	940038dc 	bl	93b20 <CXHCICommandManager::CommandCompleted(TXHCITRB*, unsigned char, unsigned char)>
   857b4:	aa1603e0 	mov	x0, x22
   857b8:	94000262 	bl	86140 <CXHCIRing::IncrementDequeue()>
   857bc:	aa0003f3 	mov	x19, x0
   857c0:	b4000760 	cbz	x0, 858ac <CXHCIEventManager::HandleEvents()+0x17c>
   857c4:	aa1303e0 	mov	x0, x19
   857c8:	a94153f3 	ldp	x19, x20, [sp, #16]
   857cc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   857d0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   857d4:	d65f03c0 	ret
   857d8:	7100969f 	cmp	w20, #0x25
   857dc:	540003a1 	b.ne	85850 <CXHCIEventManager::HandleEvents()+0x120>  // b.any
   857e0:	39402c14 	ldrb	w20, [x0, #11]
   857e4:	b0000193 	adrp	x19, b6000 <From+0x98>
   857e8:	9108c273 	add	x19, x19, #0x230
   857ec:	7100569f 	cmp	w20, #0x15
   857f0:	540006a0 	b.eq	858c4 <CXHCIEventManager::HandleEvents()+0x194>  // b.none
   857f4:	f94002a0 	ldr	x0, [x21]
   857f8:	97fff882 	bl	83a00 <CXHCIDevice::DumpStatus()>
   857fc:	94006885 	bl	9fa10 <CLogger::Get()>
   85800:	90000163 	adrp	x3, b1000 <_etext+0x158>
   85804:	2a1403e4 	mov	w4, w20
   85808:	aa1303e1 	mov	x1, x19
   8580c:	9129e063 	add	x3, x3, #0xa78
   85810:	52800002 	mov	w2, #0x0                   	// #0
   85814:	94006a6b 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   85818:	17ffffe7 	b	857b4 <CXHCIEventManager::HandleEvents()+0x84>
   8581c:	f94002a0 	ldr	x0, [x21]
   85820:	97fff730 	bl	834e0 <CXHCIDevice::GetSlotManager()>
   85824:	39402261 	ldrb	w1, [x19, #8]
   85828:	39402662 	ldrb	w2, [x19, #9]
   8582c:	39402a63 	ldrb	w3, [x19, #10]
   85830:	39403a64 	ldrb	w4, [x19, #14]
   85834:	aa022022 	orr	x2, x1, x2, lsl #8
   85838:	39402e61 	ldrb	w1, [x19, #11]
   8583c:	2a034042 	orr	w2, w2, w3, lsl #16
   85840:	39403e63 	ldrb	w3, [x19, #15]
   85844:	12001084 	and	w4, w4, #0x1f
   85848:	940007fa 	bl	87830 <CXHCISlotManager::TransferEvent(unsigned char, unsigned int, unsigned char, unsigned char)>
   8584c:	17ffffda 	b	857b4 <CXHCIEventManager::HandleEvents()+0x84>
   85850:	94006870 	bl	9fa10 <CLogger::Get()>
   85854:	90000163 	adrp	x3, b1000 <_etext+0x158>
   85858:	b0000181 	adrp	x1, b6000 <From+0x98>
   8585c:	2a1403e4 	mov	w4, w20
   85860:	912a6063 	add	x3, x3, #0xa98
   85864:	9108c021 	add	x1, x1, #0x230
   85868:	52800002 	mov	w2, #0x0                   	// #0
   8586c:	94006a55 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   85870:	17ffffd1 	b	857b4 <CXHCIEventManager::HandleEvents()+0x84>
   85874:	39402c00 	ldrb	w0, [x0, #11]
   85878:	7100041f 	cmp	w0, #0x1
   8587c:	54000321 	b.ne	858e0 <CXHCIEventManager::HandleEvents()+0x1b0>  // b.any
   85880:	f94002a0 	ldr	x0, [x21]
   85884:	97fff72f 	bl	83540 <CXHCIDevice::GetRootHub()>
   85888:	39400e61 	ldrb	w1, [x19, #3]
   8588c:	94000375 	bl	86660 <CXHCIRootHub::StatusChanged(unsigned char)>
   85890:	17ffffc9 	b	857b4 <CXHCIEventManager::HandleEvents()+0x84>
   85894:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85898:	90000160 	adrp	x0, b1000 <_etext+0x158>
   8589c:	91276021 	add	x1, x1, #0x9d8
   858a0:	91246000 	add	x0, x0, #0x918
   858a4:	52800a82 	mov	w2, #0x54                  	// #84
   858a8:	94006126 	bl	9dd40 <assertion_failed>
   858ac:	90000161 	adrp	x1, b1000 <_etext+0x158>
   858b0:	90000160 	adrp	x0, b1000 <_etext+0x158>
   858b4:	91276021 	add	x1, x1, #0x9d8
   858b8:	912ac000 	add	x0, x0, #0xab0
   858bc:	52801162 	mov	w2, #0x8b                  	// #139
   858c0:	94006120 	bl	9dd40 <assertion_failed>
   858c4:	94006853 	bl	9fa10 <CLogger::Get()>
   858c8:	90000163 	adrp	x3, b1000 <_etext+0x158>
   858cc:	9129a063 	add	x3, x3, #0xa68
   858d0:	52800002 	mov	w2, #0x0                   	// #0
   858d4:	aa1303e1 	mov	x1, x19
   858d8:	94006a3a 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   858dc:	17ffffc6 	b	857f4 <CXHCIEventManager::HandleEvents()+0xc4>
   858e0:	90000161 	adrp	x1, b1000 <_etext+0x158>
   858e4:	90000160 	adrp	x0, b1000 <_etext+0x158>
   858e8:	91276021 	add	x1, x1, #0x9d8
   858ec:	91280000 	add	x0, x0, #0xa00
   858f0:	52800e22 	mov	w2, #0x71                  	// #113
   858f4:	94006113 	bl	9dd40 <assertion_failed>
   858f8:	d503201f 	nop
   858fc:	d503201f 	nop

0000000000085900 <CXHCIEventManager::DumpStatus()>:
   85900:	b0000181 	adrp	x1, b6000 <From+0x98>
   85904:	9108c021 	add	x1, x1, #0x230
   85908:	91004000 	add	x0, x0, #0x10
   8590c:	14000299 	b	86370 <CXHCIRing::DumpStatus(char const*)>

0000000000085910 <CXHCIMMIOSpace::CXHCIMMIOSpace(unsigned long)>:
   85910:	39400022 	ldrb	w2, [x1]
   85914:	8b220022 	add	x2, x1, w2, uxtb
   85918:	a9000801 	stp	x1, x2, [x0]
   8591c:	b40002c1 	cbz	x1, 85974 <CXHCIMMIOSpace::CXHCIMMIOSpace(unsigned long)+0x64>
   85920:	b9401424 	ldr	w4, [x1, #20]
   85924:	91100042 	add	x2, x2, #0x400
   85928:	b9401823 	ldr	w3, [x1, #24]
   8592c:	f9001002 	str	x2, [x0, #32]
   85930:	b9400427 	ldr	w7, [x1, #4]
   85934:	927e7484 	and	x4, x4, #0xfffffffc
   85938:	b9400826 	ldr	w6, [x1, #8]
   8593c:	8b010084 	add	x4, x4, x1
   85940:	927b6862 	and	x2, x3, #0xffffffe0
   85944:	b9400c25 	ldr	w5, [x1, #12]
   85948:	8b010042 	add	x2, x2, x1
   8594c:	f9000804 	str	x4, [x0, #16]
   85950:	b9401023 	ldr	w3, [x1, #16]
   85954:	f9000c02 	str	x2, [x0, #24]
   85958:	29061807 	stp	w7, w6, [x0, #48]
   8595c:	b9003805 	str	w5, [x0, #56]
   85960:	53107c62 	lsr	w2, w3, #16
   85964:	8b222821 	add	x1, x1, w2, uxth #2
   85968:	f9001401 	str	x1, [x0, #40]
   8596c:	b9003c03 	str	w3, [x0, #60]
   85970:	d65f03c0 	ret
   85974:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85978:	90000160 	adrp	x0, b1000 <_etext+0x158>
   8597c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85980:	912b0021 	add	x1, x1, #0xac0
   85984:	910003fd 	mov	x29, sp
   85988:	912b6000 	add	x0, x0, #0xad8
   8598c:	528016a2 	mov	w2, #0xb5                  	// #181
   85990:	940060ec 	bl	9dd40 <assertion_failed>
   85994:	d503201f 	nop
   85998:	d503201f 	nop
   8599c:	d503201f 	nop

00000000000859a0 <CXHCIMMIOSpace::~CXHCIMMIOSpace()>:
   859a0:	d65f03c0 	ret
   859a4:	d503201f 	nop
   859a8:	d503201f 	nop
   859ac:	d503201f 	nop

00000000000859b0 <CXHCIMMIOSpace::cap_read32(unsigned int)>:
   859b0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   859b4:	910003fd 	mov	x29, sp
   859b8:	f9400002 	ldr	x2, [x0]
   859bc:	b4000122 	cbz	x2, 859e0 <CXHCIMMIOSpace::cap_read32(unsigned int)+0x30>
   859c0:	51001021 	sub	w1, w1, #0x4
   859c4:	71003c3f 	cmp	w1, #0xf
   859c8:	53027c21 	lsr	w1, w1, #2
   859cc:	54000168 	b.hi	859f8 <CXHCIMMIOSpace::cap_read32(unsigned int)+0x48>  // b.pmore
   859d0:	91003021 	add	x1, x1, #0xc
   859d4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   859d8:	b8617800 	ldr	w0, [x0, x1, lsl #2]
   859dc:	d65f03c0 	ret
   859e0:	90000161 	adrp	x1, b1000 <_etext+0x158>
   859e4:	90000160 	adrp	x0, b1000 <_etext+0x158>
   859e8:	912b0021 	add	x1, x1, #0xac0
   859ec:	912b6000 	add	x0, x0, #0xad8
   859f0:	528006a2 	mov	w2, #0x35                  	// #53
   859f4:	940060d3 	bl	9dd40 <assertion_failed>
   859f8:	90000161 	adrp	x1, b1000 <_etext+0x158>
   859fc:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85a00:	912b0021 	add	x1, x1, #0xac0
   85a04:	912ba000 	add	x0, x0, #0xae8
   85a08:	52800742 	mov	w2, #0x3a                  	// #58
   85a0c:	940060cd 	bl	9dd40 <assertion_failed>

0000000000085a10 <CXHCIMMIOSpace::op_read32(unsigned int)>:
   85a10:	f9400002 	ldr	x2, [x0]
   85a14:	b4000082 	cbz	x2, 85a24 <CXHCIMMIOSpace::op_read32(unsigned int)+0x14>
   85a18:	f9400400 	ldr	x0, [x0, #8]
   85a1c:	b8614800 	ldr	w0, [x0, w1, uxtw]
   85a20:	d65f03c0 	ret
   85a24:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85a28:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85a2c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85a30:	912b0021 	add	x1, x1, #0xac0
   85a34:	910003fd 	mov	x29, sp
   85a38:	912b6000 	add	x0, x0, #0xad8
   85a3c:	52800802 	mov	w2, #0x40                  	// #64
   85a40:	940060c0 	bl	9dd40 <assertion_failed>
   85a44:	d503201f 	nop
   85a48:	d503201f 	nop
   85a4c:	d503201f 	nop

0000000000085a50 <CXHCIMMIOSpace::pt_read32(unsigned int, unsigned int)>:
   85a50:	f9400003 	ldr	x3, [x0]
   85a54:	b40000c3 	cbz	x3, 85a6c <CXHCIMMIOSpace::pt_read32(unsigned int, unsigned int)+0x1c>
   85a58:	f9401000 	ldr	x0, [x0, #32]
   85a5c:	531c6c21 	lsl	w1, w1, #4
   85a60:	8b000021 	add	x1, x1, x0
   85a64:	b8624820 	ldr	w0, [x1, w2, uxtw]
   85a68:	d65f03c0 	ret
   85a6c:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85a70:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85a74:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85a78:	912b0021 	add	x1, x1, #0xac0
   85a7c:	910003fd 	mov	x29, sp
   85a80:	912b6000 	add	x0, x0, #0xad8
   85a84:	528008e2 	mov	w2, #0x47                  	// #71
   85a88:	940060ae 	bl	9dd40 <assertion_failed>
   85a8c:	d503201f 	nop

0000000000085a90 <CXHCIMMIOSpace::rt_read32(unsigned int)>:
   85a90:	f9400002 	ldr	x2, [x0]
   85a94:	b4000082 	cbz	x2, 85aa4 <CXHCIMMIOSpace::rt_read32(unsigned int)+0x14>
   85a98:	f9400c00 	ldr	x0, [x0, #24]
   85a9c:	b8614800 	ldr	w0, [x0, w1, uxtw]
   85aa0:	d65f03c0 	ret
   85aa4:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85aa8:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85aac:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85ab0:	912b0021 	add	x1, x1, #0xac0
   85ab4:	910003fd 	mov	x29, sp
   85ab8:	912b6000 	add	x0, x0, #0xad8
   85abc:	528009c2 	mov	w2, #0x4e                  	// #78
   85ac0:	940060a0 	bl	9dd40 <assertion_failed>
   85ac4:	d503201f 	nop
   85ac8:	d503201f 	nop
   85acc:	d503201f 	nop

0000000000085ad0 <CXHCIMMIOSpace::rt_read32(unsigned int, unsigned int)>:
   85ad0:	f9400003 	ldr	x3, [x0]
   85ad4:	b4000103 	cbz	x3, 85af4 <CXHCIMMIOSpace::rt_read32(unsigned int, unsigned int)+0x24>
   85ad8:	f9400c00 	ldr	x0, [x0, #24]
   85adc:	531b6821 	lsl	w1, w1, #5
   85ae0:	2a0203e2 	mov	w2, w2
   85ae4:	91008042 	add	x2, x2, #0x20
   85ae8:	8b000021 	add	x1, x1, x0
   85aec:	b8626820 	ldr	w0, [x1, x2]
   85af0:	d65f03c0 	ret
   85af4:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85af8:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85afc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85b00:	912b0021 	add	x1, x1, #0xac0
   85b04:	910003fd 	mov	x29, sp
   85b08:	912b6000 	add	x0, x0, #0xad8
   85b0c:	52800aa2 	mov	w2, #0x55                  	// #85
   85b10:	9400608c 	bl	9dd40 <assertion_failed>
   85b14:	d503201f 	nop
   85b18:	d503201f 	nop
   85b1c:	d503201f 	nop

0000000000085b20 <CXHCIMMIOSpace::rt_read64(unsigned int, unsigned int)>:
   85b20:	f9400003 	ldr	x3, [x0]
   85b24:	b4000143 	cbz	x3, 85b4c <CXHCIMMIOSpace::rt_read64(unsigned int, unsigned int)+0x2c>
   85b28:	f9400c00 	ldr	x0, [x0, #24]
   85b2c:	531b6821 	lsl	w1, w1, #5
   85b30:	8b000021 	add	x1, x1, x0
   85b34:	8b224022 	add	x2, x1, w2, uxtw
   85b38:	b9402040 	ldr	w0, [x2, #32]
   85b3c:	b9402441 	ldr	w1, [x2, #36]
   85b40:	2a0003e0 	mov	w0, w0
   85b44:	aa018000 	orr	x0, x0, x1, lsl #32
   85b48:	d65f03c0 	ret
   85b4c:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85b50:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85b54:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85b58:	912b0021 	add	x1, x1, #0xac0
   85b5c:	910003fd 	mov	x29, sp
   85b60:	912b6000 	add	x0, x0, #0xad8
   85b64:	52800b82 	mov	w2, #0x5c                  	// #92
   85b68:	94006076 	bl	9dd40 <assertion_failed>
   85b6c:	d503201f 	nop

0000000000085b70 <CXHCIMMIOSpace::op_write32(unsigned int, unsigned int)>:
   85b70:	f9400003 	ldr	x3, [x0]
   85b74:	b4000083 	cbz	x3, 85b84 <CXHCIMMIOSpace::op_write32(unsigned int, unsigned int)+0x14>
   85b78:	f9400400 	ldr	x0, [x0, #8]
   85b7c:	b8214802 	str	w2, [x0, w1, uxtw]
   85b80:	d65f03c0 	ret
   85b84:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85b88:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85b8c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85b90:	912b0021 	add	x1, x1, #0xac0
   85b94:	910003fd 	mov	x29, sp
   85b98:	912b6000 	add	x0, x0, #0xad8
   85b9c:	52800d22 	mov	w2, #0x69                  	// #105
   85ba0:	94006068 	bl	9dd40 <assertion_failed>
   85ba4:	d503201f 	nop
   85ba8:	d503201f 	nop
   85bac:	d503201f 	nop

0000000000085bb0 <CXHCIMMIOSpace::db_write32(unsigned int, unsigned int)>:
   85bb0:	f9400003 	ldr	x3, [x0]
   85bb4:	b40000a3 	cbz	x3, 85bc8 <CXHCIMMIOSpace::db_write32(unsigned int, unsigned int)+0x18>
   85bb8:	f9400800 	ldr	x0, [x0, #16]
   85bbc:	531e7421 	lsl	w1, w1, #2
   85bc0:	b8214802 	str	w2, [x0, w1, uxtw]
   85bc4:	d65f03c0 	ret
   85bc8:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85bcc:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85bd0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85bd4:	912b0021 	add	x1, x1, #0xac0
   85bd8:	910003fd 	mov	x29, sp
   85bdc:	912b6000 	add	x0, x0, #0xad8
   85be0:	52800e02 	mov	w2, #0x70                  	// #112
   85be4:	94006057 	bl	9dd40 <assertion_failed>
   85be8:	d503201f 	nop
   85bec:	d503201f 	nop

0000000000085bf0 <CXHCIMMIOSpace::pt_write32(unsigned int, unsigned int, unsigned int)>:
   85bf0:	f9400004 	ldr	x4, [x0]
   85bf4:	b40000c4 	cbz	x4, 85c0c <CXHCIMMIOSpace::pt_write32(unsigned int, unsigned int, unsigned int)+0x1c>
   85bf8:	f9401000 	ldr	x0, [x0, #32]
   85bfc:	531c6c21 	lsl	w1, w1, #4
   85c00:	8b000021 	add	x1, x1, x0
   85c04:	b8224823 	str	w3, [x1, w2, uxtw]
   85c08:	d65f03c0 	ret
   85c0c:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85c10:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85c14:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85c18:	912b0021 	add	x1, x1, #0xac0
   85c1c:	910003fd 	mov	x29, sp
   85c20:	912b6000 	add	x0, x0, #0xad8
   85c24:	52800ee2 	mov	w2, #0x77                  	// #119
   85c28:	94006046 	bl	9dd40 <assertion_failed>
   85c2c:	d503201f 	nop

0000000000085c30 <CXHCIMMIOSpace::rt_write32(unsigned int, unsigned int, unsigned int)>:
   85c30:	f9400004 	ldr	x4, [x0]
   85c34:	b4000104 	cbz	x4, 85c54 <CXHCIMMIOSpace::rt_write32(unsigned int, unsigned int, unsigned int)+0x24>
   85c38:	f9400c00 	ldr	x0, [x0, #24]
   85c3c:	531b6821 	lsl	w1, w1, #5
   85c40:	2a0203e2 	mov	w2, w2
   85c44:	91008042 	add	x2, x2, #0x20
   85c48:	8b000021 	add	x1, x1, x0
   85c4c:	b8226823 	str	w3, [x1, x2]
   85c50:	d65f03c0 	ret
   85c54:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85c58:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85c5c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85c60:	912b0021 	add	x1, x1, #0xac0
   85c64:	910003fd 	mov	x29, sp
   85c68:	912b6000 	add	x0, x0, #0xad8
   85c6c:	52800fc2 	mov	w2, #0x7e                  	// #126
   85c70:	94006034 	bl	9dd40 <assertion_failed>
   85c74:	d503201f 	nop
   85c78:	d503201f 	nop
   85c7c:	d503201f 	nop

0000000000085c80 <CXHCIMMIOSpace::op_write64(unsigned int, unsigned long)>:
   85c80:	f9400003 	ldr	x3, [x0]
   85c84:	b40000e3 	cbz	x3, 85ca0 <CXHCIMMIOSpace::op_write64(unsigned int, unsigned long)+0x20>
   85c88:	f9400400 	ldr	x0, [x0, #8]
   85c8c:	d360fc44 	lsr	x4, x2, #32
   85c90:	11001023 	add	w3, w1, #0x4
   85c94:	b8214802 	str	w2, [x0, w1, uxtw]
   85c98:	b8234804 	str	w4, [x0, w3, uxtw]
   85c9c:	d65f03c0 	ret
   85ca0:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85ca4:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85ca8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85cac:	912b0021 	add	x1, x1, #0xac0
   85cb0:	910003fd 	mov	x29, sp
   85cb4:	912b6000 	add	x0, x0, #0xad8
   85cb8:	52800d22 	mov	w2, #0x69                  	// #105
   85cbc:	94006021 	bl	9dd40 <assertion_failed>

0000000000085cc0 <CXHCIMMIOSpace::rt_write64(unsigned int, unsigned int, unsigned long)>:
   85cc0:	f9400004 	ldr	x4, [x0]
   85cc4:	b4000124 	cbz	x4, 85ce8 <CXHCIMMIOSpace::rt_write64(unsigned int, unsigned int, unsigned long)+0x28>
   85cc8:	f9400c04 	ldr	x4, [x0, #24]
   85ccc:	531b6821 	lsl	w1, w1, #5
   85cd0:	d360fc60 	lsr	x0, x3, #32
   85cd4:	8b040021 	add	x1, x1, x4
   85cd8:	8b224022 	add	x2, x1, w2, uxtw
   85cdc:	b9002043 	str	w3, [x2, #32]
   85ce0:	b9002440 	str	w0, [x2, #36]
   85ce4:	d65f03c0 	ret
   85ce8:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85cec:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85cf0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85cf4:	912b0021 	add	x1, x1, #0xac0
   85cf8:	910003fd 	mov	x29, sp
   85cfc:	912b6000 	add	x0, x0, #0xad8
   85d00:	52801162 	mov	w2, #0x8b                  	// #139
   85d04:	9400600f 	bl	9dd40 <assertion_failed>
   85d08:	d503201f 	nop
   85d0c:	d503201f 	nop

0000000000085d10 <CXHCIMMIOSpace::op_wait32(unsigned int, unsigned int, unsigned int, unsigned int)>:
   85d10:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   85d14:	910003fd 	mov	x29, sp
   85d18:	a90153f3 	stp	x19, x20, [sp, #16]
   85d1c:	2a0103f4 	mov	w20, w1
   85d20:	aa0003f3 	mov	x19, x0
   85d24:	a9025bf5 	stp	x21, x22, [sp, #32]
   85d28:	2a0203f6 	mov	w22, w2
   85d2c:	2a0303f5 	mov	w21, w3
   85d30:	a90363f7 	stp	x23, x24, [sp, #48]
   85d34:	2a0403f8 	mov	w24, w4
   85d38:	940084ee 	bl	a70f0 <CTimer::Get()>
   85d3c:	940081bd 	bl	a6430 <CTimer::GetClockTicks()>
   85d40:	2a0003f7 	mov	w23, w0
   85d44:	1400000b 	b	85d70 <CXHCIMMIOSpace::op_wait32(unsigned int, unsigned int, unsigned int, unsigned int)+0x60>
   85d48:	f9400660 	ldr	x0, [x19, #8]
   85d4c:	b8606a81 	ldr	w1, [x20, x0]
   85d50:	0a0102c1 	and	w1, w22, w1
   85d54:	6b15003f 	cmp	w1, w21
   85d58:	540001c0 	b.eq	85d90 <CXHCIMMIOSpace::op_wait32(unsigned int, unsigned int, unsigned int, unsigned int)+0x80>  // b.none
   85d5c:	940084e5 	bl	a70f0 <CTimer::Get()>
   85d60:	940081b4 	bl	a6430 <CTimer::GetClockTicks()>
   85d64:	4b170001 	sub	w1, w0, w23
   85d68:	6b18003f 	cmp	w1, w24
   85d6c:	540001e2 	b.cs	85da8 <CXHCIMMIOSpace::op_wait32(unsigned int, unsigned int, unsigned int, unsigned int)+0x98>  // b.hs, b.nlast
   85d70:	f9400260 	ldr	x0, [x19]
   85d74:	b5fffea0 	cbnz	x0, 85d48 <CXHCIMMIOSpace::op_wait32(unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   85d78:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85d7c:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85d80:	912b0021 	add	x1, x1, #0xac0
   85d84:	912b6000 	add	x0, x0, #0xad8
   85d88:	52800802 	mov	w2, #0x40                  	// #64
   85d8c:	94005fed 	bl	9dd40 <assertion_failed>
   85d90:	52800020 	mov	w0, #0x1                   	// #1
   85d94:	a94153f3 	ldp	x19, x20, [sp, #16]
   85d98:	a9425bf5 	ldp	x21, x22, [sp, #32]
   85d9c:	a94363f7 	ldp	x23, x24, [sp, #48]
   85da0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   85da4:	d65f03c0 	ret
   85da8:	52800000 	mov	w0, #0x0                   	// #0
   85dac:	a94153f3 	ldp	x19, x20, [sp, #16]
   85db0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   85db4:	a94363f7 	ldp	x23, x24, [sp, #48]
   85db8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   85dbc:	d65f03c0 	ret

0000000000085dc0 <CXHCIMMIOSpace::DumpStatus()>:
   85dc0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85dc4:	910003fd 	mov	x29, sp
   85dc8:	f9000bf3 	str	x19, [sp, #16]
   85dcc:	aa0003f3 	mov	x19, x0
   85dd0:	f9400000 	ldr	x0, [x0]
   85dd4:	b4000240 	cbz	x0, 85e1c <CXHCIMMIOSpace::DumpStatus()+0x5c>
   85dd8:	52800381 	mov	w1, #0x1c                  	// #28
   85ddc:	90000162 	adrp	x2, b1000 <_etext+0x158>
   85de0:	912be042 	add	x2, x2, #0xaf8
   85de4:	9400619f 	bl	9e460 <debug_hexdump(void const*, unsigned int, char const*)>
   85de8:	52800781 	mov	w1, #0x3c                  	// #60
   85dec:	90000162 	adrp	x2, b1000 <_etext+0x158>
   85df0:	912c0042 	add	x2, x2, #0xb00
   85df4:	f9400660 	ldr	x0, [x19, #8]
   85df8:	9400619a 	bl	9e460 <debug_hexdump(void const*, unsigned int, char const*)>
   85dfc:	f9400e60 	ldr	x0, [x19, #24]
   85e00:	90000162 	adrp	x2, b1000 <_etext+0x158>
   85e04:	52800401 	mov	w1, #0x20                  	// #32
   85e08:	912c2042 	add	x2, x2, #0xb08
   85e0c:	f9400bf3 	ldr	x19, [sp, #16]
   85e10:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85e14:	91008000 	add	x0, x0, #0x20
   85e18:	14006192 	b	9e460 <debug_hexdump(void const*, unsigned int, char const*)>
   85e1c:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85e20:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85e24:	912b0021 	add	x1, x1, #0xac0
   85e28:	912b6000 	add	x0, x0, #0xad8
   85e2c:	52801542 	mov	w2, #0xaa                  	// #170
   85e30:	94005fc4 	bl	9dd40 <assertion_failed>
   85e34:	d503201f 	nop
   85e38:	d503201f 	nop
   85e3c:	d503201f 	nop

0000000000085e40 <CXHCIMMIOSpace::cap_read32_raw(unsigned int)>:
   85e40:	f9400000 	ldr	x0, [x0]
   85e44:	b4000060 	cbz	x0, 85e50 <CXHCIMMIOSpace::cap_read32_raw(unsigned int)+0x10>
   85e48:	b8614800 	ldr	w0, [x0, w1, uxtw]
   85e4c:	d65f03c0 	ret
   85e50:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85e54:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85e58:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85e5c:	912b0021 	add	x1, x1, #0xac0
   85e60:	910003fd 	mov	x29, sp
   85e64:	912b6000 	add	x0, x0, #0xad8
   85e68:	528016a2 	mov	w2, #0xb5                  	// #181
   85e6c:	94005fb5 	bl	9dd40 <assertion_failed>

0000000000085e70 <CXHCIRing::CXHCIRing(TXHCIRingType, unsigned int, CXHCIDevice*)>:
   85e70:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85e74:	910003fd 	mov	x29, sp
   85e78:	71003c5f 	cmp	w2, #0xf
   85e7c:	f9000bf3 	str	x19, [sp, #16]
   85e80:	aa0003f3 	mov	x19, x0
   85e84:	aa0303e0 	mov	x0, x3
   85e88:	52800023 	mov	w3, #0x1                   	// #1
   85e8c:	29000a61 	stp	w1, w2, [x19]
   85e90:	a900fe60 	stp	x0, xzr, [x19, #8]
   85e94:	f9000e7f 	str	xzr, [x19, #24]
   85e98:	b9002263 	str	w3, [x19, #32]
   85e9c:	54000609 	b.ls	85f5c <CXHCIRing::CXHCIRing(TXHCIRingType, unsigned int, CXHCIDevice*)+0xec>  // b.plast
   85ea0:	f240045f 	tst	x2, #0x3
   85ea4:	54000681 	b.ne	85f74 <CXHCIRing::CXHCIRing(TXHCIRingType, unsigned int, CXHCIDevice*)+0x104>  // b.any
   85ea8:	b4000720 	cbz	x0, 85f8c <CXHCIRing::CXHCIRing(TXHCIRingType, unsigned int, CXHCIDevice*)+0x11c>
   85eac:	d37c7c41 	ubfiz	x1, x2, #4, #32
   85eb0:	d2a00023 	mov	x3, #0x10000               	// #65536
   85eb4:	d2800802 	mov	x2, #0x40                  	// #64
   85eb8:	97fff5ae 	bl	83570 <CXHCIDevice::AllocateSharedMem(unsigned long, unsigned long, unsigned long)>
   85ebc:	f9000a60 	str	x0, [x19, #16]
   85ec0:	b4000480 	cbz	x0, 85f50 <CXHCIRing::CXHCIRing(TXHCIRingType, unsigned int, CXHCIDevice*)+0xe0>
   85ec4:	b9400261 	ldr	w1, [x19]
   85ec8:	7100043f 	cmp	w1, #0x1
   85ecc:	54000420 	b.eq	85f50 <CXHCIRing::CXHCIRing(TXHCIRingType, unsigned int, CXHCIDevice*)+0xe0>  // b.none
   85ed0:	900001c1 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   85ed4:	b9400663 	ldr	w3, [x19, #4]
   85ed8:	52800045 	mov	w5, #0x2                   	// #2
   85edc:	52800304 	mov	w4, #0x18                  	// #24
   85ee0:	f9417422 	ldr	x2, [x1, #744]
   85ee4:	51000463 	sub	w3, w3, #0x1
   85ee8:	d37cec63 	lsl	x3, x3, #4
   85eec:	aa020002 	orr	x2, x0, x2
   85ef0:	8b030001 	add	x1, x0, x3
   85ef4:	53083c49 	ubfx	w9, w2, #8, #8
   85ef8:	53105c48 	ubfx	w8, w2, #16, #8
   85efc:	53187c47 	lsr	w7, w2, #24
   85f00:	d3609c46 	ubfx	x6, x2, #32, #8
   85f04:	38236802 	strb	w2, [x0, x3]
   85f08:	d368bc43 	ubfx	x3, x2, #40, #8
   85f0c:	d370dc40 	ubfx	x0, x2, #48, #8
   85f10:	39000429 	strb	w9, [x1, #1]
   85f14:	d378fc42 	lsr	x2, x2, #56
   85f18:	39000828 	strb	w8, [x1, #2]
   85f1c:	39000c27 	strb	w7, [x1, #3]
   85f20:	39001026 	strb	w6, [x1, #4]
   85f24:	39001423 	strb	w3, [x1, #5]
   85f28:	39001820 	strb	w0, [x1, #6]
   85f2c:	39001c22 	strb	w2, [x1, #7]
   85f30:	3900203f 	strb	wzr, [x1, #8]
   85f34:	3900243f 	strb	wzr, [x1, #9]
   85f38:	3900283f 	strb	wzr, [x1, #10]
   85f3c:	39002c3f 	strb	wzr, [x1, #11]
   85f40:	39003025 	strb	w5, [x1, #12]
   85f44:	39003424 	strb	w4, [x1, #13]
   85f48:	3900383f 	strb	wzr, [x1, #14]
   85f4c:	39003c3f 	strb	wzr, [x1, #15]
   85f50:	f9400bf3 	ldr	x19, [sp, #16]
   85f54:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85f58:	d65f03c0 	ret
   85f5c:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85f60:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85f64:	912c4021 	add	x1, x1, #0xb10
   85f68:	912c8000 	add	x0, x0, #0xb20
   85f6c:	528004a2 	mov	w2, #0x25                  	// #37
   85f70:	94005f74 	bl	9dd40 <assertion_failed>
   85f74:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85f78:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85f7c:	912c4021 	add	x1, x1, #0xb10
   85f80:	912ce000 	add	x0, x0, #0xb38
   85f84:	528004c2 	mov	w2, #0x26                  	// #38
   85f88:	94005f6e 	bl	9dd40 <assertion_failed>
   85f8c:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85f90:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85f94:	912c4021 	add	x1, x1, #0xb10
   85f98:	912d4000 	add	x0, x0, #0xb50
   85f9c:	52800502 	mov	w2, #0x28                  	// #40
   85fa0:	94005f68 	bl	9dd40 <assertion_failed>
   85fa4:	d503201f 	nop
   85fa8:	d503201f 	nop
   85fac:	d503201f 	nop

0000000000085fb0 <CXHCIRing::~CXHCIRing()>:
   85fb0:	f9400801 	ldr	x1, [x0, #16]
   85fb4:	b4000061 	cbz	x1, 85fc0 <CXHCIRing::~CXHCIRing()+0x10>
   85fb8:	f9400400 	ldr	x0, [x0, #8]
   85fbc:	17fff58d 	b	835f0 <CXHCIDevice::FreeSharedMem(void*)>
   85fc0:	d65f03c0 	ret
   85fc4:	d503201f 	nop
   85fc8:	d503201f 	nop
   85fcc:	d503201f 	nop

0000000000085fd0 <CXHCIRing::IsValid() const>:
   85fd0:	f9400800 	ldr	x0, [x0, #16]
   85fd4:	f100001f 	cmp	x0, #0x0
   85fd8:	1a9f07e0 	cset	w0, ne	// ne = any
   85fdc:	d65f03c0 	ret

0000000000085fe0 <CXHCIRing::GetTRBCount() const>:
   85fe0:	f9400801 	ldr	x1, [x0, #16]
   85fe4:	b4000061 	cbz	x1, 85ff0 <CXHCIRing::GetTRBCount() const+0x10>
   85fe8:	b9400400 	ldr	w0, [x0, #4]
   85fec:	d65f03c0 	ret
   85ff0:	90000161 	adrp	x1, b1000 <_etext+0x158>
   85ff4:	90000160 	adrp	x0, b1000 <_etext+0x158>
   85ff8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85ffc:	912c4021 	add	x1, x1, #0xb10
   86000:	910003fd 	mov	x29, sp
   86004:	912da000 	add	x0, x0, #0xb68
   86008:	52800982 	mov	w2, #0x4c                  	// #76
   8600c:	94005f4d 	bl	9dd40 <assertion_failed>

0000000000086010 <CXHCIRing::GetFirstTRB()>:
   86010:	f9400800 	ldr	x0, [x0, #16]
   86014:	b4000040 	cbz	x0, 8601c <CXHCIRing::GetFirstTRB()+0xc>
   86018:	d65f03c0 	ret
   8601c:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   86020:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   86024:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   86028:	912c4021 	add	x1, x1, #0xb10
   8602c:	910003fd 	mov	x29, sp
   86030:	912da000 	add	x0, x0, #0xb68
   86034:	52800a62 	mov	w2, #0x53                  	// #83
   86038:	94005f42 	bl	9dd40 <assertion_failed>
   8603c:	d503201f 	nop

0000000000086040 <CXHCIRing::GetDequeueTRB()>:
   86040:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   86044:	910003fd 	mov	x29, sp
   86048:	f9400801 	ldr	x1, [x0, #16]
   8604c:	b40001c1 	cbz	x1, 86084 <CXHCIRing::GetDequeueTRB()+0x44>
   86050:	b9400403 	ldr	w3, [x0, #4]
   86054:	b9401c02 	ldr	w2, [x0, #28]
   86058:	6b03005f 	cmp	w2, w3
   8605c:	54000202 	b.cs	8609c <CXHCIRing::GetDequeueTRB()+0x5c>  // b.hs, b.nlast
   86060:	d37c7c42 	ubfiz	x2, x2, #4, #32
   86064:	b9402003 	ldr	w3, [x0, #32]
   86068:	8b020020 	add	x0, x1, x2
   8606c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   86070:	39403001 	ldrb	w1, [x0, #12]
   86074:	12000021 	and	w1, w1, #0x1
   86078:	6b03003f 	cmp	w1, w3
   8607c:	9a9f0000 	csel	x0, x0, xzr, eq	// eq = none
   86080:	d65f03c0 	ret
   86084:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   86088:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   8608c:	912c4021 	add	x1, x1, #0xb10
   86090:	912da000 	add	x0, x0, #0xb68
   86094:	52800b42 	mov	w2, #0x5a                  	// #90
   86098:	94005f2a 	bl	9dd40 <assertion_failed>
   8609c:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   860a0:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   860a4:	912c4021 	add	x1, x1, #0xb10
   860a8:	912e0000 	add	x0, x0, #0xb80
   860ac:	52800b62 	mov	w2, #0x5b                  	// #91
   860b0:	94005f24 	bl	9dd40 <assertion_failed>
   860b4:	d503201f 	nop
   860b8:	d503201f 	nop
   860bc:	d503201f 	nop

00000000000860c0 <CXHCIRing::GetEnqueueTRB()>:
   860c0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   860c4:	910003fd 	mov	x29, sp
   860c8:	f9400801 	ldr	x1, [x0, #16]
   860cc:	b40001c1 	cbz	x1, 86104 <CXHCIRing::GetEnqueueTRB()+0x44>
   860d0:	b9400403 	ldr	w3, [x0, #4]
   860d4:	b9401802 	ldr	w2, [x0, #24]
   860d8:	6b03005f 	cmp	w2, w3
   860dc:	54000202 	b.cs	8611c <CXHCIRing::GetEnqueueTRB()+0x5c>  // b.hs, b.nlast
   860e0:	d37c7c42 	ubfiz	x2, x2, #4, #32
   860e4:	b9402003 	ldr	w3, [x0, #32]
   860e8:	8b020020 	add	x0, x1, x2
   860ec:	a8c17bfd 	ldp	x29, x30, [sp], #16
   860f0:	39403001 	ldrb	w1, [x0, #12]
   860f4:	12000021 	and	w1, w1, #0x1
   860f8:	6b03003f 	cmp	w1, w3
   860fc:	9a9f1000 	csel	x0, x0, xzr, ne	// ne = any
   86100:	d65f03c0 	ret
   86104:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   86108:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   8610c:	912c4021 	add	x1, x1, #0xb10
   86110:	912da000 	add	x0, x0, #0xb68
   86114:	52800ce2 	mov	w2, #0x67                  	// #103
   86118:	94005f0a 	bl	9dd40 <assertion_failed>
   8611c:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   86120:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   86124:	912c4021 	add	x1, x1, #0xb10
   86128:	912e8000 	add	x0, x0, #0xba0
   8612c:	52800d02 	mov	w2, #0x68                  	// #104
   86130:	94005f04 	bl	9dd40 <assertion_failed>
   86134:	d503201f 	nop
   86138:	d503201f 	nop
   8613c:	d503201f 	nop

0000000000086140 <CXHCIRing::IncrementDequeue()>:
   86140:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   86144:	aa0003e1 	mov	x1, x0
   86148:	910003fd 	mov	x29, sp
   8614c:	f9400800 	ldr	x0, [x0, #16]
   86150:	b4000360 	cbz	x0, 861bc <CXHCIRing::IncrementDequeue()+0x7c>
   86154:	b9400022 	ldr	w2, [x1]
   86158:	7100045f 	cmp	w2, #0x1
   8615c:	540003c1 	b.ne	861d4 <CXHCIRing::IncrementDequeue()+0x94>  // b.any
   86160:	b9400424 	ldr	w4, [x1, #4]
   86164:	b9401c22 	ldr	w2, [x1, #28]
   86168:	6b04005f 	cmp	w2, w4
   8616c:	54000402 	b.cs	861ec <CXHCIRing::IncrementDequeue()+0xac>  // b.hs, b.nlast
   86170:	d37c7c43 	ubfiz	x3, x2, #4, #32
   86174:	b9402025 	ldr	w5, [x1, #32]
   86178:	8b030003 	add	x3, x0, x3
   8617c:	39403063 	ldrb	w3, [x3, #12]
   86180:	12000063 	and	w3, w3, #0x1
   86184:	6b05007f 	cmp	w3, w5
   86188:	540003e1 	b.ne	86204 <CXHCIRing::IncrementDequeue()+0xc4>  // b.any
   8618c:	11000442 	add	w2, w2, #0x1
   86190:	6b02009f 	cmp	w4, w2
   86194:	540000c0 	b.eq	861ac <CXHCIRing::IncrementDequeue()+0x6c>  // b.none
   86198:	d37c7c43 	ubfiz	x3, x2, #4, #32
   8619c:	b9001c22 	str	w2, [x1, #28]
   861a0:	8b030000 	add	x0, x0, x3
   861a4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   861a8:	d65f03c0 	ret
   861ac:	52000063 	eor	w3, w3, #0x1
   861b0:	29038c3f 	stp	wzr, w3, [x1, #28]
   861b4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   861b8:	d65f03c0 	ret
   861bc:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   861c0:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   861c4:	912c4021 	add	x1, x1, #0xb10
   861c8:	912da000 	add	x0, x0, #0xb68
   861cc:	52800e82 	mov	w2, #0x74                  	// #116
   861d0:	94005edc 	bl	9dd40 <assertion_failed>
   861d4:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   861d8:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   861dc:	912c4021 	add	x1, x1, #0xb10
   861e0:	912f0000 	add	x0, x0, #0xbc0
   861e4:	52800ea2 	mov	w2, #0x75                  	// #117
   861e8:	94005ed6 	bl	9dd40 <assertion_failed>
   861ec:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   861f0:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   861f4:	912c4021 	add	x1, x1, #0xb10
   861f8:	912e0000 	add	x0, x0, #0xb80
   861fc:	52800ec2 	mov	w2, #0x76                  	// #118
   86200:	94005ed0 	bl	9dd40 <assertion_failed>
   86204:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   86208:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   8620c:	912c4021 	add	x1, x1, #0xb10
   86210:	912f8000 	add	x0, x0, #0xbe0
   86214:	52800f02 	mov	w2, #0x78                  	// #120
   86218:	94005eca 	bl	9dd40 <assertion_failed>
   8621c:	d503201f 	nop

0000000000086220 <CXHCIRing::IncrementEnqueue()>:
   86220:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   86224:	910003fd 	mov	x29, sp
   86228:	f9400802 	ldr	x2, [x0, #16]
   8622c:	b40005a2 	cbz	x2, 862e0 <CXHCIRing::IncrementEnqueue()+0xc0>
   86230:	b9400001 	ldr	w1, [x0]
   86234:	7100043f 	cmp	w1, #0x1
   86238:	54000600 	b.eq	862f8 <CXHCIRing::IncrementEnqueue()+0xd8>  // b.none
   8623c:	b9400404 	ldr	w4, [x0, #4]
   86240:	b9401801 	ldr	w1, [x0, #24]
   86244:	6b04003f 	cmp	w1, w4
   86248:	54000642 	b.cs	86310 <CXHCIRing::IncrementEnqueue()+0xf0>  // b.hs, b.nlast
   8624c:	d37c7c23 	ubfiz	x3, x1, #4, #32
   86250:	b9402005 	ldr	w5, [x0, #32]
   86254:	8b030043 	add	x3, x2, x3
   86258:	39403063 	ldrb	w3, [x3, #12]
   8625c:	12000063 	and	w3, w3, #0x1
   86260:	6b05007f 	cmp	w3, w5
   86264:	54000621 	b.ne	86328 <CXHCIRing::IncrementEnqueue()+0x108>  // b.any
   86268:	11000421 	add	w1, w1, #0x1
   8626c:	51000484 	sub	w4, w4, #0x1
   86270:	6b04003f 	cmp	w1, w4
   86274:	b9001801 	str	w1, [x0, #24]
   86278:	54000060 	b.eq	86284 <CXHCIRing::IncrementEnqueue()+0x64>  // b.none
   8627c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   86280:	d65f03c0 	ret
   86284:	d37c7c21 	ubfiz	x1, x1, #4, #32
   86288:	8b010042 	add	x2, x2, x1
   8628c:	39403046 	ldrb	w6, [x2, #12]
   86290:	39403445 	ldrb	w5, [x2, #13]
   86294:	39403844 	ldrb	w4, [x2, #14]
   86298:	39403c41 	ldrb	w1, [x2, #15]
   8629c:	aa0520c5 	orr	x5, x6, x5, lsl #8
   862a0:	aa0440a4 	orr	x4, x5, x4, lsl #16
   862a4:	aa016081 	orr	x1, x4, x1, lsl #24
   862a8:	52000027 	eor	w7, w1, #0x1
   862ac:	53083c26 	ubfx	w6, w1, #8, #8
   862b0:	53105c25 	ubfx	w5, w1, #16, #8
   862b4:	d358dc24 	ubfx	x4, x1, #24, #32
   862b8:	39003047 	strb	w7, [x2, #12]
   862bc:	39003446 	strb	w6, [x2, #13]
   862c0:	39003845 	strb	w5, [x2, #14]
   862c4:	39003c44 	strb	w4, [x2, #15]
   862c8:	36080061 	tbz	w1, #1, 862d4 <CXHCIRing::IncrementEnqueue()+0xb4>
   862cc:	52000063 	eor	w3, w3, #0x1
   862d0:	b9002003 	str	w3, [x0, #32]
   862d4:	b900181f 	str	wzr, [x0, #24]
   862d8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   862dc:	d65f03c0 	ret
   862e0:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   862e4:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   862e8:	912c4021 	add	x1, x1, #0xb10
   862ec:	912da000 	add	x0, x0, #0xb68
   862f0:	528010e2 	mov	w2, #0x87                  	// #135
   862f4:	94005e93 	bl	9dd40 <assertion_failed>
   862f8:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   862fc:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   86300:	912c4021 	add	x1, x1, #0xb10
   86304:	9130c000 	add	x0, x0, #0xc30
   86308:	52801102 	mov	w2, #0x88                  	// #136
   8630c:	94005e8d 	bl	9dd40 <assertion_failed>
   86310:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   86314:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   86318:	912c4021 	add	x1, x1, #0xb10
   8631c:	912e8000 	add	x0, x0, #0xba0
   86320:	52801122 	mov	w2, #0x89                  	// #137
   86324:	94005e87 	bl	9dd40 <assertion_failed>
   86328:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   8632c:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   86330:	912c4021 	add	x1, x1, #0xb10
   86334:	91314000 	add	x0, x0, #0xc50
   86338:	52801162 	mov	w2, #0x8b                  	// #139
   8633c:	94005e81 	bl	9dd40 <assertion_failed>

0000000000086340 <CXHCIRing::GetCycleState() const>:
   86340:	f9400801 	ldr	x1, [x0, #16]
   86344:	b4000061 	cbz	x1, 86350 <CXHCIRing::GetCycleState() const+0x10>
   86348:	b9402000 	ldr	w0, [x0, #32]
   8634c:	d65f03c0 	ret
   86350:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   86354:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   86358:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8635c:	912c4021 	add	x1, x1, #0xb10
   86360:	910003fd 	mov	x29, sp
   86364:	912da000 	add	x0, x0, #0xb68
   86368:	528013e2 	mov	w2, #0x9f                  	// #159
   8636c:	94005e75 	bl	9dd40 <assertion_failed>

0000000000086370 <CXHCIRing::DumpStatus(char const*)>:
   86370:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   86374:	910003fd 	mov	x29, sp
   86378:	a90153f3 	stp	x19, x20, [sp, #16]
   8637c:	aa0103f4 	mov	x20, x1
   86380:	aa0003f3 	mov	x19, x0
   86384:	940065a3 	bl	9fa10 <CLogger::Get()>
   86388:	29401262 	ldp	w2, w4, [x19]
   8638c:	f100029f 	cmp	x20, #0x0
   86390:	90000181 	adrp	x1, b6000 <From+0x98>
   86394:	9108e021 	add	x1, x1, #0x238
   86398:	9a940034 	csel	x20, x1, x20, eq	// eq = none
   8639c:	29431a61 	ldp	w1, w6, [x19, #24]
   863a0:	7100045f 	cmp	w2, #0x1
   863a4:	540002a0 	b.eq	863f8 <CXHCIRing::DumpStatus(char const*)+0x88>  // b.none
   863a8:	f0000145 	adrp	x5, b1000 <_etext+0x158>
   863ac:	9132a0a5 	add	x5, x5, #0xca8
   863b0:	2a0103e6 	mov	w6, w1
   863b4:	b9402267 	ldr	w7, [x19, #32]
   863b8:	f0000143 	adrp	x3, b1000 <_etext+0x158>
   863bc:	9132c063 	add	x3, x3, #0xcb0
   863c0:	52800082 	mov	w2, #0x4                   	// #4
   863c4:	aa1403e1 	mov	x1, x20
   863c8:	9400677e 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   863cc:	f9400a60 	ldr	x0, [x19, #16]
   863d0:	b40000e0 	cbz	x0, 863ec <CXHCIRing::DumpStatus(char const*)+0x7c>
   863d4:	b9400661 	ldr	w1, [x19, #4]
   863d8:	aa1403e2 	mov	x2, x20
   863dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   863e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   863e4:	531c6c21 	lsl	w1, w1, #4
   863e8:	1400601e 	b	9e460 <debug_hexdump(void const*, unsigned int, char const*)>
   863ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   863f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   863f4:	d65f03c0 	ret
   863f8:	f0000145 	adrp	x5, b1000 <_etext+0x158>
   863fc:	913280a5 	add	x5, x5, #0xca0
   86400:	17ffffed 	b	863b4 <CXHCIRing::DumpStatus(char const*)+0x44>
	...

0000000000086410 <CXHCIRootHub::CXHCIRootHub(unsigned int, CXHCIDevice*)>:
   86410:	b9000001 	str	w1, [x0]
   86414:	f9000402 	str	x2, [x0, #8]
   86418:	34000341 	cbz	w1, 86480 <CXHCIRootHub::CXHCIRootHub(unsigned int, CXHCIDevice*)+0x70>
   8641c:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   86420:	910003fd 	mov	x29, sp
   86424:	a90153f3 	stp	x19, x20, [sp, #16]
   86428:	52800013 	mov	w19, #0x0                   	// #0
   8642c:	a9025bf5 	stp	x21, x22, [sp, #32]
   86430:	aa0003f5 	mov	x21, x0
   86434:	d503201f 	nop
   86438:	d2800600 	mov	x0, #0x30                  	// #48
   8643c:	11000676 	add	w22, w19, #0x1
   86440:	94008788 	bl	a8260 <operator new(unsigned long)>
   86444:	2a1603e1 	mov	w1, w22
   86448:	f94006a2 	ldr	x2, [x21, #8]
   8644c:	aa0003f4 	mov	x20, x0
   86450:	94000128 	bl	868f0 <CXHCIRootPort::CXHCIRootPort(unsigned char, CXHCIDevice*)>
   86454:	b94002a0 	ldr	w0, [x21]
   86458:	2a1303e1 	mov	w1, w19
   8645c:	2a1603f3 	mov	w19, w22
   86460:	91000821 	add	x1, x1, #0x2
   86464:	f8217ab4 	str	x20, [x21, x1, lsl #3]
   86468:	6b16001f 	cmp	w0, w22
   8646c:	54fffe68 	b.hi	86438 <CXHCIRootHub::CXHCIRootHub(unsigned int, CXHCIDevice*)+0x28>  // b.pmore
   86470:	a94153f3 	ldp	x19, x20, [sp, #16]
   86474:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86478:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8647c:	d65f03c0 	ret
   86480:	d65f03c0 	ret
   86484:	d503201f 	nop
   86488:	d503201f 	nop
   8648c:	d503201f 	nop

0000000000086490 <CXHCIRootHub::~CXHCIRootHub()>:
   86490:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   86494:	910003fd 	mov	x29, sp
   86498:	f90013f5 	str	x21, [sp, #32]
   8649c:	aa0003f5 	mov	x21, x0
   864a0:	b9400000 	ldr	w0, [x0]
   864a4:	340001e0 	cbz	w0, 864e0 <CXHCIRootHub::~CXHCIRootHub()+0x50>
   864a8:	a90153f3 	stp	x19, x20, [sp, #16]
   864ac:	52800013 	mov	w19, #0x0                   	// #0
   864b0:	8b334eb4 	add	x20, x21, w19, uxtw #3
   864b4:	11000673 	add	w19, w19, #0x1
   864b8:	f9400a80 	ldr	x0, [x20, #16]
   864bc:	b4000080 	cbz	x0, 864cc <CXHCIRootHub::~CXHCIRootHub()+0x3c>
   864c0:	f9400001 	ldr	x1, [x0]
   864c4:	f9400421 	ldr	x1, [x1, #8]
   864c8:	d63f0020 	blr	x1
   864cc:	f9000a9f 	str	xzr, [x20, #16]
   864d0:	b94002a0 	ldr	w0, [x21]
   864d4:	6b13001f 	cmp	w0, w19
   864d8:	54fffec8 	b.hi	864b0 <CXHCIRootHub::~CXHCIRootHub()+0x20>  // b.pmore
   864dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   864e0:	f94013f5 	ldr	x21, [sp, #32]
   864e4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   864e8:	d65f03c0 	ret
   864ec:	d503201f 	nop

00000000000864f0 <CXHCIRootHub::Initialize()>:
   864f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   864f4:	910003fd 	mov	x29, sp
   864f8:	a90153f3 	stp	x19, x20, [sp, #16]
   864fc:	aa0003f4 	mov	x20, x0
   86500:	9400632c 	bl	9f1b0 <CKernelOptions::Get()>
   86504:	b4000340 	cbz	x0, 8656c <CXHCIRootHub::Initialize()+0x7c>
   86508:	940062da 	bl	9f070 <CKernelOptions::GetUSBPowerDelay() const>
   8650c:	2a0003f3 	mov	w19, w0
   86510:	340002e0 	cbz	w0, 8656c <CXHCIRootHub::Initialize()+0x7c>
   86514:	940082f7 	bl	a70f0 <CTimer::Get()>
   86518:	2a1303e0 	mov	w0, w19
   8651c:	52800013 	mov	w19, #0x0                   	// #0
   86520:	94008298 	bl	a6f80 <CTimer::SimpleMsDelay(unsigned int)>
   86524:	b9400280 	ldr	w0, [x20]
   86528:	350000e0 	cbnz	w0, 86544 <CXHCIRootHub::Initialize()+0x54>
   8652c:	14000024 	b	865bc <CXHCIRootHub::Initialize()+0xcc>
   86530:	940002fc 	bl	87120 <CXHCIRootPort::Initialize()>
   86534:	b9400280 	ldr	w0, [x20]
   86538:	11000673 	add	w19, w19, #0x1
   8653c:	6b13001f 	cmp	w0, w19
   86540:	540001a9 	b.ls	86574 <CXHCIRootHub::Initialize()+0x84>  // b.plast
   86544:	2a1303e1 	mov	w1, w19
   86548:	91000821 	add	x1, x1, #0x2
   8654c:	f8617a80 	ldr	x0, [x20, x1, lsl #3]
   86550:	b5ffff00 	cbnz	x0, 86530 <CXHCIRootHub::Initialize()+0x40>
   86554:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   86558:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   8655c:	91334021 	add	x1, x1, #0xcd0
   86560:	91338000 	add	x0, x0, #0xce0
   86564:	52800802 	mov	w2, #0x40                  	// #64
   86568:	94005df6 	bl	9dd40 <assertion_failed>
   8656c:	52802593 	mov	w19, #0x12c                 	// #300
   86570:	17ffffe9 	b	86514 <CXHCIRootHub::Initialize()+0x24>
   86574:	34000240 	cbz	w0, 865bc <CXHCIRootHub::Initialize()+0xcc>
   86578:	52800013 	mov	w19, #0x0                   	// #0
   8657c:	14000006 	b	86594 <CXHCIRootHub::Initialize()+0xa4>
   86580:	9400022c 	bl	86e30 <CXHCIRootPort::Configure()>
   86584:	b9400280 	ldr	w0, [x20]
   86588:	11000673 	add	w19, w19, #0x1
   8658c:	6b13001f 	cmp	w0, w19
   86590:	54000169 	b.ls	865bc <CXHCIRootHub::Initialize()+0xcc>  // b.plast
   86594:	2a1303e0 	mov	w0, w19
   86598:	91000800 	add	x0, x0, #0x2
   8659c:	f8607a80 	ldr	x0, [x20, x0, lsl #3]
   865a0:	b5ffff00 	cbnz	x0, 86580 <CXHCIRootHub::Initialize()+0x90>
   865a4:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   865a8:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   865ac:	91334021 	add	x1, x1, #0xcd0
   865b0:	91338000 	add	x0, x0, #0xce0
   865b4:	528008c2 	mov	w2, #0x46                  	// #70
   865b8:	94005de2 	bl	9dd40 <assertion_failed>
   865bc:	52800020 	mov	w0, #0x1                   	// #1
   865c0:	a94153f3 	ldp	x19, x20, [sp, #16]
   865c4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   865c8:	d65f03c0 	ret
   865cc:	d503201f 	nop

00000000000865d0 <CXHCIRootHub::ReScanDevices()>:
   865d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   865d4:	910003fd 	mov	x29, sp
   865d8:	a90153f3 	stp	x19, x20, [sp, #16]
   865dc:	aa0003f4 	mov	x20, x0
   865e0:	b9400000 	ldr	w0, [x0]
   865e4:	f90013f5 	str	x21, [sp, #32]
   865e8:	340002e0 	cbz	w0, 86644 <CXHCIRootHub::ReScanDevices()+0x74>
   865ec:	52800013 	mov	w19, #0x0                   	// #0
   865f0:	52800015 	mov	w21, #0x0                   	// #0
   865f4:	1400000a 	b	8661c <CXHCIRootHub::ReScanDevices()+0x4c>
   865f8:	f9400001 	ldr	x1, [x0]
   865fc:	11000673 	add	w19, w19, #0x1
   86600:	f9400821 	ldr	x1, [x1, #16]
   86604:	d63f0020 	blr	x1
   86608:	b9400281 	ldr	w1, [x20]
   8660c:	72001c00 	ands	w0, w0, #0xff
   86610:	1a8002b5 	csel	w21, w21, w0, eq	// eq = none
   86614:	6b13003f 	cmp	w1, w19
   86618:	54000189 	b.ls	86648 <CXHCIRootHub::ReScanDevices()+0x78>  // b.plast
   8661c:	2a1303e1 	mov	w1, w19
   86620:	91000821 	add	x1, x1, #0x2
   86624:	f8617a80 	ldr	x0, [x20, x1, lsl #3]
   86628:	b5fffe80 	cbnz	x0, 865f8 <CXHCIRootHub::ReScanDevices()+0x28>
   8662c:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   86630:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   86634:	91334021 	add	x1, x1, #0xcd0
   86638:	91338000 	add	x0, x0, #0xce0
   8663c:	52800a62 	mov	w2, #0x53                  	// #83
   86640:	94005dc0 	bl	9dd40 <assertion_failed>
   86644:	52800015 	mov	w21, #0x0                   	// #0
   86648:	2a1503e0 	mov	w0, w21
   8664c:	a94153f3 	ldp	x19, x20, [sp, #16]
   86650:	f94013f5 	ldr	x21, [sp, #32]
   86654:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86658:	d65f03c0 	ret
   8665c:	d503201f 	nop

0000000000086660 <CXHCIRootHub::StatusChanged(unsigned char)>:
   86660:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   86664:	910003fd 	mov	x29, sp
   86668:	12001c21 	and	w1, w1, #0xff
   8666c:	51000421 	sub	w1, w1, #0x1
   86670:	b9400002 	ldr	w2, [x0]
   86674:	6b01005f 	cmp	w2, w1
   86678:	540000c9 	b.ls	86690 <CXHCIRootHub::StatusChanged(unsigned char)+0x30>  // b.plast
   8667c:	91000821 	add	x1, x1, #0x2
   86680:	f8617800 	ldr	x0, [x0, x1, lsl #3]
   86684:	b4000120 	cbz	x0, 866a8 <CXHCIRootHub::StatusChanged(unsigned char)+0x48>
   86688:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8668c:	140000d9 	b	869f0 <CXHCIRootPort::StatusChanged()>
   86690:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   86694:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   86698:	91334021 	add	x1, x1, #0xcd0
   8669c:	9133e000 	add	x0, x0, #0xcf8
   866a0:	52800c02 	mov	w2, #0x60                  	// #96
   866a4:	94005da7 	bl	9dd40 <assertion_failed>
   866a8:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   866ac:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   866b0:	91334021 	add	x1, x1, #0xcd0
   866b4:	91338000 	add	x0, x0, #0xce0
   866b8:	52800c22 	mov	w2, #0x61                  	// #97
   866bc:	94005da1 	bl	9dd40 <assertion_failed>

00000000000866c0 <CXHCIRootHub::DumpStatus()>:
   866c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   866c4:	910003fd 	mov	x29, sp
   866c8:	a90153f3 	stp	x19, x20, [sp, #16]
   866cc:	aa0003f4 	mov	x20, x0
   866d0:	b9400000 	ldr	w0, [x0]
   866d4:	34000160 	cbz	w0, 86700 <CXHCIRootHub::DumpStatus()+0x40>
   866d8:	52800013 	mov	w19, #0x0                   	// #0
   866dc:	d503201f 	nop
   866e0:	2a1303e1 	mov	w1, w19
   866e4:	11000673 	add	w19, w19, #0x1
   866e8:	91000821 	add	x1, x1, #0x2
   866ec:	f8617a80 	ldr	x0, [x20, x1, lsl #3]
   866f0:	94000108 	bl	86b10 <CXHCIRootPort::DumpStatus()>
   866f4:	b9400280 	ldr	w0, [x20]
   866f8:	6b13001f 	cmp	w0, w19
   866fc:	54ffff28 	b.hi	866e0 <CXHCIRootHub::DumpStatus()+0x20>  // b.pmore
   86700:	a94153f3 	ldp	x19, x20, [sp, #16]
   86704:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86708:	d65f03c0 	ret
   8670c:	00000000 	udf	#0

0000000000086710 <CXHCIRootPort::~CXHCIRootPort()>:
   86710:	aa0003e1 	mov	x1, x0
   86714:	90000182 	adrp	x2, b6000 <From+0x98>
   86718:	91096042 	add	x2, x2, #0x258
   8671c:	f9401000 	ldr	x0, [x0, #32]
   86720:	f9000022 	str	x2, [x1]
   86724:	b40000a0 	cbz	x0, 86738 <CXHCIRootPort::~CXHCIRootPort()+0x28>
   86728:	f9400001 	ldr	x1, [x0]
   8672c:	f9400421 	ldr	x1, [x1, #8]
   86730:	aa0103f0 	mov	x16, x1
   86734:	d61f0200 	br	x16
   86738:	d65f03c0 	ret
   8673c:	d503201f 	nop

0000000000086740 <CXHCIRootPort::RemoveDevice()>:
   86740:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   86744:	910003fd 	mov	x29, sp
   86748:	f9000bf3 	str	x19, [sp, #16]
   8674c:	aa0003f3 	mov	x19, x0
   86750:	f9401000 	ldr	x0, [x0, #32]
   86754:	b4000080 	cbz	x0, 86764 <CXHCIRootPort::RemoveDevice()+0x24>
   86758:	f9400001 	ldr	x1, [x0]
   8675c:	f9400421 	ldr	x1, [x1, #8]
   86760:	d63f0020 	blr	x1
   86764:	52800020 	mov	w0, #0x1                   	// #1
   86768:	f900127f 	str	xzr, [x19, #32]
   8676c:	f9400bf3 	ldr	x19, [sp, #16]
   86770:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86774:	d65f03c0 	ret
   86778:	d503201f 	nop
   8677c:	d503201f 	nop

0000000000086780 <CXHCIRootPort::GetPortID() const>:
   86780:	b9400800 	ldr	w0, [x0, #8]
   86784:	7100101f 	cmp	w0, #0x4
   86788:	54000068 	b.hi	86794 <CXHCIRootPort::GetPortID() const+0x14>  // b.pmore
   8678c:	11000400 	add	w0, w0, #0x1
   86790:	d65f03c0 	ret
   86794:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   86798:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   8679c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   867a0:	91344021 	add	x1, x1, #0xd10
   867a4:	910003fd 	mov	x29, sp
   867a8:	9134a000 	add	x0, x0, #0xd28
   867ac:	52801302 	mov	w2, #0x98                  	// #152
   867b0:	94005d64 	bl	9dd40 <assertion_failed>
   867b4:	d503201f 	nop
   867b8:	d503201f 	nop
   867bc:	d503201f 	nop

00000000000867c0 <CXHCIRootPort::~CXHCIRootPort()>:
   867c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   867c4:	910003fd 	mov	x29, sp
   867c8:	90000181 	adrp	x1, b6000 <From+0x98>
   867cc:	91096021 	add	x1, x1, #0x258
   867d0:	f9000bf3 	str	x19, [sp, #16]
   867d4:	aa0003f3 	mov	x19, x0
   867d8:	f9401000 	ldr	x0, [x0, #32]
   867dc:	f9000261 	str	x1, [x19]
   867e0:	b4000080 	cbz	x0, 867f0 <CXHCIRootPort::~CXHCIRootPort()+0x30>
   867e4:	f9400001 	ldr	x1, [x0]
   867e8:	f9400421 	ldr	x1, [x1, #8]
   867ec:	d63f0020 	blr	x1
   867f0:	aa1303e0 	mov	x0, x19
   867f4:	d2800601 	mov	x1, #0x30                  	// #48
   867f8:	f9400bf3 	ldr	x19, [sp, #16]
   867fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86800:	140086c0 	b	a8300 <operator delete(void*, unsigned long)>
   86804:	d503201f 	nop
   86808:	d503201f 	nop
   8680c:	d503201f 	nop

0000000000086810 <CXHCIRootPort::HandlePortStatusChange()>:
   86810:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   86814:	910003fd 	mov	x29, sp
   86818:	f9000bf3 	str	x19, [sp, #16]
   8681c:	aa0003f3 	mov	x19, x0
   86820:	f9400c00 	ldr	x0, [x0, #24]
   86824:	b40003e0 	cbz	x0, 868a0 <CXHCIRootPort::HandlePortStatusChange()+0x90>
   86828:	b9400a61 	ldr	w1, [x19, #8]
   8682c:	7100103f 	cmp	w1, #0x4
   86830:	54000448 	b.hi	868b8 <CXHCIRootPort::HandlePortStatusChange()+0xa8>  // b.pmore
   86834:	52800002 	mov	w2, #0x0                   	// #0
   86838:	97fffc86 	bl	85a50 <CXHCIMMIOSpace::pt_read32(unsigned int, unsigned int)>
   8683c:	37000200 	tbnz	w0, #0, 8687c <CXHCIRootPort::HandlePortStatusChange()+0x6c>
   86840:	f9401260 	ldr	x0, [x19, #32]
   86844:	b4000160 	cbz	x0, 86870 <CXHCIRootPort::HandlePortStatusChange()+0x60>
   86848:	f9400262 	ldr	x2, [x19]
   8684c:	90000001 	adrp	x1, 86000 <CXHCIRing::GetTRBCount() const+0x20>
   86850:	911d0021 	add	x1, x1, #0x740
   86854:	f9400c42 	ldr	x2, [x2, #24]
   86858:	eb01005f 	cmp	x2, x1
   8685c:	540003a1 	b.ne	868d0 <CXHCIRootPort::HandlePortStatusChange()+0xc0>  // b.any
   86860:	f9400001 	ldr	x1, [x0]
   86864:	f9400421 	ldr	x1, [x1, #8]
   86868:	d63f0020 	blr	x1
   8686c:	f900127f 	str	xzr, [x19, #32]
   86870:	f9400bf3 	ldr	x19, [sp, #16]
   86874:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86878:	d65f03c0 	ret
   8687c:	f9401260 	ldr	x0, [x19, #32]
   86880:	b5ffff80 	cbnz	x0, 86870 <CXHCIRootPort::HandlePortStatusChange()+0x60>
   86884:	f9400261 	ldr	x1, [x19]
   86888:	aa1303e0 	mov	x0, x19
   8688c:	f9400bf3 	ldr	x19, [sp, #16]
   86890:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86894:	f9400821 	ldr	x1, [x1, #16]
   86898:	aa0103f0 	mov	x16, x1
   8689c:	d61f0200 	br	x16
   868a0:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   868a4:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   868a8:	91344021 	add	x1, x1, #0xd10
   868ac:	9127c000 	add	x0, x0, #0x9f0
   868b0:	52802102 	mov	w2, #0x108                 	// #264
   868b4:	94005d23 	bl	9dd40 <assertion_failed>
   868b8:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   868bc:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   868c0:	91344021 	add	x1, x1, #0xd10
   868c4:	9134a000 	add	x0, x0, #0xd28
   868c8:	52802122 	mov	w2, #0x109                 	// #265
   868cc:	94005d1d 	bl	9dd40 <assertion_failed>
   868d0:	aa1303e0 	mov	x0, x19
   868d4:	aa0203f0 	mov	x16, x2
   868d8:	f9400bf3 	ldr	x19, [sp, #16]
   868dc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   868e0:	d61f0200 	br	x16
   868e4:	d503201f 	nop
   868e8:	d503201f 	nop
   868ec:	d503201f 	nop

00000000000868f0 <CXHCIRootPort::CXHCIRootPort(unsigned char, CXHCIDevice*)>:
   868f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   868f4:	12001c21 	and	w1, w1, #0xff
   868f8:	910003fd 	mov	x29, sp
   868fc:	a90153f3 	stp	x19, x20, [sp, #16]
   86900:	aa0003f3 	mov	x19, x0
   86904:	51000434 	sub	w20, w1, #0x1
   86908:	90000181 	adrp	x1, b6000 <From+0x98>
   8690c:	91096021 	add	x1, x1, #0x258
   86910:	aa0203e0 	mov	x0, x2
   86914:	f9000261 	str	x1, [x19]
   86918:	b9000a74 	str	w20, [x19, #8]
   8691c:	12001e94 	and	w20, w20, #0xff
   86920:	f9000a62 	str	x2, [x19, #16]
   86924:	97fff2e3 	bl	834b0 <CXHCIDevice::GetMMIOSpace()>
   86928:	52800021 	mov	w1, #0x1                   	// #1
   8692c:	7100129f 	cmp	w20, #0x4
   86930:	a901fe60 	stp	x0, xzr, [x19, #24]
   86934:	b9002a61 	str	w1, [x19, #40]
   86938:	54000088 	b.hi	86948 <CXHCIRootPort::CXHCIRootPort(unsigned char, CXHCIDevice*)+0x58>  // b.pmore
   8693c:	a94153f3 	ldp	x19, x20, [sp, #16]
   86940:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86944:	d65f03c0 	ret
   86948:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   8694c:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   86950:	91344021 	add	x1, x1, #0xd10
   86954:	91354000 	add	x0, x0, #0xd50
   86958:	52800442 	mov	w2, #0x22                  	// #34
   8695c:	94005cf9 	bl	9dd40 <assertion_failed>

0000000000086960 <CXHCIRootPort::GetPortSpeed()>:
   86960:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   86964:	aa0003e1 	mov	x1, x0
   86968:	910003fd 	mov	x29, sp
   8696c:	f9400c00 	ldr	x0, [x0, #24]
   86970:	b4000240 	cbz	x0, 869b8 <CXHCIRootPort::GetPortSpeed()+0x58>
   86974:	b9400821 	ldr	w1, [x1, #8]
   86978:	7100103f 	cmp	w1, #0x4
   8697c:	540002a8 	b.hi	869d0 <CXHCIRootPort::GetPortSpeed()+0x70>  // b.pmore
   86980:	52800002 	mov	w2, #0x0                   	// #0
   86984:	97fffc33 	bl	85a50 <CXHCIMMIOSpace::pt_read32(unsigned int, unsigned int)>
   86988:	2a0003e1 	mov	w1, w0
   8698c:	52800080 	mov	w0, #0x4                   	// #4
   86990:	d34a3421 	ubfx	x1, x1, #10, #4
   86994:	51000422 	sub	w2, w1, #0x1
   86998:	12001c43 	and	w3, w2, #0xff
   8699c:	71000c7f 	cmp	w3, #0x3
   869a0:	54000088 	b.hi	869b0 <CXHCIRootPort::GetPortSpeed()+0x50>  // b.pmore
   869a4:	71000c3f 	cmp	w1, #0x3
   869a8:	52000040 	eor	w0, w2, #0x1
   869ac:	1a823000 	csel	w0, w0, w2, cc	// cc = lo, ul, last
   869b0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   869b4:	d65f03c0 	ret
   869b8:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   869bc:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   869c0:	91344021 	add	x1, x1, #0xd10
   869c4:	9127c000 	add	x0, x0, #0x9f0
   869c8:	528013e2 	mov	w2, #0x9f                  	// #159
   869cc:	94005cdd 	bl	9dd40 <assertion_failed>
   869d0:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   869d4:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   869d8:	91344021 	add	x1, x1, #0xd10
   869dc:	9134a000 	add	x0, x0, #0xd28
   869e0:	52801402 	mov	w2, #0xa0                  	// #160
   869e4:	94005cd7 	bl	9dd40 <assertion_failed>
   869e8:	d503201f 	nop
   869ec:	d503201f 	nop

00000000000869f0 <CXHCIRootPort::StatusChanged()>:
   869f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   869f4:	910003fd 	mov	x29, sp
   869f8:	a90153f3 	stp	x19, x20, [sp, #16]
   869fc:	aa0003f3 	mov	x19, x0
   86a00:	f9400c00 	ldr	x0, [x0, #24]
   86a04:	b40005e0 	cbz	x0, 86ac0 <CXHCIRootPort::StatusChanged()+0xd0>
   86a08:	b9400a61 	ldr	w1, [x19, #8]
   86a0c:	7100103f 	cmp	w1, #0x4
   86a10:	54000648 	b.hi	86ad8 <CXHCIRootPort::StatusChanged()+0xe8>  // b.pmore
   86a14:	b9402a62 	ldr	w2, [x19, #40]
   86a18:	35000402 	cbnz	w2, 86a98 <CXHCIRootPort::StatusChanged()+0xa8>
   86a1c:	52800002 	mov	w2, #0x0                   	// #0
   86a20:	97fffc0c 	bl	85a50 <CXHCIMMIOSpace::pt_read32(unsigned int, unsigned int)>
   86a24:	2a0003f4 	mov	w20, w0
   86a28:	940063fa 	bl	9fa10 <CLogger::Get()>
   86a2c:	b9400a64 	ldr	w4, [x19, #8]
   86a30:	f0000143 	adrp	x3, b1000 <_etext+0x158>
   86a34:	90000181 	adrp	x1, b6000 <From+0x98>
   86a38:	2a1403e5 	mov	w5, w20
   86a3c:	9135c063 	add	x3, x3, #0xd70
   86a40:	910a2021 	add	x1, x1, #0x288
   86a44:	52800082 	mov	w2, #0x4                   	// #4
   86a48:	11000484 	add	w4, w4, #0x1
   86a4c:	940065dd 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   86a50:	b9400a61 	ldr	w1, [x19, #8]
   86a54:	121e7a83 	and	w3, w20, #0xfffffffd
   86a58:	52800002 	mov	w2, #0x0                   	// #0
   86a5c:	f9400e60 	ldr	x0, [x19, #24]
   86a60:	97fffc64 	bl	85bf0 <CXHCIMMIOSpace::pt_write32(unsigned int, unsigned int, unsigned int)>
   86a64:	b9402a60 	ldr	w0, [x19, #40]
   86a68:	35000140 	cbnz	w0, 86a90 <CXHCIRootPort::StatusChanged()+0xa0>
   86a6c:	f9400a60 	ldr	x0, [x19, #16]
   86a70:	b4000400 	cbz	x0, 86af0 <CXHCIRootPort::StatusChanged()+0x100>
   86a74:	97ffe9ff 	bl	81270 <CUSBHostController::IsPlugAndPlay() const>
   86a78:	72001c1f 	tst	w0, #0xff
   86a7c:	54000040 	b.eq	86a84 <CXHCIRootPort::StatusChanged()+0x94>  // b.none
   86a80:	37880174 	tbnz	w20, #17, 86aac <CXHCIRootPort::StatusChanged()+0xbc>
   86a84:	a94153f3 	ldp	x19, x20, [sp, #16]
   86a88:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86a8c:	d65f03c0 	ret
   86a90:	940089dc 	bl	a9200 <LeaveCritical>
   86a94:	17fffff6 	b	86a6c <CXHCIRootPort::StatusChanged()+0x7c>
   86a98:	2a0203e0 	mov	w0, w2
   86a9c:	940089a9 	bl	a9140 <EnterCritical>
   86aa0:	b9400a61 	ldr	w1, [x19, #8]
   86aa4:	f9400e60 	ldr	x0, [x19, #24]
   86aa8:	17ffffdd 	b	86a1c <CXHCIRootPort::StatusChanged()+0x2c>
   86aac:	aa1303e1 	mov	x1, x19
   86ab0:	a94153f3 	ldp	x19, x20, [sp, #16]
   86ab4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86ab8:	f9400820 	ldr	x0, [x1, #16]
   86abc:	17ffe9f1 	b	81280 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)>
   86ac0:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   86ac4:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   86ac8:	91344021 	add	x1, x1, #0xd10
   86acc:	9127c000 	add	x0, x0, #0x9f0
   86ad0:	52801bc2 	mov	w2, #0xde                  	// #222
   86ad4:	94005c9b 	bl	9dd40 <assertion_failed>
   86ad8:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   86adc:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   86ae0:	91344021 	add	x1, x1, #0xd10
   86ae4:	9134a000 	add	x0, x0, #0xd28
   86ae8:	52801be2 	mov	w2, #0xdf                  	// #223
   86aec:	94005c95 	bl	9dd40 <assertion_failed>
   86af0:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   86af4:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   86af8:	91344021 	add	x1, x1, #0xd10
   86afc:	91246000 	add	x0, x0, #0x918
   86b00:	52801dc2 	mov	w2, #0xee                  	// #238
   86b04:	94005c8f 	bl	9dd40 <assertion_failed>
   86b08:	d503201f 	nop
   86b0c:	d503201f 	nop

0000000000086b10 <CXHCIRootPort::DumpStatus()>:
   86b10:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   86b14:	910003fd 	mov	x29, sp
   86b18:	a90153f3 	stp	x19, x20, [sp, #16]
   86b1c:	aa0003f3 	mov	x19, x0
   86b20:	a9025bf5 	stp	x21, x22, [sp, #32]
   86b24:	940063bb 	bl	9fa10 <CLogger::Get()>
   86b28:	b9400a76 	ldr	w22, [x19, #8]
   86b2c:	52800002 	mov	w2, #0x0                   	// #0
   86b30:	aa0003f4 	mov	x20, x0
   86b34:	f9400e60 	ldr	x0, [x19, #24]
   86b38:	2a1603e1 	mov	w1, w22
   86b3c:	97fffbc5 	bl	85a50 <CXHCIMMIOSpace::pt_read32(unsigned int, unsigned int)>
   86b40:	b9400a61 	ldr	w1, [x19, #8]
   86b44:	52800102 	mov	w2, #0x8                   	// #8
   86b48:	2a0003f5 	mov	w21, w0
   86b4c:	f9400e60 	ldr	x0, [x19, #24]
   86b50:	97fffbc0 	bl	85a50 <CXHCIMMIOSpace::pt_read32(unsigned int, unsigned int)>
   86b54:	f0000143 	adrp	x3, b1000 <_etext+0x158>
   86b58:	90000181 	adrp	x1, b6000 <From+0x98>
   86b5c:	2a0003e6 	mov	w6, w0
   86b60:	110006c4 	add	w4, w22, #0x1
   86b64:	aa1403e0 	mov	x0, x20
   86b68:	2a1503e5 	mov	w5, w21
   86b6c:	91362063 	add	x3, x3, #0xd88
   86b70:	910a2021 	add	x1, x1, #0x288
   86b74:	52800082 	mov	w2, #0x4                   	// #4
   86b78:	94006592 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   86b7c:	f9401260 	ldr	x0, [x19, #32]
   86b80:	b40000a0 	cbz	x0, 86b94 <CXHCIRootPort::DumpStatus()+0x84>
   86b84:	a94153f3 	ldp	x19, x20, [sp, #16]
   86b88:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86b8c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86b90:	14000418 	b	87bf0 <CXHCIUSBDevice::DumpStatus()>
   86b94:	a94153f3 	ldp	x19, x20, [sp, #16]
   86b98:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86b9c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86ba0:	d65f03c0 	ret
   86ba4:	d503201f 	nop
   86ba8:	d503201f 	nop
   86bac:	d503201f 	nop

0000000000086bb0 <CXHCIRootPort::IsConnected()>:
   86bb0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   86bb4:	aa0003e1 	mov	x1, x0
   86bb8:	910003fd 	mov	x29, sp
   86bbc:	f9400c00 	ldr	x0, [x0, #24]
   86bc0:	b4000120 	cbz	x0, 86be4 <CXHCIRootPort::IsConnected()+0x34>
   86bc4:	b9400821 	ldr	w1, [x1, #8]
   86bc8:	7100103f 	cmp	w1, #0x4
   86bcc:	54000188 	b.hi	86bfc <CXHCIRootPort::IsConnected()+0x4c>  // b.pmore
   86bd0:	52800002 	mov	w2, #0x0                   	// #0
   86bd4:	97fffb9f 	bl	85a50 <CXHCIMMIOSpace::pt_read32(unsigned int, unsigned int)>
   86bd8:	12000000 	and	w0, w0, #0x1
   86bdc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   86be0:	d65f03c0 	ret
   86be4:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   86be8:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   86bec:	91344021 	add	x1, x1, #0xd10
   86bf0:	9127c000 	add	x0, x0, #0x9f0
   86bf4:	52802102 	mov	w2, #0x108                 	// #264
   86bf8:	94005c52 	bl	9dd40 <assertion_failed>
   86bfc:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   86c00:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   86c04:	91344021 	add	x1, x1, #0xd10
   86c08:	9134a000 	add	x0, x0, #0xd28
   86c0c:	52802122 	mov	w2, #0x109                 	// #265
   86c10:	94005c4c 	bl	9dd40 <assertion_failed>
   86c14:	d503201f 	nop
   86c18:	d503201f 	nop
   86c1c:	d503201f 	nop

0000000000086c20 <CXHCIRootPort::Reset(unsigned int)>:
   86c20:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   86c24:	910003fd 	mov	x29, sp
   86c28:	a90153f3 	stp	x19, x20, [sp, #16]
   86c2c:	aa0003f3 	mov	x19, x0
   86c30:	f9400c00 	ldr	x0, [x0, #24]
   86c34:	b4000440 	cbz	x0, 86cbc <CXHCIRootPort::Reset(unsigned int)+0x9c>
   86c38:	2a0103f4 	mov	w20, w1
   86c3c:	b9400a61 	ldr	w1, [x19, #8]
   86c40:	7100103f 	cmp	w1, #0x4
   86c44:	54000488 	b.hi	86cd4 <CXHCIRootPort::Reset(unsigned int)+0xb4>  // b.pmore
   86c48:	b9402a62 	ldr	w2, [x19, #40]
   86c4c:	350002a2 	cbnz	w2, 86ca0 <CXHCIRootPort::Reset(unsigned int)+0x80>
   86c50:	52800002 	mov	w2, #0x0                   	// #0
   86c54:	97fffb7f 	bl	85a50 <CXHCIMMIOSpace::pt_read32(unsigned int, unsigned int)>
   86c58:	121e7803 	and	w3, w0, #0xfffffffd
   86c5c:	b9400a61 	ldr	w1, [x19, #8]
   86c60:	52800002 	mov	w2, #0x0                   	// #0
   86c64:	321c0063 	orr	w3, w3, #0x10
   86c68:	f9400e60 	ldr	x0, [x19, #24]
   86c6c:	97fffbe1 	bl	85bf0 <CXHCIMMIOSpace::pt_write32(unsigned int, unsigned int, unsigned int)>
   86c70:	b9402a60 	ldr	w0, [x19, #40]
   86c74:	35000200 	cbnz	w0, 86cb4 <CXHCIRootPort::Reset(unsigned int)+0x94>
   86c78:	b9400a61 	ldr	w1, [x19, #8]
   86c7c:	2a1403e4 	mov	w4, w20
   86c80:	52800003 	mov	w3, #0x0                   	// #0
   86c84:	52800202 	mov	w2, #0x10                  	// #16
   86c88:	f9400e60 	ldr	x0, [x19, #24]
   86c8c:	a94153f3 	ldp	x19, x20, [sp, #16]
   86c90:	11010021 	add	w1, w1, #0x40
   86c94:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86c98:	531c6c21 	lsl	w1, w1, #4
   86c9c:	17fffc1d 	b	85d10 <CXHCIMMIOSpace::op_wait32(unsigned int, unsigned int, unsigned int, unsigned int)>
   86ca0:	2a0203e0 	mov	w0, w2
   86ca4:	94008927 	bl	a9140 <EnterCritical>
   86ca8:	b9400a61 	ldr	w1, [x19, #8]
   86cac:	f9400e60 	ldr	x0, [x19, #24]
   86cb0:	17ffffe8 	b	86c50 <CXHCIRootPort::Reset(unsigned int)+0x30>
   86cb4:	94008953 	bl	a9200 <LeaveCritical>
   86cb8:	17fffff0 	b	86c78 <CXHCIRootPort::Reset(unsigned int)+0x58>
   86cbc:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   86cc0:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   86cc4:	91344021 	add	x1, x1, #0xd10
   86cc8:	9127c000 	add	x0, x0, #0x9f0
   86ccc:	52802222 	mov	w2, #0x111                 	// #273
   86cd0:	94005c1c 	bl	9dd40 <assertion_failed>
   86cd4:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   86cd8:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   86cdc:	91344021 	add	x1, x1, #0xd10
   86ce0:	9134a000 	add	x0, x0, #0xd28
   86ce4:	52802242 	mov	w2, #0x112                 	// #274
   86ce8:	94005c16 	bl	9dd40 <assertion_failed>
   86cec:	d503201f 	nop

0000000000086cf0 <CXHCIRootPort::WaitForU0State(unsigned int)>:
   86cf0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   86cf4:	aa0003e2 	mov	x2, x0
   86cf8:	910003fd 	mov	x29, sp
   86cfc:	f9400c00 	ldr	x0, [x0, #24]
   86d00:	b4000160 	cbz	x0, 86d2c <CXHCIRootPort::WaitForU0State(unsigned int)+0x3c>
   86d04:	b9400842 	ldr	w2, [x2, #8]
   86d08:	7100105f 	cmp	w2, #0x4
   86d0c:	540001c8 	b.hi	86d44 <CXHCIRootPort::WaitForU0State(unsigned int)+0x54>  // b.pmore
   86d10:	11010042 	add	w2, w2, #0x40
   86d14:	2a0103e4 	mov	w4, w1
   86d18:	a8c17bfd 	ldp	x29, x30, [sp], #16
   86d1c:	531c6c41 	lsl	w1, w2, #4
   86d20:	52800003 	mov	w3, #0x0                   	// #0
   86d24:	52803c02 	mov	w2, #0x1e0                 	// #480
   86d28:	17fffbfa 	b	85d10 <CXHCIMMIOSpace::op_wait32(unsigned int, unsigned int, unsigned int, unsigned int)>
   86d2c:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   86d30:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   86d34:	91344021 	add	x1, x1, #0xd10
   86d38:	9127c000 	add	x0, x0, #0x9f0
   86d3c:	528024a2 	mov	w2, #0x125                 	// #293
   86d40:	94005c00 	bl	9dd40 <assertion_failed>
   86d44:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   86d48:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   86d4c:	91344021 	add	x1, x1, #0xd10
   86d50:	9134a000 	add	x0, x0, #0xd28
   86d54:	528024c2 	mov	w2, #0x126                 	// #294
   86d58:	94005bfa 	bl	9dd40 <assertion_failed>
   86d5c:	d503201f 	nop

0000000000086d60 <CXHCIRootPort::PowerOffOnOverCurrent()>:
   86d60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   86d64:	910003fd 	mov	x29, sp
   86d68:	a90153f3 	stp	x19, x20, [sp, #16]
   86d6c:	aa0003f3 	mov	x19, x0
   86d70:	f9400c00 	ldr	x0, [x0, #24]
   86d74:	b4000440 	cbz	x0, 86dfc <CXHCIRootPort::PowerOffOnOverCurrent()+0x9c>
   86d78:	b9400a61 	ldr	w1, [x19, #8]
   86d7c:	7100103f 	cmp	w1, #0x4
   86d80:	540004a8 	b.hi	86e14 <CXHCIRootPort::PowerOffOnOverCurrent()+0xb4>  // b.pmore
   86d84:	b9402a62 	ldr	w2, [x19, #40]
   86d88:	35000302 	cbnz	w2, 86de8 <CXHCIRootPort::PowerOffOnOverCurrent()+0x88>
   86d8c:	52800002 	mov	w2, #0x0                   	// #0
   86d90:	97fffb30 	bl	85a50 <CXHCIMMIOSpace::pt_read32(unsigned int, unsigned int)>
   86d94:	37180100 	tbnz	w0, #3, 86db4 <CXHCIRootPort::PowerOffOnOverCurrent()+0x54>
   86d98:	b9402a60 	ldr	w0, [x19, #40]
   86d9c:	52800014 	mov	w20, #0x0                   	// #0
   86da0:	350001a0 	cbnz	w0, 86dd4 <CXHCIRootPort::PowerOffOnOverCurrent()+0x74>
   86da4:	2a1403e0 	mov	w0, w20
   86da8:	a94153f3 	ldp	x19, x20, [sp, #16]
   86dac:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86db0:	d65f03c0 	ret
   86db4:	12167803 	and	w3, w0, #0xfffffdff
   86db8:	b9400a61 	ldr	w1, [x19, #8]
   86dbc:	52800002 	mov	w2, #0x0                   	// #0
   86dc0:	52800034 	mov	w20, #0x1                   	// #1
   86dc4:	f9400e60 	ldr	x0, [x19, #24]
   86dc8:	97fffb8a 	bl	85bf0 <CXHCIMMIOSpace::pt_write32(unsigned int, unsigned int, unsigned int)>
   86dcc:	b9402a60 	ldr	w0, [x19, #40]
   86dd0:	34fffea0 	cbz	w0, 86da4 <CXHCIRootPort::PowerOffOnOverCurrent()+0x44>
   86dd4:	9400890b 	bl	a9200 <LeaveCritical>
   86dd8:	2a1403e0 	mov	w0, w20
   86ddc:	a94153f3 	ldp	x19, x20, [sp, #16]
   86de0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86de4:	d65f03c0 	ret
   86de8:	2a0203e0 	mov	w0, w2
   86dec:	940088d5 	bl	a9140 <EnterCritical>
   86df0:	b9400a61 	ldr	w1, [x19, #8]
   86df4:	f9400e60 	ldr	x0, [x19, #24]
   86df8:	17ffffe5 	b	86d8c <CXHCIRootPort::PowerOffOnOverCurrent()+0x2c>
   86dfc:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   86e00:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   86e04:	91344021 	add	x1, x1, #0xd10
   86e08:	9127c000 	add	x0, x0, #0x9f0
   86e0c:	52802642 	mov	w2, #0x132                 	// #306
   86e10:	94005bcc 	bl	9dd40 <assertion_failed>
   86e14:	f0000141 	adrp	x1, b1000 <_etext+0x158>
   86e18:	f0000140 	adrp	x0, b1000 <_etext+0x158>
   86e1c:	91344021 	add	x1, x1, #0xd10
   86e20:	9134a000 	add	x0, x0, #0xd28
   86e24:	52802662 	mov	w2, #0x133                 	// #307
   86e28:	94005bc6 	bl	9dd40 <assertion_failed>
   86e2c:	d503201f 	nop

0000000000086e30 <CXHCIRootPort::Configure()>:
   86e30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   86e34:	910003fd 	mov	x29, sp
   86e38:	a90153f3 	stp	x19, x20, [sp, #16]
   86e3c:	aa0003f3 	mov	x19, x0
   86e40:	f9401000 	ldr	x0, [x0, #32]
   86e44:	b40006a0 	cbz	x0, 86f18 <CXHCIRootPort::Configure()+0xe8>
   86e48:	f9400001 	ldr	x1, [x0]
   86e4c:	f9400c21 	ldr	x1, [x1, #24]
   86e50:	d63f0020 	blr	x1
   86e54:	72001c14 	ands	w20, w0, #0xff
   86e58:	54000240 	b.eq	86ea0 <CXHCIRootPort::Configure()+0x70>  // b.none
   86e5c:	aa1303e0 	mov	x0, x19
   86e60:	97ffffc0 	bl	86d60 <CXHCIRootPort::PowerOffOnOverCurrent()>
   86e64:	72001c1f 	tst	w0, #0xff
   86e68:	54000401 	b.ne	86ee8 <CXHCIRootPort::Configure()+0xb8>  // b.any
   86e6c:	940062e9 	bl	9fa10 <CLogger::Get()>
   86e70:	b9400a64 	ldr	w4, [x19, #8]
   86e74:	f0000143 	adrp	x3, b1000 <_etext+0x158>
   86e78:	90000181 	adrp	x1, b6000 <From+0x98>
   86e7c:	91116063 	add	x3, x3, #0x458
   86e80:	910a2021 	add	x1, x1, #0x288
   86e84:	52800082 	mov	w2, #0x4                   	// #4
   86e88:	11000484 	add	w4, w4, #0x1
   86e8c:	940064cd 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   86e90:	2a1403e0 	mov	w0, w20
   86e94:	a94153f3 	ldp	x19, x20, [sp, #16]
   86e98:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86e9c:	d65f03c0 	ret
   86ea0:	940062dc 	bl	9fa10 <CLogger::Get()>
   86ea4:	f0000143 	adrp	x3, b1000 <_etext+0x158>
   86ea8:	90000181 	adrp	x1, b6000 <From+0x98>
   86eac:	9136a063 	add	x3, x3, #0xda8
   86eb0:	910a2021 	add	x1, x1, #0x288
   86eb4:	52800042 	mov	w2, #0x2                   	// #2
   86eb8:	940064c2 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   86ebc:	f9401260 	ldr	x0, [x19, #32]
   86ec0:	b4000080 	cbz	x0, 86ed0 <CXHCIRootPort::Configure()+0xa0>
   86ec4:	f9400001 	ldr	x1, [x0]
   86ec8:	f9400421 	ldr	x1, [x1, #8]
   86ecc:	d63f0020 	blr	x1
   86ed0:	52800014 	mov	w20, #0x0                   	// #0
   86ed4:	f900127f 	str	xzr, [x19, #32]
   86ed8:	2a1403e0 	mov	w0, w20
   86edc:	a94153f3 	ldp	x19, x20, [sp, #16]
   86ee0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86ee4:	d65f03c0 	ret
   86ee8:	940062ca 	bl	9fa10 <CLogger::Get()>
   86eec:	b9400a64 	ldr	w4, [x19, #8]
   86ef0:	52800022 	mov	w2, #0x1                   	// #1
   86ef4:	f0000143 	adrp	x3, b1000 <_etext+0x158>
   86ef8:	90000181 	adrp	x1, b6000 <From+0x98>
   86efc:	91370063 	add	x3, x3, #0xdc0
   86f00:	910a2021 	add	x1, x1, #0x288
   86f04:	0b020084 	add	w4, w4, w2
   86f08:	940064ae 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   86f0c:	f9401260 	ldr	x0, [x19, #32]
   86f10:	b5fffda0 	cbnz	x0, 86ec4 <CXHCIRootPort::Configure()+0x94>
   86f14:	17ffffef 	b	86ed0 <CXHCIRootPort::Configure()+0xa0>
   86f18:	52800014 	mov	w20, #0x0                   	// #0
   86f1c:	2a1403e0 	mov	w0, w20
   86f20:	a94153f3 	ldp	x19, x20, [sp, #16]
   86f24:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86f28:	d65f03c0 	ret
   86f2c:	d503201f 	nop

0000000000086f30 <CXHCIRootPort::Initialize() [clone .part.0]>:
   86f30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   86f34:	910003fd 	mov	x29, sp
   86f38:	b9400801 	ldr	w1, [x0, #8]
   86f3c:	a90153f3 	stp	x19, x20, [sp, #16]
   86f40:	7100103f 	cmp	w1, #0x4
   86f44:	54000aa8 	b.hi	87098 <CXHCIRootPort::Initialize() [clone .part.0]+0x168>  // b.pmore
   86f48:	aa0003f3 	mov	x19, x0
   86f4c:	340004e1 	cbz	w1, 86fe8 <CXHCIRootPort::Initialize() [clone .part.0]+0xb8>
   86f50:	5290d401 	mov	w1, #0x86a0                	// #34464
   86f54:	72a00021 	movk	w1, #0x1, lsl #16
   86f58:	97ffff66 	bl	86cf0 <CXHCIRootPort::WaitForU0State(unsigned int)>
   86f5c:	72001c14 	ands	w20, w0, #0xff
   86f60:	54000a80 	b.eq	870b0 <CXHCIRootPort::Initialize() [clone .part.0]+0x180>  // b.none
   86f64:	94008063 	bl	a70f0 <CTimer::Get()>
   86f68:	52800c80 	mov	w0, #0x64                  	// #100
   86f6c:	94008005 	bl	a6f80 <CTimer::SimpleMsDelay(unsigned int)>
   86f70:	aa1303e0 	mov	x0, x19
   86f74:	97fffe7b 	bl	86960 <CXHCIRootPort::GetPortSpeed()>
   86f78:	7100101f 	cmp	w0, #0x4
   86f7c:	2a0003f4 	mov	w20, w0
   86f80:	54000ac0 	b.eq	870d8 <CXHCIRootPort::Initialize() [clone .part.0]+0x1a8>  // b.none
   86f84:	f9401260 	ldr	x0, [x19, #32]
   86f88:	b5000be0 	cbnz	x0, 87104 <CXHCIRootPort::Initialize() [clone .part.0]+0x1d4>
   86f8c:	d2803b00 	mov	x0, #0x1d8                 	// #472
   86f90:	940084b4 	bl	a8260 <operator new(unsigned long)>
   86f94:	f9400a61 	ldr	x1, [x19, #16]
   86f98:	2a1403e2 	mov	w2, w20
   86f9c:	aa1303e3 	mov	x3, x19
   86fa0:	aa0003f4 	mov	x20, x0
   86fa4:	94000287 	bl	879c0 <CXHCIUSBDevice::CXHCIUSBDevice(CXHCIDevice*, TUSBSpeed, CXHCIRootPort*)>
   86fa8:	aa1403e0 	mov	x0, x20
   86fac:	f9001274 	str	x20, [x19, #32]
   86fb0:	94000458 	bl	88110 <CXHCIUSBDevice::Initialize()>
   86fb4:	72001c14 	ands	w20, w0, #0xff
   86fb8:	54000361 	b.ne	87024 <CXHCIRootPort::Initialize() [clone .part.0]+0xf4>  // b.any
   86fbc:	f9401260 	ldr	x0, [x19, #32]
   86fc0:	b4000080 	cbz	x0, 86fd0 <CXHCIRootPort::Initialize() [clone .part.0]+0xa0>
   86fc4:	f9400001 	ldr	x1, [x0]
   86fc8:	f9400421 	ldr	x1, [x1, #8]
   86fcc:	d63f0020 	blr	x1
   86fd0:	52800014 	mov	w20, #0x0                   	// #0
   86fd4:	f900127f 	str	xzr, [x19, #32]
   86fd8:	2a1403e0 	mov	w0, w20
   86fdc:	a94153f3 	ldp	x19, x20, [sp, #16]
   86fe0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86fe4:	d65f03c0 	ret
   86fe8:	5290d401 	mov	w1, #0x86a0                	// #34464
   86fec:	72a00021 	movk	w1, #0x1, lsl #16
   86ff0:	97ffff0c 	bl	86c20 <CXHCIRootPort::Reset(unsigned int)>
   86ff4:	72001c14 	ands	w20, w0, #0xff
   86ff8:	54fffb61 	b.ne	86f64 <CXHCIRootPort::Initialize() [clone .part.0]+0x34>  // b.any
   86ffc:	94006285 	bl	9fa10 <CLogger::Get()>
   87000:	b9400a64 	ldr	w4, [x19, #8]
   87004:	d0000143 	adrp	x3, b1000 <_etext+0x158>
   87008:	f0000161 	adrp	x1, b6000 <From+0x98>
   8700c:	91378063 	add	x3, x3, #0xde0
   87010:	910a2021 	add	x1, x1, #0x288
   87014:	52800042 	mov	w2, #0x2                   	// #2
   87018:	11000484 	add	w4, w4, #0x1
   8701c:	94006469 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   87020:	17ffffee 	b	86fd8 <CXHCIRootPort::Initialize() [clone .part.0]+0xa8>
   87024:	aa1303e0 	mov	x0, x19
   87028:	97ffff4e 	bl	86d60 <CXHCIRootPort::PowerOffOnOverCurrent()>
   8702c:	72001c1f 	tst	w0, #0xff
   87030:	540001c1 	b.ne	87068 <CXHCIRootPort::Initialize() [clone .part.0]+0x138>  // b.any
   87034:	94006277 	bl	9fa10 <CLogger::Get()>
   87038:	b9400a64 	ldr	w4, [x19, #8]
   8703c:	d0000143 	adrp	x3, b1000 <_etext+0x158>
   87040:	f0000161 	adrp	x1, b6000 <From+0x98>
   87044:	91390063 	add	x3, x3, #0xe40
   87048:	910a2021 	add	x1, x1, #0x288
   8704c:	52800082 	mov	w2, #0x4                   	// #4
   87050:	11000484 	add	w4, w4, #0x1
   87054:	9400645b 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   87058:	2a1403e0 	mov	w0, w20
   8705c:	a94153f3 	ldp	x19, x20, [sp, #16]
   87060:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87064:	d65f03c0 	ret
   87068:	9400626a 	bl	9fa10 <CLogger::Get()>
   8706c:	b9400a64 	ldr	w4, [x19, #8]
   87070:	52800022 	mov	w2, #0x1                   	// #1
   87074:	d0000143 	adrp	x3, b1000 <_etext+0x158>
   87078:	f0000161 	adrp	x1, b6000 <From+0x98>
   8707c:	91370063 	add	x3, x3, #0xdc0
   87080:	910a2021 	add	x1, x1, #0x288
   87084:	0b020084 	add	w4, w4, w2
   87088:	9400644e 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8708c:	f9401260 	ldr	x0, [x19, #32]
   87090:	b5fff9a0 	cbnz	x0, 86fc4 <CXHCIRootPort::Initialize() [clone .part.0]+0x94>
   87094:	17ffffcf 	b	86fd0 <CXHCIRootPort::Initialize() [clone .part.0]+0xa0>
   87098:	d0000141 	adrp	x1, b1000 <_etext+0x158>
   8709c:	d0000140 	adrp	x0, b1000 <_etext+0x158>
   870a0:	91344021 	add	x1, x1, #0xd10
   870a4:	9134a000 	add	x0, x0, #0xd28
   870a8:	528006a2 	mov	w2, #0x35                  	// #53
   870ac:	94005b25 	bl	9dd40 <assertion_failed>
   870b0:	94006258 	bl	9fa10 <CLogger::Get()>
   870b4:	b9400a64 	ldr	w4, [x19, #8]
   870b8:	d0000143 	adrp	x3, b1000 <_etext+0x158>
   870bc:	f0000161 	adrp	x1, b6000 <From+0x98>
   870c0:	9137e063 	add	x3, x3, #0xdf8
   870c4:	910a2021 	add	x1, x1, #0x288
   870c8:	52800042 	mov	w2, #0x2                   	// #2
   870cc:	11000484 	add	w4, w4, #0x1
   870d0:	9400643c 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   870d4:	17ffffc1 	b	86fd8 <CXHCIRootPort::Initialize() [clone .part.0]+0xa8>
   870d8:	9400624e 	bl	9fa10 <CLogger::Get()>
   870dc:	b9400a64 	ldr	w4, [x19, #8]
   870e0:	d0000143 	adrp	x3, b1000 <_etext+0x158>
   870e4:	f0000161 	adrp	x1, b6000 <From+0x98>
   870e8:	91384063 	add	x3, x3, #0xe10
   870ec:	910a2021 	add	x1, x1, #0x288
   870f0:	52800042 	mov	w2, #0x2                   	// #2
   870f4:	52800014 	mov	w20, #0x0                   	// #0
   870f8:	11000484 	add	w4, w4, #0x1
   870fc:	94006431 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   87100:	17ffffb6 	b	86fd8 <CXHCIRootPort::Initialize() [clone .part.0]+0xa8>
   87104:	d0000141 	adrp	x1, b1000 <_etext+0x158>
   87108:	d0000140 	adrp	x0, b1000 <_etext+0x158>
   8710c:	91344021 	add	x1, x1, #0xd10
   87110:	9138a000 	add	x0, x0, #0xe28
   87114:	52800ac2 	mov	w2, #0x56                  	// #86
   87118:	94005b0a 	bl	9dd40 <assertion_failed>
   8711c:	d503201f 	nop

0000000000087120 <CXHCIRootPort::Initialize()>:
   87120:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   87124:	910003fd 	mov	x29, sp
   87128:	f9000bf3 	str	x19, [sp, #16]
   8712c:	aa0003f3 	mov	x19, x0
   87130:	f9400c00 	ldr	x0, [x0, #24]
   87134:	b40001e0 	cbz	x0, 87170 <CXHCIRootPort::Initialize()+0x50>
   87138:	b9400a61 	ldr	w1, [x19, #8]
   8713c:	7100103f 	cmp	w1, #0x4
   87140:	54000248 	b.hi	87188 <CXHCIRootPort::Initialize()+0x68>  // b.pmore
   87144:	52800002 	mov	w2, #0x0                   	// #0
   87148:	97fffa42 	bl	85a50 <CXHCIMMIOSpace::pt_read32(unsigned int, unsigned int)>
   8714c:	360000a0 	tbz	w0, #0, 87160 <CXHCIRootPort::Initialize()+0x40>
   87150:	aa1303e0 	mov	x0, x19
   87154:	f9400bf3 	ldr	x19, [sp, #16]
   87158:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8715c:	17ffff75 	b	86f30 <CXHCIRootPort::Initialize() [clone .part.0]>
   87160:	52800000 	mov	w0, #0x0                   	// #0
   87164:	f9400bf3 	ldr	x19, [sp, #16]
   87168:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8716c:	d65f03c0 	ret
   87170:	d0000141 	adrp	x1, b1000 <_etext+0x158>
   87174:	d0000140 	adrp	x0, b1000 <_etext+0x158>
   87178:	91344021 	add	x1, x1, #0xd10
   8717c:	9127c000 	add	x0, x0, #0x9f0
   87180:	52802102 	mov	w2, #0x108                 	// #264
   87184:	94005aef 	bl	9dd40 <assertion_failed>
   87188:	d0000141 	adrp	x1, b1000 <_etext+0x158>
   8718c:	d0000140 	adrp	x0, b1000 <_etext+0x158>
   87190:	91344021 	add	x1, x1, #0xd10
   87194:	9134a000 	add	x0, x0, #0xd28
   87198:	52802122 	mov	w2, #0x109                 	// #265
   8719c:	94005ae9 	bl	9dd40 <assertion_failed>

00000000000871a0 <CXHCIRootPort::ReScanDevices()>:
   871a0:	f9401001 	ldr	x1, [x0, #32]
   871a4:	b4000061 	cbz	x1, 871b0 <CXHCIRootPort::ReScanDevices()+0x10>
   871a8:	aa0103e0 	mov	x0, x1
   871ac:	140004bd 	b	884a0 <CUSBDevice::ReScanDevices()>
   871b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   871b4:	910003fd 	mov	x29, sp
   871b8:	f9000bf3 	str	x19, [sp, #16]
   871bc:	aa0003f3 	mov	x19, x0
   871c0:	97fffe7c 	bl	86bb0 <CXHCIRootPort::IsConnected()>
   871c4:	72001c1f 	tst	w0, #0xff
   871c8:	54000120 	b.eq	871ec <CXHCIRootPort::ReScanDevices()+0x4c>  // b.none
   871cc:	aa1303e0 	mov	x0, x19
   871d0:	97ffff58 	bl	86f30 <CXHCIRootPort::Initialize() [clone .part.0]>
   871d4:	72001c1f 	tst	w0, #0xff
   871d8:	540000a0 	b.eq	871ec <CXHCIRootPort::ReScanDevices()+0x4c>  // b.none
   871dc:	aa1303e0 	mov	x0, x19
   871e0:	f9400bf3 	ldr	x19, [sp, #16]
   871e4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   871e8:	17ffff12 	b	86e30 <CXHCIRootPort::Configure()>
   871ec:	52800000 	mov	w0, #0x0                   	// #0
   871f0:	f9400bf3 	ldr	x19, [sp, #16]
   871f4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   871f8:	d65f03c0 	ret
   871fc:	00000000 	udf	#0

0000000000087200 <CXHCISharedMemAllocator::CXHCISharedMemAllocator(unsigned long, unsigned long)>:
   87200:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   87204:	910003fd 	mov	x29, sp
   87208:	a9000801 	stp	x1, x2, [x0]
   8720c:	f900081f 	str	xzr, [x0, #16]
   87210:	b40000a1 	cbz	x1, 87224 <CXHCISharedMemAllocator::CXHCISharedMemAllocator(unsigned long, unsigned long)+0x24>
   87214:	eb02003f 	cmp	x1, x2
   87218:	54000122 	b.cs	8723c <CXHCISharedMemAllocator::CXHCISharedMemAllocator(unsigned long, unsigned long)+0x3c>  // b.hs, b.nlast
   8721c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   87220:	d65f03c0 	ret
   87224:	d0000141 	adrp	x1, b1000 <_etext+0x158>
   87228:	d0000140 	adrp	x0, b1000 <_etext+0x158>
   8722c:	91398021 	add	x1, x1, #0xe60
   87230:	913a0000 	add	x0, x0, #0xe80
   87234:	528003e2 	mov	w2, #0x1f                  	// #31
   87238:	94005ac2 	bl	9dd40 <assertion_failed>
   8723c:	d0000141 	adrp	x1, b1000 <_etext+0x158>
   87240:	d0000140 	adrp	x0, b1000 <_etext+0x158>
   87244:	91398021 	add	x1, x1, #0xe60
   87248:	913a6000 	add	x0, x0, #0xe98
   8724c:	52800402 	mov	w2, #0x20                  	// #32
   87250:	94005abc 	bl	9dd40 <assertion_failed>
   87254:	d503201f 	nop
   87258:	d503201f 	nop
   8725c:	d503201f 	nop

0000000000087260 <CXHCISharedMemAllocator::~CXHCISharedMemAllocator()>:
   87260:	d65f03c0 	ret
   87264:	d503201f 	nop
   87268:	d503201f 	nop
   8726c:	d503201f 	nop

0000000000087270 <CXHCISharedMemAllocator::GetFreeSpace() const>:
   87270:	a9400001 	ldp	x1, x0, [x0]
   87274:	eb010000 	subs	x0, x0, x1
   87278:	9a9f8000 	csel	x0, x0, xzr, hi	// hi = pmore
   8727c:	d65f03c0 	ret

0000000000087280 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)>:
   87280:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   87284:	910003fd 	mov	x29, sp
   87288:	b4000941 	cbz	x1, 873b0 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x130>
   8728c:	b40009e2 	cbz	x2, 873c8 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x148>
   87290:	eb03005f 	cmp	x2, x3
   87294:	54000aa8 	b.hi	873e8 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x168>  // b.pmore
   87298:	f9400004 	ldr	x4, [x0]
   8729c:	aa0003e5 	mov	x5, x0
   872a0:	b4000b04 	cbz	x4, 87400 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x180>
   872a4:	f9400408 	ldr	x8, [x0, #8]
   872a8:	b4000b88 	cbz	x8, 87418 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x198>
   872ac:	f140407f 	cmp	x3, #0x10, lsl #12
   872b0:	d2800806 	mov	x6, #0x40                  	// #64
   872b4:	fa469042 	ccmp	x2, x6, #0x2, ls	// ls = plast
   872b8:	d2810000 	mov	x0, #0x800                 	// #2048
   872bc:	fa409022 	ccmp	x1, x0, #0x2, ls	// ls = plast
   872c0:	d1000447 	sub	x7, x2, #0x1
   872c4:	cb0303e9 	neg	x9, x3
   872c8:	540003c9 	b.ls	87340 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0xc0>  // b.plast
   872cc:	91006084 	add	x4, x4, #0x18
   872d0:	cb0203e6 	neg	x6, x2
   872d4:	8b070080 	add	x0, x4, x7
   872d8:	ea07009f 	tst	x4, x7
   872dc:	8a060000 	and	x0, x0, x6
   872e0:	9a800084 	csel	x4, x4, x0, eq	// eq = none
   872e4:	d1000480 	sub	x0, x4, #0x1
   872e8:	8b010006 	add	x6, x0, x1
   872ec:	8b030000 	add	x0, x0, x3
   872f0:	ca0400c6 	eor	x6, x6, x4
   872f4:	8a090000 	and	x0, x0, x9
   872f8:	ea0900df 	tst	x6, x9
   872fc:	9a841004 	csel	x4, x0, x4, ne	// ne = any
   87300:	8b010080 	add	x0, x4, x1
   87304:	eb00011f 	cmp	x8, x0
   87308:	d1006086 	sub	x6, x4, #0x18
   8730c:	f90000a0 	str	x0, [x5]
   87310:	54000683 	b.cc	873e0 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x160>  // b.lo, b.ul, b.last
   87314:	52886925 	mov	w5, #0x4349                	// #17225
   87318:	72ab0905 	movk	w5, #0x5848, lsl #16
   8731c:	ea07009f 	tst	x4, x7
   87320:	aa0403e0 	mov	x0, x4
   87324:	b81e8085 	stur	w5, [x4, #-24]
   87328:	290088c1 	stp	w1, w2, [x6, #4]
   8732c:	b9000cc3 	str	w3, [x6, #12]
   87330:	f90008df 	str	xzr, [x6, #16]
   87334:	540008a1 	b.ne	87448 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x1c8>  // b.any
   87338:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8733c:	d65f03c0 	ret
   87340:	f94008a1 	ldr	x1, [x5, #16]
   87344:	b4000761 	cbz	x1, 87430 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x1b0>
   87348:	b9400022 	ldr	w2, [x1]
   8734c:	52886920 	mov	w0, #0x4349                	// #17225
   87350:	72ab0900 	movk	w0, #0x5848, lsl #16
   87354:	6b00005f 	cmp	w2, w0
   87358:	54000841 	b.ne	87460 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x1e0>  // b.any
   8735c:	b9400420 	ldr	w0, [x1, #4]
   87360:	7120001f 	cmp	w0, #0x800
   87364:	540008a1 	b.ne	87478 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x1f8>  // b.any
   87368:	b9400820 	ldr	w0, [x1, #8]
   8736c:	7101001f 	cmp	w0, #0x40
   87370:	54000901 	b.ne	87490 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x210>  // b.any
   87374:	b9400c20 	ldr	w0, [x1, #12]
   87378:	7140401f 	cmp	w0, #0x10, lsl #12
   8737c:	54000961 	b.ne	874a8 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x228>  // b.any
   87380:	f9400822 	ldr	x2, [x1, #16]
   87384:	91006020 	add	x0, x1, #0x18
   87388:	f240141f 	tst	x0, #0x3f
   8738c:	f90008a2 	str	x2, [x5, #16]
   87390:	f900083f 	str	xzr, [x1, #16]
   87394:	54fffd20 	b.eq	87338 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0xb8>  // b.none
   87398:	d0000141 	adrp	x1, b1000 <_etext+0x158>
   8739c:	d0000140 	adrp	x0, b1000 <_etext+0x158>
   873a0:	91398021 	add	x1, x1, #0xe60
   873a4:	913ec000 	add	x0, x0, #0xfb0
   873a8:	52800902 	mov	w2, #0x48                  	// #72
   873ac:	94005a65 	bl	9dd40 <assertion_failed>
   873b0:	d0000141 	adrp	x1, b1000 <_etext+0x158>
   873b4:	d0000140 	adrp	x0, b1000 <_etext+0x158>
   873b8:	91398021 	add	x1, x1, #0xe60
   873bc:	913ac000 	add	x0, x0, #0xeb0
   873c0:	52800642 	mov	w2, #0x32                  	// #50
   873c4:	94005a5f 	bl	9dd40 <assertion_failed>
   873c8:	d0000141 	adrp	x1, b1000 <_etext+0x158>
   873cc:	d0000140 	adrp	x0, b1000 <_etext+0x158>
   873d0:	91398021 	add	x1, x1, #0xe60
   873d4:	913b0000 	add	x0, x0, #0xec0
   873d8:	52800662 	mov	w2, #0x33                  	// #51
   873dc:	94005a59 	bl	9dd40 <assertion_failed>
   873e0:	d2800000 	mov	x0, #0x0                   	// #0
   873e4:	17ffffd5 	b	87338 <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0xb8>
   873e8:	d0000141 	adrp	x1, b1000 <_etext+0x158>
   873ec:	d0000140 	adrp	x0, b1000 <_etext+0x158>
   873f0:	91398021 	add	x1, x1, #0xe60
   873f4:	913b4000 	add	x0, x0, #0xed0
   873f8:	52800682 	mov	w2, #0x34                  	// #52
   873fc:	94005a51 	bl	9dd40 <assertion_failed>
   87400:	d0000141 	adrp	x1, b1000 <_etext+0x158>
   87404:	d0000140 	adrp	x0, b1000 <_etext+0x158>
   87408:	91398021 	add	x1, x1, #0xe60
   8740c:	913a0000 	add	x0, x0, #0xe80
   87410:	528006a2 	mov	w2, #0x35                  	// #53
   87414:	94005a4b 	bl	9dd40 <assertion_failed>
   87418:	d0000141 	adrp	x1, b1000 <_etext+0x158>
   8741c:	d0000140 	adrp	x0, b1000 <_etext+0x158>
   87420:	91398021 	add	x1, x1, #0xe60
   87424:	913ba000 	add	x0, x0, #0xee8
   87428:	528006c2 	mov	w2, #0x36                  	// #54
   8742c:	94005a45 	bl	9dd40 <assertion_failed>
   87430:	aa0603e2 	mov	x2, x6
   87434:	aa0003e1 	mov	x1, x0
   87438:	929fffe9 	mov	x9, #0xffffffffffff0000    	// #-65536
   8743c:	d28007e7 	mov	x7, #0x3f                  	// #63
   87440:	d2a00023 	mov	x3, #0x10000               	// #65536
   87444:	17ffffa2 	b	872cc <CXHCISharedMemAllocator::Allocate(unsigned long, unsigned long, unsigned long)+0x4c>
   87448:	d0000141 	adrp	x1, b1000 <_etext+0x158>
   8744c:	d0000140 	adrp	x0, b1000 <_etext+0x158>
   87450:	91398021 	add	x1, x1, #0xe60
   87454:	913f8000 	add	x0, x0, #0xfe0
   87458:	52800e82 	mov	w2, #0x74                  	// #116
   8745c:	94005a39 	bl	9dd40 <assertion_failed>
   87460:	d0000141 	adrp	x1, b1000 <_etext+0x158>
   87464:	d0000140 	adrp	x0, b1000 <_etext+0x158>
   87468:	91398021 	add	x1, x1, #0xe60
   8746c:	913be000 	add	x0, x0, #0xef8
   87470:	528007e2 	mov	w2, #0x3f                  	// #63
   87474:	94005a33 	bl	9dd40 <assertion_failed>
   87478:	d0000141 	adrp	x1, b1000 <_etext+0x158>
   8747c:	d0000140 	adrp	x0, b1000 <_etext+0x158>
   87480:	2a0603e2 	mov	w2, w6
   87484:	91398021 	add	x1, x1, #0xe60
   87488:	913ca000 	add	x0, x0, #0xf28
   8748c:	94005a2d 	bl	9dd40 <assertion_failed>
   87490:	d0000141 	adrp	x1, b1000 <_etext+0x158>
   87494:	d0000140 	adrp	x0, b1000 <_etext+0x158>
   87498:	91398021 	add	x1, x1, #0xe60
   8749c:	913d4000 	add	x0, x0, #0xf50
   874a0:	52800822 	mov	w2, #0x41                  	// #65
   874a4:	94005a27 	bl	9dd40 <assertion_failed>
   874a8:	d0000141 	adrp	x1, b1000 <_etext+0x158>
   874ac:	d0000140 	adrp	x0, b1000 <_etext+0x158>
   874b0:	91398021 	add	x1, x1, #0xe60
   874b4:	913e0000 	add	x0, x0, #0xf80
   874b8:	52800842 	mov	w2, #0x42                  	// #66
   874bc:	94005a21 	bl	9dd40 <assertion_failed>

00000000000874c0 <CXHCISharedMemAllocator::Free(void*)>:
   874c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   874c4:	910003fd 	mov	x29, sp
   874c8:	a90153f3 	stp	x19, x20, [sp, #16]
   874cc:	b4000421 	cbz	x1, 87550 <CXHCISharedMemAllocator::Free(void*)+0x90>
   874d0:	aa0103f3 	mov	x19, x1
   874d4:	52886921 	mov	w1, #0x4349                	// #17225
   874d8:	72ab0901 	movk	w1, #0x5848, lsl #16
   874dc:	b85e8262 	ldur	w2, [x19, #-24]
   874e0:	d1006274 	sub	x20, x19, #0x18
   874e4:	6b01005f 	cmp	w2, w1
   874e8:	54000401 	b.ne	87568 <CXHCISharedMemAllocator::Free(void*)+0xa8>  // b.any
   874ec:	b9400681 	ldr	w1, [x20, #4]
   874f0:	7120003f 	cmp	w1, #0x800
   874f4:	540000c1 	b.ne	8750c <CXHCISharedMemAllocator::Free(void*)+0x4c>  // b.any
   874f8:	f9400682 	ldr	x2, [x20, #8]
   874fc:	d2800801 	mov	x1, #0x40                  	// #64
   87500:	f2e00021 	movk	x1, #0x1, lsl #48
   87504:	eb01005f 	cmp	x2, x1
   87508:	54000180 	b.eq	87538 <CXHCISharedMemAllocator::Free(void*)+0x78>  // b.none
   8750c:	94006141 	bl	9fa10 <CLogger::Get()>
   87510:	f0000143 	adrp	x3, b2000 <_etext+0x1158>
   87514:	f0000161 	adrp	x1, b6000 <From+0x98>
   87518:	29409a85 	ldp	w5, w6, [x20, #4]
   8751c:	aa1303e4 	mov	x4, x19
   87520:	91006063 	add	x3, x3, #0x18
   87524:	a94153f3 	ldp	x19, x20, [sp, #16]
   87528:	910a6021 	add	x1, x1, #0x298
   8752c:	52800042 	mov	w2, #0x2                   	// #2
   87530:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87534:	14006323 	b	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   87538:	f9400801 	ldr	x1, [x0, #16]
   8753c:	f9000a81 	str	x1, [x20, #16]
   87540:	f9000814 	str	x20, [x0, #16]
   87544:	a94153f3 	ldp	x19, x20, [sp, #16]
   87548:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8754c:	d65f03c0 	ret
   87550:	d0000141 	adrp	x1, b1000 <_etext+0x158>
   87554:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   87558:	91398021 	add	x1, x1, #0xe60
   8755c:	91002000 	add	x0, x0, #0x8
   87560:	52800f62 	mov	w2, #0x7b                  	// #123
   87564:	940059f7 	bl	9dd40 <assertion_failed>
   87568:	d0000141 	adrp	x1, b1000 <_etext+0x158>
   8756c:	d0000140 	adrp	x0, b1000 <_etext+0x158>
   87570:	91398021 	add	x1, x1, #0xe60
   87574:	913be000 	add	x0, x0, #0xef8
   87578:	52800fe2 	mov	w2, #0x7f                  	// #127
   8757c:	940059f1 	bl	9dd40 <assertion_failed>

0000000000087580 <CXHCISlotManager::CXHCISlotManager(CXHCIDevice*)>:
   87580:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   87584:	910003fd 	mov	x29, sp
   87588:	a90153f3 	stp	x19, x20, [sp, #16]
   8758c:	aa0003f3 	mov	x19, x0
   87590:	aa0103e0 	mov	x0, x1
   87594:	f9000261 	str	x1, [x19]
   87598:	97ffefc6 	bl	834b0 <CXHCIDevice::GetMMIOSpace()>
   8759c:	91006261 	add	x1, x19, #0x18
   875a0:	aa0003f4 	mov	x20, x0
   875a4:	a900fe60 	stp	x0, xzr, [x19, #8]
   875a8:	91046262 	add	x2, x19, #0x118
   875ac:	d503201f 	nop
   875b0:	f800843f 	str	xzr, [x1], #8
   875b4:	eb02003f 	cmp	x1, x2
   875b8:	54ffffc1 	b.ne	875b0 <CXHCISlotManager::CXHCISlotManager(CXHCIDevice*)+0x30>  // b.any
   875bc:	52800701 	mov	w1, #0x38                  	// #56
   875c0:	aa1403e0 	mov	x0, x20
   875c4:	97fff913 	bl	85a10 <CXHCIMMIOSpace::op_read32(unsigned int)>
   875c8:	12185c02 	and	w2, w0, #0xffffff00
   875cc:	52800701 	mov	w1, #0x38                  	// #56
   875d0:	aa1403e0 	mov	x0, x20
   875d4:	321b0042 	orr	w2, w2, #0x20
   875d8:	97fff966 	bl	85b70 <CXHCIMMIOSpace::op_write32(unsigned int, unsigned int)>
   875dc:	d2820003 	mov	x3, #0x1000                	// #4096
   875e0:	d2800802 	mov	x2, #0x40                  	// #64
   875e4:	f9400260 	ldr	x0, [x19]
   875e8:	d2802101 	mov	x1, #0x108                 	// #264
   875ec:	97ffefe1 	bl	83570 <CXHCIDevice::AllocateSharedMem(unsigned long, unsigned long, unsigned long)>
   875f0:	f9000a60 	str	x0, [x19, #16]
   875f4:	b4000120 	cbz	x0, 87618 <CXHCISlotManager::CXHCISlotManager(CXHCIDevice*)+0x98>
   875f8:	d00001a3 	adrp	x3, bd000 <CNetDevice::s_SpeedString+0x18>
   875fc:	52800601 	mov	w1, #0x30                  	// #48
   87600:	f9417463 	ldr	x3, [x3, #744]
   87604:	aa030002 	orr	x2, x0, x3
   87608:	f9400660 	ldr	x0, [x19, #8]
   8760c:	a94153f3 	ldp	x19, x20, [sp, #16]
   87610:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87614:	17fff99b 	b	85c80 <CXHCIMMIOSpace::op_write64(unsigned int, unsigned long)>
   87618:	a94153f3 	ldp	x19, x20, [sp, #16]
   8761c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87620:	d65f03c0 	ret
   87624:	d503201f 	nop
   87628:	d503201f 	nop
   8762c:	d503201f 	nop

0000000000087630 <CXHCISlotManager::~CXHCISlotManager()>:
   87630:	91006001 	add	x1, x0, #0x18
   87634:	91046002 	add	x2, x0, #0x118
   87638:	f800843f 	str	xzr, [x1], #8
   8763c:	eb02003f 	cmp	x1, x2
   87640:	54ffffc1 	b.ne	87638 <CXHCISlotManager::~CXHCISlotManager()+0x8>  // b.any
   87644:	f9400801 	ldr	x1, [x0, #16]
   87648:	b4000061 	cbz	x1, 87654 <CXHCISlotManager::~CXHCISlotManager()+0x24>
   8764c:	f9400000 	ldr	x0, [x0]
   87650:	17ffefe8 	b	835f0 <CXHCIDevice::FreeSharedMem(void*)>
   87654:	d65f03c0 	ret
   87658:	d503201f 	nop
   8765c:	d503201f 	nop

0000000000087660 <CXHCISlotManager::IsValid()>:
   87660:	f9400800 	ldr	x0, [x0, #16]
   87664:	f100001f 	cmp	x0, #0x0
   87668:	1a9f07e0 	cset	w0, ne	// ne = any
   8766c:	d65f03c0 	ret

0000000000087670 <CXHCISlotManager::AssignDevice(unsigned char, CXHCIUSBDevice*)>:
   87670:	12001c21 	and	w1, w1, #0xff
   87674:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   87678:	910003fd 	mov	x29, sp
   8767c:	51000423 	sub	w3, w1, #0x1
   87680:	12001c63 	and	w3, w3, #0xff
   87684:	71007c7f 	cmp	w3, #0x1f
   87688:	a90153f3 	stp	x19, x20, [sp, #16]
   8768c:	540002c8 	b.hi	876e4 <CXHCISlotManager::AssignDevice(unsigned char, CXHCIUSBDevice*)+0x74>  // b.pmore
   87690:	aa0003f4 	mov	x20, x0
   87694:	aa0203e0 	mov	x0, x2
   87698:	b4000322 	cbz	x2, 876fc <CXHCISlotManager::AssignDevice(unsigned char, CXHCIUSBDevice*)+0x8c>
   8769c:	8b210e82 	add	x2, x20, w1, uxtb #3
   876a0:	f9400843 	ldr	x3, [x2, #16]
   876a4:	2a0103f3 	mov	w19, w1
   876a8:	b5000363 	cbnz	x3, 87714 <CXHCISlotManager::AssignDevice(unsigned char, CXHCIUSBDevice*)+0xa4>
   876ac:	f9000840 	str	x0, [x2, #16]
   876b0:	94000110 	bl	87af0 <CXHCIUSBDevice::GetDeviceContext()>
   876b4:	b40003c0 	cbz	x0, 8772c <CXHCISlotManager::AssignDevice(unsigned char, CXHCIUSBDevice*)+0xbc>
   876b8:	f9400a81 	ldr	x1, [x20, #16]
   876bc:	b4000441 	cbz	x1, 87744 <CXHCISlotManager::AssignDevice(unsigned char, CXHCIUSBDevice*)+0xd4>
   876c0:	f8737822 	ldr	x2, [x1, x19, lsl #3]
   876c4:	b50004c2 	cbnz	x2, 8775c <CXHCISlotManager::AssignDevice(unsigned char, CXHCIUSBDevice*)+0xec>
   876c8:	d00001a2 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   876cc:	f9417442 	ldr	x2, [x2, #744]
   876d0:	aa020000 	orr	x0, x0, x2
   876d4:	f8337820 	str	x0, [x1, x19, lsl #3]
   876d8:	a94153f3 	ldp	x19, x20, [sp, #16]
   876dc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   876e0:	d65f03c0 	ret
   876e4:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   876e8:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   876ec:	91016021 	add	x1, x1, #0x58
   876f0:	9101c000 	add	x0, x0, #0x70
   876f4:	52800942 	mov	w2, #0x4a                  	// #74
   876f8:	94005992 	bl	9dd40 <assertion_failed>
   876fc:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87700:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   87704:	91016021 	add	x1, x1, #0x58
   87708:	91024000 	add	x0, x0, #0x90
   8770c:	52800982 	mov	w2, #0x4c                  	// #76
   87710:	9400598c 	bl	9dd40 <assertion_failed>
   87714:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87718:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   8771c:	91016021 	add	x1, x1, #0x58
   87720:	91028000 	add	x0, x0, #0xa0
   87724:	528009a2 	mov	w2, #0x4d                  	// #77
   87728:	94005986 	bl	9dd40 <assertion_failed>
   8772c:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87730:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   87734:	91016021 	add	x1, x1, #0x58
   87738:	91030000 	add	x0, x0, #0xc0
   8773c:	52800a22 	mov	w2, #0x51                  	// #81
   87740:	94005980 	bl	9dd40 <assertion_failed>
   87744:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87748:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   8774c:	91016021 	add	x1, x1, #0x58
   87750:	91036000 	add	x0, x0, #0xd8
   87754:	52800a42 	mov	w2, #0x52                  	// #82
   87758:	9400597a 	bl	9dd40 <assertion_failed>
   8775c:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87760:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   87764:	91016021 	add	x1, x1, #0x58
   87768:	9103a000 	add	x0, x0, #0xe8
   8776c:	52800a62 	mov	w2, #0x53                  	// #83
   87770:	94005974 	bl	9dd40 <assertion_failed>
   87774:	d503201f 	nop
   87778:	d503201f 	nop
   8777c:	d503201f 	nop

0000000000087780 <CXHCISlotManager::FreeSlot(unsigned char)>:
   87780:	92401c21 	and	x1, x1, #0xff
   87784:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   87788:	910003fd 	mov	x29, sp
   8778c:	51000422 	sub	w2, w1, #0x1
   87790:	12001c43 	and	w3, w2, #0xff
   87794:	71007c7f 	cmp	w3, #0x1f
   87798:	54000108 	b.hi	877b8 <CXHCISlotManager::FreeSlot(unsigned char)+0x38>  // b.pmore
   8779c:	8b22cc02 	add	x2, x0, w2, sxtw #3
   877a0:	f9400800 	ldr	x0, [x0, #16]
   877a4:	f9000c5f 	str	xzr, [x2, #24]
   877a8:	b4000140 	cbz	x0, 877d0 <CXHCISlotManager::FreeSlot(unsigned char)+0x50>
   877ac:	f821781f 	str	xzr, [x0, x1, lsl #3]
   877b0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   877b4:	d65f03c0 	ret
   877b8:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   877bc:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   877c0:	91016021 	add	x1, x1, #0x58
   877c4:	9101c000 	add	x0, x0, #0x70
   877c8:	52800b22 	mov	w2, #0x59                  	// #89
   877cc:	9400595d 	bl	9dd40 <assertion_failed>
   877d0:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   877d4:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   877d8:	91016021 	add	x1, x1, #0x58
   877dc:	91036000 	add	x0, x0, #0xd8
   877e0:	52800b82 	mov	w2, #0x5c                  	// #92
   877e4:	94005957 	bl	9dd40 <assertion_failed>
   877e8:	d503201f 	nop
   877ec:	d503201f 	nop

00000000000877f0 <CXHCISlotManager::AssignScratchpadBufferArray(unsigned long*)>:
   877f0:	b40000e1 	cbz	x1, 8780c <CXHCISlotManager::AssignScratchpadBufferArray(unsigned long*)+0x1c>
   877f4:	d00001a2 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   877f8:	f9400800 	ldr	x0, [x0, #16]
   877fc:	f9417442 	ldr	x2, [x2, #744]
   87800:	aa020021 	orr	x1, x1, x2
   87804:	f9000001 	str	x1, [x0]
   87808:	d65f03c0 	ret
   8780c:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87810:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   87814:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   87818:	91016021 	add	x1, x1, #0x58
   8781c:	910003fd 	mov	x29, sp
   87820:	91042000 	add	x0, x0, #0x108
   87824:	52800c42 	mov	w2, #0x62                  	// #98
   87828:	94005946 	bl	9dd40 <assertion_failed>
   8782c:	d503201f 	nop

0000000000087830 <CXHCISlotManager::TransferEvent(unsigned char, unsigned int, unsigned char, unsigned char)>:
   87830:	12001c63 	and	w3, w3, #0xff
   87834:	51000465 	sub	w5, w3, #0x1
   87838:	12001ca3 	and	w3, w5, #0xff
   8783c:	71007c7f 	cmp	w3, #0x1f
   87840:	54000108 	b.hi	87860 <CXHCISlotManager::TransferEvent(unsigned char, unsigned int, unsigned char, unsigned char)+0x30>  // b.pmore
   87844:	8b25cc05 	add	x5, x0, w5, sxtw #3
   87848:	f9400ca0 	ldr	x0, [x5, #24]
   8784c:	b4000080 	cbz	x0, 8785c <CXHCISlotManager::TransferEvent(unsigned char, unsigned int, unsigned char, unsigned char)+0x2c>
   87850:	12001c21 	and	w1, w1, #0xff
   87854:	12001c83 	and	w3, w4, #0xff
   87858:	140000ca 	b	87b80 <CXHCIUSBDevice::TransferEvent(unsigned char, unsigned int, unsigned char)>
   8785c:	d65f03c0 	ret
   87860:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87864:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   87868:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8786c:	91016021 	add	x1, x1, #0x58
   87870:	910003fd 	mov	x29, sp
   87874:	9101c000 	add	x0, x0, #0x70
   87878:	52800d22 	mov	w2, #0x69                  	// #105
   8787c:	94005931 	bl	9dd40 <assertion_failed>

0000000000087880 <CXHCISlotManager::DumpStatus()>:
   87880:	f0000142 	adrp	x2, b2000 <_etext+0x1158>
   87884:	9104a042 	add	x2, x2, #0x128
   87888:	f9400800 	ldr	x0, [x0, #16]
   8788c:	52802101 	mov	w1, #0x108                 	// #264
   87890:	14005af4 	b	9e460 <debug_hexdump(void const*, unsigned int, char const*)>
	...

00000000000878a0 <CXHCIUSBDevice::~CXHCIUSBDevice()>:
   878a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   878a4:	910003fd 	mov	x29, sp
   878a8:	f0000161 	adrp	x1, b6000 <From+0x98>
   878ac:	910ae021 	add	x1, x1, #0x2b8
   878b0:	f9000bf3 	str	x19, [sp, #16]
   878b4:	aa0003f3 	mov	x19, x0
   878b8:	f9405c00 	ldr	x0, [x0, #184]
   878bc:	f9000261 	str	x1, [x19]
   878c0:	b40003e0 	cbz	x0, 8793c <CXHCIUSBDevice::~CXHCIUSBDevice()+0x9c>
   878c4:	f940ea61 	ldr	x1, [x19, #464]
   878c8:	b5000461 	cbnz	x1, 87954 <CXHCIUSBDevice::~CXHCIUSBDevice()+0xb4>
   878cc:	39432261 	ldrb	w1, [x19, #200]
   878d0:	35000201 	cbnz	w1, 87910 <CXHCIUSBDevice::~CXHCIUSBDevice()+0x70>
   878d4:	f9406a61 	ldr	x1, [x19, #208]
   878d8:	b4000081 	cbz	x1, 878e8 <CXHCIUSBDevice::~CXHCIUSBDevice()+0x48>
   878dc:	f9405e60 	ldr	x0, [x19, #184]
   878e0:	97ffef44 	bl	835f0 <CXHCIDevice::FreeSharedMem(void*)>
   878e4:	f9006a7f 	str	xzr, [x19, #208]
   878e8:	91036261 	add	x1, x19, #0xd8
   878ec:	91074262 	add	x2, x19, #0x1d0
   878f0:	f800843f 	str	xzr, [x1], #8
   878f4:	eb02003f 	cmp	x1, x2
   878f8:	54ffffc1 	b.ne	878f0 <CXHCIUSBDevice::~CXHCIUSBDevice()+0x50>  // b.any
   878fc:	aa1303e0 	mov	x0, x19
   87900:	a90bfe7f 	stp	xzr, xzr, [x19, #184]
   87904:	f9400bf3 	ldr	x19, [sp, #16]
   87908:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8790c:	140004e9 	b	88cb0 <CUSBDevice::~CUSBDevice()>
   87910:	97ffef00 	bl	83510 <CXHCIDevice::GetCommandManager()>
   87914:	39432261 	ldrb	w1, [x19, #200]
   87918:	94002ffa 	bl	93900 <CXHCICommandManager::DisableSlot(unsigned char)>
   8791c:	7100041f 	cmp	w0, #0x1
   87920:	54000261 	b.ne	8796c <CXHCIUSBDevice::~CXHCIUSBDevice()+0xcc>  // b.any
   87924:	f9405e60 	ldr	x0, [x19, #184]
   87928:	97ffeeee 	bl	834e0 <CXHCIDevice::GetSlotManager()>
   8792c:	39432261 	ldrb	w1, [x19, #200]
   87930:	97ffff94 	bl	87780 <CXHCISlotManager::FreeSlot(unsigned char)>
   87934:	3903227f 	strb	wzr, [x19, #200]
   87938:	17ffffe7 	b	878d4 <CXHCIUSBDevice::~CXHCIUSBDevice()+0x34>
   8793c:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87940:	d0000140 	adrp	x0, b1000 <_etext+0x158>
   87944:	9104e021 	add	x1, x1, #0x138
   87948:	91246000 	add	x0, x0, #0x918
   8794c:	528008e2 	mov	w2, #0x47                  	// #71
   87950:	940058fc 	bl	9dd40 <assertion_failed>
   87954:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87958:	d0000140 	adrp	x0, b1000 <_etext+0x158>
   8795c:	9104e021 	add	x1, x1, #0x138
   87960:	911a8000 	add	x0, x0, #0x6a0
   87964:	52800922 	mov	w2, #0x49                  	// #73
   87968:	940058f6 	bl	9dd40 <assertion_failed>
   8796c:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87970:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   87974:	9104e021 	add	x1, x1, #0x138
   87978:	91054000 	add	x0, x0, #0x150
   8797c:	52800a22 	mov	w2, #0x51                  	// #81
   87980:	940058f0 	bl	9dd40 <assertion_failed>
   87984:	d503201f 	nop
   87988:	d503201f 	nop
   8798c:	d503201f 	nop

0000000000087990 <CXHCIUSBDevice::~CXHCIUSBDevice()>:
   87990:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   87994:	910003fd 	mov	x29, sp
   87998:	f9000bf3 	str	x19, [sp, #16]
   8799c:	aa0003f3 	mov	x19, x0
   879a0:	97ffffc0 	bl	878a0 <CXHCIUSBDevice::~CXHCIUSBDevice()>
   879a4:	aa1303e0 	mov	x0, x19
   879a8:	d2803b01 	mov	x1, #0x1d8                 	// #472
   879ac:	f9400bf3 	ldr	x19, [sp, #16]
   879b0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   879b4:	14008253 	b	a8300 <operator delete(void*, unsigned long)>
   879b8:	d503201f 	nop
   879bc:	d503201f 	nop

00000000000879c0 <CXHCIUSBDevice::CXHCIUSBDevice(CXHCIDevice*, TUSBSpeed, CXHCIRootPort*)>:
   879c0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   879c4:	910003fd 	mov	x29, sp
   879c8:	a90153f3 	stp	x19, x20, [sp, #16]
   879cc:	aa0003f3 	mov	x19, x0
   879d0:	aa0103f4 	mov	x20, x1
   879d4:	f90013f5 	str	x21, [sp, #32]
   879d8:	aa0303f5 	mov	x21, x3
   879dc:	94000275 	bl	883b0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>
   879e0:	f0000164 	adrp	x4, b6000 <From+0x98>
   879e4:	910ae084 	add	x4, x4, #0x2b8
   879e8:	a90bd674 	stp	x20, x21, [x19, #184]
   879ec:	d2800802 	mov	x2, #0x40                  	// #64
   879f0:	d2808001 	mov	x1, #0x400                 	// #1024
   879f4:	aa1403e0 	mov	x0, x20
   879f8:	d2820003 	mov	x3, #0x1000                	// #4096
   879fc:	f9000264 	str	x4, [x19]
   87a00:	3903227f 	strb	wzr, [x19, #200]
   87a04:	f9006a7f 	str	xzr, [x19, #208]
   87a08:	f900ea7f 	str	xzr, [x19, #464]
   87a0c:	97ffeed9 	bl	83570 <CXHCIDevice::AllocateSharedMem(unsigned long, unsigned long, unsigned long)>
   87a10:	91038261 	add	x1, x19, #0xe0
   87a14:	91074262 	add	x2, x19, #0x1d0
   87a18:	f9006a60 	str	x0, [x19, #208]
   87a1c:	d503201f 	nop
   87a20:	f800843f 	str	xzr, [x1], #8
   87a24:	eb02003f 	cmp	x1, x2
   87a28:	54ffffc1 	b.ne	87a20 <CXHCIUSBDevice::CXHCIUSBDevice(CXHCIDevice*, TUSBSpeed, CXHCIRootPort*)+0x60>  // b.any
   87a2c:	a94153f3 	ldp	x19, x20, [sp, #16]
   87a30:	f94013f5 	ldr	x21, [sp, #32]
   87a34:	a8c37bfd 	ldp	x29, x30, [sp], #48
   87a38:	d65f03c0 	ret
   87a3c:	d503201f 	nop

0000000000087a40 <CXHCIUSBDevice::CXHCIUSBDevice(CXHCIDevice*, TUSBSpeed, CUSBStandardHub*, unsigned int)>:
   87a40:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   87a44:	910003fd 	mov	x29, sp
   87a48:	a90153f3 	stp	x19, x20, [sp, #16]
   87a4c:	aa0003f3 	mov	x19, x0
   87a50:	aa0103f4 	mov	x20, x1
   87a54:	940003e3 	bl	889e0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>
   87a58:	f0000164 	adrp	x4, b6000 <From+0x98>
   87a5c:	910ae084 	add	x4, x4, #0x2b8
   87a60:	a90bfe74 	stp	x20, xzr, [x19, #184]
   87a64:	d2800802 	mov	x2, #0x40                  	// #64
   87a68:	d2808001 	mov	x1, #0x400                 	// #1024
   87a6c:	aa1403e0 	mov	x0, x20
   87a70:	d2820003 	mov	x3, #0x1000                	// #4096
   87a74:	f9000264 	str	x4, [x19]
   87a78:	3903227f 	strb	wzr, [x19, #200]
   87a7c:	f9006a7f 	str	xzr, [x19, #208]
   87a80:	f900ea7f 	str	xzr, [x19, #464]
   87a84:	97ffeebb 	bl	83570 <CXHCIDevice::AllocateSharedMem(unsigned long, unsigned long, unsigned long)>
   87a88:	91038261 	add	x1, x19, #0xe0
   87a8c:	91074262 	add	x2, x19, #0x1d0
   87a90:	f9006a60 	str	x0, [x19, #208]
   87a94:	d503201f 	nop
   87a98:	f800843f 	str	xzr, [x1], #8
   87a9c:	eb02003f 	cmp	x1, x2
   87aa0:	54ffffc1 	b.ne	87a98 <CXHCIUSBDevice::CXHCIUSBDevice(CXHCIDevice*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x58>  // b.any
   87aa4:	a94153f3 	ldp	x19, x20, [sp, #16]
   87aa8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87aac:	d65f03c0 	ret

0000000000087ab0 <CXHCIUSBDevice::GetSlotID() const>:
   87ab0:	39432000 	ldrb	w0, [x0, #200]
   87ab4:	51000401 	sub	w1, w0, #0x1
   87ab8:	12001c21 	and	w1, w1, #0xff
   87abc:	71007c3f 	cmp	w1, #0x1f
   87ac0:	54000048 	b.hi	87ac8 <CXHCIUSBDevice::GetSlotID() const+0x18>  // b.pmore
   87ac4:	d65f03c0 	ret
   87ac8:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87acc:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   87ad0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   87ad4:	9104e021 	add	x1, x1, #0x138
   87ad8:	910003fd 	mov	x29, sp
   87adc:	9105c000 	add	x0, x0, #0x170
   87ae0:	52801522 	mov	w2, #0xa9                  	// #169
   87ae4:	94005897 	bl	9dd40 <assertion_failed>
   87ae8:	d503201f 	nop
   87aec:	d503201f 	nop

0000000000087af0 <CXHCIUSBDevice::GetDeviceContext()>:
   87af0:	f9406800 	ldr	x0, [x0, #208]
   87af4:	b4000040 	cbz	x0, 87afc <CXHCIUSBDevice::GetDeviceContext()+0xc>
   87af8:	d65f03c0 	ret
   87afc:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87b00:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   87b04:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   87b08:	9104e021 	add	x1, x1, #0x138
   87b0c:	910003fd 	mov	x29, sp
   87b10:	91064000 	add	x0, x0, #0x190
   87b14:	528015e2 	mov	w2, #0xaf                  	// #175
   87b18:	9400588a 	bl	9dd40 <assertion_failed>
   87b1c:	d503201f 	nop

0000000000087b20 <CXHCIUSBDevice::RegisterEndpoint(unsigned char, CXHCIEndpoint*)>:
   87b20:	12001c21 	and	w1, w1, #0xff
   87b24:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   87b28:	910003fd 	mov	x29, sp
   87b2c:	51000421 	sub	w1, w1, #0x1
   87b30:	12001c23 	and	w3, w1, #0xff
   87b34:	7100787f 	cmp	w3, #0x1e
   87b38:	540000c8 	b.hi	87b50 <CXHCIUSBDevice::RegisterEndpoint(unsigned char, CXHCIEndpoint*)+0x30>  // b.pmore
   87b3c:	b4000162 	cbz	x2, 87b68 <CXHCIUSBDevice::RegisterEndpoint(unsigned char, CXHCIEndpoint*)+0x48>
   87b40:	8b21cc01 	add	x1, x0, w1, sxtw #3
   87b44:	f9006c22 	str	x2, [x1, #216]
   87b48:	a8c17bfd 	ldp	x29, x30, [sp], #16
   87b4c:	d65f03c0 	ret
   87b50:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87b54:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   87b58:	9104e021 	add	x1, x1, #0x138
   87b5c:	9106a000 	add	x0, x0, #0x1a8
   87b60:	528016a2 	mov	w2, #0xb5                  	// #181
   87b64:	94005877 	bl	9dd40 <assertion_failed>
   87b68:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87b6c:	b0000140 	adrp	x0, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   87b70:	9104e021 	add	x1, x1, #0x138
   87b74:	913fa000 	add	x0, x0, #0xfe8
   87b78:	528016c2 	mov	w2, #0xb6                  	// #182
   87b7c:	94005871 	bl	9dd40 <assertion_failed>

0000000000087b80 <CXHCIUSBDevice::TransferEvent(unsigned char, unsigned int, unsigned char)>:
   87b80:	12001c63 	and	w3, w3, #0xff
   87b84:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   87b88:	910003fd 	mov	x29, sp
   87b8c:	51000463 	sub	w3, w3, #0x1
   87b90:	12001c64 	and	w4, w3, #0xff
   87b94:	7100789f 	cmp	w4, #0x1e
   87b98:	540000e8 	b.hi	87bb4 <CXHCIUSBDevice::TransferEvent(unsigned char, unsigned int, unsigned char)+0x34>  // b.pmore
   87b9c:	8b23cc03 	add	x3, x0, w3, sxtw #3
   87ba0:	f9406c60 	ldr	x0, [x3, #216]
   87ba4:	b4000140 	cbz	x0, 87bcc <CXHCIUSBDevice::TransferEvent(unsigned char, unsigned int, unsigned char)+0x4c>
   87ba8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   87bac:	12001c21 	and	w1, w1, #0xff
   87bb0:	17fff160 	b	84130 <CXHCIEndpoint::TransferEvent(unsigned char, unsigned int)>
   87bb4:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87bb8:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   87bbc:	9104e021 	add	x1, x1, #0x138
   87bc0:	9106a000 	add	x0, x0, #0x1a8
   87bc4:	52801782 	mov	w2, #0xbc                  	// #188
   87bc8:	9400585e 	bl	9dd40 <assertion_failed>
   87bcc:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87bd0:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   87bd4:	9104e021 	add	x1, x1, #0x138
   87bd8:	91074000 	add	x0, x0, #0x1d0
   87bdc:	528017a2 	mov	w2, #0xbd                  	// #189
   87be0:	94005858 	bl	9dd40 <assertion_failed>
   87be4:	d503201f 	nop
   87be8:	d503201f 	nop
   87bec:	d503201f 	nop

0000000000087bf0 <CXHCIUSBDevice::DumpStatus()>:
   87bf0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   87bf4:	910003fd 	mov	x29, sp
   87bf8:	f0000162 	adrp	x2, b6000 <From+0x98>
   87bfc:	910b8042 	add	x2, x2, #0x2e0
   87c00:	52802001 	mov	w1, #0x100                 	// #256
   87c04:	a90153f3 	stp	x19, x20, [sp, #16]
   87c08:	aa0003f4 	mov	x20, x0
   87c0c:	91036013 	add	x19, x0, #0xd8
   87c10:	91074294 	add	x20, x20, #0x1d0
   87c14:	f9406800 	ldr	x0, [x0, #208]
   87c18:	94005a12 	bl	9e460 <debug_hexdump(void const*, unsigned int, char const*)>
   87c1c:	d503201f 	nop
   87c20:	f9400260 	ldr	x0, [x19]
   87c24:	91002273 	add	x19, x19, #0x8
   87c28:	b4000040 	cbz	x0, 87c30 <CXHCIUSBDevice::DumpStatus()+0x40>
   87c2c:	97fff1a9 	bl	842d0 <CXHCIEndpoint::DumpStatus()>
   87c30:	eb14027f 	cmp	x19, x20
   87c34:	54ffff61 	b.ne	87c20 <CXHCIUSBDevice::DumpStatus()+0x30>  // b.any
   87c38:	a94153f3 	ldp	x19, x20, [sp, #16]
   87c3c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87c40:	d65f03c0 	ret
   87c44:	d503201f 	nop
   87c48:	d503201f 	nop
   87c4c:	d503201f 	nop

0000000000087c50 <CXHCIUSBDevice::GetInputContextAddressDevice()>:
   87c50:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   87c54:	910003fd 	mov	x29, sp
   87c58:	a90153f3 	stp	x19, x20, [sp, #16]
   87c5c:	aa0003f4 	mov	x20, x0
   87c60:	f940e800 	ldr	x0, [x0, #464]
   87c64:	f90013f5 	str	x21, [sp, #32]
   87c68:	b5000de0 	cbnz	x0, 87e24 <CXHCIUSBDevice::GetInputContextAddressDevice()+0x1d4>
   87c6c:	d28283e0 	mov	x0, #0x141f                	// #5151
   87c70:	94008184 	bl	a8280 <operator new[](unsigned long)>
   87c74:	913ffc13 	add	x19, x0, #0xfff
   87c78:	d2808402 	mov	x2, #0x420                 	// #1056
   87c7c:	f900ea80 	str	x0, [x20, #464]
   87c80:	9274ce73 	and	x19, x19, #0xfffffffffffff000
   87c84:	52800001 	mov	w1, #0x0                   	// #0
   87c88:	aa1303e0 	mov	x0, x19
   87c8c:	94007ed7 	bl	a77e8 <memset>
   87c90:	b940b683 	ldr	w3, [x20, #180]
   87c94:	52800062 	mov	w2, #0x3                   	// #3
   87c98:	aa1403e0 	mov	x0, x20
   87c9c:	b9402261 	ldr	w1, [x19, #32]
   87ca0:	b9000662 	str	w2, [x19, #4]
   87ca4:	b940b282 	ldr	w2, [x20, #176]
   87ca8:	33004c61 	bfxil	w1, w3, #0, #20
   87cac:	39009a62 	strb	w2, [x19, #38]
   87cb0:	b9002261 	str	w1, [x19, #32]
   87cb4:	940002cf 	bl	887f0 <CUSBDevice::GetSpeed() const>
   87cb8:	7100041f 	cmp	w0, #0x1
   87cbc:	aa1403e0 	mov	x0, x20
   87cc0:	5400076d 	b.le	87dac <CXHCIUSBDevice::GetInputContextAddressDevice()+0x15c>
   87cc4:	940002cb 	bl	887f0 <CUSBDevice::GetSpeed() const>
   87cc8:	11000401 	add	w1, w0, #0x1
   87ccc:	12000c21 	and	w1, w1, #0xf
   87cd0:	79404662 	ldrh	w2, [x19, #34]
   87cd4:	5280e1e3 	mov	w3, #0x70f                 	// #1807
   87cd8:	531c2c21 	ubfiz	w1, w1, #4, #12
   87cdc:	32150021 	orr	w1, w1, #0x800
   87ce0:	aa1403e0 	mov	x0, x20
   87ce4:	0a030042 	and	w2, w2, w3
   87ce8:	2a020021 	orr	w1, w1, w2
   87cec:	79004661 	strh	w1, [x19, #34]
   87cf0:	940002c4 	bl	88800 <CUSBDevice::IsSplit() const>
   87cf4:	72001c1f 	tst	w0, #0xff
   87cf8:	54000641 	b.ne	87dc0 <CXHCIUSBDevice::GetInputContextAddressDevice()+0x170>  // b.any
   87cfc:	f9406e80 	ldr	x0, [x20, #216]
   87d00:	b40009e0 	cbz	x0, 87e3c <CXHCIUSBDevice::GetInputContextAddressDevice()+0x1ec>
   87d04:	97fff0ff 	bl	84100 <CXHCIEndpoint::GetTransferRing()>
   87d08:	b4000a60 	cbz	x0, 87e54 <CXHCIUSBDevice::GetInputContextAddressDevice()+0x204>
   87d0c:	97fff8c1 	bl	86010 <CXHCIRing::GetFirstTRB()>
   87d10:	aa0003e1 	mov	x1, x0
   87d14:	d00001a0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   87d18:	f9417404 	ldr	x4, [x0, #744]
   87d1c:	91010275 	add	x21, x19, #0x40
   87d20:	928fe003 	mov	x3, #0xffffffffffff80ff    	// #-32513
   87d24:	f2bfe003 	movk	x3, #0xff00, lsl #16
   87d28:	d2c004c2 	mov	x2, #0x2600000000          	// #163208757248
   87d2c:	f2c01823 	movk	x3, #0xc1, lsl #32
   87d30:	aa1403e0 	mov	x0, x20
   87d34:	aa040021 	orr	x1, x1, x4
   87d38:	b2400021 	orr	x1, x1, #0x1
   87d3c:	f90006a1 	str	x1, [x21, #8]
   87d40:	f9402261 	ldr	x1, [x19, #64]
   87d44:	8a030021 	and	x1, x1, x3
   87d48:	aa020021 	orr	x1, x1, x2
   87d4c:	f9002261 	str	x1, [x19, #64]
   87d50:	b94012a1 	ldr	w1, [x21, #16]
   87d54:	72800101 	movk	w1, #0x8
   87d58:	b90012a1 	str	w1, [x21, #16]
   87d5c:	940002a5 	bl	887f0 <CUSBDevice::GetSpeed() const>
   87d60:	7100081f 	cmp	w0, #0x2
   87d64:	54000200 	b.eq	87da4 <CXHCIUSBDevice::GetInputContextAddressDevice()+0x154>  // b.none
   87d68:	540001a9 	b.ls	87d9c <CXHCIUSBDevice::GetInputContextAddressDevice()+0x14c>  // b.plast
   87d6c:	71000c1f 	cmp	w0, #0x3
   87d70:	52804002 	mov	w2, #0x200                 	// #512
   87d74:	54000961 	b.ne	87ea0 <CXHCIUSBDevice::GetInputContextAddressDevice()+0x250>  // b.any
   87d78:	aa1303e0 	mov	x0, x19
   87d7c:	d2808401 	mov	x1, #0x420                 	// #1056
   87d80:	79000ea2 	strh	w2, [x21, #6]
   87d84:	94008603 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   87d88:	aa1303e0 	mov	x0, x19
   87d8c:	a94153f3 	ldp	x19, x20, [sp, #16]
   87d90:	f94013f5 	ldr	x21, [sp, #32]
   87d94:	a8c37bfd 	ldp	x29, x30, [sp], #48
   87d98:	d65f03c0 	ret
   87d9c:	52800102 	mov	w2, #0x8                   	// #8
   87da0:	17fffff6 	b	87d78 <CXHCIUSBDevice::GetInputContextAddressDevice()+0x128>
   87da4:	52800802 	mov	w2, #0x40                  	// #64
   87da8:	17fffff4 	b	87d78 <CXHCIUSBDevice::GetInputContextAddressDevice()+0x128>
   87dac:	94000291 	bl	887f0 <CUSBDevice::GetSpeed() const>
   87db0:	52000001 	eor	w1, w0, #0x1
   87db4:	11000421 	add	w1, w1, #0x1
   87db8:	12000c21 	and	w1, w1, #0xf
   87dbc:	17ffffc5 	b	87cd0 <CXHCIUSBDevice::GetInputContextAddressDevice()+0x80>
   87dc0:	aa1403e0 	mov	x0, x20
   87dc4:	94000293 	bl	88810 <CUSBDevice::GetHubAddress() const>
   87dc8:	2a0003e1 	mov	w1, w0
   87dcc:	aa1403e0 	mov	x0, x20
   87dd0:	3900a261 	strb	w1, [x19, #40]
   87dd4:	94000293 	bl	88820 <CUSBDevice::GetHubPortNumber() const>
   87dd8:	2a0003e1 	mov	w1, w0
   87ddc:	aa1403e0 	mov	x0, x20
   87de0:	3900a661 	strb	w1, [x19, #41]
   87de4:	94000293 	bl	88830 <CUSBDevice::GetTTHubDevice() const>
   87de8:	b4000500 	cbz	x0, 87e88 <CXHCIUSBDevice::GetInputContextAddressDevice()+0x238>
   87dec:	f9403000 	ldr	x0, [x0, #96]
   87df0:	b40000e0 	cbz	x0, 87e0c <CXHCIUSBDevice::GetInputContextAddressDevice()+0x1bc>
   87df4:	f9400002 	ldr	x2, [x0]
   87df8:	d0ffffc1 	adrp	x1, 81000 <CUSBHostController::~CUSBHostController()+0x30>
   87dfc:	91290021 	add	x1, x1, #0xa40
   87e00:	f9402c42 	ldr	x2, [x2, #88]
   87e04:	eb01005f 	cmp	x2, x1
   87e08:	54000321 	b.ne	87e6c <CXHCIUSBDevice::GetInputContextAddressDevice()+0x21c>  // b.any
   87e0c:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87e10:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   87e14:	9104e021 	add	x1, x1, #0x138
   87e18:	91084000 	add	x0, x0, #0x210
   87e1c:	52801de2 	mov	w2, #0xef                  	// #239
   87e20:	940057c8 	bl	9dd40 <assertion_failed>
   87e24:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87e28:	d0000140 	adrp	x0, b1000 <_etext+0x158>
   87e2c:	9104e021 	add	x1, x1, #0x138
   87e30:	911a8000 	add	x0, x0, #0x6a0
   87e34:	52801aa2 	mov	w2, #0xd5                  	// #213
   87e38:	940057c2 	bl	9dd40 <assertion_failed>
   87e3c:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87e40:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   87e44:	9104e021 	add	x1, x1, #0x138
   87e48:	91088000 	add	x0, x0, #0x220
   87e4c:	52801ee2 	mov	w2, #0xf7                  	// #247
   87e50:	940057bc 	bl	9dd40 <assertion_failed>
   87e54:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87e58:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   87e5c:	9104e021 	add	x1, x1, #0x138
   87e60:	9108e000 	add	x0, x0, #0x238
   87e64:	52801f22 	mov	w2, #0xf9                  	// #249
   87e68:	940057b6 	bl	9dd40 <assertion_failed>
   87e6c:	d63f0040 	blr	x2
   87e70:	b4fffce0 	cbz	x0, 87e0c <CXHCIUSBDevice::GetInputContextAddressDevice()+0x1bc>
   87e74:	39401001 	ldrb	w1, [x0, #4]
   87e78:	b9402260 	ldr	w0, [x19, #32]
   87e7c:	33070020 	bfi	w0, w1, #25, #1
   87e80:	b9002260 	str	w0, [x19, #32]
   87e84:	17ffff9e 	b	87cfc <CXHCIUSBDevice::GetInputContextAddressDevice()+0xac>
   87e88:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87e8c:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   87e90:	9104e021 	add	x1, x1, #0x138
   87e94:	9107e000 	add	x0, x0, #0x1f8
   87e98:	52801da2 	mov	w2, #0xed                  	// #237
   87e9c:	940057a9 	bl	9dd40 <assertion_failed>
   87ea0:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87ea4:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   87ea8:	9104e021 	add	x1, x1, #0x138
   87eac:	910ba000 	add	x0, x0, #0x2e8
   87eb0:	528022a2 	mov	w2, #0x115                 	// #277
   87eb4:	940057a3 	bl	9dd40 <assertion_failed>
   87eb8:	d503201f 	nop
   87ebc:	d503201f 	nop

0000000000087ec0 <CXHCIUSBDevice::GetInputContextEnableHubFunction()>:
   87ec0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   87ec4:	910003fd 	mov	x29, sp
   87ec8:	a90153f3 	stp	x19, x20, [sp, #16]
   87ecc:	aa0003f4 	mov	x20, x0
   87ed0:	f940e800 	ldr	x0, [x0, #464]
   87ed4:	f90013f5 	str	x21, [sp, #32]
   87ed8:	b5000780 	cbnz	x0, 87fc8 <CXHCIUSBDevice::GetInputContextEnableHubFunction()+0x108>
   87edc:	d28283e0 	mov	x0, #0x141f                	// #5151
   87ee0:	940080e8 	bl	a8280 <operator new[](unsigned long)>
   87ee4:	913ffc13 	add	x19, x0, #0xfff
   87ee8:	f900ea80 	str	x0, [x20, #464]
   87eec:	f9406a81 	ldr	x1, [x20, #208]
   87ef0:	9274ce73 	and	x19, x19, #0xfffffffffffff000
   87ef4:	b4000761 	cbz	x1, 87fe0 <CXHCIUSBDevice::GetInputContextEnableHubFunction()+0x120>
   87ef8:	d2800402 	mov	x2, #0x20                  	// #32
   87efc:	52800001 	mov	w1, #0x0                   	// #0
   87f00:	aa1303e0 	mov	x0, x19
   87f04:	94007e39 	bl	a77e8 <memset>
   87f08:	f9406a81 	ldr	x1, [x20, #208]
   87f0c:	d2808002 	mov	x2, #0x400                 	// #1024
   87f10:	91008260 	add	x0, x19, #0x20
   87f14:	94007e4d 	bl	a7848 <memcpy>
   87f18:	f9403280 	ldr	x0, [x20, #96]
   87f1c:	b20003e1 	mov	x1, #0x100000001           	// #4294967297
   87f20:	f9000261 	str	x1, [x19]
   87f24:	b40000e0 	cbz	x0, 87f40 <CXHCIUSBDevice::GetInputContextEnableHubFunction()+0x80>
   87f28:	f9400002 	ldr	x2, [x0]
   87f2c:	d0ffffc1 	adrp	x1, 81000 <CUSBHostController::~CUSBHostController()+0x30>
   87f30:	91290021 	add	x1, x1, #0xa40
   87f34:	f9402c42 	ldr	x2, [x2, #88]
   87f38:	eb01005f 	cmp	x2, x1
   87f3c:	540000e1 	b.ne	87f58 <CXHCIUSBDevice::GetInputContextEnableHubFunction()+0x98>  // b.any
   87f40:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87f44:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   87f48:	9104e021 	add	x1, x1, #0x138
   87f4c:	91094000 	add	x0, x0, #0x250
   87f50:	52802622 	mov	w2, #0x131                 	// #305
   87f54:	9400577b 	bl	9dd40 <assertion_failed>
   87f58:	d63f0040 	blr	x2
   87f5c:	aa0003f5 	mov	x21, x0
   87f60:	b4ffff00 	cbz	x0, 87f40 <CXHCIUSBDevice::GetInputContextEnableHubFunction()+0x80>
   87f64:	f9401261 	ldr	x1, [x19, #32]
   87f68:	aa1403e0 	mov	x0, x20
   87f6c:	b2660021 	orr	x1, x1, #0x4000000
   87f70:	f9001261 	str	x1, [x19, #32]
   87f74:	b94002a1 	ldr	w1, [x21]
   87f78:	39009e61 	strb	w1, [x19, #39]
   87f7c:	9400021d 	bl	887f0 <CUSBDevice::GetSpeed() const>
   87f80:	7100081f 	cmp	w0, #0x2
   87f84:	54000121 	b.ne	87fa8 <CXHCIUSBDevice::GetInputContextEnableHubFunction()+0xe8>  // b.any
   87f88:	394012a2 	ldrb	w2, [x21, #4]
   87f8c:	b9402261 	ldr	w1, [x19, #32]
   87f90:	b9402a60 	ldr	w0, [x19, #40]
   87f94:	33070041 	bfi	w1, w2, #25, #1
   87f98:	b9002261 	str	w1, [x19, #32]
   87f9c:	394016a1 	ldrb	w1, [x21, #5]
   87fa0:	33100420 	bfi	w0, w1, #16, #2
   87fa4:	b9002a60 	str	w0, [x19, #40]
   87fa8:	aa1303e0 	mov	x0, x19
   87fac:	d2808401 	mov	x1, #0x420                 	// #1056
   87fb0:	94008578 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   87fb4:	aa1303e0 	mov	x0, x19
   87fb8:	a94153f3 	ldp	x19, x20, [sp, #16]
   87fbc:	f94013f5 	ldr	x21, [sp, #32]
   87fc0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   87fc4:	d65f03c0 	ret
   87fc8:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87fcc:	d0000140 	adrp	x0, b1000 <_etext+0x158>
   87fd0:	9104e021 	add	x1, x1, #0x138
   87fd4:	911a8000 	add	x0, x0, #0x6a0
   87fd8:	52802402 	mov	w2, #0x120                 	// #288
   87fdc:	94005759 	bl	9dd40 <assertion_failed>
   87fe0:	f0000141 	adrp	x1, b2000 <_etext+0x1158>
   87fe4:	f0000140 	adrp	x0, b2000 <_etext+0x1158>
   87fe8:	9104e021 	add	x1, x1, #0x138
   87fec:	91064000 	add	x0, x0, #0x190
   87ff0:	528024e2 	mov	w2, #0x127                 	// #295
   87ff4:	94005753 	bl	9dd40 <assertion_failed>
   87ff8:	d503201f 	nop
   87ffc:	d503201f 	nop

0000000000088000 <CXHCIUSBDevice::EnableHubFunction()>:
   88000:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   88004:	910003fd 	mov	x29, sp
   88008:	a90153f3 	stp	x19, x20, [sp, #16]
   8800c:	aa0003f3 	mov	x19, x0
   88010:	97ffffac 	bl	87ec0 <CXHCIUSBDevice::GetInputContextEnableHubFunction()>
   88014:	b40003c0 	cbz	x0, 8808c <CXHCIUSBDevice::EnableHubFunction()+0x8c>
   88018:	aa0003f4 	mov	x20, x0
   8801c:	f9405e60 	ldr	x0, [x19, #184]
   88020:	97ffed3c 	bl	83510 <CXHCIDevice::GetCommandManager()>
   88024:	aa1403e2 	mov	x2, x20
   88028:	39432261 	ldrb	w1, [x19, #200]
   8802c:	94002e95 	bl	93a80 <CXHCICommandManager::EvaluateContext(unsigned char, TXHCIInputContext*)>
   88030:	2a0003f4 	mov	w20, w0
   88034:	f940ea60 	ldr	x0, [x19, #464]
   88038:	b4000360 	cbz	x0, 880a4 <CXHCIUSBDevice::EnableHubFunction()+0xa4>
   8803c:	940080a5 	bl	a82d0 <operator delete[](void*)>
   88040:	7100069f 	cmp	w20, #0x1
   88044:	f900ea7f 	str	xzr, [x19, #464]
   88048:	52800020 	mov	w0, #0x1                   	// #1
   8804c:	54000081 	b.ne	8805c <CXHCIUSBDevice::EnableHubFunction()+0x5c>  // b.any
   88050:	a94153f3 	ldp	x19, x20, [sp, #16]
   88054:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88058:	d65f03c0 	ret
   8805c:	94005e6d 	bl	9fa10 <CLogger::Get()>
   88060:	d0000143 	adrp	x3, b2000 <_etext+0x1158>
   88064:	d0000161 	adrp	x1, b6000 <From+0x98>
   88068:	2a1403e4 	mov	w4, w20
   8806c:	91098063 	add	x3, x3, #0x260
   88070:	910b8021 	add	x1, x1, #0x2e0
   88074:	52800042 	mov	w2, #0x2                   	// #2
   88078:	94006052 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8807c:	52800000 	mov	w0, #0x0                   	// #0
   88080:	a94153f3 	ldp	x19, x20, [sp, #16]
   88084:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88088:	d65f03c0 	ret
   8808c:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   88090:	b0000140 	adrp	x0, b1000 <_etext+0x158>
   88094:	9104e021 	add	x1, x1, #0x138
   88098:	91240000 	add	x0, x0, #0x900
   8809c:	528012a2 	mov	w2, #0x95                  	// #149
   880a0:	94005728 	bl	9dd40 <assertion_failed>
   880a4:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   880a8:	b0000140 	adrp	x0, b1000 <_etext+0x158>
   880ac:	9104e021 	add	x1, x1, #0x138
   880b0:	9124c000 	add	x0, x0, #0x930
   880b4:	52802862 	mov	w2, #0x143                 	// #323
   880b8:	94005722 	bl	9dd40 <assertion_failed>
   880bc:	d503201f 	nop

00000000000880c0 <CXHCIUSBDevice::FreeInputContext()>:
   880c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   880c4:	910003fd 	mov	x29, sp
   880c8:	f9000bf3 	str	x19, [sp, #16]
   880cc:	aa0003f3 	mov	x19, x0
   880d0:	f940e800 	ldr	x0, [x0, #464]
   880d4:	b40000c0 	cbz	x0, 880ec <CXHCIUSBDevice::FreeInputContext()+0x2c>
   880d8:	9400807e 	bl	a82d0 <operator delete[](void*)>
   880dc:	f900ea7f 	str	xzr, [x19, #464]
   880e0:	f9400bf3 	ldr	x19, [sp, #16]
   880e4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   880e8:	d65f03c0 	ret
   880ec:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   880f0:	b0000140 	adrp	x0, b1000 <_etext+0x158>
   880f4:	9104e021 	add	x1, x1, #0x138
   880f8:	9124c000 	add	x0, x0, #0x930
   880fc:	52802862 	mov	w2, #0x143                 	// #323
   88100:	94005710 	bl	9dd40 <assertion_failed>
   88104:	d503201f 	nop
   88108:	d503201f 	nop
   8810c:	d503201f 	nop

0000000000088110 <CXHCIUSBDevice::Initialize()>:
   88110:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   88114:	910003fd 	mov	x29, sp
   88118:	a90153f3 	stp	x19, x20, [sp, #16]
   8811c:	aa0003f3 	mov	x19, x0
   88120:	f9406800 	ldr	x0, [x0, #208]
   88124:	b4000940 	cbz	x0, 8824c <CXHCIUSBDevice::Initialize()+0x13c>
   88128:	f9405e60 	ldr	x0, [x19, #184]
   8812c:	b4000980 	cbz	x0, 8825c <CXHCIUSBDevice::Initialize()+0x14c>
   88130:	97ffecf8 	bl	83510 <CXHCIDevice::GetCommandManager()>
   88134:	91032261 	add	x1, x19, #0xc8
   88138:	94002dd2 	bl	93880 <CXHCICommandManager::EnableSlot(unsigned char*)>
   8813c:	7100041f 	cmp	w0, #0x1
   88140:	2a0003f4 	mov	w20, w0
   88144:	54000541 	b.ne	881ec <CXHCIUSBDevice::Initialize()+0xdc>  // b.any
   88148:	f90013f5 	str	x21, [sp, #32]
   8814c:	39432260 	ldrb	w0, [x19, #200]
   88150:	51000400 	sub	w0, w0, #0x1
   88154:	12001c00 	and	w0, w0, #0xff
   88158:	71007c1f 	cmp	w0, #0x1f
   8815c:	540008e8 	b.hi	88278 <CXHCIUSBDevice::Initialize()+0x168>  // b.pmore
   88160:	f9405e60 	ldr	x0, [x19, #184]
   88164:	97ffecdf 	bl	834e0 <CXHCIDevice::GetSlotManager()>
   88168:	39432261 	ldrb	w1, [x19, #200]
   8816c:	aa1303e2 	mov	x2, x19
   88170:	97fffd40 	bl	87670 <CXHCISlotManager::AssignDevice(unsigned char, CXHCIUSBDevice*)>
   88174:	aa1303e0 	mov	x0, x19
   88178:	97fffeb6 	bl	87c50 <CXHCIUSBDevice::GetInputContextAddressDevice()>
   8817c:	aa0003f5 	mov	x21, x0
   88180:	b4000880 	cbz	x0, 88290 <CXHCIUSBDevice::Initialize()+0x180>
   88184:	f9405e60 	ldr	x0, [x19, #184]
   88188:	97ffece2 	bl	83510 <CXHCIDevice::GetCommandManager()>
   8818c:	2a1403e3 	mov	w3, w20
   88190:	39432261 	ldrb	w1, [x19, #200]
   88194:	aa1503e2 	mov	x2, x21
   88198:	94002dee 	bl	93950 <CXHCICommandManager::AddressDevice(unsigned char, TXHCIInputContext*, bool)>
   8819c:	2a0003f4 	mov	w20, w0
   881a0:	f940ea60 	ldr	x0, [x19, #464]
   881a4:	b4000820 	cbz	x0, 882a8 <CXHCIUSBDevice::Initialize()+0x198>
   881a8:	9400804a 	bl	a82d0 <operator delete[](void*)>
   881ac:	7100069f 	cmp	w20, #0x1
   881b0:	f900ea7f 	str	xzr, [x19, #464]
   881b4:	54000360 	b.eq	88220 <CXHCIUSBDevice::Initialize()+0x110>  // b.none
   881b8:	94005e16 	bl	9fa10 <CLogger::Get()>
   881bc:	d0000143 	adrp	x3, b2000 <_etext+0x1158>
   881c0:	d0000161 	adrp	x1, b6000 <From+0x98>
   881c4:	2a1403e4 	mov	w4, w20
   881c8:	910a6063 	add	x3, x3, #0x298
   881cc:	910b8021 	add	x1, x1, #0x2e0
   881d0:	52800042 	mov	w2, #0x2                   	// #2
   881d4:	94005ffb 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   881d8:	52800000 	mov	w0, #0x0                   	// #0
   881dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   881e0:	f94013f5 	ldr	x21, [sp, #32]
   881e4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   881e8:	d65f03c0 	ret
   881ec:	94005e09 	bl	9fa10 <CLogger::Get()>
   881f0:	d0000143 	adrp	x3, b2000 <_etext+0x1158>
   881f4:	d0000161 	adrp	x1, b6000 <From+0x98>
   881f8:	2a1403e4 	mov	w4, w20
   881fc:	910a0063 	add	x3, x3, #0x280
   88200:	910b8021 	add	x1, x1, #0x2e0
   88204:	52800042 	mov	w2, #0x2                   	// #2
   88208:	94005fee 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8820c:	52800000 	mov	w0, #0x0                   	// #0
   88210:	3903227f 	strb	wzr, [x19, #200]
   88214:	a94153f3 	ldp	x19, x20, [sp, #16]
   88218:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8821c:	d65f03c0 	ret
   88220:	94007bb4 	bl	a70f0 <CTimer::Get()>
   88224:	52800640 	mov	w0, #0x32                  	// #50
   88228:	94007b56 	bl	a6f80 <CTimer::SimpleMsDelay(unsigned int)>
   8822c:	39432261 	ldrb	w1, [x19, #200]
   88230:	aa1303e0 	mov	x0, x19
   88234:	9400015b 	bl	887a0 <CUSBDevice::SetAddress(unsigned char)>
   88238:	aa1303e0 	mov	x0, x19
   8823c:	a94153f3 	ldp	x19, x20, [sp, #16]
   88240:	f94013f5 	ldr	x21, [sp, #32]
   88244:	a8c37bfd 	ldp	x29, x30, [sp], #48
   88248:	14000302 	b	88e50 <CUSBDevice::Initialize()>
   8824c:	52800000 	mov	w0, #0x0                   	// #0
   88250:	a94153f3 	ldp	x19, x20, [sp, #16]
   88254:	a8c37bfd 	ldp	x29, x30, [sp], #48
   88258:	d65f03c0 	ret
   8825c:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   88260:	b0000140 	adrp	x0, b1000 <_etext+0x158>
   88264:	f90013f5 	str	x21, [sp, #32]
   88268:	9104e021 	add	x1, x1, #0x138
   8826c:	91246000 	add	x0, x0, #0x918
   88270:	52800de2 	mov	w2, #0x6f                  	// #111
   88274:	940056b3 	bl	9dd40 <assertion_failed>
   88278:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   8827c:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   88280:	9104e021 	add	x1, x1, #0x138
   88284:	9105c000 	add	x0, x0, #0x170
   88288:	52800f62 	mov	w2, #0x7b                  	// #123
   8828c:	940056ad 	bl	9dd40 <assertion_failed>
   88290:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   88294:	b0000140 	adrp	x0, b1000 <_etext+0x158>
   88298:	9104e021 	add	x1, x1, #0x138
   8829c:	91240000 	add	x0, x0, #0x900
   882a0:	52800fe2 	mov	w2, #0x7f                  	// #127
   882a4:	940056a7 	bl	9dd40 <assertion_failed>
   882a8:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   882ac:	b0000140 	adrp	x0, b1000 <_etext+0x158>
   882b0:	9104e021 	add	x1, x1, #0x138
   882b4:	9124c000 	add	x0, x0, #0x930
   882b8:	52802862 	mov	w2, #0x143                 	// #323
   882bc:	940056a1 	bl	9dd40 <assertion_failed>

00000000000882c0 <CUSBDevice::Configure()>:
   882c0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   882c4:	910003fd 	mov	x29, sp
   882c8:	f9400401 	ldr	x1, [x0, #8]
   882cc:	b40004e1 	cbz	x1, 88368 <CUSBDevice::Configure()+0xa8>
   882d0:	f9401801 	ldr	x1, [x0, #48]
   882d4:	b40005a1 	cbz	x1, 88388 <CUSBDevice::Configure()+0xc8>
   882d8:	f9402801 	ldr	x1, [x0, #80]
   882dc:	f90013f5 	str	x21, [sp, #32]
   882e0:	b40003a1 	cbz	x1, 88354 <CUSBDevice::Configure()+0x94>
   882e4:	52800015 	mov	w21, #0x0                   	// #0
   882e8:	a90153f3 	stp	x19, x20, [sp, #16]
   882ec:	91018013 	add	x19, x0, #0x60
   882f0:	9102c014 	add	x20, x0, #0xb0
   882f4:	d503201f 	nop
   882f8:	f9400260 	ldr	x0, [x19]
   882fc:	b4000180 	cbz	x0, 8832c <CUSBDevice::Configure()+0x6c>
   88300:	f9400001 	ldr	x1, [x0]
   88304:	f9402421 	ldr	x1, [x1, #72]
   88308:	d63f0020 	blr	x1
   8830c:	72001c00 	ands	w0, w0, #0xff
   88310:	540001e1 	b.ne	8834c <CUSBDevice::Configure()+0x8c>  // b.any
   88314:	f9400260 	ldr	x0, [x19]
   88318:	b4000080 	cbz	x0, 88328 <CUSBDevice::Configure()+0x68>
   8831c:	f9400001 	ldr	x1, [x0]
   88320:	f9400421 	ldr	x1, [x1, #8]
   88324:	d63f0020 	blr	x1
   88328:	f900027f 	str	xzr, [x19]
   8832c:	91002273 	add	x19, x19, #0x8
   88330:	eb14027f 	cmp	x19, x20
   88334:	54fffe21 	b.ne	882f8 <CUSBDevice::Configure()+0x38>  // b.any
   88338:	2a1503e0 	mov	w0, w21
   8833c:	a94153f3 	ldp	x19, x20, [sp, #16]
   88340:	f94013f5 	ldr	x21, [sp, #32]
   88344:	a8c37bfd 	ldp	x29, x30, [sp], #48
   88348:	d65f03c0 	ret
   8834c:	2a0003f5 	mov	w21, w0
   88350:	17fffff7 	b	8832c <CUSBDevice::Configure()+0x6c>
   88354:	52800015 	mov	w21, #0x0                   	// #0
   88358:	2a1503e0 	mov	w0, w21
   8835c:	f94013f5 	ldr	x21, [sp, #32]
   88360:	a8c37bfd 	ldp	x29, x30, [sp], #48
   88364:	d65f03c0 	ret
   88368:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   8836c:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   88370:	a90153f3 	stp	x19, x20, [sp, #16]
   88374:	910ae021 	add	x1, x1, #0x2b8
   88378:	910b2000 	add	x0, x0, #0x2c8
   8837c:	52803c62 	mov	w2, #0x1e3                 	// #483
   88380:	f90013f5 	str	x21, [sp, #32]
   88384:	9400566f 	bl	9dd40 <assertion_failed>
   88388:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   8838c:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   88390:	a90153f3 	stp	x19, x20, [sp, #16]
   88394:	910ae021 	add	x1, x1, #0x2b8
   88398:	910b6000 	add	x0, x0, #0x2d8
   8839c:	52803c82 	mov	w2, #0x1e4                 	// #484
   883a0:	f90013f5 	str	x21, [sp, #32]
   883a4:	94005667 	bl	9dd40 <assertion_failed>
   883a8:	d503201f 	nop
   883ac:	d503201f 	nop

00000000000883b0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>:
   883b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   883b4:	910003fd 	mov	x29, sp
   883b8:	52800024 	mov	w4, #0x1                   	// #1
   883bc:	a90153f3 	stp	x19, x20, [sp, #16]
   883c0:	aa0003f3 	mov	x19, x0
   883c4:	aa0303e0 	mov	x0, x3
   883c8:	d0000163 	adrp	x3, b6000 <From+0x98>
   883cc:	910be063 	add	x3, x3, #0x2f8
   883d0:	a9000663 	stp	x3, x1, [x19]
   883d4:	a9017e60 	stp	x0, xzr, [x19, #16]
   883d8:	3900927f 	strb	wzr, [x19, #36]
   883dc:	b9002a62 	str	w2, [x19, #40]
   883e0:	f9001a7f 	str	xzr, [x19, #48]
   883e4:	7900727f 	strh	wzr, [x19, #56]
   883e8:	3900ea64 	strb	w4, [x19, #58]
   883ec:	a9047e7f 	stp	xzr, xzr, [x19, #64]
   883f0:	a9057e7f 	stp	xzr, xzr, [x19, #80]
   883f4:	b40002e1 	cbz	x1, 88450 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xa0>
   883f8:	b4000380 	cbz	x0, 88468 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb8>
   883fc:	f9400001 	ldr	x1, [x0]
   88400:	f9401421 	ldr	x1, [x1, #40]
   88404:	d63f0020 	blr	x1
   88408:	12001c00 	and	w0, w0, #0xff
   8840c:	f9401a61 	ldr	x1, [x19, #48]
   88410:	29167e60 	stp	w0, wzr, [x19, #176]
   88414:	b5000361 	cbnz	x1, 88480 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xd0>
   88418:	d2800400 	mov	x0, #0x20                  	// #32
   8841c:	94007f91 	bl	a8260 <operator new(unsigned long)>
   88420:	aa1303e1 	mov	x1, x19
   88424:	aa0003f4 	mov	x20, x0
   88428:	94000722 	bl	8a0b0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
   8842c:	91018262 	add	x2, x19, #0x60
   88430:	9102c261 	add	x1, x19, #0xb0
   88434:	f9001a74 	str	x20, [x19, #48]
   88438:	f800845f 	str	xzr, [x2], #8
   8843c:	eb01005f 	cmp	x2, x1
   88440:	54ffffc1 	b.ne	88438 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x88>  // b.any
   88444:	a94153f3 	ldp	x19, x20, [sp, #16]
   88448:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8844c:	d65f03c0 	ret
   88450:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   88454:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   88458:	910ae021 	add	x1, x1, #0x2b8
   8845c:	910b2000 	add	x0, x0, #0x2c8
   88460:	52800702 	mov	w2, #0x38                  	// #56
   88464:	94005637 	bl	9dd40 <assertion_failed>
   88468:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   8846c:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   88470:	910ae021 	add	x1, x1, #0x2b8
   88474:	910bc000 	add	x0, x0, #0x2f0
   88478:	52800722 	mov	w2, #0x39                  	// #57
   8847c:	94005631 	bl	9dd40 <assertion_failed>
   88480:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   88484:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   88488:	910ae021 	add	x1, x1, #0x2b8
   8848c:	910c2000 	add	x0, x0, #0x308
   88490:	52800802 	mov	w2, #0x40                  	// #64
   88494:	9400562b 	bl	9dd40 <assertion_failed>
   88498:	d503201f 	nop
   8849c:	d503201f 	nop

00000000000884a0 <CUSBDevice::ReScanDevices()>:
   884a0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   884a4:	910003fd 	mov	x29, sp
   884a8:	a90153f3 	stp	x19, x20, [sp, #16]
   884ac:	52800014 	mov	w20, #0x0                   	// #0
   884b0:	91018013 	add	x19, x0, #0x60
   884b4:	f90013f5 	str	x21, [sp, #32]
   884b8:	9102c015 	add	x21, x0, #0xb0
   884bc:	d503201f 	nop
   884c0:	f9400260 	ldr	x0, [x19]
   884c4:	91002273 	add	x19, x19, #0x8
   884c8:	b40000c0 	cbz	x0, 884e0 <CUSBDevice::ReScanDevices()+0x40>
   884cc:	f9400001 	ldr	x1, [x0]
   884d0:	f9402821 	ldr	x1, [x1, #80]
   884d4:	d63f0020 	blr	x1
   884d8:	72001c00 	ands	w0, w0, #0xff
   884dc:	1a800294 	csel	w20, w20, w0, eq	// eq = none
   884e0:	eb15027f 	cmp	x19, x21
   884e4:	54fffee1 	b.ne	884c0 <CUSBDevice::ReScanDevices()+0x20>  // b.any
   884e8:	2a1403e0 	mov	w0, w20
   884ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   884f0:	f94013f5 	ldr	x21, [sp, #32]
   884f4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   884f8:	d65f03c0 	ret
   884fc:	d503201f 	nop

0000000000088500 <CUSBDevice::RemoveDevice()>:
   88500:	aa0003e1 	mov	x1, x0
   88504:	f9400800 	ldr	x0, [x0, #16]
   88508:	b40000a0 	cbz	x0, 8851c <CUSBDevice::RemoveDevice()+0x1c>
   8850c:	f9400001 	ldr	x1, [x0]
   88510:	f9400c21 	ldr	x1, [x1, #24]
   88514:	aa0103f0 	mov	x16, x1
   88518:	d61f0200 	br	x16
   8851c:	f9400c20 	ldr	x0, [x1, #24]
   88520:	b4000060 	cbz	x0, 8852c <CUSBDevice::RemoveDevice()+0x2c>
   88524:	b9402021 	ldr	w1, [x1, #32]
   88528:	17ffe75a 	b	82290 <CUSBStandardHub::RemoveDeviceAt(unsigned int)>
   8852c:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   88530:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   88534:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   88538:	910ae021 	add	x1, x1, #0x2b8
   8853c:	910003fd 	mov	x29, sp
   88540:	910c8000 	add	x0, x0, #0x320
   88544:	52804362 	mov	w2, #0x21b                 	// #539
   88548:	940055fe 	bl	9dd40 <assertion_failed>
   8854c:	d503201f 	nop

0000000000088550 <CUSBDevice::GetName(TDeviceNameSelector) const>:
   88550:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   88554:	910003fd 	mov	x29, sp
   88558:	f90013f5 	str	x21, [sp, #32]
   8855c:	aa0003f5 	mov	x21, x0
   88560:	d2800400 	mov	x0, #0x20                  	// #32
   88564:	a90153f3 	stp	x19, x20, [sp, #16]
   88568:	2a0103f3 	mov	w19, w1
   8856c:	94007f3d 	bl	a8260 <operator new(unsigned long)>
   88570:	aa0003f4 	mov	x20, x0
   88574:	94007037 	bl	a4650 <CString::CString()>
   88578:	340002b3 	cbz	w19, 885cc <CUSBDevice::GetName(TDeviceNameSelector) const+0x7c>
   8857c:	7100067f 	cmp	w19, #0x1
   88580:	54000721 	b.ne	88664 <CUSBDevice::GetName(TDeviceNameSelector) const+0x114>  // b.any
   88584:	f94026a3 	ldr	x3, [x21, #72]
   88588:	b4000563 	cbz	x3, 88634 <CUSBDevice::GetName(TDeviceNameSelector) const+0xe4>
   8858c:	39401062 	ldrb	w2, [x3, #4]
   88590:	51000440 	sub	w0, w2, #0x1
   88594:	12001c00 	and	w0, w0, #0xff
   88598:	7103f41f 	cmp	w0, #0xfd
   8859c:	540003a8 	b.hi	88610 <CUSBDevice::GetName(TDeviceNameSelector) const+0xc0>  // b.pmore
   885a0:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   885a4:	39401864 	ldrb	w4, [x3, #6]
   885a8:	aa1403e0 	mov	x0, x20
   885ac:	910d8021 	add	x1, x1, #0x360
   885b0:	39401463 	ldrb	w3, [x3, #5]
   885b4:	9400765f 	bl	a5f30 <CString::Format(char const*, ...)>
   885b8:	aa1403e0 	mov	x0, x20
   885bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   885c0:	f94013f5 	ldr	x21, [sp, #32]
   885c4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   885c8:	d65f03c0 	ret
   885cc:	f94026a4 	ldr	x4, [x21, #72]
   885d0:	b40003e4 	cbz	x4, 8864c <CUSBDevice::GetName(TDeviceNameSelector) const+0xfc>
   885d4:	39402c85 	ldrb	w5, [x4, #11]
   885d8:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   885dc:	aa1403e0 	mov	x0, x20
   885e0:	910d2021 	add	x1, x1, #0x348
   885e4:	39402883 	ldrb	w3, [x4, #10]
   885e8:	39402082 	ldrb	w2, [x4, #8]
   885ec:	39402484 	ldrb	w4, [x4, #9]
   885f0:	2a052063 	orr	w3, w3, w5, lsl #8
   885f4:	2a042042 	orr	w2, w2, w4, lsl #8
   885f8:	9400764e 	bl	a5f30 <CString::Format(char const*, ...)>
   885fc:	aa1403e0 	mov	x0, x20
   88600:	a94153f3 	ldp	x19, x20, [sp, #16]
   88604:	f94013f5 	ldr	x21, [sp, #32]
   88608:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8860c:	d65f03c0 	ret
   88610:	aa1403e0 	mov	x0, x20
   88614:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   88618:	910d6021 	add	x1, x1, #0x358
   8861c:	94007059 	bl	a4780 <CString::operator=(char const*)>
   88620:	aa1403e0 	mov	x0, x20
   88624:	a94153f3 	ldp	x19, x20, [sp, #16]
   88628:	f94013f5 	ldr	x21, [sp, #32]
   8862c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   88630:	d65f03c0 	ret
   88634:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   88638:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   8863c:	910ae021 	add	x1, x1, #0x2b8
   88640:	910cc000 	add	x0, x0, #0x330
   88644:	528045c2 	mov	w2, #0x22e                 	// #558
   88648:	940055be 	bl	9dd40 <assertion_failed>
   8864c:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   88650:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   88654:	910ae021 	add	x1, x1, #0x2b8
   88658:	910cc000 	add	x0, x0, #0x330
   8865c:	528044e2 	mov	w2, #0x227                 	// #551
   88660:	940055b8 	bl	9dd40 <assertion_failed>
   88664:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   88668:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   8866c:	910ae021 	add	x1, x1, #0x2b8
   88670:	910ba000 	add	x0, x0, #0x2e8
   88674:	52804762 	mov	w2, #0x23b                 	// #571
   88678:	940055b2 	bl	9dd40 <assertion_failed>
   8867c:	d503201f 	nop

0000000000088680 <CUSBDevice::GetNames() const>:
   88680:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   88684:	910003fd 	mov	x29, sp
   88688:	a90363f7 	stp	x23, x24, [sp, #48]
   8868c:	aa0003f7 	mov	x23, x0
   88690:	d2800400 	mov	x0, #0x20                  	// #32
   88694:	a90153f3 	stp	x19, x20, [sp, #16]
   88698:	a9025bf5 	stp	x21, x22, [sp, #32]
   8869c:	52800015 	mov	w21, #0x0                   	// #0
   886a0:	d0000156 	adrp	x22, b2000 <_etext+0x1158>
   886a4:	910d62d6 	add	x22, x22, #0x358
   886a8:	94007eee 	bl	a8260 <operator new(unsigned long)>
   886ac:	aa0003f4 	mov	x20, x0
   886b0:	94006fe8 	bl	a4650 <CString::CString()>
   886b4:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   886b8:	910e0038 	add	x24, x1, #0x380
   886bc:	aa1703e0 	mov	x0, x23
   886c0:	2a1503e1 	mov	w1, w21
   886c4:	97ffffa3 	bl	88550 <CUSBDevice::GetName(TDeviceNameSelector) const>
   886c8:	aa0003f3 	mov	x19, x0
   886cc:	b4000300 	cbz	x0, 8872c <CUSBDevice::GetNames() const+0xac>
   886d0:	aa1603e1 	mov	x1, x22
   886d4:	940070db 	bl	a4a40 <CString::Compare(char const*) const>
   886d8:	35000360 	cbnz	w0, 88744 <CUSBDevice::GetNames() const+0xc4>
   886dc:	f9400261 	ldr	x1, [x19]
   886e0:	aa1303e0 	mov	x0, x19
   886e4:	f9400421 	ldr	x1, [x1, #8]
   886e8:	d63f0020 	blr	x1
   886ec:	34000155 	cbz	w21, 88714 <CUSBDevice::GetNames() const+0x94>
   886f0:	aa1403e0 	mov	x0, x20
   886f4:	9400706f 	bl	a48b0 <CString::GetLength() const>
   886f8:	b4000380 	cbz	x0, 88768 <CUSBDevice::GetNames() const+0xe8>
   886fc:	aa1403e0 	mov	x0, x20
   88700:	a94153f3 	ldp	x19, x20, [sp, #16]
   88704:	a9425bf5 	ldp	x21, x22, [sp, #32]
   88708:	a94363f7 	ldp	x23, x24, [sp, #48]
   8870c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   88710:	d65f03c0 	ret
   88714:	52800035 	mov	w21, #0x1                   	// #1
   88718:	aa1703e0 	mov	x0, x23
   8871c:	2a1503e1 	mov	w1, w21
   88720:	97ffff8c 	bl	88550 <CUSBDevice::GetName(TDeviceNameSelector) const>
   88724:	aa0003f3 	mov	x19, x0
   88728:	b5fffd40 	cbnz	x0, 886d0 <CUSBDevice::GetNames() const+0x50>
   8872c:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   88730:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   88734:	910ae021 	add	x1, x1, #0x2b8
   88738:	910dc000 	add	x0, x0, #0x370
   8873c:	52804982 	mov	w2, #0x24c                 	// #588
   88740:	94005580 	bl	9dd40 <assertion_failed>
   88744:	aa1403e0 	mov	x0, x20
   88748:	9400705a 	bl	a48b0 <CString::GetLength() const>
   8874c:	b5000200 	cbnz	x0, 8878c <CUSBDevice::GetNames() const+0x10c>
   88750:	aa1303e0 	mov	x0, x19
   88754:	94007003 	bl	a4760 <CString::operator char const*() const>
   88758:	aa0003e1 	mov	x1, x0
   8875c:	aa1403e0 	mov	x0, x20
   88760:	9400705c 	bl	a48d0 <CString::Append(char const*)>
   88764:	17ffffde 	b	886dc <CUSBDevice::GetNames() const+0x5c>
   88768:	aa1603e1 	mov	x1, x22
   8876c:	aa1403e0 	mov	x0, x20
   88770:	94007004 	bl	a4780 <CString::operator=(char const*)>
   88774:	aa1403e0 	mov	x0, x20
   88778:	a94153f3 	ldp	x19, x20, [sp, #16]
   8877c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   88780:	a94363f7 	ldp	x23, x24, [sp, #48]
   88784:	a8c47bfd 	ldp	x29, x30, [sp], #64
   88788:	d65f03c0 	ret
   8878c:	aa1803e1 	mov	x1, x24
   88790:	aa1403e0 	mov	x0, x20
   88794:	9400704f 	bl	a48d0 <CString::Append(char const*)>
   88798:	17ffffee 	b	88750 <CUSBDevice::GetNames() const+0xd0>
   8879c:	d503201f 	nop

00000000000887a0 <CUSBDevice::SetAddress(unsigned char)>:
   887a0:	12001c21 	and	w1, w1, #0xff
   887a4:	51000422 	sub	w2, w1, #0x1
   887a8:	12001c42 	and	w2, w2, #0xff
   887ac:	71007c5f 	cmp	w2, #0x1f
   887b0:	54000068 	b.hi	887bc <CUSBDevice::SetAddress(unsigned char)+0x1c>  // b.pmore
   887b4:	39009001 	strb	w1, [x0, #36]
   887b8:	d65f03c0 	ret
   887bc:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   887c0:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   887c4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   887c8:	910ae021 	add	x1, x1, #0x2b8
   887cc:	910003fd 	mov	x29, sp
   887d0:	910e2000 	add	x0, x0, #0x388
   887d4:	52804d02 	mov	w2, #0x268                 	// #616
   887d8:	9400555a 	bl	9dd40 <assertion_failed>
   887dc:	d503201f 	nop

00000000000887e0 <CUSBDevice::GetAddress() const>:
   887e0:	39409000 	ldrb	w0, [x0, #36]
   887e4:	d65f03c0 	ret
   887e8:	d503201f 	nop
   887ec:	d503201f 	nop

00000000000887f0 <CUSBDevice::GetSpeed() const>:
   887f0:	b9402800 	ldr	w0, [x0, #40]
   887f4:	d65f03c0 	ret
   887f8:	d503201f 	nop
   887fc:	d503201f 	nop

0000000000088800 <CUSBDevice::IsSplit() const>:
   88800:	3940e000 	ldrb	w0, [x0, #56]
   88804:	d65f03c0 	ret
   88808:	d503201f 	nop
   8880c:	d503201f 	nop

0000000000088810 <CUSBDevice::GetHubAddress() const>:
   88810:	3940e400 	ldrb	w0, [x0, #57]
   88814:	d65f03c0 	ret
   88818:	d503201f 	nop
   8881c:	d503201f 	nop

0000000000088820 <CUSBDevice::GetHubPortNumber() const>:
   88820:	3940e800 	ldrb	w0, [x0, #58]
   88824:	d65f03c0 	ret
   88828:	d503201f 	nop
   8882c:	d503201f 	nop

0000000000088830 <CUSBDevice::GetTTHubDevice() const>:
   88830:	f9402000 	ldr	x0, [x0, #64]
   88834:	d65f03c0 	ret
   88838:	d503201f 	nop
   8883c:	d503201f 	nop

0000000000088840 <CUSBDevice::GetEndpoint0() const>:
   88840:	f9401800 	ldr	x0, [x0, #48]
   88844:	b4000040 	cbz	x0, 8884c <CUSBDevice::GetEndpoint0() const+0xc>
   88848:	d65f03c0 	ret
   8884c:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   88850:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   88854:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   88858:	910ae021 	add	x1, x1, #0x2b8
   8885c:	910003fd 	mov	x29, sp
   88860:	910b6000 	add	x0, x0, #0x2d8
   88864:	528051e2 	mov	w2, #0x28f                 	// #655
   88868:	94005536 	bl	9dd40 <assertion_failed>
   8886c:	d503201f 	nop

0000000000088870 <CUSBDevice::GetHost() const>:
   88870:	f9400400 	ldr	x0, [x0, #8]
   88874:	b4000040 	cbz	x0, 8887c <CUSBDevice::GetHost() const+0xc>
   88878:	d65f03c0 	ret
   8887c:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   88880:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   88884:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   88888:	910ae021 	add	x1, x1, #0x2b8
   8888c:	910003fd 	mov	x29, sp
   88890:	910b2000 	add	x0, x0, #0x2c8
   88894:	528052a2 	mov	w2, #0x295                 	// #661
   88898:	9400552a 	bl	9dd40 <assertion_failed>
   8889c:	d503201f 	nop

00000000000888a0 <CUSBDevice::GetDeviceDescriptor() const>:
   888a0:	f9402400 	ldr	x0, [x0, #72]
   888a4:	b4000040 	cbz	x0, 888ac <CUSBDevice::GetDeviceDescriptor() const+0xc>
   888a8:	d65f03c0 	ret
   888ac:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   888b0:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   888b4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   888b8:	910ae021 	add	x1, x1, #0x2b8
   888bc:	910003fd 	mov	x29, sp
   888c0:	910cc000 	add	x0, x0, #0x330
   888c4:	52805362 	mov	w2, #0x29b                 	// #667
   888c8:	9400551e 	bl	9dd40 <assertion_failed>
   888cc:	d503201f 	nop

00000000000888d0 <CUSBDevice::GetConfigurationDescriptor() const>:
   888d0:	f9402800 	ldr	x0, [x0, #80]
   888d4:	b4000040 	cbz	x0, 888dc <CUSBDevice::GetConfigurationDescriptor() const+0xc>
   888d8:	d65f03c0 	ret
   888dc:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   888e0:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   888e4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   888e8:	910ae021 	add	x1, x1, #0x2b8
   888ec:	910003fd 	mov	x29, sp
   888f0:	910ea000 	add	x0, x0, #0x3a8
   888f4:	52805422 	mov	w2, #0x2a1                 	// #673
   888f8:	94005512 	bl	9dd40 <assertion_failed>
   888fc:	d503201f 	nop

0000000000088900 <CUSBDevice::GetDescriptor(unsigned char)>:
   88900:	f9402c00 	ldr	x0, [x0, #88]
   88904:	b4000060 	cbz	x0, 88910 <CUSBDevice::GetDescriptor(unsigned char)+0x10>
   88908:	12001c21 	and	w1, w1, #0xff
   8890c:	1400475d 	b	9a680 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   88910:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   88914:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   88918:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8891c:	910ae021 	add	x1, x1, #0x2b8
   88920:	910003fd 	mov	x29, sp
   88924:	910f0000 	add	x0, x0, #0x3c0
   88928:	528054e2 	mov	w2, #0x2a7                 	// #679
   8892c:	94005505 	bl	9dd40 <assertion_failed>

0000000000088930 <CUSBDevice::ConfigurationError(char const*) const>:
   88930:	f9402c00 	ldr	x0, [x0, #88]
   88934:	b4000040 	cbz	x0, 8893c <CUSBDevice::ConfigurationError(char const*) const+0xc>
   88938:	14004796 	b	9a790 <CUSBConfigurationParser::Error(char const*) const>
   8893c:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   88940:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   88944:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   88948:	910ae021 	add	x1, x1, #0x2b8
   8894c:	910003fd 	mov	x29, sp
   88950:	910f0000 	add	x0, x0, #0x3c0
   88954:	528055a2 	mov	w2, #0x2ad                 	// #685
   88958:	940054fa 	bl	9dd40 <assertion_failed>
   8895c:	d503201f 	nop

0000000000088960 <CUSBDevice::GetFunction(unsigned int)>:
   88960:	7100243f 	cmp	w1, #0x9
   88964:	540000a8 	b.hi	88978 <CUSBDevice::GetFunction(unsigned int)+0x18>  // b.pmore
   88968:	2a0103e1 	mov	w1, w1
   8896c:	91003021 	add	x1, x1, #0xc
   88970:	f8617800 	ldr	x0, [x0, x1, lsl #3]
   88974:	d65f03c0 	ret
   88978:	d2800000 	mov	x0, #0x0                   	// #0
   8897c:	d65f03c0 	ret

0000000000088980 <CUSBDevice::AppendPortToRouteString(unsigned int, unsigned int)>:
   88980:	52800002 	mov	w2, #0x0                   	// #0
   88984:	528001e4 	mov	w4, #0xf                   	// #15
   88988:	1ac22083 	lsl	w3, w4, w2
   8898c:	6a00007f 	tst	w3, w0
   88990:	540000a0 	b.eq	889a4 <CUSBDevice::AppendPortToRouteString(unsigned int, unsigned int)+0x24>  // b.none
   88994:	11001042 	add	w2, w2, #0x4
   88998:	7100505f 	cmp	w2, #0x14
   8899c:	54ffff61 	b.ne	88988 <CUSBDevice::AppendPortToRouteString(unsigned int, unsigned int)+0x8>  // b.any
   889a0:	d65f03c0 	ret
   889a4:	1ac22022 	lsl	w2, w1, w2
   889a8:	71003c3f 	cmp	w1, #0xf
   889ac:	2a020000 	orr	w0, w0, w2
   889b0:	54000048 	b.hi	889b8 <CUSBDevice::AppendPortToRouteString(unsigned int, unsigned int)+0x38>  // b.pmore
   889b4:	d65f03c0 	ret
   889b8:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   889bc:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   889c0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   889c4:	910ae021 	add	x1, x1, #0x2b8
   889c8:	910003fd 	mov	x29, sp
   889cc:	910f6000 	add	x0, x0, #0x3d8
   889d0:	52805d62 	mov	w2, #0x2eb                 	// #747
   889d4:	940054db 	bl	9dd40 <assertion_failed>
   889d8:	d503201f 	nop
   889dc:	d503201f 	nop

00000000000889e0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>:
   889e0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   889e4:	910003fd 	mov	x29, sp
   889e8:	a90153f3 	stp	x19, x20, [sp, #16]
   889ec:	aa0003f3 	mov	x19, x0
   889f0:	aa0303e0 	mov	x0, x3
   889f4:	d0000163 	adrp	x3, b6000 <From+0x98>
   889f8:	910be063 	add	x3, x3, #0x2f8
   889fc:	f90013f5 	str	x21, [sp, #32]
   88a00:	a9000663 	stp	x3, x1, [x19]
   88a04:	a901027f 	stp	xzr, x0, [x19, #16]
   88a08:	b9002264 	str	w4, [x19, #32]
   88a0c:	3900927f 	strb	wzr, [x19, #36]
   88a10:	b9002a62 	str	w2, [x19, #40]
   88a14:	f9001a7f 	str	xzr, [x19, #48]
   88a18:	a904fe7f 	stp	xzr, xzr, [x19, #72]
   88a1c:	f9002e7f 	str	xzr, [x19, #88]
   88a20:	b4000681 	cbz	x1, 88af0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x110>
   88a24:	b4000720 	cbz	x0, 88b08 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x128>
   88a28:	2a0403f5 	mov	w21, w4
   88a2c:	94000789 	bl	8a850 <CUSBFunction::GetDevice() const>
   88a30:	aa0003f4 	mov	x20, x0
   88a34:	b4000760 	cbz	x0, 88b20 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x140>
   88a38:	29560002 	ldp	w2, w0, [x0, #176]
   88a3c:	110006a1 	add	w1, w21, #0x1
   88a40:	b900b262 	str	w2, [x19, #176]
   88a44:	97ffffcf 	bl	88980 <CUSBDevice::AppendPortToRouteString(unsigned int, unsigned int)>
   88a48:	3940e281 	ldrb	w1, [x20, #56]
   88a4c:	b900b660 	str	w0, [x19, #180]
   88a50:	3900e261 	strb	w1, [x19, #56]
   88a54:	3940e680 	ldrb	w0, [x20, #57]
   88a58:	3900e660 	strb	w0, [x19, #57]
   88a5c:	3940ea80 	ldrb	w0, [x20, #58]
   88a60:	3900ea60 	strb	w0, [x19, #58]
   88a64:	f9402280 	ldr	x0, [x20, #64]
   88a68:	f9002260 	str	x0, [x19, #64]
   88a6c:	34000241 	cbz	w1, 88ab4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xd4>
   88a70:	f9401a60 	ldr	x0, [x19, #48]
   88a74:	b5000620 	cbnz	x0, 88b38 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x158>
   88a78:	d2800400 	mov	x0, #0x20                  	// #32
   88a7c:	94007df9 	bl	a8260 <operator new(unsigned long)>
   88a80:	aa1303e1 	mov	x1, x19
   88a84:	aa0003f4 	mov	x20, x0
   88a88:	9400058a 	bl	8a0b0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
   88a8c:	91018261 	add	x1, x19, #0x60
   88a90:	9102c262 	add	x2, x19, #0xb0
   88a94:	f9001a74 	str	x20, [x19, #48]
   88a98:	f800843f 	str	xzr, [x1], #8
   88a9c:	eb02003f 	cmp	x1, x2
   88aa0:	54ffffc1 	b.ne	88a98 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xb8>  // b.any
   88aa4:	a94153f3 	ldp	x19, x20, [sp, #16]
   88aa8:	f94013f5 	ldr	x21, [sp, #32]
   88aac:	a8c37bfd 	ldp	x29, x30, [sp], #48
   88ab0:	d65f03c0 	ret
   88ab4:	b9402a80 	ldr	w0, [x20, #40]
   88ab8:	7100081f 	cmp	w0, #0x2
   88abc:	54fffda1 	b.ne	88a70 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x90>  // b.any
   88ac0:	b9402a60 	ldr	w0, [x19, #40]
   88ac4:	7100041f 	cmp	w0, #0x1
   88ac8:	54fffd4c 	b.gt	88a70 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x90>
   88acc:	52800021 	mov	w1, #0x1                   	// #1
   88ad0:	b9402260 	ldr	w0, [x19, #32]
   88ad4:	3900e261 	strb	w1, [x19, #56]
   88ad8:	39409281 	ldrb	w1, [x20, #36]
   88adc:	f9002274 	str	x20, [x19, #64]
   88ae0:	11000400 	add	w0, w0, #0x1
   88ae4:	3900ea60 	strb	w0, [x19, #58]
   88ae8:	3900e661 	strb	w1, [x19, #57]
   88aec:	17ffffe1 	b	88a70 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x90>
   88af0:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   88af4:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   88af8:	910ae021 	add	x1, x1, #0x2b8
   88afc:	910b2000 	add	x0, x0, #0x2c8
   88b00:	52800ae2 	mov	w2, #0x57                  	// #87
   88b04:	9400548f 	bl	9dd40 <assertion_failed>
   88b08:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   88b0c:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   88b10:	910ae021 	add	x1, x1, #0x2b8
   88b14:	910c8000 	add	x0, x0, #0x320
   88b18:	52800b02 	mov	w2, #0x58                  	// #88
   88b1c:	94005489 	bl	9dd40 <assertion_failed>
   88b20:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   88b24:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   88b28:	910ae021 	add	x1, x1, #0x2b8
   88b2c:	910fa000 	add	x0, x0, #0x3e8
   88b30:	52800b62 	mov	w2, #0x5b                  	// #91
   88b34:	94005483 	bl	9dd40 <assertion_failed>
   88b38:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   88b3c:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   88b40:	910ae021 	add	x1, x1, #0x2b8
   88b44:	910c2000 	add	x0, x0, #0x308
   88b48:	52800e62 	mov	w2, #0x73                  	// #115
   88b4c:	9400547d 	bl	9dd40 <assertion_failed>

0000000000088b50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>:
   88b50:	a9ab7bfd 	stp	x29, x30, [sp, #-336]!
   88b54:	910003fd 	mov	x29, sp
   88b58:	a90153f3 	stp	x19, x20, [sp, #16]
   88b5c:	a9025bf5 	stp	x21, x22, [sp, #32]
   88b60:	a90363f7 	stp	x23, x24, [sp, #48]
   88b64:	3d802be0 	str	q0, [sp, #160]
   88b68:	3d802fe1 	str	q1, [sp, #176]
   88b6c:	3d8033e2 	str	q2, [sp, #192]
   88b70:	3d8037e3 	str	q3, [sp, #208]
   88b74:	3d803be4 	str	q4, [sp, #224]
   88b78:	3d803fe5 	str	q5, [sp, #240]
   88b7c:	3d8043e6 	str	q6, [sp, #256]
   88b80:	3d8047e7 	str	q7, [sp, #272]
   88b84:	a91293e3 	stp	x3, x4, [sp, #296]
   88b88:	a9139be5 	stp	x5, x6, [sp, #312]
   88b8c:	f900a7e7 	str	x7, [sp, #328]
   88b90:	b4000842 	cbz	x2, 88c98 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x148>
   88b94:	aa0003f5 	mov	x21, x0
   88b98:	910183e0 	add	x0, sp, #0x60
   88b9c:	aa0203f7 	mov	x23, x2
   88ba0:	2a0103f8 	mov	w24, w1
   88ba4:	94006eab 	bl	a4650 <CString::CString()>
   88ba8:	d0000162 	adrp	x2, b6000 <From+0x98>
   88bac:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   88bb0:	b940b2a3 	ldr	w3, [x21, #176]
   88bb4:	910183e0 	add	x0, sp, #0x60
   88bb8:	910c8042 	add	x2, x2, #0x320
   88bbc:	91102021 	add	x1, x1, #0x408
   88bc0:	d0000156 	adrp	x22, b2000 <_etext+0x1158>
   88bc4:	911042d6 	add	x22, x22, #0x410
   88bc8:	52800014 	mov	w20, #0x0                   	// #0
   88bcc:	940074d9 	bl	a5f30 <CString::Format(char const*, ...)>
   88bd0:	b940b6a4 	ldr	w4, [x21, #180]
   88bd4:	1ad42484 	lsr	w4, w4, w20
   88bd8:	72000c93 	ands	w19, w4, #0xf
   88bdc:	54000220 	b.eq	88c20 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xd0>  // b.none
   88be0:	910203e0 	add	x0, sp, #0x80
   88be4:	11001294 	add	w20, w20, #0x4
   88be8:	94006e9a 	bl	a4650 <CString::CString()>
   88bec:	2a1303e2 	mov	w2, w19
   88bf0:	aa1603e1 	mov	x1, x22
   88bf4:	910203e0 	add	x0, sp, #0x80
   88bf8:	940074ce 	bl	a5f30 <CString::Format(char const*, ...)>
   88bfc:	910203e0 	add	x0, sp, #0x80
   88c00:	94006ed8 	bl	a4760 <CString::operator char const*() const>
   88c04:	aa0003e1 	mov	x1, x0
   88c08:	910183e0 	add	x0, sp, #0x60
   88c0c:	94006f31 	bl	a48d0 <CString::Append(char const*)>
   88c10:	910203e0 	add	x0, sp, #0x80
   88c14:	94006e53 	bl	a4560 <CString::~CString()>
   88c18:	7100529f 	cmp	w20, #0x14
   88c1c:	54fffda1 	b.ne	88bd0 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x80>  // b.any
   88c20:	910543e3 	add	x3, sp, #0x150
   88c24:	910543e0 	add	x0, sp, #0x150
   88c28:	910483e2 	add	x2, sp, #0x120
   88c2c:	128004e1 	mov	w1, #0xffffffd8            	// #-40
   88c30:	a9080fe0 	stp	x0, x3, [sp, #128]
   88c34:	12800fe0 	mov	w0, #0xffffff80            	// #-128
   88c38:	f9004be2 	str	x2, [sp, #144]
   88c3c:	b9009be1 	str	w1, [sp, #152]
   88c40:	b9009fe0 	str	w0, [sp, #156]
   88c44:	94005b73 	bl	9fa10 <CLogger::Get()>
   88c48:	aa0003f3 	mov	x19, x0
   88c4c:	910183e0 	add	x0, sp, #0x60
   88c50:	94006ec4 	bl	a4760 <CString::operator char const*() const>
   88c54:	a94827e8 	ldp	x8, x9, [sp, #128]
   88c58:	aa0003e1 	mov	x1, x0
   88c5c:	aa1703e3 	mov	x3, x23
   88c60:	2a1803e2 	mov	w2, w24
   88c64:	910103e4 	add	x4, sp, #0x40
   88c68:	aa1303e0 	mov	x0, x19
   88c6c:	a9491fe6 	ldp	x6, x7, [sp, #144]
   88c70:	a90427e8 	stp	x8, x9, [sp, #64]
   88c74:	a9051fe6 	stp	x6, x7, [sp, #80]
   88c78:	94005ce6 	bl	a0010 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   88c7c:	910183e0 	add	x0, sp, #0x60
   88c80:	94006e38 	bl	a4560 <CString::~CString()>
   88c84:	a94153f3 	ldp	x19, x20, [sp, #16]
   88c88:	a9425bf5 	ldp	x21, x22, [sp, #32]
   88c8c:	a94363f7 	ldp	x23, x24, [sp, #48]
   88c90:	a8d57bfd 	ldp	x29, x30, [sp], #336
   88c94:	d65f03c0 	ret
   88c98:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   88c9c:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   88ca0:	910ae021 	add	x1, x1, #0x2b8
   88ca4:	910fe000 	add	x0, x0, #0x3f8
   88ca8:	528057a2 	mov	w2, #0x2bd                 	// #701
   88cac:	94005425 	bl	9dd40 <assertion_failed>

0000000000088cb0 <CUSBDevice::~CUSBDevice()>:
   88cb0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   88cb4:	910003fd 	mov	x29, sp
   88cb8:	d0000161 	adrp	x1, b6000 <From+0x98>
   88cbc:	910be021 	add	x1, x1, #0x2f8
   88cc0:	a90153f3 	stp	x19, x20, [sp, #16]
   88cc4:	aa0003f4 	mov	x20, x0
   88cc8:	f9400400 	ldr	x0, [x0, #8]
   88ccc:	f90013f5 	str	x21, [sp, #32]
   88cd0:	f9000281 	str	x1, [x20]
   88cd4:	b40008a0 	cbz	x0, 88de8 <CUSBDevice::~CUSBDevice()+0x138>
   88cd8:	f9400002 	ldr	x2, [x0]
   88cdc:	b0ffffc1 	adrp	x1, 81000 <CUSBHostController::~CUSBHostController()+0x30>
   88ce0:	91124021 	add	x1, x1, #0x490
   88ce4:	f9401842 	ldr	x2, [x2, #48]
   88ce8:	eb01005f 	cmp	x2, x1
   88cec:	54000781 	b.ne	88ddc <CUSBDevice::~CUSBDevice()+0x12c>  // b.any
   88cf0:	91018293 	add	x19, x20, #0x60
   88cf4:	9102c295 	add	x21, x20, #0xb0
   88cf8:	f9400260 	ldr	x0, [x19]
   88cfc:	b4000080 	cbz	x0, 88d0c <CUSBDevice::~CUSBDevice()+0x5c>
   88d00:	f9400001 	ldr	x1, [x0]
   88d04:	f9400421 	ldr	x1, [x1, #8]
   88d08:	d63f0020 	blr	x1
   88d0c:	f800867f 	str	xzr, [x19], #8
   88d10:	eb15027f 	cmp	x19, x21
   88d14:	54ffff21 	b.ne	88cf8 <CUSBDevice::~CUSBDevice()+0x48>  // b.any
   88d18:	f9402680 	ldr	x0, [x20, #72]
   88d1c:	b4000200 	cbz	x0, 88d5c <CUSBDevice::~CUSBDevice()+0xac>
   88d20:	aa1403e0 	mov	x0, x20
   88d24:	97fffe57 	bl	88680 <CUSBDevice::GetNames() const>
   88d28:	aa0003f3 	mov	x19, x0
   88d2c:	b40006a0 	cbz	x0, 88e00 <CUSBDevice::~CUSBDevice()+0x150>
   88d30:	94006e8c 	bl	a4760 <CString::operator char const*() const>
   88d34:	d0000142 	adrp	x2, b2000 <_etext+0x1158>
   88d38:	aa0003e3 	mov	x3, x0
   88d3c:	52800061 	mov	w1, #0x3                   	// #3
   88d40:	aa1403e0 	mov	x0, x20
   88d44:	9110a042 	add	x2, x2, #0x428
   88d48:	97ffff82 	bl	88b50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   88d4c:	f9400261 	ldr	x1, [x19]
   88d50:	aa1303e0 	mov	x0, x19
   88d54:	f9400421 	ldr	x1, [x1, #8]
   88d58:	d63f0020 	blr	x1
   88d5c:	f9402e93 	ldr	x19, [x20, #88]
   88d60:	b40000d3 	cbz	x19, 88d78 <CUSBDevice::~CUSBDevice()+0xc8>
   88d64:	aa1303e0 	mov	x0, x19
   88d68:	9400463e 	bl	9a660 <CUSBConfigurationParser::~CUSBConfigurationParser()>
   88d6c:	aa1303e0 	mov	x0, x19
   88d70:	d2800601 	mov	x1, #0x30                  	// #48
   88d74:	94007d63 	bl	a8300 <operator delete(void*, unsigned long)>
   88d78:	f9002e9f 	str	xzr, [x20, #88]
   88d7c:	f9402a80 	ldr	x0, [x20, #80]
   88d80:	b4000060 	cbz	x0, 88d8c <CUSBDevice::~CUSBDevice()+0xdc>
   88d84:	d2800121 	mov	x1, #0x9                   	// #9
   88d88:	94007d5e 	bl	a8300 <operator delete(void*, unsigned long)>
   88d8c:	f9002a9f 	str	xzr, [x20, #80]
   88d90:	f9402680 	ldr	x0, [x20, #72]
   88d94:	b4000060 	cbz	x0, 88da0 <CUSBDevice::~CUSBDevice()+0xf0>
   88d98:	d2800241 	mov	x1, #0x12                  	// #18
   88d9c:	94007d59 	bl	a8300 <operator delete(void*, unsigned long)>
   88da0:	f900269f 	str	xzr, [x20, #72]
   88da4:	f9401a93 	ldr	x19, [x20, #48]
   88da8:	b4000133 	cbz	x19, 88dcc <CUSBDevice::~CUSBDevice()+0x11c>
   88dac:	aa1303e0 	mov	x0, x19
   88db0:	9400054c 	bl	8a2e0 <CUSBEndpoint::~CUSBEndpoint()>
   88db4:	aa1303e0 	mov	x0, x19
   88db8:	d2800401 	mov	x1, #0x20                  	// #32
   88dbc:	a94153f3 	ldp	x19, x20, [sp, #16]
   88dc0:	f94013f5 	ldr	x21, [sp, #32]
   88dc4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   88dc8:	14007d4e 	b	a8300 <operator delete(void*, unsigned long)>
   88dcc:	a94153f3 	ldp	x19, x20, [sp, #16]
   88dd0:	f94013f5 	ldr	x21, [sp, #32]
   88dd4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   88dd8:	d65f03c0 	ret
   88ddc:	aa1403e1 	mov	x1, x20
   88de0:	d63f0040 	blr	x2
   88de4:	17ffffc3 	b	88cf0 <CUSBDevice::~CUSBDevice()+0x40>
   88de8:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   88dec:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   88df0:	910ae021 	add	x1, x1, #0x2b8
   88df4:	910b2000 	add	x0, x0, #0x2c8
   88df8:	52800fe2 	mov	w2, #0x7f                  	// #127
   88dfc:	940053d1 	bl	9dd40 <assertion_failed>
   88e00:	d0000141 	adrp	x1, b2000 <_etext+0x1158>
   88e04:	d0000140 	adrp	x0, b2000 <_etext+0x1158>
   88e08:	910ae021 	add	x1, x1, #0x2b8
   88e0c:	91106000 	add	x0, x0, #0x418
   88e10:	52801162 	mov	w2, #0x8b                  	// #139
   88e14:	940053cb 	bl	9dd40 <assertion_failed>
   88e18:	d503201f 	nop
   88e1c:	d503201f 	nop

0000000000088e20 <CUSBDevice::~CUSBDevice()>:
   88e20:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   88e24:	910003fd 	mov	x29, sp
   88e28:	f9000bf3 	str	x19, [sp, #16]
   88e2c:	aa0003f3 	mov	x19, x0
   88e30:	97ffffa0 	bl	88cb0 <CUSBDevice::~CUSBDevice()>
   88e34:	aa1303e0 	mov	x0, x19
   88e38:	d2801701 	mov	x1, #0xb8                  	// #184
   88e3c:	f9400bf3 	ldr	x19, [sp, #16]
   88e40:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88e44:	14007d2f 	b	a8300 <operator delete(void*, unsigned long)>
   88e48:	d503201f 	nop
   88e4c:	d503201f 	nop

0000000000088e50 <CUSBDevice::Initialize()>:
   88e50:	a9b77bfd 	stp	x29, x30, [sp, #-144]!
   88e54:	910003fd 	mov	x29, sp
   88e58:	a90153f3 	stp	x19, x20, [sp, #16]
   88e5c:	aa0003f3 	mov	x19, x0
   88e60:	f9402400 	ldr	x0, [x0, #72]
   88e64:	b5001e60 	cbnz	x0, 89230 <CUSBDevice::Initialize()+0x3e0>
   88e68:	d2800240 	mov	x0, #0x12                  	// #18
   88e6c:	94007cfd 	bl	a8260 <operator new(unsigned long)>
   88e70:	aa0003e4 	mov	x4, x0
   88e74:	f9400660 	ldr	x0, [x19, #8]
   88e78:	f9002664 	str	x4, [x19, #72]
   88e7c:	b4001ec0 	cbz	x0, 89254 <CUSBDevice::Initialize()+0x404>
   88e80:	f9401a61 	ldr	x1, [x19, #48]
   88e84:	b4001fa1 	cbz	x1, 89278 <CUSBDevice::Initialize()+0x428>
   88e88:	52800022 	mov	w2, #0x1                   	// #1
   88e8c:	52800007 	mov	w7, #0x0                   	// #0
   88e90:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   88e94:	52800105 	mov	w5, #0x8                   	// #8
   88e98:	52800003 	mov	w3, #0x0                   	// #0
   88e9c:	97ffe0a5 	bl	81130 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   88ea0:	7100201f 	cmp	w0, #0x8
   88ea4:	d0000142 	adrp	x2, b2000 <_etext+0x1158>
   88ea8:	91116042 	add	x2, x2, #0x458
   88eac:	54000181 	b.ne	88edc <CUSBDevice::Initialize()+0x8c>  // b.any
   88eb0:	f9402660 	ldr	x0, [x19, #72]
   88eb4:	39400014 	ldrb	w20, [x0]
   88eb8:	71004a9f 	cmp	w20, #0x12
   88ebc:	540000c1 	b.ne	88ed4 <CUSBDevice::Initialize()+0x84>  // b.any
   88ec0:	a9025bf5 	stp	x21, x22, [sp, #32]
   88ec4:	39400415 	ldrb	w21, [x0, #1]
   88ec8:	710006bf 	cmp	w21, #0x1
   88ecc:	54000220 	b.eq	88f10 <CUSBDevice::Initialize()+0xc0>  // b.none
   88ed0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   88ed4:	d0000142 	adrp	x2, b2000 <_etext+0x1158>
   88ed8:	91120042 	add	x2, x2, #0x480
   88edc:	aa1303e0 	mov	x0, x19
   88ee0:	52800021 	mov	w1, #0x1                   	// #1
   88ee4:	97ffff1b 	bl	88b50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   88ee8:	f9402660 	ldr	x0, [x19, #72]
   88eec:	b4000060 	cbz	x0, 88ef8 <CUSBDevice::Initialize()+0xa8>
   88ef0:	d2800241 	mov	x1, #0x12                  	// #18
   88ef4:	94007d03 	bl	a8300 <operator delete(void*, unsigned long)>
   88ef8:	52800014 	mov	w20, #0x0                   	// #0
   88efc:	f900267f 	str	xzr, [x19, #72]
   88f00:	2a1403e0 	mov	w0, w20
   88f04:	a94153f3 	ldp	x19, x20, [sp, #16]
   88f08:	a8c97bfd 	ldp	x29, x30, [sp], #144
   88f0c:	d65f03c0 	ret
   88f10:	39401c01 	ldrb	w1, [x0, #7]
   88f14:	f9401a60 	ldr	x0, [x19, #48]
   88f18:	9400051a 	bl	8a380 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>
   88f1c:	72001c1f 	tst	w0, #0xff
   88f20:	54001ee0 	b.eq	892fc <CUSBDevice::Initialize()+0x4ac>  // b.none
   88f24:	2a1403e5 	mov	w5, w20
   88f28:	52800007 	mov	w7, #0x0                   	// #0
   88f2c:	f9400660 	ldr	x0, [x19, #8]
   88f30:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   88f34:	52800003 	mov	w3, #0x0                   	// #0
   88f38:	2a1503e2 	mov	w2, w21
   88f3c:	f9401a61 	ldr	x1, [x19, #48]
   88f40:	f9402664 	ldr	x4, [x19, #72]
   88f44:	97ffe07b 	bl	81130 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   88f48:	7100481f 	cmp	w0, #0x12
   88f4c:	54001a81 	b.ne	8929c <CUSBDevice::Initialize()+0x44c>  // b.any
   88f50:	f9402a60 	ldr	x0, [x19, #80]
   88f54:	b5001fa0 	cbnz	x0, 89348 <CUSBDevice::Initialize()+0x4f8>
   88f58:	d2800120 	mov	x0, #0x9                   	// #9
   88f5c:	94007cc1 	bl	a8260 <operator new(unsigned long)>
   88f60:	f9402661 	ldr	x1, [x19, #72]
   88f64:	aa0003e4 	mov	x4, x0
   88f68:	f9002a60 	str	x0, [x19, #80]
   88f6c:	39402022 	ldrb	w2, [x1, #8]
   88f70:	39402420 	ldrb	w0, [x1, #9]
   88f74:	2a002040 	orr	w0, w2, w0, lsl #8
   88f78:	7114941f 	cmp	w0, #0x525
   88f7c:	54001d20 	b.eq	89320 <CUSBDevice::Initialize()+0x4d0>  // b.none
   88f80:	712f681f 	cmp	w0, #0xbda
   88f84:	52800014 	mov	w20, #0x0                   	// #0
   88f88:	54000121 	b.ne	88fac <CUSBDevice::Initialize()+0x15c>  // b.any
   88f8c:	39402822 	ldrb	w2, [x1, #10]
   88f90:	39402c20 	ldrb	w0, [x1, #11]
   88f94:	528fd5c1 	mov	w1, #0x7eae                	// #32430
   88f98:	aa002040 	orr	x0, x2, x0, lsl #8
   88f9c:	0b010000 	add	w0, w0, w1
   88fa0:	12003c00 	and	w0, w0, #0xffff
   88fa4:	7100041f 	cmp	w0, #0x1
   88fa8:	1a9f87f4 	cset	w20, ls	// ls = plast
   88fac:	52800007 	mov	w7, #0x0                   	// #0
   88fb0:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   88fb4:	f9400660 	ldr	x0, [x19, #8]
   88fb8:	52800125 	mov	w5, #0x9                   	// #9
   88fbc:	2a1403e3 	mov	w3, w20
   88fc0:	52800042 	mov	w2, #0x2                   	// #2
   88fc4:	f9401a61 	ldr	x1, [x19, #48]
   88fc8:	97ffe05a 	bl	81130 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   88fcc:	7100241f 	cmp	w0, #0x9
   88fd0:	54001b61 	b.ne	8933c <CUSBDevice::Initialize()+0x4ec>  // b.any
   88fd4:	f9402a60 	ldr	x0, [x19, #80]
   88fd8:	39400001 	ldrb	w1, [x0]
   88fdc:	7100243f 	cmp	w1, #0x9
   88fe0:	54001741 	b.ne	892c8 <CUSBDevice::Initialize()+0x478>  // b.any
   88fe4:	39400416 	ldrb	w22, [x0, #1]
   88fe8:	71000adf 	cmp	w22, #0x2
   88fec:	540016e1 	b.ne	892c8 <CUSBDevice::Initialize()+0x478>  // b.any
   88ff0:	39400801 	ldrb	w1, [x0, #2]
   88ff4:	39400c15 	ldrb	w21, [x0, #3]
   88ff8:	2a152035 	orr	w21, w1, w21, lsl #8
   88ffc:	711002bf 	cmp	w21, #0x400
   89000:	54001648 	b.hi	892c8 <CUSBDevice::Initialize()+0x478>  // b.pmore
   89004:	d2800121 	mov	x1, #0x9                   	// #9
   89008:	94007cbe 	bl	a8300 <operator delete(void*, unsigned long)>
   8900c:	92403ea0 	and	x0, x21, #0xffff
   89010:	94007c9c 	bl	a8280 <operator new[](unsigned long)>
   89014:	aa0003e4 	mov	x4, x0
   89018:	2a1403e3 	mov	w3, w20
   8901c:	f9400660 	ldr	x0, [x19, #8]
   89020:	2a1603e2 	mov	w2, w22
   89024:	52800007 	mov	w7, #0x0                   	// #0
   89028:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   8902c:	2a1503e5 	mov	w5, w21
   89030:	f9002a64 	str	x4, [x19, #80]
   89034:	f9401a61 	ldr	x1, [x19, #48]
   89038:	97ffe03e 	bl	81130 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   8903c:	6b15001f 	cmp	w0, w21
   89040:	b0000142 	adrp	x2, b2000 <_etext+0x1158>
   89044:	91156042 	add	x2, x2, #0x558
   89048:	2a0003f4 	mov	w20, w0
   8904c:	54001421 	b.ne	892d0 <CUSBDevice::Initialize()+0x480>  // b.any
   89050:	f9402e60 	ldr	x0, [x19, #88]
   89054:	b5002c60 	cbnz	x0, 895e0 <CUSBDevice::Initialize()+0x790>
   89058:	d2800600 	mov	x0, #0x30                  	// #48
   8905c:	94007c81 	bl	a8260 <operator new(unsigned long)>
   89060:	f9402a61 	ldr	x1, [x19, #80]
   89064:	2a1403e2 	mov	w2, w20
   89068:	aa0003f4 	mov	x20, x0
   8906c:	94004505 	bl	9a480 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>
   89070:	aa1403e0 	mov	x0, x20
   89074:	f9002e74 	str	x20, [x19, #88]
   89078:	9400457e 	bl	9a670 <CUSBConfigurationParser::IsValid() const>
   8907c:	72001c14 	ands	w20, w0, #0xff
   89080:	54002200 	b.eq	894c0 <CUSBDevice::Initialize()+0x670>  // b.none
   89084:	b9802a60 	ldrsw	x0, [x19, #40]
   89088:	f1000c1f 	cmp	x0, #0x3
   8908c:	54002ca8 	b.hi	89620 <CUSBDevice::Initialize()+0x7d0>  // b.pmore
   89090:	aa1303e0 	mov	x0, x19
   89094:	97fffd7b 	bl	88680 <CUSBDevice::GetNames() const>
   89098:	aa0003f4 	mov	x20, x0
   8909c:	b4002b20 	cbz	x0, 89600 <CUSBDevice::Initialize()+0x7b0>
   890a0:	94006db0 	bl	a4760 <CString::operator char const*() const>
   890a4:	b9802a65 	ldrsw	x5, [x19, #40]
   890a8:	b0000164 	adrp	x4, b6000 <From+0x98>
   890ac:	910c8084 	add	x4, x4, #0x320
   890b0:	b0000142 	adrp	x2, b2000 <_etext+0x1158>
   890b4:	91002084 	add	x4, x4, #0x8
   890b8:	aa0003e3 	mov	x3, x0
   890bc:	91172042 	add	x2, x2, #0x5c8
   890c0:	52800061 	mov	w1, #0x3                   	// #3
   890c4:	aa1303e0 	mov	x0, x19
   890c8:	f8657884 	ldr	x4, [x4, x5, lsl #3]
   890cc:	97fffea1 	bl	88b50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   890d0:	f9400281 	ldr	x1, [x20]
   890d4:	aa1403e0 	mov	x0, x20
   890d8:	f9400421 	ldr	x1, [x1, #8]
   890dc:	d63f0020 	blr	x1
   890e0:	9101c3e0 	add	x0, sp, #0x70
   890e4:	94006d5b 	bl	a4650 <CString::CString()>
   890e8:	910163e0 	add	x0, sp, #0x58
   890ec:	aa1303e1 	mov	x1, x19
   890f0:	94001ce4 	bl	90480 <CUSBString::CUSBString(CUSBDevice*)>
   890f4:	f9402660 	ldr	x0, [x19, #72]
   890f8:	39403814 	ldrb	w20, [x0, #14]
   890fc:	51000682 	sub	w2, w20, #0x1
   89100:	12001c42 	and	w2, w2, #0xff
   89104:	7103f45f 	cmp	w2, #0xfd
   89108:	54001ba9 	b.ls	8947c <CUSBDevice::Initialize()+0x62c>  // b.plast
   8910c:	39403c14 	ldrb	w20, [x0, #15]
   89110:	51000680 	sub	w0, w20, #0x1
   89114:	12001c00 	and	w0, w0, #0xff
   89118:	7103f41f 	cmp	w0, #0xfd
   8911c:	54001f09 	b.ls	894fc <CUSBDevice::Initialize()+0x6ac>  // b.plast
   89120:	9101c3e0 	add	x0, sp, #0x70
   89124:	94006de3 	bl	a48b0 <CString::GetLength() const>
   89128:	b5001d80 	cbnz	x0, 894d8 <CUSBDevice::Initialize()+0x688>
   8912c:	f9402a62 	ldr	x2, [x19, #80]
   89130:	52800015 	mov	w21, #0x0                   	// #0
   89134:	52800016 	mov	w22, #0x0                   	// #0
   89138:	f9400660 	ldr	x0, [x19, #8]
   8913c:	f9401a61 	ldr	x1, [x19, #48]
   89140:	39401442 	ldrb	w2, [x2, #5]
   89144:	97ffe01b 	bl	811b0 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
   89148:	72001c14 	ands	w20, w0, #0xff
   8914c:	54002120 	b.eq	89570 <CUSBDevice::Initialize()+0x720>  // b.none
   89150:	a90363f7 	stp	x23, x24, [sp, #48]
   89154:	b0000158 	adrp	x24, b2000 <_etext+0x1158>
   89158:	911a4318 	add	x24, x24, #0x690
   8915c:	b0000157 	adrp	x23, b2000 <_etext+0x1158>
   89160:	9119c2f7 	add	x23, x23, #0x670
   89164:	a9046bf9 	stp	x25, x26, [sp, #64]
   89168:	52800081 	mov	w1, #0x4                   	// #4
   8916c:	f9402e60 	ldr	x0, [x19, #88]
   89170:	94004544 	bl	9a680 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   89174:	b4002660 	cbz	x0, 89640 <CUSBDevice::Initialize()+0x7f0>
   89178:	39400801 	ldrb	w1, [x0, #2]
   8917c:	6b0102bf 	cmp	w21, w1
   89180:	1a8182b9 	csel	w25, w21, w1, hi	// hi = pmore
   89184:	12001f39 	and	w25, w25, #0xff
   89188:	6b15003f 	cmp	w1, w21
   8918c:	54001323 	b.cc	893f0 <CUSBDevice::Initialize()+0x5a0>  // b.lo, b.ul, b.last
   89190:	f9402e60 	ldr	x0, [x19, #88]
   89194:	b4001d60 	cbz	x0, 89540 <CUSBDevice::Initialize()+0x6f0>
   89198:	8b364e7a 	add	x26, x19, w22, uxtw #3
   8919c:	f9403340 	ldr	x0, [x26, #96]
   891a0:	b5001dc0 	cbnz	x0, 89558 <CUSBDevice::Initialize()+0x708>
   891a4:	d2800500 	mov	x0, #0x28                  	// #40
   891a8:	94007c2e 	bl	a8260 <operator new(unsigned long)>
   891ac:	aa0003f5 	mov	x21, x0
   891b0:	aa1303e1 	mov	x1, x19
   891b4:	f9402e62 	ldr	x2, [x19, #88]
   891b8:	94000512 	bl	8a600 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
   891bc:	f9003355 	str	x21, [x26, #96]
   891c0:	35000e96 	cbnz	w22, 89390 <CUSBDevice::Initialize()+0x540>
   891c4:	52800001 	mov	w1, #0x0                   	// #0
   891c8:	aa1303e0 	mov	x0, x19
   891cc:	97fffce1 	bl	88550 <CUSBDevice::GetName(TDeviceNameSelector) const>
   891d0:	aa0003e1 	mov	x1, x0
   891d4:	aa1503e0 	mov	x0, x21
   891d8:	940001f6 	bl	899b0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
   891dc:	aa0003f5 	mov	x21, x0
   891e0:	b4000c40 	cbz	x0, 89368 <CUSBDevice::Initialize()+0x518>
   891e4:	f9403260 	ldr	x0, [x19, #96]
   891e8:	b4001de0 	cbz	x0, 895a4 <CUSBDevice::Initialize()+0x754>
   891ec:	f9400001 	ldr	x1, [x0]
   891f0:	f9400421 	ldr	x1, [x1, #8]
   891f4:	d63f0020 	blr	x1
   891f8:	b4002675 	cbz	x21, 896c4 <CUSBDevice::Initialize()+0x874>
   891fc:	f94002a1 	ldr	x1, [x21]
   89200:	aa1503e0 	mov	x0, x21
   89204:	f9402021 	ldr	x1, [x1, #64]
   89208:	f9003355 	str	x21, [x26, #96]
   8920c:	d63f0020 	blr	x1
   89210:	72001c03 	ands	w3, w0, #0xff
   89214:	540011c0 	b.eq	8944c <CUSBDevice::Initialize()+0x5fc>  // b.none
   89218:	110006d6 	add	w22, w22, #0x1
   8921c:	71002adf 	cmp	w22, #0xa
   89220:	54002180 	b.eq	89650 <CUSBDevice::Initialize()+0x800>  // b.none
   89224:	11000735 	add	w21, w25, #0x1
   89228:	12001eb5 	and	w21, w21, #0xff
   8922c:	17ffffcf 	b	89168 <CUSBDevice::Initialize()+0x318>
   89230:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89234:	b0000140 	adrp	x0, b2000 <_etext+0x1158>
   89238:	a9025bf5 	stp	x21, x22, [sp, #32]
   8923c:	910ae021 	add	x1, x1, #0x2b8
   89240:	91110000 	add	x0, x0, #0x440
   89244:	52801682 	mov	w2, #0xb4                  	// #180
   89248:	a90363f7 	stp	x23, x24, [sp, #48]
   8924c:	a9046bf9 	stp	x25, x26, [sp, #64]
   89250:	940052bc 	bl	9dd40 <assertion_failed>
   89254:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89258:	b0000140 	adrp	x0, b2000 <_etext+0x1158>
   8925c:	a9025bf5 	stp	x21, x22, [sp, #32]
   89260:	910ae021 	add	x1, x1, #0x2b8
   89264:	910b2000 	add	x0, x0, #0x2c8
   89268:	52801702 	mov	w2, #0xb8                  	// #184
   8926c:	a90363f7 	stp	x23, x24, [sp, #48]
   89270:	a9046bf9 	stp	x25, x26, [sp, #64]
   89274:	940052b3 	bl	9dd40 <assertion_failed>
   89278:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   8927c:	b0000140 	adrp	x0, b2000 <_etext+0x1158>
   89280:	a9025bf5 	stp	x21, x22, [sp, #32]
   89284:	910ae021 	add	x1, x1, #0x2b8
   89288:	910b6000 	add	x0, x0, #0x2d8
   8928c:	52801722 	mov	w2, #0xb9                  	// #185
   89290:	a90363f7 	stp	x23, x24, [sp, #48]
   89294:	a9046bf9 	stp	x25, x26, [sp, #64]
   89298:	940052aa 	bl	9dd40 <assertion_failed>
   8929c:	aa1303e0 	mov	x0, x19
   892a0:	2a1503e1 	mov	w1, w21
   892a4:	b0000142 	adrp	x2, b2000 <_etext+0x1158>
   892a8:	91132042 	add	x2, x2, #0x4c8
   892ac:	97fffe29 	bl	88b50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   892b0:	f9402660 	ldr	x0, [x19, #72]
   892b4:	b4000320 	cbz	x0, 89318 <CUSBDevice::Initialize()+0x4c8>
   892b8:	d2800241 	mov	x1, #0x12                  	// #18
   892bc:	94007c11 	bl	a8300 <operator delete(void*, unsigned long)>
   892c0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   892c4:	17ffff0d 	b	88ef8 <CUSBDevice::Initialize()+0xa8>
   892c8:	b0000142 	adrp	x2, b2000 <_etext+0x1158>
   892cc:	9114c042 	add	x2, x2, #0x530
   892d0:	aa1303e0 	mov	x0, x19
   892d4:	52800021 	mov	w1, #0x1                   	// #1
   892d8:	97fffe1e 	bl	88b50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   892dc:	f9402a60 	ldr	x0, [x19, #80]
   892e0:	b4000060 	cbz	x0, 892ec <CUSBDevice::Initialize()+0x49c>
   892e4:	d2800121 	mov	x1, #0x9                   	// #9
   892e8:	94007c06 	bl	a8300 <operator delete(void*, unsigned long)>
   892ec:	52800014 	mov	w20, #0x0                   	// #0
   892f0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   892f4:	f9002a7f 	str	xzr, [x19, #80]
   892f8:	17ffff02 	b	88f00 <CUSBDevice::Initialize()+0xb0>
   892fc:	aa1303e0 	mov	x0, x19
   89300:	2a1503e1 	mov	w1, w21
   89304:	b0000142 	adrp	x2, b2000 <_etext+0x1158>
   89308:	91128042 	add	x2, x2, #0x4a0
   8930c:	97fffe11 	bl	88b50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   89310:	f9402660 	ldr	x0, [x19, #72]
   89314:	b5fffd20 	cbnz	x0, 892b8 <CUSBDevice::Initialize()+0x468>
   89318:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8931c:	17fffef7 	b	88ef8 <CUSBDevice::Initialize()+0xa8>
   89320:	39402823 	ldrb	w3, [x1, #10]
   89324:	52949442 	mov	w2, #0xa4a2                	// #42146
   89328:	39402c20 	ldrb	w0, [x1, #11]
   8932c:	2a002060 	orr	w0, w3, w0, lsl #8
   89330:	6b02001f 	cmp	w0, w2
   89334:	1a9f17f4 	cset	w20, eq	// eq = none
   89338:	17ffff1d 	b	88fac <CUSBDevice::Initialize()+0x15c>
   8933c:	b0000142 	adrp	x2, b2000 <_etext+0x1158>
   89340:	91140042 	add	x2, x2, #0x500
   89344:	17ffffe3 	b	892d0 <CUSBDevice::Initialize()+0x480>
   89348:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   8934c:	b0000140 	adrp	x0, b2000 <_etext+0x1158>
   89350:	a90363f7 	stp	x23, x24, [sp, #48]
   89354:	910ae021 	add	x1, x1, #0x2b8
   89358:	9113a000 	add	x0, x0, #0x4e8
   8935c:	52802082 	mov	w2, #0x104                 	// #260
   89360:	a9046bf9 	stp	x25, x26, [sp, #64]
   89364:	94005277 	bl	9dd40 <assertion_failed>
   89368:	f9403275 	ldr	x21, [x19, #96]
   8936c:	52800021 	mov	w1, #0x1                   	// #1
   89370:	aa1303e0 	mov	x0, x19
   89374:	97fffc77 	bl	88550 <CUSBDevice::GetName(TDeviceNameSelector) const>
   89378:	aa0003e1 	mov	x1, x0
   8937c:	aa1503e0 	mov	x0, x21
   89380:	9400018c 	bl	899b0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
   89384:	aa0003f5 	mov	x21, x0
   89388:	b5fff2e0 	cbnz	x0, 891e4 <CUSBDevice::Initialize()+0x394>
   8938c:	f9403355 	ldr	x21, [x26, #96]
   89390:	aa1503e0 	mov	x0, x21
   89394:	94000503 	bl	8a7a0 <CUSBFunction::GetInterfaceName() const>
   89398:	aa0003f5 	mov	x21, x0
   8939c:	b4001160 	cbz	x0, 895c8 <CUSBDevice::Initialize()+0x778>
   893a0:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   893a4:	910d6021 	add	x1, x1, #0x358
   893a8:	94006da6 	bl	a4a40 <CString::Compare(char const*) const>
   893ac:	35000320 	cbnz	w0, 89410 <CUSBDevice::Initialize()+0x5c0>
   893b0:	f94002a1 	ldr	x1, [x21]
   893b4:	aa1503e0 	mov	x0, x21
   893b8:	f9400421 	ldr	x1, [x1, #8]
   893bc:	d63f0020 	blr	x1
   893c0:	f9403340 	ldr	x0, [x26, #96]
   893c4:	b40000a0 	cbz	x0, 893d8 <CUSBDevice::Initialize()+0x588>
   893c8:	f9400001 	ldr	x1, [x0]
   893cc:	f9400421 	ldr	x1, [x1, #8]
   893d0:	d63f0020 	blr	x1
   893d4:	f900335f 	str	xzr, [x26, #96]
   893d8:	aa1703e2 	mov	x2, x23
   893dc:	52800041 	mov	w1, #0x2                   	// #2
   893e0:	aa1303e0 	mov	x0, x19
   893e4:	2a1903f5 	mov	w21, w25
   893e8:	97fffdda 	bl	88b50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   893ec:	17ffff5f 	b	89168 <CUSBDevice::Initialize()+0x318>
   893f0:	b0000142 	adrp	x2, b2000 <_etext+0x1158>
   893f4:	39400c03 	ldrb	w3, [x0, #3]
   893f8:	52800081 	mov	w1, #0x4                   	// #4
   893fc:	91186042 	add	x2, x2, #0x618
   89400:	aa1303e0 	mov	x0, x19
   89404:	2a1903f5 	mov	w21, w25
   89408:	97fffdd2 	bl	88b50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8940c:	17ffff57 	b	89168 <CUSBDevice::Initialize()+0x318>
   89410:	aa1503e0 	mov	x0, x21
   89414:	94006cd3 	bl	a4760 <CString::operator char const*() const>
   89418:	b0000142 	adrp	x2, b2000 <_etext+0x1158>
   8941c:	aa0003e3 	mov	x3, x0
   89420:	91196042 	add	x2, x2, #0x658
   89424:	52800061 	mov	w1, #0x3                   	// #3
   89428:	aa1303e0 	mov	x0, x19
   8942c:	97fffdc9 	bl	88b50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   89430:	aa1503e1 	mov	x1, x21
   89434:	f9403340 	ldr	x0, [x26, #96]
   89438:	9400015e 	bl	899b0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
   8943c:	aa0003f5 	mov	x21, x0
   89440:	f9403340 	ldr	x0, [x26, #96]
   89444:	b5ffed40 	cbnz	x0, 891ec <CUSBDevice::Initialize()+0x39c>
   89448:	17ffff6c 	b	891f8 <CUSBDevice::Initialize()+0x3a8>
   8944c:	aa1303e0 	mov	x0, x19
   89450:	aa1803e2 	mov	x2, x24
   89454:	52800081 	mov	w1, #0x4                   	// #4
   89458:	97fffdbe 	bl	88b50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8945c:	f9403340 	ldr	x0, [x26, #96]
   89460:	b4000080 	cbz	x0, 89470 <CUSBDevice::Initialize()+0x620>
   89464:	f9400001 	ldr	x1, [x0]
   89468:	f9400421 	ldr	x1, [x1, #8]
   8946c:	d63f0020 	blr	x1
   89470:	2a1903f5 	mov	w21, w25
   89474:	f900335f 	str	xzr, [x26, #96]
   89478:	17ffff3c 	b	89168 <CUSBDevice::Initialize()+0x318>
   8947c:	910163e0 	add	x0, sp, #0x58
   89480:	94001cfc 	bl	90870 <CUSBString::GetLanguageID()>
   89484:	2a0003e2 	mov	w2, w0
   89488:	2a1403e1 	mov	w1, w20
   8948c:	910163e0 	add	x0, sp, #0x58
   89490:	94001c5c 	bl	90600 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   89494:	72001c1f 	tst	w0, #0xff
   89498:	54000061 	b.ne	894a4 <CUSBDevice::Initialize()+0x654>  // b.any
   8949c:	f9402660 	ldr	x0, [x19, #72]
   894a0:	17ffff1b 	b	8910c <CUSBDevice::Initialize()+0x2bc>
   894a4:	910163e0 	add	x0, sp, #0x58
   894a8:	94001cee 	bl	90860 <CUSBString::Get() const>
   894ac:	aa0003e1 	mov	x1, x0
   894b0:	9101c3e0 	add	x0, sp, #0x70
   894b4:	94006cb3 	bl	a4780 <CString::operator=(char const*)>
   894b8:	f9402660 	ldr	x0, [x19, #72]
   894bc:	17ffff14 	b	8910c <CUSBDevice::Initialize()+0x2bc>
   894c0:	aa1303e0 	mov	x0, x19
   894c4:	b0000161 	adrp	x1, b6000 <From+0x98>
   894c8:	910c8021 	add	x1, x1, #0x320
   894cc:	97fffd19 	bl	88930 <CUSBDevice::ConfigurationError(char const*) const>
   894d0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   894d4:	17fffe8b 	b	88f00 <CUSBDevice::Initialize()+0xb0>
   894d8:	9101c3e0 	add	x0, sp, #0x70
   894dc:	94006ca1 	bl	a4760 <CString::operator char const*() const>
   894e0:	b0000142 	adrp	x2, b2000 <_etext+0x1158>
   894e4:	aa0003e3 	mov	x3, x0
   894e8:	9117a042 	add	x2, x2, #0x5e8
   894ec:	52800061 	mov	w1, #0x3                   	// #3
   894f0:	aa1303e0 	mov	x0, x19
   894f4:	97fffd97 	bl	88b50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   894f8:	17ffff0d 	b	8912c <CUSBDevice::Initialize()+0x2dc>
   894fc:	910163e0 	add	x0, sp, #0x58
   89500:	94001cdc 	bl	90870 <CUSBString::GetLanguageID()>
   89504:	2a0003e2 	mov	w2, w0
   89508:	2a1403e1 	mov	w1, w20
   8950c:	910163e0 	add	x0, sp, #0x58
   89510:	94001c3c 	bl	90600 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   89514:	72001c1f 	tst	w0, #0xff
   89518:	54ffe040 	b.eq	89120 <CUSBDevice::Initialize()+0x2d0>  // b.none
   8951c:	9101c3e0 	add	x0, sp, #0x70
   89520:	94006ce4 	bl	a48b0 <CString::GetLength() const>
   89524:	b5000a80 	cbnz	x0, 89674 <CUSBDevice::Initialize()+0x824>
   89528:	910163e0 	add	x0, sp, #0x58
   8952c:	94001ccd 	bl	90860 <CUSBString::Get() const>
   89530:	aa0003e1 	mov	x1, x0
   89534:	9101c3e0 	add	x0, sp, #0x70
   89538:	94006ce6 	bl	a48d0 <CString::Append(char const*)>
   8953c:	17fffef9 	b	89120 <CUSBDevice::Initialize()+0x2d0>
   89540:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89544:	b0000140 	adrp	x0, b2000 <_etext+0x1158>
   89548:	910ae021 	add	x1, x1, #0x2b8
   8954c:	910f0000 	add	x0, x0, #0x3c0
   89550:	52803242 	mov	w2, #0x192                 	// #402
   89554:	940051fb 	bl	9dd40 <assertion_failed>
   89558:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   8955c:	b0000140 	adrp	x0, b2000 <_etext+0x1158>
   89560:	910ae021 	add	x1, x1, #0x2b8
   89564:	9118e000 	add	x0, x0, #0x638
   89568:	52803262 	mov	w2, #0x193                 	// #403
   8956c:	940051f5 	bl	9dd40 <assertion_failed>
   89570:	f9402a63 	ldr	x3, [x19, #80]
   89574:	b0000142 	adrp	x2, b2000 <_etext+0x1158>
   89578:	aa1303e0 	mov	x0, x19
   8957c:	9117e042 	add	x2, x2, #0x5f8
   89580:	52800021 	mov	w1, #0x1                   	// #1
   89584:	39401463 	ldrb	w3, [x3, #5]
   89588:	97fffd72 	bl	88b50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8958c:	910163e0 	add	x0, sp, #0x58
   89590:	94001c08 	bl	905b0 <CUSBString::~CUSBString()>
   89594:	9101c3e0 	add	x0, sp, #0x70
   89598:	94006bf2 	bl	a4560 <CString::~CString()>
   8959c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   895a0:	17fffe58 	b	88f00 <CUSBDevice::Initialize()+0xb0>
   895a4:	f94002a1 	ldr	x1, [x21]
   895a8:	aa1503e0 	mov	x0, x21
   895ac:	f9402021 	ldr	x1, [x1, #64]
   895b0:	f9003355 	str	x21, [x26, #96]
   895b4:	d63f0020 	blr	x1
   895b8:	72001c1f 	tst	w0, #0xff
   895bc:	54fff480 	b.eq	8944c <CUSBDevice::Initialize()+0x5fc>  // b.none
   895c0:	52800036 	mov	w22, #0x1                   	// #1
   895c4:	17ffff18 	b	89224 <CUSBDevice::Initialize()+0x3d4>
   895c8:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   895cc:	b0000140 	adrp	x0, b2000 <_etext+0x1158>
   895d0:	910ae021 	add	x1, x1, #0x2b8
   895d4:	910dc000 	add	x0, x0, #0x370
   895d8:	528034a2 	mov	w2, #0x1a5                 	// #421
   895dc:	940051d9 	bl	9dd40 <assertion_failed>
   895e0:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   895e4:	b0000140 	adrp	x0, b2000 <_etext+0x1158>
   895e8:	a90363f7 	stp	x23, x24, [sp, #48]
   895ec:	910ae021 	add	x1, x1, #0x2b8
   895f0:	91160000 	add	x0, x0, #0x580
   895f4:	52802902 	mov	w2, #0x148                 	// #328
   895f8:	a9046bf9 	stp	x25, x26, [sp, #64]
   895fc:	940051d1 	bl	9dd40 <assertion_failed>
   89600:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89604:	b0000140 	adrp	x0, b2000 <_etext+0x1158>
   89608:	a90363f7 	stp	x23, x24, [sp, #48]
   8960c:	910ae021 	add	x1, x1, #0x2b8
   89610:	91106000 	add	x0, x0, #0x418
   89614:	52802b02 	mov	w2, #0x158                 	// #344
   89618:	a9046bf9 	stp	x25, x26, [sp, #64]
   8961c:	940051c9 	bl	9dd40 <assertion_failed>
   89620:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89624:	b0000140 	adrp	x0, b2000 <_etext+0x1158>
   89628:	a90363f7 	stp	x23, x24, [sp, #48]
   8962c:	910ae021 	add	x1, x1, #0x2b8
   89630:	91166000 	add	x0, x0, #0x598
   89634:	52802aa2 	mov	w2, #0x155                 	// #341
   89638:	a9046bf9 	stp	x25, x26, [sp, #64]
   8963c:	940051c1 	bl	9dd40 <assertion_failed>
   89640:	34000256 	cbz	w22, 89688 <CUSBDevice::Initialize()+0x838>
   89644:	a94363f7 	ldp	x23, x24, [sp, #48]
   89648:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8964c:	17ffffd0 	b	8958c <CUSBDevice::Initialize()+0x73c>
   89650:	aa1303e0 	mov	x0, x19
   89654:	b0000142 	adrp	x2, b2000 <_etext+0x1158>
   89658:	911ac042 	add	x2, x2, #0x6b0
   8965c:	52800041 	mov	w1, #0x2                   	// #2
   89660:	2a0303f4 	mov	w20, w3
   89664:	97fffd3b 	bl	88b50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   89668:	a94363f7 	ldp	x23, x24, [sp, #48]
   8966c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   89670:	17ffffc7 	b	8958c <CUSBDevice::Initialize()+0x73c>
   89674:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89678:	91178021 	add	x1, x1, #0x5e0
   8967c:	9101c3e0 	add	x0, sp, #0x70
   89680:	94006c94 	bl	a48d0 <CString::Append(char const*)>
   89684:	17ffffa9 	b	89528 <CUSBDevice::Initialize()+0x6d8>
   89688:	52800041 	mov	w1, #0x2                   	// #2
   8968c:	aa1303e0 	mov	x0, x19
   89690:	b0000142 	adrp	x2, b2000 <_etext+0x1158>
   89694:	911b4042 	add	x2, x2, #0x6d0
   89698:	97fffd2e 	bl	88b50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   8969c:	52800002 	mov	w2, #0x0                   	// #0
   896a0:	f9400660 	ldr	x0, [x19, #8]
   896a4:	f9401a61 	ldr	x1, [x19, #48]
   896a8:	97ffdec2 	bl	811b0 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
   896ac:	72001c14 	ands	w20, w0, #0xff
   896b0:	540000e0 	b.eq	896cc <CUSBDevice::Initialize()+0x87c>  // b.none
   896b4:	52800014 	mov	w20, #0x0                   	// #0
   896b8:	a94363f7 	ldp	x23, x24, [sp, #48]
   896bc:	a9446bf9 	ldp	x25, x26, [sp, #64]
   896c0:	17ffffb3 	b	8958c <CUSBDevice::Initialize()+0x73c>
   896c4:	f900335f 	str	xzr, [x26, #96]
   896c8:	17ffff44 	b	893d8 <CUSBDevice::Initialize()+0x588>
   896cc:	aa1303e0 	mov	x0, x19
   896d0:	b0000142 	adrp	x2, b2000 <_etext+0x1158>
   896d4:	911be042 	add	x2, x2, #0x6f8
   896d8:	52800041 	mov	w1, #0x2                   	// #2
   896dc:	97fffd1d 	bl	88b50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   896e0:	a94363f7 	ldp	x23, x24, [sp, #48]
   896e4:	a9446bf9 	ldp	x25, x26, [sp, #64]
   896e8:	17ffffa9 	b	8958c <CUSBDevice::Initialize()+0x73c>
   896ec:	00000000 	udf	#0

00000000000896f0 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)>:
   896f0:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   896f4:	910003fd 	mov	x29, sp
   896f8:	a9025bf5 	stp	x21, x22, [sp, #32]
   896fc:	aa0003f5 	mov	x21, x0
   89700:	910123a0 	add	x0, x29, #0x48
   89704:	aa1503e1 	mov	x1, x21
   89708:	a90153f3 	stp	x19, x20, [sp, #16]
   8970c:	a90363f7 	stp	x23, x24, [sp, #48]
   89710:	940003ec 	bl	8a6c0 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   89714:	910123a0 	add	x0, x29, #0x48
   89718:	52800421 	mov	w1, #0x21                  	// #33
   8971c:	94000471 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   89720:	b4000d40 	cbz	x0, 898c8 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x1d8>
   89724:	aa0003f6 	mov	x22, x0
   89728:	39401c00 	ldrb	w0, [x0, #7]
   8972c:	394022d3 	ldrb	w19, [x22, #8]
   89730:	2a132013 	orr	w19, w0, w19, lsl #8
   89734:	34000cb3 	cbz	w19, 898c8 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x1d8>
   89738:	92403e62 	and	x2, x19, #0xffff
   8973c:	910123a0 	add	x0, x29, #0x48
   89740:	d1000442 	sub	x2, x2, #0x1
   89744:	b2401442 	orr	x2, x2, #0x3f
   89748:	91010042 	add	x2, x2, #0x40
   8974c:	927cec42 	and	x2, x2, #0xfffffffffffffff0
   89750:	cb2263ff 	sub	sp, sp, x2
   89754:	94000457 	bl	8a8b0 <CUSBFunction::GetHost() const>
   89758:	aa0003f7 	mov	x23, x0
   8975c:	910123a0 	add	x0, x29, #0x48
   89760:	94000448 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   89764:	39401ad8 	ldrb	w24, [x22, #6]
   89768:	aa0003e1 	mov	x1, x0
   8976c:	9100fff4 	add	x20, sp, #0x3f
   89770:	910123a0 	add	x0, x29, #0x48
   89774:	aa0103f6 	mov	x22, x1
   89778:	927ae694 	and	x20, x20, #0xffffffffffffffc0
   8977c:	940004b9 	bl	8aa60 <CUSBFunction::GetInterfaceNumber() const>
   89780:	12001c07 	and	w7, w0, #0xff
   89784:	aa1603e1 	mov	x1, x22
   89788:	aa1703e0 	mov	x0, x23
   8978c:	2a1803e2 	mov	w2, w24
   89790:	aa1403e4 	mov	x4, x20
   89794:	12800fc6 	mov	w6, #0xffffff81            	// #-127
   89798:	2a1303e5 	mov	w5, w19
   8979c:	52800003 	mov	w3, #0x0                   	// #0
   897a0:	97ffde64 	bl	81130 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   897a4:	6b13001f 	cmp	w0, w19
   897a8:	540009c1 	b.ne	898e0 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x1f0>  // b.any
   897ac:	d503201f 	nop
   897b0:	39400282 	ldrb	w2, [x20]
   897b4:	121e1443 	and	w3, w2, #0xfc
   897b8:	12000442 	and	w2, w2, #0x3
   897bc:	7100107f 	cmp	w3, #0x4
   897c0:	1a9f17e3 	cset	w3, eq	// eq = none
   897c4:	7100085f 	cmp	w2, #0x2
   897c8:	540006a0 	b.eq	8989c <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x1ac>  // b.none
   897cc:	71000c5f 	cmp	w2, #0x3
   897d0:	51000660 	sub	w0, w19, #0x1
   897d4:	54000460 	b.eq	89860 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x170>  // b.none
   897d8:	7100045f 	cmp	w2, #0x1
   897dc:	54000160 	b.eq	89808 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x118>  // b.none
   897e0:	91000694 	add	x20, x20, #0x1
   897e4:	12003c13 	and	w19, w0, #0xffff
   897e8:	35fffe53 	cbnz	w19, 897b0 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0xc0>
   897ec:	d2802e00 	mov	x0, #0x170                 	// #368
   897f0:	94007a9c 	bl	a8260 <operator new(unsigned long)>
   897f4:	aa1503e1 	mov	x1, x21
   897f8:	52800022 	mov	w2, #0x1                   	// #1
   897fc:	aa0003f3 	mov	x19, x0
   89800:	94000940 	bl	8bd00 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
   89804:	1400000e 	b	8983c <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x14c>
   89808:	39400680 	ldrb	w0, [x20, #1]
   8980c:	51000a73 	sub	w19, w19, #0x2
   89810:	91000a94 	add	x20, x20, #0x2
   89814:	12003e73 	and	w19, w19, #0xffff
   89818:	7100341f 	cmp	w0, #0xd
   8981c:	1a9f17e0 	cset	w0, eq	// eq = none
   89820:	0a000063 	and	w3, w3, w0
   89824:	34fffe23 	cbz	w3, 897e8 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0xf8>
   89828:	d2804600 	mov	x0, #0x230                 	// #560
   8982c:	94007a8d 	bl	a8260 <operator new(unsigned long)>
   89830:	aa1503e1 	mov	x1, x21
   89834:	aa0003f3 	mov	x19, x0
   89838:	940024aa 	bl	92ae0 <CUSBTouchScreenDevice::CUSBTouchScreenDevice(CUSBFunction*)>
   8983c:	910123a0 	add	x0, x29, #0x48
   89840:	940002fc 	bl	8a430 <CUSBFunction::~CUSBFunction()>
   89844:	910003bf 	mov	sp, x29
   89848:	aa1303e0 	mov	x0, x19
   8984c:	a94153f3 	ldp	x19, x20, [sp, #16]
   89850:	a9425bf5 	ldp	x21, x22, [sp, #32]
   89854:	a94363f7 	ldp	x23, x24, [sp, #48]
   89858:	a8c77bfd 	ldp	x29, x30, [sp], #112
   8985c:	d65f03c0 	ret
   89860:	39400684 	ldrb	w4, [x20, #1]
   89864:	51001673 	sub	w19, w19, #0x5
   89868:	91001694 	add	x20, x20, #0x5
   8986c:	12003e73 	and	w19, w19, #0xffff
   89870:	385fd282 	ldurb	w2, [x20, #-3]
   89874:	385fe281 	ldurb	w1, [x20, #-2]
   89878:	385ff280 	ldurb	w0, [x20, #-1]
   8987c:	aa022082 	orr	x2, x4, x2, lsl #8
   89880:	aa014041 	orr	x1, x2, x1, lsl #16
   89884:	aa006020 	orr	x0, x1, x0, lsl #24
   89888:	7100341f 	cmp	w0, #0xd
   8988c:	1a9f17e0 	cset	w0, eq	// eq = none
   89890:	0a000063 	and	w3, w3, w0
   89894:	34fffaa3 	cbz	w3, 897e8 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0xf8>
   89898:	17ffffe4 	b	89828 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x138>
   8989c:	39400681 	ldrb	w1, [x20, #1]
   898a0:	51000e73 	sub	w19, w19, #0x3
   898a4:	91000e94 	add	x20, x20, #0x3
   898a8:	12003e73 	and	w19, w19, #0xffff
   898ac:	385ff280 	ldurb	w0, [x20, #-1]
   898b0:	2a002020 	orr	w0, w1, w0, lsl #8
   898b4:	7100341f 	cmp	w0, #0xd
   898b8:	1a9f17e0 	cset	w0, eq	// eq = none
   898bc:	0a000063 	and	w3, w3, w0
   898c0:	34fff943 	cbz	w3, 897e8 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0xf8>
   898c4:	17ffffd9 	b	89828 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x138>
   898c8:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   898cc:	911ce021 	add	x1, x1, #0x738
   898d0:	910123a0 	add	x0, x29, #0x48
   898d4:	d2800013 	mov	x19, #0x0                   	// #0
   898d8:	9400040e 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   898dc:	17ffffd8 	b	8983c <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x14c>
   898e0:	910123a0 	add	x0, x29, #0x48
   898e4:	d2800013 	mov	x19, #0x0                   	// #0
   898e8:	940003da 	bl	8a850 <CUSBFunction::GetDevice() const>
   898ec:	b0000142 	adrp	x2, b2000 <_etext+0x1158>
   898f0:	911d0042 	add	x2, x2, #0x740
   898f4:	52800021 	mov	w1, #0x1                   	// #1
   898f8:	97fffc96 	bl	88b50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   898fc:	17ffffd0 	b	8983c <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x14c>

0000000000089900 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>:
   89900:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   89904:	910003fd 	mov	x29, sp
   89908:	a90153f3 	stp	x19, x20, [sp, #16]
   8990c:	b0000154 	adrp	x20, b2000 <_etext+0x1158>
   89910:	910d2294 	add	x20, x20, #0x348
   89914:	aa0103f3 	mov	x19, x1
   89918:	f90013f5 	str	x21, [sp, #32]
   8991c:	aa0003f5 	mov	x21, x0
   89920:	14000002 	b	89928 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)+0x28>
   89924:	94006b0f 	bl	a4560 <CString::~CString()>
   89928:	79400261 	ldrh	w1, [x19]
   8992c:	9100c3e0 	add	x0, sp, #0x30
   89930:	35000061 	cbnz	w1, 8993c <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)+0x3c>
   89934:	79400661 	ldrh	w1, [x19, #2]
   89938:	340002c1 	cbz	w1, 89990 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)+0x90>
   8993c:	94006b45 	bl	a4650 <CString::CString()>
   89940:	79400663 	ldrh	w3, [x19, #2]
   89944:	aa1403e1 	mov	x1, x20
   89948:	9100c3e0 	add	x0, sp, #0x30
   8994c:	91001273 	add	x19, x19, #0x4
   89950:	785fc262 	ldurh	w2, [x19, #-4]
   89954:	94007177 	bl	a5f30 <CString::Format(char const*, ...)>
   89958:	9100c3e0 	add	x0, sp, #0x30
   8995c:	94006b81 	bl	a4760 <CString::operator char const*() const>
   89960:	aa0003e1 	mov	x1, x0
   89964:	aa1503e0 	mov	x0, x21
   89968:	94006c36 	bl	a4a40 <CString::Compare(char const*) const>
   8996c:	2a0003e1 	mov	w1, w0
   89970:	9100c3e0 	add	x0, sp, #0x30
   89974:	35fffd81 	cbnz	w1, 89924 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)+0x24>
   89978:	94006afa 	bl	a4560 <CString::~CString()>
   8997c:	52800020 	mov	w0, #0x1                   	// #1
   89980:	a94153f3 	ldp	x19, x20, [sp, #16]
   89984:	f94013f5 	ldr	x21, [sp, #32]
   89988:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8998c:	d65f03c0 	ret
   89990:	52800000 	mov	w0, #0x0                   	// #0
   89994:	a94153f3 	ldp	x19, x20, [sp, #16]
   89998:	f94013f5 	ldr	x21, [sp, #32]
   8999c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   899a0:	d65f03c0 	ret
   899a4:	d503201f 	nop
   899a8:	d503201f 	nop
   899ac:	d503201f 	nop

00000000000899b0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>:
   899b0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   899b4:	910003fd 	mov	x29, sp
   899b8:	a90153f3 	stp	x19, x20, [sp, #16]
   899bc:	f90013f5 	str	x21, [sp, #32]
   899c0:	b4000ae0 	cbz	x0, 89b1c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x16c>
   899c4:	aa0103f3 	mov	x19, x1
   899c8:	b4000b61 	cbz	x1, 89b34 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x184>
   899cc:	aa0003f4 	mov	x20, x0
   899d0:	940055f8 	bl	9f1b0 <CKernelOptions::Get()>
   899d4:	940055b3 	bl	9f0a0 <CKernelOptions::GetUSBIgnore() const>
   899d8:	aa0003f5 	mov	x21, x0
   899dc:	b4000b80 	cbz	x0, 89b4c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x19c>
   899e0:	aa0003e1 	mov	x1, x0
   899e4:	aa1303e0 	mov	x0, x19
   899e8:	94006c16 	bl	a4a40 <CString::Compare(char const*) const>
   899ec:	340007c0 	cbz	w0, 89ae4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x134>
   899f0:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   899f4:	911f4021 	add	x1, x1, #0x7d0
   899f8:	aa1303e0 	mov	x0, x19
   899fc:	94006c11 	bl	a4a40 <CString::Compare(char const*) const>
   89a00:	35000340 	cbnz	w0, 89a68 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xb8>
   89a04:	d2801c00 	mov	x0, #0xe0                  	// #224
   89a08:	94007a16 	bl	a8260 <operator new(unsigned long)>
   89a0c:	aa1403e1 	mov	x1, x20
   89a10:	aa0003f4 	mov	x20, x0
   89a14:	97ffe1cf 	bl	82150 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>
   89a18:	aa1403e0 	mov	x0, x20
   89a1c:	9400038d 	bl	8a850 <CUSBFunction::GetDevice() const>
   89a20:	aa0003f5 	mov	x21, x0
   89a24:	aa1303e0 	mov	x0, x19
   89a28:	94006b4e 	bl	a4760 <CString::operator char const*() const>
   89a2c:	b0000142 	adrp	x2, b2000 <_etext+0x1158>
   89a30:	aa0003e3 	mov	x3, x0
   89a34:	91288042 	add	x2, x2, #0xa20
   89a38:	aa1503e0 	mov	x0, x21
   89a3c:	52800061 	mov	w1, #0x3                   	// #3
   89a40:	97fffc44 	bl	88b50 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
   89a44:	f9400261 	ldr	x1, [x19]
   89a48:	aa1303e0 	mov	x0, x19
   89a4c:	f9400421 	ldr	x1, [x1, #8]
   89a50:	d63f0020 	blr	x1
   89a54:	aa1403e0 	mov	x0, x20
   89a58:	a94153f3 	ldp	x19, x20, [sp, #16]
   89a5c:	f94013f5 	ldr	x21, [sp, #32]
   89a60:	a8c37bfd 	ldp	x29, x30, [sp], #48
   89a64:	d65f03c0 	ret
   89a68:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89a6c:	911f8021 	add	x1, x1, #0x7e0
   89a70:	aa1303e0 	mov	x0, x19
   89a74:	94006bf3 	bl	a4a40 <CString::Compare(char const*) const>
   89a78:	34fffc60 	cbz	w0, 89a04 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x54>
   89a7c:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89a80:	911fc021 	add	x1, x1, #0x7f0
   89a84:	aa1303e0 	mov	x0, x19
   89a88:	94006bee 	bl	a4a40 <CString::Compare(char const*) const>
   89a8c:	340006c0 	cbz	w0, 89b64 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1b4>
   89a90:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89a94:	91200021 	add	x1, x1, #0x800
   89a98:	aa1303e0 	mov	x0, x19
   89a9c:	94006be9 	bl	a4a40 <CString::Compare(char const*) const>
   89aa0:	350006e0 	cbnz	w0, 89b7c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1cc>
   89aa4:	aa1403e0 	mov	x0, x20
   89aa8:	9400036a 	bl	8a850 <CUSBFunction::GetDevice() const>
   89aac:	52800001 	mov	w1, #0x0                   	// #0
   89ab0:	97fffaa8 	bl	88550 <CUSBDevice::GetName(TDeviceNameSelector) const>
   89ab4:	aa0003f5 	mov	x21, x0
   89ab8:	b4000c80 	cbz	x0, 89c48 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x298>
   89abc:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89ac0:	91208021 	add	x1, x1, #0x820
   89ac4:	94006bdf 	bl	a4a40 <CString::Compare(char const*) const>
   89ac8:	35000ac0 	cbnz	w0, 89c20 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x270>
   89acc:	f94002a1 	ldr	x1, [x21]
   89ad0:	aa1503e0 	mov	x0, x21
   89ad4:	d2800014 	mov	x20, #0x0                   	// #0
   89ad8:	f9400421 	ldr	x1, [x1, #8]
   89adc:	d63f0020 	blr	x1
   89ae0:	17ffffd9 	b	89a44 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x94>
   89ae4:	940057cb 	bl	9fa10 <CLogger::Get()>
   89ae8:	b0000143 	adrp	x3, b2000 <_etext+0x1158>
   89aec:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89af0:	aa1503e4 	mov	x4, x21
   89af4:	911e8063 	add	x3, x3, #0x7a0
   89af8:	911f0021 	add	x1, x1, #0x7c0
   89afc:	52800042 	mov	w2, #0x2                   	// #2
   89b00:	940059b0 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   89b04:	d2800014 	mov	x20, #0x0                   	// #0
   89b08:	f94013f5 	ldr	x21, [sp, #32]
   89b0c:	aa1403e0 	mov	x0, x20
   89b10:	a94153f3 	ldp	x19, x20, [sp, #16]
   89b14:	a8c37bfd 	ldp	x29, x30, [sp], #48
   89b18:	d65f03c0 	ret
   89b1c:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89b20:	b0000140 	adrp	x0, b2000 <_etext+0x1158>
   89b24:	911da021 	add	x1, x1, #0x768
   89b28:	911e0000 	add	x0, x0, #0x780
   89b2c:	52800702 	mov	w2, #0x38                  	// #56
   89b30:	94005084 	bl	9dd40 <assertion_failed>
   89b34:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89b38:	b0000140 	adrp	x0, b2000 <_etext+0x1158>
   89b3c:	911da021 	add	x1, x1, #0x768
   89b40:	910dc000 	add	x0, x0, #0x370
   89b44:	52800722 	mov	w2, #0x39                  	// #57
   89b48:	9400507e 	bl	9dd40 <assertion_failed>
   89b4c:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89b50:	b0000140 	adrp	x0, b2000 <_etext+0x1158>
   89b54:	911da021 	add	x1, x1, #0x768
   89b58:	911e4000 	add	x0, x0, #0x790
   89b5c:	52800782 	mov	w2, #0x3c                  	// #60
   89b60:	94005078 	bl	9dd40 <assertion_failed>
   89b64:	d2800b00 	mov	x0, #0x58                  	// #88
   89b68:	940079be 	bl	a8260 <operator new(unsigned long)>
   89b6c:	aa1403e1 	mov	x1, x20
   89b70:	aa0003f4 	mov	x20, x0
   89b74:	94001197 	bl	8e1d0 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>
   89b78:	17ffffa8 	b	89a18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   89b7c:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89b80:	9120c021 	add	x1, x1, #0x830
   89b84:	aa1303e0 	mov	x0, x19
   89b88:	94006bae 	bl	a4a40 <CString::Compare(char const*) const>
   89b8c:	350000e0 	cbnz	w0, 89ba8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1f8>
   89b90:	d2801100 	mov	x0, #0x88                  	// #136
   89b94:	940079b3 	bl	a8260 <operator new(unsigned long)>
   89b98:	aa1403e1 	mov	x1, x20
   89b9c:	aa0003f4 	mov	x20, x0
   89ba0:	94001754 	bl	8f8f0 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>
   89ba4:	17ffff9d 	b	89a18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   89ba8:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89bac:	91210021 	add	x1, x1, #0x840
   89bb0:	aa1303e0 	mov	x0, x19
   89bb4:	94006ba3 	bl	a4a40 <CString::Compare(char const*) const>
   89bb8:	340000c0 	cbz	w0, 89bd0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x220>
   89bbc:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89bc0:	91214021 	add	x1, x1, #0x850
   89bc4:	aa1303e0 	mov	x0, x19
   89bc8:	94006b9e 	bl	a4a40 <CString::Compare(char const*) const>
   89bcc:	350004a0 	cbnz	w0, 89c60 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2b0>
   89bd0:	aa1403e0 	mov	x0, x20
   89bd4:	9400031f 	bl	8a850 <CUSBFunction::GetDevice() const>
   89bd8:	52800001 	mov	w1, #0x0                   	// #0
   89bdc:	97fffa5d 	bl	88550 <CUSBDevice::GetName(TDeviceNameSelector) const>
   89be0:	aa0003f5 	mov	x21, x0
   89be4:	b40005e0 	cbz	x0, 89ca0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2f0>
   89be8:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89bec:	91220021 	add	x1, x1, #0x880
   89bf0:	94006b94 	bl	a4a40 <CString::Compare(char const*) const>
   89bf4:	34fff6c0 	cbz	w0, 89acc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x11c>
   89bf8:	aa1403e0 	mov	x0, x20
   89bfc:	97fffebd 	bl	896f0 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)>
   89c00:	f94002a1 	ldr	x1, [x21]
   89c04:	aa0003f4 	mov	x20, x0
   89c08:	aa1503e0 	mov	x0, x21
   89c0c:	f9400421 	ldr	x1, [x1, #8]
   89c10:	d63f0020 	blr	x1
   89c14:	b5fff034 	cbnz	x20, 89a18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   89c18:	d2800014 	mov	x20, #0x0                   	// #0
   89c1c:	17ffff8a 	b	89a44 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x94>
   89c20:	d280b300 	mov	x0, #0x598                 	// #1432
   89c24:	9400798f 	bl	a8260 <operator new(unsigned long)>
   89c28:	aa1403e1 	mov	x1, x20
   89c2c:	aa0003f4 	mov	x20, x0
   89c30:	97ffdebc 	bl	81720 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>
   89c34:	f94002a1 	ldr	x1, [x21]
   89c38:	aa1503e0 	mov	x0, x21
   89c3c:	f9400421 	ldr	x1, [x1, #8]
   89c40:	d63f0020 	blr	x1
   89c44:	17ffff75 	b	89a18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   89c48:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89c4c:	b0000140 	adrp	x0, b2000 <_etext+0x1158>
   89c50:	911da021 	add	x1, x1, #0x768
   89c54:	91204000 	add	x0, x0, #0x810
   89c58:	52800ac2 	mov	w2, #0x56                  	// #86
   89c5c:	94005039 	bl	9dd40 <assertion_failed>
   89c60:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89c64:	91218021 	add	x1, x1, #0x860
   89c68:	aa1303e0 	mov	x0, x19
   89c6c:	94006b75 	bl	a4a40 <CString::Compare(char const*) const>
   89c70:	34fffb00 	cbz	w0, 89bd0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x220>
   89c74:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89c78:	9121c021 	add	x1, x1, #0x870
   89c7c:	aa1303e0 	mov	x0, x19
   89c80:	94006b70 	bl	a4a40 <CString::Compare(char const*) const>
   89c84:	350001a0 	cbnz	w0, 89cb8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x308>
   89c88:	d2803800 	mov	x0, #0x1c0                 	// #448
   89c8c:	94007975 	bl	a8260 <operator new(unsigned long)>
   89c90:	aa1403e1 	mov	x1, x20
   89c94:	aa0003f4 	mov	x20, x0
   89c98:	9400042a 	bl	8ad40 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>
   89c9c:	17ffff5f 	b	89a18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   89ca0:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89ca4:	b0000140 	adrp	x0, b2000 <_etext+0x1158>
   89ca8:	911da021 	add	x1, x1, #0x768
   89cac:	91204000 	add	x0, x0, #0x810
   89cb0:	52800d62 	mov	w2, #0x6b                  	// #107
   89cb4:	94005023 	bl	9dd40 <assertion_failed>
   89cb8:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89cbc:	91224021 	add	x1, x1, #0x890
   89cc0:	aa1303e0 	mov	x0, x19
   89cc4:	94006b5f 	bl	a4a40 <CString::Compare(char const*) const>
   89cc8:	340000c0 	cbz	w0, 89ce0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x330>
   89ccc:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89cd0:	91228021 	add	x1, x1, #0x8a0
   89cd4:	aa1303e0 	mov	x0, x19
   89cd8:	94006b5a 	bl	a4a40 <CString::Compare(char const*) const>
   89cdc:	350000e0 	cbnz	w0, 89cf8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x348>
   89ce0:	d2803000 	mov	x0, #0x180                 	// #384
   89ce4:	9400795f 	bl	a8260 <operator new(unsigned long)>
   89ce8:	aa1403e1 	mov	x1, x20
   89cec:	aa0003f4 	mov	x20, x0
   89cf0:	940006b0 	bl	8b7b0 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>
   89cf4:	17ffff49 	b	89a18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   89cf8:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89cfc:	9122c021 	add	x1, x1, #0x8b0
   89d00:	aa1303e0 	mov	x0, x19
   89d04:	94006b4f 	bl	a4a40 <CString::Compare(char const*) const>
   89d08:	340000c0 	cbz	w0, 89d20 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x370>
   89d0c:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89d10:	91230021 	add	x1, x1, #0x8c0
   89d14:	aa1303e0 	mov	x0, x19
   89d18:	94006b4a 	bl	a4a40 <CString::Compare(char const*) const>
   89d1c:	350000e0 	cbnz	w0, 89d38 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x388>
   89d20:	d2802b00 	mov	x0, #0x158                 	// #344
   89d24:	9400794f 	bl	a8260 <operator new(unsigned long)>
   89d28:	aa1403e1 	mov	x1, x20
   89d2c:	aa0003f4 	mov	x20, x0
   89d30:	94000ce4 	bl	8d0c0 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>
   89d34:	17ffff39 	b	89a18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   89d38:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89d3c:	91234021 	add	x1, x1, #0x8d0
   89d40:	aa1303e0 	mov	x0, x19
   89d44:	94006b3f 	bl	a4a40 <CString::Compare(char const*) const>
   89d48:	340000c0 	cbz	w0, 89d60 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3b0>
   89d4c:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89d50:	91238021 	add	x1, x1, #0x8e0
   89d54:	aa1303e0 	mov	x0, x19
   89d58:	94006b3a 	bl	a4a40 <CString::Compare(char const*) const>
   89d5c:	350000e0 	cbnz	w0, 89d78 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3c8>
   89d60:	d2802c00 	mov	x0, #0x160                 	// #352
   89d64:	9400793f 	bl	a8260 <operator new(unsigned long)>
   89d68:	aa1403e1 	mov	x1, x20
   89d6c:	aa0003f4 	mov	x20, x0
   89d70:	94000e28 	bl	8d610 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>
   89d74:	17ffff29 	b	89a18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   89d78:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89d7c:	9123c021 	add	x1, x1, #0x8f0
   89d80:	aa1303e0 	mov	x0, x19
   89d84:	94006b2f 	bl	a4a40 <CString::Compare(char const*) const>
   89d88:	34fffec0 	cbz	w0, 89d60 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3b0>
   89d8c:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89d90:	91240021 	add	x1, x1, #0x900
   89d94:	aa1303e0 	mov	x0, x19
   89d98:	94006b2a 	bl	a4a40 <CString::Compare(char const*) const>
   89d9c:	34fffe20 	cbz	w0, 89d60 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3b0>
   89da0:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89da4:	91244021 	add	x1, x1, #0x910
   89da8:	aa1303e0 	mov	x0, x19
   89dac:	94006b25 	bl	a4a40 <CString::Compare(char const*) const>
   89db0:	34fffd80 	cbz	w0, 89d60 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3b0>
   89db4:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89db8:	91248021 	add	x1, x1, #0x920
   89dbc:	aa1303e0 	mov	x0, x19
   89dc0:	94006b20 	bl	a4a40 <CString::Compare(char const*) const>
   89dc4:	350000e0 	cbnz	w0, 89de0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x430>
   89dc8:	d2802c00 	mov	x0, #0x160                 	// #352
   89dcc:	94007925 	bl	a8260 <operator new(unsigned long)>
   89dd0:	aa1403e1 	mov	x1, x20
   89dd4:	aa0003f4 	mov	x20, x0
   89dd8:	94000aee 	bl	8c990 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>
   89ddc:	17ffff0f 	b	89a18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   89de0:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89de4:	9124c021 	add	x1, x1, #0x930
   89de8:	aa1303e0 	mov	x0, x19
   89dec:	94006b15 	bl	a4a40 <CString::Compare(char const*) const>
   89df0:	340000c0 	cbz	w0, 89e08 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x458>
   89df4:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89df8:	91250021 	add	x1, x1, #0x940
   89dfc:	aa1303e0 	mov	x0, x19
   89e00:	94006b10 	bl	a4a40 <CString::Compare(char const*) const>
   89e04:	350000e0 	cbnz	w0, 89e20 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x470>
   89e08:	d2800900 	mov	x0, #0x48                  	// #72
   89e0c:	94007915 	bl	a8260 <operator new(unsigned long)>
   89e10:	aa1403e1 	mov	x1, x20
   89e14:	aa0003f4 	mov	x20, x0
   89e18:	940018ee 	bl	901d0 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>
   89e1c:	17fffeff 	b	89a18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   89e20:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89e24:	91254021 	add	x1, x1, #0x950
   89e28:	aa1303e0 	mov	x0, x19
   89e2c:	94006b05 	bl	a4a40 <CString::Compare(char const*) const>
   89e30:	350000e0 	cbnz	w0, 89e4c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x49c>
   89e34:	d2800900 	mov	x0, #0x48                  	// #72
   89e38:	9400790a 	bl	a8260 <operator new(unsigned long)>
   89e3c:	aa1403e1 	mov	x1, x20
   89e40:	aa0003f4 	mov	x20, x0
   89e44:	94003a77 	bl	98820 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>
   89e48:	17fffef4 	b	89a18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   89e4c:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89e50:	91258021 	add	x1, x1, #0x960
   89e54:	aa1303e0 	mov	x0, x19
   89e58:	94006afa 	bl	a4a40 <CString::Compare(char const*) const>
   89e5c:	350000e0 	cbnz	w0, 89e78 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x4c8>
   89e60:	d2800900 	mov	x0, #0x48                  	// #72
   89e64:	940078ff 	bl	a8260 <operator new(unsigned long)>
   89e68:	aa1403e1 	mov	x1, x20
   89e6c:	aa0003f4 	mov	x20, x0
   89e70:	94003664 	bl	97800 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>
   89e74:	17fffee9 	b	89a18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   89e78:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89e7c:	9125c021 	add	x1, x1, #0x970
   89e80:	aa1303e0 	mov	x0, x19
   89e84:	94006aef 	bl	a4a40 <CString::Compare(char const*) const>
   89e88:	340000c0 	cbz	w0, 89ea0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x4f0>
   89e8c:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89e90:	91260021 	add	x1, x1, #0x980
   89e94:	aa1303e0 	mov	x0, x19
   89e98:	94006aea 	bl	a4a40 <CString::Compare(char const*) const>
   89e9c:	350000e0 	cbnz	w0, 89eb8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x508>
   89ea0:	d2800b00 	mov	x0, #0x58                  	// #88
   89ea4:	940078ef 	bl	a8260 <operator new(unsigned long)>
   89ea8:	aa1403e1 	mov	x1, x20
   89eac:	aa0003f4 	mov	x20, x0
   89eb0:	94003e3c 	bl	997a0 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>
   89eb4:	17fffed9 	b	89a18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   89eb8:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89ebc:	91264021 	add	x1, x1, #0x990
   89ec0:	aa1303e0 	mov	x0, x19
   89ec4:	94006adf 	bl	a4a40 <CString::Compare(char const*) const>
   89ec8:	350000e0 	cbnz	w0, 89ee4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x534>
   89ecc:	d2800b00 	mov	x0, #0x58                  	// #88
   89ed0:	940078e4 	bl	a8260 <operator new(unsigned long)>
   89ed4:	aa1403e1 	mov	x1, x20
   89ed8:	aa0003f4 	mov	x20, x0
   89edc:	940014bd 	bl	8f1d0 <CUSBMIDIHostDevice::CUSBMIDIHostDevice(CUSBFunction*)>
   89ee0:	17fffece 	b	89a18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   89ee4:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89ee8:	91268021 	add	x1, x1, #0x9a0
   89eec:	aa1303e0 	mov	x0, x19
   89ef0:	94006ad4 	bl	a4a40 <CString::Compare(char const*) const>
   89ef4:	34fffec0 	cbz	w0, 89ecc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x51c>
   89ef8:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89efc:	9126c021 	add	x1, x1, #0x9b0
   89f00:	aa1303e0 	mov	x0, x19
   89f04:	94006acf 	bl	a4a40 <CString::Compare(char const*) const>
   89f08:	350000e0 	cbnz	w0, 89f24 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x574>
   89f0c:	d2810700 	mov	x0, #0x838                 	// #2104
   89f10:	940078d4 	bl	a8260 <operator new(unsigned long)>
   89f14:	aa1403e1 	mov	x1, x20
   89f18:	aa0003f4 	mov	x20, x0
   89f1c:	94002761 	bl	93ca0 <CUSBAudioControlDevice::CUSBAudioControlDevice(CUSBFunction*)>
   89f20:	17fffebe 	b	89a18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   89f24:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89f28:	91270021 	add	x1, x1, #0x9c0
   89f2c:	aa1303e0 	mov	x0, x19
   89f30:	94006ac4 	bl	a4a40 <CString::Compare(char const*) const>
   89f34:	34fffec0 	cbz	w0, 89f0c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x55c>
   89f38:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89f3c:	91274021 	add	x1, x1, #0x9d0
   89f40:	aa1303e0 	mov	x0, x19
   89f44:	94006abf 	bl	a4a40 <CString::Compare(char const*) const>
   89f48:	350000e0 	cbnz	w0, 89f64 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5b4>
   89f4c:	d2804000 	mov	x0, #0x200                 	// #512
   89f50:	940078c4 	bl	a8260 <operator new(unsigned long)>
   89f54:	aa1403e1 	mov	x1, x20
   89f58:	aa0003f4 	mov	x20, x0
   89f5c:	94002919 	bl	943c0 <CUSBAudioStreamingDevice::CUSBAudioStreamingDevice(CUSBFunction*)>
   89f60:	17fffeae 	b	89a18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   89f64:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89f68:	91278021 	add	x1, x1, #0x9e0
   89f6c:	aa1303e0 	mov	x0, x19
   89f70:	94006ab4 	bl	a4a40 <CString::Compare(char const*) const>
   89f74:	34fffec0 	cbz	w0, 89f4c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x59c>
   89f78:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89f7c:	9127c021 	add	x1, x1, #0x9f0
   89f80:	aa1303e0 	mov	x0, x19
   89f84:	94006aaf 	bl	a4a40 <CString::Compare(char const*) const>
   89f88:	350000e0 	cbnz	w0, 89fa4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5f4>
   89f8c:	d2800a00 	mov	x0, #0x50                  	// #80
   89f90:	940078b4 	bl	a8260 <operator new(unsigned long)>
   89f94:	aa1403e1 	mov	x1, x20
   89f98:	aa0003f4 	mov	x20, x0
   89f9c:	9400402d 	bl	9a050 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>
   89fa0:	17fffe9e 	b	89a18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   89fa4:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89fa8:	91280021 	add	x1, x1, #0xa00
   89fac:	aa1303e0 	mov	x0, x19
   89fb0:	94006aa4 	bl	a4a40 <CString::Compare(char const*) const>
   89fb4:	340000c0 	cbz	w0, 89fcc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x61c>
   89fb8:	b0000141 	adrp	x1, b2000 <_etext+0x1158>
   89fbc:	91284021 	add	x1, x1, #0xa10
   89fc0:	aa1303e0 	mov	x0, x19
   89fc4:	94006a9f 	bl	a4a40 <CString::Compare(char const*) const>
   89fc8:	350000e0 	cbnz	w0, 89fe4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x634>
   89fcc:	d2800f00 	mov	x0, #0x78                  	// #120
   89fd0:	940078a4 	bl	a8260 <operator new(unsigned long)>
   89fd4:	aa1403e1 	mov	x1, x20
   89fd8:	aa0003f4 	mov	x20, x0
   89fdc:	940021f5 	bl	927b0 <CUSBSerialCDCDevice::CUSBSerialCDCDevice(CUSBFunction*)>
   89fe0:	17fffe8e 	b	89a18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   89fe4:	94001b07 	bl	90c00 <CUSBSerialCH341Device::GetDeviceIDTable()>
   89fe8:	aa0003e1 	mov	x1, x0
   89fec:	aa1303e0 	mov	x0, x19
   89ff0:	97fffe44 	bl	89900 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>
   89ff4:	72001c1f 	tst	w0, #0xff
   89ff8:	540000e0 	b.eq	8a014 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x664>  // b.none
   89ffc:	d2800f00 	mov	x0, #0x78                  	// #120
   8a000:	94007898 	bl	a8260 <operator new(unsigned long)>
   8a004:	aa1403e1 	mov	x1, x20
   8a008:	aa0003f4 	mov	x20, x0
   8a00c:	94001af1 	bl	90bd0 <CUSBSerialCH341Device::CUSBSerialCH341Device(CUSBFunction*)>
   8a010:	17fffe82 	b	89a18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   8a014:	94001c8b 	bl	91240 <CUSBSerialCP210xDevice::GetDeviceIDTable()>
   8a018:	aa0003e1 	mov	x1, x0
   8a01c:	aa1303e0 	mov	x0, x19
   8a020:	97fffe38 	bl	89900 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>
   8a024:	72001c1f 	tst	w0, #0xff
   8a028:	540000e0 	b.eq	8a044 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x694>  // b.none
   8a02c:	d2801000 	mov	x0, #0x80                  	// #128
   8a030:	9400788c 	bl	a8260 <operator new(unsigned long)>
   8a034:	aa1403e1 	mov	x1, x20
   8a038:	aa0003f4 	mov	x20, x0
   8a03c:	94001c71 	bl	91200 <CUSBSerialCP210xDevice::CUSBSerialCP210xDevice(CUSBFunction*)>
   8a040:	17fffe76 	b	89a18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   8a044:	94001e27 	bl	918e0 <CUSBSerialPL2303Device::GetDeviceIDTable()>
   8a048:	aa0003e1 	mov	x1, x0
   8a04c:	aa1303e0 	mov	x0, x19
   8a050:	97fffe2c 	bl	89900 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>
   8a054:	72001c1f 	tst	w0, #0xff
   8a058:	540000e0 	b.eq	8a074 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c4>  // b.none
   8a05c:	d2800f00 	mov	x0, #0x78                  	// #120
   8a060:	94007880 	bl	a8260 <operator new(unsigned long)>
   8a064:	aa1403e1 	mov	x1, x20
   8a068:	aa0003f4 	mov	x20, x0
   8a06c:	94001e11 	bl	918b0 <CUSBSerialPL2303Device::CUSBSerialPL2303Device(CUSBFunction*)>
   8a070:	17fffe6a 	b	89a18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
   8a074:	94002087 	bl	92290 <CUSBSerialFT231XDevice::GetDeviceIDTable()>
   8a078:	aa0003e1 	mov	x1, x0
   8a07c:	aa1303e0 	mov	x0, x19
   8a080:	97fffe20 	bl	89900 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>
   8a084:	72001c1f 	tst	w0, #0xff
   8a088:	54ffdc80 	b.eq	89c18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x268>  // b.none
   8a08c:	d2800f00 	mov	x0, #0x78                  	// #120
   8a090:	94007874 	bl	a8260 <operator new(unsigned long)>
   8a094:	aa1403e1 	mov	x1, x20
   8a098:	aa0003f4 	mov	x20, x0
   8a09c:	94002071 	bl	92260 <CUSBSerialFT231XDevice::CUSBSerialFT231XDevice(CUSBFunction*)>
   8a0a0:	17fffe5e 	b	89a18 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x68>
	...

000000000008a0b0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>:
   8a0b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a0b4:	910003fd 	mov	x29, sp
   8a0b8:	a90153f3 	stp	x19, x20, [sp, #16]
   8a0bc:	aa0003f3 	mov	x19, x0
   8a0c0:	aa0103e0 	mov	x0, x1
   8a0c4:	52800101 	mov	w1, #0x8                   	// #8
   8a0c8:	f9000260 	str	x0, [x19]
   8a0cc:	3900227f 	strb	wzr, [x19, #8]
   8a0d0:	b9000e7f 	str	wzr, [x19, #12]
   8a0d4:	3900427f 	strb	wzr, [x19, #16]
   8a0d8:	b9001661 	str	w1, [x19, #20]
   8a0dc:	b40001a0 	cbz	x0, 8a110 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x60>
   8a0e0:	97fff9e4 	bl	88870 <CUSBDevice::GetHost() const>
   8a0e4:	aa0003f4 	mov	x20, x0
   8a0e8:	d2800b00 	mov	x0, #0x58                  	// #88
   8a0ec:	9400785d 	bl	a8260 <operator new(unsigned long)>
   8a0f0:	aa1403e2 	mov	x2, x20
   8a0f4:	aa0003f4 	mov	x20, x0
   8a0f8:	f9400261 	ldr	x1, [x19]
   8a0fc:	97ffe7ad 	bl	83fb0 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, CXHCIDevice*)>
   8a100:	f9000e74 	str	x20, [x19, #24]
   8a104:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a108:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a10c:	d65f03c0 	ret
   8a110:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a114:	f0000120 	adrp	x0, b1000 <_etext+0x158>
   8a118:	91290021 	add	x1, x1, #0xa40
   8a11c:	91210000 	add	x0, x0, #0x840
   8a120:	52800482 	mov	w2, #0x24                  	// #36
   8a124:	94004f07 	bl	9dd40 <assertion_failed>
   8a128:	d503201f 	nop
   8a12c:	d503201f 	nop

000000000008a130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>:
   8a130:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8a134:	910003fd 	mov	x29, sp
   8a138:	a90153f3 	stp	x19, x20, [sp, #16]
   8a13c:	aa0003f3 	mov	x19, x0
   8a140:	f90013f5 	str	x21, [sp, #32]
   8a144:	f9000001 	str	x1, [x0]
   8a148:	b40007a1 	cbz	x1, 8a23c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x10c>
   8a14c:	aa0203f4 	mov	x20, x2
   8a150:	b4000822 	cbz	x2, 8a254 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x124>
   8a154:	aa0103e0 	mov	x0, x1
   8a158:	39400041 	ldrb	w1, [x2]
   8a15c:	7100183f 	cmp	w1, #0x6
   8a160:	54000869 	b.ls	8a26c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x13c>  // b.plast
   8a164:	39400441 	ldrb	w1, [x2, #1]
   8a168:	7100143f 	cmp	w1, #0x5
   8a16c:	540008c1 	b.ne	8a284 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x154>  // b.any
   8a170:	39400c41 	ldrb	w1, [x2, #3]
   8a174:	12000421 	and	w1, w1, #0x3
   8a178:	7100083f 	cmp	w1, #0x2
   8a17c:	540005c0 	b.eq	8a234 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x104>  // b.none
   8a180:	71000c3f 	cmp	w1, #0x3
   8a184:	54000540 	b.eq	8a22c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xfc>  // b.none
   8a188:	7100043f 	cmp	w1, #0x1
   8a18c:	540000e0 	b.eq	8a1a8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x78>  // b.none
   8a190:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a194:	90000140 	adrp	x0, b2000 <_etext+0x1158>
   8a198:	91290021 	add	x1, x1, #0xa40
   8a19c:	910ba000 	add	x0, x0, #0x2e8
   8a1a0:	52800902 	mov	w2, #0x48                  	// #72
   8a1a4:	94004ee7 	bl	9dd40 <assertion_failed>
   8a1a8:	52800062 	mov	w2, #0x3                   	// #3
   8a1ac:	39400a81 	ldrb	w1, [x20, #2]
   8a1b0:	b9000e62 	str	w2, [x19, #12]
   8a1b4:	93471c22 	sbfx	x2, x1, #7, #1
   8a1b8:	12000c21 	and	w1, w1, #0xf
   8a1bc:	12000042 	and	w2, w2, #0x1
   8a1c0:	39002261 	strb	w1, [x19, #8]
   8a1c4:	39004262 	strb	w2, [x19, #16]
   8a1c8:	39401282 	ldrb	w2, [x20, #4]
   8a1cc:	39401681 	ldrb	w1, [x20, #5]
   8a1d0:	aa012041 	orr	x1, x2, x1, lsl #8
   8a1d4:	12002821 	and	w1, w1, #0x7ff
   8a1d8:	b9001661 	str	w1, [x19, #20]
   8a1dc:	97fff985 	bl	887f0 <CUSBDevice::GetSpeed() const>
   8a1e0:	35000080 	cbnz	w0, 8a1f0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xc0>
   8a1e4:	b9400e60 	ldr	w0, [x19, #12]
   8a1e8:	7100041f 	cmp	w0, #0x1
   8a1ec:	54000580 	b.eq	8a29c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x16c>  // b.none
   8a1f0:	f9400260 	ldr	x0, [x19]
   8a1f4:	97fff99f 	bl	88870 <CUSBDevice::GetHost() const>
   8a1f8:	aa0003f5 	mov	x21, x0
   8a1fc:	d2800b00 	mov	x0, #0x58                  	// #88
   8a200:	94007818 	bl	a8260 <operator new(unsigned long)>
   8a204:	aa1503e3 	mov	x3, x21
   8a208:	aa1403e2 	mov	x2, x20
   8a20c:	f9400261 	ldr	x1, [x19]
   8a210:	aa0003f5 	mov	x21, x0
   8a214:	97ffeb9b 	bl	85080 <CXHCIEndpoint::CXHCIEndpoint(CXHCIUSBDevice*, TUSBEndpointDescriptor const*, CXHCIDevice*)>
   8a218:	f9000e75 	str	x21, [x19, #24]
   8a21c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a220:	f94013f5 	ldr	x21, [sp, #32]
   8a224:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a228:	d65f03c0 	ret
   8a22c:	52800042 	mov	w2, #0x2                   	// #2
   8a230:	17ffffdf 	b	8a1ac <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x7c>
   8a234:	52800022 	mov	w2, #0x1                   	// #1
   8a238:	17ffffdd 	b	8a1ac <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x7c>
   8a23c:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a240:	f0000120 	adrp	x0, b1000 <_etext+0x158>
   8a244:	91290021 	add	x1, x1, #0xa40
   8a248:	91210000 	add	x0, x0, #0x840
   8a24c:	52800662 	mov	w2, #0x33                  	// #51
   8a250:	94004ebc 	bl	9dd40 <assertion_failed>
   8a254:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a258:	f0000120 	adrp	x0, b1000 <_etext+0x158>
   8a25c:	91290021 	add	x1, x1, #0xa40
   8a260:	91254000 	add	x0, x0, #0x950
   8a264:	528006a2 	mov	w2, #0x35                  	// #53
   8a268:	94004eb6 	bl	9dd40 <assertion_failed>
   8a26c:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a270:	f0000120 	adrp	x0, b1000 <_etext+0x158>
   8a274:	91290021 	add	x1, x1, #0xa40
   8a278:	91258000 	add	x0, x0, #0x960
   8a27c:	528006c2 	mov	w2, #0x36                  	// #54
   8a280:	94004eb0 	bl	9dd40 <assertion_failed>
   8a284:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a288:	f0000120 	adrp	x0, b1000 <_etext+0x158>
   8a28c:	91290021 	add	x1, x1, #0xa40
   8a290:	91260000 	add	x0, x0, #0x980
   8a294:	528006e2 	mov	w2, #0x37                  	// #55
   8a298:	94004eaa 	bl	9dd40 <assertion_failed>
   8a29c:	940055dd 	bl	9fa10 <CLogger::Get()>
   8a2a0:	90000143 	adrp	x3, b2000 <_etext+0x1158>
   8a2a4:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a2a8:	9129e021 	add	x1, x1, #0xa78
   8a2ac:	91294063 	add	x3, x3, #0xa50
   8a2b0:	52800042 	mov	w2, #0x2                   	// #2
   8a2b4:	940057c3 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8a2b8:	b9401660 	ldr	w0, [x19, #20]
   8a2bc:	52800041 	mov	w1, #0x2                   	// #2
   8a2c0:	b9000e61 	str	w1, [x19, #12]
   8a2c4:	7100201f 	cmp	w0, #0x8
   8a2c8:	54fff949 	b.ls	8a1f0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xc0>  // b.plast
   8a2cc:	52800100 	mov	w0, #0x8                   	// #8
   8a2d0:	b9001660 	str	w0, [x19, #20]
   8a2d4:	17ffffc7 	b	8a1f0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xc0>
   8a2d8:	d503201f 	nop
   8a2dc:	d503201f 	nop

000000000008a2e0 <CUSBEndpoint::~CUSBEndpoint()>:
   8a2e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a2e4:	910003fd 	mov	x29, sp
   8a2e8:	f9000bf3 	str	x19, [sp, #16]
   8a2ec:	f9400c13 	ldr	x19, [x0, #24]
   8a2f0:	b4000113 	cbz	x19, 8a310 <CUSBEndpoint::~CUSBEndpoint()+0x30>
   8a2f4:	aa1303e0 	mov	x0, x19
   8a2f8:	97ffe75a 	bl	84060 <CXHCIEndpoint::~CXHCIEndpoint()>
   8a2fc:	aa1303e0 	mov	x0, x19
   8a300:	d2800b01 	mov	x1, #0x58                  	// #88
   8a304:	f9400bf3 	ldr	x19, [sp, #16]
   8a308:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a30c:	140077fd 	b	a8300 <operator delete(void*, unsigned long)>
   8a310:	f9400bf3 	ldr	x19, [sp, #16]
   8a314:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a318:	d65f03c0 	ret
   8a31c:	d503201f 	nop

000000000008a320 <CUSBEndpoint::GetDevice() const>:
   8a320:	f9400000 	ldr	x0, [x0]
   8a324:	b4000040 	cbz	x0, 8a32c <CUSBEndpoint::GetDevice() const+0xc>
   8a328:	d65f03c0 	ret
   8a32c:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a330:	f0000120 	adrp	x0, b1000 <_etext+0x158>
   8a334:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8a338:	91290021 	add	x1, x1, #0xa40
   8a33c:	910003fd 	mov	x29, sp
   8a340:	91210000 	add	x0, x0, #0x840
   8a344:	52801462 	mov	w2, #0xa3                  	// #163
   8a348:	94004e7e 	bl	9dd40 <assertion_failed>
   8a34c:	d503201f 	nop

000000000008a350 <CUSBEndpoint::GetNumber() const>:
   8a350:	39402000 	ldrb	w0, [x0, #8]
   8a354:	d65f03c0 	ret
   8a358:	d503201f 	nop
   8a35c:	d503201f 	nop

000000000008a360 <CUSBEndpoint::GetType() const>:
   8a360:	b9400c00 	ldr	w0, [x0, #12]
   8a364:	d65f03c0 	ret
   8a368:	d503201f 	nop
   8a36c:	d503201f 	nop

000000000008a370 <CUSBEndpoint::IsDirectionIn() const>:
   8a370:	39404000 	ldrb	w0, [x0, #16]
   8a374:	d65f03c0 	ret
   8a378:	d503201f 	nop
   8a37c:	d503201f 	nop

000000000008a380 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>:
   8a380:	aa0003e2 	mov	x2, x0
   8a384:	f9400c00 	ldr	x0, [x0, #24]
   8a388:	b9001441 	str	w1, [x2, #20]
   8a38c:	b4000040 	cbz	x0, 8a394 <CUSBEndpoint::SetMaxPacketSize(unsigned int)+0x14>
   8a390:	17ffea60 	b	84d10 <CXHCIEndpoint::SetMaxPacketSize(unsigned int)>
   8a394:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a398:	90000140 	adrp	x0, b2000 <_etext+0x1158>
   8a39c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8a3a0:	91290021 	add	x1, x1, #0xa40
   8a3a4:	910003fd 	mov	x29, sp
   8a3a8:	912a0000 	add	x0, x0, #0xa80
   8a3ac:	52801762 	mov	w2, #0xbb                  	// #187
   8a3b0:	94004e64 	bl	9dd40 <assertion_failed>
   8a3b4:	d503201f 	nop
   8a3b8:	d503201f 	nop
   8a3bc:	d503201f 	nop

000000000008a3c0 <CUSBEndpoint::GetMaxPacketSize() const>:
   8a3c0:	b9401400 	ldr	w0, [x0, #20]
   8a3c4:	d65f03c0 	ret
   8a3c8:	d503201f 	nop
   8a3cc:	d503201f 	nop

000000000008a3d0 <CUSBEndpoint::ResetPID()>:
   8a3d0:	d65f03c0 	ret
   8a3d4:	d503201f 	nop
   8a3d8:	d503201f 	nop
   8a3dc:	d503201f 	nop

000000000008a3e0 <CUSBEndpoint::GetXHCIEndpoint()>:
   8a3e0:	f9400c00 	ldr	x0, [x0, #24]
   8a3e4:	b4000040 	cbz	x0, 8a3ec <CUSBEndpoint::GetXHCIEndpoint()+0xc>
   8a3e8:	d65f03c0 	ret
   8a3ec:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a3f0:	90000140 	adrp	x0, b2000 <_etext+0x1158>
   8a3f4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8a3f8:	91290021 	add	x1, x1, #0xa40
   8a3fc:	910003fd 	mov	x29, sp
   8a400:	912a0000 	add	x0, x0, #0xa80
   8a404:	52802302 	mov	w2, #0x118                 	// #280
   8a408:	94004e4e 	bl	9dd40 <assertion_failed>
   8a40c:	00000000 	udf	#0

000000000008a410 <CUSBFunction::Initialize()>:
   8a410:	52800020 	mov	w0, #0x1                   	// #1
   8a414:	d65f03c0 	ret
   8a418:	d503201f 	nop
   8a41c:	d503201f 	nop

000000000008a420 <CUSBFunction::ReScanDevices()>:
   8a420:	52800000 	mov	w0, #0x0                   	// #0
   8a424:	d65f03c0 	ret
   8a428:	d503201f 	nop
   8a42c:	d503201f 	nop

000000000008a430 <CUSBFunction::~CUSBFunction()>:
   8a430:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a434:	90000161 	adrp	x1, b6000 <From+0x98>
   8a438:	910d6021 	add	x1, x1, #0x358
   8a43c:	910003fd 	mov	x29, sp
   8a440:	a90153f3 	stp	x19, x20, [sp, #16]
   8a444:	aa0003f3 	mov	x19, x0
   8a448:	f9000001 	str	x1, [x0]
   8a44c:	f900101f 	str	xzr, [x0, #32]
   8a450:	f9400c14 	ldr	x20, [x0, #24]
   8a454:	b40000d4 	cbz	x20, 8a46c <CUSBFunction::~CUSBFunction()+0x3c>
   8a458:	aa1403e0 	mov	x0, x20
   8a45c:	94004081 	bl	9a660 <CUSBConfigurationParser::~CUSBConfigurationParser()>
   8a460:	aa1403e0 	mov	x0, x20
   8a464:	d2800601 	mov	x1, #0x30                  	// #48
   8a468:	940077a6 	bl	a8300 <operator delete(void*, unsigned long)>
   8a46c:	aa1303e0 	mov	x0, x19
   8a470:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   8a474:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a478:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a47c:	14005081 	b	9e680 <CDevice::~CDevice()>

000000000008a480 <CUSBFunction::RemoveDevice()>:
   8a480:	f9400800 	ldr	x0, [x0, #16]
   8a484:	b4000040 	cbz	x0, 8a48c <CUSBFunction::RemoveDevice()+0xc>
   8a488:	17fff81e 	b	88500 <CUSBDevice::RemoveDevice()>
   8a48c:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a490:	f0000120 	adrp	x0, b1000 <_etext+0x158>
   8a494:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8a498:	912a6021 	add	x1, x1, #0xa98
   8a49c:	910003fd 	mov	x29, sp
   8a4a0:	91210000 	add	x0, x0, #0x840
   8a4a4:	52800cc2 	mov	w2, #0x66                  	// #102
   8a4a8:	94004e26 	bl	9dd40 <assertion_failed>
   8a4ac:	d503201f 	nop

000000000008a4b0 <CUSBFunction::~CUSBFunction()>:
   8a4b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a4b4:	90000161 	adrp	x1, b6000 <From+0x98>
   8a4b8:	910d6021 	add	x1, x1, #0x358
   8a4bc:	910003fd 	mov	x29, sp
   8a4c0:	a90153f3 	stp	x19, x20, [sp, #16]
   8a4c4:	aa0003f3 	mov	x19, x0
   8a4c8:	f9000001 	str	x1, [x0]
   8a4cc:	f900101f 	str	xzr, [x0, #32]
   8a4d0:	f9400c14 	ldr	x20, [x0, #24]
   8a4d4:	b40000d4 	cbz	x20, 8a4ec <CUSBFunction::~CUSBFunction()+0x3c>
   8a4d8:	aa1403e0 	mov	x0, x20
   8a4dc:	94004061 	bl	9a660 <CUSBConfigurationParser::~CUSBConfigurationParser()>
   8a4e0:	aa1403e0 	mov	x0, x20
   8a4e4:	d2800601 	mov	x1, #0x30                  	// #48
   8a4e8:	94007786 	bl	a8300 <operator delete(void*, unsigned long)>
   8a4ec:	aa1303e0 	mov	x0, x19
   8a4f0:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   8a4f4:	94005063 	bl	9e680 <CDevice::~CDevice()>
   8a4f8:	aa1303e0 	mov	x0, x19
   8a4fc:	d2800501 	mov	x1, #0x28                  	// #40
   8a500:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a504:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a508:	1400777e 	b	a8300 <operator delete(void*, unsigned long)>
   8a50c:	d503201f 	nop

000000000008a510 <CUSBFunction::Configure()>:
   8a510:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a514:	910003fd 	mov	x29, sp
   8a518:	a90153f3 	stp	x19, x20, [sp, #16]
   8a51c:	aa0003f3 	mov	x19, x0
   8a520:	f9401000 	ldr	x0, [x0, #32]
   8a524:	b4000460 	cbz	x0, 8a5b0 <CUSBFunction::Configure()+0xa0>
   8a528:	39400c00 	ldrb	w0, [x0, #3]
   8a52c:	350000a0 	cbnz	w0, 8a540 <CUSBFunction::Configure()+0x30>
   8a530:	52800020 	mov	w0, #0x1                   	// #1
   8a534:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a538:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a53c:	d65f03c0 	ret
   8a540:	f9400a60 	ldr	x0, [x19, #16]
   8a544:	b4000420 	cbz	x0, 8a5c8 <CUSBFunction::Configure()+0xb8>
   8a548:	97fff8ca 	bl	88870 <CUSBDevice::GetHost() const>
   8a54c:	f9400a61 	ldr	x1, [x19, #16]
   8a550:	aa0003f4 	mov	x20, x0
   8a554:	b4000461 	cbz	x1, 8a5e0 <CUSBFunction::Configure()+0xd0>
   8a558:	aa0103e0 	mov	x0, x1
   8a55c:	97fff8b9 	bl	88840 <CUSBDevice::GetEndpoint0() const>
   8a560:	f9401264 	ldr	x4, [x19, #32]
   8a564:	aa0003e1 	mov	x1, x0
   8a568:	52800007 	mov	w7, #0x0                   	// #0
   8a56c:	aa1403e0 	mov	x0, x20
   8a570:	d2800006 	mov	x6, #0x0                   	// #0
   8a574:	52800163 	mov	w3, #0xb                   	// #11
   8a578:	52800022 	mov	w2, #0x1                   	// #1
   8a57c:	39400885 	ldrb	w5, [x4, #2]
   8a580:	39400c84 	ldrb	w4, [x4, #3]
   8a584:	97ffdaa3 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8a588:	36fffd40 	tbz	w0, #31, 8a530 <CUSBFunction::Configure()+0x20>
   8a58c:	94005521 	bl	9fa10 <CLogger::Get()>
   8a590:	f0000123 	adrp	x3, b1000 <_etext+0x158>
   8a594:	90000161 	adrp	x1, b6000 <From+0x98>
   8a598:	9112c063 	add	x3, x3, #0x4b0
   8a59c:	910ee021 	add	x1, x1, #0x3b8
   8a5a0:	52800022 	mov	w2, #0x1                   	// #1
   8a5a4:	94005707 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8a5a8:	52800000 	mov	w0, #0x0                   	// #0
   8a5ac:	17ffffe2 	b	8a534 <CUSBFunction::Configure()+0x24>
   8a5b0:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a5b4:	90000140 	adrp	x0, b2000 <_etext+0x1158>
   8a5b8:	912a6021 	add	x1, x1, #0xa98
   8a5bc:	912aa000 	add	x0, x0, #0xaa8
   8a5c0:	528009c2 	mov	w2, #0x4e                  	// #78
   8a5c4:	94004ddf 	bl	9dd40 <assertion_failed>
   8a5c8:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a5cc:	f0000120 	adrp	x0, b1000 <_etext+0x158>
   8a5d0:	912a6021 	add	x1, x1, #0xa98
   8a5d4:	91210000 	add	x0, x0, #0x840
   8a5d8:	52801202 	mov	w2, #0x90                  	// #144
   8a5dc:	94004dd9 	bl	9dd40 <assertion_failed>
   8a5e0:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a5e4:	f0000120 	adrp	x0, b1000 <_etext+0x158>
   8a5e8:	912a6021 	add	x1, x1, #0xa98
   8a5ec:	91210000 	add	x0, x0, #0x840
   8a5f0:	52801142 	mov	w2, #0x8a                  	// #138
   8a5f4:	94004dd3 	bl	9dd40 <assertion_failed>
   8a5f8:	d503201f 	nop
   8a5fc:	d503201f 	nop

000000000008a600 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>:
   8a600:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8a604:	910003fd 	mov	x29, sp
   8a608:	a90153f3 	stp	x19, x20, [sp, #16]
   8a60c:	aa0003f3 	mov	x19, x0
   8a610:	aa0103f4 	mov	x20, x1
   8a614:	f90013f5 	str	x21, [sp, #32]
   8a618:	aa0203f5 	mov	x21, x2
   8a61c:	9400504d 	bl	9e750 <CDevice::CDevice()>
   8a620:	90000160 	adrp	x0, b6000 <From+0x98>
   8a624:	910d6000 	add	x0, x0, #0x358
   8a628:	a9017e74 	stp	x20, xzr, [x19, #16]
   8a62c:	f9000260 	str	x0, [x19]
   8a630:	f900127f 	str	xzr, [x19, #32]
   8a634:	b4000214 	cbz	x20, 8a674 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x74>
   8a638:	b40002b5 	cbz	x21, 8a68c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x8c>
   8a63c:	d2800600 	mov	x0, #0x30                  	// #48
   8a640:	94007708 	bl	a8260 <operator new(unsigned long)>
   8a644:	aa0003f4 	mov	x20, x0
   8a648:	aa1503e1 	mov	x1, x21
   8a64c:	94003fed 	bl	9a600 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   8a650:	aa1403e0 	mov	x0, x20
   8a654:	f9000e74 	str	x20, [x19, #24]
   8a658:	9400403a 	bl	9a740 <CUSBConfigurationParser::GetCurrentDescriptor()>
   8a65c:	f9001260 	str	x0, [x19, #32]
   8a660:	b4000220 	cbz	x0, 8a6a4 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa4>
   8a664:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a668:	f94013f5 	ldr	x21, [sp, #32]
   8a66c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a670:	d65f03c0 	ret
   8a674:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a678:	f0000120 	adrp	x0, b1000 <_etext+0x158>
   8a67c:	912a6021 	add	x1, x1, #0xa98
   8a680:	91210000 	add	x0, x0, #0x840
   8a684:	52800442 	mov	w2, #0x22                  	// #34
   8a688:	94004dae 	bl	9dd40 <assertion_failed>
   8a68c:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a690:	90000140 	adrp	x0, b2000 <_etext+0x1158>
   8a694:	912a6021 	add	x1, x1, #0xa98
   8a698:	912b0000 	add	x0, x0, #0xac0
   8a69c:	52800482 	mov	w2, #0x24                  	// #36
   8a6a0:	94004da8 	bl	9dd40 <assertion_failed>
   8a6a4:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a6a8:	90000140 	adrp	x0, b2000 <_etext+0x1158>
   8a6ac:	912a6021 	add	x1, x1, #0xa98
   8a6b0:	912aa000 	add	x0, x0, #0xaa8
   8a6b4:	52800522 	mov	w2, #0x29                  	// #41
   8a6b8:	94004da2 	bl	9dd40 <assertion_failed>
   8a6bc:	d503201f 	nop

000000000008a6c0 <CUSBFunction::CUSBFunction(CUSBFunction*)>:
   8a6c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a6c4:	910003fd 	mov	x29, sp
   8a6c8:	a90153f3 	stp	x19, x20, [sp, #16]
   8a6cc:	aa0003f3 	mov	x19, x0
   8a6d0:	aa0103f4 	mov	x20, x1
   8a6d4:	9400501f 	bl	9e750 <CDevice::CDevice()>
   8a6d8:	90000160 	adrp	x0, b6000 <From+0x98>
   8a6dc:	910d6000 	add	x0, x0, #0x358
   8a6e0:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   8a6e4:	f9000260 	str	x0, [x19]
   8a6e8:	f900127f 	str	xzr, [x19, #32]
   8a6ec:	b4000274 	cbz	x20, 8a738 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x78>
   8a6f0:	f9400a80 	ldr	x0, [x20, #16]
   8a6f4:	f9000a60 	str	x0, [x19, #16]
   8a6f8:	b40002c0 	cbz	x0, 8a750 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x90>
   8a6fc:	f9400e80 	ldr	x0, [x20, #24]
   8a700:	b4000340 	cbz	x0, 8a768 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xa8>
   8a704:	d2800600 	mov	x0, #0x30                  	// #48
   8a708:	940076d6 	bl	a8260 <operator new(unsigned long)>
   8a70c:	f9400e81 	ldr	x1, [x20, #24]
   8a710:	aa0003f4 	mov	x20, x0
   8a714:	94003fbb 	bl	9a600 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   8a718:	aa1403e0 	mov	x0, x20
   8a71c:	f9000e74 	str	x20, [x19, #24]
   8a720:	94004008 	bl	9a740 <CUSBConfigurationParser::GetCurrentDescriptor()>
   8a724:	f9001260 	str	x0, [x19, #32]
   8a728:	b40002c0 	cbz	x0, 8a780 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xc0>
   8a72c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a730:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a734:	d65f03c0 	ret
   8a738:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a73c:	90000140 	adrp	x0, b2000 <_etext+0x1158>
   8a740:	912a6021 	add	x1, x1, #0xa98
   8a744:	912b6000 	add	x0, x0, #0xad8
   8a748:	52800622 	mov	w2, #0x31                  	// #49
   8a74c:	94004d7d 	bl	9dd40 <assertion_failed>
   8a750:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a754:	f0000120 	adrp	x0, b1000 <_etext+0x158>
   8a758:	912a6021 	add	x1, x1, #0xa98
   8a75c:	91210000 	add	x0, x0, #0x840
   8a760:	52800662 	mov	w2, #0x33                  	// #51
   8a764:	94004d77 	bl	9dd40 <assertion_failed>
   8a768:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a76c:	90000140 	adrp	x0, b2000 <_etext+0x1158>
   8a770:	912a6021 	add	x1, x1, #0xa98
   8a774:	912ba000 	add	x0, x0, #0xae8
   8a778:	528006a2 	mov	w2, #0x35                  	// #53
   8a77c:	94004d71 	bl	9dd40 <assertion_failed>
   8a780:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a784:	90000140 	adrp	x0, b2000 <_etext+0x1158>
   8a788:	912a6021 	add	x1, x1, #0xa98
   8a78c:	912aa000 	add	x0, x0, #0xaa8
   8a790:	52800742 	mov	w2, #0x3a                  	// #58
   8a794:	94004d6b 	bl	9dd40 <assertion_failed>
   8a798:	d503201f 	nop
   8a79c:	d503201f 	nop

000000000008a7a0 <CUSBFunction::GetInterfaceName() const>:
   8a7a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a7a4:	910003fd 	mov	x29, sp
   8a7a8:	a90153f3 	stp	x19, x20, [sp, #16]
   8a7ac:	aa0003f4 	mov	x20, x0
   8a7b0:	d2800400 	mov	x0, #0x20                  	// #32
   8a7b4:	940076ab 	bl	a8260 <operator new(unsigned long)>
   8a7b8:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a7bc:	910d6021 	add	x1, x1, #0x358
   8a7c0:	aa0003f3 	mov	x19, x0
   8a7c4:	940067ab 	bl	a4670 <CString::CString(char const*)>
   8a7c8:	f9401283 	ldr	x3, [x20, #32]
   8a7cc:	b40000c3 	cbz	x3, 8a7e4 <CUSBFunction::GetInterfaceName() const+0x44>
   8a7d0:	39401462 	ldrb	w2, [x3, #5]
   8a7d4:	51000440 	sub	w0, w2, #0x1
   8a7d8:	12001c00 	and	w0, w0, #0xff
   8a7dc:	7103f41f 	cmp	w0, #0xfd
   8a7e0:	540000a9 	b.ls	8a7f4 <CUSBFunction::GetInterfaceName() const+0x54>  // b.plast
   8a7e4:	aa1303e0 	mov	x0, x19
   8a7e8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a7ec:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a7f0:	d65f03c0 	ret
   8a7f4:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a7f8:	39401c64 	ldrb	w4, [x3, #7]
   8a7fc:	aa1303e0 	mov	x0, x19
   8a800:	912c2021 	add	x1, x1, #0xb08
   8a804:	39401863 	ldrb	w3, [x3, #6]
   8a808:	94006dca 	bl	a5f30 <CString::Format(char const*, ...)>
   8a80c:	aa1303e0 	mov	x0, x19
   8a810:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a814:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a818:	d65f03c0 	ret
   8a81c:	d503201f 	nop

000000000008a820 <CUSBFunction::GetNumEndpoints() const>:
   8a820:	f9401000 	ldr	x0, [x0, #32]
   8a824:	b4000060 	cbz	x0, 8a830 <CUSBFunction::GetNumEndpoints() const+0x10>
   8a828:	39401000 	ldrb	w0, [x0, #4]
   8a82c:	d65f03c0 	ret
   8a830:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a834:	90000140 	adrp	x0, b2000 <_etext+0x1158>
   8a838:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8a83c:	912a6021 	add	x1, x1, #0xa98
   8a840:	910003fd 	mov	x29, sp
   8a844:	912aa000 	add	x0, x0, #0xaa8
   8a848:	52800fc2 	mov	w2, #0x7e                  	// #126
   8a84c:	94004d3d 	bl	9dd40 <assertion_failed>

000000000008a850 <CUSBFunction::GetDevice() const>:
   8a850:	f9400800 	ldr	x0, [x0, #16]
   8a854:	b4000040 	cbz	x0, 8a85c <CUSBFunction::GetDevice() const+0xc>
   8a858:	d65f03c0 	ret
   8a85c:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a860:	f0000120 	adrp	x0, b1000 <_etext+0x158>
   8a864:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8a868:	912a6021 	add	x1, x1, #0xa98
   8a86c:	910003fd 	mov	x29, sp
   8a870:	91210000 	add	x0, x0, #0x840
   8a874:	52801082 	mov	w2, #0x84                  	// #132
   8a878:	94004d32 	bl	9dd40 <assertion_failed>
   8a87c:	d503201f 	nop

000000000008a880 <CUSBFunction::GetEndpoint0() const>:
   8a880:	f9400800 	ldr	x0, [x0, #16]
   8a884:	b4000040 	cbz	x0, 8a88c <CUSBFunction::GetEndpoint0() const+0xc>
   8a888:	17fff7ee 	b	88840 <CUSBDevice::GetEndpoint0() const>
   8a88c:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a890:	f0000120 	adrp	x0, b1000 <_etext+0x158>
   8a894:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8a898:	912a6021 	add	x1, x1, #0xa98
   8a89c:	910003fd 	mov	x29, sp
   8a8a0:	91210000 	add	x0, x0, #0x840
   8a8a4:	52801142 	mov	w2, #0x8a                  	// #138
   8a8a8:	94004d26 	bl	9dd40 <assertion_failed>
   8a8ac:	d503201f 	nop

000000000008a8b0 <CUSBFunction::GetHost() const>:
   8a8b0:	f9400800 	ldr	x0, [x0, #16]
   8a8b4:	b4000040 	cbz	x0, 8a8bc <CUSBFunction::GetHost() const+0xc>
   8a8b8:	17fff7ee 	b	88870 <CUSBDevice::GetHost() const>
   8a8bc:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a8c0:	f0000120 	adrp	x0, b1000 <_etext+0x158>
   8a8c4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8a8c8:	912a6021 	add	x1, x1, #0xa98
   8a8cc:	910003fd 	mov	x29, sp
   8a8d0:	91210000 	add	x0, x0, #0x840
   8a8d4:	52801202 	mov	w2, #0x90                  	// #144
   8a8d8:	94004d1a 	bl	9dd40 <assertion_failed>
   8a8dc:	d503201f 	nop

000000000008a8e0 <CUSBFunction::GetDescriptor(unsigned char)>:
   8a8e0:	f9400c00 	ldr	x0, [x0, #24]
   8a8e4:	b4000060 	cbz	x0, 8a8f0 <CUSBFunction::GetDescriptor(unsigned char)+0x10>
   8a8e8:	12001c21 	and	w1, w1, #0xff
   8a8ec:	14003f65 	b	9a680 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   8a8f0:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a8f4:	90000140 	adrp	x0, b2000 <_etext+0x1158>
   8a8f8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8a8fc:	912a6021 	add	x1, x1, #0xa98
   8a900:	910003fd 	mov	x29, sp
   8a904:	910f0000 	add	x0, x0, #0x3c0
   8a908:	528012c2 	mov	w2, #0x96                  	// #150
   8a90c:	94004d0d 	bl	9dd40 <assertion_failed>

000000000008a910 <CUSBFunction::ConfigurationError(char const*) const>:
   8a910:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8a914:	910003fd 	mov	x29, sp
   8a918:	f9400c00 	ldr	x0, [x0, #24]
   8a91c:	b4000080 	cbz	x0, 8a92c <CUSBFunction::ConfigurationError(char const*) const+0x1c>
   8a920:	b4000121 	cbz	x1, 8a944 <CUSBFunction::ConfigurationError(char const*) const+0x34>
   8a924:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8a928:	14003f9a 	b	9a790 <CUSBConfigurationParser::Error(char const*) const>
   8a92c:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a930:	90000140 	adrp	x0, b2000 <_etext+0x1158>
   8a934:	912a6021 	add	x1, x1, #0xa98
   8a938:	910f0000 	add	x0, x0, #0x3c0
   8a93c:	52801382 	mov	w2, #0x9c                  	// #156
   8a940:	94004d00 	bl	9dd40 <assertion_failed>
   8a944:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8a948:	90000140 	adrp	x0, b2000 <_etext+0x1158>
   8a94c:	912a6021 	add	x1, x1, #0xa98
   8a950:	912c6000 	add	x0, x0, #0xb18
   8a954:	528013a2 	mov	w2, #0x9d                  	// #157
   8a958:	94004cfa 	bl	9dd40 <assertion_failed>
   8a95c:	d503201f 	nop

000000000008a960 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char, unsigned int)>:
   8a960:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8a964:	910003fd 	mov	x29, sp
   8a968:	a90153f3 	stp	x19, x20, [sp, #16]
   8a96c:	aa0003f3 	mov	x19, x0
   8a970:	a9025bf5 	stp	x21, x22, [sp, #32]
   8a974:	f9401000 	ldr	x0, [x0, #32]
   8a978:	f9001bf7 	str	x23, [sp, #48]
   8a97c:	b4000480 	cbz	x0, 8aa0c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char, unsigned int)+0xac>
   8a980:	12001c34 	and	w20, w1, #0xff
   8a984:	f9400e61 	ldr	x1, [x19, #24]
   8a988:	b40004e1 	cbz	x1, 8aa24 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char, unsigned int)+0xc4>
   8a98c:	f9400a61 	ldr	x1, [x19, #16]
   8a990:	2a0403f7 	mov	w23, w4
   8a994:	12001c55 	and	w21, w2, #0xff
   8a998:	12001c76 	and	w22, w3, #0xff
   8a99c:	b5000141 	cbnz	x1, 8a9c4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char, unsigned int)+0x64>
   8a9a0:	14000027 	b	8aa3c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char, unsigned int)+0xdc>
   8a9a4:	52800081 	mov	w1, #0x4                   	// #4
   8a9a8:	f9400a60 	ldr	x0, [x19, #16]
   8a9ac:	97fff7d5 	bl	88900 <CUSBDevice::GetDescriptor(unsigned char)>
   8a9b0:	52800081 	mov	w1, #0x4                   	// #4
   8a9b4:	f9400e60 	ldr	x0, [x19, #24]
   8a9b8:	94003f32 	bl	9a680 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   8a9bc:	f9001260 	str	x0, [x19, #32]
   8a9c0:	b40001c0 	cbz	x0, 8a9f8 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char, unsigned int)+0x98>
   8a9c4:	39401401 	ldrb	w1, [x0, #5]
   8a9c8:	6b14003f 	cmp	w1, w20
   8a9cc:	54fffec1 	b.ne	8a9a4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char, unsigned int)+0x44>  // b.any
   8a9d0:	39401801 	ldrb	w1, [x0, #6]
   8a9d4:	6b15003f 	cmp	w1, w21
   8a9d8:	54fffe61 	b.ne	8a9a4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char, unsigned int)+0x44>  // b.any
   8a9dc:	39401c01 	ldrb	w1, [x0, #7]
   8a9e0:	6b16003f 	cmp	w1, w22
   8a9e4:	54fffe01 	b.ne	8a9a4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char, unsigned int)+0x44>  // b.any
   8a9e8:	39401000 	ldrb	w0, [x0, #4]
   8a9ec:	6b17001f 	cmp	w0, w23
   8a9f0:	54fffda3 	b.cc	8a9a4 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char, unsigned int)+0x44>  // b.lo, b.ul, b.last
   8a9f4:	52800020 	mov	w0, #0x1                   	// #1
   8a9f8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a9fc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8aa00:	f9401bf7 	ldr	x23, [sp, #48]
   8aa04:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8aa08:	d65f03c0 	ret
   8aa0c:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8aa10:	90000140 	adrp	x0, b2000 <_etext+0x1158>
   8aa14:	912a6021 	add	x1, x1, #0xa98
   8aa18:	912aa000 	add	x0, x0, #0xaa8
   8aa1c:	52801482 	mov	w2, #0xa4                  	// #164
   8aa20:	94004cc8 	bl	9dd40 <assertion_failed>
   8aa24:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8aa28:	90000140 	adrp	x0, b2000 <_etext+0x1158>
   8aa2c:	912a6021 	add	x1, x1, #0xa98
   8aa30:	910f0000 	add	x0, x0, #0x3c0
   8aa34:	528014a2 	mov	w2, #0xa5                  	// #165
   8aa38:	94004cc2 	bl	9dd40 <assertion_failed>
   8aa3c:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8aa40:	f0000120 	adrp	x0, b1000 <_etext+0x158>
   8aa44:	912a6021 	add	x1, x1, #0xa98
   8aa48:	91210000 	add	x0, x0, #0x840
   8aa4c:	528014c2 	mov	w2, #0xa6                  	// #166
   8aa50:	94004cbc 	bl	9dd40 <assertion_failed>
   8aa54:	d503201f 	nop
   8aa58:	d503201f 	nop
   8aa5c:	d503201f 	nop

000000000008aa60 <CUSBFunction::GetInterfaceNumber() const>:
   8aa60:	f9401000 	ldr	x0, [x0, #32]
   8aa64:	b4000060 	cbz	x0, 8aa70 <CUSBFunction::GetInterfaceNumber() const+0x10>
   8aa68:	39400800 	ldrb	w0, [x0, #2]
   8aa6c:	d65f03c0 	ret
   8aa70:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8aa74:	90000140 	adrp	x0, b2000 <_etext+0x1158>
   8aa78:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8aa7c:	912a6021 	add	x1, x1, #0xa98
   8aa80:	910003fd 	mov	x29, sp
   8aa84:	912aa000 	add	x0, x0, #0xaa8
   8aa88:	528017a2 	mov	w2, #0xbd                  	// #189
   8aa8c:	94004cad 	bl	9dd40 <assertion_failed>

000000000008aa90 <CUSBFunction::GetInterfaceClass() const>:
   8aa90:	f9401000 	ldr	x0, [x0, #32]
   8aa94:	b4000060 	cbz	x0, 8aaa0 <CUSBFunction::GetInterfaceClass() const+0x10>
   8aa98:	39401400 	ldrb	w0, [x0, #5]
   8aa9c:	d65f03c0 	ret
   8aaa0:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8aaa4:	90000140 	adrp	x0, b2000 <_etext+0x1158>
   8aaa8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8aaac:	912a6021 	add	x1, x1, #0xa98
   8aab0:	910003fd 	mov	x29, sp
   8aab4:	912aa000 	add	x0, x0, #0xaa8
   8aab8:	52801862 	mov	w2, #0xc3                  	// #195
   8aabc:	94004ca1 	bl	9dd40 <assertion_failed>

000000000008aac0 <CUSBFunction::GetInterfaceSubClass() const>:
   8aac0:	f9401000 	ldr	x0, [x0, #32]
   8aac4:	b4000060 	cbz	x0, 8aad0 <CUSBFunction::GetInterfaceSubClass() const+0x10>
   8aac8:	39401800 	ldrb	w0, [x0, #6]
   8aacc:	d65f03c0 	ret
   8aad0:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8aad4:	90000140 	adrp	x0, b2000 <_etext+0x1158>
   8aad8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8aadc:	912a6021 	add	x1, x1, #0xa98
   8aae0:	910003fd 	mov	x29, sp
   8aae4:	912aa000 	add	x0, x0, #0xaa8
   8aae8:	52801922 	mov	w2, #0xc9                  	// #201
   8aaec:	94004c95 	bl	9dd40 <assertion_failed>

000000000008aaf0 <CUSBFunction::GetInterfaceProtocol() const>:
   8aaf0:	f9401000 	ldr	x0, [x0, #32]
   8aaf4:	b4000060 	cbz	x0, 8ab00 <CUSBFunction::GetInterfaceProtocol() const+0x10>
   8aaf8:	39401c00 	ldrb	w0, [x0, #7]
   8aafc:	d65f03c0 	ret
   8ab00:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8ab04:	90000140 	adrp	x0, b2000 <_etext+0x1158>
   8ab08:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8ab0c:	912a6021 	add	x1, x1, #0xa98
   8ab10:	910003fd 	mov	x29, sp
   8ab14:	912aa000 	add	x0, x0, #0xaa8
   8ab18:	528019e2 	mov	w2, #0xcf                  	// #207
   8ab1c:	94004c89 	bl	9dd40 <assertion_failed>

000000000008ab20 <CUSBFunction::GetInterfaceDescriptor() const>:
   8ab20:	f9401000 	ldr	x0, [x0, #32]
   8ab24:	b4000040 	cbz	x0, 8ab2c <CUSBFunction::GetInterfaceDescriptor() const+0xc>
   8ab28:	d65f03c0 	ret
   8ab2c:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8ab30:	90000140 	adrp	x0, b2000 <_etext+0x1158>
   8ab34:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8ab38:	912a6021 	add	x1, x1, #0xa98
   8ab3c:	910003fd 	mov	x29, sp
   8ab40:	912aa000 	add	x0, x0, #0xaa8
   8ab44:	52801aa2 	mov	w2, #0xd5                  	// #213
   8ab48:	94004c7e 	bl	9dd40 <assertion_failed>
   8ab4c:	00000000 	udf	#0

000000000008ab50 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
   8ab50:	90000161 	adrp	x1, b6000 <From+0x98>
   8ab54:	910f4021 	add	x1, x1, #0x3d0
   8ab58:	f9000001 	str	x1, [x0]
   8ab5c:	14000445 	b	8bc70 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>

000000000008ab60 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
   8ab60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8ab64:	90000161 	adrp	x1, b6000 <From+0x98>
   8ab68:	910f4021 	add	x1, x1, #0x3d0
   8ab6c:	910003fd 	mov	x29, sp
   8ab70:	f9000bf3 	str	x19, [sp, #16]
   8ab74:	aa0003f3 	mov	x19, x0
   8ab78:	f9000001 	str	x1, [x0]
   8ab7c:	9400043d 	bl	8bc70 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   8ab80:	aa1303e0 	mov	x0, x19
   8ab84:	d2803801 	mov	x1, #0x1c0                 	// #448
   8ab88:	f9400bf3 	ldr	x19, [sp, #16]
   8ab8c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8ab90:	140075dc 	b	a8300 <operator delete(void*, unsigned long)>
   8ab94:	d503201f 	nop
   8ab98:	d503201f 	nop
   8ab9c:	d503201f 	nop

000000000008aba0 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)>:
   8aba0:	93407c22 	sxtw	x2, w1
   8aba4:	f100285f 	cmp	x2, #0xa
   8aba8:	54000069 	b.ls	8abb4 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x14>  // b.plast
   8abac:	52800000 	mov	w0, #0x0                   	// #0
   8abb0:	d65f03c0 	ret
   8abb4:	90000162 	adrp	x2, b6000 <From+0x98>
   8abb8:	9111c042 	add	x2, x2, #0x470
   8abbc:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8abc0:	910003fd 	mov	x29, sp
   8abc4:	3861c841 	ldrb	w1, [x2, w1, sxtw]
   8abc8:	a90153f3 	stp	x19, x20, [sp, #16]
   8abcc:	aa0003f3 	mov	x19, x0
   8abd0:	f90013f5 	str	x21, [sp, #32]
   8abd4:	531f1821 	ubfiz	w1, w1, #1, #7
   8abd8:	39062401 	strb	w1, [x0, #393]
   8abdc:	97ffff35 	bl	8a8b0 <CUSBFunction::GetHost() const>
   8abe0:	aa0003f4 	mov	x20, x0
   8abe4:	aa1303e0 	mov	x0, x19
   8abe8:	97ffff26 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   8abec:	aa0003f5 	mov	x21, x0
   8abf0:	aa1303e0 	mov	x0, x19
   8abf4:	97ffff9b 	bl	8aa60 <CUSBFunction::GetInterfaceNumber() const>
   8abf8:	12001c05 	and	w5, w0, #0xff
   8abfc:	aa1503e1 	mov	x1, x21
   8ac00:	91060266 	add	x6, x19, #0x180
   8ac04:	aa1403e0 	mov	x0, x20
   8ac08:	52800607 	mov	w7, #0x30                  	// #48
   8ac0c:	52804024 	mov	w4, #0x201                 	// #513
   8ac10:	52800123 	mov	w3, #0x9                   	// #9
   8ac14:	52800422 	mov	w2, #0x21                  	// #33
   8ac18:	97ffd8fe 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8ac1c:	2a2003e0 	mvn	w0, w0
   8ac20:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ac24:	531f7c00 	lsr	w0, w0, #31
   8ac28:	f94013f5 	ldr	x21, [sp, #32]
   8ac2c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8ac30:	d65f03c0 	ret
   8ac34:	d503201f 	nop
   8ac38:	d503201f 	nop
   8ac3c:	d503201f 	nop

000000000008ac40 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)>:
   8ac40:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   8ac44:	910003fd 	mov	x29, sp
   8ac48:	d2800602 	mov	x2, #0x30                  	// #48
   8ac4c:	a90153f3 	stp	x19, x20, [sp, #16]
   8ac50:	9101bff3 	add	x19, sp, #0x6f
   8ac54:	aa0003f4 	mov	x20, x0
   8ac58:	927ae673 	and	x19, x19, #0xffffffffffffffc0
   8ac5c:	aa1303e0 	mov	x0, x19
   8ac60:	f90013f5 	str	x21, [sp, #32]
   8ac64:	2a0103f5 	mov	w21, w1
   8ac68:	91060281 	add	x1, x20, #0x180
   8ac6c:	940072f7 	bl	a7848 <memcpy>
   8ac70:	710006bf 	cmp	w21, #0x1
   8ac74:	540005a0 	b.eq	8ad28 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xe8>  // b.none
   8ac78:	71000abf 	cmp	w21, #0x2
   8ac7c:	54000100 	b.eq	8ac9c <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x5c>  // b.none
   8ac80:	340004d5 	cbz	w21, 8ad18 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xd8>
   8ac84:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8ac88:	90000140 	adrp	x0, b2000 <_etext+0x1158>
   8ac8c:	912ca021 	add	x1, x1, #0xb28
   8ac90:	910ba000 	add	x0, x0, #0x2e8
   8ac94:	528021c2 	mov	w2, #0x10e                 	// #270
   8ac98:	94004c2a 	bl	9dd40 <assertion_failed>
   8ac9c:	52800003 	mov	w3, #0x0                   	// #0
   8aca0:	52801fc1 	mov	w1, #0xfe                  	// #254
   8aca4:	52801fe2 	mov	w2, #0xff                  	// #255
   8aca8:	aa1403e0 	mov	x0, x20
   8acac:	39000661 	strb	w1, [x19, #1]
   8acb0:	39000a63 	strb	w3, [x19, #2]
   8acb4:	39000e61 	strb	w1, [x19, #3]
   8acb8:	39001262 	strb	w2, [x19, #4]
   8acbc:	97fffefd 	bl	8a8b0 <CUSBFunction::GetHost() const>
   8acc0:	aa0003f5 	mov	x21, x0
   8acc4:	aa1403e0 	mov	x0, x20
   8acc8:	97fffeee 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   8accc:	aa0003e1 	mov	x1, x0
   8acd0:	aa1403e0 	mov	x0, x20
   8acd4:	aa0103f4 	mov	x20, x1
   8acd8:	97ffff62 	bl	8aa60 <CUSBFunction::GetInterfaceNumber() const>
   8acdc:	12001c05 	and	w5, w0, #0xff
   8ace0:	aa1403e1 	mov	x1, x20
   8ace4:	aa1303e6 	mov	x6, x19
   8ace8:	aa1503e0 	mov	x0, x21
   8acec:	52800607 	mov	w7, #0x30                  	// #48
   8acf0:	52804024 	mov	w4, #0x201                 	// #513
   8acf4:	52800123 	mov	w3, #0x9                   	// #9
   8acf8:	52800422 	mov	w2, #0x21                  	// #33
   8acfc:	97ffd8c5 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8ad00:	2a2003e0 	mvn	w0, w0
   8ad04:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ad08:	531f7c00 	lsr	w0, w0, #31
   8ad0c:	f94013f5 	ldr	x21, [sp, #32]
   8ad10:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   8ad14:	d65f03c0 	ret
   8ad18:	52800003 	mov	w3, #0x0                   	// #0
   8ad1c:	52800001 	mov	w1, #0x0                   	// #0
   8ad20:	52800002 	mov	w2, #0x0                   	// #0
   8ad24:	17ffffe1 	b	8aca8 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x68>
   8ad28:	52801fe3 	mov	w3, #0xff                  	// #255
   8ad2c:	52801fc1 	mov	w1, #0xfe                  	// #254
   8ad30:	52800002 	mov	w2, #0x0                   	// #0
   8ad34:	17ffffdd 	b	8aca8 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x68>
   8ad38:	d503201f 	nop
   8ad3c:	d503201f 	nop

000000000008ad40 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>:
   8ad40:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8ad44:	52800002 	mov	w2, #0x0                   	// #0
   8ad48:	910003fd 	mov	x29, sp
   8ad4c:	f9000bf3 	str	x19, [sp, #16]
   8ad50:	aa0003f3 	mov	x19, x0
   8ad54:	940003eb 	bl	8bd00 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
   8ad58:	90000161 	adrp	x1, b6000 <From+0x98>
   8ad5c:	910f4021 	add	x1, x1, #0x3d0
   8ad60:	aa1303e0 	mov	x0, x19
   8ad64:	52800004 	mov	w4, #0x0                   	// #0
   8ad68:	52800003 	mov	w3, #0x0                   	// #0
   8ad6c:	52800002 	mov	w2, #0x0                   	// #0
   8ad70:	f9000261 	str	x1, [x19]
   8ad74:	52800061 	mov	w1, #0x3                   	// #3
   8ad78:	97fffefa 	bl	8a960 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char, unsigned int)>
   8ad7c:	2a0003e3 	mov	w3, w0
   8ad80:	90000161 	adrp	x1, b6000 <From+0x98>
   8ad84:	9111c021 	add	x1, x1, #0x470
   8ad88:	91060260 	add	x0, x19, #0x180
   8ad8c:	91004021 	add	x1, x1, #0x10
   8ad90:	d2800602 	mov	x2, #0x30                  	// #48
   8ad94:	3905aa63 	strb	w3, [x19, #362]
   8ad98:	f9400bf3 	ldr	x19, [sp, #16]
   8ad9c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8ada0:	140072aa 	b	a7848 <memcpy>
   8ada4:	d503201f 	nop
   8ada8:	d503201f 	nop
   8adac:	d503201f 	nop

000000000008adb0 <CUSBGamePadPS3Device::PS3Enable()>:
   8adb0:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   8adb4:	910003fd 	mov	x29, sp
   8adb8:	d2818842 	mov	x2, #0xc42                 	// #3138
   8adbc:	d2800003 	mov	x3, #0x0                   	// #0
   8adc0:	a90153f3 	stp	x19, x20, [sp, #16]
   8adc4:	9101bff3 	add	x19, sp, #0x6f
   8adc8:	aa0003f4 	mov	x20, x0
   8adcc:	927ae673 	and	x19, x19, #0xffffffffffffffc0
   8add0:	a9025bf5 	stp	x21, x22, [sp, #32]
   8add4:	a9000e62 	stp	x2, x3, [x19]
   8add8:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   8addc:	a9027e7f 	stp	xzr, xzr, [x19, #32]
   8ade0:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   8ade4:	97fffeb3 	bl	8a8b0 <CUSBFunction::GetHost() const>
   8ade8:	aa0003f5 	mov	x21, x0
   8adec:	aa1403e0 	mov	x0, x20
   8adf0:	97fffea4 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   8adf4:	aa0003f6 	mov	x22, x0
   8adf8:	aa1403e0 	mov	x0, x20
   8adfc:	97ffff19 	bl	8aa60 <CUSBFunction::GetInterfaceNumber() const>
   8ae00:	12001c05 	and	w5, w0, #0xff
   8ae04:	aa1303e6 	mov	x6, x19
   8ae08:	aa1603e1 	mov	x1, x22
   8ae0c:	aa1503e0 	mov	x0, x21
   8ae10:	52800087 	mov	w7, #0x4                   	// #4
   8ae14:	52807e84 	mov	w4, #0x3f4                 	// #1012
   8ae18:	52800123 	mov	w3, #0x9                   	// #9
   8ae1c:	52800422 	mov	w2, #0x21                  	// #33
   8ae20:	97ffd87c 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8ae24:	37f80160 	tbnz	w0, #31, 8ae50 <CUSBGamePadPS3Device::PS3Enable()+0xa0>
   8ae28:	f9400282 	ldr	x2, [x20]
   8ae2c:	aa1403e0 	mov	x0, x20
   8ae30:	b9415681 	ldr	w1, [x20, #340]
   8ae34:	f9404042 	ldr	x2, [x2, #128]
   8ae38:	d63f0040 	blr	x2
   8ae3c:	12001c00 	and	w0, w0, #0xff
   8ae40:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ae44:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ae48:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   8ae4c:	d65f03c0 	ret
   8ae50:	52800000 	mov	w0, #0x0                   	// #0
   8ae54:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ae58:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ae5c:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   8ae60:	d65f03c0 	ret
   8ae64:	d503201f 	nop
   8ae68:	d503201f 	nop
   8ae6c:	d503201f 	nop

000000000008ae70 <CUSBGamePadPS3Device::Configure()>:
   8ae70:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8ae74:	910003fd 	mov	x29, sp
   8ae78:	a90153f3 	stp	x19, x20, [sp, #16]
   8ae7c:	3945a814 	ldrb	w20, [x0, #362]
   8ae80:	340003f4 	cbz	w20, 8aefc <CUSBGamePadPS3Device::Configure()+0x8c>
   8ae84:	aa0003f3 	mov	x19, x0
   8ae88:	94000536 	bl	8c360 <CUSBGamePadStandardDevice::Configure()>
   8ae8c:	72001c14 	ands	w20, w0, #0xff
   8ae90:	54000620 	b.eq	8af54 <CUSBGamePadPS3Device::Configure()+0xe4>  // b.none
   8ae94:	7942a260 	ldrh	w0, [x19, #336]
   8ae98:	5100c400 	sub	w0, w0, #0x31
   8ae9c:	12003c00 	and	w0, w0, #0xffff
   8aea0:	7100041f 	cmp	w0, #0x1
   8aea4:	540003c8 	b.hi	8af1c <CUSBGamePadPS3Device::Configure()+0xac>  // b.pmore
   8aea8:	52800263 	mov	w3, #0x13                  	// #19
   8aeac:	52800204 	mov	w4, #0x10                  	// #16
   8aeb0:	91014261 	add	x1, x19, #0x50
   8aeb4:	91044262 	add	x2, x19, #0x110
   8aeb8:	52801fe0 	mov	w0, #0xff                  	// #255
   8aebc:	b9004a64 	str	w4, [x19, #72]
   8aec0:	b9012a63 	str	w3, [x19, #296]
   8aec4:	d503201f 	nop
   8aec8:	2900003f 	stp	wzr, w0, [x1]
   8aecc:	91003021 	add	x1, x1, #0xc
   8aed0:	eb02003f 	cmp	x1, x2
   8aed4:	54ffffa1 	b.ne	8aec8 <CUSBGamePadPS3Device::Configure()+0x58>  // b.any
   8aed8:	aa1303e0 	mov	x0, x19
   8aedc:	b9010e7f 	str	wzr, [x19, #268]
   8aee0:	97ffffb4 	bl	8adb0 <CUSBGamePadPS3Device::PS3Enable()>
   8aee4:	72001c14 	ands	w20, w0, #0xff
   8aee8:	540004e0 	b.eq	8af84 <CUSBGamePadPS3Device::Configure()+0x114>  // b.none
   8aeec:	aa1303e0 	mov	x0, x19
   8aef0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8aef4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8aef8:	14000bca 	b	8de20 <CUSBHIDDevice::StartRequest()>
   8aefc:	90000161 	adrp	x1, b6000 <From+0x98>
   8af00:	9111c021 	add	x1, x1, #0x470
   8af04:	91010021 	add	x1, x1, #0x40
   8af08:	97fffe82 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   8af0c:	2a1403e0 	mov	w0, w20
   8af10:	a94153f3 	ldp	x19, x20, [sp, #16]
   8af14:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8af18:	d65f03c0 	ret
   8af1c:	940052bd 	bl	9fa10 <CLogger::Get()>
   8af20:	90000161 	adrp	x1, b6000 <From+0x98>
   8af24:	9111c021 	add	x1, x1, #0x470
   8af28:	7942a264 	ldrh	w4, [x19, #336]
   8af2c:	90000143 	adrp	x3, b2000 <_etext+0x1158>
   8af30:	91010021 	add	x1, x1, #0x40
   8af34:	912d8063 	add	x3, x3, #0xb60
   8af38:	52800022 	mov	w2, #0x1                   	// #1
   8af3c:	940054a1 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8af40:	52800014 	mov	w20, #0x0                   	// #0
   8af44:	2a1403e0 	mov	w0, w20
   8af48:	a94153f3 	ldp	x19, x20, [sp, #16]
   8af4c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8af50:	d65f03c0 	ret
   8af54:	940052af 	bl	9fa10 <CLogger::Get()>
   8af58:	90000161 	adrp	x1, b6000 <From+0x98>
   8af5c:	9111c021 	add	x1, x1, #0x470
   8af60:	90000143 	adrp	x3, b2000 <_etext+0x1158>
   8af64:	91010021 	add	x1, x1, #0x40
   8af68:	912d0063 	add	x3, x3, #0xb40
   8af6c:	52800022 	mov	w2, #0x1                   	// #1
   8af70:	94005494 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8af74:	2a1403e0 	mov	w0, w20
   8af78:	a94153f3 	ldp	x19, x20, [sp, #16]
   8af7c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8af80:	d65f03c0 	ret
   8af84:	940052a3 	bl	9fa10 <CLogger::Get()>
   8af88:	90000161 	adrp	x1, b6000 <From+0x98>
   8af8c:	9111c021 	add	x1, x1, #0x470
   8af90:	90000143 	adrp	x3, b2000 <_etext+0x1158>
   8af94:	91010021 	add	x1, x1, #0x40
   8af98:	912e0063 	add	x3, x3, #0xb80
   8af9c:	52800022 	mov	w2, #0x1                   	// #1
   8afa0:	94005488 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8afa4:	2a1403e0 	mov	w0, w20
   8afa8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8afac:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8afb0:	d65f03c0 	ret
   8afb4:	d503201f 	nop
   8afb8:	d503201f 	nop
   8afbc:	d503201f 	nop

000000000008afc0 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)>:
   8afc0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8afc4:	910003fd 	mov	x29, sp
   8afc8:	aa0003e4 	mov	x4, x0
   8afcc:	aa0103e6 	mov	x6, x1
   8afd0:	7942a002 	ldrh	w2, [x0, #336]
   8afd4:	7100c45f 	cmp	w2, #0x31
   8afd8:	54000140 	b.eq	8b000 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x40>  // b.none
   8afdc:	7100c85f 	cmp	w2, #0x32
   8afe0:	540009a0 	b.eq	8b114 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x154>  // b.none
   8afe4:	34000942 	cbz	w2, 8b10c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x14c>
   8afe8:	90000141 	adrp	x1, b2000 <_etext+0x1158>
   8afec:	90000140 	adrp	x0, b2000 <_etext+0x1158>
   8aff0:	912ca021 	add	x1, x1, #0xb28
   8aff4:	910ba000 	add	x0, x0, #0x2e8
   8aff8:	52801242 	mov	w2, #0x92                  	// #146
   8affc:	94004b51 	bl	9dd40 <assertion_failed>
   8b000:	b40008e1 	cbz	x1, 8b11c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x15c>
   8b004:	394008c9 	ldrb	w9, [x6, #2]
   8b008:	f0000141 	adrp	x1, b6000 <From+0x98>
   8b00c:	9111c021 	add	x1, x1, #0x470
   8b010:	91014021 	add	x1, x1, #0x50
   8b014:	d2800003 	mov	x3, #0x0                   	// #0
   8b018:	39400cc8 	ldrb	w8, [x6, #3]
   8b01c:	528000c2 	mov	w2, #0x6                   	// #6
   8b020:	910038c7 	add	x7, x6, #0xe
   8b024:	394010c0 	ldrb	w0, [x6, #4]
   8b028:	394014c5 	ldrb	w5, [x6, #5]
   8b02c:	aa082128 	orr	x8, x9, x8, lsl #8
   8b030:	aa004100 	orr	x0, x8, x0, lsl #16
   8b034:	aa056005 	orr	x5, x0, x5, lsl #24
   8b038:	53104800 	ubfx	w0, w0, #16, #3
   8b03c:	53057ca8 	lsr	w8, w5, #5
   8b040:	53151ca5 	ubfiz	w5, w5, #11, #8
   8b044:	121d1d08 	and	w8, w8, #0x7f8
   8b048:	2a080000 	orr	w0, w0, w8
   8b04c:	2a050000 	orr	w0, w0, w5
   8b050:	b9012c80 	str	w0, [x4, #300]
   8b054:	394018c0 	ldrb	w0, [x6, #6]
   8b058:	b9004c80 	str	w0, [x4, #76]
   8b05c:	39401cc0 	ldrb	w0, [x6, #7]
   8b060:	b9005880 	str	w0, [x4, #88]
   8b064:	394020c0 	ldrb	w0, [x6, #8]
   8b068:	b9006480 	str	w0, [x4, #100]
   8b06c:	394024c0 	ldrb	w0, [x6, #9]
   8b070:	b9007080 	str	w0, [x4, #112]
   8b074:	14000002 	b	8b07c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xbc>
   8b078:	b8637822 	ldr	w2, [x1, x3, lsl #2]
   8b07c:	d37f7c45 	ubfiz	x5, x2, #1, #32
   8b080:	8b2240a2 	add	x2, x5, w2, uxtw
   8b084:	8b020882 	add	x2, x4, x2, lsl #2
   8b088:	386368e0 	ldrb	w0, [x7, x3]
   8b08c:	91000463 	add	x3, x3, #0x1
   8b090:	f100307f 	cmp	x3, #0xc
   8b094:	b9004c40 	str	w0, [x2, #76]
   8b098:	54ffff01 	b.ne	8b078 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0xb8>  // b.any
   8b09c:	3940a4c2 	ldrb	w2, [x6, #41]
   8b0a0:	52803fe1 	mov	w1, #0x1ff                 	// #511
   8b0a4:	3940a8c0 	ldrb	w0, [x6, #42]
   8b0a8:	aa002040 	orr	x0, x2, x0, lsl #8
   8b0ac:	5ac00400 	rev16	w0, w0
   8b0b0:	4b202020 	sub	w0, w1, w0, uxth
   8b0b4:	b9013080 	str	w0, [x4, #304]
   8b0b8:	3940acc2 	ldrb	w2, [x6, #43]
   8b0bc:	3940b0c0 	ldrb	w0, [x6, #44]
   8b0c0:	aa002040 	orr	x0, x2, x0, lsl #8
   8b0c4:	5ac00400 	rev16	w0, w0
   8b0c8:	4b202020 	sub	w0, w1, w0, uxth
   8b0cc:	b9013480 	str	w0, [x4, #308]
   8b0d0:	3940b4c2 	ldrb	w2, [x6, #45]
   8b0d4:	3940b8c0 	ldrb	w0, [x6, #46]
   8b0d8:	aa002040 	orr	x0, x2, x0, lsl #8
   8b0dc:	5ac00400 	rev16	w0, w0
   8b0e0:	4b202021 	sub	w1, w1, w0, uxth
   8b0e4:	b9013881 	str	w1, [x4, #312]
   8b0e8:	3940bcc1 	ldrb	w1, [x6, #47]
   8b0ec:	3940c0c0 	ldrb	w0, [x6, #48]
   8b0f0:	aa002020 	orr	x0, x1, x0, lsl #8
   8b0f4:	5ac00400 	rev16	w0, w0
   8b0f8:	12003c00 	and	w0, w0, #0xffff
   8b0fc:	51001800 	sub	w0, w0, #0x6
   8b100:	b9014480 	str	w0, [x4, #324]
   8b104:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8b108:	d65f03c0 	ret
   8b10c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8b110:	14000370 	b	8bed0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>
   8b114:	91000426 	add	x6, x1, #0x1
   8b118:	17ffffbb 	b	8b004 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x44>
   8b11c:	f0000121 	adrp	x1, b2000 <_etext+0x1158>
   8b120:	f0000120 	adrp	x0, b2000 <_etext+0x1158>
   8b124:	912ca021 	add	x1, x1, #0xb28
   8b128:	912e8000 	add	x0, x0, #0xba0
   8b12c:	528012e2 	mov	w2, #0x97                  	// #151
   8b130:	94004b04 	bl	9dd40 <assertion_failed>
	...

000000000008b140 <CUSBGamePadDevice::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   8b140:	52800000 	mov	w0, #0x0                   	// #0
   8b144:	d65f03c0 	ret
	...

000000000008b150 <CUSBGamePadPS3Device::GetProperties()>:
   8b150:	52800360 	mov	w0, #0x1b                  	// #27
   8b154:	d65f03c0 	ret
	...

000000000008b160 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)>:
   8b160:	39400422 	ldrb	w2, [x1, #1]
   8b164:	f0000143 	adrp	x3, b6000 <From+0x98>
   8b168:	91168063 	add	x3, x3, #0x5a0
   8b16c:	b9004c02 	str	w2, [x0, #76]
   8b170:	39400822 	ldrb	w2, [x1, #2]
   8b174:	b9005802 	str	w2, [x0, #88]
   8b178:	39400c22 	ldrb	w2, [x1, #3]
   8b17c:	b9006402 	str	w2, [x0, #100]
   8b180:	39401022 	ldrb	w2, [x1, #4]
   8b184:	b9007002 	str	w2, [x0, #112]
   8b188:	39402022 	ldrb	w2, [x1, #8]
   8b18c:	b9007c02 	str	w2, [x0, #124]
   8b190:	39402422 	ldrb	w2, [x1, #9]
   8b194:	b9008802 	str	w2, [x0, #136]
   8b198:	39401422 	ldrb	w2, [x1, #5]
   8b19c:	12000c42 	and	w2, w2, #0xf
   8b1a0:	b862d864 	ldr	w4, [x3, w2, sxtw #2]
   8b1a4:	b9011002 	str	w2, [x0, #272]
   8b1a8:	b9012c04 	str	w4, [x0, #300]
   8b1ac:	32190082 	orr	w2, w4, #0x80
   8b1b0:	39401423 	ldrb	w3, [x1, #5]
   8b1b4:	f279007f 	tst	x3, #0x80
   8b1b8:	1a841042 	csel	w2, w2, w4, ne	// ne = any
   8b1bc:	b9012c02 	str	w2, [x0, #300]
   8b1c0:	36300063 	tbz	w3, #6, 8b1cc <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x6c>
   8b1c4:	32180042 	orr	w2, w2, #0x100
   8b1c8:	b9012c02 	str	w2, [x0, #300]
   8b1cc:	36280083 	tbz	w3, #5, 8b1dc <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x7c>
   8b1d0:	b9412c02 	ldr	w2, [x0, #300]
   8b1d4:	32170042 	orr	w2, w2, #0x200
   8b1d8:	b9012c02 	str	w2, [x0, #300]
   8b1dc:	36200083 	tbz	w3, #4, 8b1ec <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x8c>
   8b1e0:	b9412c02 	ldr	w2, [x0, #300]
   8b1e4:	32160042 	orr	w2, w2, #0x400
   8b1e8:	b9012c02 	str	w2, [x0, #300]
   8b1ec:	39401822 	ldrb	w2, [x1, #6]
   8b1f0:	373808a2 	tbnz	w2, #7, 8b304 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x1a4>
   8b1f4:	36300082 	tbz	w2, #6, 8b204 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0xa4>
   8b1f8:	b9412c03 	ldr	w3, [x0, #300]
   8b1fc:	32140063 	orr	w3, w3, #0x1000
   8b200:	b9012c03 	str	w3, [x0, #300]
   8b204:	36280082 	tbz	w2, #5, 8b214 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0xb4>
   8b208:	b9412c03 	ldr	w3, [x0, #300]
   8b20c:	32120063 	orr	w3, w3, #0x4000
   8b210:	b9012c03 	str	w3, [x0, #300]
   8b214:	36200082 	tbz	w2, #4, 8b224 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0xc4>
   8b218:	b9412c03 	ldr	w3, [x0, #300]
   8b21c:	32150063 	orr	w3, w3, #0x800
   8b220:	b9012c03 	str	w3, [x0, #300]
   8b224:	36180082 	tbz	w2, #3, 8b234 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0xd4>
   8b228:	b9412c03 	ldr	w3, [x0, #300]
   8b22c:	321c0063 	orr	w3, w3, #0x10
   8b230:	b9012c03 	str	w3, [x0, #300]
   8b234:	36100082 	tbz	w2, #2, 8b244 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0xe4>
   8b238:	b9412c03 	ldr	w3, [x0, #300]
   8b23c:	321d0063 	orr	w3, w3, #0x8
   8b240:	b9012c03 	str	w3, [x0, #300]
   8b244:	36080082 	tbz	w2, #1, 8b254 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0xf4>
   8b248:	b9412c03 	ldr	w3, [x0, #300]
   8b24c:	321a0063 	orr	w3, w3, #0x40
   8b250:	b9012c03 	str	w3, [x0, #300]
   8b254:	36000082 	tbz	w2, #0, 8b264 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x104>
   8b258:	b9412c02 	ldr	w2, [x0, #300]
   8b25c:	321b0042 	orr	w2, w2, #0x20
   8b260:	b9012c02 	str	w2, [x0, #300]
   8b264:	39401c22 	ldrb	w2, [x1, #7]
   8b268:	36080082 	tbz	w2, #1, 8b278 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x118>
   8b26c:	b9412c03 	ldr	w3, [x0, #300]
   8b270:	320b0063 	orr	w3, w3, #0x200000
   8b274:	b9012c03 	str	w3, [x0, #300]
   8b278:	36000082 	tbz	w2, #0, 8b288 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x128>
   8b27c:	b9412c02 	ldr	w2, [x0, #300]
   8b280:	32000042 	orr	w2, w2, #0x1
   8b284:	b9012c02 	str	w2, [x0, #300]
   8b288:	39404c23 	ldrb	w3, [x1, #19]
   8b28c:	39405022 	ldrb	w2, [x1, #20]
   8b290:	aa022062 	orr	x2, x3, x2, lsl #8
   8b294:	93403c42 	sxth	x2, w2
   8b298:	b9013002 	str	w2, [x0, #304]
   8b29c:	39405c23 	ldrb	w3, [x1, #23]
   8b2a0:	39406022 	ldrb	w2, [x1, #24]
   8b2a4:	aa022062 	orr	x2, x3, x2, lsl #8
   8b2a8:	93403c42 	sxth	x2, w2
   8b2ac:	b9013402 	str	w2, [x0, #308]
   8b2b0:	39405423 	ldrb	w3, [x1, #21]
   8b2b4:	39405822 	ldrb	w2, [x1, #22]
   8b2b8:	aa022062 	orr	x2, x3, x2, lsl #8
   8b2bc:	93403c42 	sxth	x2, w2
   8b2c0:	b9013802 	str	w2, [x0, #312]
   8b2c4:	39404423 	ldrb	w3, [x1, #17]
   8b2c8:	39404822 	ldrb	w2, [x1, #18]
   8b2cc:	aa022062 	orr	x2, x3, x2, lsl #8
   8b2d0:	93403c42 	sxth	x2, w2
   8b2d4:	b9013c02 	str	w2, [x0, #316]
   8b2d8:	39403423 	ldrb	w3, [x1, #13]
   8b2dc:	39403822 	ldrb	w2, [x1, #14]
   8b2e0:	aa022062 	orr	x2, x3, x2, lsl #8
   8b2e4:	93403c42 	sxth	x2, w2
   8b2e8:	b9014002 	str	w2, [x0, #320]
   8b2ec:	39403c22 	ldrb	w2, [x1, #15]
   8b2f0:	39404021 	ldrb	w1, [x1, #16]
   8b2f4:	aa012041 	orr	x1, x2, x1, lsl #8
   8b2f8:	93403c21 	sxth	x1, w1
   8b2fc:	b9014401 	str	w1, [x0, #324]
   8b300:	d65f03c0 	ret
   8b304:	b9412c03 	ldr	w3, [x0, #300]
   8b308:	32130063 	orr	w3, w3, #0x2000
   8b30c:	b9012c03 	str	w3, [x0, #300]
   8b310:	17ffffb9 	b	8b1f4 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)+0x94>
   8b314:	d503201f 	nop
   8b318:	d503201f 	nop
   8b31c:	d503201f 	nop

000000000008b320 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   8b320:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8b324:	910003fd 	mov	x29, sp
   8b328:	f0000141 	adrp	x1, b6000 <From+0x98>
   8b32c:	91140021 	add	x1, x1, #0x500
   8b330:	f9000bf3 	str	x19, [sp, #16]
   8b334:	aa0003f3 	mov	x19, x0
   8b338:	f940b800 	ldr	x0, [x0, #368]
   8b33c:	f9000261 	str	x1, [x19]
   8b340:	b4000080 	cbz	x0, 8b350 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x30>
   8b344:	f9400001 	ldr	x1, [x0]
   8b348:	f9400421 	ldr	x1, [x1, #8]
   8b34c:	d63f0020 	blr	x1
   8b350:	f940b660 	ldr	x0, [x19, #360]
   8b354:	b4000040 	cbz	x0, 8b35c <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x3c>
   8b358:	940073de 	bl	a82d0 <operator delete[](void*)>
   8b35c:	aa1303e0 	mov	x0, x19
   8b360:	f9400bf3 	ldr	x19, [sp, #16]
   8b364:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8b368:	14003da6 	b	9aa00 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   8b36c:	d503201f 	nop

000000000008b370 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   8b370:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8b374:	910003fd 	mov	x29, sp
   8b378:	f0000141 	adrp	x1, b6000 <From+0x98>
   8b37c:	91140021 	add	x1, x1, #0x500
   8b380:	f9000bf3 	str	x19, [sp, #16]
   8b384:	aa0003f3 	mov	x19, x0
   8b388:	f940b800 	ldr	x0, [x0, #368]
   8b38c:	f9000261 	str	x1, [x19]
   8b390:	b4000080 	cbz	x0, 8b3a0 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x30>
   8b394:	f9400001 	ldr	x1, [x0]
   8b398:	f9400421 	ldr	x1, [x1, #8]
   8b39c:	d63f0020 	blr	x1
   8b3a0:	f940b660 	ldr	x0, [x19, #360]
   8b3a4:	b4000040 	cbz	x0, 8b3ac <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x3c>
   8b3a8:	940073ca 	bl	a82d0 <operator delete[](void*)>
   8b3ac:	aa1303e0 	mov	x0, x19
   8b3b0:	94003d94 	bl	9aa00 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   8b3b4:	aa1303e0 	mov	x0, x19
   8b3b8:	d2803001 	mov	x1, #0x180                 	// #384
   8b3bc:	f9400bf3 	ldr	x19, [sp, #16]
   8b3c0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8b3c4:	140073cf 	b	a8300 <operator delete(void*, unsigned long)>
   8b3c8:	d503201f 	nop
   8b3cc:	d503201f 	nop

000000000008b3d0 <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   8b3d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8b3d4:	910003fd 	mov	x29, sp
   8b3d8:	53107c27 	lsr	w7, w1, #16
   8b3dc:	53087c26 	lsr	w6, w1, #8
   8b3e0:	f9000bf3 	str	x19, [sp, #16]
   8b3e4:	39456405 	ldrb	w5, [x0, #345]
   8b3e8:	39057801 	strb	w1, [x0, #350]
   8b3ec:	f940b401 	ldr	x1, [x0, #360]
   8b3f0:	39057007 	strb	w7, [x0, #348]
   8b3f4:	39057406 	strb	w6, [x0, #349]
   8b3f8:	39057c02 	strb	w2, [x0, #351]
   8b3fc:	52800402 	mov	w2, #0x20                  	// #32
   8b400:	39058003 	strb	w3, [x0, #352]
   8b404:	52800003 	mov	w3, #0x0                   	// #0
   8b408:	39000c25 	strb	w5, [x1, #3]
   8b40c:	39456c05 	ldrb	w5, [x0, #347]
   8b410:	f940b401 	ldr	x1, [x0, #360]
   8b414:	39001025 	strb	w5, [x1, #4]
   8b418:	39456805 	ldrb	w5, [x0, #346]
   8b41c:	f940b401 	ldr	x1, [x0, #360]
   8b420:	39001425 	strb	w5, [x1, #5]
   8b424:	39457005 	ldrb	w5, [x0, #348]
   8b428:	f940b401 	ldr	x1, [x0, #360]
   8b42c:	39001825 	strb	w5, [x1, #6]
   8b430:	39457405 	ldrb	w5, [x0, #349]
   8b434:	f940b401 	ldr	x1, [x0, #360]
   8b438:	39001c25 	strb	w5, [x1, #7]
   8b43c:	39457805 	ldrb	w5, [x0, #350]
   8b440:	f940b401 	ldr	x1, [x0, #360]
   8b444:	39002025 	strb	w5, [x1, #8]
   8b448:	39457c05 	ldrb	w5, [x0, #351]
   8b44c:	f940b401 	ldr	x1, [x0, #360]
   8b450:	39002425 	strb	w5, [x1, #9]
   8b454:	39458005 	ldrb	w5, [x0, #352]
   8b458:	f940b401 	ldr	x1, [x0, #360]
   8b45c:	39002825 	strb	w5, [x1, #10]
   8b460:	f940b401 	ldr	x1, [x0, #360]
   8b464:	940009df 	bl	8dbe0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   8b468:	72001c1f 	tst	w0, #0xff
   8b46c:	2a0003f3 	mov	w19, w0
   8b470:	540000a0 	b.eq	8b484 <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)+0xb4>  // b.none
   8b474:	2a1303e0 	mov	w0, w19
   8b478:	f9400bf3 	ldr	x19, [sp, #16]
   8b47c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8b480:	d65f03c0 	ret
   8b484:	94005163 	bl	9fa10 <CLogger::Get()>
   8b488:	f0000141 	adrp	x1, b6000 <From+0x98>
   8b48c:	91168021 	add	x1, x1, #0x5a0
   8b490:	f0000123 	adrp	x3, b2000 <_etext+0x1158>
   8b494:	9100a021 	add	x1, x1, #0x28
   8b498:	912ec063 	add	x3, x3, #0xbb0
   8b49c:	52800022 	mov	w2, #0x1                   	// #1
   8b4a0:	94005348 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8b4a4:	2a1303e0 	mov	w0, w19
   8b4a8:	f9400bf3 	ldr	x19, [sp, #16]
   8b4ac:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8b4b0:	d65f03c0 	ret
   8b4b4:	d503201f 	nop
   8b4b8:	d503201f 	nop
   8b4bc:	d503201f 	nop

000000000008b4c0 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)>:
   8b4c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8b4c4:	910003fd 	mov	x29, sp
   8b4c8:	7100043f 	cmp	w1, #0x1
   8b4cc:	f9000bf3 	str	x19, [sp, #16]
   8b4d0:	54000780 	b.eq	8b5c0 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x100>  // b.none
   8b4d4:	7100083f 	cmp	w1, #0x2
   8b4d8:	540000e0 	b.eq	8b4f4 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x34>  // b.none
   8b4dc:	52800033 	mov	w19, #0x1                   	// #1
   8b4e0:	34000681 	cbz	w1, 8b5b0 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0xf0>
   8b4e4:	2a1303e0 	mov	w0, w19
   8b4e8:	f9400bf3 	ldr	x19, [sp, #16]
   8b4ec:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8b4f0:	d65f03c0 	ret
   8b4f4:	52800004 	mov	w4, #0x0                   	// #0
   8b4f8:	52801fe5 	mov	w5, #0xff                  	// #255
   8b4fc:	52801e61 	mov	w1, #0xf3                  	// #243
   8b500:	f940b406 	ldr	x6, [x0, #360]
   8b504:	52800003 	mov	w3, #0x0                   	// #0
   8b508:	52800402 	mov	w2, #0x20                  	// #32
   8b50c:	39056401 	strb	w1, [x0, #345]
   8b510:	39056805 	strb	w5, [x0, #346]
   8b514:	39056c04 	strb	w4, [x0, #347]
   8b518:	39000cc1 	strb	w1, [x6, #3]
   8b51c:	39456c04 	ldrb	w4, [x0, #347]
   8b520:	f940b401 	ldr	x1, [x0, #360]
   8b524:	39001024 	strb	w4, [x1, #4]
   8b528:	39456804 	ldrb	w4, [x0, #346]
   8b52c:	f940b401 	ldr	x1, [x0, #360]
   8b530:	39001424 	strb	w4, [x1, #5]
   8b534:	39457004 	ldrb	w4, [x0, #348]
   8b538:	f940b401 	ldr	x1, [x0, #360]
   8b53c:	39001824 	strb	w4, [x1, #6]
   8b540:	39457404 	ldrb	w4, [x0, #349]
   8b544:	f940b401 	ldr	x1, [x0, #360]
   8b548:	39001c24 	strb	w4, [x1, #7]
   8b54c:	39457804 	ldrb	w4, [x0, #350]
   8b550:	f940b401 	ldr	x1, [x0, #360]
   8b554:	39002024 	strb	w4, [x1, #8]
   8b558:	39457c04 	ldrb	w4, [x0, #351]
   8b55c:	f940b401 	ldr	x1, [x0, #360]
   8b560:	39002424 	strb	w4, [x1, #9]
   8b564:	39458004 	ldrb	w4, [x0, #352]
   8b568:	f940b401 	ldr	x1, [x0, #360]
   8b56c:	39002824 	strb	w4, [x1, #10]
   8b570:	f940b401 	ldr	x1, [x0, #360]
   8b574:	9400099b 	bl	8dbe0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   8b578:	72001c13 	ands	w19, w0, #0xff
   8b57c:	54fffb41 	b.ne	8b4e4 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x24>  // b.any
   8b580:	94005124 	bl	9fa10 <CLogger::Get()>
   8b584:	f0000141 	adrp	x1, b6000 <From+0x98>
   8b588:	91168021 	add	x1, x1, #0x5a0
   8b58c:	f0000123 	adrp	x3, b2000 <_etext+0x1158>
   8b590:	9100a021 	add	x1, x1, #0x28
   8b594:	912ec063 	add	x3, x3, #0xbb0
   8b598:	52800022 	mov	w2, #0x1                   	// #1
   8b59c:	94005309 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8b5a0:	2a1303e0 	mov	w0, w19
   8b5a4:	f9400bf3 	ldr	x19, [sp, #16]
   8b5a8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8b5ac:	d65f03c0 	ret
   8b5b0:	52800004 	mov	w4, #0x0                   	// #0
   8b5b4:	52800005 	mov	w5, #0x0                   	// #0
   8b5b8:	52801e01 	mov	w1, #0xf0                  	// #240
   8b5bc:	17ffffd1 	b	8b500 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x40>
   8b5c0:	52801fe4 	mov	w4, #0xff                  	// #255
   8b5c4:	52800005 	mov	w5, #0x0                   	// #0
   8b5c8:	52801e61 	mov	w1, #0xf3                  	// #243
   8b5cc:	17ffffcd 	b	8b500 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x40>

000000000008b5d0 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)>:
   8b5d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8b5d4:	910003fd 	mov	x29, sp
   8b5d8:	7100103f 	cmp	w1, #0x4
   8b5dc:	f9000bf3 	str	x19, [sp, #16]
   8b5e0:	54000d80 	b.eq	8b790 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x1c0>  // b.none
   8b5e4:	54000668 	b.hi	8b6b0 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0xe0>  // b.pmore
   8b5e8:	7100083f 	cmp	w1, #0x2
   8b5ec:	54000ae0 	b.eq	8b748 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x178>  // b.none
   8b5f0:	71000c3f 	cmp	w1, #0x3
   8b5f4:	54000721 	b.ne	8b6d8 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x108>  // b.any
   8b5f8:	52801fe1 	mov	w1, #0xff                  	// #255
   8b5fc:	52800004 	mov	w4, #0x0                   	// #0
   8b600:	2a0103e5 	mov	w5, w1
   8b604:	2a0103e6 	mov	w6, w1
   8b608:	52800fe7 	mov	w7, #0x7f                  	// #127
   8b60c:	d503201f 	nop
   8b610:	39456408 	ldrb	w8, [x0, #345]
   8b614:	52800003 	mov	w3, #0x0                   	// #0
   8b618:	52800402 	mov	w2, #0x20                  	// #32
   8b61c:	39057001 	strb	w1, [x0, #348]
   8b620:	f940b401 	ldr	x1, [x0, #360]
   8b624:	39057404 	strb	w4, [x0, #349]
   8b628:	39057805 	strb	w5, [x0, #350]
   8b62c:	39057c07 	strb	w7, [x0, #351]
   8b630:	39058006 	strb	w6, [x0, #352]
   8b634:	39000c28 	strb	w8, [x1, #3]
   8b638:	39456c04 	ldrb	w4, [x0, #347]
   8b63c:	f940b401 	ldr	x1, [x0, #360]
   8b640:	39001024 	strb	w4, [x1, #4]
   8b644:	39456804 	ldrb	w4, [x0, #346]
   8b648:	f940b401 	ldr	x1, [x0, #360]
   8b64c:	39001424 	strb	w4, [x1, #5]
   8b650:	39457004 	ldrb	w4, [x0, #348]
   8b654:	f940b401 	ldr	x1, [x0, #360]
   8b658:	39001824 	strb	w4, [x1, #6]
   8b65c:	39457404 	ldrb	w4, [x0, #349]
   8b660:	f940b401 	ldr	x1, [x0, #360]
   8b664:	39001c24 	strb	w4, [x1, #7]
   8b668:	39457804 	ldrb	w4, [x0, #350]
   8b66c:	f940b401 	ldr	x1, [x0, #360]
   8b670:	39002024 	strb	w4, [x1, #8]
   8b674:	39457c04 	ldrb	w4, [x0, #351]
   8b678:	f940b401 	ldr	x1, [x0, #360]
   8b67c:	39002424 	strb	w4, [x1, #9]
   8b680:	39458004 	ldrb	w4, [x0, #352]
   8b684:	f940b401 	ldr	x1, [x0, #360]
   8b688:	39002824 	strb	w4, [x1, #10]
   8b68c:	f940b401 	ldr	x1, [x0, #360]
   8b690:	94000954 	bl	8dbe0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   8b694:	72001c1f 	tst	w0, #0xff
   8b698:	2a0003f3 	mov	w19, w0
   8b69c:	54000620 	b.eq	8b760 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x190>  // b.none
   8b6a0:	2a1303e0 	mov	w0, w19
   8b6a4:	f9400bf3 	ldr	x19, [sp, #16]
   8b6a8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8b6ac:	d65f03c0 	ret
   8b6b0:	7100183f 	cmp	w1, #0x6
   8b6b4:	540003e0 	b.eq	8b730 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x160>  // b.none
   8b6b8:	71001c3f 	cmp	w1, #0x7
   8b6bc:	540001e1 	b.ne	8b6f8 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x128>  // b.any
   8b6c0:	52801fe1 	mov	w1, #0xff                  	// #255
   8b6c4:	52800fe7 	mov	w7, #0x7f                  	// #127
   8b6c8:	2a0103e4 	mov	w4, w1
   8b6cc:	2a0103e5 	mov	w5, w1
   8b6d0:	2a0103e6 	mov	w6, w1
   8b6d4:	17ffffcf 	b	8b610 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x40>
   8b6d8:	7100043f 	cmp	w1, #0x1
   8b6dc:	540001e1 	b.ne	8b718 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x148>  // b.any
   8b6e0:	52801fe5 	mov	w5, #0xff                  	// #255
   8b6e4:	52800001 	mov	w1, #0x0                   	// #0
   8b6e8:	2a0503e6 	mov	w6, w5
   8b6ec:	52800004 	mov	w4, #0x0                   	// #0
   8b6f0:	52800fe7 	mov	w7, #0x7f                  	// #127
   8b6f4:	17ffffc7 	b	8b610 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x40>
   8b6f8:	7100143f 	cmp	w1, #0x5
   8b6fc:	540000e1 	b.ne	8b718 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x148>  // b.any
   8b700:	52801fe4 	mov	w4, #0xff                  	// #255
   8b704:	52800001 	mov	w1, #0x0                   	// #0
   8b708:	2a0403e5 	mov	w5, w4
   8b70c:	2a0403e6 	mov	w6, w4
   8b710:	52800fe7 	mov	w7, #0x7f                  	// #127
   8b714:	17ffffbf 	b	8b610 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x40>
   8b718:	52800001 	mov	w1, #0x0                   	// #0
   8b71c:	52800004 	mov	w4, #0x0                   	// #0
   8b720:	52800005 	mov	w5, #0x0                   	// #0
   8b724:	52800007 	mov	w7, #0x0                   	// #0
   8b728:	52800006 	mov	w6, #0x0                   	// #0
   8b72c:	17ffffb9 	b	8b610 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x40>
   8b730:	52801fe1 	mov	w1, #0xff                  	// #255
   8b734:	52800005 	mov	w5, #0x0                   	// #0
   8b738:	2a0103e4 	mov	w4, w1
   8b73c:	2a0103e6 	mov	w6, w1
   8b740:	52800fe7 	mov	w7, #0x7f                  	// #127
   8b744:	17ffffb3 	b	8b610 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x40>
   8b748:	52801fe1 	mov	w1, #0xff                  	// #255
   8b74c:	52800004 	mov	w4, #0x0                   	// #0
   8b750:	2a0103e6 	mov	w6, w1
   8b754:	52800005 	mov	w5, #0x0                   	// #0
   8b758:	52800fe7 	mov	w7, #0x7f                  	// #127
   8b75c:	17ffffad 	b	8b610 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x40>
   8b760:	940050ac 	bl	9fa10 <CLogger::Get()>
   8b764:	f0000141 	adrp	x1, b6000 <From+0x98>
   8b768:	91168021 	add	x1, x1, #0x5a0
   8b76c:	f0000123 	adrp	x3, b2000 <_etext+0x1158>
   8b770:	9100a021 	add	x1, x1, #0x28
   8b774:	912ec063 	add	x3, x3, #0xbb0
   8b778:	52800022 	mov	w2, #0x1                   	// #1
   8b77c:	94005291 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8b780:	2a1303e0 	mov	w0, w19
   8b784:	f9400bf3 	ldr	x19, [sp, #16]
   8b788:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8b78c:	d65f03c0 	ret
   8b790:	52801fe4 	mov	w4, #0xff                  	// #255
   8b794:	52800001 	mov	w1, #0x0                   	// #0
   8b798:	2a0403e6 	mov	w6, w4
   8b79c:	52800005 	mov	w5, #0x0                   	// #0
   8b7a0:	52800fe7 	mov	w7, #0x7f                  	// #127
   8b7a4:	17ffff9b 	b	8b610 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x40>
   8b7a8:	d503201f 	nop
   8b7ac:	d503201f 	nop

000000000008b7b0 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>:
   8b7b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8b7b4:	910003fd 	mov	x29, sp
   8b7b8:	f9000bf3 	str	x19, [sp, #16]
   8b7bc:	aa0003f3 	mov	x19, x0
   8b7c0:	94003c7c 	bl	9a9b0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   8b7c4:	f0000141 	adrp	x1, b6000 <From+0x98>
   8b7c8:	91140021 	add	x1, x1, #0x500
   8b7cc:	aa1303e0 	mov	x0, x19
   8b7d0:	52800004 	mov	w4, #0x0                   	// #0
   8b7d4:	52800003 	mov	w3, #0x0                   	// #0
   8b7d8:	52800002 	mov	w2, #0x0                   	// #0
   8b7dc:	f9000261 	str	x1, [x19]
   8b7e0:	52800061 	mov	w1, #0x3                   	// #3
   8b7e4:	97fffc5f 	bl	8a960 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char, unsigned int)>
   8b7e8:	39056260 	strb	w0, [x19, #344]
   8b7ec:	a916fe7f 	stp	xzr, xzr, [x19, #360]
   8b7f0:	7902f27f 	strh	wzr, [x19, #376]
   8b7f4:	f9400bf3 	ldr	x19, [sp, #16]
   8b7f8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8b7fc:	d65f03c0 	ret

000000000008b800 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>:
   8b800:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   8b804:	910003fd 	mov	x29, sp
   8b808:	3945e004 	ldrb	w4, [x0, #376]
   8b80c:	a90153f3 	stp	x19, x20, [sp, #16]
   8b810:	a9025bf5 	stp	x21, x22, [sp, #32]
   8b814:	a90363f7 	stp	x23, x24, [sp, #48]
   8b818:	aa0003f7 	mov	x23, x0
   8b81c:	aa0103f8 	mov	x24, x1
   8b820:	f90023f9 	str	x25, [sp, #64]
   8b824:	39401c20 	ldrb	w0, [x1, #7]
   8b828:	370809c0 	tbnz	w0, #1, 8b960 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x160>
   8b82c:	350009c4 	cbnz	w4, 8b964 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x164>
   8b830:	39408719 	ldrb	w25, [x24, #33]
   8b834:	52800020 	mov	w0, #0x1                   	// #1
   8b838:	52800016 	mov	w22, #0x0                   	// #0
   8b83c:	2a0003f5 	mov	w21, w0
   8b840:	52800ff4 	mov	w20, #0x7f                  	// #127
   8b844:	12800fd3 	mov	w19, #0xffffff81            	// #-127
   8b848:	51000721 	sub	w1, w25, #0x1
   8b84c:	71000c3f 	cmp	w1, #0x3
   8b850:	1a803339 	csel	w25, w25, w0, cc	// cc = lo, ul, last
   8b854:	14000023 	b	8b8e0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xe0>
   8b858:	39401462 	ldrb	w2, [x3, #5]
   8b85c:	39401461 	ldrb	w1, [x3, #5]
   8b860:	39401065 	ldrb	w5, [x3, #4]
   8b864:	d3780c42 	ubfiz	x2, x2, #8, #4
   8b868:	39401860 	ldrb	w0, [x3, #6]
   8b86c:	d3441c23 	ubfx	x3, x1, #4, #4
   8b870:	3945e6e1 	ldrb	w1, [x23, #377]
   8b874:	2a050042 	orr	w2, w2, w5
   8b878:	2a001060 	orr	w0, w3, w0, lsl #4
   8b87c:	34000561 	cbz	w1, 8b928 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x128>
   8b880:	7942fae1 	ldrh	w1, [x23, #380]
   8b884:	7902fae0 	strh	w0, [x23, #380]
   8b888:	7942f6e5 	ldrh	w5, [x23, #378]
   8b88c:	7902f6e2 	strh	w2, [x23, #378]
   8b890:	4b010003 	sub	w3, w0, w1
   8b894:	7101fc7f 	cmp	w3, #0x7f
   8b898:	1a94d063 	csel	w3, w3, w20, le
   8b89c:	3101fc7f 	cmn	w3, #0x7f
   8b8a0:	1a93a063 	csel	w3, w3, w19, ge	// ge = tcont
   8b8a4:	7100009f 	cmp	w4, #0x0
   8b8a8:	7a450040 	ccmp	w2, w5, #0x0, eq	// eq = none
   8b8ac:	54000681 	b.ne	8b97c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x17c>  // b.any
   8b8b0:	6b01001f 	cmp	w0, w1
   8b8b4:	540000e0 	b.eq	8b8d0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xd0>  // b.none
   8b8b8:	52800002 	mov	w2, #0x0                   	// #0
   8b8bc:	f940bae0 	ldr	x0, [x23, #368]
   8b8c0:	b4000280 	cbz	x0, 8b910 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x110>
   8b8c4:	3945e2e1 	ldrb	w1, [x23, #376]
   8b8c8:	52800004 	mov	w4, #0x0                   	// #0
   8b8cc:	940044b9 	bl	9cbb0 <CMouseDevice::ReportHandler(unsigned int, int, int, int)>
   8b8d0:	110006d6 	add	w22, w22, #0x1
   8b8d4:	52800004 	mov	w4, #0x0                   	// #0
   8b8d8:	6b16033f 	cmp	w25, w22
   8b8dc:	54000360 	b.eq	8b948 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x148>  // b.none
   8b8e0:	d37d7ec3 	ubfiz	x3, x22, #3, #32
   8b8e4:	8b364063 	add	x3, x3, w22, uxtw
   8b8e8:	8b030303 	add	x3, x24, x3
   8b8ec:	39408c60 	ldrb	w0, [x3, #35]
   8b8f0:	91008063 	add	x3, x3, #0x20
   8b8f4:	363ffb20 	tbz	w0, #7, 8b858 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x58>
   8b8f8:	3905e6ff 	strb	wzr, [x23, #377]
   8b8fc:	34fffea4 	cbz	w4, 8b8d0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xd0>
   8b900:	f940bae0 	ldr	x0, [x23, #368]
   8b904:	52800003 	mov	w3, #0x0                   	// #0
   8b908:	52800002 	mov	w2, #0x0                   	// #0
   8b90c:	b5fffdc0 	cbnz	x0, 8b8c4 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xc4>
   8b910:	f0000121 	adrp	x1, b2000 <_etext+0x1158>
   8b914:	f0000120 	adrp	x0, b2000 <_etext+0x1158>
   8b918:	912f4021 	add	x1, x1, #0xbd0
   8b91c:	912fa000 	add	x0, x0, #0xbe8
   8b920:	52802b42 	mov	w2, #0x15a                 	// #346
   8b924:	94004907 	bl	9dd40 <assertion_failed>
   8b928:	3905e6f5 	strb	w21, [x23, #377]
   8b92c:	7902f6e2 	strh	w2, [x23, #378]
   8b930:	7902fae0 	strh	w0, [x23, #380]
   8b934:	35fffe64 	cbnz	w4, 8b900 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x100>
   8b938:	110006d6 	add	w22, w22, #0x1
   8b93c:	52800004 	mov	w4, #0x0                   	// #0
   8b940:	6b16033f 	cmp	w25, w22
   8b944:	54fffce1 	b.ne	8b8e0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xe0>  // b.any
   8b948:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b94c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8b950:	a94363f7 	ldp	x23, x24, [sp, #48]
   8b954:	f94023f9 	ldr	x25, [sp, #64]
   8b958:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8b95c:	d65f03c0 	ret
   8b960:	350000a4 	cbnz	w4, 8b974 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x174>
   8b964:	d3410400 	ubfx	x0, x0, #1, #1
   8b968:	52800024 	mov	w4, #0x1                   	// #1
   8b96c:	3905e2e0 	strb	w0, [x23, #376]
   8b970:	17ffffb0 	b	8b830 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x30>
   8b974:	52800004 	mov	w4, #0x0                   	// #0
   8b978:	17ffffae 	b	8b830 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x30>
   8b97c:	4b050042 	sub	w2, w2, w5
   8b980:	7101fc5f 	cmp	w2, #0x7f
   8b984:	1a94d042 	csel	w2, w2, w20, le
   8b988:	3101fc5f 	cmn	w2, #0x7f
   8b98c:	1a93a042 	csel	w2, w2, w19, ge	// ge = tcont
   8b990:	17ffffcb 	b	8b8bc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xbc>
   8b994:	d503201f 	nop
   8b998:	d503201f 	nop
   8b99c:	d503201f 	nop

000000000008b9a0 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)>:
   8b9a0:	7101005f 	cmp	w2, #0x40
   8b9a4:	fa400824 	ccmp	x1, #0x0, #0x4, eq	// eq = none
   8b9a8:	54000041 	b.ne	8b9b0 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x10>  // b.any
   8b9ac:	d65f03c0 	ret
   8b9b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8b9b4:	910003fd 	mov	x29, sp
   8b9b8:	f9400002 	ldr	x2, [x0]
   8b9bc:	a90153f3 	stp	x19, x20, [sp, #16]
   8b9c0:	aa0003f3 	mov	x19, x0
   8b9c4:	aa0103f4 	mov	x20, x1
   8b9c8:	f9404c42 	ldr	x2, [x2, #152]
   8b9cc:	d63f0040 	blr	x2
   8b9d0:	f940a662 	ldr	x2, [x19, #328]
   8b9d4:	b40000a2 	cbz	x2, 8b9e8 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x48>
   8b9d8:	b9415660 	ldr	w0, [x19, #340]
   8b9dc:	91012261 	add	x1, x19, #0x48
   8b9e0:	51000400 	sub	w0, w0, #0x1
   8b9e4:	d63f0040 	blr	x2
   8b9e8:	f940ba60 	ldr	x0, [x19, #368]
   8b9ec:	b40000c0 	cbz	x0, 8ba04 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x64>
   8b9f0:	aa1403e1 	mov	x1, x20
   8b9f4:	aa1303e0 	mov	x0, x19
   8b9f8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8b9fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8ba00:	17ffff80 	b	8b800 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>
   8ba04:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ba08:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8ba0c:	d65f03c0 	ret

000000000008ba10 <CUSBGamePadPS4Device::SendLedRumbleCommand()>:
   8ba10:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8ba14:	910003fd 	mov	x29, sp
   8ba18:	52800003 	mov	w3, #0x0                   	// #0
   8ba1c:	52800402 	mov	w2, #0x20                  	// #32
   8ba20:	f940b404 	ldr	x4, [x0, #360]
   8ba24:	f9000bf3 	str	x19, [sp, #16]
   8ba28:	39456405 	ldrb	w5, [x0, #345]
   8ba2c:	39000c85 	strb	w5, [x4, #3]
   8ba30:	39456c05 	ldrb	w5, [x0, #347]
   8ba34:	f940b404 	ldr	x4, [x0, #360]
   8ba38:	39001085 	strb	w5, [x4, #4]
   8ba3c:	39456805 	ldrb	w5, [x0, #346]
   8ba40:	f940b404 	ldr	x4, [x0, #360]
   8ba44:	39001485 	strb	w5, [x4, #5]
   8ba48:	39457005 	ldrb	w5, [x0, #348]
   8ba4c:	f940b404 	ldr	x4, [x0, #360]
   8ba50:	39001885 	strb	w5, [x4, #6]
   8ba54:	39457405 	ldrb	w5, [x0, #349]
   8ba58:	f940b404 	ldr	x4, [x0, #360]
   8ba5c:	39001c85 	strb	w5, [x4, #7]
   8ba60:	39457805 	ldrb	w5, [x0, #350]
   8ba64:	f940b404 	ldr	x4, [x0, #360]
   8ba68:	39002085 	strb	w5, [x4, #8]
   8ba6c:	39457c05 	ldrb	w5, [x0, #351]
   8ba70:	f940b404 	ldr	x4, [x0, #360]
   8ba74:	39002485 	strb	w5, [x4, #9]
   8ba78:	39458005 	ldrb	w5, [x0, #352]
   8ba7c:	f940b404 	ldr	x4, [x0, #360]
   8ba80:	39002885 	strb	w5, [x4, #10]
   8ba84:	f940b401 	ldr	x1, [x0, #360]
   8ba88:	94000856 	bl	8dbe0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   8ba8c:	72001c1f 	tst	w0, #0xff
   8ba90:	2a0003f3 	mov	w19, w0
   8ba94:	540000a0 	b.eq	8baa8 <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x98>  // b.none
   8ba98:	2a1303e0 	mov	w0, w19
   8ba9c:	f9400bf3 	ldr	x19, [sp, #16]
   8baa0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8baa4:	d65f03c0 	ret
   8baa8:	94004fda 	bl	9fa10 <CLogger::Get()>
   8baac:	f0000141 	adrp	x1, b6000 <From+0x98>
   8bab0:	91168021 	add	x1, x1, #0x5a0
   8bab4:	f0000123 	adrp	x3, b2000 <_etext+0x1158>
   8bab8:	9100a021 	add	x1, x1, #0x28
   8babc:	912ec063 	add	x3, x3, #0xbb0
   8bac0:	52800022 	mov	w2, #0x1                   	// #1
   8bac4:	940051bf 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8bac8:	2a1303e0 	mov	w0, w19
   8bacc:	f9400bf3 	ldr	x19, [sp, #16]
   8bad0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8bad4:	d65f03c0 	ret
   8bad8:	d503201f 	nop
   8badc:	d503201f 	nop

000000000008bae0 <CUSBGamePadPS4Device::DisableTouchpad()>:
   8bae0:	b0000180 	adrp	x0, bc000 <font_data+0x9a8>
   8bae4:	3935a01f 	strb	wzr, [x0, #3432]
   8bae8:	d65f03c0 	ret
   8baec:	d503201f 	nop

000000000008baf0 <CUSBGamePadPS4Device::Configure()>:
   8baf0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8baf4:	910003fd 	mov	x29, sp
   8baf8:	a90153f3 	stp	x19, x20, [sp, #16]
   8bafc:	39456014 	ldrb	w20, [x0, #344]
   8bb00:	34000754 	cbz	w20, 8bbe8 <CUSBGamePadPS4Device::Configure()+0xf8>
   8bb04:	52800801 	mov	w1, #0x40                  	// #64
   8bb08:	aa0003f3 	mov	x19, x0
   8bb0c:	7902a001 	strh	w1, [x0, #336]
   8bb10:	94003b40 	bl	9a810 <CUSBGamePadDevice::Configure()>
   8bb14:	72001c14 	ands	w20, w0, #0xff
   8bb18:	54000880 	b.eq	8bc28 <CUSBGamePadPS4Device::Configure()+0x138>  // b.none
   8bb1c:	b0000180 	adrp	x0, bc000 <font_data+0x9a8>
   8bb20:	3975a000 	ldrb	w0, [x0, #3432]
   8bb24:	35000720 	cbnz	w0, 8bc08 <CUSBGamePadPS4Device::Configure()+0x118>
   8bb28:	528002c3 	mov	w3, #0x16                  	// #22
   8bb2c:	52800025 	mov	w5, #0x1                   	// #1
   8bb30:	528000c4 	mov	w4, #0x6                   	// #6
   8bb34:	91014261 	add	x1, x19, #0x50
   8bb38:	91026262 	add	x2, x19, #0x98
   8bb3c:	52801fe0 	mov	w0, #0xff                  	// #255
   8bb40:	b9010e65 	str	w5, [x19, #268]
   8bb44:	b9004a64 	str	w4, [x19, #72]
   8bb48:	b9012a63 	str	w3, [x19, #296]
   8bb4c:	d503201f 	nop
   8bb50:	2900003f 	stp	wzr, w0, [x1]
   8bb54:	91003021 	add	x1, x1, #0xc
   8bb58:	eb01005f 	cmp	x2, x1
   8bb5c:	54ffffa1 	b.ne	8bb50 <CUSBGamePadPS4Device::Configure()+0x60>  // b.any
   8bb60:	d2800400 	mov	x0, #0x20                  	// #32
   8bb64:	940071c7 	bl	a8280 <operator new[](unsigned long)>
   8bb68:	d2800402 	mov	x2, #0x20                  	// #32
   8bb6c:	52800001 	mov	w1, #0x0                   	// #0
   8bb70:	f900b660 	str	x0, [x19, #360]
   8bb74:	94006f1d 	bl	a77e8 <memset>
   8bb78:	f940b664 	ldr	x4, [x19, #360]
   8bb7c:	528000a7 	mov	w7, #0x5                   	// #5
   8bb80:	528000e6 	mov	w6, #0x7                   	// #7
   8bb84:	52800085 	mov	w5, #0x4                   	// #4
   8bb88:	128001e3 	mov	w3, #0xfffffff0            	// #-16
   8bb8c:	12b00002 	mov	w2, #0x7fffffff            	// #2147483647
   8bb90:	12800001 	mov	w1, #0xffffffff            	// #-1
   8bb94:	aa1303e0 	mov	x0, x19
   8bb98:	39000087 	strb	w7, [x4]
   8bb9c:	f940b664 	ldr	x4, [x19, #360]
   8bba0:	39000486 	strb	w6, [x4, #1]
   8bba4:	f940b664 	ldr	x4, [x19, #360]
   8bba8:	39000885 	strb	w5, [x4, #2]
   8bbac:	39056663 	strb	w3, [x19, #345]
   8bbb0:	7902b67f 	strh	wzr, [x19, #346]
   8bbb4:	b9015e62 	str	w2, [x19, #348]
   8bbb8:	39058261 	strb	w1, [x19, #352]
   8bbbc:	97ffff95 	bl	8ba10 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   8bbc0:	52801f40 	mov	w0, #0xfa                  	// #250
   8bbc4:	7902ba7f 	strh	wzr, [x19, #348]
   8bbc8:	39057a7f 	strb	wzr, [x19, #350]
   8bbcc:	94006ced 	bl	a6f80 <CTimer::SimpleMsDelay(unsigned int)>
   8bbd0:	aa1303e0 	mov	x0, x19
   8bbd4:	97ffff8f 	bl	8ba10 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   8bbd8:	aa1303e0 	mov	x0, x19
   8bbdc:	a94153f3 	ldp	x19, x20, [sp, #16]
   8bbe0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8bbe4:	1400088f 	b	8de20 <CUSBHIDDevice::StartRequest()>
   8bbe8:	f0000141 	adrp	x1, b6000 <From+0x98>
   8bbec:	91168021 	add	x1, x1, #0x5a0
   8bbf0:	9100a021 	add	x1, x1, #0x28
   8bbf4:	97fffb47 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   8bbf8:	2a1403e0 	mov	w0, w20
   8bbfc:	a94153f3 	ldp	x19, x20, [sp, #16]
   8bc00:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8bc04:	d65f03c0 	ret
   8bc08:	d2800a00 	mov	x0, #0x50                  	// #80
   8bc0c:	94007195 	bl	a8260 <operator new(unsigned long)>
   8bc10:	aa0003f4 	mov	x20, x0
   8bc14:	52800002 	mov	w2, #0x0                   	// #0
   8bc18:	52800021 	mov	w1, #0x1                   	// #1
   8bc1c:	94004385 	bl	9ca30 <CMouseDevice::CMouseDevice(unsigned int, bool)>
   8bc20:	f900ba74 	str	x20, [x19, #368]
   8bc24:	17ffffc1 	b	8bb28 <CUSBGamePadPS4Device::Configure()+0x38>
   8bc28:	94004f7a 	bl	9fa10 <CLogger::Get()>
   8bc2c:	f0000141 	adrp	x1, b6000 <From+0x98>
   8bc30:	91168021 	add	x1, x1, #0x5a0
   8bc34:	f0000123 	adrp	x3, b2000 <_etext+0x1158>
   8bc38:	9100a021 	add	x1, x1, #0x28
   8bc3c:	912d0063 	add	x3, x3, #0xb40
   8bc40:	52800022 	mov	w2, #0x1                   	// #1
   8bc44:	9400515f 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8bc48:	2a1403e0 	mov	w0, w20
   8bc4c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8bc50:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8bc54:	d65f03c0 	ret
	...

000000000008bc60 <CUSBGamePadPS4Device::GetProperties()>:
   8bc60:	528007e0 	mov	w0, #0x3f                  	// #63
   8bc64:	d65f03c0 	ret
	...

000000000008bc70 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   8bc70:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8bc74:	910003fd 	mov	x29, sp
   8bc78:	f0000141 	adrp	x1, b6000 <From+0x98>
   8bc7c:	9117a021 	add	x1, x1, #0x5e8
   8bc80:	f9000bf3 	str	x19, [sp, #16]
   8bc84:	aa0003f3 	mov	x19, x0
   8bc88:	f940b000 	ldr	x0, [x0, #352]
   8bc8c:	f9000261 	str	x1, [x19]
   8bc90:	b4000040 	cbz	x0, 8bc98 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x28>
   8bc94:	9400718f 	bl	a82d0 <operator delete[](void*)>
   8bc98:	aa1303e0 	mov	x0, x19
   8bc9c:	f900b27f 	str	xzr, [x19, #352]
   8bca0:	f9400bf3 	ldr	x19, [sp, #16]
   8bca4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8bca8:	14003b56 	b	9aa00 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   8bcac:	d503201f 	nop

000000000008bcb0 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   8bcb0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8bcb4:	910003fd 	mov	x29, sp
   8bcb8:	f0000141 	adrp	x1, b6000 <From+0x98>
   8bcbc:	9117a021 	add	x1, x1, #0x5e8
   8bcc0:	f9000bf3 	str	x19, [sp, #16]
   8bcc4:	aa0003f3 	mov	x19, x0
   8bcc8:	f940b000 	ldr	x0, [x0, #352]
   8bccc:	f9000261 	str	x1, [x19]
   8bcd0:	b4000040 	cbz	x0, 8bcd8 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x28>
   8bcd4:	9400717f 	bl	a82d0 <operator delete[](void*)>
   8bcd8:	aa1303e0 	mov	x0, x19
   8bcdc:	f900b27f 	str	xzr, [x19, #352]
   8bce0:	94003b48 	bl	9aa00 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   8bce4:	aa1303e0 	mov	x0, x19
   8bce8:	d2802e01 	mov	x1, #0x170                 	// #368
   8bcec:	f9400bf3 	ldr	x19, [sp, #16]
   8bcf0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8bcf4:	14007183 	b	a8300 <operator delete(void*, unsigned long)>
   8bcf8:	d503201f 	nop
   8bcfc:	d503201f 	nop

000000000008bd00 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>:
   8bd00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8bd04:	910003fd 	mov	x29, sp
   8bd08:	a90153f3 	stp	x19, x20, [sp, #16]
   8bd0c:	aa0003f3 	mov	x19, x0
   8bd10:	12001c54 	and	w20, w2, #0xff
   8bd14:	94003b27 	bl	9a9b0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   8bd18:	f0000140 	adrp	x0, b6000 <From+0x98>
   8bd1c:	9117a000 	add	x0, x0, #0x5e8
   8bd20:	39056274 	strb	w20, [x19, #344]
   8bd24:	f900b27f 	str	xzr, [x19, #352]
   8bd28:	f9000260 	str	x0, [x19]
   8bd2c:	7902d27f 	strh	wzr, [x19, #360]
   8bd30:	a94153f3 	ldp	x19, x20, [sp, #16]
   8bd34:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8bd38:	d65f03c0 	ret
   8bd3c:	d503201f 	nop

000000000008bd40 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>:
   8bd40:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8bd44:	910003fd 	mov	x29, sp
   8bd48:	b40003c0 	cbz	x0, 8bdc0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x80>
   8bd4c:	7100805f 	cmp	w2, #0x20
   8bd50:	54000448 	b.hi	8bdd8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x98>  // b.pmore
   8bd54:	aa0003e3 	mov	x3, x0
   8bd58:	52800000 	mov	w0, #0x0                   	// #0
   8bd5c:	34000222 	cbz	w2, 8bda0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x60>
   8bd60:	53037c20 	lsr	w0, w1, #3
   8bd64:	12000824 	and	w4, w1, #0x7
   8bd68:	b8604860 	ldr	w0, [x3, w0, uxtw]
   8bd6c:	53037c21 	lsr	w1, w1, #3
   8bd70:	7100605f 	cmp	w2, #0x18
   8bd74:	8b010063 	add	x3, x3, x1
   8bd78:	1ac42400 	lsr	w0, w0, w4
   8bd7c:	54000169 	b.ls	8bda8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x68>  // b.plast
   8bd80:	b8403063 	ldur	w3, [x3, #3]
   8bd84:	51006042 	sub	w2, w2, #0x18
   8bd88:	52800021 	mov	w1, #0x1                   	// #1
   8bd8c:	1ac22021 	lsl	w1, w1, w2
   8bd90:	51000421 	sub	w1, w1, #0x1
   8bd94:	1ac42462 	lsr	w2, w3, w4
   8bd98:	0a020021 	and	w1, w1, w2
   8bd9c:	33081c20 	bfi	w0, w1, #24, #8
   8bda0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8bda4:	d65f03c0 	ret
   8bda8:	52800021 	mov	w1, #0x1                   	// #1
   8bdac:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8bdb0:	1ac22021 	lsl	w1, w1, w2
   8bdb4:	51000421 	sub	w1, w1, #0x1
   8bdb8:	0a000020 	and	w0, w1, w0
   8bdbc:	d65f03c0 	ret
   8bdc0:	f0000121 	adrp	x1, b2000 <_etext+0x1158>
   8bdc4:	f0000120 	adrp	x0, b2000 <_etext+0x1158>
   8bdc8:	91300021 	add	x1, x1, #0xc00
   8bdcc:	91306000 	add	x0, x0, #0xc18
   8bdd0:	52802642 	mov	w2, #0x132                 	// #306
   8bdd4:	940047db 	bl	9dd40 <assertion_failed>
   8bdd8:	f0000121 	adrp	x1, b2000 <_etext+0x1158>
   8bddc:	f0000120 	adrp	x0, b2000 <_etext+0x1158>
   8bde0:	91300021 	add	x1, x1, #0xc00
   8bde4:	9130a000 	add	x0, x0, #0xc28
   8bde8:	52802662 	mov	w2, #0x133                 	// #307
   8bdec:	940047d5 	bl	9dd40 <assertion_failed>

000000000008bdf0 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>:
   8bdf0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8bdf4:	910003fd 	mov	x29, sp
   8bdf8:	b40004e0 	cbz	x0, 8be94 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)+0xa4>
   8bdfc:	7100805f 	cmp	w2, #0x20
   8be00:	54000568 	b.hi	8beac <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)+0xbc>  // b.pmore
   8be04:	aa0003e3 	mov	x3, x0
   8be08:	52800000 	mov	w0, #0x0                   	// #0
   8be0c:	34000362 	cbz	w2, 8be78 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)+0x88>
   8be10:	53037c20 	lsr	w0, w1, #3
   8be14:	12000824 	and	w4, w1, #0x7
   8be18:	b8604860 	ldr	w0, [x3, w0, uxtw]
   8be1c:	53037c21 	lsr	w1, w1, #3
   8be20:	7100605f 	cmp	w2, #0x18
   8be24:	8b010063 	add	x3, x3, x1
   8be28:	1ac42400 	lsr	w0, w0, w4
   8be2c:	540002a9 	b.ls	8be80 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)+0x90>  // b.plast
   8be30:	b8403063 	ldur	w3, [x3, #3]
   8be34:	51006045 	sub	w5, w2, #0x18
   8be38:	52800021 	mov	w1, #0x1                   	// #1
   8be3c:	1ac52021 	lsl	w1, w1, w5
   8be40:	7100805f 	cmp	w2, #0x20
   8be44:	51000421 	sub	w1, w1, #0x1
   8be48:	1ac42463 	lsr	w3, w3, w4
   8be4c:	0a030021 	and	w1, w1, w3
   8be50:	33081c20 	bfi	w0, w1, #24, #8
   8be54:	54000120 	b.eq	8be78 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)+0x88>  // b.none
   8be58:	52800021 	mov	w1, #0x1                   	// #1
   8be5c:	51000443 	sub	w3, w2, #0x1
   8be60:	1ac22022 	lsl	w2, w1, w2
   8be64:	1ac32021 	lsl	w1, w1, w3
   8be68:	4b0203e2 	neg	w2, w2
   8be6c:	6a00003f 	tst	w1, w0
   8be70:	2a020002 	orr	w2, w0, w2
   8be74:	1a801040 	csel	w0, w2, w0, ne	// ne = any
   8be78:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8be7c:	d65f03c0 	ret
   8be80:	52800021 	mov	w1, #0x1                   	// #1
   8be84:	1ac22021 	lsl	w1, w1, w2
   8be88:	51000421 	sub	w1, w1, #0x1
   8be8c:	0a000020 	and	w0, w1, w0
   8be90:	17fffff2 	b	8be58 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)+0x68>
   8be94:	f0000121 	adrp	x1, b2000 <_etext+0x1158>
   8be98:	f0000120 	adrp	x0, b2000 <_etext+0x1158>
   8be9c:	91300021 	add	x1, x1, #0xc00
   8bea0:	91306000 	add	x0, x0, #0xc18
   8bea4:	52802aa2 	mov	w2, #0x155                 	// #341
   8bea8:	940047a6 	bl	9dd40 <assertion_failed>
   8beac:	f0000121 	adrp	x1, b2000 <_etext+0x1158>
   8beb0:	f0000120 	adrp	x0, b2000 <_etext+0x1158>
   8beb4:	91300021 	add	x1, x1, #0xc00
   8beb8:	9130a000 	add	x0, x0, #0xc28
   8bebc:	52802ac2 	mov	w2, #0x156                 	// #342
   8bec0:	940047a0 	bl	9dd40 <assertion_failed>
   8bec4:	d503201f 	nop
   8bec8:	d503201f 	nop
   8becc:	d503201f 	nop

000000000008bed0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>:
   8bed0:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   8bed4:	910003fd 	mov	x29, sp
   8bed8:	a90153f3 	stp	x19, x20, [sp, #16]
   8bedc:	f940b014 	ldr	x20, [x0, #352]
   8bee0:	a9025bf5 	stp	x21, x22, [sp, #32]
   8bee4:	b40016b4 	cbz	x20, 8c1b8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2e8>
   8bee8:	aa0003f6 	mov	x22, x0
   8beec:	7942d013 	ldrh	w19, [x0, #360]
   8bef0:	a90573fb 	stp	x27, x28, [sp, #80]
   8bef4:	340022f3 	cbz	w19, 8c350 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x480>
   8bef8:	52865d65 	mov	w5, #0x32eb                	// #13035
   8befc:	72bf1485 	movk	w5, #0xf8a4, lsl #16
   8bf00:	aa0103e4 	mov	x4, x1
   8bf04:	2a0503ea 	mov	w10, w5
   8bf08:	a90363f7 	stp	x23, x24, [sp, #48]
   8bf0c:	52800001 	mov	w1, #0x0                   	// #0
   8bf10:	2a0503e9 	mov	w9, w5
   8bf14:	52800007 	mov	w7, #0x0                   	// #0
   8bf18:	5280000b 	mov	w11, #0x0                   	// #0
   8bf1c:	5280001b 	mov	w27, #0x0                   	// #0
   8bf20:	52800018 	mov	w24, #0x0                   	// #0
   8bf24:	a9046bf9 	stp	x25, x26, [sp, #64]
   8bf28:	52800017 	mov	w23, #0x0                   	// #0
   8bf2c:	2a0503fa 	mov	w26, w5
   8bf30:	52800019 	mov	w25, #0x0                   	// #0
   8bf34:	91043015 	add	x21, x0, #0x10c
   8bf38:	39c00282 	ldrsb	w2, [x20]
   8bf3c:	12000440 	and	w0, w2, #0x3
   8bf40:	7100041f 	cmp	w0, #0x1
   8bf44:	54000ce0 	b.eq	8c0e0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x210>  // b.none
   8bf48:	7100081f 	cmp	w0, #0x2
   8bf4c:	54000bc0 	b.eq	8c0c4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1f4>  // b.none
   8bf50:	34000b00 	cbz	w0, 8c0b0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1e0>
   8bf54:	39c00e8d 	ldrsb	w13, [x20, #3]
   8bf58:	51001673 	sub	w19, w19, #0x5
   8bf5c:	91001694 	add	x20, x20, #0x5
   8bf60:	12003e73 	and	w19, w19, #0xffff
   8bf64:	38dfd283 	ldursb	w3, [x20, #-3]
   8bf68:	38dff280 	ldursb	w0, [x20, #-1]
   8bf6c:	53103dad 	lsl	w13, w13, #16
   8bf70:	38dfc28e 	ldursb	w14, [x20, #-4]
   8bf74:	2a0321a3 	orr	w3, w13, w3, lsl #8
   8bf78:	2a0061c0 	orr	w0, w14, w0, lsl #24
   8bf7c:	2a000063 	orr	w3, w3, w0
   8bf80:	121e1442 	and	w2, w2, #0xfc
   8bf84:	7102105f 	cmp	w2, #0x84
   8bf88:	54000800 	b.eq	8c088 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1b8>  // b.none
   8bf8c:	7100d05f 	cmp	w2, #0x34
   8bf90:	54000c60 	b.eq	8c11c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x24c>  // b.none
   8bf94:	5400036c 	b.gt	8c000 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x130>
   8bf98:	7100505f 	cmp	w2, #0x14
   8bf9c:	54000ac0 	b.eq	8c0f4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x224>  // b.none
   8bfa0:	5400020d 	b.le	8bfe0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x110>
   8bfa4:	7100905f 	cmp	w2, #0x24
   8bfa8:	1a83135a 	csel	w26, w26, w3, ne	// ne = any
   8bfac:	35fffc73 	cbnz	w19, 8bf38 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   8bfb0:	11001ee8 	add	w8, w23, #0x7
   8bfb4:	a94363f7 	ldp	x23, x24, [sp, #48]
   8bfb8:	d3434913 	ubfx	x19, x8, #3, #16
   8bfbc:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8bfc0:	b9004adb 	str	w27, [x22, #72]
   8bfc4:	b9010ecb 	str	w11, [x22, #268]
   8bfc8:	7902a2d3 	strh	w19, [x22, #336]
   8bfcc:	a94153f3 	ldp	x19, x20, [sp, #16]
   8bfd0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8bfd4:	a94573fb 	ldp	x27, x28, [sp, #80]
   8bfd8:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   8bfdc:	d65f03c0 	ret
   8bfe0:	7100105f 	cmp	w2, #0x4
   8bfe4:	540001c1 	b.ne	8c01c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x14c>  // b.any
   8bfe8:	7100043f 	cmp	w1, #0x1
   8bfec:	52800040 	mov	w0, #0x2                   	// #2
   8bff0:	7a490860 	ccmp	w3, #0x9, #0x0, eq	// eq = none
   8bff4:	1a801021 	csel	w1, w1, w0, ne	// ne = any
   8bff8:	35fffa13 	cbnz	w19, 8bf38 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   8bffc:	17ffffed 	b	8bfb0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe0>
   8c000:	7102005f 	cmp	w2, #0x80
   8c004:	540007e0 	b.eq	8c100 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x230>  // b.none
   8c008:	540002ed 	b.le	8c064 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x194>
   8c00c:	7102505f 	cmp	w2, #0x94
   8c010:	1a831339 	csel	w25, w25, w3, ne	// ne = any
   8c014:	35fff933 	cbnz	w19, 8bf38 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   8c018:	17ffffe6 	b	8bfb0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe0>
   8c01c:	7100205f 	cmp	w2, #0x8
   8c020:	54fffc61 	b.ne	8bfac <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xdc>  // b.any
   8c024:	7100d87f 	cmp	w3, #0x36
   8c028:	5400010c 	b.gt	8c048 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x178>
   8c02c:	7100bc7f 	cmp	w3, #0x2f
   8c030:	54000bac 	b.gt	8c1a4 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2d4>
   8c034:	51001063 	sub	w3, w3, #0x4
   8c038:	7100047f 	cmp	w3, #0x1
   8c03c:	1a9f8421 	csinc	w1, w1, wzr, hi	// hi = pmore
   8c040:	35fff7d3 	cbnz	w19, 8bf38 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   8c044:	17ffffdb 	b	8bfb0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe0>
   8c048:	7100e47f 	cmp	w3, #0x39
   8c04c:	54fffb01 	b.ne	8bfac <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xdc>  // b.any
   8c050:	7100043f 	cmp	w1, #0x1
   8c054:	52800080 	mov	w0, #0x4                   	// #4
   8c058:	1a801021 	csel	w1, w1, w0, ne	// ne = any
   8c05c:	35fff6f3 	cbnz	w19, 8bf38 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   8c060:	17ffffd4 	b	8bfb0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe0>
   8c064:	7101105f 	cmp	w2, #0x44
   8c068:	54000081 	b.ne	8c078 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1a8>  // b.any
   8c06c:	2a0303e5 	mov	w5, w3
   8c070:	35fff653 	cbnz	w19, 8bf38 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   8c074:	17ffffcf 	b	8bfb0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe0>
   8c078:	7101d05f 	cmp	w2, #0x74
   8c07c:	1a831318 	csel	w24, w24, w3, ne	// ne = any
   8c080:	35fff5d3 	cbnz	w19, 8bf38 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   8c084:	17ffffcb 	b	8bfb0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe0>
   8c088:	35000aa7 	cbnz	w7, 8c1dc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x30c>
   8c08c:	b4000804 	cbz	x4, 8c18c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2bc>
   8c090:	39400080 	ldrb	w0, [x4]
   8c094:	7100001f 	cmp	w0, #0x0
   8c098:	7a431004 	ccmp	w0, w3, #0x4, ne	// ne = any
   8c09c:	54000aa1 	b.ne	8c1f0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x320>  // b.any
   8c0a0:	2a0303e7 	mov	w7, w3
   8c0a4:	52800117 	mov	w23, #0x8                   	// #8
   8c0a8:	35fff493 	cbnz	w19, 8bf38 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   8c0ac:	17ffffc1 	b	8bfb0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe0>
   8c0b0:	51000673 	sub	w19, w19, #0x1
   8c0b4:	91000694 	add	x20, x20, #0x1
   8c0b8:	12003e73 	and	w19, w19, #0xffff
   8c0bc:	52800003 	mov	w3, #0x0                   	// #0
   8c0c0:	17ffffb0 	b	8bf80 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb0>
   8c0c4:	39400680 	ldrb	w0, [x20, #1]
   8c0c8:	51000e73 	sub	w19, w19, #0x3
   8c0cc:	91000e94 	add	x20, x20, #0x3
   8c0d0:	12003e73 	and	w19, w19, #0xffff
   8c0d4:	38dff283 	ldursb	w3, [x20, #-1]
   8c0d8:	2a032003 	orr	w3, w0, w3, lsl #8
   8c0dc:	17ffffa9 	b	8bf80 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb0>
   8c0e0:	51000a73 	sub	w19, w19, #0x2
   8c0e4:	39c00683 	ldrsb	w3, [x20, #1]
   8c0e8:	91000a94 	add	x20, x20, #0x2
   8c0ec:	12003e73 	and	w19, w19, #0xffff
   8c0f0:	17ffffa4 	b	8bf80 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xb0>
   8c0f4:	2a0303e9 	mov	w9, w3
   8c0f8:	35fff213 	cbnz	w19, 8bf38 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   8c0fc:	17ffffad 	b	8bfb0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe0>
   8c100:	12000463 	and	w3, w3, #0x3
   8c104:	1b197f0d 	mul	w13, w24, w25
   8c108:	7100087f 	cmp	w3, #0x2
   8c10c:	540000e0 	b.eq	8c128 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x258>  // b.none
   8c110:	0b0d02f7 	add	w23, w23, w13
   8c114:	35fff133 	cbnz	w19, 8bf38 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   8c118:	17ffffa6 	b	8bfb0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe0>
   8c11c:	2a0303ea 	mov	w10, w3
   8c120:	35fff0d3 	cbnz	w19, 8bf38 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   8c124:	17ffffa3 	b	8bfb0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe0>
   8c128:	71000c3f 	cmp	w1, #0x3
   8c12c:	54000680 	b.eq	8c1fc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x32c>  // b.none
   8c130:	7100103f 	cmp	w1, #0x4
   8c134:	54000ca0 	b.eq	8c2c8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3f8>  // b.none
   8c138:	7100083f 	cmp	w1, #0x2
   8c13c:	54fffea1 	b.ne	8c110 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x240>  // b.any
   8c140:	2a1703e1 	mov	w1, w23
   8c144:	2a0d03e2 	mov	w2, w13
   8c148:	b9012ad9 	str	w25, [x22, #296]
   8c14c:	aa0403e0 	mov	x0, x4
   8c150:	f90037e4 	str	x4, [sp, #104]
   8c154:	b90073ed 	str	w13, [sp, #112]
   8c158:	290f9feb 	stp	w11, w7, [sp, #124]
   8c15c:	2910abe5 	stp	w5, w10, [sp, #132]
   8c160:	b9008fe9 	str	w9, [sp, #140]
   8c164:	97fffef7 	bl	8bd40 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   8c168:	b94073ed 	ldr	w13, [sp, #112]
   8c16c:	52800021 	mov	w1, #0x1                   	// #1
   8c170:	b9012ec0 	str	w0, [x22, #300]
   8c174:	294f9feb 	ldp	w11, w7, [sp, #124]
   8c178:	2950abe5 	ldp	w5, w10, [sp, #132]
   8c17c:	0b0d02f7 	add	w23, w23, w13
   8c180:	b9408fe9 	ldr	w9, [sp, #140]
   8c184:	f94037e4 	ldr	x4, [sp, #104]
   8c188:	17ffffe3 	b	8c114 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x244>
   8c18c:	d0000121 	adrp	x1, b2000 <_etext+0x1158>
   8c190:	d0000120 	adrp	x0, b2000 <_etext+0x1158>
   8c194:	91300021 	add	x1, x1, #0xc00
   8c198:	91306000 	add	x0, x0, #0xc18
   8c19c:	52802642 	mov	w2, #0x132                 	// #306
   8c1a0:	940046e8 	bl	9dd40 <assertion_failed>
   8c1a4:	7100043f 	cmp	w1, #0x1
   8c1a8:	52800060 	mov	w0, #0x3                   	// #3
   8c1ac:	1a801021 	csel	w1, w1, w0, ne	// ne = any
   8c1b0:	35ffec53 	cbnz	w19, 8bf38 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x68>
   8c1b4:	17ffff7f 	b	8bfb0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe0>
   8c1b8:	d0000121 	adrp	x1, b2000 <_etext+0x1158>
   8c1bc:	d0000120 	adrp	x0, b2000 <_etext+0x1158>
   8c1c0:	a90363f7 	stp	x23, x24, [sp, #48]
   8c1c4:	91300021 	add	x1, x1, #0xc00
   8c1c8:	9130e000 	add	x0, x0, #0xc38
   8c1cc:	52801442 	mov	w2, #0xa2                  	// #162
   8c1d0:	a9046bf9 	stp	x25, x26, [sp, #64]
   8c1d4:	a90573fb 	stp	x27, x28, [sp, #80]
   8c1d8:	940046da 	bl	9dd40 <assertion_failed>
   8c1dc:	11001ef3 	add	w19, w23, #0x7
   8c1e0:	a94363f7 	ldp	x23, x24, [sp, #48]
   8c1e4:	d3434a73 	ubfx	x19, x19, #3, #16
   8c1e8:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8c1ec:	17ffff75 	b	8bfc0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf0>
   8c1f0:	a94363f7 	ldp	x23, x24, [sp, #48]
   8c1f4:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8c1f8:	17ffff75 	b	8bfcc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xfc>
   8c1fc:	340009d9 	cbz	w25, 8c334 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x464>
   8c200:	52800180 	mov	w0, #0xc                   	// #12
   8c204:	d2800981 	mov	x1, #0x4c                  	// #76
   8c208:	52800003 	mov	w3, #0x0                   	// #0
   8c20c:	9b20076e 	smaddl	x14, w27, w0, x1
   8c210:	11000760 	add	w0, w27, #0x1
   8c214:	2a1703e1 	mov	w1, w23
   8c218:	b9009fe0 	str	w0, [sp, #156]
   8c21c:	52865d60 	mov	w0, #0x32eb                	// #13035
   8c220:	72bf1480 	movk	w0, #0xf8a4, lsl #16
   8c224:	6b00013f 	cmp	w9, w0
   8c228:	8b0e02db 	add	x27, x22, x14
   8c22c:	1a89015c 	csel	w28, w10, w9, eq	// eq = none
   8c230:	6b00035f 	cmp	w26, w0
   8c234:	1a9a00a0 	csel	w0, w5, w26, eq	// eq = none
   8c238:	b9009be0 	str	w0, [sp, #152]
   8c23c:	14000010 	b	8c27c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3ac>
   8c240:	97fffec0 	bl	8bd40 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   8c244:	b94073e1 	ldr	w1, [sp, #112]
   8c248:	294fafed 	ldp	w13, w11, [sp, #124]
   8c24c:	29508fe7 	ldp	w7, w3, [sp, #132]
   8c250:	2951abe5 	ldp	w5, w10, [sp, #140]
   8c254:	b94097e9 	ldr	w9, [sp, #148]
   8c258:	f94037e4 	ldr	x4, [sp, #104]
   8c25c:	b800c760 	str	w0, [x27], #12
   8c260:	0b180021 	add	w1, w1, w24
   8c264:	b9409fe2 	ldr	w2, [sp, #156]
   8c268:	0b030042 	add	w2, w2, w3
   8c26c:	11000463 	add	w3, w3, #0x1
   8c270:	6b19007f 	cmp	w3, w25
   8c274:	7a4f3862 	ccmp	w3, #0xf, #0x2, cc	// cc = lo, ul, last
   8c278:	54000648 	b.hi	8c340 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x470>  // b.pmore
   8c27c:	b9409be0 	ldr	w0, [sp, #152]
   8c280:	2a1803e2 	mov	w2, w24
   8c284:	f90037e4 	str	x4, [sp, #104]
   8c288:	b90073e1 	str	w1, [sp, #112]
   8c28c:	290fafed 	stp	w13, w11, [sp, #124]
   8c290:	29108fe7 	stp	w7, w3, [sp, #132]
   8c294:	2900837c 	stp	w28, w0, [x27, #4]
   8c298:	aa0403e0 	mov	x0, x4
   8c29c:	2911abe5 	stp	w5, w10, [sp, #140]
   8c2a0:	b90097e9 	str	w9, [sp, #148]
   8c2a4:	36fffcfc 	tbz	w28, #31, 8c240 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x370>
   8c2a8:	97fffed2 	bl	8bdf0 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>
   8c2ac:	b94073e1 	ldr	w1, [sp, #112]
   8c2b0:	294fafed 	ldp	w13, w11, [sp, #124]
   8c2b4:	29508fe7 	ldp	w7, w3, [sp, #132]
   8c2b8:	2951abe5 	ldp	w5, w10, [sp, #140]
   8c2bc:	b94097e9 	ldr	w9, [sp, #148]
   8c2c0:	f94037e4 	ldr	x4, [sp, #104]
   8c2c4:	17ffffe6 	b	8c25c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x38c>
   8c2c8:	34000379 	cbz	w25, 8c334 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x464>
   8c2cc:	1100057c 	add	w28, w11, #0x1
   8c2d0:	2a1703e1 	mov	w1, w23
   8c2d4:	93407f9c 	sxtw	x28, w28
   8c2d8:	52800003 	mov	w3, #0x0                   	// #0
   8c2dc:	d503201f 	nop
   8c2e0:	11000463 	add	w3, w3, #0x1
   8c2e4:	aa0403e0 	mov	x0, x4
   8c2e8:	f9003be4 	str	x4, [sp, #112]
   8c2ec:	2a1803e2 	mov	w2, w24
   8c2f0:	290fb7e1 	stp	w1, w13, [sp, #124]
   8c2f4:	b9006be3 	str	w3, [sp, #104]
   8c2f8:	291097e7 	stp	w7, w5, [sp, #132]
   8c2fc:	2911a7ea 	stp	w10, w9, [sp, #140]
   8c300:	97fffe90 	bl	8bd40 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   8c304:	b9406be3 	ldr	w3, [sp, #104]
   8c308:	2a1c03eb 	mov	w11, w28
   8c30c:	b83c7aa0 	str	w0, [x21, x28, lsl #2]
   8c310:	9100079c 	add	x28, x28, #0x1
   8c314:	294fb7e1 	ldp	w1, w13, [sp, #124]
   8c318:	295097e7 	ldp	w7, w5, [sp, #132]
   8c31c:	6b19007f 	cmp	w3, w25
   8c320:	7a453862 	ccmp	w3, #0x5, #0x2, cc	// cc = lo, ul, last
   8c324:	2951a7ea 	ldp	w10, w9, [sp, #140]
   8c328:	0b180021 	add	w1, w1, w24
   8c32c:	f9403be4 	ldr	x4, [sp, #112]
   8c330:	54fffd89 	b.ls	8c2e0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x410>  // b.plast
   8c334:	52800021 	mov	w1, #0x1                   	// #1
   8c338:	0b0d02f7 	add	w23, w23, w13
   8c33c:	17ffff76 	b	8c114 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x244>
   8c340:	2a0203fb 	mov	w27, w2
   8c344:	52800021 	mov	w1, #0x1                   	// #1
   8c348:	0b0d02f7 	add	w23, w23, w13
   8c34c:	17ffff72 	b	8c114 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x244>
   8c350:	5280000b 	mov	w11, #0x0                   	// #0
   8c354:	5280001b 	mov	w27, #0x0                   	// #0
   8c358:	17ffff1a 	b	8bfc0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf0>
   8c35c:	d503201f 	nop

000000000008c360 <CUSBGamePadStandardDevice::Configure()>:
   8c360:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
   8c364:	52800421 	mov	w1, #0x21                  	// #33
   8c368:	910003fd 	mov	x29, sp
   8c36c:	a90153f3 	stp	x19, x20, [sp, #16]
   8c370:	aa0003f3 	mov	x19, x0
   8c374:	97fff95b 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   8c378:	b40000c0 	cbz	x0, 8c390 <CUSBGamePadStandardDevice::Configure()+0x30>
   8c37c:	aa0003f4 	mov	x20, x0
   8c380:	39401c00 	ldrb	w0, [x0, #7]
   8c384:	39402281 	ldrb	w1, [x20, #8]
   8c388:	2a012001 	orr	w1, w0, w1, lsl #8
   8c38c:	35000141 	cbnz	w1, 8c3b4 <CUSBGamePadStandardDevice::Configure()+0x54>
   8c390:	d0000141 	adrp	x1, b6000 <From+0x98>
   8c394:	911a2021 	add	x1, x1, #0x688
   8c398:	aa1303e0 	mov	x0, x19
   8c39c:	52800014 	mov	w20, #0x0                   	// #0
   8c3a0:	97fff95c 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   8c3a4:	2a1403e0 	mov	w0, w20
   8c3a8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c3ac:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   8c3b0:	d65f03c0 	ret
   8c3b4:	a9025bf5 	stp	x21, x22, [sp, #32]
   8c3b8:	92403c20 	and	x0, x1, #0xffff
   8c3bc:	a90363f7 	stp	x23, x24, [sp, #48]
   8c3c0:	7902d261 	strh	w1, [x19, #360]
   8c3c4:	94006faf 	bl	a8280 <operator new[](unsigned long)>
   8c3c8:	aa0003e1 	mov	x1, x0
   8c3cc:	aa1303e0 	mov	x0, x19
   8c3d0:	f900b261 	str	x1, [x19, #352]
   8c3d4:	97fff937 	bl	8a8b0 <CUSBFunction::GetHost() const>
   8c3d8:	aa0003f5 	mov	x21, x0
   8c3dc:	aa1303e0 	mov	x0, x19
   8c3e0:	97fff928 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   8c3e4:	39401a97 	ldrb	w23, [x20, #6]
   8c3e8:	aa0003e1 	mov	x1, x0
   8c3ec:	aa1303e0 	mov	x0, x19
   8c3f0:	aa0103f4 	mov	x20, x1
   8c3f4:	7942d278 	ldrh	w24, [x19, #360]
   8c3f8:	f940b276 	ldr	x22, [x19, #352]
   8c3fc:	97fff999 	bl	8aa60 <CUSBFunction::GetInterfaceNumber() const>
   8c400:	12001c07 	and	w7, w0, #0xff
   8c404:	aa1403e1 	mov	x1, x20
   8c408:	2a1803e5 	mov	w5, w24
   8c40c:	2a1703e2 	mov	w2, w23
   8c410:	aa1503e0 	mov	x0, x21
   8c414:	12800fc6 	mov	w6, #0xffffff81            	// #-127
   8c418:	aa1603e4 	mov	x4, x22
   8c41c:	52800003 	mov	w3, #0x0                   	// #0
   8c420:	97ffd344 	bl	81130 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   8c424:	7942d261 	ldrh	w1, [x19, #360]
   8c428:	6b01001f 	cmp	w0, w1
   8c42c:	54000421 	b.ne	8c4b0 <CUSBGamePadStandardDevice::Configure()+0x150>  // b.any
   8c430:	f9400262 	ldr	x2, [x19]
   8c434:	aa1303e0 	mov	x0, x19
   8c438:	910123e1 	add	x1, sp, #0x48
   8c43c:	a904ffff 	stp	xzr, xzr, [sp, #72]
   8c440:	a905ffff 	stp	xzr, xzr, [sp, #88]
   8c444:	a906ffff 	stp	xzr, xzr, [sp, #104]
   8c448:	a907ffff 	stp	xzr, xzr, [sp, #120]
   8c44c:	a908ffff 	stp	xzr, xzr, [sp, #136]
   8c450:	a909ffff 	stp	xzr, xzr, [sp, #152]
   8c454:	b900abff 	str	wzr, [sp, #168]
   8c458:	f9404c42 	ldr	x2, [x2, #152]
   8c45c:	d63f0040 	blr	x2
   8c460:	b9404a60 	ldr	w0, [x19, #72]
   8c464:	350000a0 	cbnz	w0, 8c478 <CUSBGamePadStandardDevice::Configure()+0x118>
   8c468:	b9410e60 	ldr	w0, [x19, #268]
   8c46c:	35000060 	cbnz	w0, 8c478 <CUSBGamePadStandardDevice::Configure()+0x118>
   8c470:	b9412a60 	ldr	w0, [x19, #296]
   8c474:	340005a0 	cbz	w0, 8c528 <CUSBGamePadStandardDevice::Configure()+0x1c8>
   8c478:	7942a260 	ldrh	w0, [x19, #336]
   8c47c:	340005e0 	cbz	w0, 8c538 <CUSBGamePadStandardDevice::Configure()+0x1d8>
   8c480:	aa1303e0 	mov	x0, x19
   8c484:	940038e3 	bl	9a810 <CUSBGamePadDevice::Configure()>
   8c488:	72001c14 	ands	w20, w0, #0xff
   8c48c:	540003a0 	b.eq	8c500 <CUSBGamePadStandardDevice::Configure()+0x1a0>  // b.none
   8c490:	39456260 	ldrb	w0, [x19, #344]
   8c494:	350002a0 	cbnz	w0, 8c4e8 <CUSBGamePadStandardDevice::Configure()+0x188>
   8c498:	2a1403e0 	mov	w0, w20
   8c49c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c4a0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c4a4:	a94363f7 	ldp	x23, x24, [sp, #48]
   8c4a8:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   8c4ac:	d65f03c0 	ret
   8c4b0:	94004d58 	bl	9fa10 <CLogger::Get()>
   8c4b4:	d0000123 	adrp	x3, b2000 <_etext+0x1158>
   8c4b8:	d0000141 	adrp	x1, b6000 <From+0x98>
   8c4bc:	911d0063 	add	x3, x3, #0x740
   8c4c0:	911a2021 	add	x1, x1, #0x688
   8c4c4:	52800022 	mov	w2, #0x1                   	// #1
   8c4c8:	52800014 	mov	w20, #0x0                   	// #0
   8c4cc:	94004f3d 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8c4d0:	2a1403e0 	mov	w0, w20
   8c4d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c4d8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c4dc:	a94363f7 	ldp	x23, x24, [sp, #48]
   8c4e0:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   8c4e4:	d65f03c0 	ret
   8c4e8:	aa1303e0 	mov	x0, x19
   8c4ec:	9400064d 	bl	8de20 <CUSBHIDDevice::StartRequest()>
   8c4f0:	12001c14 	and	w20, w0, #0xff
   8c4f4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c4f8:	a94363f7 	ldp	x23, x24, [sp, #48]
   8c4fc:	17ffffaa 	b	8c3a4 <CUSBGamePadStandardDevice::Configure()+0x44>
   8c500:	94004d44 	bl	9fa10 <CLogger::Get()>
   8c504:	d0000123 	adrp	x3, b2000 <_etext+0x1158>
   8c508:	d0000141 	adrp	x1, b6000 <From+0x98>
   8c50c:	912d0063 	add	x3, x3, #0xb40
   8c510:	911a2021 	add	x1, x1, #0x688
   8c514:	52800022 	mov	w2, #0x1                   	// #1
   8c518:	94004f2a 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8c51c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c520:	a94363f7 	ldp	x23, x24, [sp, #48]
   8c524:	17ffffa0 	b	8c3a4 <CUSBGamePadStandardDevice::Configure()+0x44>
   8c528:	52800014 	mov	w20, #0x0                   	// #0
   8c52c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c530:	a94363f7 	ldp	x23, x24, [sp, #48]
   8c534:	17ffff9c 	b	8c3a4 <CUSBGamePadStandardDevice::Configure()+0x44>
   8c538:	d0000121 	adrp	x1, b2000 <_etext+0x1158>
   8c53c:	d0000120 	adrp	x0, b2000 <_etext+0x1158>
   8c540:	91300021 	add	x1, x1, #0xc00
   8c544:	91316000 	add	x0, x0, #0xc58
   8c548:	528010a2 	mov	w2, #0x85                  	// #133
   8c54c:	940045fd 	bl	9dd40 <assertion_failed>

000000000008c550 <CUSBGamePadDevice::GetProperties()>:
   8c550:	52800000 	mov	w0, #0x0                   	// #0
   8c554:	d65f03c0 	ret
	...

000000000008c560 <CUSBGamePadDevice::SetLEDMode(TGamePadLEDMode)>:
   8c560:	52800000 	mov	w0, #0x0                   	// #0
   8c564:	d65f03c0 	ret
	...

000000000008c570 <CUSBGamePadDevice::SetRumbleMode(TGamePadRumbleMode)>:
   8c570:	52800000 	mov	w0, #0x0                   	// #0
   8c574:	d65f03c0 	ret
	...

000000000008c580 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   8c580:	d0000141 	adrp	x1, b6000 <From+0x98>
   8c584:	911aa021 	add	x1, x1, #0x6a8
   8c588:	f9000001 	str	x1, [x0]
   8c58c:	1400391d 	b	9aa00 <CUSBGamePadDevice::~CUSBGamePadDevice()>

000000000008c590 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   8c590:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8c594:	d0000141 	adrp	x1, b6000 <From+0x98>
   8c598:	911aa021 	add	x1, x1, #0x6a8
   8c59c:	910003fd 	mov	x29, sp
   8c5a0:	f9000bf3 	str	x19, [sp, #16]
   8c5a4:	aa0003f3 	mov	x19, x0
   8c5a8:	f9000001 	str	x1, [x0]
   8c5ac:	94003915 	bl	9aa00 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   8c5b0:	aa1303e0 	mov	x0, x19
   8c5b4:	d2802c01 	mov	x1, #0x160                 	// #352
   8c5b8:	f9400bf3 	ldr	x19, [sp, #16]
   8c5bc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8c5c0:	14006f50 	b	a8300 <operator delete(void*, unsigned long)>
   8c5c4:	d503201f 	nop
   8c5c8:	d503201f 	nop
   8c5cc:	d503201f 	nop

000000000008c5d0 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)>:
   8c5d0:	a9b77bfd 	stp	x29, x30, [sp, #-144]!
   8c5d4:	b20903e2 	mov	x2, #0x80000000800000      	// #36028797027352576
   8c5d8:	91017fe4 	add	x4, sp, #0x5f
   8c5dc:	927ae484 	and	x4, x4, #0xffffffffffffffc0
   8c5e0:	910003fd 	mov	x29, sp
   8c5e4:	f2800202 	movk	x2, #0x10
   8c5e8:	d2800003 	mov	x3, #0x0                   	// #0
   8c5ec:	f9000bf3 	str	x19, [sp, #16]
   8c5f0:	7100043f 	cmp	w1, #0x1
   8c5f4:	a9000c82 	stp	x2, x3, [x4]
   8c5f8:	a9017c9f 	stp	xzr, xzr, [x4, #16]
   8c5fc:	a9027c9f 	stp	xzr, xzr, [x4, #32]
   8c600:	a9037c9f 	stp	xzr, xzr, [x4, #48]
   8c604:	54000120 	b.eq	8c628 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x58>  // b.none
   8c608:	7100083f 	cmp	w1, #0x2
   8c60c:	54000420 	b.eq	8c690 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xc0>  // b.none
   8c610:	52800033 	mov	w19, #0x1                   	// #1
   8c614:	34000121 	cbz	w1, 8c638 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x68>
   8c618:	2a1303e0 	mov	w0, w19
   8c61c:	f9400bf3 	ldr	x19, [sp, #16]
   8c620:	a8c97bfd 	ldp	x29, x30, [sp], #144
   8c624:	d65f03c0 	ret
   8c628:	52841302 	mov	w2, #0x2098                	// #8344
   8c62c:	128013a1 	mov	w1, #0xffffff62            	// #-158
   8c630:	79000c82 	strh	w2, [x4, #6]
   8c634:	79001081 	strh	w1, [x4, #8]
   8c638:	39456405 	ldrb	w5, [x0, #345]
   8c63c:	aa0403e1 	mov	x1, x4
   8c640:	52800003 	mov	w3, #0x0                   	// #0
   8c644:	52800142 	mov	w2, #0xa                   	// #10
   8c648:	110004a6 	add	w6, w5, #0x1
   8c64c:	12000ca5 	and	w5, w5, #0xf
   8c650:	39000485 	strb	w5, [x4, #1]
   8c654:	39056406 	strb	w6, [x0, #345]
   8c658:	94000562 	bl	8dbe0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   8c65c:	72001c13 	ands	w19, w0, #0xff
   8c660:	54fffdc1 	b.ne	8c618 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x48>  // b.any
   8c664:	94004ceb 	bl	9fa10 <CLogger::Get()>
   8c668:	d0000123 	adrp	x3, b2000 <_etext+0x1158>
   8c66c:	d0000141 	adrp	x1, b6000 <From+0x98>
   8c670:	9131c063 	add	x3, x3, #0xc70
   8c674:	911d2021 	add	x1, x1, #0x748
   8c678:	52800022 	mov	w2, #0x1                   	// #1
   8c67c:	94004ed1 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8c680:	2a1303e0 	mov	w0, w19
   8c684:	f9400bf3 	ldr	x19, [sp, #16]
   8c688:	a8c97bfd 	ldp	x29, x30, [sp], #144
   8c68c:	d65f03c0 	ret
   8c690:	52800402 	mov	w2, #0x20                  	// #32
   8c694:	128013a1 	mov	w1, #0xffffff62            	// #-158
   8c698:	39000c82 	strb	w2, [x4, #3]
   8c69c:	79000881 	strh	w1, [x4, #4]
   8c6a0:	17ffffe6 	b	8c638 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x68>
   8c6a4:	d503201f 	nop
   8c6a8:	d503201f 	nop
   8c6ac:	d503201f 	nop

000000000008c6b0 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)>:
   8c6b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8c6b4:	910003fd 	mov	x29, sp
   8c6b8:	f9000bf3 	str	x19, [sp, #16]
   8c6bc:	aa0103f3 	mov	x19, x1
   8c6c0:	39400022 	ldrb	w2, [x1]
   8c6c4:	7100c05f 	cmp	w2, #0x30
   8c6c8:	54000e21 	b.ne	8c88c <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1dc>  // b.any
   8c6cc:	b9012c1f 	str	wzr, [x0, #300]
   8c6d0:	39400c23 	ldrb	w3, [x1, #3]
   8c6d4:	53190063 	ubfiz	w3, w3, #7, #1
   8c6d8:	b9012c03 	str	w3, [x0, #300]
   8c6dc:	39400c22 	ldrb	w2, [x1, #3]
   8c6e0:	36080082 	tbz	w2, #1, 8c6f0 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x40>
   8c6e4:	32160063 	orr	w3, w3, #0x400
   8c6e8:	b9012c03 	str	w3, [x0, #300]
   8c6ec:	39400c22 	ldrb	w2, [x1, #3]
   8c6f0:	361000a2 	tbz	w2, #2, 8c704 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x54>
   8c6f4:	b9412c01 	ldr	w1, [x0, #300]
   8c6f8:	32180021 	orr	w1, w1, #0x100
   8c6fc:	b9012c01 	str	w1, [x0, #300]
   8c700:	39400e62 	ldrb	w2, [x19, #3]
   8c704:	361800a2 	tbz	w2, #3, 8c718 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x68>
   8c708:	b9412c01 	ldr	w1, [x0, #300]
   8c70c:	32170021 	orr	w1, w1, #0x200
   8c710:	b9012c01 	str	w1, [x0, #300]
   8c714:	39400e62 	ldrb	w2, [x19, #3]
   8c718:	363000a2 	tbz	w2, #6, 8c72c <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x7c>
   8c71c:	b9412c01 	ldr	w1, [x0, #300]
   8c720:	321a0021 	orr	w1, w1, #0x40
   8c724:	b9012c01 	str	w1, [x0, #300]
   8c728:	39400e62 	ldrb	w2, [x19, #3]
   8c72c:	373809c2 	tbnz	w2, #7, 8c864 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1b4>
   8c730:	39401262 	ldrb	w2, [x19, #4]
   8c734:	360000a2 	tbz	w2, #0, 8c748 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x98>
   8c738:	b9412c01 	ldr	w1, [x0, #300]
   8c73c:	320d0021 	orr	w1, w1, #0x80000
   8c740:	b9012c01 	str	w1, [x0, #300]
   8c744:	39401262 	ldrb	w2, [x19, #4]
   8c748:	360800a2 	tbz	w2, #1, 8c75c <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0xac>
   8c74c:	b9412c01 	ldr	w1, [x0, #300]
   8c750:	320c0021 	orr	w1, w1, #0x100000
   8c754:	b9012c01 	str	w1, [x0, #300]
   8c758:	39401262 	ldrb	w2, [x19, #4]
   8c75c:	361000a2 	tbz	w2, #2, 8c770 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0xc0>
   8c760:	b9412c01 	ldr	w1, [x0, #300]
   8c764:	32130021 	orr	w1, w1, #0x2000
   8c768:	b9012c01 	str	w1, [x0, #300]
   8c76c:	39401262 	ldrb	w2, [x19, #4]
   8c770:	361800a2 	tbz	w2, #3, 8c784 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0xd4>
   8c774:	b9412c01 	ldr	w1, [x0, #300]
   8c778:	32140021 	orr	w1, w1, #0x1000
   8c77c:	b9012c01 	str	w1, [x0, #300]
   8c780:	39401262 	ldrb	w2, [x19, #4]
   8c784:	362000a2 	tbz	w2, #4, 8c798 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0xe8>
   8c788:	b9412c01 	ldr	w1, [x0, #300]
   8c78c:	32000021 	orr	w1, w1, #0x1
   8c790:	b9012c01 	str	w1, [x0, #300]
   8c794:	39401262 	ldrb	w2, [x19, #4]
   8c798:	36280082 	tbz	w2, #5, 8c7a8 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0xf8>
   8c79c:	b9412c01 	ldr	w1, [x0, #300]
   8c7a0:	32150021 	orr	w1, w1, #0x800
   8c7a4:	b9012c01 	str	w1, [x0, #300]
   8c7a8:	39401662 	ldrb	w2, [x19, #5]
   8c7ac:	360000a2 	tbz	w2, #0, 8c7c0 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x110>
   8c7b0:	b9412c01 	ldr	w1, [x0, #300]
   8c7b4:	320f0021 	orr	w1, w1, #0x20000
   8c7b8:	b9012c01 	str	w1, [x0, #300]
   8c7bc:	39401662 	ldrb	w2, [x19, #5]
   8c7c0:	360800a2 	tbz	w2, #1, 8c7d4 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x124>
   8c7c4:	b9412c01 	ldr	w1, [x0, #300]
   8c7c8:	32110021 	orr	w1, w1, #0x8000
   8c7cc:	b9012c01 	str	w1, [x0, #300]
   8c7d0:	39401662 	ldrb	w2, [x19, #5]
   8c7d4:	361000a2 	tbz	w2, #2, 8c7e8 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x138>
   8c7d8:	b9412c01 	ldr	w1, [x0, #300]
   8c7dc:	32100021 	orr	w1, w1, #0x10000
   8c7e0:	b9012c01 	str	w1, [x0, #300]
   8c7e4:	39401662 	ldrb	w2, [x19, #5]
   8c7e8:	361800a2 	tbz	w2, #3, 8c7fc <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x14c>
   8c7ec:	b9412c01 	ldr	w1, [x0, #300]
   8c7f0:	320e0021 	orr	w1, w1, #0x40000
   8c7f4:	b9012c01 	str	w1, [x0, #300]
   8c7f8:	39401662 	ldrb	w2, [x19, #5]
   8c7fc:	363000a2 	tbz	w2, #6, 8c810 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x160>
   8c800:	b9412c01 	ldr	w1, [x0, #300]
   8c804:	321b0021 	orr	w1, w1, #0x20
   8c808:	b9012c01 	str	w1, [x0, #300]
   8c80c:	39401662 	ldrb	w2, [x19, #5]
   8c810:	37380362 	tbnz	w2, #7, 8c87c <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1cc>
   8c814:	39401a61 	ldrb	w1, [x19, #6]
   8c818:	52801fe3 	mov	w3, #0xff                  	// #255
   8c81c:	39401e62 	ldrb	w2, [x19, #7]
   8c820:	2a022022 	orr	w2, w1, w2, lsl #8
   8c824:	d3442c42 	ubfx	x2, x2, #4, #8
   8c828:	b9004c02 	str	w2, [x0, #76]
   8c82c:	39402262 	ldrb	w2, [x19, #8]
   8c830:	4b020062 	sub	w2, w3, w2
   8c834:	b9005802 	str	w2, [x0, #88]
   8c838:	39402661 	ldrb	w1, [x19, #9]
   8c83c:	39402a62 	ldrb	w2, [x19, #10]
   8c840:	2a022022 	orr	w2, w1, w2, lsl #8
   8c844:	d3442c42 	ubfx	x2, x2, #4, #8
   8c848:	b9006402 	str	w2, [x0, #100]
   8c84c:	39402e61 	ldrb	w1, [x19, #11]
   8c850:	f9400bf3 	ldr	x19, [sp, #16]
   8c854:	4b010063 	sub	w3, w3, w1
   8c858:	b9007003 	str	w3, [x0, #112]
   8c85c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8c860:	d65f03c0 	ret
   8c864:	b9412c01 	ldr	w1, [x0, #300]
   8c868:	321c0021 	orr	w1, w1, #0x10
   8c86c:	b9012c01 	str	w1, [x0, #300]
   8c870:	39401262 	ldrb	w2, [x19, #4]
   8c874:	3607f6a2 	tbz	w2, #0, 8c748 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x98>
   8c878:	17ffffb0 	b	8c738 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x88>
   8c87c:	b9412c01 	ldr	w1, [x0, #300]
   8c880:	321d0021 	orr	w1, w1, #0x8
   8c884:	b9012c01 	str	w1, [x0, #300]
   8c888:	17ffffe3 	b	8c814 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x164>
   8c88c:	94004c61 	bl	9fa10 <CLogger::Get()>
   8c890:	d0000123 	adrp	x3, b2000 <_etext+0x1158>
   8c894:	d0000141 	adrp	x1, b6000 <From+0x98>
   8c898:	39400264 	ldrb	w4, [x19]
   8c89c:	91322063 	add	x3, x3, #0xc88
   8c8a0:	911d2021 	add	x1, x1, #0x748
   8c8a4:	52800062 	mov	w2, #0x3                   	// #3
   8c8a8:	f9400bf3 	ldr	x19, [sp, #16]
   8c8ac:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8c8b0:	14004e44 	b	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8c8b4:	d503201f 	nop
   8c8b8:	d503201f 	nop
   8c8bc:	d503201f 	nop

000000000008c8c0 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)>:
   8c8c0:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   8c8c4:	910003fd 	mov	x29, sp
   8c8c8:	9101bfe4 	add	x4, sp, #0x6f
   8c8cc:	927ae484 	and	x4, x4, #0xffffffffffffffc0
   8c8d0:	d28001a2 	mov	x2, #0xd                   	// #13
   8c8d4:	a90153f3 	stp	x19, x20, [sp, #16]
   8c8d8:	d0000154 	adrp	x20, b6000 <From+0x98>
   8c8dc:	911d2294 	add	x20, x20, #0x748
   8c8e0:	aa0003f3 	mov	x19, x0
   8c8e4:	aa0403e0 	mov	x0, x4
   8c8e8:	f90013f5 	str	x21, [sp, #32]
   8c8ec:	2a0103f5 	mov	w21, w1
   8c8f0:	91004281 	add	x1, x20, #0x10
   8c8f4:	94006bd5 	bl	a7848 <memcpy>
   8c8f8:	39456666 	ldrb	w6, [x19, #345]
   8c8fc:	4f000400 	movi	v0.4s, #0x0
   8c900:	aa0003e4 	mov	x4, x0
   8c904:	91003405 	add	x5, x0, #0xd
   8c908:	aa0403e1 	mov	x1, x4
   8c90c:	aa1303e0 	mov	x0, x19
   8c910:	52800003 	mov	w3, #0x0                   	// #0
   8c914:	39002c95 	strb	w21, [x4, #11]
   8c918:	52800182 	mov	w2, #0xc                   	// #12
   8c91c:	7803d09f 	sturh	wzr, [x4, #61]
   8c920:	ad0000a0 	stp	q0, q0, [x5]
   8c924:	110004c7 	add	w7, w6, #0x1
   8c928:	12000cc6 	and	w6, w6, #0xf
   8c92c:	3d8008a0 	str	q0, [x5, #32]
   8c930:	3900fc9f 	strb	wzr, [x4, #63]
   8c934:	39000486 	strb	w6, [x4, #1]
   8c938:	39056667 	strb	w7, [x19, #345]
   8c93c:	940004a9 	bl	8dbe0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   8c940:	72001c1f 	tst	w0, #0xff
   8c944:	2a0003f3 	mov	w19, w0
   8c948:	540000c0 	b.eq	8c960 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0xa0>  // b.none
   8c94c:	2a1303e0 	mov	w0, w19
   8c950:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c954:	f94013f5 	ldr	x21, [sp, #32]
   8c958:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   8c95c:	d65f03c0 	ret
   8c960:	94004c2c 	bl	9fa10 <CLogger::Get()>
   8c964:	aa1403e1 	mov	x1, x20
   8c968:	52800022 	mov	w2, #0x1                   	// #1
   8c96c:	d0000123 	adrp	x3, b2000 <_etext+0x1158>
   8c970:	9132a063 	add	x3, x3, #0xca8
   8c974:	94004e13 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8c978:	2a1303e0 	mov	w0, w19
   8c97c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c980:	f94013f5 	ldr	x21, [sp, #32]
   8c984:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   8c988:	d65f03c0 	ret
   8c98c:	d503201f 	nop

000000000008c990 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>:
   8c990:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8c994:	910003fd 	mov	x29, sp
   8c998:	f9000bf3 	str	x19, [sp, #16]
   8c99c:	aa0003f3 	mov	x19, x0
   8c9a0:	94003804 	bl	9a9b0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   8c9a4:	d0000141 	adrp	x1, b6000 <From+0x98>
   8c9a8:	911aa021 	add	x1, x1, #0x6a8
   8c9ac:	aa1303e0 	mov	x0, x19
   8c9b0:	52800004 	mov	w4, #0x0                   	// #0
   8c9b4:	52800003 	mov	w3, #0x0                   	// #0
   8c9b8:	52800002 	mov	w2, #0x0                   	// #0
   8c9bc:	f9000261 	str	x1, [x19]
   8c9c0:	52800061 	mov	w1, #0x3                   	// #3
   8c9c4:	97fff7e7 	bl	8a960 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char, unsigned int)>
   8c9c8:	39056260 	strb	w0, [x19, #344]
   8c9cc:	3905667f 	strb	wzr, [x19, #345]
   8c9d0:	f9400bf3 	ldr	x19, [sp, #16]
   8c9d4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8c9d8:	d65f03c0 	ret
   8c9dc:	d503201f 	nop

000000000008c9e0 <CUSBGamePadSwitchProDevice::Configure()>:
   8c9e0:	a9ae7bfd 	stp	x29, x30, [sp, #-288]!
   8c9e4:	910003fd 	mov	x29, sp
   8c9e8:	a90153f3 	stp	x19, x20, [sp, #16]
   8c9ec:	39456014 	ldrb	w20, [x0, #344]
   8c9f0:	a9025bf5 	stp	x21, x22, [sp, #32]
   8c9f4:	34000d94 	cbz	w20, 8cba4 <CUSBGamePadSwitchProDevice::Configure()+0x1c4>
   8c9f8:	52800801 	mov	w1, #0x40                  	// #64
   8c9fc:	aa0003f3 	mov	x19, x0
   8ca00:	7902a001 	strh	w1, [x0, #336]
   8ca04:	94003783 	bl	9a810 <CUSBGamePadDevice::Configure()>
   8ca08:	72001c14 	ands	w20, w0, #0xff
   8ca0c:	54000f80 	b.eq	8cbfc <CUSBGamePadSwitchProDevice::Configure()+0x21c>  // b.none
   8ca10:	7942a262 	ldrh	w2, [x19, #336]
   8ca14:	52800081 	mov	w1, #0x4                   	// #4
   8ca18:	d2c01fe5 	mov	x5, #0xff00000000          	// #1095216660480
   8ca1c:	52801fe4 	mov	w4, #0xff                  	// #255
   8ca20:	528002a6 	mov	w6, #0x15                  	// #21
   8ca24:	b9010e7f 	str	wzr, [x19, #268]
   8ca28:	b9004a61 	str	w1, [x19, #72]
   8ca2c:	52800003 	mov	w3, #0x0                   	// #0
   8ca30:	9101bfb5 	add	x21, x29, #0x6f
   8ca34:	aa1303e0 	mov	x0, x19
   8ca38:	f9002a65 	str	x5, [x19, #80]
   8ca3c:	927ae6b5 	and	x21, x21, #0xffffffffffffffc0
   8ca40:	290b927f 	stp	wzr, w4, [x19, #92]
   8ca44:	92403c41 	and	x1, x2, #0xffff
   8ca48:	f9003665 	str	x5, [x19, #104]
   8ca4c:	d1000421 	sub	x1, x1, #0x1
   8ca50:	290e927f 	stp	wzr, w4, [x19, #116]
   8ca54:	b2401421 	orr	x1, x1, #0x3f
   8ca58:	b9012a66 	str	w6, [x19, #296]
   8ca5c:	91010021 	add	x1, x1, #0x40
   8ca60:	927cec21 	and	x1, x1, #0xfffffffffffffff0
   8ca64:	cb2163ff 	sub	sp, sp, x1
   8ca68:	9100fff6 	add	x22, sp, #0x3f
   8ca6c:	927ae6d6 	and	x22, x22, #0xffffffffffffffc0
   8ca70:	aa1603e1 	mov	x1, x22
   8ca74:	940004c3 	bl	8dd80 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   8ca78:	d2807004 	mov	x4, #0x380                 	// #896
   8ca7c:	d2800005 	mov	x5, #0x0                   	// #0
   8ca80:	a9097ebf 	stp	xzr, xzr, [x21, #144]
   8ca84:	910202a1 	add	x1, x21, #0x80
   8ca88:	52800003 	mov	w3, #0x0                   	// #0
   8ca8c:	52800042 	mov	w2, #0x2                   	// #2
   8ca90:	aa1303e0 	mov	x0, x19
   8ca94:	a9027c3f 	stp	xzr, xzr, [x1, #32]
   8ca98:	a9037c3f 	stp	xzr, xzr, [x1, #48]
   8ca9c:	a90816a4 	stp	x4, x5, [x21, #128]
   8caa0:	94000450 	bl	8dbe0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   8caa4:	72001c14 	ands	w20, w0, #0xff
   8caa8:	54000900 	b.eq	8cbc8 <CUSBGamePadSwitchProDevice::Configure()+0x1e8>  // b.none
   8caac:	7942a262 	ldrh	w2, [x19, #336]
   8cab0:	52800003 	mov	w3, #0x0                   	// #0
   8cab4:	aa1603e1 	mov	x1, x22
   8cab8:	aa1303e0 	mov	x0, x19
   8cabc:	940004b1 	bl	8dd80 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   8cac0:	7100001f 	cmp	w0, #0x0
   8cac4:	54000b6d 	b.le	8cc30 <CUSBGamePadSwitchProDevice::Configure()+0x250>
   8cac8:	394002c0 	ldrb	w0, [x22]
   8cacc:	7102041f 	cmp	w0, #0x81
   8cad0:	540004e1 	b.ne	8cb6c <CUSBGamePadSwitchProDevice::Configure()+0x18c>  // b.any
   8cad4:	394006c0 	ldrb	w0, [x22, #1]
   8cad8:	71000c1f 	cmp	w0, #0x3
   8cadc:	54000481 	b.ne	8cb6c <CUSBGamePadSwitchProDevice::Configure()+0x18c>  // b.any
   8cae0:	d2805004 	mov	x4, #0x280                 	// #640
   8cae4:	d2800005 	mov	x5, #0x0                   	// #0
   8cae8:	a9057ebf 	stp	xzr, xzr, [x21, #80]
   8caec:	910102a1 	add	x1, x21, #0x40
   8caf0:	52800003 	mov	w3, #0x0                   	// #0
   8caf4:	52800042 	mov	w2, #0x2                   	// #2
   8caf8:	aa1303e0 	mov	x0, x19
   8cafc:	a9027c3f 	stp	xzr, xzr, [x1, #32]
   8cb00:	a9037c3f 	stp	xzr, xzr, [x1, #48]
   8cb04:	a90416a4 	stp	x4, x5, [x21, #64]
   8cb08:	94000436 	bl	8dbe0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   8cb0c:	72001c14 	ands	w20, w0, #0xff
   8cb10:	54000a20 	b.eq	8cc54 <CUSBGamePadSwitchProDevice::Configure()+0x274>  // b.none
   8cb14:	7942a262 	ldrh	w2, [x19, #336]
   8cb18:	52800003 	mov	w3, #0x0                   	// #0
   8cb1c:	aa1603e1 	mov	x1, x22
   8cb20:	aa1303e0 	mov	x0, x19
   8cb24:	94000497 	bl	8dd80 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   8cb28:	7100001f 	cmp	w0, #0x0
   8cb2c:	54000ded 	b.le	8cce8 <CUSBGamePadSwitchProDevice::Configure()+0x308>
   8cb30:	394002c0 	ldrb	w0, [x22]
   8cb34:	7102041f 	cmp	w0, #0x81
   8cb38:	54000081 	b.ne	8cb48 <CUSBGamePadSwitchProDevice::Configure()+0x168>  // b.any
   8cb3c:	394006c0 	ldrb	w0, [x22, #1]
   8cb40:	7100081f 	cmp	w0, #0x2
   8cb44:	54000980 	b.eq	8cc74 <CUSBGamePadSwitchProDevice::Configure()+0x294>  // b.none
   8cb48:	94004bb2 	bl	9fa10 <CLogger::Get()>
   8cb4c:	d0000123 	adrp	x3, b2000 <_etext+0x1158>
   8cb50:	d0000141 	adrp	x1, b6000 <From+0x98>
   8cb54:	91340063 	add	x3, x3, #0xd00
   8cb58:	911d2021 	add	x1, x1, #0x748
   8cb5c:	52800022 	mov	w2, #0x1                   	// #1
   8cb60:	52800014 	mov	w20, #0x0                   	// #0
   8cb64:	94004d97 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8cb68:	14000009 	b	8cb8c <CUSBGamePadSwitchProDevice::Configure()+0x1ac>
   8cb6c:	94004ba9 	bl	9fa10 <CLogger::Get()>
   8cb70:	d0000123 	adrp	x3, b2000 <_etext+0x1158>
   8cb74:	d0000141 	adrp	x1, b6000 <From+0x98>
   8cb78:	91330063 	add	x3, x3, #0xcc0
   8cb7c:	911d2021 	add	x1, x1, #0x748
   8cb80:	52800022 	mov	w2, #0x1                   	// #1
   8cb84:	52800014 	mov	w20, #0x0                   	// #0
   8cb88:	94004d8e 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8cb8c:	910003bf 	mov	sp, x29
   8cb90:	2a1403e0 	mov	w0, w20
   8cb94:	a94153f3 	ldp	x19, x20, [sp, #16]
   8cb98:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8cb9c:	a8d27bfd 	ldp	x29, x30, [sp], #288
   8cba0:	d65f03c0 	ret
   8cba4:	d0000141 	adrp	x1, b6000 <From+0x98>
   8cba8:	911d2021 	add	x1, x1, #0x748
   8cbac:	97fff759 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   8cbb0:	910003bf 	mov	sp, x29
   8cbb4:	2a1403e0 	mov	w0, w20
   8cbb8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8cbbc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8cbc0:	a8d27bfd 	ldp	x29, x30, [sp], #288
   8cbc4:	d65f03c0 	ret
   8cbc8:	94004b92 	bl	9fa10 <CLogger::Get()>
   8cbcc:	d0000123 	adrp	x3, b2000 <_etext+0x1158>
   8cbd0:	d0000141 	adrp	x1, b6000 <From+0x98>
   8cbd4:	91330063 	add	x3, x3, #0xcc0
   8cbd8:	911d2021 	add	x1, x1, #0x748
   8cbdc:	52800022 	mov	w2, #0x1                   	// #1
   8cbe0:	94004d78 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8cbe4:	910003bf 	mov	sp, x29
   8cbe8:	2a1403e0 	mov	w0, w20
   8cbec:	a94153f3 	ldp	x19, x20, [sp, #16]
   8cbf0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8cbf4:	a8d27bfd 	ldp	x29, x30, [sp], #288
   8cbf8:	d65f03c0 	ret
   8cbfc:	94004b85 	bl	9fa10 <CLogger::Get()>
   8cc00:	d0000123 	adrp	x3, b2000 <_etext+0x1158>
   8cc04:	d0000141 	adrp	x1, b6000 <From+0x98>
   8cc08:	912d0063 	add	x3, x3, #0xb40
   8cc0c:	911d2021 	add	x1, x1, #0x748
   8cc10:	52800022 	mov	w2, #0x1                   	// #1
   8cc14:	94004d6b 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8cc18:	910003bf 	mov	sp, x29
   8cc1c:	2a1403e0 	mov	w0, w20
   8cc20:	a94153f3 	ldp	x19, x20, [sp, #16]
   8cc24:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8cc28:	a8d27bfd 	ldp	x29, x30, [sp], #288
   8cc2c:	d65f03c0 	ret
   8cc30:	94004b78 	bl	9fa10 <CLogger::Get()>
   8cc34:	d0000123 	adrp	x3, b2000 <_etext+0x1158>
   8cc38:	d0000141 	adrp	x1, b6000 <From+0x98>
   8cc3c:	91338063 	add	x3, x3, #0xce0
   8cc40:	911d2021 	add	x1, x1, #0x748
   8cc44:	52800022 	mov	w2, #0x1                   	// #1
   8cc48:	52800014 	mov	w20, #0x0                   	// #0
   8cc4c:	94004d5d 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8cc50:	17ffffcf 	b	8cb8c <CUSBGamePadSwitchProDevice::Configure()+0x1ac>
   8cc54:	94004b6f 	bl	9fa10 <CLogger::Get()>
   8cc58:	d0000123 	adrp	x3, b2000 <_etext+0x1158>
   8cc5c:	d0000141 	adrp	x1, b6000 <From+0x98>
   8cc60:	91340063 	add	x3, x3, #0xd00
   8cc64:	911d2021 	add	x1, x1, #0x748
   8cc68:	52800022 	mov	w2, #0x1                   	// #1
   8cc6c:	94004d55 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8cc70:	17ffffc7 	b	8cb8c <CUSBGamePadSwitchProDevice::Configure()+0x1ac>
   8cc74:	d2809004 	mov	x4, #0x480                 	// #1152
   8cc78:	d2800005 	mov	x5, #0x0                   	// #0
   8cc7c:	a9017ebf 	stp	xzr, xzr, [x21, #16]
   8cc80:	aa1503e1 	mov	x1, x21
   8cc84:	52800003 	mov	w3, #0x0                   	// #0
   8cc88:	52800042 	mov	w2, #0x2                   	// #2
   8cc8c:	aa1303e0 	mov	x0, x19
   8cc90:	a90016a4 	stp	x4, x5, [x21]
   8cc94:	a9027ebf 	stp	xzr, xzr, [x21, #32]
   8cc98:	a9037ebf 	stp	xzr, xzr, [x21, #48]
   8cc9c:	940003d1 	bl	8dbe0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   8cca0:	72001c14 	ands	w20, w0, #0xff
   8cca4:	54000440 	b.eq	8cd2c <CUSBGamePadSwitchProDevice::Configure()+0x34c>  // b.none
   8cca8:	f9400262 	ldr	x2, [x19]
   8ccac:	aa1303e0 	mov	x0, x19
   8ccb0:	b9415661 	ldr	w1, [x19, #340]
   8ccb4:	f9404042 	ldr	x2, [x2, #128]
   8ccb8:	d63f0040 	blr	x2
   8ccbc:	7942a262 	ldrh	w2, [x19, #336]
   8ccc0:	aa1603e1 	mov	x1, x22
   8ccc4:	52800003 	mov	w3, #0x0                   	// #0
   8ccc8:	aa1303e0 	mov	x0, x19
   8cccc:	9400042d 	bl	8dd80 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   8ccd0:	7100001f 	cmp	w0, #0x0
   8ccd4:	540001cd 	b.le	8cd0c <CUSBGamePadSwitchProDevice::Configure()+0x32c>
   8ccd8:	aa1303e0 	mov	x0, x19
   8ccdc:	94000451 	bl	8de20 <CUSBHIDDevice::StartRequest()>
   8cce0:	12001c14 	and	w20, w0, #0xff
   8cce4:	17ffffaa 	b	8cb8c <CUSBGamePadSwitchProDevice::Configure()+0x1ac>
   8cce8:	94004b4a 	bl	9fa10 <CLogger::Get()>
   8ccec:	d0000123 	adrp	x3, b2000 <_etext+0x1158>
   8ccf0:	d0000141 	adrp	x1, b6000 <From+0x98>
   8ccf4:	91348063 	add	x3, x3, #0xd20
   8ccf8:	911d2021 	add	x1, x1, #0x748
   8ccfc:	52800022 	mov	w2, #0x1                   	// #1
   8cd00:	52800014 	mov	w20, #0x0                   	// #0
   8cd04:	94004d2f 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8cd08:	17ffffa1 	b	8cb8c <CUSBGamePadSwitchProDevice::Configure()+0x1ac>
   8cd0c:	94004b41 	bl	9fa10 <CLogger::Get()>
   8cd10:	d0000123 	adrp	x3, b2000 <_etext+0x1158>
   8cd14:	d0000141 	adrp	x1, b6000 <From+0x98>
   8cd18:	91358063 	add	x3, x3, #0xd60
   8cd1c:	911d2021 	add	x1, x1, #0x748
   8cd20:	52800022 	mov	w2, #0x1                   	// #1
   8cd24:	94004d27 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8cd28:	17ffffec 	b	8ccd8 <CUSBGamePadSwitchProDevice::Configure()+0x2f8>
   8cd2c:	94004b39 	bl	9fa10 <CLogger::Get()>
   8cd30:	d0000123 	adrp	x3, b2000 <_etext+0x1158>
   8cd34:	d0000141 	adrp	x1, b6000 <From+0x98>
   8cd38:	91350063 	add	x3, x3, #0xd40
   8cd3c:	911d2021 	add	x1, x1, #0x748
   8cd40:	52800022 	mov	w2, #0x1                   	// #1
   8cd44:	94004d1f 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8cd48:	17ffff91 	b	8cb8c <CUSBGamePadSwitchProDevice::Configure()+0x1ac>
   8cd4c:	00000000 	udf	#0

000000000008cd50 <CUSBGamePadSwitchProDevice::GetProperties()>:
   8cd50:	52800960 	mov	w0, #0x4b                  	// #75
   8cd54:	d65f03c0 	ret
	...

000000000008cd60 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   8cd60:	d0000141 	adrp	x1, b6000 <From+0x98>
   8cd64:	911de021 	add	x1, x1, #0x778
   8cd68:	f9000001 	str	x1, [x0]
   8cd6c:	14003725 	b	9aa00 <CUSBGamePadDevice::~CUSBGamePadDevice()>

000000000008cd70 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   8cd70:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8cd74:	d0000141 	adrp	x1, b6000 <From+0x98>
   8cd78:	911de021 	add	x1, x1, #0x778
   8cd7c:	910003fd 	mov	x29, sp
   8cd80:	f9000bf3 	str	x19, [sp, #16]
   8cd84:	aa0003f3 	mov	x19, x0
   8cd88:	f9000001 	str	x1, [x0]
   8cd8c:	9400371d 	bl	9aa00 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   8cd90:	aa1303e0 	mov	x0, x19
   8cd94:	d2802b01 	mov	x1, #0x158                 	// #344
   8cd98:	f9400bf3 	ldr	x19, [sp, #16]
   8cd9c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8cda0:	14006d58 	b	a8300 <operator delete(void*, unsigned long)>
   8cda4:	d503201f 	nop
   8cda8:	d503201f 	nop
   8cdac:	d503201f 	nop

000000000008cdb0 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)>:
   8cdb0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8cdb4:	910003fd 	mov	x29, sp
   8cdb8:	b4000a61 	cbz	x1, 8cf04 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x154>
   8cdbc:	52828003 	mov	w3, #0x1400                	// #5120
   8cdc0:	39400024 	ldrb	w4, [x1]
   8cdc4:	39400422 	ldrb	w2, [x1, #1]
   8cdc8:	2a022082 	orr	w2, w4, w2, lsl #8
   8cdcc:	6b03005f 	cmp	w2, w3
   8cdd0:	54000a61 	b.ne	8cf1c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x16c>  // b.any
   8cdd4:	39400824 	ldrb	w4, [x1, #2]
   8cdd8:	d0000145 	adrp	x5, b6000 <From+0x98>
   8cddc:	912060a7 	add	x7, x5, #0x818
   8cde0:	aa0703e2 	mov	x2, x7
   8cde4:	910100e5 	add	x5, x7, #0x40
   8cde8:	39400c23 	ldrb	w3, [x1, #3]
   8cdec:	b9012c1f 	str	wzr, [x0, #300]
   8cdf0:	2a032083 	orr	w3, w4, w3, lsl #8
   8cdf4:	d503201f 	nop
   8cdf8:	360000a3 	tbz	w3, #0, 8ce0c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x5c>
   8cdfc:	b9412c04 	ldr	w4, [x0, #300]
   8ce00:	b9400046 	ldr	w6, [x2]
   8ce04:	2a060084 	orr	w4, w4, w6
   8ce08:	b9012c04 	str	w4, [x0, #300]
   8ce0c:	91001042 	add	x2, x2, #0x4
   8ce10:	53017c63 	lsr	w3, w3, #1
   8ce14:	eb05005f 	cmp	x2, x5
   8ce18:	54ffff01 	b.ne	8cdf8 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x48>  // b.any
   8ce1c:	39401826 	ldrb	w6, [x1, #6]
   8ce20:	52800003 	mov	w3, #0x0                   	// #0
   8ce24:	d2800024 	mov	x4, #0x1                   	// #1
   8ce28:	f100109f 	cmp	x4, #0x4
   8ce2c:	910100e5 	add	x5, x7, #0x40
   8ce30:	39401c22 	ldrb	w2, [x1, #7]
   8ce34:	52801fe7 	mov	w7, #0xff                  	// #255
   8ce38:	aa0220c2 	orr	x2, x6, x2, lsl #8
   8ce3c:	d37f7c66 	ubfiz	x6, x3, #1, #32
   8ce40:	8b2340c3 	add	x3, x6, w3, uxtw
   8ce44:	8b030803 	add	x3, x0, x3, lsl #2
   8ce48:	93403c42 	sxth	x2, w2
   8ce4c:	11402042 	add	w2, w2, #0x8, lsl #12
   8ce50:	53087c42 	lsr	w2, w2, #8
   8ce54:	b9004c62 	str	w2, [x3, #76]
   8ce58:	54000280 	b.eq	8cea8 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xf8>  // b.none
   8ce5c:	8b244422 	add	x2, x1, w4, uxtw #1
   8ce60:	39401846 	ldrb	w6, [x2, #6]
   8ce64:	39401c42 	ldrb	w2, [x2, #7]
   8ce68:	b86478a3 	ldr	w3, [x5, x4, lsl #2]
   8ce6c:	91000484 	add	x4, x4, #0x1
   8ce70:	aa0220c2 	orr	x2, x6, x2, lsl #8
   8ce74:	93403c42 	sxth	x2, w2
   8ce78:	121e7866 	and	w6, w3, #0xfffffffd
   8ce7c:	11402042 	add	w2, w2, #0x8, lsl #12
   8ce80:	710004df 	cmp	w6, #0x1
   8ce84:	53087c42 	lsr	w2, w2, #8
   8ce88:	4b0200e6 	sub	w6, w7, w2
   8ce8c:	1a8200c2 	csel	w2, w6, w2, eq	// eq = none
   8ce90:	f100109f 	cmp	x4, #0x4
   8ce94:	d37f7c66 	ubfiz	x6, x3, #1, #32
   8ce98:	8b2340c3 	add	x3, x6, w3, uxtw
   8ce9c:	8b030803 	add	x3, x0, x3, lsl #2
   8cea0:	b9004c62 	str	w2, [x3, #76]
   8cea4:	54fffdc1 	b.ne	8ce5c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xac>  // b.any
   8cea8:	39401022 	ldrb	w2, [x1, #4]
   8ceac:	b9007c02 	str	w2, [x0, #124]
   8ceb0:	39c01022 	ldrsb	w2, [x1, #4]
   8ceb4:	37f80182 	tbnz	w2, #31, 8cee4 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x134>
   8ceb8:	39401422 	ldrb	w2, [x1, #5]
   8cebc:	b9008802 	str	w2, [x0, #136]
   8cec0:	39c01421 	ldrsb	w1, [x1, #5]
   8cec4:	37f80061 	tbnz	w1, #31, 8ced0 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x120>
   8cec8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8cecc:	d65f03c0 	ret
   8ced0:	b9412c01 	ldr	w1, [x0, #300]
   8ced4:	321c0021 	orr	w1, w1, #0x10
   8ced8:	b9012c01 	str	w1, [x0, #300]
   8cedc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8cee0:	d65f03c0 	ret
   8cee4:	b9412c02 	ldr	w2, [x0, #300]
   8cee8:	321d0042 	orr	w2, w2, #0x8
   8ceec:	b9012c02 	str	w2, [x0, #300]
   8cef0:	39401422 	ldrb	w2, [x1, #5]
   8cef4:	b9008802 	str	w2, [x0, #136]
   8cef8:	39c01421 	ldrsb	w1, [x1, #5]
   8cefc:	36fffe61 	tbz	w1, #31, 8cec8 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x118>
   8cf00:	17fffff4 	b	8ced0 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x120>
   8cf04:	d0000121 	adrp	x1, b2000 <_etext+0x1158>
   8cf08:	d0000120 	adrp	x0, b2000 <_etext+0x1158>
   8cf0c:	91360021 	add	x1, x1, #0xd80
   8cf10:	912e8000 	add	x0, x0, #0xba0
   8cf14:	52800f02 	mov	w2, #0x78                  	// #120
   8cf18:	9400438a 	bl	9dd40 <assertion_failed>
   8cf1c:	d0000121 	adrp	x1, b2000 <_etext+0x1158>
   8cf20:	d0000120 	adrp	x0, b2000 <_etext+0x1158>
   8cf24:	91360021 	add	x1, x1, #0xd80
   8cf28:	91366000 	add	x0, x0, #0xd98
   8cf2c:	52800f22 	mov	w2, #0x79                  	// #121
   8cf30:	94004384 	bl	9dd40 <assertion_failed>
   8cf34:	d503201f 	nop
   8cf38:	d503201f 	nop
   8cf3c:	d503201f 	nop

000000000008cf40 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)>:
   8cf40:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
   8cf44:	2a0103e2 	mov	w2, w1
   8cf48:	91013fe3 	add	x3, sp, #0x4f
   8cf4c:	927ae461 	and	x1, x3, #0xffffffffffffffc0
   8cf50:	93407c43 	sxtw	x3, w2
   8cf54:	910003fd 	mov	x29, sp
   8cf58:	f100107f 	cmp	x3, #0x4
   8cf5c:	54000089 	b.ls	8cf6c <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x2c>  // b.plast
   8cf60:	52800000 	mov	w0, #0x0                   	// #0
   8cf64:	a8c87bfd 	ldp	x29, x30, [sp], #128
   8cf68:	d65f03c0 	ret
   8cf6c:	d0000143 	adrp	x3, b6000 <From+0x98>
   8cf70:	91206063 	add	x3, x3, #0x818
   8cf74:	91016063 	add	x3, x3, #0x58
   8cf78:	52806025 	mov	w5, #0x301                 	// #769
   8cf7c:	3862c864 	ldrb	w4, [x3, w2, sxtw]
   8cf80:	52800003 	mov	w3, #0x0                   	// #0
   8cf84:	52800062 	mov	w2, #0x3                   	// #3
   8cf88:	79000025 	strh	w5, [x1]
   8cf8c:	39000824 	strb	w4, [x1, #2]
   8cf90:	94000314 	bl	8dbe0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   8cf94:	12001c00 	and	w0, w0, #0xff
   8cf98:	a8c87bfd 	ldp	x29, x30, [sp], #128
   8cf9c:	d65f03c0 	ret

000000000008cfa0 <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)>:
   8cfa0:	f100003f 	cmp	x1, #0x0
   8cfa4:	7a4e1840 	ccmp	w2, #0xe, #0x0, ne	// ne = any
   8cfa8:	540000c1 	b.ne	8cfc0 <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)+0x20>  // b.any
   8cfac:	39400022 	ldrb	w2, [x1]
   8cfb0:	35000082 	cbnz	w2, 8cfc0 <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)+0x20>
   8cfb4:	39400422 	ldrb	w2, [x1, #1]
   8cfb8:	7100505f 	cmp	w2, #0x14
   8cfbc:	54000040 	b.eq	8cfc4 <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)+0x24>  // b.none
   8cfc0:	d65f03c0 	ret
   8cfc4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8cfc8:	910003fd 	mov	x29, sp
   8cfcc:	a90153f3 	stp	x19, x20, [sp, #16]
   8cfd0:	aa0003f3 	mov	x19, x0
   8cfd4:	f940a402 	ldr	x2, [x0, #328]
   8cfd8:	b40001a2 	cbz	x2, 8d00c <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)+0x6c>
   8cfdc:	aa0003f4 	mov	x20, x0
   8cfe0:	f8448682 	ldr	x2, [x20], #72
   8cfe4:	f9404c42 	ldr	x2, [x2, #152]
   8cfe8:	d63f0040 	blr	x2
   8cfec:	b9415660 	ldr	w0, [x19, #340]
   8cff0:	aa1403e1 	mov	x1, x20
   8cff4:	f940a662 	ldr	x2, [x19, #328]
   8cff8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8cffc:	51000400 	sub	w0, w0, #0x1
   8d000:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d004:	aa0203f0 	mov	x16, x2
   8d008:	d61f0200 	br	x16
   8d00c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d010:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d014:	d65f03c0 	ret
   8d018:	d503201f 	nop
   8d01c:	d503201f 	nop

000000000008d020 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)>:
   8d020:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   8d024:	910003fd 	mov	x29, sp
   8d028:	d2800102 	mov	x2, #0x8                   	// #8
   8d02c:	a90153f3 	stp	x19, x20, [sp, #16]
   8d030:	9101bff3 	add	x19, sp, #0x6f
   8d034:	2a0103f4 	mov	w20, w1
   8d038:	927ae673 	and	x19, x19, #0xffffffffffffffc0
   8d03c:	52800001 	mov	w1, #0x0                   	// #0
   8d040:	f90013f5 	str	x21, [sp, #32]
   8d044:	aa0003f5 	mov	x21, x0
   8d048:	aa1303e0 	mov	x0, x19
   8d04c:	940069e7 	bl	a77e8 <memset>
   8d050:	52800100 	mov	w0, #0x8                   	// #8
   8d054:	7100069f 	cmp	w20, #0x1
   8d058:	39000660 	strb	w0, [x19, #1]
   8d05c:	54000140 	b.eq	8d084 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x64>  // b.none
   8d060:	71000a9f 	cmp	w20, #0x2
   8d064:	54000260 	b.eq	8d0b0 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x90>  // b.none
   8d068:	34000134 	cbz	w20, 8d08c <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x6c>
   8d06c:	b0000121 	adrp	x1, b2000 <_etext+0x1158>
   8d070:	b0000120 	adrp	x0, b2000 <_etext+0x1158>
   8d074:	91360021 	add	x1, x1, #0xd80
   8d078:	910ba000 	add	x0, x0, #0x2e8
   8d07c:	52801cc2 	mov	w2, #0xe6                  	// #230
   8d080:	94004330 	bl	9dd40 <assertion_failed>
   8d084:	12800000 	mov	w0, #0xffffffff            	// #-1
   8d088:	39001260 	strb	w0, [x19, #4]
   8d08c:	aa1303e1 	mov	x1, x19
   8d090:	aa1503e0 	mov	x0, x21
   8d094:	52800003 	mov	w3, #0x0                   	// #0
   8d098:	52800102 	mov	w2, #0x8                   	// #8
   8d09c:	940002d1 	bl	8dbe0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   8d0a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d0a4:	f94013f5 	ldr	x21, [sp, #32]
   8d0a8:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   8d0ac:	d65f03c0 	ret
   8d0b0:	12800000 	mov	w0, #0xffffffff            	// #-1
   8d0b4:	39000e60 	strb	w0, [x19, #3]
   8d0b8:	17fffff5 	b	8d08c <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x6c>
   8d0bc:	d503201f 	nop

000000000008d0c0 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>:
   8d0c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8d0c4:	910003fd 	mov	x29, sp
   8d0c8:	f9000bf3 	str	x19, [sp, #16]
   8d0cc:	aa0003f3 	mov	x19, x0
   8d0d0:	94003638 	bl	9a9b0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   8d0d4:	b0000140 	adrp	x0, b6000 <From+0x98>
   8d0d8:	911de000 	add	x0, x0, #0x778
   8d0dc:	f9000260 	str	x0, [x19]
   8d0e0:	f9400bf3 	ldr	x19, [sp, #16]
   8d0e4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d0e8:	d65f03c0 	ret
   8d0ec:	d503201f 	nop

000000000008d0f0 <CUSBGamePadXbox360Device::Configure()>:
   8d0f0:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   8d0f4:	528001c2 	mov	w2, #0xe                   	// #14
   8d0f8:	910003fd 	mov	x29, sp
   8d0fc:	9101bfe1 	add	x1, sp, #0x6f
   8d100:	a90153f3 	stp	x19, x20, [sp, #16]
   8d104:	aa0003f3 	mov	x19, x0
   8d108:	f90013f5 	str	x21, [sp, #32]
   8d10c:	927ae435 	and	x21, x1, #0xffffffffffffffc0
   8d110:	7902a002 	strh	w2, [x0, #336]
   8d114:	940035bf 	bl	9a810 <CUSBGamePadDevice::Configure()>
   8d118:	72001c14 	ands	w20, w0, #0xff
   8d11c:	54000620 	b.eq	8d1e0 <CUSBGamePadXbox360Device::Configure()+0xf0>  // b.none
   8d120:	f9400263 	ldr	x3, [x19]
   8d124:	d2c01fe2 	mov	x2, #0xff00000000          	// #1095216660480
   8d128:	52801fe0 	mov	w0, #0xff                  	// #255
   8d12c:	52800264 	mov	w4, #0x13                  	// #19
   8d130:	528000c5 	mov	w5, #0x6                   	// #6
   8d134:	f0ffffe1 	adrp	x1, 8c000 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x130>
   8d138:	913d0021 	add	x1, x1, #0xf40
   8d13c:	f9404063 	ldr	x3, [x3, #128]
   8d140:	b9004a65 	str	w5, [x19, #72]
   8d144:	f9002a62 	str	x2, [x19, #80]
   8d148:	290b827f 	stp	wzr, w0, [x19, #92]
   8d14c:	f9003662 	str	x2, [x19, #104]
   8d150:	eb01007f 	cmp	x3, x1
   8d154:	290e827f 	stp	wzr, w0, [x19, #116]
   8d158:	f9004262 	str	x2, [x19, #128]
   8d15c:	2911827f 	stp	wzr, w0, [x19, #140]
   8d160:	b9010e7f 	str	wzr, [x19, #268]
   8d164:	b9012a64 	str	w4, [x19, #296]
   8d168:	b9415661 	ldr	w1, [x19, #340]
   8d16c:	54000541 	b.ne	8d214 <CUSBGamePadXbox360Device::Configure()+0x124>  // b.any
   8d170:	93407c20 	sxtw	x0, w1
   8d174:	52800014 	mov	w20, #0x0                   	// #0
   8d178:	f100101f 	cmp	x0, #0x4
   8d17c:	540000c9 	b.ls	8d194 <CUSBGamePadXbox360Device::Configure()+0xa4>  // b.plast
   8d180:	2a1403e0 	mov	w0, w20
   8d184:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d188:	f94013f5 	ldr	x21, [sp, #32]
   8d18c:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   8d190:	d65f03c0 	ret
   8d194:	b0000140 	adrp	x0, b6000 <From+0x98>
   8d198:	91206000 	add	x0, x0, #0x818
   8d19c:	91016000 	add	x0, x0, #0x58
   8d1a0:	52806025 	mov	w5, #0x301                 	// #769
   8d1a4:	3861c804 	ldrb	w4, [x0, w1, sxtw]
   8d1a8:	52800003 	mov	w3, #0x0                   	// #0
   8d1ac:	aa1503e1 	mov	x1, x21
   8d1b0:	52800062 	mov	w2, #0x3                   	// #3
   8d1b4:	aa1303e0 	mov	x0, x19
   8d1b8:	790002a5 	strh	w5, [x21]
   8d1bc:	39000aa4 	strb	w4, [x21, #2]
   8d1c0:	94000288 	bl	8dbe0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   8d1c4:	12001c14 	and	w20, w0, #0xff
   8d1c8:	34fffdd4 	cbz	w20, 8d180 <CUSBGamePadXbox360Device::Configure()+0x90>
   8d1cc:	aa1303e0 	mov	x0, x19
   8d1d0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d1d4:	f94013f5 	ldr	x21, [sp, #32]
   8d1d8:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   8d1dc:	14000311 	b	8de20 <CUSBHIDDevice::StartRequest()>
   8d1e0:	94004a0c 	bl	9fa10 <CLogger::Get()>
   8d1e4:	b0000141 	adrp	x1, b6000 <From+0x98>
   8d1e8:	91206021 	add	x1, x1, #0x818
   8d1ec:	b0000123 	adrp	x3, b2000 <_etext+0x1158>
   8d1f0:	91018021 	add	x1, x1, #0x60
   8d1f4:	912d0063 	add	x3, x3, #0xb40
   8d1f8:	52800022 	mov	w2, #0x1                   	// #1
   8d1fc:	94004bf1 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8d200:	2a1403e0 	mov	w0, w20
   8d204:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d208:	f94013f5 	ldr	x21, [sp, #32]
   8d20c:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   8d210:	d65f03c0 	ret
   8d214:	aa1303e0 	mov	x0, x19
   8d218:	d63f0060 	blr	x3
   8d21c:	12001c14 	and	w20, w0, #0xff
   8d220:	17ffffea 	b	8d1c8 <CUSBGamePadXbox360Device::Configure()+0xd8>
	...

000000000008d230 <CUSBGamePadXbox360Device::GetProperties()>:
   8d230:	52800160 	mov	w0, #0xb                   	// #11
   8d234:	d65f03c0 	ret
	...

000000000008d240 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)>:
   8d240:	39401022 	ldrb	w2, [x1, #4]
   8d244:	d3420842 	ubfx	x2, x2, #2, #1
   8d248:	53124442 	lsl	w2, w2, #14
   8d24c:	b9012c02 	str	w2, [x0, #300]
   8d250:	39401023 	ldrb	w3, [x1, #4]
   8d254:	36180063 	tbz	w3, #3, 8d260 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x20>
   8d258:	32150042 	orr	w2, w2, #0x800
   8d25c:	b9012c02 	str	w2, [x0, #300]
   8d260:	36200083 	tbz	w3, #4, 8d270 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x30>
   8d264:	b9412c02 	ldr	w2, [x0, #300]
   8d268:	32170042 	orr	w2, w2, #0x200
   8d26c:	b9012c02 	str	w2, [x0, #300]
   8d270:	36280083 	tbz	w3, #5, 8d280 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x40>
   8d274:	b9412c02 	ldr	w2, [x0, #300]
   8d278:	32180042 	orr	w2, w2, #0x100
   8d27c:	b9012c02 	str	w2, [x0, #300]
   8d280:	36300083 	tbz	w3, #6, 8d290 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x50>
   8d284:	b9412c02 	ldr	w2, [x0, #300]
   8d288:	32160042 	orr	w2, w2, #0x400
   8d28c:	b9012c02 	str	w2, [x0, #300]
   8d290:	36380083 	tbz	w3, #7, 8d2a0 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x60>
   8d294:	b9412c02 	ldr	w2, [x0, #300]
   8d298:	32190042 	orr	w2, w2, #0x80
   8d29c:	b9012c02 	str	w2, [x0, #300]
   8d2a0:	39401422 	ldrb	w2, [x1, #5]
   8d2a4:	36000082 	tbz	w2, #0, 8d2b4 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x74>
   8d2a8:	b9412c03 	ldr	w3, [x0, #300]
   8d2ac:	32110063 	orr	w3, w3, #0x8000
   8d2b0:	b9012c03 	str	w3, [x0, #300]
   8d2b4:	36080082 	tbz	w2, #1, 8d2c4 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x84>
   8d2b8:	b9412c03 	ldr	w3, [x0, #300]
   8d2bc:	320f0063 	orr	w3, w3, #0x20000
   8d2c0:	b9012c03 	str	w3, [x0, #300]
   8d2c4:	36100082 	tbz	w2, #2, 8d2d4 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x94>
   8d2c8:	b9412c03 	ldr	w3, [x0, #300]
   8d2cc:	320e0063 	orr	w3, w3, #0x40000
   8d2d0:	b9012c03 	str	w3, [x0, #300]
   8d2d4:	36180082 	tbz	w2, #3, 8d2e4 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0xa4>
   8d2d8:	b9412c03 	ldr	w3, [x0, #300]
   8d2dc:	32100063 	orr	w3, w3, #0x10000
   8d2e0:	b9012c03 	str	w3, [x0, #300]
   8d2e4:	36200082 	tbz	w2, #4, 8d2f4 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0xb4>
   8d2e8:	b9412c03 	ldr	w3, [x0, #300]
   8d2ec:	321b0063 	orr	w3, w3, #0x20
   8d2f0:	b9012c03 	str	w3, [x0, #300]
   8d2f4:	36280082 	tbz	w2, #5, 8d304 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0xc4>
   8d2f8:	b9412c03 	ldr	w3, [x0, #300]
   8d2fc:	321a0063 	orr	w3, w3, #0x40
   8d300:	b9012c03 	str	w3, [x0, #300]
   8d304:	36300082 	tbz	w2, #6, 8d314 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0xd4>
   8d308:	b9412c03 	ldr	w3, [x0, #300]
   8d30c:	32140063 	orr	w3, w3, #0x1000
   8d310:	b9012c03 	str	w3, [x0, #300]
   8d314:	36380082 	tbz	w2, #7, 8d324 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0xe4>
   8d318:	b9412c02 	ldr	w2, [x0, #300]
   8d31c:	32130042 	orr	w2, w2, #0x2000
   8d320:	b9012c02 	str	w2, [x0, #300]
   8d324:	39401823 	ldrb	w3, [x1, #6]
   8d328:	39401c22 	ldrb	w2, [x1, #7]
   8d32c:	2a022062 	orr	w2, w3, w2, lsl #8
   8d330:	53027c42 	lsr	w2, w2, #2
   8d334:	7101fc5f 	cmp	w2, #0x7f
   8d338:	b9007c02 	str	w2, [x0, #124]
   8d33c:	54000089 	b.ls	8d34c <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x10c>  // b.plast
   8d340:	b9412c02 	ldr	w2, [x0, #300]
   8d344:	321d0042 	orr	w2, w2, #0x8
   8d348:	b9012c02 	str	w2, [x0, #300]
   8d34c:	39402023 	ldrb	w3, [x1, #8]
   8d350:	39402422 	ldrb	w2, [x1, #9]
   8d354:	2a022062 	orr	w2, w3, w2, lsl #8
   8d358:	53027c42 	lsr	w2, w2, #2
   8d35c:	7101fc5f 	cmp	w2, #0x7f
   8d360:	b9008802 	str	w2, [x0, #136]
   8d364:	54000089 	b.ls	8d374 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)+0x134>  // b.plast
   8d368:	b9412c02 	ldr	w2, [x0, #300]
   8d36c:	321c0042 	orr	w2, w2, #0x10
   8d370:	b9012c02 	str	w2, [x0, #300]
   8d374:	39402823 	ldrb	w3, [x1, #10]
   8d378:	39402c22 	ldrb	w2, [x1, #11]
   8d37c:	aa022062 	orr	x2, x3, x2, lsl #8
   8d380:	93403c42 	sxth	x2, w2
   8d384:	11402042 	add	w2, w2, #0x8, lsl #12
   8d388:	53087c42 	lsr	w2, w2, #8
   8d38c:	b9004c02 	str	w2, [x0, #76]
   8d390:	39403023 	ldrb	w3, [x1, #12]
   8d394:	39403422 	ldrb	w2, [x1, #13]
   8d398:	aa022062 	orr	x2, x3, x2, lsl #8
   8d39c:	93403c42 	sxth	x2, w2
   8d3a0:	11402042 	add	w2, w2, #0x8, lsl #12
   8d3a4:	53087c42 	lsr	w2, w2, #8
   8d3a8:	52001c42 	eor	w2, w2, #0xff
   8d3ac:	b9005802 	str	w2, [x0, #88]
   8d3b0:	39403823 	ldrb	w3, [x1, #14]
   8d3b4:	39403c22 	ldrb	w2, [x1, #15]
   8d3b8:	aa022062 	orr	x2, x3, x2, lsl #8
   8d3bc:	93403c42 	sxth	x2, w2
   8d3c0:	11402042 	add	w2, w2, #0x8, lsl #12
   8d3c4:	53087c42 	lsr	w2, w2, #8
   8d3c8:	b9006402 	str	w2, [x0, #100]
   8d3cc:	39404022 	ldrb	w2, [x1, #16]
   8d3d0:	39404421 	ldrb	w1, [x1, #17]
   8d3d4:	aa012041 	orr	x1, x2, x1, lsl #8
   8d3d8:	93403c21 	sxth	x1, w1
   8d3dc:	11402021 	add	w1, w1, #0x8, lsl #12
   8d3e0:	53087c21 	lsr	w1, w1, #8
   8d3e4:	52001c21 	eor	w1, w1, #0xff
   8d3e8:	b9007001 	str	w1, [x0, #112]
   8d3ec:	d65f03c0 	ret

000000000008d3f0 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   8d3f0:	b0000141 	adrp	x1, b6000 <From+0x98>
   8d3f4:	91226021 	add	x1, x1, #0x898
   8d3f8:	f9000001 	str	x1, [x0]
   8d3fc:	14003581 	b	9aa00 <CUSBGamePadDevice::~CUSBGamePadDevice()>

000000000008d400 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   8d400:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8d404:	b0000141 	adrp	x1, b6000 <From+0x98>
   8d408:	91226021 	add	x1, x1, #0x898
   8d40c:	910003fd 	mov	x29, sp
   8d410:	f9000bf3 	str	x19, [sp, #16]
   8d414:	aa0003f3 	mov	x19, x0
   8d418:	f9000001 	str	x1, [x0]
   8d41c:	94003579 	bl	9aa00 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   8d420:	aa1303e0 	mov	x0, x19
   8d424:	d2802c01 	mov	x1, #0x160                 	// #352
   8d428:	f9400bf3 	ldr	x19, [sp, #16]
   8d42c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d430:	14006bb4 	b	a8300 <operator delete(void*, unsigned long)>
   8d434:	d503201f 	nop
   8d438:	d503201f 	nop
   8d43c:	d503201f 	nop

000000000008d440 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)>:
   8d440:	b4000801 	cbz	x1, 8d540 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x100>
   8d444:	a9b77bfd 	stp	x29, x30, [sp, #-144]!
   8d448:	7100185f 	cmp	w2, #0x6
   8d44c:	910003fd 	mov	x29, sp
   8d450:	aa0103e3 	mov	x3, x1
   8d454:	540001c0 	b.eq	8d48c <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x4c>  // b.none
   8d458:	a90153f3 	stp	x19, x20, [sp, #16]
   8d45c:	aa0003f3 	mov	x19, x0
   8d460:	f940a404 	ldr	x4, [x0, #328]
   8d464:	b40000e4 	cbz	x4, 8d480 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x40>
   8d468:	7100c05f 	cmp	w2, #0x30
   8d46c:	7a521844 	ccmp	w2, #0x12, #0x4, ne	// ne = any
   8d470:	54000081 	b.ne	8d480 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x40>  // b.any
   8d474:	39400022 	ldrb	w2, [x1]
   8d478:	7100805f 	cmp	w2, #0x20
   8d47c:	540004a0 	b.eq	8d510 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xd0>  // b.none
   8d480:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d484:	a8c97bfd 	ldp	x29, x30, [sp], #144
   8d488:	d65f03c0 	ret
   8d48c:	39400021 	ldrb	w1, [x1]
   8d490:	71001c3f 	cmp	w1, #0x7
   8d494:	54ffff81 	b.ne	8d484 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x44>  // b.any
   8d498:	39400461 	ldrb	w1, [x3, #1]
   8d49c:	7100c03f 	cmp	w1, #0x30
   8d4a0:	54ffff21 	b.ne	8d484 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x44>  // b.any
   8d4a4:	39400865 	ldrb	w5, [x3, #2]
   8d4a8:	91017fe4 	add	x4, sp, #0x5f
   8d4ac:	d2840026 	mov	x6, #0x2001                	// #8193
   8d4b0:	f2a12006 	movk	x6, #0x900, lsl #16
   8d4b4:	927ae484 	and	x4, x4, #0xffffffffffffffc0
   8d4b8:	d2800007 	mov	x7, #0x0                   	// #0
   8d4bc:	f2c0e006 	movk	x6, #0x700, lsl #32
   8d4c0:	f2e04406 	movk	x6, #0x220, lsl #48
   8d4c4:	aa0403e1 	mov	x1, x4
   8d4c8:	a9017c9f 	stp	xzr, xzr, [x4, #16]
   8d4cc:	52800003 	mov	w3, #0x0                   	// #0
   8d4d0:	528001a2 	mov	w2, #0xd                   	// #13
   8d4d4:	a9001c86 	stp	x6, x7, [x4]
   8d4d8:	39000885 	strb	w5, [x4, #2]
   8d4dc:	a9027c9f 	stp	xzr, xzr, [x4, #32]
   8d4e0:	a9037c9f 	stp	xzr, xzr, [x4, #48]
   8d4e4:	940001e7 	bl	8dc80 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>
   8d4e8:	72001c1f 	tst	w0, #0xff
   8d4ec:	54fffcc1 	b.ne	8d484 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x44>  // b.any
   8d4f0:	94004948 	bl	9fa10 <CLogger::Get()>
   8d4f4:	b0000123 	adrp	x3, b2000 <_etext+0x1158>
   8d4f8:	b0000141 	adrp	x1, b6000 <From+0x98>
   8d4fc:	91370063 	add	x3, x3, #0xdc0
   8d500:	9124e021 	add	x1, x1, #0x938
   8d504:	52800022 	mov	w2, #0x1                   	// #1
   8d508:	94004b2e 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8d50c:	17ffffde 	b	8d484 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x44>
   8d510:	aa0003f4 	mov	x20, x0
   8d514:	f8448682 	ldr	x2, [x20], #72
   8d518:	f9404c42 	ldr	x2, [x2, #152]
   8d51c:	d63f0040 	blr	x2
   8d520:	b9415660 	ldr	w0, [x19, #340]
   8d524:	aa1403e1 	mov	x1, x20
   8d528:	f940a662 	ldr	x2, [x19, #328]
   8d52c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d530:	51000400 	sub	w0, w0, #0x1
   8d534:	a8c97bfd 	ldp	x29, x30, [sp], #144
   8d538:	aa0203f0 	mov	x16, x2
   8d53c:	d61f0200 	br	x16
   8d540:	d65f03c0 	ret
   8d544:	d503201f 	nop
   8d548:	d503201f 	nop
   8d54c:	d503201f 	nop

000000000008d550 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)>:
   8d550:	a9b77bfd 	stp	x29, x30, [sp, #-144]!
   8d554:	91017fe4 	add	x4, sp, #0x5f
   8d558:	910003fd 	mov	x29, sp
   8d55c:	927ae484 	and	x4, x4, #0xffffffffffffffc0
   8d560:	b0000142 	adrp	x2, b6000 <From+0x98>
   8d564:	9124e042 	add	x2, x2, #0x938
   8d568:	a90153f3 	stp	x19, x20, [sp, #16]
   8d56c:	2a0103f3 	mov	w19, w1
   8d570:	aa0003f4 	mov	x20, x0
   8d574:	91004041 	add	x1, x2, #0x10
   8d578:	aa0403e0 	mov	x0, x4
   8d57c:	d28001c2 	mov	x2, #0xe                   	// #14
   8d580:	940068b2 	bl	a7848 <memcpy>
   8d584:	4f000400 	movi	v0.4s, #0x0
   8d588:	aa0003e4 	mov	x4, x0
   8d58c:	91003800 	add	x0, x0, #0xe
   8d590:	7100067f 	cmp	w19, #0x1
   8d594:	79007c9f 	strh	wzr, [x4, #62]
   8d598:	ad000000 	stp	q0, q0, [x0]
   8d59c:	3d800800 	str	q0, [x0, #32]
   8d5a0:	54000140 	b.eq	8d5c8 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x78>  // b.none
   8d5a4:	71000a7f 	cmp	w19, #0x2
   8d5a8:	540002c0 	b.eq	8d600 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0xb0>  // b.none
   8d5ac:	34000133 	cbz	w19, 8d5d0 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x80>
   8d5b0:	b0000121 	adrp	x1, b2000 <_etext+0x1158>
   8d5b4:	b0000120 	adrp	x0, b2000 <_etext+0x1158>
   8d5b8:	91376021 	add	x1, x1, #0xdd8
   8d5bc:	910ba000 	add	x0, x0, #0x2e8
   8d5c0:	52801e22 	mov	w2, #0xf1                  	// #241
   8d5c4:	940041df 	bl	9dd40 <assertion_failed>
   8d5c8:	12800000 	mov	w0, #0xffffffff            	// #-1
   8d5cc:	39002480 	strb	w0, [x4, #9]
   8d5d0:	39456285 	ldrb	w5, [x20, #344]
   8d5d4:	aa0403e1 	mov	x1, x4
   8d5d8:	aa1403e0 	mov	x0, x20
   8d5dc:	52800003 	mov	w3, #0x0                   	// #0
   8d5e0:	528001a2 	mov	w2, #0xd                   	// #13
   8d5e4:	110004a6 	add	w6, w5, #0x1
   8d5e8:	39000885 	strb	w5, [x4, #2]
   8d5ec:	39056286 	strb	w6, [x20, #344]
   8d5f0:	9400017c 	bl	8dbe0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   8d5f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d5f8:	a8c97bfd 	ldp	x29, x30, [sp], #144
   8d5fc:	d65f03c0 	ret
   8d600:	12800000 	mov	w0, #0xffffffff            	// #-1
   8d604:	39002080 	strb	w0, [x4, #8]
   8d608:	17fffff2 	b	8d5d0 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x80>
   8d60c:	d503201f 	nop

000000000008d610 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>:
   8d610:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8d614:	910003fd 	mov	x29, sp
   8d618:	f9000bf3 	str	x19, [sp, #16]
   8d61c:	aa0003f3 	mov	x19, x0
   8d620:	940034e4 	bl	9a9b0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   8d624:	b0000140 	adrp	x0, b6000 <From+0x98>
   8d628:	91226000 	add	x0, x0, #0x898
   8d62c:	3905627f 	strb	wzr, [x19, #344]
   8d630:	f9000260 	str	x0, [x19]
   8d634:	f9400bf3 	ldr	x19, [sp, #16]
   8d638:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d63c:	d65f03c0 	ret

000000000008d640 <CUSBGamePadXboxOneDevice::Configure()>:
   8d640:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   8d644:	52800801 	mov	w1, #0x40                  	// #64
   8d648:	910003fd 	mov	x29, sp
   8d64c:	a90153f3 	stp	x19, x20, [sp, #16]
   8d650:	aa0003f3 	mov	x19, x0
   8d654:	7902a001 	strh	w1, [x0, #336]
   8d658:	9400346e 	bl	9a810 <CUSBGamePadDevice::Configure()>
   8d65c:	72001c14 	ands	w20, w0, #0xff
   8d660:	54000660 	b.eq	8d72c <CUSBGamePadXboxOneDevice::Configure()+0xec>  // b.none
   8d664:	d2c01fe5 	mov	x5, #0xff00000000          	// #1095216660480
   8d668:	52801fe4 	mov	w4, #0xff                  	// #255
   8d66c:	f90013f5 	str	x21, [sp, #32]
   8d670:	52800268 	mov	w8, #0x13                  	// #19
   8d674:	528000c0 	mov	w0, #0x6                   	// #6
   8d678:	b9010e7f 	str	wzr, [x19, #268]
   8d67c:	9101bff5 	add	x21, sp, #0x6f
   8d680:	d2800007 	mov	x7, #0x0                   	// #0
   8d684:	f9002a65 	str	x5, [x19, #80]
   8d688:	927ae6b5 	and	x21, x21, #0xffffffffffffffc0
   8d68c:	d28400a6 	mov	x6, #0x2005                	// #8197
   8d690:	f2a02006 	movk	x6, #0x100, lsl #16
   8d694:	52800003 	mov	w3, #0x0                   	// #0
   8d698:	b9004a60 	str	w0, [x19, #72]
   8d69c:	528000a2 	mov	w2, #0x5                   	// #5
   8d6a0:	aa1503e1 	mov	x1, x21
   8d6a4:	290b927f 	stp	wzr, w4, [x19, #92]
   8d6a8:	aa1303e0 	mov	x0, x19
   8d6ac:	f9003665 	str	x5, [x19, #104]
   8d6b0:	290e927f 	stp	wzr, w4, [x19, #116]
   8d6b4:	f9004265 	str	x5, [x19, #128]
   8d6b8:	2911927f 	stp	wzr, w4, [x19, #140]
   8d6bc:	b9012a68 	str	w8, [x19, #296]
   8d6c0:	a9001ea6 	stp	x6, x7, [x21]
   8d6c4:	a9017ebf 	stp	xzr, xzr, [x21, #16]
   8d6c8:	a9027ebf 	stp	xzr, xzr, [x21, #32]
   8d6cc:	a9037ebf 	stp	xzr, xzr, [x21, #48]
   8d6d0:	94000144 	bl	8dbe0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   8d6d4:	72001c14 	ands	w20, w0, #0xff
   8d6d8:	54000120 	b.eq	8d6fc <CUSBGamePadXboxOneDevice::Configure()+0xbc>  // b.none
   8d6dc:	aa1303e0 	mov	x0, x19
   8d6e0:	940001d0 	bl	8de20 <CUSBHIDDevice::StartRequest()>
   8d6e4:	12001c14 	and	w20, w0, #0xff
   8d6e8:	f94013f5 	ldr	x21, [sp, #32]
   8d6ec:	2a1403e0 	mov	w0, w20
   8d6f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d6f4:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   8d6f8:	d65f03c0 	ret
   8d6fc:	940048c5 	bl	9fa10 <CLogger::Get()>
   8d700:	b0000123 	adrp	x3, b2000 <_etext+0x1158>
   8d704:	b0000141 	adrp	x1, b6000 <From+0x98>
   8d708:	9137c063 	add	x3, x3, #0xdf0
   8d70c:	9124e021 	add	x1, x1, #0x938
   8d710:	52800022 	mov	w2, #0x1                   	// #1
   8d714:	94004aab 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8d718:	2a1403e0 	mov	w0, w20
   8d71c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d720:	f94013f5 	ldr	x21, [sp, #32]
   8d724:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   8d728:	d65f03c0 	ret
   8d72c:	940048b9 	bl	9fa10 <CLogger::Get()>
   8d730:	b0000123 	adrp	x3, b2000 <_etext+0x1158>
   8d734:	b0000141 	adrp	x1, b6000 <From+0x98>
   8d738:	912d0063 	add	x3, x3, #0xb40
   8d73c:	9124e021 	add	x1, x1, #0x938
   8d740:	52800022 	mov	w2, #0x1                   	// #1
   8d744:	94004a9f 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8d748:	2a1403e0 	mov	w0, w20
   8d74c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d750:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   8d754:	d65f03c0 	ret
	...

000000000008d760 <CUSBGamePadXboxOneDevice::GetProperties()>:
   8d760:	52800120 	mov	w0, #0x9                   	// #9
   8d764:	d65f03c0 	ret
	...

000000000008d770 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)>:
   8d770:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8d774:	910003fd 	mov	x29, sp
   8d778:	a90153f3 	stp	x19, x20, [sp, #16]
   8d77c:	b40003a0 	cbz	x0, 8d7f0 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x80>
   8d780:	aa0003f3 	mov	x19, x0
   8d784:	aa0103f4 	mov	x20, x1
   8d788:	97ffd102 	bl	81b90 <CUSBRequest::GetStatus() const>
   8d78c:	34000220 	cbz	w0, 8d7d0 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x60>
   8d790:	aa1303e0 	mov	x0, x19
   8d794:	97ffd0e3 	bl	81b20 <CUSBRequest::~CUSBRequest()>
   8d798:	aa1303e0 	mov	x0, x19
   8d79c:	d2801201 	mov	x1, #0x90                  	// #144
   8d7a0:	97ffd1c0 	bl	81ea0 <CUSBRequest::operator delete(void*, unsigned long)>
   8d7a4:	b50000f4 	cbnz	x20, 8d7c0 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x50>
   8d7a8:	b0000121 	adrp	x1, b2000 <_etext+0x1158>
   8d7ac:	b0000120 	adrp	x0, b2000 <_etext+0x1158>
   8d7b0:	91382021 	add	x1, x1, #0xe08
   8d7b4:	91390000 	add	x0, x0, #0xe40
   8d7b8:	52801722 	mov	w2, #0xb9                  	// #185
   8d7bc:	94004161 	bl	9dd40 <assertion_failed>
   8d7c0:	aa1403e0 	mov	x0, x20
   8d7c4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d7c8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d7cc:	14006ac1 	b	a82d0 <operator delete[](void*)>
   8d7d0:	94004890 	bl	9fa10 <CLogger::Get()>
   8d7d4:	b0000123 	adrp	x3, b2000 <_etext+0x1158>
   8d7d8:	b0000141 	adrp	x1, b6000 <From+0x98>
   8d7dc:	91388063 	add	x3, x3, #0xe20
   8d7e0:	91274021 	add	x1, x1, #0x9d0
   8d7e4:	52800042 	mov	w2, #0x2                   	// #2
   8d7e8:	94004a76 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8d7ec:	17ffffe9 	b	8d790 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x20>
   8d7f0:	b0000121 	adrp	x1, b2000 <_etext+0x1158>
   8d7f4:	90000120 	adrp	x0, b1000 <_etext+0x158>
   8d7f8:	91382021 	add	x1, x1, #0xe08
   8d7fc:	910aa000 	add	x0, x0, #0x2a8
   8d800:	52801602 	mov	w2, #0xb0                  	// #176
   8d804:	9400414f 	bl	9dd40 <assertion_failed>
   8d808:	d503201f 	nop
   8d80c:	d503201f 	nop

000000000008d810 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>:
   8d810:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8d814:	910003fd 	mov	x29, sp
   8d818:	a90153f3 	stp	x19, x20, [sp, #16]
   8d81c:	aa0003f3 	mov	x19, x0
   8d820:	2a0203f4 	mov	w20, w2
   8d824:	97fff3a7 	bl	8a6c0 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   8d828:	b0000140 	adrp	x0, b6000 <From+0x98>
   8d82c:	9125a000 	add	x0, x0, #0x968
   8d830:	b9002a74 	str	w20, [x19, #40]
   8d834:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   8d838:	f9000260 	str	x0, [x19]
   8d83c:	f900227f 	str	xzr, [x19, #64]
   8d840:	35000094 	cbnz	w20, 8d850 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x40>
   8d844:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d848:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d84c:	d65f03c0 	ret
   8d850:	2a1403e0 	mov	w0, w20
   8d854:	94006a8b 	bl	a8280 <operator new[](unsigned long)>
   8d858:	f9002260 	str	x0, [x19, #64]
   8d85c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d860:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d864:	d65f03c0 	ret
   8d868:	d503201f 	nop
   8d86c:	d503201f 	nop

000000000008d870 <CUSBHIDDevice::~CUSBHIDDevice()>:
   8d870:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8d874:	910003fd 	mov	x29, sp
   8d878:	b0000141 	adrp	x1, b6000 <From+0x98>
   8d87c:	9125a021 	add	x1, x1, #0x968
   8d880:	a90153f3 	stp	x19, x20, [sp, #16]
   8d884:	aa0003f3 	mov	x19, x0
   8d888:	f9402000 	ldr	x0, [x0, #64]
   8d88c:	f9000261 	str	x1, [x19]
   8d890:	b4000040 	cbz	x0, 8d898 <CUSBHIDDevice::~CUSBHIDDevice()+0x28>
   8d894:	94006a8f 	bl	a82d0 <operator delete[](void*)>
   8d898:	f900227f 	str	xzr, [x19, #64]
   8d89c:	f9401e74 	ldr	x20, [x19, #56]
   8d8a0:	b40000d4 	cbz	x20, 8d8b8 <CUSBHIDDevice::~CUSBHIDDevice()+0x48>
   8d8a4:	aa1403e0 	mov	x0, x20
   8d8a8:	97fff28e 	bl	8a2e0 <CUSBEndpoint::~CUSBEndpoint()>
   8d8ac:	aa1403e0 	mov	x0, x20
   8d8b0:	d2800401 	mov	x1, #0x20                  	// #32
   8d8b4:	94006a93 	bl	a8300 <operator delete(void*, unsigned long)>
   8d8b8:	f9001e7f 	str	xzr, [x19, #56]
   8d8bc:	f9401a74 	ldr	x20, [x19, #48]
   8d8c0:	b40000d4 	cbz	x20, 8d8d8 <CUSBHIDDevice::~CUSBHIDDevice()+0x68>
   8d8c4:	aa1403e0 	mov	x0, x20
   8d8c8:	97fff286 	bl	8a2e0 <CUSBEndpoint::~CUSBEndpoint()>
   8d8cc:	aa1403e0 	mov	x0, x20
   8d8d0:	d2800401 	mov	x1, #0x20                  	// #32
   8d8d4:	94006a8b 	bl	a8300 <operator delete(void*, unsigned long)>
   8d8d8:	aa1303e0 	mov	x0, x19
   8d8dc:	f9001a7f 	str	xzr, [x19, #48]
   8d8e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d8e4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d8e8:	17fff2d2 	b	8a430 <CUSBFunction::~CUSBFunction()>
   8d8ec:	d503201f 	nop

000000000008d8f0 <CUSBHIDDevice::~CUSBHIDDevice()>:
   8d8f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8d8f4:	910003fd 	mov	x29, sp
   8d8f8:	f9000bf3 	str	x19, [sp, #16]
   8d8fc:	aa0003f3 	mov	x19, x0
   8d900:	97ffffdc 	bl	8d870 <CUSBHIDDevice::~CUSBHIDDevice()>
   8d904:	aa1303e0 	mov	x0, x19
   8d908:	d2800901 	mov	x1, #0x48                  	// #72
   8d90c:	f9400bf3 	ldr	x19, [sp, #16]
   8d910:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d914:	14006a7b 	b	a8300 <operator delete(void*, unsigned long)>
   8d918:	d503201f 	nop
   8d91c:	d503201f 	nop

000000000008d920 <CUSBHIDDevice::ConfigureHID(unsigned int)>:
   8d920:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   8d924:	910003fd 	mov	x29, sp
   8d928:	a90153f3 	stp	x19, x20, [sp, #16]
   8d92c:	aa0003f4 	mov	x20, x0
   8d930:	a9025bf5 	stp	x21, x22, [sp, #32]
   8d934:	2a0103f5 	mov	w21, w1
   8d938:	97fff3ba 	bl	8a820 <CUSBFunction::GetNumEndpoints() const>
   8d93c:	72001c1f 	tst	w0, #0xff
   8d940:	540000c1 	b.ne	8d958 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x38>  // b.any
   8d944:	1400004b 	b	8da70 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x150>
   8d948:	39400e62 	ldrb	w2, [x19, #3]
   8d94c:	12001442 	and	w2, w2, #0x3f
   8d950:	71000c5f 	cmp	w2, #0x3
   8d954:	540003e0 	b.eq	8d9d0 <CUSBHIDDevice::ConfigureHID(unsigned int)+0xb0>  // b.none
   8d958:	528000a1 	mov	w1, #0x5                   	// #5
   8d95c:	aa1403e0 	mov	x0, x20
   8d960:	97fff3e0 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   8d964:	aa0003f3 	mov	x19, x0
   8d968:	b5ffff00 	cbnz	x0, 8d948 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x28>
   8d96c:	f9401a80 	ldr	x0, [x20, #48]
   8d970:	b4000a80 	cbz	x0, 8dac0 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x1a0>
   8d974:	aa1403e0 	mov	x0, x20
   8d978:	97fff2e6 	bl	8a510 <CUSBFunction::Configure()>
   8d97c:	72001c13 	ands	w19, w0, #0xff
   8d980:	54000600 	b.eq	8da40 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x120>  // b.none
   8d984:	aa1403e0 	mov	x0, x20
   8d988:	97fff442 	bl	8aa90 <CUSBFunction::GetInterfaceClass() const>
   8d98c:	12001c00 	and	w0, w0, #0xff
   8d990:	71000c1f 	cmp	w0, #0x3
   8d994:	54000a80 	b.eq	8dae4 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x1c4>  // b.none
   8d998:	b9402a80 	ldr	w0, [x20, #40]
   8d99c:	350007e0 	cbnz	w0, 8da98 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x178>
   8d9a0:	b9002a95 	str	w21, [x20, #40]
   8d9a4:	34000e95 	cbz	w21, 8db74 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x254>
   8d9a8:	f9402280 	ldr	x0, [x20, #64]
   8d9ac:	b5000f40 	cbnz	x0, 8db94 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x274>
   8d9b0:	2a1503e0 	mov	w0, w21
   8d9b4:	94006a33 	bl	a8280 <operator new[](unsigned long)>
   8d9b8:	f9002280 	str	x0, [x20, #64]
   8d9bc:	2a1303e0 	mov	w0, w19
   8d9c0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d9c4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8d9c8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8d9cc:	d65f03c0 	ret
   8d9d0:	39c00a60 	ldrsb	w0, [x19, #2]
   8d9d4:	37f801c0 	tbnz	w0, #31, 8da0c <CUSBHIDDevice::ConfigureHID(unsigned int)+0xec>
   8d9d8:	f9401e80 	ldr	x0, [x20, #56]
   8d9dc:	b50004a0 	cbnz	x0, 8da70 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x150>
   8d9e0:	aa1403e0 	mov	x0, x20
   8d9e4:	97fff39b 	bl	8a850 <CUSBFunction::GetDevice() const>
   8d9e8:	aa0003f6 	mov	x22, x0
   8d9ec:	d2800400 	mov	x0, #0x20                  	// #32
   8d9f0:	94006a1c 	bl	a8260 <operator new(unsigned long)>
   8d9f4:	aa1603e1 	mov	x1, x22
   8d9f8:	aa0003f6 	mov	x22, x0
   8d9fc:	aa1303e2 	mov	x2, x19
   8da00:	97fff1cc 	bl	8a130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   8da04:	f9001e96 	str	x22, [x20, #56]
   8da08:	17ffffd4 	b	8d958 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x38>
   8da0c:	f9401a80 	ldr	x0, [x20, #48]
   8da10:	b5000300 	cbnz	x0, 8da70 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x150>
   8da14:	aa1403e0 	mov	x0, x20
   8da18:	97fff38e 	bl	8a850 <CUSBFunction::GetDevice() const>
   8da1c:	aa0003f6 	mov	x22, x0
   8da20:	d2800400 	mov	x0, #0x20                  	// #32
   8da24:	94006a0f 	bl	a8260 <operator new(unsigned long)>
   8da28:	aa1603e1 	mov	x1, x22
   8da2c:	aa0003f6 	mov	x22, x0
   8da30:	aa1303e2 	mov	x2, x19
   8da34:	97fff1bf 	bl	8a130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   8da38:	f9001a96 	str	x22, [x20, #48]
   8da3c:	17ffffc7 	b	8d958 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x38>
   8da40:	940047f4 	bl	9fa10 <CLogger::Get()>
   8da44:	90000123 	adrp	x3, b1000 <_etext+0x158>
   8da48:	b0000141 	adrp	x1, b6000 <From+0x98>
   8da4c:	9112c063 	add	x3, x3, #0x4b0
   8da50:	91274021 	add	x1, x1, #0x9d0
   8da54:	52800022 	mov	w2, #0x1                   	// #1
   8da58:	940049da 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8da5c:	2a1303e0 	mov	w0, w19
   8da60:	a94153f3 	ldp	x19, x20, [sp, #16]
   8da64:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8da68:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8da6c:	d65f03c0 	ret
   8da70:	aa1403e0 	mov	x0, x20
   8da74:	b0000141 	adrp	x1, b6000 <From+0x98>
   8da78:	91274021 	add	x1, x1, #0x9d0
   8da7c:	52800013 	mov	w19, #0x0                   	// #0
   8da80:	97fff3a4 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   8da84:	2a1303e0 	mov	w0, w19
   8da88:	a94153f3 	ldp	x19, x20, [sp, #16]
   8da8c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8da90:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8da94:	d65f03c0 	ret
   8da98:	f9402280 	ldr	x0, [x20, #64]
   8da9c:	b5fffe00 	cbnz	x0, 8da5c <CUSBHIDDevice::ConfigureHID(unsigned int)+0x13c>
   8daa0:	b0000121 	adrp	x1, b2000 <_etext+0x1158>
   8daa4:	b0000120 	adrp	x0, b2000 <_etext+0x1158>
   8daa8:	a90363f7 	stp	x23, x24, [sp, #48]
   8daac:	91382021 	add	x1, x1, #0xe08
   8dab0:	913a8000 	add	x0, x0, #0xea0
   8dab4:	52801062 	mov	w2, #0x83                  	// #131
   8dab8:	f90023f9 	str	x25, [sp, #64]
   8dabc:	940040a1 	bl	9dd40 <assertion_failed>
   8dac0:	aa1403e0 	mov	x0, x20
   8dac4:	b0000141 	adrp	x1, b6000 <From+0x98>
   8dac8:	91274021 	add	x1, x1, #0x9d0
   8dacc:	97fff391 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   8dad0:	2a1303e0 	mov	w0, w19
   8dad4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8dad8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8dadc:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8dae0:	d65f03c0 	ret
   8dae4:	aa1403e0 	mov	x0, x20
   8dae8:	97fff3f6 	bl	8aac0 <CUSBFunction::GetInterfaceSubClass() const>
   8daec:	12001c16 	and	w22, w0, #0xff
   8daf0:	710006df 	cmp	w22, #0x1
   8daf4:	54fff521 	b.ne	8d998 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x78>  // b.any
   8daf8:	aa1403e0 	mov	x0, x20
   8dafc:	97fff3fd 	bl	8aaf0 <CUSBFunction::GetInterfaceProtocol() const>
   8db00:	72001c1f 	tst	w0, #0xff
   8db04:	54fff4a0 	b.eq	8d998 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x78>  // b.none
   8db08:	aa1403e0 	mov	x0, x20
   8db0c:	a90363f7 	stp	x23, x24, [sp, #48]
   8db10:	f90023f9 	str	x25, [sp, #64]
   8db14:	97fff367 	bl	8a8b0 <CUSBFunction::GetHost() const>
   8db18:	aa0003f7 	mov	x23, x0
   8db1c:	aa1403e0 	mov	x0, x20
   8db20:	97fff358 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   8db24:	aa0003f9 	mov	x25, x0
   8db28:	aa1403e0 	mov	x0, x20
   8db2c:	97fff3f1 	bl	8aaf0 <CUSBFunction::GetInterfaceProtocol() const>
   8db30:	12001c18 	and	w24, w0, #0xff
   8db34:	aa1403e0 	mov	x0, x20
   8db38:	97fff3ca 	bl	8aa60 <CUSBFunction::GetInterfaceNumber() const>
   8db3c:	71000b1f 	cmp	w24, #0x2
   8db40:	12001c05 	and	w5, w0, #0xff
   8db44:	1a9f17e4 	cset	w4, eq	// eq = none
   8db48:	aa1903e1 	mov	x1, x25
   8db4c:	aa1703e0 	mov	x0, x23
   8db50:	52800007 	mov	w7, #0x0                   	// #0
   8db54:	d2800006 	mov	x6, #0x0                   	// #0
   8db58:	52800163 	mov	w3, #0xb                   	// #11
   8db5c:	52800422 	mov	w2, #0x21                  	// #33
   8db60:	97ffcd2c 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8db64:	37f80280 	tbnz	w0, #31, 8dbb4 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x294>
   8db68:	a94363f7 	ldp	x23, x24, [sp, #48]
   8db6c:	f94023f9 	ldr	x25, [sp, #64]
   8db70:	17ffff8a 	b	8d998 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x78>
   8db74:	b0000121 	adrp	x1, b2000 <_etext+0x1158>
   8db78:	b0000120 	adrp	x0, b2000 <_etext+0x1158>
   8db7c:	a90363f7 	stp	x23, x24, [sp, #48]
   8db80:	91382021 	add	x1, x1, #0xe08
   8db84:	9139c000 	add	x0, x0, #0xe70
   8db88:	52800fc2 	mov	w2, #0x7e                  	// #126
   8db8c:	f90023f9 	str	x25, [sp, #64]
   8db90:	9400406c 	bl	9dd40 <assertion_failed>
   8db94:	b0000121 	adrp	x1, b2000 <_etext+0x1158>
   8db98:	b0000120 	adrp	x0, b2000 <_etext+0x1158>
   8db9c:	a90363f7 	stp	x23, x24, [sp, #48]
   8dba0:	91382021 	add	x1, x1, #0xe08
   8dba4:	913a2000 	add	x0, x0, #0xe88
   8dba8:	52801002 	mov	w2, #0x80                  	// #128
   8dbac:	f90023f9 	str	x25, [sp, #64]
   8dbb0:	94004064 	bl	9dd40 <assertion_failed>
   8dbb4:	94004797 	bl	9fa10 <CLogger::Get()>
   8dbb8:	b0000123 	adrp	x3, b2000 <_etext+0x1158>
   8dbbc:	b0000141 	adrp	x1, b6000 <From+0x98>
   8dbc0:	2a1603e2 	mov	w2, w22
   8dbc4:	91396063 	add	x3, x3, #0xe58
   8dbc8:	91274021 	add	x1, x1, #0x9d0
   8dbcc:	52800013 	mov	w19, #0x0                   	// #0
   8dbd0:	9400497c 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8dbd4:	a94363f7 	ldp	x23, x24, [sp, #48]
   8dbd8:	f94023f9 	ldr	x25, [sp, #64]
   8dbdc:	17ffffa0 	b	8da5c <CUSBHIDDevice::ConfigureHID(unsigned int)+0x13c>

000000000008dbe0 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>:
   8dbe0:	f9401c04 	ldr	x4, [x0, #56]
   8dbe4:	b40002e4 	cbz	x4, 8dc40 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x60>
   8dbe8:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8dbec:	910003fd 	mov	x29, sp
   8dbf0:	a90153f3 	stp	x19, x20, [sp, #16]
   8dbf4:	aa0103f4 	mov	x20, x1
   8dbf8:	a9025bf5 	stp	x21, x22, [sp, #32]
   8dbfc:	b4000261 	cbz	x1, 8dc48 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x68>
   8dc00:	2a0203f5 	mov	w21, w2
   8dc04:	340002e2 	cbz	w2, 8dc60 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x80>
   8dc08:	2a0303f6 	mov	w22, w3
   8dc0c:	aa0003f3 	mov	x19, x0
   8dc10:	97fff328 	bl	8a8b0 <CUSBFunction::GetHost() const>
   8dc14:	2a1603e4 	mov	w4, w22
   8dc18:	2a1503e3 	mov	w3, w21
   8dc1c:	f9401e61 	ldr	x1, [x19, #56]
   8dc20:	aa1403e2 	mov	x2, x20
   8dc24:	97ffcd77 	bl	81200 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   8dc28:	2a2003e0 	mvn	w0, w0
   8dc2c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8dc30:	531f7c00 	lsr	w0, w0, #31
   8dc34:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8dc38:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8dc3c:	d65f03c0 	ret
   8dc40:	52800000 	mov	w0, #0x0                   	// #0
   8dc44:	d65f03c0 	ret
   8dc48:	b0000121 	adrp	x1, b2000 <_etext+0x1158>
   8dc4c:	90000120 	adrp	x0, b1000 <_etext+0x158>
   8dc50:	91382021 	add	x1, x1, #0xe08
   8dc54:	911f6000 	add	x0, x0, #0x7d8
   8dc58:	528011e2 	mov	w2, #0x8f                  	// #143
   8dc5c:	94004039 	bl	9dd40 <assertion_failed>
   8dc60:	b0000121 	adrp	x1, b2000 <_etext+0x1158>
   8dc64:	b0000120 	adrp	x0, b2000 <_etext+0x1158>
   8dc68:	91382021 	add	x1, x1, #0xe08
   8dc6c:	913ae000 	add	x0, x0, #0xeb8
   8dc70:	52801202 	mov	w2, #0x90                  	// #144
   8dc74:	94004033 	bl	9dd40 <assertion_failed>
   8dc78:	d503201f 	nop
   8dc7c:	d503201f 	nop

000000000008dc80 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>:
   8dc80:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8dc84:	910003fd 	mov	x29, sp
   8dc88:	a90153f3 	stp	x19, x20, [sp, #16]
   8dc8c:	aa0003f3 	mov	x19, x0
   8dc90:	f9401c00 	ldr	x0, [x0, #56]
   8dc94:	b4000520 	cbz	x0, 8dd38 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xb8>
   8dc98:	a9025bf5 	stp	x21, x22, [sp, #32]
   8dc9c:	aa0103f5 	mov	x21, x1
   8dca0:	f9001bf7 	str	x23, [sp, #48]
   8dca4:	b4000521 	cbz	x1, 8dd48 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xc8>
   8dca8:	2a0203f4 	mov	w20, w2
   8dcac:	340005a2 	cbz	w2, 8dd60 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xe0>
   8dcb0:	2a0203f7 	mov	w23, w2
   8dcb4:	2a0303f6 	mov	w22, w3
   8dcb8:	aa1703e0 	mov	x0, x23
   8dcbc:	94006971 	bl	a8280 <operator new[](unsigned long)>
   8dcc0:	aa1703e2 	mov	x2, x23
   8dcc4:	aa1503e1 	mov	x1, x21
   8dcc8:	aa0003f5 	mov	x21, x0
   8dccc:	940066df 	bl	a7848 <memcpy>
   8dcd0:	d2801200 	mov	x0, #0x90                  	// #144
   8dcd4:	97ffd05b 	bl	81e40 <CUSBRequest::operator new(unsigned long)>
   8dcd8:	f9401e61 	ldr	x1, [x19, #56]
   8dcdc:	d2800004 	mov	x4, #0x0                   	// #0
   8dce0:	2a1403e3 	mov	w3, w20
   8dce4:	aa1503e2 	mov	x2, x21
   8dce8:	aa0003f4 	mov	x20, x0
   8dcec:	97ffcf6d 	bl	81aa0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   8dcf0:	90000001 	adrp	x1, 8d000 <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)+0x60>
   8dcf4:	aa1503e2 	mov	x2, x21
   8dcf8:	aa1303e3 	mov	x3, x19
   8dcfc:	aa1403e0 	mov	x0, x20
   8dd00:	911dc021 	add	x1, x1, #0x770
   8dd04:	97ffd02b 	bl	81db0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   8dd08:	aa1303e0 	mov	x0, x19
   8dd0c:	97fff2e9 	bl	8a8b0 <CUSBFunction::GetHost() const>
   8dd10:	f9400003 	ldr	x3, [x0]
   8dd14:	aa1403e1 	mov	x1, x20
   8dd18:	2a1603e2 	mov	w2, w22
   8dd1c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8dd20:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8dd24:	f9401463 	ldr	x3, [x3, #40]
   8dd28:	f9401bf7 	ldr	x23, [sp, #48]
   8dd2c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8dd30:	aa0303f0 	mov	x16, x3
   8dd34:	d61f0200 	br	x16
   8dd38:	52800000 	mov	w0, #0x0                   	// #0
   8dd3c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8dd40:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8dd44:	d65f03c0 	ret
   8dd48:	b0000121 	adrp	x1, b2000 <_etext+0x1158>
   8dd4c:	90000120 	adrp	x0, b1000 <_etext+0x158>
   8dd50:	91382021 	add	x1, x1, #0xe08
   8dd54:	911f6000 	add	x0, x0, #0x7d8
   8dd58:	52801422 	mov	w2, #0xa1                  	// #161
   8dd5c:	94003ff9 	bl	9dd40 <assertion_failed>
   8dd60:	b0000121 	adrp	x1, b2000 <_etext+0x1158>
   8dd64:	b0000120 	adrp	x0, b2000 <_etext+0x1158>
   8dd68:	91382021 	add	x1, x1, #0xe08
   8dd6c:	913ae000 	add	x0, x0, #0xeb8
   8dd70:	52801442 	mov	w2, #0xa2                  	// #162
   8dd74:	94003ff3 	bl	9dd40 <assertion_failed>
   8dd78:	d503201f 	nop
   8dd7c:	d503201f 	nop

000000000008dd80 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>:
   8dd80:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8dd84:	910003fd 	mov	x29, sp
   8dd88:	a90153f3 	stp	x19, x20, [sp, #16]
   8dd8c:	a9025bf5 	stp	x21, x22, [sp, #32]
   8dd90:	f9401804 	ldr	x4, [x0, #48]
   8dd94:	b4000204 	cbz	x4, 8ddd4 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x54>
   8dd98:	aa0103f4 	mov	x20, x1
   8dd9c:	b4000281 	cbz	x1, 8ddec <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x6c>
   8dda0:	2a0203f5 	mov	w21, w2
   8dda4:	34000302 	cbz	w2, 8de04 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x84>
   8dda8:	2a0303f6 	mov	w22, w3
   8ddac:	aa0003f3 	mov	x19, x0
   8ddb0:	97fff2c0 	bl	8a8b0 <CUSBFunction::GetHost() const>
   8ddb4:	2a1603e4 	mov	w4, w22
   8ddb8:	2a1503e3 	mov	w3, w21
   8ddbc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ddc0:	aa1403e2 	mov	x2, x20
   8ddc4:	f9401a61 	ldr	x1, [x19, #48]
   8ddc8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ddcc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8ddd0:	17ffcd0c 	b	81200 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   8ddd4:	b0000121 	adrp	x1, b2000 <_etext+0x1158>
   8ddd8:	b0000120 	adrp	x0, b2000 <_etext+0x1158>
   8dddc:	91382021 	add	x1, x1, #0xe08
   8dde0:	913b2000 	add	x0, x0, #0xec8
   8dde4:	528017e2 	mov	w2, #0xbf                  	// #191
   8dde8:	94003fd6 	bl	9dd40 <assertion_failed>
   8ddec:	b0000121 	adrp	x1, b2000 <_etext+0x1158>
   8ddf0:	90000120 	adrp	x0, b1000 <_etext+0x158>
   8ddf4:	91382021 	add	x1, x1, #0xe08
   8ddf8:	911f6000 	add	x0, x0, #0x7d8
   8ddfc:	52801802 	mov	w2, #0xc0                  	// #192
   8de00:	94003fd0 	bl	9dd40 <assertion_failed>
   8de04:	b0000121 	adrp	x1, b2000 <_etext+0x1158>
   8de08:	b0000120 	adrp	x0, b2000 <_etext+0x1158>
   8de0c:	91382021 	add	x1, x1, #0xe08
   8de10:	913ae000 	add	x0, x0, #0xeb8
   8de14:	52801822 	mov	w2, #0xc1                  	// #193
   8de18:	94003fca 	bl	9dd40 <assertion_failed>
   8de1c:	d503201f 	nop

000000000008de20 <CUSBHIDDevice::StartRequest()>:
   8de20:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8de24:	910003fd 	mov	x29, sp
   8de28:	a90153f3 	stp	x19, x20, [sp, #16]
   8de2c:	aa0003f3 	mov	x19, x0
   8de30:	f9401800 	ldr	x0, [x0, #48]
   8de34:	b40003a0 	cbz	x0, 8dea8 <CUSBHIDDevice::StartRequest()+0x88>
   8de38:	f9402260 	ldr	x0, [x19, #64]
   8de3c:	b4000420 	cbz	x0, 8dec0 <CUSBHIDDevice::StartRequest()+0xa0>
   8de40:	b9402a60 	ldr	w0, [x19, #40]
   8de44:	340004a0 	cbz	w0, 8ded8 <CUSBHIDDevice::StartRequest()+0xb8>
   8de48:	d2801200 	mov	x0, #0x90                  	// #144
   8de4c:	97ffcffd 	bl	81e40 <CUSBRequest::operator new(unsigned long)>
   8de50:	f9401a61 	ldr	x1, [x19, #48]
   8de54:	d2800004 	mov	x4, #0x0                   	// #0
   8de58:	aa0003f4 	mov	x20, x0
   8de5c:	b9402a63 	ldr	w3, [x19, #40]
   8de60:	f9402262 	ldr	x2, [x19, #64]
   8de64:	97ffcf0f 	bl	81aa0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   8de68:	b0000001 	adrp	x1, 8e000 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x110>
   8de6c:	aa1303e3 	mov	x3, x19
   8de70:	aa1403e0 	mov	x0, x20
   8de74:	9100c021 	add	x1, x1, #0x30
   8de78:	d2800002 	mov	x2, #0x0                   	// #0
   8de7c:	97ffcfcd 	bl	81db0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   8de80:	aa1303e0 	mov	x0, x19
   8de84:	97fff28b 	bl	8a8b0 <CUSBFunction::GetHost() const>
   8de88:	f9400003 	ldr	x3, [x0]
   8de8c:	aa1403e1 	mov	x1, x20
   8de90:	52800002 	mov	w2, #0x0                   	// #0
   8de94:	a94153f3 	ldp	x19, x20, [sp, #16]
   8de98:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8de9c:	f9401463 	ldr	x3, [x3, #40]
   8dea0:	aa0303f0 	mov	x16, x3
   8dea4:	d61f0200 	br	x16
   8dea8:	b0000121 	adrp	x1, b2000 <_etext+0x1158>
   8deac:	b0000120 	adrp	x0, b2000 <_etext+0x1158>
   8deb0:	91382021 	add	x1, x1, #0xe08
   8deb4:	913b2000 	add	x0, x0, #0xec8
   8deb8:	528018e2 	mov	w2, #0xc7                  	// #199
   8debc:	94003fa1 	bl	9dd40 <assertion_failed>
   8dec0:	b0000121 	adrp	x1, b2000 <_etext+0x1158>
   8dec4:	b0000120 	adrp	x0, b2000 <_etext+0x1158>
   8dec8:	91382021 	add	x1, x1, #0xe08
   8decc:	913a8000 	add	x0, x0, #0xea0
   8ded0:	52801902 	mov	w2, #0xc8                  	// #200
   8ded4:	94003f9b 	bl	9dd40 <assertion_failed>
   8ded8:	b0000121 	adrp	x1, b2000 <_etext+0x1158>
   8dedc:	b0000120 	adrp	x0, b2000 <_etext+0x1158>
   8dee0:	91382021 	add	x1, x1, #0xe08
   8dee4:	9139c000 	add	x0, x0, #0xe70
   8dee8:	52801942 	mov	w2, #0xca                  	// #202
   8deec:	94003f95 	bl	9dd40 <assertion_failed>

000000000008def0 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>:
   8def0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8def4:	910003fd 	mov	x29, sp
   8def8:	a90153f3 	stp	x19, x20, [sp, #16]
   8defc:	b40008c1 	cbz	x1, 8e014 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x124>
   8df00:	aa0003f4 	mov	x20, x0
   8df04:	aa0103e0 	mov	x0, x1
   8df08:	aa0103f3 	mov	x19, x1
   8df0c:	97ffcf21 	bl	81b90 <CUSBRequest::GetStatus() const>
   8df10:	35000300 	cbnz	w0, 8df70 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x80>
   8df14:	aa1403e0 	mov	x0, x20
   8df18:	97fff266 	bl	8a8b0 <CUSBFunction::GetHost() const>
   8df1c:	97ffccd5 	bl	81270 <CUSBHostController::IsPlugAndPlay() const>
   8df20:	72001c1f 	tst	w0, #0xff
   8df24:	540005a1 	b.ne	8dfd8 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xe8>  // b.any
   8df28:	f9400283 	ldr	x3, [x20]
   8df2c:	d2800001 	mov	x1, #0x0                   	// #0
   8df30:	52800002 	mov	w2, #0x0                   	// #0
   8df34:	aa1403e0 	mov	x0, x20
   8df38:	f9403063 	ldr	x3, [x3, #96]
   8df3c:	d63f0060 	blr	x3
   8df40:	aa1303e0 	mov	x0, x19
   8df44:	97ffcef7 	bl	81b20 <CUSBRequest::~CUSBRequest()>
   8df48:	aa1303e0 	mov	x0, x19
   8df4c:	d2801201 	mov	x1, #0x90                  	// #144
   8df50:	97ffcfd4 	bl	81ea0 <CUSBRequest::operator delete(void*, unsigned long)>
   8df54:	aa1403e0 	mov	x0, x20
   8df58:	97ffffb2 	bl	8de20 <CUSBHIDDevice::StartRequest()>
   8df5c:	72001c1f 	tst	w0, #0xff
   8df60:	540002a0 	b.eq	8dfb4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xc4>  // b.none
   8df64:	a94153f3 	ldp	x19, x20, [sp, #16]
   8df68:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8df6c:	d65f03c0 	ret
   8df70:	f9400281 	ldr	x1, [x20]
   8df74:	aa1303e0 	mov	x0, x19
   8df78:	a9025bf5 	stp	x21, x22, [sp, #32]
   8df7c:	f9402296 	ldr	x22, [x20, #64]
   8df80:	f9403035 	ldr	x21, [x1, #96]
   8df84:	97ffcf07 	bl	81ba0 <CUSBRequest::GetResultLength() const>
   8df88:	2a0003e2 	mov	w2, w0
   8df8c:	aa1403e0 	mov	x0, x20
   8df90:	aa1603e1 	mov	x1, x22
   8df94:	d63f02a0 	blr	x21
   8df98:	aa1303e0 	mov	x0, x19
   8df9c:	97ffcee1 	bl	81b20 <CUSBRequest::~CUSBRequest()>
   8dfa0:	aa1303e0 	mov	x0, x19
   8dfa4:	d2801201 	mov	x1, #0x90                  	// #144
   8dfa8:	97ffcfbe 	bl	81ea0 <CUSBRequest::operator delete(void*, unsigned long)>
   8dfac:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8dfb0:	17ffffe9 	b	8df54 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x64>
   8dfb4:	94004697 	bl	9fa10 <CLogger::Get()>
   8dfb8:	90000123 	adrp	x3, b1000 <_etext+0x158>
   8dfbc:	b0000141 	adrp	x1, b6000 <From+0x98>
   8dfc0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8dfc4:	91194063 	add	x3, x3, #0x650
   8dfc8:	91274021 	add	x1, x1, #0x9d0
   8dfcc:	52800022 	mov	w2, #0x1                   	// #1
   8dfd0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8dfd4:	1400487b 	b	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8dfd8:	aa1303e0 	mov	x0, x19
   8dfdc:	a9025bf5 	stp	x21, x22, [sp, #32]
   8dfe0:	97ffcefc 	bl	81bd0 <CUSBRequest::GetUSBError() const>
   8dfe4:	2a0003f5 	mov	w21, w0
   8dfe8:	aa1303e0 	mov	x0, x19
   8dfec:	97ffcecd 	bl	81b20 <CUSBRequest::~CUSBRequest()>
   8dff0:	aa1303e0 	mov	x0, x19
   8dff4:	d2801201 	mov	x1, #0x90                  	// #144
   8dff8:	97ffcfaa 	bl	81ea0 <CUSBRequest::operator delete(void*, unsigned long)>
   8dffc:	71000ebf 	cmp	w21, #0x3
   8e000:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8e004:	54fffa80 	b.eq	8df54 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x64>  // b.none
   8e008:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e00c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8e010:	d65f03c0 	ret
   8e014:	90000121 	adrp	x1, b2000 <_etext+0x1158>
   8e018:	f0000100 	adrp	x0, b1000 <_etext+0x158>
   8e01c:	a9025bf5 	stp	x21, x22, [sp, #32]
   8e020:	91382021 	add	x1, x1, #0xe08
   8e024:	910aa000 	add	x0, x0, #0x2a8
   8e028:	52801a82 	mov	w2, #0xd4                  	// #212
   8e02c:	94003f45 	bl	9dd40 <assertion_failed>

000000000008e030 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   8e030:	b4000082 	cbz	x2, 8e040 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x10>
   8e034:	aa0003e1 	mov	x1, x0
   8e038:	aa0203e0 	mov	x0, x2
   8e03c:	17ffffad 	b	8def0 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>
   8e040:	90000121 	adrp	x1, b2000 <_etext+0x1158>
   8e044:	f0000100 	adrp	x0, b1000 <_etext+0x158>
   8e048:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8e04c:	91382021 	add	x1, x1, #0xe08
   8e050:	910003fd 	mov	x29, sp
   8e054:	910b6000 	add	x0, x0, #0x2d8
   8e058:	52801ee2 	mov	w2, #0xf7                  	// #247
   8e05c:	94003f39 	bl	9dd40 <assertion_failed>

000000000008e060 <CUSBBulkOnlyMassStorageDevice::Seek(unsigned long)>:
   8e060:	aa0003e2 	mov	x2, x0
   8e064:	aa0103e0 	mov	x0, x1
   8e068:	f9002041 	str	x1, [x2, #64]
   8e06c:	d65f03c0 	ret

000000000008e070 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   8e070:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8e074:	910003fd 	mov	x29, sp
   8e078:	90000141 	adrp	x1, b6000 <From+0x98>
   8e07c:	9127a021 	add	x1, x1, #0x9e8
   8e080:	a90153f3 	stp	x19, x20, [sp, #16]
   8e084:	aa0003f3 	mov	x19, x0
   8e088:	b9405000 	ldr	w0, [x0, #80]
   8e08c:	f9000261 	str	x1, [x19]
   8e090:	350003a0 	cbnz	w0, 8e104 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x94>
   8e094:	f9402674 	ldr	x20, [x19, #72]
   8e098:	b40000d4 	cbz	x20, 8e0b0 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x40>
   8e09c:	aa1403e0 	mov	x0, x20
   8e0a0:	94003d4c 	bl	9d5d0 <CPartitionManager::~CPartitionManager()>
   8e0a4:	aa1403e0 	mov	x0, x20
   8e0a8:	d2800901 	mov	x1, #0x48                  	// #72
   8e0ac:	94006895 	bl	a8300 <operator delete(void*, unsigned long)>
   8e0b0:	f900267f 	str	xzr, [x19, #72]
   8e0b4:	f9401a74 	ldr	x20, [x19, #48]
   8e0b8:	b40000d4 	cbz	x20, 8e0d0 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x60>
   8e0bc:	aa1403e0 	mov	x0, x20
   8e0c0:	97fff088 	bl	8a2e0 <CUSBEndpoint::~CUSBEndpoint()>
   8e0c4:	aa1403e0 	mov	x0, x20
   8e0c8:	d2800401 	mov	x1, #0x20                  	// #32
   8e0cc:	9400688d 	bl	a8300 <operator delete(void*, unsigned long)>
   8e0d0:	f9001a7f 	str	xzr, [x19, #48]
   8e0d4:	f9401674 	ldr	x20, [x19, #40]
   8e0d8:	b40000d4 	cbz	x20, 8e0f0 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x80>
   8e0dc:	aa1403e0 	mov	x0, x20
   8e0e0:	97fff080 	bl	8a2e0 <CUSBEndpoint::~CUSBEndpoint()>
   8e0e4:	aa1403e0 	mov	x0, x20
   8e0e8:	d2800401 	mov	x1, #0x20                  	// #32
   8e0ec:	94006885 	bl	a8300 <operator delete(void*, unsigned long)>
   8e0f0:	aa1303e0 	mov	x0, x19
   8e0f4:	f900167f 	str	xzr, [x19, #40]
   8e0f8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e0fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8e100:	17fff0cc 	b	8a430 <CUSBFunction::~CUSBFunction()>
   8e104:	940042f3 	bl	9ecd0 <CDeviceNameService::Get()>
   8e108:	b9405262 	ldr	w2, [x19, #80]
   8e10c:	90000141 	adrp	x1, b6000 <From+0x98>
   8e110:	52800023 	mov	w3, #0x1                   	// #1
   8e114:	91292021 	add	x1, x1, #0xa48
   8e118:	9400431a 	bl	9ed80 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   8e11c:	b9405261 	ldr	w1, [x19, #80]
   8e120:	f0000160 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   8e124:	9102e000 	add	x0, x0, #0xb8
   8e128:	94006a2a 	bl	a89d0 <CNumberPool::FreeNumber(unsigned int)>
   8e12c:	b900527f 	str	wzr, [x19, #80]
   8e130:	17ffffd9 	b	8e094 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x24>
   8e134:	d503201f 	nop
   8e138:	d503201f 	nop
   8e13c:	d503201f 	nop

000000000008e140 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   8e140:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8e144:	910003fd 	mov	x29, sp
   8e148:	f9000bf3 	str	x19, [sp, #16]
   8e14c:	aa0003f3 	mov	x19, x0
   8e150:	97ffffc8 	bl	8e070 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>
   8e154:	aa1303e0 	mov	x0, x19
   8e158:	d2800b01 	mov	x1, #0x58                  	// #88
   8e15c:	f9400bf3 	ldr	x19, [sp, #16]
   8e160:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8e164:	14006867 	b	a8300 <operator delete(void*, unsigned long)>
   8e168:	d503201f 	nop
   8e16c:	d503201f 	nop

000000000008e170 <CUSBBulkOnlyMassStorageDevice::GetSize() const>:
   8e170:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8e174:	910003fd 	mov	x29, sp
   8e178:	b9403c00 	ldr	w0, [x0, #60]
   8e17c:	340000c0 	cbz	w0, 8e194 <CUSBBulkOnlyMassStorageDevice::GetSize() const+0x24>
   8e180:	3100041f 	cmn	w0, #0x1
   8e184:	54000140 	b.eq	8e1ac <CUSBBulkOnlyMassStorageDevice::GetSize() const+0x3c>  // b.none
   8e188:	d3777c00 	ubfiz	x0, x0, #9, #32
   8e18c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8e190:	d65f03c0 	ret
   8e194:	90000140 	adrp	x0, b6000 <From+0x98>
   8e198:	91292000 	add	x0, x0, #0xa48
   8e19c:	91002001 	add	x1, x0, #0x8
   8e1a0:	52803c82 	mov	w2, #0x1e4                 	// #484
   8e1a4:	91008000 	add	x0, x0, #0x20
   8e1a8:	94003ee6 	bl	9dd40 <assertion_failed>
   8e1ac:	90000140 	adrp	x0, b6000 <From+0x98>
   8e1b0:	91292000 	add	x0, x0, #0xa48
   8e1b4:	91002001 	add	x1, x0, #0x8
   8e1b8:	52803ca2 	mov	w2, #0x1e5                 	// #485
   8e1bc:	9100e000 	add	x0, x0, #0x38
   8e1c0:	94003ee0 	bl	9dd40 <assertion_failed>
   8e1c4:	d503201f 	nop
   8e1c8:	d503201f 	nop
   8e1cc:	d503201f 	nop

000000000008e1d0 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>:
   8e1d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8e1d4:	910003fd 	mov	x29, sp
   8e1d8:	f9000bf3 	str	x19, [sp, #16]
   8e1dc:	aa0003f3 	mov	x19, x0
   8e1e0:	97fff138 	bl	8a6c0 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   8e1e4:	90000140 	adrp	x0, b6000 <From+0x98>
   8e1e8:	9127a000 	add	x0, x0, #0x9e8
   8e1ec:	a902fe7f 	stp	xzr, xzr, [x19, #40]
   8e1f0:	f9000260 	str	x0, [x19]
   8e1f4:	a903fe7f 	stp	xzr, xzr, [x19, #56]
   8e1f8:	f900267f 	str	xzr, [x19, #72]
   8e1fc:	b900527f 	str	wzr, [x19, #80]
   8e200:	f9400bf3 	ldr	x19, [sp, #16]
   8e204:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8e208:	d65f03c0 	ret
   8e20c:	d503201f 	nop

000000000008e210 <CUSBBulkOnlyMassStorageDevice::GetCapacity() const>:
   8e210:	b9403c00 	ldr	w0, [x0, #60]
   8e214:	d65f03c0 	ret
   8e218:	d503201f 	nop
   8e21c:	d503201f 	nop

000000000008e220 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)>:
   8e220:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
   8e224:	910003fd 	mov	x29, sp
   8e228:	a90153f3 	stp	x19, x20, [sp, #16]
   8e22c:	a9025bf5 	stp	x21, x22, [sp, #32]
   8e230:	a90363f7 	stp	x23, x24, [sp, #48]
   8e234:	a9046bf9 	stp	x25, x26, [sp, #64]
   8e238:	b40015c1 	cbz	x1, 8e4f0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x2d0>
   8e23c:	aa0003f3 	mov	x19, x0
   8e240:	d1001840 	sub	x0, x2, #0x6
   8e244:	f100281f 	cmp	x0, #0xa
   8e248:	aa0203f7 	mov	x23, x2
   8e24c:	54001688 	b.hi	8e51c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x2fc>  // b.pmore
   8e250:	f100009f 	cmp	x4, #0x0
   8e254:	aa0303f8 	mov	x24, x3
   8e258:	fa401860 	ccmp	x3, #0x0, #0x0, ne	// ne = any
   8e25c:	aa0403f6 	mov	x22, x4
   8e260:	540016a0 	b.eq	8e534 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x314>  // b.none
   8e264:	91023ff4 	add	x20, sp, #0x8f
   8e268:	aa0103f9 	mov	x25, x1
   8e26c:	927ae694 	and	x20, x20, #0xffffffffffffffc0
   8e270:	d28003e2 	mov	x2, #0x1f                  	// #31
   8e274:	91010295 	add	x21, x20, #0x40
   8e278:	52800001 	mov	w1, #0x0                   	// #0
   8e27c:	aa1503e0 	mov	x0, x21
   8e280:	12001cba 	and	w26, w5, #0xff
   8e284:	94006559 	bl	a77e8 <memset>
   8e288:	528a6aa0 	mov	w0, #0x5355                	// #21333
   8e28c:	72a86840 	movk	w0, #0x4342, lsl #16
   8e290:	b9403a63 	ldr	w3, [x19, #56]
   8e294:	53190344 	ubfiz	w4, w26, #7, #1
   8e298:	aa1703e2 	mov	x2, x23
   8e29c:	b9004280 	str	w0, [x20, #64]
   8e2a0:	aa1903e1 	mov	x1, x25
   8e2a4:	91013e80 	add	x0, x20, #0x4f
   8e2a8:	39403aa5 	ldrb	w5, [x21, #14]
   8e2ac:	390032a4 	strb	w4, [x21, #12]
   8e2b0:	394036a4 	ldrb	w4, [x21, #13]
   8e2b4:	11000463 	add	w3, w3, #0x1
   8e2b8:	2900daa3 	stp	w3, w22, [x21, #4]
   8e2bc:	330012e5 	bfxil	w5, w23, #0, #5
   8e2c0:	b9003a63 	str	w3, [x19, #56]
   8e2c4:	121c6c83 	and	w3, w4, #0xfffffff0
   8e2c8:	39003aa5 	strb	w5, [x21, #14]
   8e2cc:	390036a3 	strb	w3, [x21, #13]
   8e2d0:	9400655e 	bl	a7848 <memcpy>
   8e2d4:	aa1303e0 	mov	x0, x19
   8e2d8:	97fff176 	bl	8a8b0 <CUSBFunction::GetHost() const>
   8e2dc:	aa0003f7 	mov	x23, x0
   8e2e0:	b4001360 	cbz	x0, 8e54c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x32c>
   8e2e4:	aa1503e2 	mov	x2, x21
   8e2e8:	52800004 	mov	w4, #0x0                   	// #0
   8e2ec:	f9401a61 	ldr	x1, [x19, #48]
   8e2f0:	528003e3 	mov	w3, #0x1f                  	// #31
   8e2f4:	97ffcbc3 	bl	81200 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   8e2f8:	37f818a0 	tbnz	w0, #31, 8e60c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x3ec>
   8e2fc:	b40003b6 	cbz	x22, 8e370 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x150>
   8e300:	b4001338 	cbz	x24, 8e564 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x344>
   8e304:	aa160300 	orr	x0, x24, x22
   8e308:	f240141f 	tst	x0, #0x3f
   8e30c:	54000b00 	b.eq	8e46c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x24c>  // b.none
   8e310:	52800001 	mov	w1, #0x0                   	// #0
   8e314:	aa1603e0 	mov	x0, x22
   8e318:	940067a2 	bl	a81a0 <operator new[](unsigned long, int)>
   8e31c:	aa0003f9 	mov	x25, x0
   8e320:	34000cda 	cbz	w26, 8e4b8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x298>
   8e324:	aa0003e2 	mov	x2, x0
   8e328:	52800004 	mov	w4, #0x0                   	// #0
   8e32c:	f9401661 	ldr	x1, [x19, #40]
   8e330:	2a1603e3 	mov	w3, w22
   8e334:	aa1703e0 	mov	x0, x23
   8e338:	97ffcbb2 	bl	81200 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   8e33c:	2a0003f5 	mov	w21, w0
   8e340:	36f80e40 	tbz	w0, #31, 8e508 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x2e8>
   8e344:	940045b3 	bl	9fa10 <CLogger::Get()>
   8e348:	90000141 	adrp	x1, b6000 <From+0x98>
   8e34c:	91292021 	add	x1, x1, #0xa48
   8e350:	9103c023 	add	x3, x1, #0xf0
   8e354:	52800022 	mov	w2, #0x1                   	// #1
   8e358:	91036021 	add	x1, x1, #0xd8
   8e35c:	12800015 	mov	w21, #0xffffffff            	// #-1
   8e360:	94004798 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8e364:	aa1903e0 	mov	x0, x25
   8e368:	940067da 	bl	a82d0 <operator delete[](void*)>
   8e36c:	14000039 	b	8e450 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x230>
   8e370:	52800015 	mov	w21, #0x0                   	// #0
   8e374:	52800004 	mov	w4, #0x0                   	// #0
   8e378:	528001a3 	mov	w3, #0xd                   	// #13
   8e37c:	f9401661 	ldr	x1, [x19, #40]
   8e380:	aa1403e2 	mov	x2, x20
   8e384:	aa1703e0 	mov	x0, x23
   8e388:	97ffcb9e 	bl	81200 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   8e38c:	7100341f 	cmp	w0, #0xd
   8e390:	54000460 	b.eq	8e41c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x1fc>  // b.none
   8e394:	90000156 	adrp	x22, b6000 <From+0x98>
   8e398:	912922d6 	add	x22, x22, #0xa48
   8e39c:	9400459d 	bl	9fa10 <CLogger::Get()>
   8e3a0:	910362d9 	add	x25, x22, #0xd8
   8e3a4:	910422c3 	add	x3, x22, #0x108
   8e3a8:	aa1903e1 	mov	x1, x25
   8e3ac:	52800022 	mov	w2, #0x1                   	// #1
   8e3b0:	94004784 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8e3b4:	aa1303e0 	mov	x0, x19
   8e3b8:	97fff132 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   8e3bc:	aa0003f8 	mov	x24, x0
   8e3c0:	f9401660 	ldr	x0, [x19, #40]
   8e3c4:	97ffefe3 	bl	8a350 <CUSBEndpoint::GetNumber() const>
   8e3c8:	32196005 	orr	w5, w0, #0xffffff80
   8e3cc:	aa1803e1 	mov	x1, x24
   8e3d0:	52800007 	mov	w7, #0x0                   	// #0
   8e3d4:	12001ca5 	and	w5, w5, #0xff
   8e3d8:	d2800006 	mov	x6, #0x0                   	// #0
   8e3dc:	52800004 	mov	w4, #0x0                   	// #0
   8e3e0:	52800023 	mov	w3, #0x1                   	// #1
   8e3e4:	52800042 	mov	w2, #0x2                   	// #2
   8e3e8:	aa1703e0 	mov	x0, x23
   8e3ec:	97ffcb09 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8e3f0:	37f81200 	tbnz	w0, #31, 8e630 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x410>
   8e3f4:	f9401660 	ldr	x0, [x19, #40]
   8e3f8:	97ffeff6 	bl	8a3d0 <CUSBEndpoint::ResetPID()>
   8e3fc:	52800004 	mov	w4, #0x0                   	// #0
   8e400:	528001a3 	mov	w3, #0xd                   	// #13
   8e404:	f9401661 	ldr	x1, [x19, #40]
   8e408:	aa1703e0 	mov	x0, x23
   8e40c:	aa1403e2 	mov	x2, x20
   8e410:	97ffcb7c 	bl	81200 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   8e414:	7100341f 	cmp	w0, #0xd
   8e418:	54000da1 	b.ne	8e5cc <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x3ac>  // b.any
   8e41c:	b9400281 	ldr	w1, [x20]
   8e420:	528a6aa0 	mov	w0, #0x5355                	// #21333
   8e424:	72aa6840 	movk	w0, #0x5342, lsl #16
   8e428:	6b00003f 	cmp	w1, w0
   8e42c:	54000ac1 	b.ne	8e584 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x364>  // b.any
   8e430:	b9403a60 	ldr	w0, [x19, #56]
   8e434:	b9400681 	ldr	w1, [x20, #4]
   8e438:	6b00003f 	cmp	w1, w0
   8e43c:	54000b61 	b.ne	8e5a8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x388>  // b.any
   8e440:	39403280 	ldrb	w0, [x20, #12]
   8e444:	350009c0 	cbnz	w0, 8e57c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x35c>
   8e448:	b9400a80 	ldr	w0, [x20, #8]
   8e44c:	35000ce0 	cbnz	w0, 8e5e8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x3c8>
   8e450:	2a1503e0 	mov	w0, w21
   8e454:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e458:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8e45c:	a94363f7 	ldp	x23, x24, [sp, #48]
   8e460:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8e464:	a8d07bfd 	ldp	x29, x30, [sp], #256
   8e468:	d65f03c0 	ret
   8e46c:	a9429661 	ldp	x1, x5, [x19, #40]
   8e470:	7100035f 	cmp	w26, #0x0
   8e474:	2a1603e3 	mov	w3, w22
   8e478:	aa1803e2 	mov	x2, x24
   8e47c:	52800004 	mov	w4, #0x0                   	// #0
   8e480:	9a8100a1 	csel	x1, x5, x1, eq	// eq = none
   8e484:	aa1703e0 	mov	x0, x23
   8e488:	97ffcb5e 	bl	81200 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   8e48c:	2a0003f5 	mov	w21, w0
   8e490:	36fff720 	tbz	w0, #31, 8e374 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x154>
   8e494:	9400455f 	bl	9fa10 <CLogger::Get()>
   8e498:	90000141 	adrp	x1, b6000 <From+0x98>
   8e49c:	91292021 	add	x1, x1, #0xa48
   8e4a0:	9103c023 	add	x3, x1, #0xf0
   8e4a4:	52800022 	mov	w2, #0x1                   	// #1
   8e4a8:	91036021 	add	x1, x1, #0xd8
   8e4ac:	12800015 	mov	w21, #0xffffffff            	// #-1
   8e4b0:	94004744 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8e4b4:	17ffffe7 	b	8e450 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x230>
   8e4b8:	aa1803e1 	mov	x1, x24
   8e4bc:	aa1603e2 	mov	x2, x22
   8e4c0:	940064e2 	bl	a7848 <memcpy>
   8e4c4:	2a1603e3 	mov	w3, w22
   8e4c8:	52800004 	mov	w4, #0x0                   	// #0
   8e4cc:	f9401a61 	ldr	x1, [x19, #48]
   8e4d0:	aa1903e2 	mov	x2, x25
   8e4d4:	aa1703e0 	mov	x0, x23
   8e4d8:	97ffcb4a 	bl	81200 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   8e4dc:	2a0003f5 	mov	w21, w0
   8e4e0:	37fff320 	tbnz	w0, #31, 8e344 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x124>
   8e4e4:	aa1903e0 	mov	x0, x25
   8e4e8:	9400677a 	bl	a82d0 <operator delete[](void*)>
   8e4ec:	17ffffa2 	b	8e374 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x154>
   8e4f0:	90000140 	adrp	x0, b6000 <From+0x98>
   8e4f4:	91292000 	add	x0, x0, #0xa48
   8e4f8:	91002001 	add	x1, x0, #0x8
   8e4fc:	52804782 	mov	w2, #0x23c                 	// #572
   8e500:	91016000 	add	x0, x0, #0x58
   8e504:	94003e0f 	bl	9dd40 <assertion_failed>
   8e508:	aa1603e2 	mov	x2, x22
   8e50c:	aa1803e0 	mov	x0, x24
   8e510:	aa1903e1 	mov	x1, x25
   8e514:	940064cd 	bl	a7848 <memcpy>
   8e518:	17fffff3 	b	8e4e4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x2c4>
   8e51c:	90000140 	adrp	x0, b6000 <From+0x98>
   8e520:	91292000 	add	x0, x0, #0xa48
   8e524:	91002001 	add	x1, x0, #0x8
   8e528:	528047a2 	mov	w2, #0x23d                 	// #573
   8e52c:	9101a000 	add	x0, x0, #0x68
   8e530:	94003e04 	bl	9dd40 <assertion_failed>
   8e534:	90000140 	adrp	x0, b6000 <From+0x98>
   8e538:	91292000 	add	x0, x0, #0xa48
   8e53c:	91002001 	add	x1, x0, #0x8
   8e540:	528047c2 	mov	w2, #0x23e                 	// #574
   8e544:	91024000 	add	x0, x0, #0x90
   8e548:	94003dfe 	bl	9dd40 <assertion_failed>
   8e54c:	90000140 	adrp	x0, b6000 <From+0x98>
   8e550:	91292000 	add	x0, x0, #0xa48
   8e554:	91002001 	add	x1, x0, #0x8
   8e558:	528049c2 	mov	w2, #0x24e                 	// #590
   8e55c:	9102c000 	add	x0, x0, #0xb0
   8e560:	94003df8 	bl	9dd40 <assertion_failed>
   8e564:	90000140 	adrp	x0, b6000 <From+0x98>
   8e568:	91292000 	add	x0, x0, #0xa48
   8e56c:	91002001 	add	x1, x0, #0x8
   8e570:	52804b62 	mov	w2, #0x25b                 	// #603
   8e574:	91038000 	add	x0, x0, #0xe0
   8e578:	94003df2 	bl	9dd40 <assertion_failed>
   8e57c:	12800015 	mov	w21, #0xffffffff            	// #-1
   8e580:	17ffffb4 	b	8e450 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x230>
   8e584:	94004523 	bl	9fa10 <CLogger::Get()>
   8e588:	90000141 	adrp	x1, b6000 <From+0x98>
   8e58c:	91292021 	add	x1, x1, #0xa48
   8e590:	9105a023 	add	x3, x1, #0x168
   8e594:	52800022 	mov	w2, #0x1                   	// #1
   8e598:	91036021 	add	x1, x1, #0xd8
   8e59c:	12800015 	mov	w21, #0xffffffff            	// #-1
   8e5a0:	94004708 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8e5a4:	17ffffab 	b	8e450 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x230>
   8e5a8:	9400451a 	bl	9fa10 <CLogger::Get()>
   8e5ac:	90000141 	adrp	x1, b6000 <From+0x98>
   8e5b0:	91292021 	add	x1, x1, #0xa48
   8e5b4:	91060023 	add	x3, x1, #0x180
   8e5b8:	52800022 	mov	w2, #0x1                   	// #1
   8e5bc:	91036021 	add	x1, x1, #0xd8
   8e5c0:	12800015 	mov	w21, #0xffffffff            	// #-1
   8e5c4:	940046ff 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8e5c8:	17ffffa2 	b	8e450 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x230>
   8e5cc:	94004511 	bl	9fa10 <CLogger::Get()>
   8e5d0:	910522c3 	add	x3, x22, #0x148
   8e5d4:	aa1903e1 	mov	x1, x25
   8e5d8:	52800022 	mov	w2, #0x1                   	// #1
   8e5dc:	12800015 	mov	w21, #0xffffffff            	// #-1
   8e5e0:	940046f8 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8e5e4:	17ffff9b 	b	8e450 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x230>
   8e5e8:	9400450a 	bl	9fa10 <CLogger::Get()>
   8e5ec:	90000141 	adrp	x1, b6000 <From+0x98>
   8e5f0:	91292021 	add	x1, x1, #0xa48
   8e5f4:	91066023 	add	x3, x1, #0x198
   8e5f8:	52800022 	mov	w2, #0x1                   	// #1
   8e5fc:	91036021 	add	x1, x1, #0xd8
   8e600:	12800015 	mov	w21, #0xffffffff            	// #-1
   8e604:	940046ef 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8e608:	17ffff92 	b	8e450 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x230>
   8e60c:	94004501 	bl	9fa10 <CLogger::Get()>
   8e610:	90000141 	adrp	x1, b6000 <From+0x98>
   8e614:	91292021 	add	x1, x1, #0xa48
   8e618:	91030023 	add	x3, x1, #0xc0
   8e61c:	52800022 	mov	w2, #0x1                   	// #1
   8e620:	91036021 	add	x1, x1, #0xd8
   8e624:	12800015 	mov	w21, #0xffffffff            	// #-1
   8e628:	940046e6 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8e62c:	17ffff89 	b	8e450 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x230>
   8e630:	940044f8 	bl	9fa10 <CLogger::Get()>
   8e634:	910482c3 	add	x3, x22, #0x120
   8e638:	aa1903e1 	mov	x1, x25
   8e63c:	52800082 	mov	w2, #0x4                   	// #4
   8e640:	12800015 	mov	w21, #0xffffffff            	// #-1
   8e644:	940046df 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8e648:	17ffff82 	b	8e450 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)+0x230>
   8e64c:	d503201f 	nop

000000000008e650 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)>:
   8e650:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8e654:	910003fd 	mov	x29, sp
   8e658:	aa0103e3 	mov	x3, x1
   8e65c:	b40004a1 	cbz	x1, 8e6f0 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)+0xa0>
   8e660:	b240a3e1 	mov	x1, #0x1ffffffffff         	// #2199023255551
   8e664:	f9402005 	ldr	x5, [x0, #64]
   8e668:	f24020bf 	tst	x5, #0x1ff
   8e66c:	fa4100a2 	ccmp	x5, x1, #0x2, eq	// eq = none
   8e670:	540004e8 	b.hi	8e70c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)+0xbc>  // b.pmore
   8e674:	f240205f 	tst	x2, #0x1ff
   8e678:	f9000bf3 	str	x19, [sp, #16]
   8e67c:	d349fca5 	lsr	x5, x5, #9
   8e680:	aa0203f3 	mov	x19, x2
   8e684:	54000481 	b.ne	8e714 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)+0xc4>  // b.any
   8e688:	d349fc47 	lsr	x7, x2, #9
   8e68c:	5ac008a1 	rev	w1, w5
   8e690:	39009bff 	strb	wzr, [sp, #38]
   8e694:	5ac004e7 	rev16	w7, w7
   8e698:	53107c21 	lsr	w1, w1, #16
   8e69c:	3900a7ff 	strb	wzr, [sp, #41]
   8e6a0:	5ac008a6 	rev	w6, w5
   8e6a4:	d3483ce8 	ubfx	x8, x7, #8, #8
   8e6a8:	52800509 	mov	w9, #0x28                  	// #40
   8e6ac:	aa0203e4 	mov	x4, x2
   8e6b0:	79004be1 	strh	w1, [sp, #36]
   8e6b4:	52800025 	mov	w5, #0x1                   	// #1
   8e6b8:	910083e1 	add	x1, sp, #0x20
   8e6bc:	790047e6 	strh	w6, [sp, #34]
   8e6c0:	d2800142 	mov	x2, #0xa                   	// #10
   8e6c4:	790043e9 	strh	w9, [sp, #32]
   8e6c8:	39009fe7 	strb	w7, [sp, #39]
   8e6cc:	3900a3e8 	strb	w8, [sp, #40]
   8e6d0:	97fffed4 	bl	8e220 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)>
   8e6d4:	2a0003e1 	mov	w1, w0
   8e6d8:	2a1303e0 	mov	w0, w19
   8e6dc:	6b13003f 	cmp	w1, w19
   8e6e0:	54000201 	b.ne	8e720 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)+0xd0>  // b.any
   8e6e4:	f9400bf3 	ldr	x19, [sp, #16]
   8e6e8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8e6ec:	d65f03c0 	ret
   8e6f0:	90000140 	adrp	x0, b6000 <From+0x98>
   8e6f4:	91292000 	add	x0, x0, #0xa48
   8e6f8:	f9000bf3 	str	x19, [sp, #16]
   8e6fc:	91002001 	add	x1, x0, #0x8
   8e700:	52803e22 	mov	w2, #0x1f1                 	// #497
   8e704:	91038000 	add	x0, x0, #0xe0
   8e708:	94003d8e 	bl	9dd40 <assertion_failed>
   8e70c:	12800000 	mov	w0, #0xffffffff            	// #-1
   8e710:	17fffff6 	b	8e6e8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)+0x98>
   8e714:	12800000 	mov	w0, #0xffffffff            	// #-1
   8e718:	f9400bf3 	ldr	x19, [sp, #16]
   8e71c:	17fffff3 	b	8e6e8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)+0x98>
   8e720:	940044bc 	bl	9fa10 <CLogger::Get()>
   8e724:	90000141 	adrp	x1, b6000 <From+0x98>
   8e728:	91292021 	add	x1, x1, #0xa48
   8e72c:	9106c023 	add	x3, x1, #0x1b0
   8e730:	52800022 	mov	w2, #0x1                   	// #1
   8e734:	91036021 	add	x1, x1, #0xd8
   8e738:	940046a2 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8e73c:	12800000 	mov	w0, #0xffffffff            	// #-1
   8e740:	f9400bf3 	ldr	x19, [sp, #16]
   8e744:	17ffffe9 	b	8e6e8 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)+0x98>
   8e748:	d503201f 	nop
   8e74c:	d503201f 	nop

000000000008e750 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)>:
   8e750:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8e754:	910003fd 	mov	x29, sp
   8e758:	aa0103e3 	mov	x3, x1
   8e75c:	f9000bf3 	str	x19, [sp, #16]
   8e760:	b4000441 	cbz	x1, 8e7e8 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)+0x98>
   8e764:	aa0203f3 	mov	x19, x2
   8e768:	f9402002 	ldr	x2, [x0, #64]
   8e76c:	b240a3e1 	mov	x1, #0x1ffffffffff         	// #2199023255551
   8e770:	f240205f 	tst	x2, #0x1ff
   8e774:	fa410042 	ccmp	x2, x1, #0x2, eq	// eq = none
   8e778:	54000448 	b.hi	8e800 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)+0xb0>  // b.pmore
   8e77c:	f240227f 	tst	x19, #0x1ff
   8e780:	d349fc42 	lsr	x2, x2, #9
   8e784:	540003e1 	b.ne	8e800 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)+0xb0>  // b.any
   8e788:	5ac00841 	rev	w1, w2
   8e78c:	d349fe66 	lsr	x6, x19, #9
   8e790:	39009bff 	strb	wzr, [sp, #38]
   8e794:	5ac004c6 	rev16	w6, w6
   8e798:	53107c21 	lsr	w1, w1, #16
   8e79c:	3900a7ff 	strb	wzr, [sp, #41]
   8e7a0:	5ac00842 	rev	w2, w2
   8e7a4:	d3483cc7 	ubfx	x7, x6, #8, #8
   8e7a8:	52810548 	mov	w8, #0x82a                 	// #2090
   8e7ac:	52800005 	mov	w5, #0x0                   	// #0
   8e7b0:	79004be1 	strh	w1, [sp, #36]
   8e7b4:	aa1303e4 	mov	x4, x19
   8e7b8:	910083e1 	add	x1, sp, #0x20
   8e7bc:	790047e2 	strh	w2, [sp, #34]
   8e7c0:	d2800142 	mov	x2, #0xa                   	// #10
   8e7c4:	790043e8 	strh	w8, [sp, #32]
   8e7c8:	39009fe6 	strb	w6, [sp, #39]
   8e7cc:	3900a3e7 	strb	w7, [sp, #40]
   8e7d0:	97fffe94 	bl	8e220 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)>
   8e7d4:	37f801a0 	tbnz	w0, #31, 8e808 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)+0xb8>
   8e7d8:	2a1303e0 	mov	w0, w19
   8e7dc:	f9400bf3 	ldr	x19, [sp, #16]
   8e7e0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8e7e4:	d65f03c0 	ret
   8e7e8:	90000140 	adrp	x0, b6000 <From+0x98>
   8e7ec:	91292000 	add	x0, x0, #0xa48
   8e7f0:	91002001 	add	x1, x0, #0x8
   8e7f4:	528042c2 	mov	w2, #0x216                 	// #534
   8e7f8:	91038000 	add	x0, x0, #0xe0
   8e7fc:	94003d51 	bl	9dd40 <assertion_failed>
   8e800:	12800013 	mov	w19, #0xffffffff            	// #-1
   8e804:	17fffff5 	b	8e7d8 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)+0x88>
   8e808:	94004482 	bl	9fa10 <CLogger::Get()>
   8e80c:	90000141 	adrp	x1, b6000 <From+0x98>
   8e810:	91292021 	add	x1, x1, #0xa48
   8e814:	91070023 	add	x3, x1, #0x1c0
   8e818:	52800022 	mov	w2, #0x1                   	// #1
   8e81c:	91036021 	add	x1, x1, #0xd8
   8e820:	12800013 	mov	w19, #0xffffffff            	// #-1
   8e824:	94004667 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8e828:	17ffffec 	b	8e7d8 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)+0x88>
   8e82c:	d503201f 	nop

000000000008e830 <CUSBBulkOnlyMassStorageDevice::Reset()>:
   8e830:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8e834:	910003fd 	mov	x29, sp
   8e838:	a90153f3 	stp	x19, x20, [sp, #16]
   8e83c:	aa0003f3 	mov	x19, x0
   8e840:	f90013f5 	str	x21, [sp, #32]
   8e844:	97fff01b 	bl	8a8b0 <CUSBFunction::GetHost() const>
   8e848:	b4000780 	cbz	x0, 8e938 <CUSBBulkOnlyMassStorageDevice::Reset()+0x108>
   8e84c:	aa0003f4 	mov	x20, x0
   8e850:	aa1303e0 	mov	x0, x19
   8e854:	97fff00b 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   8e858:	aa0003f5 	mov	x21, x0
   8e85c:	aa1303e0 	mov	x0, x19
   8e860:	97fff080 	bl	8aa60 <CUSBFunction::GetInterfaceNumber() const>
   8e864:	12001c05 	and	w5, w0, #0xff
   8e868:	aa1503e1 	mov	x1, x21
   8e86c:	52800007 	mov	w7, #0x0                   	// #0
   8e870:	d2800006 	mov	x6, #0x0                   	// #0
   8e874:	52800004 	mov	w4, #0x0                   	// #0
   8e878:	12800003 	mov	w3, #0xffffffff            	// #-1
   8e87c:	52800422 	mov	w2, #0x21                  	// #33
   8e880:	aa1403e0 	mov	x0, x20
   8e884:	97ffc9e3 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8e888:	37f80640 	tbnz	w0, #31, 8e950 <CUSBBulkOnlyMassStorageDevice::Reset()+0x120>
   8e88c:	94006219 	bl	a70f0 <CTimer::Get()>
   8e890:	52800c80 	mov	w0, #0x64                  	// #100
   8e894:	940061bb 	bl	a6f80 <CTimer::SimpleMsDelay(unsigned int)>
   8e898:	aa1303e0 	mov	x0, x19
   8e89c:	97ffeff9 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   8e8a0:	aa0003f5 	mov	x21, x0
   8e8a4:	f9401660 	ldr	x0, [x19, #40]
   8e8a8:	97ffeeaa 	bl	8a350 <CUSBEndpoint::GetNumber() const>
   8e8ac:	32196005 	orr	w5, w0, #0xffffff80
   8e8b0:	aa1503e1 	mov	x1, x21
   8e8b4:	52800007 	mov	w7, #0x0                   	// #0
   8e8b8:	12001ca5 	and	w5, w5, #0xff
   8e8bc:	d2800006 	mov	x6, #0x0                   	// #0
   8e8c0:	52800004 	mov	w4, #0x0                   	// #0
   8e8c4:	52800023 	mov	w3, #0x1                   	// #1
   8e8c8:	52800042 	mov	w2, #0x2                   	// #2
   8e8cc:	aa1403e0 	mov	x0, x20
   8e8d0:	97ffc9d0 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8e8d4:	37f80620 	tbnz	w0, #31, 8e998 <CUSBBulkOnlyMassStorageDevice::Reset()+0x168>
   8e8d8:	aa1303e0 	mov	x0, x19
   8e8dc:	97ffefe9 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   8e8e0:	aa0003f5 	mov	x21, x0
   8e8e4:	f9401a60 	ldr	x0, [x19, #48]
   8e8e8:	97ffee9a 	bl	8a350 <CUSBEndpoint::GetNumber() const>
   8e8ec:	12001c05 	and	w5, w0, #0xff
   8e8f0:	aa1503e1 	mov	x1, x21
   8e8f4:	aa1403e0 	mov	x0, x20
   8e8f8:	52800007 	mov	w7, #0x0                   	// #0
   8e8fc:	d2800006 	mov	x6, #0x0                   	// #0
   8e900:	52800004 	mov	w4, #0x0                   	// #0
   8e904:	52800023 	mov	w3, #0x1                   	// #1
   8e908:	52800042 	mov	w2, #0x2                   	// #2
   8e90c:	97ffc9c1 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   8e910:	37f80320 	tbnz	w0, #31, 8e974 <CUSBBulkOnlyMassStorageDevice::Reset()+0x144>
   8e914:	f9401660 	ldr	x0, [x19, #40]
   8e918:	97ffeeae 	bl	8a3d0 <CUSBEndpoint::ResetPID()>
   8e91c:	f9401a60 	ldr	x0, [x19, #48]
   8e920:	97ffeeac 	bl	8a3d0 <CUSBEndpoint::ResetPID()>
   8e924:	52800000 	mov	w0, #0x0                   	// #0
   8e928:	a94153f3 	ldp	x19, x20, [sp, #16]
   8e92c:	f94013f5 	ldr	x21, [sp, #32]
   8e930:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8e934:	d65f03c0 	ret
   8e938:	90000140 	adrp	x0, b6000 <From+0x98>
   8e93c:	91292000 	add	x0, x0, #0xa48
   8e940:	91002001 	add	x1, x0, #0x8
   8e944:	52805762 	mov	w2, #0x2bb                 	// #699
   8e948:	9102c000 	add	x0, x0, #0xb0
   8e94c:	94003cfd 	bl	9dd40 <assertion_failed>
   8e950:	94004430 	bl	9fa10 <CLogger::Get()>
   8e954:	90000141 	adrp	x1, b6000 <From+0x98>
   8e958:	91292021 	add	x1, x1, #0xa48
   8e95c:	91074023 	add	x3, x1, #0x1d0
   8e960:	52800082 	mov	w2, #0x4                   	// #4
   8e964:	91036021 	add	x1, x1, #0xd8
   8e968:	94004616 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8e96c:	12800000 	mov	w0, #0xffffffff            	// #-1
   8e970:	17ffffee 	b	8e928 <CUSBBulkOnlyMassStorageDevice::Reset()+0xf8>
   8e974:	94004427 	bl	9fa10 <CLogger::Get()>
   8e978:	90000141 	adrp	x1, b6000 <From+0x98>
   8e97c:	91292021 	add	x1, x1, #0xa48
   8e980:	9107a023 	add	x3, x1, #0x1e8
   8e984:	52800082 	mov	w2, #0x4                   	// #4
   8e988:	91036021 	add	x1, x1, #0xd8
   8e98c:	9400460d 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8e990:	12800000 	mov	w0, #0xffffffff            	// #-1
   8e994:	17ffffe5 	b	8e928 <CUSBBulkOnlyMassStorageDevice::Reset()+0xf8>
   8e998:	9400441e 	bl	9fa10 <CLogger::Get()>
   8e99c:	90000141 	adrp	x1, b6000 <From+0x98>
   8e9a0:	91292021 	add	x1, x1, #0xa48
   8e9a4:	91048023 	add	x3, x1, #0x120
   8e9a8:	52800082 	mov	w2, #0x4                   	// #4
   8e9ac:	91036021 	add	x1, x1, #0xd8
   8e9b0:	94004604 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8e9b4:	12800000 	mov	w0, #0xffffffff            	// #-1
   8e9b8:	17ffffdc 	b	8e928 <CUSBBulkOnlyMassStorageDevice::Reset()+0xf8>
   8e9bc:	d503201f 	nop

000000000008e9c0 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned long)>:
   8e9c0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8e9c4:	910003fd 	mov	x29, sp
   8e9c8:	a90153f3 	stp	x19, x20, [sp, #16]
   8e9cc:	aa0003f4 	mov	x20, x0
   8e9d0:	a9025bf5 	stp	x21, x22, [sp, #32]
   8e9d4:	aa0203f5 	mov	x21, x2
   8e9d8:	52800116 	mov	w22, #0x8                   	// #8
   8e9dc:	a90363f7 	stp	x23, x24, [sp, #48]
   8e9e0:	aa0103f7 	mov	x23, x1
   8e9e4:	2a0203f8 	mov	w24, w2
   8e9e8:	aa1503e2 	mov	x2, x21
   8e9ec:	aa1703e1 	mov	x1, x23
   8e9f0:	aa1403e0 	mov	x0, x20
   8e9f4:	97ffff17 	bl	8e650 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned long)>
   8e9f8:	2a0003f3 	mov	w19, w0
   8e9fc:	aa1403e0 	mov	x0, x20
   8ea00:	6b18027f 	cmp	w19, w24
   8ea04:	540000e1 	b.ne	8ea20 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned long)+0x60>  // b.any
   8ea08:	2a1803e0 	mov	w0, w24
   8ea0c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ea10:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ea14:	a94363f7 	ldp	x23, x24, [sp, #48]
   8ea18:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8ea1c:	d65f03c0 	ret
   8ea20:	97ffff84 	bl	8e830 <CUSBBulkOnlyMassStorageDevice::Reset()>
   8ea24:	710006d6 	subs	w22, w22, #0x1
   8ea28:	35000120 	cbnz	w0, 8ea4c <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned long)+0x8c>
   8ea2c:	54fffde1 	b.ne	8e9e8 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned long)+0x28>  // b.any
   8ea30:	2a1303f8 	mov	w24, w19
   8ea34:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ea38:	2a1803e0 	mov	w0, w24
   8ea3c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ea40:	a94363f7 	ldp	x23, x24, [sp, #48]
   8ea44:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8ea48:	d65f03c0 	ret
   8ea4c:	2a0003f8 	mov	w24, w0
   8ea50:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ea54:	2a1803e0 	mov	w0, w24
   8ea58:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ea5c:	a94363f7 	ldp	x23, x24, [sp, #48]
   8ea60:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8ea64:	d65f03c0 	ret
   8ea68:	d503201f 	nop
   8ea6c:	d503201f 	nop

000000000008ea70 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned long)>:
   8ea70:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8ea74:	910003fd 	mov	x29, sp
   8ea78:	a90153f3 	stp	x19, x20, [sp, #16]
   8ea7c:	aa0003f4 	mov	x20, x0
   8ea80:	a9025bf5 	stp	x21, x22, [sp, #32]
   8ea84:	aa0203f5 	mov	x21, x2
   8ea88:	52800116 	mov	w22, #0x8                   	// #8
   8ea8c:	a90363f7 	stp	x23, x24, [sp, #48]
   8ea90:	aa0103f7 	mov	x23, x1
   8ea94:	2a0203f8 	mov	w24, w2
   8ea98:	aa1503e2 	mov	x2, x21
   8ea9c:	aa1703e1 	mov	x1, x23
   8eaa0:	aa1403e0 	mov	x0, x20
   8eaa4:	97ffff2b 	bl	8e750 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned long)>
   8eaa8:	2a0003f3 	mov	w19, w0
   8eaac:	aa1403e0 	mov	x0, x20
   8eab0:	6b18027f 	cmp	w19, w24
   8eab4:	540000e1 	b.ne	8ead0 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned long)+0x60>  // b.any
   8eab8:	2a1803e0 	mov	w0, w24
   8eabc:	a94153f3 	ldp	x19, x20, [sp, #16]
   8eac0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8eac4:	a94363f7 	ldp	x23, x24, [sp, #48]
   8eac8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8eacc:	d65f03c0 	ret
   8ead0:	97ffff58 	bl	8e830 <CUSBBulkOnlyMassStorageDevice::Reset()>
   8ead4:	710006d6 	subs	w22, w22, #0x1
   8ead8:	35000120 	cbnz	w0, 8eafc <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned long)+0x8c>
   8eadc:	54fffde1 	b.ne	8ea98 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned long)+0x28>  // b.any
   8eae0:	2a1303f8 	mov	w24, w19
   8eae4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8eae8:	2a1803e0 	mov	w0, w24
   8eaec:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8eaf0:	a94363f7 	ldp	x23, x24, [sp, #48]
   8eaf4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8eaf8:	d65f03c0 	ret
   8eafc:	2a0003f8 	mov	w24, w0
   8eb00:	a94153f3 	ldp	x19, x20, [sp, #16]
   8eb04:	2a1803e0 	mov	w0, w24
   8eb08:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8eb0c:	a94363f7 	ldp	x23, x24, [sp, #48]
   8eb10:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8eb14:	d65f03c0 	ret
   8eb18:	d503201f 	nop
   8eb1c:	d503201f 	nop

000000000008eb20 <CUSBBulkOnlyMassStorageDevice::Configure()>:
   8eb20:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   8eb24:	910003fd 	mov	x29, sp
   8eb28:	a90153f3 	stp	x19, x20, [sp, #16]
   8eb2c:	aa0003f4 	mov	x20, x0
   8eb30:	97ffef3c 	bl	8a820 <CUSBFunction::GetNumEndpoints() const>
   8eb34:	12001c00 	and	w0, w0, #0xff
   8eb38:	7100041f 	cmp	w0, #0x1
   8eb3c:	540019a9 	b.ls	8ee70 <CUSBBulkOnlyMassStorageDevice::Configure()+0x350>  // b.plast
   8eb40:	a9025bf5 	stp	x21, x22, [sp, #32]
   8eb44:	14000005 	b	8eb58 <CUSBBulkOnlyMassStorageDevice::Configure()+0x38>
   8eb48:	39400e61 	ldrb	w1, [x19, #3]
   8eb4c:	12001421 	and	w1, w1, #0x3f
   8eb50:	7100083f 	cmp	w1, #0x2
   8eb54:	54000580 	b.eq	8ec04 <CUSBBulkOnlyMassStorageDevice::Configure()+0xe4>  // b.none
   8eb58:	528000a1 	mov	w1, #0x5                   	// #5
   8eb5c:	aa1403e0 	mov	x0, x20
   8eb60:	97ffef60 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   8eb64:	aa0003f3 	mov	x19, x0
   8eb68:	b5ffff00 	cbnz	x0, 8eb48 <CUSBBulkOnlyMassStorageDevice::Configure()+0x28>
   8eb6c:	f9401680 	ldr	x0, [x20, #40]
   8eb70:	b4001520 	cbz	x0, 8ee14 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2f4>
   8eb74:	f9401a80 	ldr	x0, [x20, #48]
   8eb78:	b40014e0 	cbz	x0, 8ee14 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2f4>
   8eb7c:	aa1403e0 	mov	x0, x20
   8eb80:	97ffee64 	bl	8a510 <CUSBFunction::Configure()>
   8eb84:	72001c13 	ands	w19, w0, #0xff
   8eb88:	540015c0 	b.eq	8ee40 <CUSBBulkOnlyMassStorageDevice::Configure()+0x320>  // b.none
   8eb8c:	52800486 	mov	w6, #0x24                  	// #36
   8eb90:	52800255 	mov	w21, #0x12                  	// #18
   8eb94:	52800025 	mov	w5, #0x1                   	// #1
   8eb98:	d2800484 	mov	x4, #0x24                  	// #36
   8eb9c:	9101e3e3 	add	x3, sp, #0x78
   8eba0:	d28000c2 	mov	x2, #0x6                   	// #6
   8eba4:	b9003bf5 	str	w21, [sp, #56]
   8eba8:	9100e3e1 	add	x1, sp, #0x38
   8ebac:	aa1403e0 	mov	x0, x20
   8ebb0:	79007be6 	strh	w6, [sp, #60]
   8ebb4:	97fffd9b 	bl	8e220 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)>
   8ebb8:	7100901f 	cmp	w0, #0x24
   8ebbc:	540016e1 	b.ne	8ee98 <CUSBBulkOnlyMassStorageDevice::Configure()+0x378>  // b.any
   8ebc0:	3941e3e0 	ldrb	w0, [sp, #120]
   8ebc4:	52800c73 	mov	w19, #0x63                  	// #99
   8ebc8:	52800076 	mov	w22, #0x3                   	// #3
   8ebcc:	f240101f 	tst	x0, #0x1f
   8ebd0:	54000500 	b.eq	8ec70 <CUSBBulkOnlyMassStorageDevice::Configure()+0x150>  // b.none
   8ebd4:	9400438f 	bl	9fa10 <CLogger::Get()>
   8ebd8:	f9403fe4 	ldr	x4, [sp, #120]
   8ebdc:	90000141 	adrp	x1, b6000 <From+0x98>
   8ebe0:	91292021 	add	x1, x1, #0xa48
   8ebe4:	91090023 	add	x3, x1, #0x240
   8ebe8:	52800022 	mov	w2, #0x1                   	// #1
   8ebec:	91036021 	add	x1, x1, #0xd8
   8ebf0:	52800013 	mov	w19, #0x0                   	// #0
   8ebf4:	12001084 	and	w4, w4, #0x1f
   8ebf8:	94004572 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8ebfc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ec00:	1400008c 	b	8ee30 <CUSBBulkOnlyMassStorageDevice::Configure()+0x310>
   8ec04:	39c00a60 	ldrsb	w0, [x19, #2]
   8ec08:	37f80ec0 	tbnz	w0, #31, 8ede0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c0>
   8ec0c:	f9401a80 	ldr	x0, [x20, #48]
   8ec10:	b5001020 	cbnz	x0, 8ee14 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2f4>
   8ec14:	aa1403e0 	mov	x0, x20
   8ec18:	97ffef0e 	bl	8a850 <CUSBFunction::GetDevice() const>
   8ec1c:	aa0003f5 	mov	x21, x0
   8ec20:	d2800400 	mov	x0, #0x20                  	// #32
   8ec24:	9400658f 	bl	a8260 <operator new(unsigned long)>
   8ec28:	aa1503e1 	mov	x1, x21
   8ec2c:	aa0003f5 	mov	x21, x0
   8ec30:	aa1303e2 	mov	x2, x19
   8ec34:	97ffed3f 	bl	8a130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   8ec38:	f9001a95 	str	x21, [x20, #48]
   8ec3c:	17ffffc7 	b	8eb58 <CUSBBulkOnlyMassStorageDevice::Configure()+0x38>
   8ec40:	52800025 	mov	w5, #0x1                   	// #1
   8ec44:	d2800244 	mov	x4, #0x12                  	// #18
   8ec48:	b9004bf6 	str	w22, [sp, #72]
   8ec4c:	910163e3 	add	x3, sp, #0x58
   8ec50:	d28000c2 	mov	x2, #0x6                   	// #6
   8ec54:	79009bf5 	strh	w21, [sp, #76]
   8ec58:	910123e1 	add	x1, sp, #0x48
   8ec5c:	aa1403e0 	mov	x0, x20
   8ec60:	97fffd70 	bl	8e220 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)>
   8ec64:	37f81340 	tbnz	w0, #31, 8eecc <CUSBBulkOnlyMassStorageDevice::Configure()+0x3ac>
   8ec68:	71000673 	subs	w19, w19, #0x1
   8ec6c:	54001500 	b.eq	8ef0c <CUSBBulkOnlyMassStorageDevice::Configure()+0x3ec>  // b.none
   8ec70:	94006120 	bl	a70f0 <CTimer::Get()>
   8ec74:	52800c80 	mov	w0, #0x64                  	// #100
   8ec78:	940060c2 	bl	a6f80 <CTimer::SimpleMsDelay(unsigned int)>
   8ec7c:	52800005 	mov	w5, #0x0                   	// #0
   8ec80:	d2800004 	mov	x4, #0x0                   	// #0
   8ec84:	b90043ff 	str	wzr, [sp, #64]
   8ec88:	d2800003 	mov	x3, #0x0                   	// #0
   8ec8c:	d28000c2 	mov	x2, #0x6                   	// #6
   8ec90:	79008bff 	strh	wzr, [sp, #68]
   8ec94:	910103e1 	add	x1, sp, #0x40
   8ec98:	aa1403e0 	mov	x0, x20
   8ec9c:	97fffd61 	bl	8e220 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)>
   8eca0:	37fffd00 	tbnz	w0, #31, 8ec40 <CUSBBulkOnlyMassStorageDevice::Configure()+0x120>
   8eca4:	d28004a0 	mov	x0, #0x25                  	// #37
   8eca8:	910103e3 	add	x3, sp, #0x40
   8ecac:	7900a3ff 	strh	wzr, [sp, #80]
   8ecb0:	910123e1 	add	x1, sp, #0x48
   8ecb4:	52800025 	mov	w5, #0x1                   	// #1
   8ecb8:	d2800104 	mov	x4, #0x8                   	// #8
   8ecbc:	d2800142 	mov	x2, #0xa                   	// #10
   8ecc0:	f90027e0 	str	x0, [sp, #72]
   8ecc4:	aa1403e0 	mov	x0, x20
   8ecc8:	97fffd56 	bl	8e220 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned long, void*, unsigned long, bool)>
   8eccc:	7100201f 	cmp	w0, #0x8
   8ecd0:	54001281 	b.ne	8ef20 <CUSBBulkOnlyMassStorageDevice::Configure()+0x400>  // b.any
   8ecd4:	b94047e0 	ldr	w0, [sp, #68]
   8ecd8:	7140801f 	cmp	w0, #0x20, lsl #12
   8ecdc:	5ac00813 	rev	w19, w0
   8ece0:	54001001 	b.ne	8eee0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3c0>  // b.any
   8ece4:	b94043e0 	ldr	w0, [sp, #64]
   8ece8:	5ac00800 	rev	w0, w0
   8ecec:	3100041f 	cmn	w0, #0x1
   8ecf0:	b9003e80 	str	w0, [x20, #60]
   8ecf4:	540012a0 	b.eq	8ef48 <CUSBBulkOnlyMassStorageDevice::Configure()+0x428>  // b.none
   8ecf8:	11000400 	add	w0, w0, #0x1
   8ecfc:	90000153 	adrp	x19, b6000 <From+0x98>
   8ed00:	91292273 	add	x19, x19, #0xa48
   8ed04:	f0000175 	adrp	x21, bd000 <CNetDevice::s_SpeedString+0x18>
   8ed08:	9102e2b5 	add	x21, x21, #0xb8
   8ed0c:	b9003e80 	str	w0, [x20, #60]
   8ed10:	91036276 	add	x22, x19, #0xd8
   8ed14:	9400433f 	bl	9fa10 <CLogger::Get()>
   8ed18:	b9403e84 	ldr	w4, [x20, #60]
   8ed1c:	910b4263 	add	x3, x19, #0x2d0
   8ed20:	aa1603e1 	mov	x1, x22
   8ed24:	52800082 	mov	w2, #0x4                   	// #4
   8ed28:	530b7c84 	lsr	w4, w4, #11
   8ed2c:	94004525 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8ed30:	910ba262 	add	x2, x19, #0x2e8
   8ed34:	aa1503e0 	mov	x0, x21
   8ed38:	52800001 	mov	w1, #0x0                   	// #0
   8ed3c:	940066f5 	bl	a8910 <CNumberPool::AllocateNumber(bool, char const*)>
   8ed40:	7101001f 	cmp	w0, #0x40
   8ed44:	540010c0 	b.eq	8ef5c <CUSBBulkOnlyMassStorageDevice::Configure()+0x43c>  // b.none
   8ed48:	b9405281 	ldr	w1, [x20, #80]
   8ed4c:	35001201 	cbnz	w1, 8ef8c <CUSBBulkOnlyMassStorageDevice::Configure()+0x46c>
   8ed50:	b9005280 	str	w0, [x20, #80]
   8ed54:	910163e0 	add	x0, sp, #0x58
   8ed58:	9400563e 	bl	a4650 <CString::CString()>
   8ed5c:	910163e0 	add	x0, sp, #0x58
   8ed60:	b9405282 	ldr	w2, [x20, #80]
   8ed64:	910c8261 	add	x1, x19, #0x320
   8ed68:	94005c72 	bl	a5f30 <CString::Format(char const*, ...)>
   8ed6c:	f9402680 	ldr	x0, [x20, #72]
   8ed70:	b5001060 	cbnz	x0, 8ef7c <CUSBBulkOnlyMassStorageDevice::Configure()+0x45c>
   8ed74:	910163e0 	add	x0, sp, #0x58
   8ed78:	9400567a 	bl	a4760 <CString::operator char const*() const>
   8ed7c:	aa0003f3 	mov	x19, x0
   8ed80:	d2800900 	mov	x0, #0x48                  	// #72
   8ed84:	94006537 	bl	a8260 <operator new(unsigned long)>
   8ed88:	aa1303e2 	mov	x2, x19
   8ed8c:	aa1403e1 	mov	x1, x20
   8ed90:	aa0003f3 	mov	x19, x0
   8ed94:	940039ff 	bl	9d590 <CPartitionManager::CPartitionManager(CDevice*, char const*)>
   8ed98:	aa1303e0 	mov	x0, x19
   8ed9c:	f9002693 	str	x19, [x20, #72]
   8eda0:	94003a40 	bl	9d6a0 <CPartitionManager::Initialize()>
   8eda4:	72001c13 	ands	w19, w0, #0xff
   8eda8:	54000c60 	b.eq	8ef34 <CUSBBulkOnlyMassStorageDevice::Configure()+0x414>  // b.none
   8edac:	94003fc9 	bl	9ecd0 <CDeviceNameService::Get()>
   8edb0:	aa0003f5 	mov	x21, x0
   8edb4:	910163e0 	add	x0, sp, #0x58
   8edb8:	9400566a 	bl	a4760 <CString::operator char const*() const>
   8edbc:	aa0003e1 	mov	x1, x0
   8edc0:	aa1403e2 	mov	x2, x20
   8edc4:	aa1503e0 	mov	x0, x21
   8edc8:	52800023 	mov	w3, #0x1                   	// #1
   8edcc:	94003ed1 	bl	9e910 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   8edd0:	910163e0 	add	x0, sp, #0x58
   8edd4:	940055e3 	bl	a4560 <CString::~CString()>
   8edd8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8eddc:	14000015 	b	8ee30 <CUSBBulkOnlyMassStorageDevice::Configure()+0x310>
   8ede0:	f9401680 	ldr	x0, [x20, #40]
   8ede4:	b5000180 	cbnz	x0, 8ee14 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2f4>
   8ede8:	aa1403e0 	mov	x0, x20
   8edec:	97ffee99 	bl	8a850 <CUSBFunction::GetDevice() const>
   8edf0:	aa0003f5 	mov	x21, x0
   8edf4:	d2800400 	mov	x0, #0x20                  	// #32
   8edf8:	9400651a 	bl	a8260 <operator new(unsigned long)>
   8edfc:	aa1503e1 	mov	x1, x21
   8ee00:	aa0003f5 	mov	x21, x0
   8ee04:	aa1303e2 	mov	x2, x19
   8ee08:	97ffecca 	bl	8a130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   8ee0c:	f9001695 	str	x21, [x20, #40]
   8ee10:	17ffff52 	b	8eb58 <CUSBBulkOnlyMassStorageDevice::Configure()+0x38>
   8ee14:	90000141 	adrp	x1, b6000 <From+0x98>
   8ee18:	91292021 	add	x1, x1, #0xa48
   8ee1c:	aa1403e0 	mov	x0, x20
   8ee20:	91036021 	add	x1, x1, #0xd8
   8ee24:	97ffeebb 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   8ee28:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ee2c:	52800013 	mov	w19, #0x0                   	// #0
   8ee30:	2a1303e0 	mov	w0, w19
   8ee34:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ee38:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   8ee3c:	d65f03c0 	ret
   8ee40:	940042f4 	bl	9fa10 <CLogger::Get()>
   8ee44:	90000141 	adrp	x1, b6000 <From+0x98>
   8ee48:	91292021 	add	x1, x1, #0xa48
   8ee4c:	91084023 	add	x3, x1, #0x210
   8ee50:	52800022 	mov	w2, #0x1                   	// #1
   8ee54:	91036021 	add	x1, x1, #0xd8
   8ee58:	940044da 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8ee5c:	2a1303e0 	mov	w0, w19
   8ee60:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ee64:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ee68:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   8ee6c:	d65f03c0 	ret
   8ee70:	90000141 	adrp	x1, b6000 <From+0x98>
   8ee74:	91292021 	add	x1, x1, #0xa48
   8ee78:	aa1403e0 	mov	x0, x20
   8ee7c:	91036021 	add	x1, x1, #0xd8
   8ee80:	97ffeea4 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   8ee84:	52800013 	mov	w19, #0x0                   	// #0
   8ee88:	2a1303e0 	mov	w0, w19
   8ee8c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ee90:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   8ee94:	d65f03c0 	ret
   8ee98:	940042de 	bl	9fa10 <CLogger::Get()>
   8ee9c:	90000141 	adrp	x1, b6000 <From+0x98>
   8eea0:	91292021 	add	x1, x1, #0xa48
   8eea4:	9108a023 	add	x3, x1, #0x228
   8eea8:	91036021 	add	x1, x1, #0xd8
   8eeac:	52800022 	mov	w2, #0x1                   	// #1
   8eeb0:	940044c4 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8eeb4:	52800013 	mov	w19, #0x0                   	// #0
   8eeb8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8eebc:	2a1303e0 	mov	w0, w19
   8eec0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8eec4:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   8eec8:	d65f03c0 	ret
   8eecc:	940042d1 	bl	9fa10 <CLogger::Get()>
   8eed0:	90000141 	adrp	x1, b6000 <From+0x98>
   8eed4:	91292021 	add	x1, x1, #0xa48
   8eed8:	91098023 	add	x3, x1, #0x260
   8eedc:	17fffff3 	b	8eea8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x388>
   8eee0:	940042cc 	bl	9fa10 <CLogger::Get()>
   8eee4:	90000141 	adrp	x1, b6000 <From+0x98>
   8eee8:	91292021 	add	x1, x1, #0xa48
   8eeec:	2a1303e4 	mov	w4, w19
   8eef0:	910a4023 	add	x3, x1, #0x290
   8eef4:	52800022 	mov	w2, #0x1                   	// #1
   8eef8:	91036021 	add	x1, x1, #0xd8
   8eefc:	940044b1 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8ef00:	52800013 	mov	w19, #0x0                   	// #0
   8ef04:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ef08:	17ffffca 	b	8ee30 <CUSBBulkOnlyMassStorageDevice::Configure()+0x310>
   8ef0c:	940042c1 	bl	9fa10 <CLogger::Get()>
   8ef10:	90000141 	adrp	x1, b6000 <From+0x98>
   8ef14:	91292021 	add	x1, x1, #0xa48
   8ef18:	910d2023 	add	x3, x1, #0x348
   8ef1c:	17ffffe3 	b	8eea8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x388>
   8ef20:	940042bc 	bl	9fa10 <CLogger::Get()>
   8ef24:	90000141 	adrp	x1, b6000 <From+0x98>
   8ef28:	91292021 	add	x1, x1, #0xa48
   8ef2c:	9109e023 	add	x3, x1, #0x278
   8ef30:	17ffffde 	b	8eea8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x388>
   8ef34:	b9405281 	ldr	w1, [x20, #80]
   8ef38:	aa1503e0 	mov	x0, x21
   8ef3c:	940066a5 	bl	a89d0 <CNumberPool::FreeNumber(unsigned int)>
   8ef40:	b900529f 	str	wzr, [x20, #80]
   8ef44:	17ffffa3 	b	8edd0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2b0>
   8ef48:	940042b2 	bl	9fa10 <CLogger::Get()>
   8ef4c:	90000141 	adrp	x1, b6000 <From+0x98>
   8ef50:	91292021 	add	x1, x1, #0xa48
   8ef54:	910ac023 	add	x3, x1, #0x2b0
   8ef58:	17ffffd4 	b	8eea8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x388>
   8ef5c:	940042ad 	bl	9fa10 <CLogger::Get()>
   8ef60:	910bc263 	add	x3, x19, #0x2f0
   8ef64:	aa1603e1 	mov	x1, x22
   8ef68:	52800022 	mov	w2, #0x1                   	// #1
   8ef6c:	52800013 	mov	w19, #0x0                   	// #0
   8ef70:	94004494 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8ef74:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ef78:	17ffffae 	b	8ee30 <CUSBBulkOnlyMassStorageDevice::Configure()+0x310>
   8ef7c:	52803322 	mov	w2, #0x199                 	// #409
   8ef80:	91002261 	add	x1, x19, #0x8
   8ef84:	910ca260 	add	x0, x19, #0x328
   8ef88:	94003b6e 	bl	9dd40 <assertion_failed>
   8ef8c:	52803262 	mov	w2, #0x193                 	// #403
   8ef90:	91002261 	add	x1, x19, #0x8
   8ef94:	910c2260 	add	x0, x19, #0x308
   8ef98:	94003b6a 	bl	9dd40 <assertion_failed>
   8ef9c:	00000000 	udf	#0

000000000008efa0 <_GLOBAL__sub_I__ZN29CUSBBulkOnlyMassStorageDevice18s_DeviceNumberPoolE>:
   8efa0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8efa4:	910003fd 	mov	x29, sp
   8efa8:	528007e2 	mov	w2, #0x3f                  	// #63
   8efac:	52800021 	mov	w1, #0x1                   	// #1
   8efb0:	f9000bf3 	str	x19, [sp, #16]
   8efb4:	f0000173 	adrp	x19, bd000 <CNetDevice::s_SpeedString+0x18>
   8efb8:	9102e273 	add	x19, x19, #0xb8
   8efbc:	aa1303e0 	mov	x0, x19
   8efc0:	94006638 	bl	a88a0 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   8efc4:	f0000162 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   8efc8:	d00000c0 	adrp	x0, a8000 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x20>
   8efcc:	aa1303e1 	mov	x1, x19
   8efd0:	91074042 	add	x2, x2, #0x1d0
   8efd4:	f9400bf3 	ldr	x19, [sp, #16]
   8efd8:	91240000 	add	x0, x0, #0x900
   8efdc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8efe0:	14005bf8 	b	a5fc0 <__cxa_atexit>
	...

000000000008eff0 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()>:
   8eff0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8eff4:	910003fd 	mov	x29, sp
   8eff8:	90000141 	adrp	x1, b6000 <From+0x98>
   8effc:	9136e021 	add	x1, x1, #0xdb8
   8f000:	a90153f3 	stp	x19, x20, [sp, #16]
   8f004:	aa0003f3 	mov	x19, x0
   8f008:	f9402800 	ldr	x0, [x0, #80]
   8f00c:	f9000261 	str	x1, [x19]
   8f010:	b50003e0 	cbnz	x0, 8f08c <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x9c>
   8f014:	f9401660 	ldr	x0, [x19, #40]
   8f018:	b4000080 	cbz	x0, 8f028 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x38>
   8f01c:	f9400001 	ldr	x1, [x0]
   8f020:	f9400421 	ldr	x1, [x1, #8]
   8f024:	d63f0020 	blr	x1
   8f028:	f900167f 	str	xzr, [x19, #40]
   8f02c:	f9402660 	ldr	x0, [x19, #72]
   8f030:	b4000040 	cbz	x0, 8f038 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x48>
   8f034:	940064a7 	bl	a82d0 <operator delete[](void*)>
   8f038:	f900267f 	str	xzr, [x19, #72]
   8f03c:	f9401a74 	ldr	x20, [x19, #48]
   8f040:	b40000d4 	cbz	x20, 8f058 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x68>
   8f044:	aa1403e0 	mov	x0, x20
   8f048:	97ffeca6 	bl	8a2e0 <CUSBEndpoint::~CUSBEndpoint()>
   8f04c:	aa1403e0 	mov	x0, x20
   8f050:	d2800401 	mov	x1, #0x20                  	// #32
   8f054:	940064ab 	bl	a8300 <operator delete(void*, unsigned long)>
   8f058:	f9001a7f 	str	xzr, [x19, #48]
   8f05c:	f9401e74 	ldr	x20, [x19, #56]
   8f060:	b40000d4 	cbz	x20, 8f078 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x88>
   8f064:	aa1403e0 	mov	x0, x20
   8f068:	97ffec9e 	bl	8a2e0 <CUSBEndpoint::~CUSBEndpoint()>
   8f06c:	aa1403e0 	mov	x0, x20
   8f070:	d2800401 	mov	x1, #0x20                  	// #32
   8f074:	940064a3 	bl	a8300 <operator delete(void*, unsigned long)>
   8f078:	aa1303e0 	mov	x0, x19
   8f07c:	f9001e7f 	str	xzr, [x19, #56]
   8f080:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f084:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8f088:	17ffecea 	b	8a430 <CUSBFunction::~CUSBFunction()>
   8f08c:	94006019 	bl	a70f0 <CTimer::Get()>
   8f090:	f9402a61 	ldr	x1, [x19, #80]
   8f094:	94005e5b 	bl	a6a00 <CTimer::CancelKernelTimer(unsigned long)>
   8f098:	f9002a7f 	str	xzr, [x19, #80]
   8f09c:	17ffffde 	b	8f014 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x24>

000000000008f0a0 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()>:
   8f0a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8f0a4:	910003fd 	mov	x29, sp
   8f0a8:	f9000bf3 	str	x19, [sp, #16]
   8f0ac:	aa0003f3 	mov	x19, x0
   8f0b0:	97ffffd0 	bl	8eff0 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()>
   8f0b4:	aa1303e0 	mov	x0, x19
   8f0b8:	d2800b01 	mov	x1, #0x58                  	// #88
   8f0bc:	f9400bf3 	ldr	x19, [sp, #16]
   8f0c0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8f0c4:	1400648f 	b	a8300 <operator delete(void*, unsigned long)>
   8f0c8:	d503201f 	nop
   8f0cc:	d503201f 	nop

000000000008f0d0 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)>:
   8f0d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8f0d4:	910003fd 	mov	x29, sp
   8f0d8:	a90153f3 	stp	x19, x20, [sp, #16]
   8f0dc:	f90013f5 	str	x21, [sp, #32]
   8f0e0:	b4000482 	cbz	x2, 8f170 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)+0xa0>
   8f0e4:	aa0003e3 	mov	x3, x0
   8f0e8:	b4000500 	cbz	x0, 8f188 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)+0xb8>
   8f0ec:	2a0103f4 	mov	w20, w1
   8f0f0:	34000581 	cbz	w1, 8f1a0 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)+0xd0>
   8f0f4:	f240069f 	tst	x20, #0x3
   8f0f8:	54000601 	b.ne	8f1b8 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)+0xe8>  // b.any
   8f0fc:	f9401c41 	ldr	x1, [x2, #56]
   8f100:	aa0203f3 	mov	x19, x2
   8f104:	52800000 	mov	w0, #0x0                   	// #0
   8f108:	b40002a1 	cbz	x1, 8f15c <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)+0x8c>
   8f10c:	2a1403e2 	mov	w2, w20
   8f110:	aa0303e1 	mov	x1, x3
   8f114:	d1000440 	sub	x0, x2, #0x1
   8f118:	b2401400 	orr	x0, x0, #0x3f
   8f11c:	91010000 	add	x0, x0, #0x40
   8f120:	927cec00 	and	x0, x0, #0xfffffffffffffff0
   8f124:	cb2063ff 	sub	sp, sp, x0
   8f128:	9100fff5 	add	x21, sp, #0x3f
   8f12c:	927ae6b5 	and	x21, x21, #0xffffffffffffffc0
   8f130:	aa1503e0 	mov	x0, x21
   8f134:	940061c5 	bl	a7848 <memcpy>
   8f138:	aa1303e0 	mov	x0, x19
   8f13c:	97ffeddd 	bl	8a8b0 <CUSBFunction::GetHost() const>
   8f140:	aa1503e2 	mov	x2, x21
   8f144:	2a1403e3 	mov	w3, w20
   8f148:	f9401e61 	ldr	x1, [x19, #56]
   8f14c:	52800004 	mov	w4, #0x0                   	// #0
   8f150:	97ffc82c 	bl	81200 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   8f154:	2a2003e0 	mvn	w0, w0
   8f158:	531f7c00 	lsr	w0, w0, #31
   8f15c:	910003bf 	mov	sp, x29
   8f160:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f164:	f94013f5 	ldr	x21, [sp, #32]
   8f168:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8f16c:	d65f03c0 	ret
   8f170:	f0000101 	adrp	x1, b2000 <_etext+0x1158>
   8f174:	f0000100 	adrp	x0, b2000 <_etext+0x1158>
   8f178:	913b8021 	add	x1, x1, #0xee0
   8f17c:	913bc000 	add	x0, x0, #0xef0
   8f180:	52801562 	mov	w2, #0xab                  	// #171
   8f184:	94003aef 	bl	9dd40 <assertion_failed>
   8f188:	f0000101 	adrp	x1, b2000 <_etext+0x1158>
   8f18c:	f0000100 	adrp	x0, b2000 <_etext+0x1158>
   8f190:	913b8021 	add	x1, x1, #0xee0
   8f194:	913be000 	add	x0, x0, #0xef8
   8f198:	528015a2 	mov	w2, #0xad                  	// #173
   8f19c:	94003ae9 	bl	9dd40 <assertion_failed>
   8f1a0:	f0000101 	adrp	x1, b2000 <_etext+0x1158>
   8f1a4:	f0000100 	adrp	x0, b2000 <_etext+0x1158>
   8f1a8:	913b8021 	add	x1, x1, #0xee0
   8f1ac:	913c2000 	add	x0, x0, #0xf08
   8f1b0:	528015c2 	mov	w2, #0xae                  	// #174
   8f1b4:	94003ae3 	bl	9dd40 <assertion_failed>
   8f1b8:	f0000101 	adrp	x1, b2000 <_etext+0x1158>
   8f1bc:	f0000100 	adrp	x0, b2000 <_etext+0x1158>
   8f1c0:	913b8021 	add	x1, x1, #0xee0
   8f1c4:	913c6000 	add	x0, x0, #0xf18
   8f1c8:	528015e2 	mov	w2, #0xaf                  	// #175
   8f1cc:	94003add 	bl	9dd40 <assertion_failed>

000000000008f1d0 <CUSBMIDIHostDevice::CUSBMIDIHostDevice(CUSBFunction*)>:
   8f1d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8f1d4:	910003fd 	mov	x29, sp
   8f1d8:	f9000bf3 	str	x19, [sp, #16]
   8f1dc:	aa0003f3 	mov	x19, x0
   8f1e0:	97ffed38 	bl	8a6c0 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   8f1e4:	f0000120 	adrp	x0, b6000 <From+0x98>
   8f1e8:	9136e000 	add	x0, x0, #0xdb8
   8f1ec:	a902fe7f 	stp	xzr, xzr, [x19, #40]
   8f1f0:	f9000260 	str	x0, [x19]
   8f1f4:	f9001e7f 	str	xzr, [x19, #56]
   8f1f8:	a904fe7f 	stp	xzr, xzr, [x19, #72]
   8f1fc:	f9400bf3 	ldr	x19, [sp, #16]
   8f200:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8f204:	d65f03c0 	ret
   8f208:	d503201f 	nop
   8f20c:	d503201f 	nop

000000000008f210 <CUSBMIDIHostDevice::StartRequest()>:
   8f210:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8f214:	910003fd 	mov	x29, sp
   8f218:	a90153f3 	stp	x19, x20, [sp, #16]
   8f21c:	aa0003f3 	mov	x19, x0
   8f220:	f9401800 	ldr	x0, [x0, #48]
   8f224:	b40003e0 	cbz	x0, 8f2a0 <CUSBMIDIHostDevice::StartRequest()+0x90>
   8f228:	f9402660 	ldr	x0, [x19, #72]
   8f22c:	b4000460 	cbz	x0, 8f2b8 <CUSBMIDIHostDevice::StartRequest()+0xa8>
   8f230:	79408260 	ldrh	w0, [x19, #64]
   8f234:	340004e0 	cbz	w0, 8f2d0 <CUSBMIDIHostDevice::StartRequest()+0xc0>
   8f238:	d2801200 	mov	x0, #0x90                  	// #144
   8f23c:	97ffcb01 	bl	81e40 <CUSBRequest::operator new(unsigned long)>
   8f240:	f9401a61 	ldr	x1, [x19, #48]
   8f244:	d2800004 	mov	x4, #0x0                   	// #0
   8f248:	aa0003f4 	mov	x20, x0
   8f24c:	79408263 	ldrh	w3, [x19, #64]
   8f250:	f9402662 	ldr	x2, [x19, #72]
   8f254:	97ffca13 	bl	81aa0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   8f258:	90000001 	adrp	x1, 8f000 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x10>
   8f25c:	aa1303e3 	mov	x3, x19
   8f260:	9115c021 	add	x1, x1, #0x570
   8f264:	d2800002 	mov	x2, #0x0                   	// #0
   8f268:	aa1403e0 	mov	x0, x20
   8f26c:	97ffcad1 	bl	81db0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   8f270:	aa1403e0 	mov	x0, x20
   8f274:	97ffcaeb 	bl	81e20 <CUSBRequest::SetCompleteOnNAK()>
   8f278:	aa1303e0 	mov	x0, x19
   8f27c:	97ffed8d 	bl	8a8b0 <CUSBFunction::GetHost() const>
   8f280:	f9400003 	ldr	x3, [x0]
   8f284:	aa1403e1 	mov	x1, x20
   8f288:	52800002 	mov	w2, #0x0                   	// #0
   8f28c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f290:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8f294:	f9401463 	ldr	x3, [x3, #40]
   8f298:	aa0303f0 	mov	x16, x3
   8f29c:	d61f0200 	br	x16
   8f2a0:	f0000101 	adrp	x1, b2000 <_etext+0x1158>
   8f2a4:	f0000100 	adrp	x0, b2000 <_etext+0x1158>
   8f2a8:	913b8021 	add	x1, x1, #0xee0
   8f2ac:	913cc000 	add	x0, x0, #0xf30
   8f2b0:	528017c2 	mov	w2, #0xbe                  	// #190
   8f2b4:	94003aa3 	bl	9dd40 <assertion_failed>
   8f2b8:	f0000101 	adrp	x1, b2000 <_etext+0x1158>
   8f2bc:	f0000100 	adrp	x0, b2000 <_etext+0x1158>
   8f2c0:	913b8021 	add	x1, x1, #0xee0
   8f2c4:	913d2000 	add	x0, x0, #0xf48
   8f2c8:	528017e2 	mov	w2, #0xbf                  	// #191
   8f2cc:	94003a9d 	bl	9dd40 <assertion_failed>
   8f2d0:	f0000101 	adrp	x1, b2000 <_etext+0x1158>
   8f2d4:	f0000100 	adrp	x0, b2000 <_etext+0x1158>
   8f2d8:	913b8021 	add	x1, x1, #0xee0
   8f2dc:	913d8000 	add	x0, x0, #0xf60
   8f2e0:	52801822 	mov	w2, #0xc1                  	// #193
   8f2e4:	94003a97 	bl	9dd40 <assertion_failed>
   8f2e8:	d503201f 	nop
   8f2ec:	d503201f 	nop

000000000008f2f0 <CUSBMIDIHostDevice::TimerStub(unsigned long, void*, void*)>:
   8f2f0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8f2f4:	910003fd 	mov	x29, sp
   8f2f8:	b4000102 	cbz	x2, 8f318 <CUSBMIDIHostDevice::TimerStub(unsigned long, void*, void*)+0x28>
   8f2fc:	f9402841 	ldr	x1, [x2, #80]
   8f300:	eb01001f 	cmp	x0, x1
   8f304:	54000161 	b.ne	8f330 <CUSBMIDIHostDevice::TimerStub(unsigned long, void*, void*)+0x40>  // b.any
   8f308:	aa0203e0 	mov	x0, x2
   8f30c:	f900285f 	str	xzr, [x2, #80]
   8f310:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8f314:	17ffffbf 	b	8f210 <CUSBMIDIHostDevice::StartRequest()>
   8f318:	f0000101 	adrp	x1, b2000 <_etext+0x1158>
   8f31c:	d0000100 	adrp	x0, b1000 <_etext+0x158>
   8f320:	913b8021 	add	x1, x1, #0xee0
   8f324:	910b6000 	add	x0, x0, #0x2d8
   8f328:	528020e2 	mov	w2, #0x107                 	// #263
   8f32c:	94003a85 	bl	9dd40 <assertion_failed>
   8f330:	f0000101 	adrp	x1, b2000 <_etext+0x1158>
   8f334:	f0000100 	adrp	x0, b2000 <_etext+0x1158>
   8f338:	913b8021 	add	x1, x1, #0xee0
   8f33c:	913de000 	add	x0, x0, #0xf78
   8f340:	52801fc2 	mov	w2, #0xfe                  	// #254
   8f344:	94003a7f 	bl	9dd40 <assertion_failed>
   8f348:	d503201f 	nop
   8f34c:	d503201f 	nop

000000000008f350 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)>:
   8f350:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   8f354:	910003fd 	mov	x29, sp
   8f358:	a90153f3 	stp	x19, x20, [sp, #16]
   8f35c:	b4000b41 	cbz	x1, 8f4c4 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x174>
   8f360:	aa0003f4 	mov	x20, x0
   8f364:	f9401400 	ldr	x0, [x0, #40]
   8f368:	b4000be0 	cbz	x0, 8f4e4 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x194>
   8f36c:	aa0103e0 	mov	x0, x1
   8f370:	aa0103f3 	mov	x19, x1
   8f374:	97ffca07 	bl	81b90 <CUSBRequest::GetStatus() const>
   8f378:	34000360 	cbz	w0, 8f3e4 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x94>
   8f37c:	aa1303e0 	mov	x0, x19
   8f380:	97ffca08 	bl	81ba0 <CUSBRequest::GetResultLength() const>
   8f384:	f240041f 	tst	x0, #0x3
   8f388:	540002e1 	b.ne	8f3e4 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x94>  // b.any
   8f38c:	a9025bf5 	stp	x21, x22, [sp, #32]
   8f390:	f9402695 	ldr	x21, [x20, #72]
   8f394:	b4000b95 	cbz	x21, 8f504 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x1b4>
   8f398:	f9401696 	ldr	x22, [x20, #40]
   8f39c:	aa1303e0 	mov	x0, x19
   8f3a0:	97ffca00 	bl	81ba0 <CUSBRequest::GetResultLength() const>
   8f3a4:	aa1503e1 	mov	x1, x21
   8f3a8:	2a0003e2 	mov	w2, w0
   8f3ac:	aa1603e0 	mov	x0, x22
   8f3b0:	94002f48 	bl	9b0d0 <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)>
   8f3b4:	12001c15 	and	w21, w0, #0xff
   8f3b8:	aa1303e0 	mov	x0, x19
   8f3bc:	97ffc9d9 	bl	81b20 <CUSBRequest::~CUSBRequest()>
   8f3c0:	aa1303e0 	mov	x0, x19
   8f3c4:	d2801201 	mov	x1, #0x90                  	// #144
   8f3c8:	97ffcab6 	bl	81ea0 <CUSBRequest::operator delete(void*, unsigned long)>
   8f3cc:	34000cb5 	cbz	w21, 8f560 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x210>
   8f3d0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8f3d4:	aa1403e0 	mov	x0, x20
   8f3d8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f3dc:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8f3e0:	17ffff8c 	b	8f210 <CUSBMIDIHostDevice::StartRequest()>
   8f3e4:	f9401680 	ldr	x0, [x20, #40]
   8f3e8:	94002f8e 	bl	9b220 <CUSBMIDIDevice::GetAllSoundOffOnUSBError() const>
   8f3ec:	72001c1f 	tst	w0, #0xff
   8f3f0:	54000301 	b.ne	8f450 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x100>  // b.any
   8f3f4:	aa1303e0 	mov	x0, x19
   8f3f8:	97ffc9ca 	bl	81b20 <CUSBRequest::~CUSBRequest()>
   8f3fc:	aa1303e0 	mov	x0, x19
   8f400:	d2801201 	mov	x1, #0x90                  	// #144
   8f404:	97ffcaa7 	bl	81ea0 <CUSBRequest::operator delete(void*, unsigned long)>
   8f408:	94003f6a 	bl	9f1b0 <CKernelOptions::Get()>
   8f40c:	94003f21 	bl	9f090 <CKernelOptions::GetUSBBoost() const>
   8f410:	72001c1f 	tst	w0, #0xff
   8f414:	54fffe01 	b.ne	8f3d4 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x84>  // b.any
   8f418:	f9402a80 	ldr	x0, [x20, #80]
   8f41c:	b5000820 	cbnz	x0, 8f520 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x1d0>
   8f420:	94005f34 	bl	a70f0 <CTimer::Get()>
   8f424:	90000002 	adrp	x2, 8f000 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x10>
   8f428:	aa1403e4 	mov	x4, x20
   8f42c:	910bc042 	add	x2, x2, #0x2f0
   8f430:	d2800003 	mov	x3, #0x0                   	// #0
   8f434:	52800021 	mov	w1, #0x1                   	// #1
   8f438:	94005d1a 	bl	a68a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)>
   8f43c:	f9002a80 	str	x0, [x20, #80]
   8f440:	b4000800 	cbz	x0, 8f540 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x1f0>
   8f444:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f448:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8f44c:	d65f03c0 	ret
   8f450:	aa1303e0 	mov	x0, x19
   8f454:	97ffc9cf 	bl	81b90 <CUSBRequest::GetStatus() const>
   8f458:	35fffce0 	cbnz	w0, 8f3f4 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0xa4>
   8f45c:	aa1303e0 	mov	x0, x19
   8f460:	97ffc9dc 	bl	81bd0 <CUSBRequest::GetUSBError() const>
   8f464:	7100241f 	cmp	w0, #0x9
   8f468:	54fffc60 	b.eq	8f3f4 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0xa4>  // b.none
   8f46c:	a9025bf5 	stp	x21, x22, [sp, #32]
   8f470:	52800015 	mov	w21, #0x0                   	// #0
   8f474:	128009f6 	mov	w22, #0xffffffb0            	// #-80
   8f478:	a90363f7 	stp	x23, x24, [sp, #48]
   8f47c:	52800178 	mov	w24, #0xb                   	// #11
   8f480:	52800f17 	mov	w23, #0x78                  	// #120
   8f484:	d503201f 	nop
   8f488:	2a1602a3 	orr	w3, w21, w22
   8f48c:	52800082 	mov	w2, #0x4                   	// #4
   8f490:	910123e1 	add	x1, sp, #0x48
   8f494:	110006b5 	add	w21, w21, #0x1
   8f498:	f9401680 	ldr	x0, [x20, #40]
   8f49c:	12001eb5 	and	w21, w21, #0xff
   8f4a0:	390123f8 	strb	w24, [sp, #72]
   8f4a4:	390127e3 	strb	w3, [sp, #73]
   8f4a8:	790097f7 	strh	w23, [sp, #74]
   8f4ac:	94002f09 	bl	9b0d0 <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)>
   8f4b0:	710042bf 	cmp	w21, #0x10
   8f4b4:	54fffea1 	b.ne	8f488 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x138>  // b.any
   8f4b8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8f4bc:	a94363f7 	ldp	x23, x24, [sp, #48]
   8f4c0:	17ffffcd 	b	8f3f4 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0xa4>
   8f4c4:	f0000101 	adrp	x1, b2000 <_etext+0x1158>
   8f4c8:	d0000100 	adrp	x0, b1000 <_etext+0x158>
   8f4cc:	a9025bf5 	stp	x21, x22, [sp, #32]
   8f4d0:	913b8021 	add	x1, x1, #0xee0
   8f4d4:	910aa000 	add	x0, x0, #0x2a8
   8f4d8:	528019a2 	mov	w2, #0xcd                  	// #205
   8f4dc:	a90363f7 	stp	x23, x24, [sp, #48]
   8f4e0:	94003a18 	bl	9dd40 <assertion_failed>
   8f4e4:	f0000101 	adrp	x1, b2000 <_etext+0x1158>
   8f4e8:	f0000100 	adrp	x0, b2000 <_etext+0x1158>
   8f4ec:	a9025bf5 	stp	x21, x22, [sp, #32]
   8f4f0:	913b8021 	add	x1, x1, #0xee0
   8f4f4:	913e4000 	add	x0, x0, #0xf90
   8f4f8:	528019c2 	mov	w2, #0xce                  	// #206
   8f4fc:	a90363f7 	stp	x23, x24, [sp, #48]
   8f500:	94003a10 	bl	9dd40 <assertion_failed>
   8f504:	f0000101 	adrp	x1, b2000 <_etext+0x1158>
   8f508:	f0000100 	adrp	x0, b2000 <_etext+0x1158>
   8f50c:	a90363f7 	stp	x23, x24, [sp, #48]
   8f510:	913b8021 	add	x1, x1, #0xee0
   8f514:	913d2000 	add	x0, x0, #0xf48
   8f518:	52801aa2 	mov	w2, #0xd5                  	// #213
   8f51c:	94003a09 	bl	9dd40 <assertion_failed>
   8f520:	f0000101 	adrp	x1, b2000 <_etext+0x1158>
   8f524:	f0000100 	adrp	x0, b2000 <_etext+0x1158>
   8f528:	a9025bf5 	stp	x21, x22, [sp, #32]
   8f52c:	913b8021 	add	x1, x1, #0xee0
   8f530:	913ea000 	add	x0, x0, #0xfa8
   8f534:	52801dc2 	mov	w2, #0xee                  	// #238
   8f538:	a90363f7 	stp	x23, x24, [sp, #48]
   8f53c:	94003a01 	bl	9dd40 <assertion_failed>
   8f540:	f0000101 	adrp	x1, b2000 <_etext+0x1158>
   8f544:	f0000100 	adrp	x0, b2000 <_etext+0x1158>
   8f548:	a9025bf5 	stp	x21, x22, [sp, #32]
   8f54c:	913b8021 	add	x1, x1, #0xee0
   8f550:	913ee000 	add	x0, x0, #0xfb8
   8f554:	52801e02 	mov	w2, #0xf0                  	// #240
   8f558:	a90363f7 	stp	x23, x24, [sp, #48]
   8f55c:	940039f9 	bl	9dd40 <assertion_failed>
   8f560:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8f564:	17ffffa9 	b	8f408 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0xb8>
   8f568:	d503201f 	nop
   8f56c:	d503201f 	nop

000000000008f570 <CUSBMIDIHostDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   8f570:	b4000082 	cbz	x2, 8f580 <CUSBMIDIHostDevice::CompletionStub(CUSBRequest*, void*, void*)+0x10>
   8f574:	aa0003e1 	mov	x1, x0
   8f578:	aa0203e0 	mov	x0, x2
   8f57c:	17ffff75 	b	8f350 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)>
   8f580:	f0000101 	adrp	x1, b2000 <_etext+0x1158>
   8f584:	d0000100 	adrp	x0, b1000 <_etext+0x158>
   8f588:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8f58c:	913b8021 	add	x1, x1, #0xee0
   8f590:	910003fd 	mov	x29, sp
   8f594:	910b6000 	add	x0, x0, #0x2d8
   8f598:	52801ee2 	mov	w2, #0xf7                  	// #247
   8f59c:	940039e9 	bl	9dd40 <assertion_failed>

000000000008f5a0 <CUSBMIDIHostDevice::TimerHandler(unsigned long)>:
   8f5a0:	f9402803 	ldr	x3, [x0, #80]
   8f5a4:	eb01007f 	cmp	x3, x1
   8f5a8:	54000061 	b.ne	8f5b4 <CUSBMIDIHostDevice::TimerHandler(unsigned long)+0x14>  // b.any
   8f5ac:	f900281f 	str	xzr, [x0, #80]
   8f5b0:	17ffff18 	b	8f210 <CUSBMIDIHostDevice::StartRequest()>
   8f5b4:	f0000101 	adrp	x1, b2000 <_etext+0x1158>
   8f5b8:	f0000100 	adrp	x0, b2000 <_etext+0x1158>
   8f5bc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8f5c0:	913b8021 	add	x1, x1, #0xee0
   8f5c4:	910003fd 	mov	x29, sp
   8f5c8:	913de000 	add	x0, x0, #0xf78
   8f5cc:	52801fc2 	mov	w2, #0xfe                  	// #254
   8f5d0:	940039dc 	bl	9dd40 <assertion_failed>
   8f5d4:	d503201f 	nop
   8f5d8:	d503201f 	nop
   8f5dc:	d503201f 	nop

000000000008f5e0 <CUSBMIDIHostDevice::Configure()>:
   8f5e0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8f5e4:	910003fd 	mov	x29, sp
   8f5e8:	a90153f3 	stp	x19, x20, [sp, #16]
   8f5ec:	aa0003f4 	mov	x20, x0
   8f5f0:	97ffec8c 	bl	8a820 <CUSBFunction::GetNumEndpoints() const>
   8f5f4:	72001c1f 	tst	w0, #0xff
   8f5f8:	54000cc0 	b.eq	8f790 <CUSBMIDIHostDevice::Configure()+0x1b0>  // b.none
   8f5fc:	aa1403e0 	mov	x0, x20
   8f600:	a9025bf5 	stp	x21, x22, [sp, #32]
   8f604:	97ffec93 	bl	8a850 <CUSBFunction::GetDevice() const>
   8f608:	97ffe4a6 	bl	888a0 <CUSBDevice::GetDeviceDescriptor() const>
   8f60c:	b4000f40 	cbz	x0, 8f7f4 <CUSBMIDIHostDevice::Configure()+0x214>
   8f610:	39402002 	ldrb	w2, [x0, #8]
   8f614:	52800016 	mov	w22, #0x0                   	// #0
   8f618:	39402401 	ldrb	w1, [x0, #9]
   8f61c:	2a012041 	orr	w1, w2, w1, lsl #8
   8f620:	7116083f 	cmp	w1, #0x582
   8f624:	54000aa0 	b.eq	8f778 <CUSBMIDIHostDevice::Configure()+0x198>  // b.none
   8f628:	528000a1 	mov	w1, #0x5                   	// #5
   8f62c:	aa1403e0 	mov	x0, x20
   8f630:	97ffecac 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   8f634:	aa0003f3 	mov	x19, x0
   8f638:	b4000320 	cbz	x0, 8f69c <CUSBMIDIHostDevice::Configure()+0xbc>
   8f63c:	39400e61 	ldrb	w1, [x19, #3]
   8f640:	121f1021 	and	w1, w1, #0x3e
   8f644:	7100083f 	cmp	w1, #0x2
   8f648:	54ffff01 	b.ne	8f628 <CUSBMIDIHostDevice::Configure()+0x48>  // b.any
   8f64c:	34000576 	cbz	w22, 8f6f8 <CUSBMIDIHostDevice::Configure()+0x118>
   8f650:	39c00a60 	ldrsb	w0, [x19, #2]
   8f654:	37f80660 	tbnz	w0, #31, 8f720 <CUSBMIDIHostDevice::Configure()+0x140>
   8f658:	f9401e80 	ldr	x0, [x20, #56]
   8f65c:	b5000b80 	cbnz	x0, 8f7cc <CUSBMIDIHostDevice::Configure()+0x1ec>
   8f660:	aa1403e0 	mov	x0, x20
   8f664:	97ffec7b 	bl	8a850 <CUSBFunction::GetDevice() const>
   8f668:	aa0003f5 	mov	x21, x0
   8f66c:	d2800400 	mov	x0, #0x20                  	// #32
   8f670:	940062fc 	bl	a8260 <operator new(unsigned long)>
   8f674:	aa1503e1 	mov	x1, x21
   8f678:	aa1303e2 	mov	x2, x19
   8f67c:	aa0003f5 	mov	x21, x0
   8f680:	97ffeaac 	bl	8a130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   8f684:	528000a1 	mov	w1, #0x5                   	// #5
   8f688:	aa1403e0 	mov	x0, x20
   8f68c:	f9001e95 	str	x21, [x20, #56]
   8f690:	97ffec94 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   8f694:	aa0003f3 	mov	x19, x0
   8f698:	b5fffd20 	cbnz	x0, 8f63c <CUSBMIDIHostDevice::Configure()+0x5c>
   8f69c:	f9401a80 	ldr	x0, [x20, #48]
   8f6a0:	b4000b60 	cbz	x0, 8f80c <CUSBMIDIHostDevice::Configure()+0x22c>
   8f6a4:	aa1403e0 	mov	x0, x20
   8f6a8:	97ffeb9a 	bl	8a510 <CUSBFunction::Configure()>
   8f6ac:	72001c13 	ands	w19, w0, #0xff
   8f6b0:	54000ba0 	b.eq	8f824 <CUSBMIDIHostDevice::Configure()+0x244>  // b.none
   8f6b4:	f9401680 	ldr	x0, [x20, #40]
   8f6b8:	b5000c80 	cbnz	x0, 8f848 <CUSBMIDIHostDevice::Configure()+0x268>
   8f6bc:	d2800700 	mov	x0, #0x38                  	// #56
   8f6c0:	940062e8 	bl	a8260 <operator new(unsigned long)>
   8f6c4:	aa0003f3 	mov	x19, x0
   8f6c8:	94002d4a 	bl	9abf0 <CUSBMIDIDevice::CUSBMIDIDevice()>
   8f6cc:	90000001 	adrp	x1, 8f000 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x10>
   8f6d0:	aa1303e0 	mov	x0, x19
   8f6d4:	f9001693 	str	x19, [x20, #40]
   8f6d8:	aa1403e2 	mov	x2, x20
   8f6dc:	91034021 	add	x1, x1, #0xd0
   8f6e0:	94002eb8 	bl	9b1c0 <CUSBMIDIDevice::RegisterSendEventsHandler(bool (*)(unsigned char const*, unsigned int, void*), void*)>
   8f6e4:	aa1403e0 	mov	x0, x20
   8f6e8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f6ec:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8f6f0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8f6f4:	17fffec7 	b	8f210 <CUSBMIDIHostDevice::StartRequest()>
   8f6f8:	528004a1 	mov	w1, #0x25                  	// #37
   8f6fc:	aa1403e0 	mov	x0, x20
   8f700:	97ffec78 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   8f704:	b4fff920 	cbz	x0, 8f628 <CUSBMIDIHostDevice::Configure()+0x48>
   8f708:	39400261 	ldrb	w1, [x19]
   8f70c:	8b010261 	add	x1, x19, x1
   8f710:	eb01001f 	cmp	x0, x1
   8f714:	54fff8a1 	b.ne	8f628 <CUSBMIDIHostDevice::Configure()+0x48>  // b.any
   8f718:	39c00a60 	ldrsb	w0, [x19, #2]
   8f71c:	36fff9e0 	tbz	w0, #31, 8f658 <CUSBMIDIHostDevice::Configure()+0x78>
   8f720:	f9401a80 	ldr	x0, [x20, #48]
   8f724:	b5000540 	cbnz	x0, 8f7cc <CUSBMIDIHostDevice::Configure()+0x1ec>
   8f728:	aa1403e0 	mov	x0, x20
   8f72c:	97ffec49 	bl	8a850 <CUSBFunction::GetDevice() const>
   8f730:	aa0003f5 	mov	x21, x0
   8f734:	d2800400 	mov	x0, #0x20                  	// #32
   8f738:	940062ca 	bl	a8260 <operator new(unsigned long)>
   8f73c:	aa1503e1 	mov	x1, x21
   8f740:	aa1303e2 	mov	x2, x19
   8f744:	aa0003f5 	mov	x21, x0
   8f748:	97ffea7a 	bl	8a130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   8f74c:	f9001a95 	str	x21, [x20, #48]
   8f750:	39401262 	ldrb	w2, [x19, #4]
   8f754:	39401660 	ldrb	w0, [x19, #5]
   8f758:	f9402681 	ldr	x1, [x20, #72]
   8f75c:	aa002040 	orr	x0, x2, x0, lsl #8
   8f760:	121e3400 	and	w0, w0, #0xfffc
   8f764:	79008280 	strh	w0, [x20, #64]
   8f768:	b5000261 	cbnz	x1, 8f7b4 <CUSBMIDIHostDevice::Configure()+0x1d4>
   8f76c:	940062c5 	bl	a8280 <operator new[](unsigned long)>
   8f770:	f9002680 	str	x0, [x20, #72]
   8f774:	17ffffad 	b	8f628 <CUSBMIDIHostDevice::Configure()+0x48>
   8f778:	39402801 	ldrb	w1, [x0, #10]
   8f77c:	39402c00 	ldrb	w0, [x0, #11]
   8f780:	2a002020 	orr	w0, w1, w0, lsl #8
   8f784:	7104a81f 	cmp	w0, #0x12a
   8f788:	1a9f17f6 	cset	w22, eq	// eq = none
   8f78c:	17ffffa7 	b	8f628 <CUSBMIDIHostDevice::Configure()+0x48>
   8f790:	f0000121 	adrp	x1, b6000 <From+0x98>
   8f794:	91386021 	add	x1, x1, #0xe18
   8f798:	aa1403e0 	mov	x0, x20
   8f79c:	52800013 	mov	w19, #0x0                   	// #0
   8f7a0:	97ffec5c 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   8f7a4:	2a1303e0 	mov	w0, w19
   8f7a8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f7ac:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8f7b0:	d65f03c0 	ret
   8f7b4:	f0000101 	adrp	x1, b2000 <_etext+0x1158>
   8f7b8:	f0000100 	adrp	x0, b2000 <_etext+0x1158>
   8f7bc:	913b8021 	add	x1, x1, #0xee0
   8f7c0:	913f8000 	add	x0, x0, #0xfe0
   8f7c4:	52800fc2 	mov	w2, #0x7e                  	// #126
   8f7c8:	9400395e 	bl	9dd40 <assertion_failed>
   8f7cc:	aa1403e0 	mov	x0, x20
   8f7d0:	f0000121 	adrp	x1, b6000 <From+0x98>
   8f7d4:	91386021 	add	x1, x1, #0xe18
   8f7d8:	52800013 	mov	w19, #0x0                   	// #0
   8f7dc:	97ffec4d 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   8f7e0:	2a1303e0 	mov	w0, w19
   8f7e4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f7e8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8f7ec:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8f7f0:	d65f03c0 	ret
   8f7f4:	f0000101 	adrp	x1, b2000 <_etext+0x1158>
   8f7f8:	f0000100 	adrp	x0, b2000 <_etext+0x1158>
   8f7fc:	913b8021 	add	x1, x1, #0xee0
   8f800:	913f2000 	add	x0, x0, #0xfc8
   8f804:	52800a02 	mov	w2, #0x50                  	// #80
   8f808:	9400394e 	bl	9dd40 <assertion_failed>
   8f80c:	aa1403e0 	mov	x0, x20
   8f810:	f0000121 	adrp	x1, b6000 <From+0x98>
   8f814:	91386021 	add	x1, x1, #0xe18
   8f818:	97ffec3e 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   8f81c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8f820:	17ffffe1 	b	8f7a4 <CUSBMIDIHostDevice::Configure()+0x1c4>
   8f824:	9400407b 	bl	9fa10 <CLogger::Get()>
   8f828:	d0000103 	adrp	x3, b1000 <_etext+0x158>
   8f82c:	f0000121 	adrp	x1, b6000 <From+0x98>
   8f830:	9112c063 	add	x3, x3, #0x4b0
   8f834:	91386021 	add	x1, x1, #0xe18
   8f838:	52800022 	mov	w2, #0x1                   	// #1
   8f83c:	94004261 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8f840:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8f844:	17ffffd8 	b	8f7a4 <CUSBMIDIHostDevice::Configure()+0x1c4>
   8f848:	f0000101 	adrp	x1, b2000 <_etext+0x1158>
   8f84c:	f0000100 	adrp	x0, b2000 <_etext+0x1158>
   8f850:	913b8021 	add	x1, x1, #0xee0
   8f854:	913fe000 	add	x0, x0, #0xff8
   8f858:	52801402 	mov	w2, #0xa0                  	// #160
   8f85c:	94003939 	bl	9dd40 <assertion_failed>

000000000008f860 <CUSBMouseDevice::~CUSBMouseDevice()>:
   8f860:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8f864:	910003fd 	mov	x29, sp
   8f868:	f0000121 	adrp	x1, b6000 <From+0x98>
   8f86c:	9138e021 	add	x1, x1, #0xe38
   8f870:	f9000bf3 	str	x19, [sp, #16]
   8f874:	aa0003f3 	mov	x19, x0
   8f878:	f9402400 	ldr	x0, [x0, #72]
   8f87c:	f9000261 	str	x1, [x19]
   8f880:	b4000080 	cbz	x0, 8f890 <CUSBMouseDevice::~CUSBMouseDevice()+0x30>
   8f884:	f9400001 	ldr	x1, [x0]
   8f888:	f9400421 	ldr	x1, [x1, #8]
   8f88c:	d63f0020 	blr	x1
   8f890:	f900267f 	str	xzr, [x19, #72]
   8f894:	f9402a60 	ldr	x0, [x19, #80]
   8f898:	b4000040 	cbz	x0, 8f8a0 <CUSBMouseDevice::~CUSBMouseDevice()+0x40>
   8f89c:	9400628d 	bl	a82d0 <operator delete[](void*)>
   8f8a0:	aa1303e0 	mov	x0, x19
   8f8a4:	f9002a7f 	str	xzr, [x19, #80]
   8f8a8:	f9400bf3 	ldr	x19, [sp, #16]
   8f8ac:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8f8b0:	17fff7f0 	b	8d870 <CUSBHIDDevice::~CUSBHIDDevice()>
   8f8b4:	d503201f 	nop
   8f8b8:	d503201f 	nop
   8f8bc:	d503201f 	nop

000000000008f8c0 <CUSBMouseDevice::~CUSBMouseDevice()>:
   8f8c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8f8c4:	910003fd 	mov	x29, sp
   8f8c8:	f9000bf3 	str	x19, [sp, #16]
   8f8cc:	aa0003f3 	mov	x19, x0
   8f8d0:	97ffffe4 	bl	8f860 <CUSBMouseDevice::~CUSBMouseDevice()>
   8f8d4:	aa1303e0 	mov	x0, x19
   8f8d8:	d2801101 	mov	x1, #0x88                  	// #136
   8f8dc:	f9400bf3 	ldr	x19, [sp, #16]
   8f8e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8f8e4:	14006287 	b	a8300 <operator delete(void*, unsigned long)>
   8f8e8:	d503201f 	nop
   8f8ec:	d503201f 	nop

000000000008f8f0 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>:
   8f8f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8f8f4:	52800002 	mov	w2, #0x0                   	// #0
   8f8f8:	910003fd 	mov	x29, sp
   8f8fc:	f9000bf3 	str	x19, [sp, #16]
   8f900:	aa0003f3 	mov	x19, x0
   8f904:	97fff7c3 	bl	8d810 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   8f908:	f0000120 	adrp	x0, b6000 <From+0x98>
   8f90c:	9138e000 	add	x0, x0, #0xe38
   8f910:	a904fe7f 	stp	xzr, xzr, [x19, #72]
   8f914:	f9000260 	str	x0, [x19]
   8f918:	f9400bf3 	ldr	x19, [sp, #16]
   8f91c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8f920:	d65f03c0 	ret
   8f924:	d503201f 	nop
   8f928:	d503201f 	nop
   8f92c:	d503201f 	nop

000000000008f930 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)>:
   8f930:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8f934:	910003fd 	mov	x29, sp
   8f938:	b40003a1 	cbz	x1, 8f9ac <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)+0x7c>
   8f93c:	7100807f 	cmp	w3, #0x20
   8f940:	54000428 	b.hi	8f9c4 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)+0x94>  // b.pmore
   8f944:	52800000 	mov	w0, #0x0                   	// #0
   8f948:	34000223 	cbz	w3, 8f98c <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)+0x5c>
   8f94c:	53037c40 	lsr	w0, w2, #3
   8f950:	12000844 	and	w4, w2, #0x7
   8f954:	b8604820 	ldr	w0, [x1, w0, uxtw]
   8f958:	53037c42 	lsr	w2, w2, #3
   8f95c:	7100607f 	cmp	w3, #0x18
   8f960:	8b020021 	add	x1, x1, x2
   8f964:	1ac42400 	lsr	w0, w0, w4
   8f968:	54000169 	b.ls	8f994 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)+0x64>  // b.plast
   8f96c:	b8403022 	ldur	w2, [x1, #3]
   8f970:	51006063 	sub	w3, w3, #0x18
   8f974:	52800021 	mov	w1, #0x1                   	// #1
   8f978:	1ac32021 	lsl	w1, w1, w3
   8f97c:	51000421 	sub	w1, w1, #0x1
   8f980:	1ac42442 	lsr	w2, w2, w4
   8f984:	0a020021 	and	w1, w1, w2
   8f988:	33081c20 	bfi	w0, w1, #24, #8
   8f98c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8f990:	d65f03c0 	ret
   8f994:	52800021 	mov	w1, #0x1                   	// #1
   8f998:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8f99c:	1ac32021 	lsl	w1, w1, w3
   8f9a0:	51000421 	sub	w1, w1, #0x1
   8f9a4:	0a000020 	and	w0, w1, w0
   8f9a8:	d65f03c0 	ret
   8f9ac:	90000121 	adrp	x1, b3000 <_etext+0x2158>
   8f9b0:	f0000100 	adrp	x0, b2000 <_etext+0x1158>
   8f9b4:	91004021 	add	x1, x1, #0x10
   8f9b8:	91306000 	add	x0, x0, #0xc18
   8f9bc:	52801582 	mov	w2, #0xac                  	// #172
   8f9c0:	940038e0 	bl	9dd40 <assertion_failed>
   8f9c4:	90000121 	adrp	x1, b3000 <_etext+0x2158>
   8f9c8:	f0000100 	adrp	x0, b2000 <_etext+0x1158>
   8f9cc:	91004021 	add	x1, x1, #0x10
   8f9d0:	9130a000 	add	x0, x0, #0xc28
   8f9d4:	528015a2 	mov	w2, #0xad                  	// #173
   8f9d8:	940038da 	bl	9dd40 <assertion_failed>
   8f9dc:	d503201f 	nop

000000000008f9e0 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)>:
   8f9e0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8f9e4:	910003fd 	mov	x29, sp
   8f9e8:	b40004c1 	cbz	x1, 8fa80 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0xa0>
   8f9ec:	7100807f 	cmp	w3, #0x20
   8f9f0:	54000548 	b.hi	8fa98 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0xb8>  // b.pmore
   8f9f4:	52800000 	mov	w0, #0x0                   	// #0
   8f9f8:	34000363 	cbz	w3, 8fa64 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0x84>
   8f9fc:	53037c40 	lsr	w0, w2, #3
   8fa00:	12000844 	and	w4, w2, #0x7
   8fa04:	b8604820 	ldr	w0, [x1, w0, uxtw]
   8fa08:	53037c42 	lsr	w2, w2, #3
   8fa0c:	7100607f 	cmp	w3, #0x18
   8fa10:	8b020021 	add	x1, x1, x2
   8fa14:	1ac42400 	lsr	w0, w0, w4
   8fa18:	540002a9 	b.ls	8fa6c <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0x8c>  // b.plast
   8fa1c:	b8403022 	ldur	w2, [x1, #3]
   8fa20:	51006065 	sub	w5, w3, #0x18
   8fa24:	52800021 	mov	w1, #0x1                   	// #1
   8fa28:	1ac52021 	lsl	w1, w1, w5
   8fa2c:	7100807f 	cmp	w3, #0x20
   8fa30:	51000421 	sub	w1, w1, #0x1
   8fa34:	1ac42442 	lsr	w2, w2, w4
   8fa38:	0a020021 	and	w1, w1, w2
   8fa3c:	33081c20 	bfi	w0, w1, #24, #8
   8fa40:	54000120 	b.eq	8fa64 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0x84>  // b.none
   8fa44:	52800021 	mov	w1, #0x1                   	// #1
   8fa48:	51000462 	sub	w2, w3, #0x1
   8fa4c:	1ac32023 	lsl	w3, w1, w3
   8fa50:	1ac22021 	lsl	w1, w1, w2
   8fa54:	4b0303e3 	neg	w3, w3
   8fa58:	6a00003f 	tst	w1, w0
   8fa5c:	2a030003 	orr	w3, w0, w3
   8fa60:	1a801060 	csel	w0, w3, w0, ne	// ne = any
   8fa64:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8fa68:	d65f03c0 	ret
   8fa6c:	52800021 	mov	w1, #0x1                   	// #1
   8fa70:	1ac32021 	lsl	w1, w1, w3
   8fa74:	51000421 	sub	w1, w1, #0x1
   8fa78:	0a000020 	and	w0, w1, w0
   8fa7c:	17fffff2 	b	8fa44 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0x64>
   8fa80:	90000121 	adrp	x1, b3000 <_etext+0x2158>
   8fa84:	f0000100 	adrp	x0, b2000 <_etext+0x1158>
   8fa88:	91004021 	add	x1, x1, #0x10
   8fa8c:	91306000 	add	x0, x0, #0xc18
   8fa90:	528019e2 	mov	w2, #0xcf                  	// #207
   8fa94:	940038ab 	bl	9dd40 <assertion_failed>
   8fa98:	90000121 	adrp	x1, b3000 <_etext+0x2158>
   8fa9c:	f0000100 	adrp	x0, b2000 <_etext+0x1158>
   8faa0:	91004021 	add	x1, x1, #0x10
   8faa4:	9130a000 	add	x0, x0, #0xc28
   8faa8:	52801a02 	mov	w2, #0xd0                  	// #208
   8faac:	940038a5 	bl	9dd40 <assertion_failed>

000000000008fab0 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)>:
   8fab0:	b40006e1 	cbz	x1, 8fb8c <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)+0xdc>
   8fab4:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   8fab8:	910003fd 	mov	x29, sp
   8fabc:	b9406003 	ldr	w3, [x0, #96]
   8fac0:	a90153f3 	stp	x19, x20, [sp, #16]
   8fac4:	aa0003f3 	mov	x19, x0
   8fac8:	6b02007f 	cmp	w3, w2
   8facc:	54000080 	b.eq	8fadc <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)+0x2c>  // b.none
   8fad0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8fad4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8fad8:	d65f03c0 	ret
   8fadc:	a9025bf5 	stp	x21, x22, [sp, #32]
   8fae0:	f9402416 	ldr	x22, [x0, #72]
   8fae4:	b4000576 	cbz	x22, 8fb90 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)+0xe0>
   8fae8:	294c8803 	ldp	w3, w2, [x0, #100]
   8faec:	aa0103f4 	mov	x20, x1
   8faf0:	a90363f7 	stp	x23, x24, [sp, #48]
   8faf4:	12800fd8 	mov	w24, #0xffffff81            	// #-127
   8faf8:	52800ff7 	mov	w23, #0x7f                  	// #127
   8fafc:	f90023f9 	str	x25, [sp, #64]
   8fb00:	97ffff8c 	bl	8f930 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)>
   8fb04:	294d8a63 	ldp	w3, w2, [x19, #108]
   8fb08:	2a0003f9 	mov	w25, w0
   8fb0c:	aa1403e1 	mov	x1, x20
   8fb10:	aa1303e0 	mov	x0, x19
   8fb14:	97ffffb3 	bl	8f9e0 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)>
   8fb18:	2a0003f5 	mov	w21, w0
   8fb1c:	294e8a63 	ldp	w3, w2, [x19, #116]
   8fb20:	aa1403e1 	mov	x1, x20
   8fb24:	6b1802bf 	cmp	w21, w24
   8fb28:	aa1303e0 	mov	x0, x19
   8fb2c:	1a98a2b5 	csel	w21, w21, w24, ge	// ge = tcont
   8fb30:	6b1702bf 	cmp	w21, w23
   8fb34:	1a97d2b5 	csel	w21, w21, w23, le
   8fb38:	97ffffaa 	bl	8f9e0 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)>
   8fb3c:	aa1403e1 	mov	x1, x20
   8fb40:	2a0003f4 	mov	w20, w0
   8fb44:	294f8a63 	ldp	w3, w2, [x19, #124]
   8fb48:	6b18029f 	cmp	w20, w24
   8fb4c:	aa1303e0 	mov	x0, x19
   8fb50:	1a98a294 	csel	w20, w20, w24, ge	// ge = tcont
   8fb54:	6b17029f 	cmp	w20, w23
   8fb58:	1a97d294 	csel	w20, w20, w23, le
   8fb5c:	97ffffa1 	bl	8f9e0 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)>
   8fb60:	2a0003e4 	mov	w4, w0
   8fb64:	2a1403e3 	mov	w3, w20
   8fb68:	a94153f3 	ldp	x19, x20, [sp, #16]
   8fb6c:	2a1503e2 	mov	w2, w21
   8fb70:	12001321 	and	w1, w25, #0x1f
   8fb74:	aa1603e0 	mov	x0, x22
   8fb78:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8fb7c:	a94363f7 	ldp	x23, x24, [sp, #48]
   8fb80:	f94023f9 	ldr	x25, [sp, #64]
   8fb84:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8fb88:	1400340a 	b	9cbb0 <CMouseDevice::ReportHandler(unsigned int, int, int, int)>
   8fb8c:	d65f03c0 	ret
   8fb90:	a94153f3 	ldp	x19, x20, [sp, #16]
   8fb94:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8fb98:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8fb9c:	d65f03c0 	ret

000000000008fba0 <CUSBMouseDevice::DecodeReport()>:
   8fba0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8fba4:	910003fd 	mov	x29, sp
   8fba8:	a9017fff 	stp	xzr, xzr, [sp, #16]
   8fbac:	f9402803 	ldr	x3, [x0, #80]
   8fbb0:	b4001623 	cbz	x3, 8fe74 <CUSBMouseDevice::DecodeReport()+0x2d4>
   8fbb4:	7940b002 	ldrh	w2, [x0, #88]
   8fbb8:	340016a2 	cbz	w2, 8fe8c <CUSBMouseDevice::DecodeReport()+0x2ec>
   8fbbc:	5280000d 	mov	w13, #0x0                   	// #0
   8fbc0:	52800006 	mov	w6, #0x0                   	// #0
   8fbc4:	5280000b 	mov	w11, #0x0                   	// #0
   8fbc8:	52800007 	mov	w7, #0x0                   	// #0
   8fbcc:	5280000c 	mov	w12, #0x0                   	// #0
   8fbd0:	52800005 	mov	w5, #0x0                   	// #0
   8fbd4:	5280000e 	mov	w14, #0x0                   	// #0
   8fbd8:	5280000a 	mov	w10, #0x0                   	// #0
   8fbdc:	910043ef 	add	x15, sp, #0x10
   8fbe0:	52800052 	mov	w18, #0x2                   	// #2
   8fbe4:	52800031 	mov	w17, #0x1                   	// #1
   8fbe8:	52800070 	mov	w16, #0x3                   	// #3
   8fbec:	d503201f 	nop
   8fbf0:	39c00061 	ldrsb	w1, [x3]
   8fbf4:	12000424 	and	w4, w1, #0x3
   8fbf8:	7100049f 	cmp	w4, #0x1
   8fbfc:	54000980 	b.eq	8fd2c <CUSBMouseDevice::DecodeReport()+0x18c>  // b.none
   8fc00:	7100089f 	cmp	w4, #0x2
   8fc04:	54000860 	b.eq	8fd10 <CUSBMouseDevice::DecodeReport()+0x170>  // b.none
   8fc08:	340007c4 	cbz	w4, 8fd00 <CUSBMouseDevice::DecodeReport()+0x160>
   8fc0c:	39c00c69 	ldrsb	w9, [x3, #3]
   8fc10:	51001442 	sub	w2, w2, #0x5
   8fc14:	91001463 	add	x3, x3, #0x5
   8fc18:	12003c42 	and	w2, w2, #0xffff
   8fc1c:	38dfd064 	ldursb	w4, [x3, #-3]
   8fc20:	38dff068 	ldursb	w8, [x3, #-1]
   8fc24:	53103d29 	lsl	w9, w9, #16
   8fc28:	38dfc07e 	ldursb	w30, [x3, #-4]
   8fc2c:	2a042124 	orr	w4, w9, w4, lsl #8
   8fc30:	2a0863c8 	orr	w8, w30, w8, lsl #24
   8fc34:	2a080084 	orr	w4, w4, w8
   8fc38:	121e1421 	and	w1, w1, #0xfc
   8fc3c:	7102803f 	cmp	w1, #0xa0
   8fc40:	54000300 	b.eq	8fca0 <CUSBMouseDevice::DecodeReport()+0x100>  // b.none
   8fc44:	5400020c 	b.gt	8fc84 <CUSBMouseDevice::DecodeReport()+0xe4>
   8fc48:	7100203f 	cmp	w1, #0x8
   8fc4c:	540007a0 	b.eq	8fd40 <CUSBMouseDevice::DecodeReport()+0x1a0>  // b.none
   8fc50:	7102103f 	cmp	w1, #0x84
   8fc54:	54000281 	b.ne	8fca4 <CUSBMouseDevice::DecodeReport()+0x104>  // b.any
   8fc58:	3400026d 	cbz	w13, 8fca4 <CUSBMouseDevice::DecodeReport()+0x104>
   8fc5c:	35000b0c 	cbnz	w12, 8fdbc <CUSBMouseDevice::DecodeReport()+0x21c>
   8fc60:	2a0403ec 	mov	w12, w4
   8fc64:	1100214a 	add	w10, w10, #0x8
   8fc68:	2a0d03e6 	mov	w6, w13
   8fc6c:	35fffc22 	cbnz	w2, 8fbf0 <CUSBMouseDevice::DecodeReport()+0x50>
   8fc70:	11001d4a 	add	w10, w10, #0x7
   8fc74:	53037d4a 	lsr	w10, w10, #3
   8fc78:	290ba80c 	stp	w12, w10, [x0, #92]
   8fc7c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8fc80:	d65f03c0 	ret
   8fc84:	7103003f 	cmp	w1, #0xc0
   8fc88:	540000e1 	b.ne	8fca4 <CUSBMouseDevice::DecodeReport()+0x104>  // b.any
   8fc8c:	710004e7 	subs	w7, w7, #0x1
   8fc90:	540000a1 	b.ne	8fca4 <CUSBMouseDevice::DecodeReport()+0x104>  // b.any
   8fc94:	52800006 	mov	w6, #0x0                   	// #0
   8fc98:	35fffac2 	cbnz	w2, 8fbf0 <CUSBMouseDevice::DecodeReport()+0x50>
   8fc9c:	17fffff5 	b	8fc70 <CUSBMouseDevice::DecodeReport()+0xd0>
   8fca0:	110004e7 	add	w7, w7, #0x1
   8fca4:	34fffe46 	cbz	w6, 8fc6c <CUSBMouseDevice::DecodeReport()+0xcc>
   8fca8:	7102003f 	cmp	w1, #0x80
   8fcac:	54000780 	b.eq	8fd9c <CUSBMouseDevice::DecodeReport()+0x1fc>  // b.none
   8fcb0:	5400020c 	b.gt	8fcf0 <CUSBMouseDevice::DecodeReport()+0x150>
   8fcb4:	7101d03f 	cmp	w1, #0x74
   8fcb8:	540006c0 	b.eq	8fd90 <CUSBMouseDevice::DecodeReport()+0x1f0>  // b.none
   8fcbc:	54fffd8c 	b.gt	8fc6c <CUSBMouseDevice::DecodeReport()+0xcc>
   8fcc0:	7100103f 	cmp	w1, #0x4
   8fcc4:	540000e1 	b.ne	8fce0 <CUSBMouseDevice::DecodeReport()+0x140>  // b.any
   8fcc8:	7100249f 	cmp	w4, #0x9
   8fccc:	54fffd01 	b.ne	8fc6c <CUSBMouseDevice::DecodeReport()+0xcc>  // b.any
   8fcd0:	b82b59ff 	str	wzr, [x15, w11, uxtw #2]
   8fcd4:	1100056b 	add	w11, w11, #0x1
   8fcd8:	35fff8c2 	cbnz	w2, 8fbf0 <CUSBMouseDevice::DecodeReport()+0x50>
   8fcdc:	17ffffe5 	b	8fc70 <CUSBMouseDevice::DecodeReport()+0xd0>
   8fce0:	7100203f 	cmp	w1, #0x8
   8fce4:	54000400 	b.eq	8fd64 <CUSBMouseDevice::DecodeReport()+0x1c4>  // b.none
   8fce8:	35fff842 	cbnz	w2, 8fbf0 <CUSBMouseDevice::DecodeReport()+0x50>
   8fcec:	17ffffe1 	b	8fc70 <CUSBMouseDevice::DecodeReport()+0xd0>
   8fcf0:	7102503f 	cmp	w1, #0x94
   8fcf4:	1a8410a5 	csel	w5, w5, w4, ne	// ne = any
   8fcf8:	35fff7c2 	cbnz	w2, 8fbf0 <CUSBMouseDevice::DecodeReport()+0x50>
   8fcfc:	17ffffdd 	b	8fc70 <CUSBMouseDevice::DecodeReport()+0xd0>
   8fd00:	51000442 	sub	w2, w2, #0x1
   8fd04:	91000463 	add	x3, x3, #0x1
   8fd08:	12003c42 	and	w2, w2, #0xffff
   8fd0c:	17ffffcb 	b	8fc38 <CUSBMouseDevice::DecodeReport()+0x98>
   8fd10:	39400468 	ldrb	w8, [x3, #1]
   8fd14:	51000c42 	sub	w2, w2, #0x3
   8fd18:	91000c63 	add	x3, x3, #0x3
   8fd1c:	12003c42 	and	w2, w2, #0xffff
   8fd20:	38dff064 	ldursb	w4, [x3, #-1]
   8fd24:	2a042104 	orr	w4, w8, w4, lsl #8
   8fd28:	17ffffc4 	b	8fc38 <CUSBMouseDevice::DecodeReport()+0x98>
   8fd2c:	51000842 	sub	w2, w2, #0x2
   8fd30:	39c00464 	ldrsb	w4, [x3, #1]
   8fd34:	91000863 	add	x3, x3, #0x2
   8fd38:	12003c42 	and	w2, w2, #0xffff
   8fd3c:	17ffffbf 	b	8fc38 <CUSBMouseDevice::DecodeReport()+0x98>
   8fd40:	7100089f 	cmp	w4, #0x2
   8fd44:	54000380 	b.eq	8fdb4 <CUSBMouseDevice::DecodeReport()+0x214>  // b.none
   8fd48:	7100049f 	cmp	w4, #0x1
   8fd4c:	1a9f17e1 	cset	w1, eq	// eq = none
   8fd50:	7100019f 	cmp	w12, #0x0
   8fd54:	1a9f17e8 	cset	w8, eq	// eq = none
   8fd58:	6a080021 	ands	w1, w1, w8
   8fd5c:	540004c1 	b.ne	8fdf4 <CUSBMouseDevice::DecodeReport()+0x254>  // b.any
   8fd60:	34fff866 	cbz	w6, 8fc6c <CUSBMouseDevice::DecodeReport()+0xcc>
   8fd64:	7100c49f 	cmp	w4, #0x31
   8fd68:	540003c0 	b.eq	8fde0 <CUSBMouseDevice::DecodeReport()+0x240>  // b.none
   8fd6c:	7100e09f 	cmp	w4, #0x38
   8fd70:	540002e0 	b.eq	8fdcc <CUSBMouseDevice::DecodeReport()+0x22c>  // b.none
   8fd74:	7100c09f 	cmp	w4, #0x30
   8fd78:	52800026 	mov	w6, #0x1                   	// #1
   8fd7c:	54fff781 	b.ne	8fc6c <CUSBMouseDevice::DecodeReport()+0xcc>  // b.any
   8fd80:	b82b59f1 	str	w17, [x15, w11, uxtw #2]
   8fd84:	0b06016b 	add	w11, w11, w6
   8fd88:	35fff342 	cbnz	w2, 8fbf0 <CUSBMouseDevice::DecodeReport()+0x50>
   8fd8c:	17ffffb9 	b	8fc70 <CUSBMouseDevice::DecodeReport()+0xd0>
   8fd90:	2a0403ee 	mov	w14, w4
   8fd94:	35fff2e2 	cbnz	w2, 8fbf0 <CUSBMouseDevice::DecodeReport()+0x50>
   8fd98:	17ffffb6 	b	8fc70 <CUSBMouseDevice::DecodeReport()+0xd0>
   8fd9c:	12000484 	and	w4, w4, #0x3
   8fda0:	7100089f 	cmp	w4, #0x2
   8fda4:	54000300 	b.eq	8fe04 <CUSBMouseDevice::DecodeReport()+0x264>  // b.none
   8fda8:	1b0529ca 	madd	w10, w14, w5, w10
   8fdac:	35fff222 	cbnz	w2, 8fbf0 <CUSBMouseDevice::DecodeReport()+0x50>
   8fdb0:	17ffffb0 	b	8fc70 <CUSBMouseDevice::DecodeReport()+0xd0>
   8fdb4:	5280002d 	mov	w13, #0x1                   	// #1
   8fdb8:	17ffffea 	b	8fd60 <CUSBMouseDevice::DecodeReport()+0x1c0>
   8fdbc:	6b0c009f 	cmp	w4, w12
   8fdc0:	1a9f17e6 	cset	w6, eq	// eq = none
   8fdc4:	35fff162 	cbnz	w2, 8fbf0 <CUSBMouseDevice::DecodeReport()+0x50>
   8fdc8:	17ffffaa 	b	8fc70 <CUSBMouseDevice::DecodeReport()+0xd0>
   8fdcc:	52800026 	mov	w6, #0x1                   	// #1
   8fdd0:	b82b59f0 	str	w16, [x15, w11, uxtw #2]
   8fdd4:	0b06016b 	add	w11, w11, w6
   8fdd8:	35fff0c2 	cbnz	w2, 8fbf0 <CUSBMouseDevice::DecodeReport()+0x50>
   8fddc:	17ffffa5 	b	8fc70 <CUSBMouseDevice::DecodeReport()+0xd0>
   8fde0:	52800026 	mov	w6, #0x1                   	// #1
   8fde4:	b82b59f2 	str	w18, [x15, w11, uxtw #2]
   8fde8:	0b06016b 	add	w11, w11, w6
   8fdec:	35fff022 	cbnz	w2, 8fbf0 <CUSBMouseDevice::DecodeReport()+0x50>
   8fdf0:	17ffffa0 	b	8fc70 <CUSBMouseDevice::DecodeReport()+0xd0>
   8fdf4:	2a0103e6 	mov	w6, w1
   8fdf8:	5280000c 	mov	w12, #0x0                   	// #0
   8fdfc:	35ffefa2 	cbnz	w2, 8fbf0 <CUSBMouseDevice::DecodeReport()+0x50>
   8fe00:	17ffff9c 	b	8fc70 <CUSBMouseDevice::DecodeReport()+0xd0>
   8fe04:	71000d7f 	cmp	w11, #0x3
   8fe08:	54000488 	b.hi	8fe98 <CUSBMouseDevice::DecodeReport()+0x2f8>  // b.pmore
   8fe0c:	910043e4 	add	x4, sp, #0x10
   8fe10:	2a0a03e9 	mov	w9, w10
   8fe14:	52800008 	mov	w8, #0x0                   	// #0
   8fe18:	3500016b 	cbnz	w11, 8fe44 <CUSBMouseDevice::DecodeReport()+0x2a4>
   8fe1c:	14000013 	b	8fe68 <CUSBMouseDevice::DecodeReport()+0x2c8>
   8fe20:	7100003f 	cmp	w1, #0x0
   8fe24:	11000508 	add	w8, w8, #0x1
   8fe28:	1a8511de 	csel	w30, w14, w5, ne	// ne = any
   8fe2c:	8b214c01 	add	x1, x0, w1, uxtw #3
   8fe30:	6b08017f 	cmp	w11, w8
   8fe34:	290ca43e 	stp	w30, w9, [x1, #100]
   8fe38:	91001084 	add	x4, x4, #0x4
   8fe3c:	0b1e0129 	add	w9, w9, w30
   8fe40:	54000140 	b.eq	8fe68 <CUSBMouseDevice::DecodeReport()+0x2c8>  // b.none
   8fe44:	b9400081 	ldr	w1, [x4]
   8fe48:	71000c3f 	cmp	w1, #0x3
   8fe4c:	54fffea9 	b.ls	8fe20 <CUSBMouseDevice::DecodeReport()+0x280>  // b.plast
   8fe50:	90000121 	adrp	x1, b3000 <_etext+0x2158>
   8fe54:	90000120 	adrp	x0, b3000 <_etext+0x2158>
   8fe58:	91004021 	add	x1, x1, #0x10
   8fe5c:	91010000 	add	x0, x0, #0x40
   8fe60:	52802d22 	mov	w2, #0x169                 	// #361
   8fe64:	940037b7 	bl	9dd40 <assertion_failed>
   8fe68:	1b0529ca 	madd	w10, w14, w5, w10
   8fe6c:	5280000b 	mov	w11, #0x0                   	// #0
   8fe70:	17ffffcf 	b	8fdac <CUSBMouseDevice::DecodeReport()+0x20c>
   8fe74:	90000121 	adrp	x1, b3000 <_etext+0x2158>
   8fe78:	f0000100 	adrp	x0, b2000 <_etext+0x1158>
   8fe7c:	91004021 	add	x1, x1, #0x10
   8fe80:	9130e000 	add	x0, x0, #0xc38
   8fe84:	52801d62 	mov	w2, #0xeb                  	// #235
   8fe88:	940037ae 	bl	9dd40 <assertion_failed>
   8fe8c:	5280000a 	mov	w10, #0x0                   	// #0
   8fe90:	5280000c 	mov	w12, #0x0                   	// #0
   8fe94:	17ffff79 	b	8fc78 <CUSBMouseDevice::DecodeReport()+0xd8>
   8fe98:	90000121 	adrp	x1, b3000 <_etext+0x2158>
   8fe9c:	90000120 	adrp	x0, b3000 <_etext+0x2158>
   8fea0:	91004021 	add	x1, x1, #0x10
   8fea4:	91008000 	add	x0, x0, #0x20
   8fea8:	52802ca2 	mov	w2, #0x165                 	// #357
   8feac:	940037a5 	bl	9dd40 <assertion_failed>

000000000008feb0 <CUSBMouseDevice::Configure()>:
   8feb0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8feb4:	52800421 	mov	w1, #0x21                  	// #33
   8feb8:	910003fd 	mov	x29, sp
   8febc:	a90153f3 	stp	x19, x20, [sp, #16]
   8fec0:	aa0003f3 	mov	x19, x0
   8fec4:	97ffea87 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   8fec8:	b40000c0 	cbz	x0, 8fee0 <CUSBMouseDevice::Configure()+0x30>
   8fecc:	aa0003f4 	mov	x20, x0
   8fed0:	39401c00 	ldrb	w0, [x0, #7]
   8fed4:	39402281 	ldrb	w1, [x20, #8]
   8fed8:	2a012001 	orr	w1, w0, w1, lsl #8
   8fedc:	35000141 	cbnz	w1, 8ff04 <CUSBMouseDevice::Configure()+0x54>
   8fee0:	f0000121 	adrp	x1, b6000 <From+0x98>
   8fee4:	913a8021 	add	x1, x1, #0xea0
   8fee8:	aa1303e0 	mov	x0, x19
   8feec:	52800014 	mov	w20, #0x0                   	// #0
   8fef0:	97ffea88 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   8fef4:	2a1403e0 	mov	w0, w20
   8fef8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8fefc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8ff00:	d65f03c0 	ret
   8ff04:	a9025bf5 	stp	x21, x22, [sp, #32]
   8ff08:	92403c20 	and	x0, x1, #0xffff
   8ff0c:	a90363f7 	stp	x23, x24, [sp, #48]
   8ff10:	7900b261 	strh	w1, [x19, #88]
   8ff14:	940060db 	bl	a8280 <operator new[](unsigned long)>
   8ff18:	aa0003e1 	mov	x1, x0
   8ff1c:	aa1303e0 	mov	x0, x19
   8ff20:	f9002a61 	str	x1, [x19, #80]
   8ff24:	97ffea63 	bl	8a8b0 <CUSBFunction::GetHost() const>
   8ff28:	aa0003f5 	mov	x21, x0
   8ff2c:	aa1303e0 	mov	x0, x19
   8ff30:	97ffea54 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   8ff34:	39401a97 	ldrb	w23, [x20, #6]
   8ff38:	aa0003e1 	mov	x1, x0
   8ff3c:	aa1303e0 	mov	x0, x19
   8ff40:	aa0103f4 	mov	x20, x1
   8ff44:	7940b278 	ldrh	w24, [x19, #88]
   8ff48:	f9402a76 	ldr	x22, [x19, #80]
   8ff4c:	97ffeac5 	bl	8aa60 <CUSBFunction::GetInterfaceNumber() const>
   8ff50:	12001c07 	and	w7, w0, #0xff
   8ff54:	aa1403e1 	mov	x1, x20
   8ff58:	2a1803e5 	mov	w5, w24
   8ff5c:	2a1703e2 	mov	w2, w23
   8ff60:	aa1503e0 	mov	x0, x21
   8ff64:	12800fc6 	mov	w6, #0xffffff81            	// #-127
   8ff68:	aa1603e4 	mov	x4, x22
   8ff6c:	52800003 	mov	w3, #0x0                   	// #0
   8ff70:	97ffc470 	bl	81130 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   8ff74:	7940b261 	ldrh	w1, [x19, #88]
   8ff78:	6b01001f 	cmp	w0, w1
   8ff7c:	540001e0 	b.eq	8ffb8 <CUSBMouseDevice::Configure()+0x108>  // b.none
   8ff80:	94003ea4 	bl	9fa10 <CLogger::Get()>
   8ff84:	f0000103 	adrp	x3, b2000 <_etext+0x1158>
   8ff88:	f0000121 	adrp	x1, b6000 <From+0x98>
   8ff8c:	911d0063 	add	x3, x3, #0x740
   8ff90:	913a8021 	add	x1, x1, #0xea0
   8ff94:	52800022 	mov	w2, #0x1                   	// #1
   8ff98:	52800014 	mov	w20, #0x0                   	// #0
   8ff9c:	94004089 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8ffa0:	2a1403e0 	mov	w0, w20
   8ffa4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ffa8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ffac:	a94363f7 	ldp	x23, x24, [sp, #48]
   8ffb0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8ffb4:	d65f03c0 	ret
   8ffb8:	aa1303e0 	mov	x0, x19
   8ffbc:	52800014 	mov	w20, #0x0                   	// #0
   8ffc0:	97fffef8 	bl	8fba0 <CUSBMouseDevice::DecodeReport()>
   8ffc4:	b9406261 	ldr	w1, [x19, #96]
   8ffc8:	350000e1 	cbnz	w1, 8ffe4 <CUSBMouseDevice::Configure()+0x134>
   8ffcc:	2a1403e0 	mov	w0, w20
   8ffd0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ffd4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ffd8:	a94363f7 	ldp	x23, x24, [sp, #48]
   8ffdc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8ffe0:	d65f03c0 	ret
   8ffe4:	aa1303e0 	mov	x0, x19
   8ffe8:	97fff64e 	bl	8d920 <CUSBHIDDevice::ConfigureHID(unsigned int)>
   8ffec:	72001c14 	ands	w20, w0, #0xff
   8fff0:	54000200 	b.eq	90030 <CUSBMouseDevice::Configure()+0x180>  // b.none
   8fff4:	d2800a00 	mov	x0, #0x50                  	// #80
   8fff8:	9400609a 	bl	a8260 <operator new(unsigned long)>
   8fffc:	b9407e62 	ldr	w2, [x19, #124]
   90000:	aa0003f4 	mov	x20, x0
   90004:	b9406661 	ldr	w1, [x19, #100]
   90008:	7100005f 	cmp	w2, #0x0
   9000c:	1a9f07e2 	cset	w2, ne	// ne = any
   90010:	94003288 	bl	9ca30 <CMouseDevice::CMouseDevice(unsigned int, bool)>
   90014:	aa1303e0 	mov	x0, x19
   90018:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9001c:	a94363f7 	ldp	x23, x24, [sp, #48]
   90020:	f9002674 	str	x20, [x19, #72]
   90024:	a94153f3 	ldp	x19, x20, [sp, #16]
   90028:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9002c:	17fff77d 	b	8de20 <CUSBHIDDevice::StartRequest()>
   90030:	94003e78 	bl	9fa10 <CLogger::Get()>
   90034:	b0000103 	adrp	x3, b1000 <_etext+0x158>
   90038:	d0000121 	adrp	x1, b6000 <From+0x98>
   9003c:	9100a063 	add	x3, x3, #0x28
   90040:	913a8021 	add	x1, x1, #0xea0
   90044:	52800022 	mov	w2, #0x1                   	// #1
   90048:	9400405e 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9004c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   90050:	a94363f7 	ldp	x23, x24, [sp, #48]
   90054:	17ffffa8 	b	8fef4 <CUSBMouseDevice::Configure()+0x44>
	...

0000000000090060 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   90060:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   90064:	910003fd 	mov	x29, sp
   90068:	d0000121 	adrp	x1, b6000 <From+0x98>
   9006c:	913ae021 	add	x1, x1, #0xeb8
   90070:	a90153f3 	stp	x19, x20, [sp, #16]
   90074:	aa0003f3 	mov	x19, x0
   90078:	b9404000 	ldr	w0, [x0, #64]
   9007c:	f9000261 	str	x1, [x19]
   90080:	350002a0 	cbnz	w0, 900d4 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x74>
   90084:	f9401e74 	ldr	x20, [x19, #56]
   90088:	b40000d4 	cbz	x20, 900a0 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x40>
   9008c:	aa1403e0 	mov	x0, x20
   90090:	97ffe894 	bl	8a2e0 <CUSBEndpoint::~CUSBEndpoint()>
   90094:	aa1403e0 	mov	x0, x20
   90098:	d2800401 	mov	x1, #0x20                  	// #32
   9009c:	94006099 	bl	a8300 <operator delete(void*, unsigned long)>
   900a0:	f9001e7f 	str	xzr, [x19, #56]
   900a4:	f9401a74 	ldr	x20, [x19, #48]
   900a8:	b40000d4 	cbz	x20, 900c0 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x60>
   900ac:	aa1403e0 	mov	x0, x20
   900b0:	97ffe88c 	bl	8a2e0 <CUSBEndpoint::~CUSBEndpoint()>
   900b4:	aa1403e0 	mov	x0, x20
   900b8:	d2800401 	mov	x1, #0x20                  	// #32
   900bc:	94006091 	bl	a8300 <operator delete(void*, unsigned long)>
   900c0:	aa1303e0 	mov	x0, x19
   900c4:	f9001a7f 	str	xzr, [x19, #48]
   900c8:	a94153f3 	ldp	x19, x20, [sp, #16]
   900cc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   900d0:	17ffe8d8 	b	8a430 <CUSBFunction::~CUSBFunction()>
   900d4:	94003aff 	bl	9ecd0 <CDeviceNameService::Get()>
   900d8:	b9404262 	ldr	w2, [x19, #64]
   900dc:	d0000121 	adrp	x1, b6000 <From+0x98>
   900e0:	52800003 	mov	w3, #0x0                   	// #0
   900e4:	913c6021 	add	x1, x1, #0xf18
   900e8:	94003b26 	bl	9ed80 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   900ec:	b9404261 	ldr	w1, [x19, #64]
   900f0:	b0000160 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   900f4:	91032000 	add	x0, x0, #0xc8
   900f8:	94006236 	bl	a89d0 <CNumberPool::FreeNumber(unsigned int)>
   900fc:	17ffffe2 	b	90084 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x24>

0000000000090100 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   90100:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   90104:	910003fd 	mov	x29, sp
   90108:	f9000bf3 	str	x19, [sp, #16]
   9010c:	aa0003f3 	mov	x19, x0
   90110:	97ffffd4 	bl	90060 <CUSBPrinterDevice::~CUSBPrinterDevice()>
   90114:	aa1303e0 	mov	x0, x19
   90118:	d2800901 	mov	x1, #0x48                  	// #72
   9011c:	f9400bf3 	ldr	x19, [sp, #16]
   90120:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90124:	14006077 	b	a8300 <operator delete(void*, unsigned long)>
   90128:	d503201f 	nop
   9012c:	d503201f 	nop

0000000000090130 <CUSBPrinterDevice::Write(void const*, unsigned long)>:
   90130:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   90134:	910003fd 	mov	x29, sp
   90138:	a90153f3 	stp	x19, x20, [sp, #16]
   9013c:	f90013f5 	str	x21, [sp, #32]
   90140:	b4000241 	cbz	x1, 90188 <CUSBPrinterDevice::Write(void const*, unsigned long)+0x58>
   90144:	aa0203f3 	mov	x19, x2
   90148:	b40002c2 	cbz	x2, 901a0 <CUSBPrinterDevice::Write(void const*, unsigned long)+0x70>
   9014c:	aa0103f4 	mov	x20, x1
   90150:	aa0003f5 	mov	x21, x0
   90154:	97ffe9d7 	bl	8a8b0 <CUSBFunction::GetHost() const>
   90158:	b4000300 	cbz	x0, 901b8 <CUSBPrinterDevice::Write(void const*, unsigned long)+0x88>
   9015c:	aa1403e2 	mov	x2, x20
   90160:	2a1303e3 	mov	w3, w19
   90164:	f9401ea1 	ldr	x1, [x21, #56]
   90168:	52800004 	mov	w4, #0x0                   	// #0
   9016c:	97ffc425 	bl	81200 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   90170:	7100001f 	cmp	w0, #0x0
   90174:	5a9fa260 	csinv	w0, w19, wzr, ge	// ge = tcont
   90178:	a94153f3 	ldp	x19, x20, [sp, #16]
   9017c:	f94013f5 	ldr	x21, [sp, #32]
   90180:	a8c37bfd 	ldp	x29, x30, [sp], #48
   90184:	d65f03c0 	ret
   90188:	f0000101 	adrp	x1, b3000 <_etext+0x2158>
   9018c:	b0000100 	adrp	x0, b1000 <_etext+0x158>
   90190:	91016021 	add	x1, x1, #0x58
   90194:	911f6000 	add	x0, x0, #0x7d8
   90198:	52801102 	mov	w2, #0x88                  	// #136
   9019c:	940036e9 	bl	9dd40 <assertion_failed>
   901a0:	f0000101 	adrp	x1, b3000 <_etext+0x2158>
   901a4:	f0000100 	adrp	x0, b3000 <_etext+0x2158>
   901a8:	91016021 	add	x1, x1, #0x58
   901ac:	9101a000 	add	x0, x0, #0x68
   901b0:	52801122 	mov	w2, #0x89                  	// #137
   901b4:	940036e3 	bl	9dd40 <assertion_failed>
   901b8:	f0000101 	adrp	x1, b3000 <_etext+0x2158>
   901bc:	b0000100 	adrp	x0, b1000 <_etext+0x158>
   901c0:	91016021 	add	x1, x1, #0x58
   901c4:	910cc000 	add	x0, x0, #0x330
   901c8:	52801182 	mov	w2, #0x8c                  	// #140
   901cc:	940036dd 	bl	9dd40 <assertion_failed>

00000000000901d0 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>:
   901d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   901d4:	910003fd 	mov	x29, sp
   901d8:	f9000bf3 	str	x19, [sp, #16]
   901dc:	aa0003f3 	mov	x19, x0
   901e0:	97ffe938 	bl	8a6c0 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   901e4:	d0000120 	adrp	x0, b6000 <From+0x98>
   901e8:	913ae000 	add	x0, x0, #0xeb8
   901ec:	b9002a7f 	str	wzr, [x19, #40]
   901f0:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   901f4:	f9000260 	str	x0, [x19]
   901f8:	b900427f 	str	wzr, [x19, #64]
   901fc:	f9400bf3 	ldr	x19, [sp, #16]
   90200:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90204:	d65f03c0 	ret
   90208:	d503201f 	nop
   9020c:	d503201f 	nop

0000000000090210 <CUSBPrinterDevice::Configure()>:
   90210:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   90214:	910003fd 	mov	x29, sp
   90218:	a90153f3 	stp	x19, x20, [sp, #16]
   9021c:	aa0003f4 	mov	x20, x0
   90220:	a9025bf5 	stp	x21, x22, [sp, #32]
   90224:	97ffea33 	bl	8aaf0 <CUSBFunction::GetInterfaceProtocol() const>
   90228:	12001c00 	and	w0, w0, #0xff
   9022c:	321e73e1 	mov	w1, #0x7ffffffc            	// #2147483644
   90230:	51000c02 	sub	w2, w0, #0x3
   90234:	6b01005f 	cmp	w2, w1
   90238:	1a9f87e1 	cset	w1, ls	// ls = plast
   9023c:	b9002a80 	str	w0, [x20, #40]
   90240:	7100001f 	cmp	w0, #0x0
   90244:	1a9f17e0 	cset	w0, eq	// eq = none
   90248:	2a000035 	orr	w21, w1, w0
   9024c:	35000995 	cbnz	w21, 9037c <CUSBPrinterDevice::Configure()+0x16c>
   90250:	aa1403e0 	mov	x0, x20
   90254:	97ffe973 	bl	8a820 <CUSBFunction::GetNumEndpoints() const>
   90258:	b9402a81 	ldr	w1, [x20, #40]
   9025c:	7100043f 	cmp	w1, #0x1
   90260:	1a9f07e1 	cset	w1, ne	// ne = any
   90264:	11000421 	add	w1, w1, #0x1
   90268:	6b20003f 	cmp	w1, w0, uxtb
   9026c:	540000cd 	b.le	90284 <CUSBPrinterDevice::Configure()+0x74>
   90270:	1400002a 	b	90318 <CUSBPrinterDevice::Configure()+0x108>
   90274:	39400e61 	ldrb	w1, [x19, #3]
   90278:	12001421 	and	w1, w1, #0x3f
   9027c:	7100083f 	cmp	w1, #0x2
   90280:	54000600 	b.eq	90340 <CUSBPrinterDevice::Configure()+0x130>  // b.none
   90284:	528000a1 	mov	w1, #0x5                   	// #5
   90288:	aa1403e0 	mov	x0, x20
   9028c:	97ffe995 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   90290:	aa0003f3 	mov	x19, x0
   90294:	b5ffff00 	cbnz	x0, 90274 <CUSBPrinterDevice::Configure()+0x64>
   90298:	f9401e80 	ldr	x0, [x20, #56]
   9029c:	b40003e0 	cbz	x0, 90318 <CUSBPrinterDevice::Configure()+0x108>
   902a0:	b9402a80 	ldr	w0, [x20, #40]
   902a4:	7100041f 	cmp	w0, #0x1
   902a8:	54000060 	b.eq	902b4 <CUSBPrinterDevice::Configure()+0xa4>  // b.none
   902ac:	f9401a80 	ldr	x0, [x20, #48]
   902b0:	b4000340 	cbz	x0, 90318 <CUSBPrinterDevice::Configure()+0x108>
   902b4:	aa1403e0 	mov	x0, x20
   902b8:	97ffe896 	bl	8a510 <CUSBFunction::Configure()>
   902bc:	72001c15 	ands	w21, w0, #0xff
   902c0:	54000960 	b.eq	903ec <CUSBPrinterDevice::Configure()+0x1dc>  // b.none
   902c4:	b9404280 	ldr	w0, [x20, #64]
   902c8:	35000a40 	cbnz	w0, 90410 <CUSBPrinterDevice::Configure()+0x200>
   902cc:	d0000133 	adrp	x19, b6000 <From+0x98>
   902d0:	913c6273 	add	x19, x19, #0xf18
   902d4:	b0000160 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   902d8:	91002262 	add	x2, x19, #0x8
   902dc:	52800021 	mov	w1, #0x1                   	// #1
   902e0:	91032000 	add	x0, x0, #0xc8
   902e4:	9400618b 	bl	a8910 <CNumberPool::AllocateNumber(bool, char const*)>
   902e8:	b9004280 	str	w0, [x20, #64]
   902ec:	94003a79 	bl	9ecd0 <CDeviceNameService::Get()>
   902f0:	b9404282 	ldr	w2, [x20, #64]
   902f4:	aa1303e1 	mov	x1, x19
   902f8:	52800004 	mov	w4, #0x0                   	// #0
   902fc:	aa1403e3 	mov	x3, x20
   90300:	94003a80 	bl	9ed00 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   90304:	2a1503e0 	mov	w0, w21
   90308:	a94153f3 	ldp	x19, x20, [sp, #16]
   9030c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   90310:	a8c37bfd 	ldp	x29, x30, [sp], #48
   90314:	d65f03c0 	ret
   90318:	d0000121 	adrp	x1, b6000 <From+0x98>
   9031c:	913c6021 	add	x1, x1, #0xf18
   90320:	aa1403e0 	mov	x0, x20
   90324:	91002021 	add	x1, x1, #0x8
   90328:	97ffe97a 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   9032c:	2a1503e0 	mov	w0, w21
   90330:	a94153f3 	ldp	x19, x20, [sp, #16]
   90334:	a9425bf5 	ldp	x21, x22, [sp, #32]
   90338:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9033c:	d65f03c0 	ret
   90340:	39c00a60 	ldrsb	w0, [x19, #2]
   90344:	37f803a0 	tbnz	w0, #31, 903b8 <CUSBPrinterDevice::Configure()+0x1a8>
   90348:	f9401e80 	ldr	x0, [x20, #56]
   9034c:	b5fffe60 	cbnz	x0, 90318 <CUSBPrinterDevice::Configure()+0x108>
   90350:	aa1403e0 	mov	x0, x20
   90354:	97ffe93f 	bl	8a850 <CUSBFunction::GetDevice() const>
   90358:	aa0003f6 	mov	x22, x0
   9035c:	d2800400 	mov	x0, #0x20                  	// #32
   90360:	94005fc0 	bl	a8260 <operator new(unsigned long)>
   90364:	aa1603e1 	mov	x1, x22
   90368:	aa0003f6 	mov	x22, x0
   9036c:	aa1303e2 	mov	x2, x19
   90370:	97ffe770 	bl	8a130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   90374:	f9001e96 	str	x22, [x20, #56]
   90378:	17ffffc3 	b	90284 <CUSBPrinterDevice::Configure()+0x74>
   9037c:	94003da5 	bl	9fa10 <CLogger::Get()>
   90380:	d0000121 	adrp	x1, b6000 <From+0x98>
   90384:	913c6021 	add	x1, x1, #0xf18
   90388:	b9402a84 	ldr	w4, [x20, #40]
   9038c:	f0000103 	adrp	x3, b3000 <_etext+0x2158>
   90390:	91002021 	add	x1, x1, #0x8
   90394:	9101e063 	add	x3, x3, #0x78
   90398:	52800022 	mov	w2, #0x1                   	// #1
   9039c:	94003f89 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   903a0:	52800015 	mov	w21, #0x0                   	// #0
   903a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   903a8:	2a1503e0 	mov	w0, w21
   903ac:	a9425bf5 	ldp	x21, x22, [sp, #32]
   903b0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   903b4:	d65f03c0 	ret
   903b8:	f9401a80 	ldr	x0, [x20, #48]
   903bc:	b5fffae0 	cbnz	x0, 90318 <CUSBPrinterDevice::Configure()+0x108>
   903c0:	aa1403e0 	mov	x0, x20
   903c4:	97ffe923 	bl	8a850 <CUSBFunction::GetDevice() const>
   903c8:	aa0003f6 	mov	x22, x0
   903cc:	d2800400 	mov	x0, #0x20                  	// #32
   903d0:	94005fa4 	bl	a8260 <operator new(unsigned long)>
   903d4:	aa1603e1 	mov	x1, x22
   903d8:	aa0003f6 	mov	x22, x0
   903dc:	aa1303e2 	mov	x2, x19
   903e0:	97ffe754 	bl	8a130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   903e4:	f9001a96 	str	x22, [x20, #48]
   903e8:	17ffffa7 	b	90284 <CUSBPrinterDevice::Configure()+0x74>
   903ec:	94003d89 	bl	9fa10 <CLogger::Get()>
   903f0:	d0000121 	adrp	x1, b6000 <From+0x98>
   903f4:	913c6021 	add	x1, x1, #0xf18
   903f8:	b0000103 	adrp	x3, b1000 <_etext+0x158>
   903fc:	91002021 	add	x1, x1, #0x8
   90400:	9112c063 	add	x3, x3, #0x4b0
   90404:	52800022 	mov	w2, #0x1                   	// #1
   90408:	94003f6e 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9040c:	17ffffbe 	b	90304 <CUSBPrinterDevice::Configure()+0xf4>
   90410:	f0000101 	adrp	x1, b3000 <_etext+0x2158>
   90414:	f0000100 	adrp	x0, b3000 <_etext+0x2158>
   90418:	91016021 	add	x1, x1, #0x58
   9041c:	91026000 	add	x0, x0, #0x98
   90420:	52800fc2 	mov	w2, #0x7e                  	// #126
   90424:	94003647 	bl	9dd40 <assertion_failed>
	...

0000000000090430 <_GLOBAL__sub_I__ZN17CUSBPrinterDevice18s_DeviceNumberPoolE>:
   90430:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   90434:	910003fd 	mov	x29, sp
   90438:	528007e2 	mov	w2, #0x3f                  	// #63
   9043c:	52800021 	mov	w1, #0x1                   	// #1
   90440:	f9000bf3 	str	x19, [sp, #16]
   90444:	b0000173 	adrp	x19, bd000 <CNetDevice::s_SpeedString+0x18>
   90448:	91032273 	add	x19, x19, #0xc8
   9044c:	aa1303e0 	mov	x0, x19
   90450:	94006114 	bl	a88a0 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   90454:	b0000162 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   90458:	900000c0 	adrp	x0, a8000 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x20>
   9045c:	aa1303e1 	mov	x1, x19
   90460:	91074042 	add	x2, x2, #0x1d0
   90464:	f9400bf3 	ldr	x19, [sp, #16]
   90468:	91240000 	add	x0, x0, #0x900
   9046c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90470:	140056d4 	b	a5fc0 <__cxa_atexit>
	...

0000000000090480 <CUSBString::CUSBString(CUSBDevice*)>:
   90480:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   90484:	910003fd 	mov	x29, sp
   90488:	a90153f3 	stp	x19, x20, [sp, #16]
   9048c:	aa0003f3 	mov	x19, x0
   90490:	d2800400 	mov	x0, #0x20                  	// #32
   90494:	a9007e61 	stp	x1, xzr, [x19]
   90498:	94005f72 	bl	a8260 <operator new(unsigned long)>
   9049c:	aa0003f4 	mov	x20, x0
   904a0:	9400506c 	bl	a4650 <CString::CString()>
   904a4:	f9000a74 	str	x20, [x19, #16]
   904a8:	f9400260 	ldr	x0, [x19]
   904ac:	b4000080 	cbz	x0, 904bc <CUSBString::CUSBString(CUSBDevice*)+0x3c>
   904b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   904b4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   904b8:	d65f03c0 	ret
   904bc:	f0000101 	adrp	x1, b3000 <_etext+0x2158>
   904c0:	b0000100 	adrp	x0, b1000 <_etext+0x158>
   904c4:	9102c021 	add	x1, x1, #0xb0
   904c8:	91210000 	add	x0, x0, #0x840
   904cc:	52800462 	mov	w2, #0x23                  	// #35
   904d0:	9400361c 	bl	9dd40 <assertion_failed>
   904d4:	d503201f 	nop
   904d8:	d503201f 	nop
   904dc:	d503201f 	nop

00000000000904e0 <CUSBString::CUSBString(CUSBString*)>:
   904e0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   904e4:	910003fd 	mov	x29, sp
   904e8:	a90153f3 	stp	x19, x20, [sp, #16]
   904ec:	aa0003f3 	mov	x19, x0
   904f0:	d2800400 	mov	x0, #0x20                  	// #32
   904f4:	aa0103f4 	mov	x20, x1
   904f8:	f90013f5 	str	x21, [sp, #32]
   904fc:	f900067f 	str	xzr, [x19, #8]
   90500:	94005f58 	bl	a8260 <operator new(unsigned long)>
   90504:	aa0003f5 	mov	x21, x0
   90508:	94005052 	bl	a4650 <CString::CString()>
   9050c:	f9000a75 	str	x21, [x19, #16]
   90510:	b4000334 	cbz	x20, 90574 <CUSBString::CUSBString(CUSBString*)+0x94>
   90514:	a9400281 	ldp	x1, x0, [x20]
   90518:	f9000261 	str	x1, [x19]
   9051c:	b4000120 	cbz	x0, 90540 <CUSBString::CUSBString(CUSBString*)+0x60>
   90520:	39400000 	ldrb	w0, [x0]
   90524:	94005f57 	bl	a8280 <operator new[](unsigned long)>
   90528:	f9400681 	ldr	x1, [x20, #8]
   9052c:	f9000660 	str	x0, [x19, #8]
   90530:	39400022 	ldrb	w2, [x1]
   90534:	94005cc5 	bl	a7848 <memcpy>
   90538:	f9400a60 	ldr	x0, [x19, #16]
   9053c:	b4000100 	cbz	x0, 9055c <CUSBString::CUSBString(CUSBString*)+0x7c>
   90540:	f9400a80 	ldr	x0, [x20, #16]
   90544:	b4000240 	cbz	x0, 9058c <CUSBString::CUSBString(CUSBString*)+0xac>
   90548:	f94013f5 	ldr	x21, [sp, #32]
   9054c:	f9000a60 	str	x0, [x19, #16]
   90550:	a94153f3 	ldp	x19, x20, [sp, #16]
   90554:	a8c37bfd 	ldp	x29, x30, [sp], #48
   90558:	d65f03c0 	ret
   9055c:	f0000101 	adrp	x1, b3000 <_etext+0x2158>
   90560:	f0000100 	adrp	x0, b3000 <_etext+0x2158>
   90564:	9102c021 	add	x1, x1, #0xb0
   90568:	91030000 	add	x0, x0, #0xc0
   9056c:	528006a2 	mov	w2, #0x35                  	// #53
   90570:	940035f4 	bl	9dd40 <assertion_failed>
   90574:	f0000101 	adrp	x1, b3000 <_etext+0x2158>
   90578:	d0000100 	adrp	x0, b2000 <_etext+0x1158>
   9057c:	9102c021 	add	x1, x1, #0xb0
   90580:	911e0000 	add	x0, x0, #0x780
   90584:	52800562 	mov	w2, #0x2b                  	// #43
   90588:	940035ee 	bl	9dd40 <assertion_failed>
   9058c:	f0000101 	adrp	x1, b3000 <_etext+0x2158>
   90590:	f0000100 	adrp	x0, b3000 <_etext+0x2158>
   90594:	9102c021 	add	x1, x1, #0xb0
   90598:	91034000 	add	x0, x0, #0xd0
   9059c:	528006c2 	mov	w2, #0x36                  	// #54
   905a0:	940035e8 	bl	9dd40 <assertion_failed>
   905a4:	d503201f 	nop
   905a8:	d503201f 	nop
   905ac:	d503201f 	nop

00000000000905b0 <CUSBString::~CUSBString()>:
   905b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   905b4:	910003fd 	mov	x29, sp
   905b8:	f9000bf3 	str	x19, [sp, #16]
   905bc:	aa0003f3 	mov	x19, x0
   905c0:	f9400800 	ldr	x0, [x0, #16]
   905c4:	b4000080 	cbz	x0, 905d4 <CUSBString::~CUSBString()+0x24>
   905c8:	f9400001 	ldr	x1, [x0]
   905cc:	f9400421 	ldr	x1, [x1, #8]
   905d0:	d63f0020 	blr	x1
   905d4:	f9000a7f 	str	xzr, [x19, #16]
   905d8:	f9400660 	ldr	x0, [x19, #8]
   905dc:	b4000080 	cbz	x0, 905ec <CUSBString::~CUSBString()+0x3c>
   905e0:	f9400bf3 	ldr	x19, [sp, #16]
   905e4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   905e8:	14005f3a 	b	a82d0 <operator delete[](void*)>
   905ec:	f9400bf3 	ldr	x19, [sp, #16]
   905f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   905f4:	d65f03c0 	ret
   905f8:	d503201f 	nop
   905fc:	d503201f 	nop

0000000000090600 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>:
   90600:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   90604:	910003fd 	mov	x29, sp
   90608:	a90153f3 	stp	x19, x20, [sp, #16]
   9060c:	a9025bf5 	stp	x21, x22, [sp, #32]
   90610:	72001c35 	ands	w21, w1, #0xff
   90614:	a90363f7 	stp	x23, x24, [sp, #48]
   90618:	54000a20 	b.eq	9075c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x15c>  // b.none
   9061c:	aa0003f3 	mov	x19, x0
   90620:	12003c56 	and	w22, w2, #0xffff
   90624:	f9400400 	ldr	x0, [x0, #8]
   90628:	b4000040 	cbz	x0, 90630 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x30>
   9062c:	94005f29 	bl	a82d0 <operator delete[](void*)>
   90630:	d2800080 	mov	x0, #0x4                   	// #4
   90634:	94005f13 	bl	a8280 <operator new[](unsigned long)>
   90638:	f9000660 	str	x0, [x19, #8]
   9063c:	f9400261 	ldr	x1, [x19]
   90640:	b40009a1 	cbz	x1, 90774 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x174>
   90644:	aa0103e0 	mov	x0, x1
   90648:	97ffe08a 	bl	88870 <CUSBDevice::GetHost() const>
   9064c:	aa0003f4 	mov	x20, x0
   90650:	f9400260 	ldr	x0, [x19]
   90654:	97ffe07b 	bl	88840 <CUSBDevice::GetEndpoint0() const>
   90658:	aa0003e1 	mov	x1, x0
   9065c:	2a1603e7 	mov	w7, w22
   90660:	f9400664 	ldr	x4, [x19, #8]
   90664:	aa1403e0 	mov	x0, x20
   90668:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   9066c:	52800085 	mov	w5, #0x4                   	// #4
   90670:	2a1503e3 	mov	w3, w21
   90674:	52800062 	mov	w2, #0x3                   	// #3
   90678:	97ffc2ae 	bl	81130 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   9067c:	37f80620 	tbnz	w0, #31, 90740 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x140>
   90680:	f9400660 	ldr	x0, [x19, #8]
   90684:	39400014 	ldrb	w20, [x0]
   90688:	7100069f 	cmp	w20, #0x1
   9068c:	540005a9 	b.ls	90740 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x140>  // b.plast
   90690:	37000594 	tbnz	w20, #0, 90740 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x140>
   90694:	39400417 	ldrb	w23, [x0, #1]
   90698:	71000eff 	cmp	w23, #0x3
   9069c:	54000521 	b.ne	90740 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x140>  // b.any
   906a0:	7100129f 	cmp	w20, #0x4
   906a4:	54000748 	b.hi	9078c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x18c>  // b.pmore
   906a8:	71000a9f 	cmp	w20, #0x2
   906ac:	54000bc0 	b.eq	90824 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x224>  // b.none
   906b0:	7100129f 	cmp	w20, #0x4
   906b4:	54000c41 	b.ne	9083c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x23c>  // b.any
   906b8:	d10043ff 	sub	sp, sp, #0x10
   906bc:	d2800021 	mov	x1, #0x1                   	// #1
   906c0:	910003f4 	mov	x20, sp
   906c4:	52800005 	mov	w5, #0x0                   	// #0
   906c8:	d2800003 	mov	x3, #0x0                   	// #0
   906cc:	52800be6 	mov	w6, #0x5f                  	// #95
   906d0:	8b030402 	add	x2, x0, x3, lsl #1
   906d4:	110004a5 	add	w5, w5, #0x1
   906d8:	39400844 	ldrb	w4, [x2, #2]
   906dc:	39400c42 	ldrb	w2, [x2, #3]
   906e0:	2a022082 	orr	w2, w4, w2, lsl #8
   906e4:	51008044 	sub	w4, w2, #0x20
   906e8:	12003c84 	and	w4, w4, #0xffff
   906ec:	7101789f 	cmp	w4, #0x5e
   906f0:	7a408844 	ccmp	w2, #0x0, #0x4, hi	// hi = pmore
   906f4:	1a860042 	csel	w2, w2, w6, eq	// eq = none
   906f8:	38236a82 	strb	w2, [x20, x3]
   906fc:	2a0503e3 	mov	w3, w5
   90700:	eb03003f 	cmp	x1, x3
   90704:	54fffe68 	b.hi	906d0 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xd0>  // b.pmore
   90708:	38216a9f 	strb	wzr, [x20, x1]
   9070c:	f9400a60 	ldr	x0, [x19, #16]
   90710:	b4000080 	cbz	x0, 90720 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x120>
   90714:	f9400001 	ldr	x1, [x0]
   90718:	f9400421 	ldr	x1, [x1, #8]
   9071c:	d63f0020 	blr	x1
   90720:	d2800400 	mov	x0, #0x20                  	// #32
   90724:	94005ecf 	bl	a8260 <operator new(unsigned long)>
   90728:	aa1403e1 	mov	x1, x20
   9072c:	aa0003f4 	mov	x20, x0
   90730:	94004fd0 	bl	a4670 <CString::CString(char const*)>
   90734:	52800020 	mov	w0, #0x1                   	// #1
   90738:	f9000a74 	str	x20, [x19, #16]
   9073c:	14000002 	b	90744 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x144>
   90740:	52800000 	mov	w0, #0x0                   	// #0
   90744:	910003bf 	mov	sp, x29
   90748:	a94153f3 	ldp	x19, x20, [sp, #16]
   9074c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   90750:	a94363f7 	ldp	x23, x24, [sp, #48]
   90754:	a8c47bfd 	ldp	x29, x30, [sp], #64
   90758:	d65f03c0 	ret
   9075c:	f0000101 	adrp	x1, b3000 <_etext+0x2158>
   90760:	f0000100 	adrp	x0, b3000 <_etext+0x2158>
   90764:	9102c021 	add	x1, x1, #0xb0
   90768:	9103a000 	add	x0, x0, #0xe8
   9076c:	528008e2 	mov	w2, #0x47                  	// #71
   90770:	94003574 	bl	9dd40 <assertion_failed>
   90774:	f0000101 	adrp	x1, b3000 <_etext+0x2158>
   90778:	b0000100 	adrp	x0, b1000 <_etext+0x158>
   9077c:	9102c021 	add	x1, x1, #0xb0
   90780:	91210000 	add	x0, x0, #0x840
   90784:	528009a2 	mov	w2, #0x4d                  	// #77
   90788:	9400356e 	bl	9dd40 <assertion_failed>
   9078c:	d2800041 	mov	x1, #0x2                   	// #2
   90790:	94005edc 	bl	a8300 <operator delete(void*, unsigned long)>
   90794:	92401e80 	and	x0, x20, #0xff
   90798:	94005eba 	bl	a8280 <operator new[](unsigned long)>
   9079c:	aa0003e1 	mov	x1, x0
   907a0:	f9400260 	ldr	x0, [x19]
   907a4:	f9000661 	str	x1, [x19, #8]
   907a8:	97ffe032 	bl	88870 <CUSBDevice::GetHost() const>
   907ac:	aa0003f8 	mov	x24, x0
   907b0:	f9400260 	ldr	x0, [x19]
   907b4:	97ffe023 	bl	88840 <CUSBDevice::GetEndpoint0() const>
   907b8:	aa0003e1 	mov	x1, x0
   907bc:	2a1603e7 	mov	w7, w22
   907c0:	f9400664 	ldr	x4, [x19, #8]
   907c4:	aa1803e0 	mov	x0, x24
   907c8:	2a1503e3 	mov	w3, w21
   907cc:	2a1703e2 	mov	w2, w23
   907d0:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   907d4:	2a1403e5 	mov	w5, w20
   907d8:	97ffc256 	bl	81130 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   907dc:	6b00029f 	cmp	w20, w0
   907e0:	54fffb01 	b.ne	90740 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x140>  // b.any
   907e4:	f9400660 	ldr	x0, [x19, #8]
   907e8:	39400001 	ldrb	w1, [x0]
   907ec:	6b14003f 	cmp	w1, w20
   907f0:	54fffa81 	b.ne	90740 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x140>  // b.any
   907f4:	39400402 	ldrb	w2, [x0, #1]
   907f8:	71000c5f 	cmp	w2, #0x3
   907fc:	54fffa21 	b.ne	90740 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x140>  // b.any
   90800:	370001e1 	tbnz	w1, #0, 9083c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x23c>
   90804:	51000821 	sub	w1, w1, #0x2
   90808:	13017c21 	asr	w1, w1, #1
   9080c:	93407c21 	sxtw	x1, w1
   90810:	91004022 	add	x2, x1, #0x10
   90814:	927cec42 	and	x2, x2, #0xfffffffffffffff0
   90818:	cb2263ff 	sub	sp, sp, x2
   9081c:	910003f4 	mov	x20, sp
   90820:	17ffffa9 	b	906c4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xc4>
   90824:	f0000101 	adrp	x1, b3000 <_etext+0x2158>
   90828:	f0000100 	adrp	x0, b3000 <_etext+0x2158>
   9082c:	9102c021 	add	x1, x1, #0xb0
   90830:	9103e000 	add	x0, x0, #0xf8
   90834:	52800ea2 	mov	w2, #0x75                  	// #117
   90838:	94003542 	bl	9dd40 <assertion_failed>
   9083c:	f0000101 	adrp	x1, b3000 <_etext+0x2158>
   90840:	f0000100 	adrp	x0, b3000 <_etext+0x2158>
   90844:	9102c021 	add	x1, x1, #0xb0
   90848:	91046000 	add	x0, x0, #0x118
   9084c:	52800ec2 	mov	w2, #0x76                  	// #118
   90850:	9400353c 	bl	9dd40 <assertion_failed>
   90854:	d503201f 	nop
   90858:	d503201f 	nop
   9085c:	d503201f 	nop

0000000000090860 <CUSBString::Get() const>:
   90860:	f9400800 	ldr	x0, [x0, #16]
   90864:	14004fbf 	b	a4760 <CString::operator char const*() const>
   90868:	d503201f 	nop
   9086c:	d503201f 	nop

0000000000090870 <CUSBString::GetLanguageID()>:
   90870:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   90874:	910003fd 	mov	x29, sp
   90878:	a9025bf5 	stp	x21, x22, [sp, #32]
   9087c:	aa0003f5 	mov	x21, x0
   90880:	d2800080 	mov	x0, #0x4                   	// #4
   90884:	a90153f3 	stp	x19, x20, [sp, #16]
   90888:	94005e7e 	bl	a8280 <operator new[](unsigned long)>
   9088c:	f94002a1 	ldr	x1, [x21]
   90890:	b4000c61 	cbz	x1, 90a1c <CUSBString::GetLanguageID()+0x1ac>
   90894:	aa0003f3 	mov	x19, x0
   90898:	aa0103e0 	mov	x0, x1
   9089c:	97ffdff5 	bl	88870 <CUSBDevice::GetHost() const>
   908a0:	aa0003f4 	mov	x20, x0
   908a4:	f94002a0 	ldr	x0, [x21]
   908a8:	97ffdfe6 	bl	88840 <CUSBDevice::GetEndpoint0() const>
   908ac:	aa0003e1 	mov	x1, x0
   908b0:	52800007 	mov	w7, #0x0                   	// #0
   908b4:	aa1403e0 	mov	x0, x20
   908b8:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   908bc:	52800085 	mov	w5, #0x4                   	// #4
   908c0:	aa1303e4 	mov	x4, x19
   908c4:	52800003 	mov	w3, #0x0                   	// #0
   908c8:	52800062 	mov	w2, #0x3                   	// #3
   908cc:	97ffc219 	bl	81130 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   908d0:	37f803c0 	tbnz	w0, #31, 90948 <CUSBString::GetLanguageID()+0xd8>
   908d4:	39400274 	ldrb	w20, [x19]
   908d8:	71000e9f 	cmp	w20, #0x3
   908dc:	54000369 	b.ls	90948 <CUSBString::GetLanguageID()+0xd8>  // b.plast
   908e0:	37000354 	tbnz	w20, #0, 90948 <CUSBString::GetLanguageID()+0xd8>
   908e4:	39400676 	ldrb	w22, [x19, #1]
   908e8:	71000edf 	cmp	w22, #0x3
   908ec:	540002e1 	b.ne	90948 <CUSBString::GetLanguageID()+0xd8>  // b.any
   908f0:	7100129f 	cmp	w20, #0x4
   908f4:	52800081 	mov	w1, #0x4                   	// #4
   908f8:	54000381 	b.ne	90968 <CUSBString::GetLanguageID()+0xf8>  // b.any
   908fc:	51000822 	sub	w2, w1, #0x2
   90900:	52800000 	mov	w0, #0x0                   	// #0
   90904:	13017c42 	asr	w2, w2, #1
   90908:	d2800001 	mov	x1, #0x0                   	// #0
   9090c:	93407c42 	sxtw	x2, w2
   90910:	14000005 	b	90924 <CUSBString::GetLanguageID()+0xb4>
   90914:	11000401 	add	w1, w0, #0x1
   90918:	eb02003f 	cmp	x1, x2
   9091c:	aa0103e0 	mov	x0, x1
   90920:	540006a2 	b.cs	909f4 <CUSBString::GetLanguageID()+0x184>  // b.hs, b.nlast
   90924:	8b010661 	add	x1, x19, x1, lsl #1
   90928:	39400823 	ldrb	w3, [x1, #2]
   9092c:	39400c34 	ldrb	w20, [x1, #3]
   90930:	2a142074 	orr	w20, w3, w20, lsl #8
   90934:	7110269f 	cmp	w20, #0x409
   90938:	54fffee1 	b.ne	90914 <CUSBString::GetLanguageID()+0xa4>  // b.any
   9093c:	aa1303e0 	mov	x0, x19
   90940:	94005e64 	bl	a82d0 <operator delete[](void*)>
   90944:	14000004 	b	90954 <CUSBString::GetLanguageID()+0xe4>
   90948:	aa1303e0 	mov	x0, x19
   9094c:	52808134 	mov	w20, #0x409                 	// #1033
   90950:	94005e60 	bl	a82d0 <operator delete[](void*)>
   90954:	2a1403e0 	mov	w0, w20
   90958:	a94153f3 	ldp	x19, x20, [sp, #16]
   9095c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   90960:	a8c37bfd 	ldp	x29, x30, [sp], #48
   90964:	d65f03c0 	ret
   90968:	aa1303e0 	mov	x0, x19
   9096c:	94005e59 	bl	a82d0 <operator delete[](void*)>
   90970:	92401e80 	and	x0, x20, #0xff
   90974:	94005e43 	bl	a8280 <operator new[](unsigned long)>
   90978:	aa0003f3 	mov	x19, x0
   9097c:	f94002a0 	ldr	x0, [x21]
   90980:	97ffdfbc 	bl	88870 <CUSBDevice::GetHost() const>
   90984:	aa0003e1 	mov	x1, x0
   90988:	f94002a0 	ldr	x0, [x21]
   9098c:	aa0103f5 	mov	x21, x1
   90990:	97ffdfac 	bl	88840 <CUSBDevice::GetEndpoint0() const>
   90994:	aa0003e1 	mov	x1, x0
   90998:	2a1603e2 	mov	w2, w22
   9099c:	aa1503e0 	mov	x0, x21
   909a0:	aa1303e4 	mov	x4, x19
   909a4:	52800007 	mov	w7, #0x0                   	// #0
   909a8:	12800fe6 	mov	w6, #0xffffff80            	// #-128
   909ac:	2a1403e5 	mov	w5, w20
   909b0:	52800003 	mov	w3, #0x0                   	// #0
   909b4:	97ffc1df 	bl	81130 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   909b8:	6b00029f 	cmp	w20, w0
   909bc:	54fffc61 	b.ne	90948 <CUSBString::GetLanguageID()+0xd8>  // b.any
   909c0:	39400261 	ldrb	w1, [x19]
   909c4:	6b14003f 	cmp	w1, w20
   909c8:	54fffc01 	b.ne	90948 <CUSBString::GetLanguageID()+0xd8>  // b.any
   909cc:	39400660 	ldrb	w0, [x19, #1]
   909d0:	71000c1f 	cmp	w0, #0x3
   909d4:	54fffba1 	b.ne	90948 <CUSBString::GetLanguageID()+0xd8>  // b.any
   909d8:	3607f921 	tbz	w1, #0, 908fc <CUSBString::GetLanguageID()+0x8c>
   909dc:	f0000101 	adrp	x1, b3000 <_etext+0x2158>
   909e0:	f0000100 	adrp	x0, b3000 <_etext+0x2158>
   909e4:	9102c021 	add	x1, x1, #0xb0
   909e8:	91050000 	add	x0, x0, #0x140
   909ec:	52801922 	mov	w2, #0xc9                  	// #201
   909f0:	940034d4 	bl	9dd40 <assertion_failed>
   909f4:	39400a61 	ldrb	w1, [x19, #2]
   909f8:	aa1303e0 	mov	x0, x19
   909fc:	39400e74 	ldrb	w20, [x19, #3]
   90a00:	2a142034 	orr	w20, w1, w20, lsl #8
   90a04:	94005e33 	bl	a82d0 <operator delete[](void*)>
   90a08:	2a1403e0 	mov	w0, w20
   90a0c:	a94153f3 	ldp	x19, x20, [sp, #16]
   90a10:	a9425bf5 	ldp	x21, x22, [sp, #32]
   90a14:	a8c37bfd 	ldp	x29, x30, [sp], #48
   90a18:	d65f03c0 	ret
   90a1c:	f0000101 	adrp	x1, b3000 <_etext+0x2158>
   90a20:	b0000100 	adrp	x0, b1000 <_etext+0x158>
   90a24:	9102c021 	add	x1, x1, #0xb0
   90a28:	91210000 	add	x0, x0, #0x840
   90a2c:	52801362 	mov	w2, #0x9b                  	// #155
   90a30:	940034c4 	bl	9dd40 <assertion_failed>
	...

0000000000090a40 <CUSBSerialCH341Device::~CUSBSerialCH341Device()>:
   90a40:	d0000121 	adrp	x1, b6000 <From+0x98>
   90a44:	913ce021 	add	x1, x1, #0xf38
   90a48:	f9000001 	str	x1, [x0]
   90a4c:	14002a15 	b	9b2a0 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>

0000000000090a50 <CUSBSerialCH341Device::~CUSBSerialCH341Device()>:
   90a50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   90a54:	d0000121 	adrp	x1, b6000 <From+0x98>
   90a58:	913ce021 	add	x1, x1, #0xf38
   90a5c:	910003fd 	mov	x29, sp
   90a60:	f9000bf3 	str	x19, [sp, #16]
   90a64:	aa0003f3 	mov	x19, x0
   90a68:	f9000001 	str	x1, [x0]
   90a6c:	94002a0d 	bl	9b2a0 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>
   90a70:	aa1303e0 	mov	x0, x19
   90a74:	d2800f01 	mov	x1, #0x78                  	// #120
   90a78:	f9400bf3 	ldr	x19, [sp, #16]
   90a7c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90a80:	14005e20 	b	a8300 <operator delete(void*, unsigned long)>
   90a84:	d503201f 	nop
   90a88:	d503201f 	nop
   90a8c:	d503201f 	nop

0000000000090a90 <CUSBSerialCH341Device::SetBaudRate(unsigned int)>:
   90a90:	529e0003 	mov	w3, #0xf000                	// #61440
   90a94:	72ab6b23 	movk	w3, #0x5b59, lsl #16
   90a98:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   90a9c:	529ffe06 	mov	w6, #0xfff0                	// #65520
   90aa0:	910003fd 	mov	x29, sp
   90aa4:	1ac10863 	udiv	w3, w3, w1
   90aa8:	52800062 	mov	w2, #0x3                   	// #3
   90aac:	a90153f3 	stp	x19, x20, [sp, #16]
   90ab0:	aa0003f4 	mov	x20, x0
   90ab4:	a9025bf5 	stp	x21, x22, [sp, #32]
   90ab8:	2a0103f5 	mov	w21, w1
   90abc:	6b06007f 	cmp	w3, w6
   90ac0:	54000189 	b.ls	90af0 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x60>  // b.plast
   90ac4:	d503201f 	nop
   90ac8:	53037c63 	lsr	w3, w3, #3
   90acc:	51000442 	sub	w2, w2, #0x1
   90ad0:	6b06007f 	cmp	w3, w6
   90ad4:	1a9f97e4 	cset	w4, hi	// hi = pmore
   90ad8:	72003c42 	ands	w2, w2, #0xffff
   90adc:	1a9f07e5 	cset	w5, ne	// ne = any
   90ae0:	6a050093 	ands	w19, w4, w5
   90ae4:	54ffff21 	b.ne	90ac8 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x38>  // b.any
   90ae8:	6b06007f 	cmp	w3, w6
   90aec:	54000388 	b.hi	90b5c <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0xcc>  // b.pmore
   90af0:	4b0303e5 	neg	w5, w3
   90af4:	aa1403e0 	mov	x0, x20
   90af8:	12181ca5 	and	w5, w5, #0xff00
   90afc:	2a0200a5 	orr	w5, w5, w2
   90b00:	321900b3 	orr	w19, w5, #0x80
   90b04:	97ffe76b 	bl	8a8b0 <CUSBFunction::GetHost() const>
   90b08:	aa0003f6 	mov	x22, x0
   90b0c:	b4000520 	cbz	x0, 90bb0 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x120>
   90b10:	aa1403e0 	mov	x0, x20
   90b14:	97ffe75b 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   90b18:	aa0003e1 	mov	x1, x0
   90b1c:	2a1303e5 	mov	w5, w19
   90b20:	aa1603e0 	mov	x0, x22
   90b24:	52800007 	mov	w7, #0x0                   	// #0
   90b28:	d2800006 	mov	x6, #0x0                   	// #0
   90b2c:	52826244 	mov	w4, #0x1312                	// #4882
   90b30:	12800ca3 	mov	w3, #0xffffff9a            	// #-102
   90b34:	52800802 	mov	w2, #0x40                  	// #64
   90b38:	97ffc136 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   90b3c:	37f80280 	tbnz	w0, #31, 90b8c <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0xfc>
   90b40:	52800033 	mov	w19, #0x1                   	// #1
   90b44:	b9002a95 	str	w21, [x20, #40]
   90b48:	2a1303e0 	mov	w0, w19
   90b4c:	a94153f3 	ldp	x19, x20, [sp, #16]
   90b50:	a9425bf5 	ldp	x21, x22, [sp, #32]
   90b54:	a8c37bfd 	ldp	x29, x30, [sp], #48
   90b58:	d65f03c0 	ret
   90b5c:	94003bad 	bl	9fa10 <CLogger::Get()>
   90b60:	f0000103 	adrp	x3, b3000 <_etext+0x2158>
   90b64:	d0000121 	adrp	x1, b6000 <From+0x98>
   90b68:	9105a063 	add	x3, x3, #0x168
   90b6c:	913ea021 	add	x1, x1, #0xfa8
   90b70:	52800022 	mov	w2, #0x1                   	// #1
   90b74:	94003d93 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   90b78:	2a1303e0 	mov	w0, w19
   90b7c:	a94153f3 	ldp	x19, x20, [sp, #16]
   90b80:	a9425bf5 	ldp	x21, x22, [sp, #32]
   90b84:	a8c37bfd 	ldp	x29, x30, [sp], #48
   90b88:	d65f03c0 	ret
   90b8c:	94003ba1 	bl	9fa10 <CLogger::Get()>
   90b90:	f0000103 	adrp	x3, b3000 <_etext+0x2158>
   90b94:	d0000121 	adrp	x1, b6000 <From+0x98>
   90b98:	91064063 	add	x3, x3, #0x190
   90b9c:	913ea021 	add	x1, x1, #0xfa8
   90ba0:	52800022 	mov	w2, #0x1                   	// #1
   90ba4:	52800013 	mov	w19, #0x0                   	// #0
   90ba8:	94003d86 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   90bac:	17ffffe7 	b	90b48 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0xb8>
   90bb0:	f0000101 	adrp	x1, b3000 <_etext+0x2158>
   90bb4:	b0000100 	adrp	x0, b1000 <_etext+0x158>
   90bb8:	9105e021 	add	x1, x1, #0x178
   90bbc:	910cc000 	add	x0, x0, #0x330
   90bc0:	528010e2 	mov	w2, #0x87                  	// #135
   90bc4:	9400345f 	bl	9dd40 <assertion_failed>
   90bc8:	d503201f 	nop
   90bcc:	d503201f 	nop

0000000000090bd0 <CUSBSerialCH341Device::CUSBSerialCH341Device(CUSBFunction*)>:
   90bd0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   90bd4:	d2800002 	mov	x2, #0x0                   	// #0
   90bd8:	910003fd 	mov	x29, sp
   90bdc:	f9000bf3 	str	x19, [sp, #16]
   90be0:	aa0003f3 	mov	x19, x0
   90be4:	94002b43 	bl	9b8f0 <CUSBSerialHostDevice::CUSBSerialHostDevice(CUSBFunction*, unsigned long)>
   90be8:	d0000120 	adrp	x0, b6000 <From+0x98>
   90bec:	913ce000 	add	x0, x0, #0xf38
   90bf0:	f9000260 	str	x0, [x19]
   90bf4:	f9400bf3 	ldr	x19, [sp, #16]
   90bf8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90bfc:	d65f03c0 	ret

0000000000090c00 <CUSBSerialCH341Device::GetDeviceIDTable()>:
   90c00:	d0000120 	adrp	x0, b6000 <From+0x98>
   90c04:	913ea000 	add	x0, x0, #0xfa8
   90c08:	91002000 	add	x0, x0, #0x8
   90c0c:	d65f03c0 	ret

0000000000090c10 <CUSBSerialCH341Device::Configure()>:
   90c10:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   90c14:	910003fd 	mov	x29, sp
   90c18:	a90153f3 	stp	x19, x20, [sp, #16]
   90c1c:	f90013f5 	str	x21, [sp, #32]
   90c20:	aa0003f5 	mov	x21, x0
   90c24:	94002b9b 	bl	9ba90 <CUSBSerialHostDevice::Configure()>
   90c28:	72001c13 	ands	w19, w0, #0xff
   90c2c:	540009c0 	b.eq	90d64 <CUSBSerialCH341Device::Configure()+0x154>  // b.none
   90c30:	aa1503e0 	mov	x0, x21
   90c34:	97ffe71f 	bl	8a8b0 <CUSBFunction::GetHost() const>
   90c38:	aa0003f3 	mov	x19, x0
   90c3c:	b4000ac0 	cbz	x0, 90d94 <CUSBSerialCH341Device::Configure()+0x184>
   90c40:	9101bff4 	add	x20, sp, #0x6f
   90c44:	aa1503e0 	mov	x0, x21
   90c48:	927ae694 	and	x20, x20, #0xffffffffffffffc0
   90c4c:	a9007e9f 	stp	xzr, xzr, [x20]
   90c50:	a9017e9f 	stp	xzr, xzr, [x20, #16]
   90c54:	a9027e9f 	stp	xzr, xzr, [x20, #32]
   90c58:	a9037e9f 	stp	xzr, xzr, [x20, #48]
   90c5c:	97ffe709 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   90c60:	aa0003e1 	mov	x1, x0
   90c64:	52800047 	mov	w7, #0x2                   	// #2
   90c68:	aa1403e6 	mov	x6, x20
   90c6c:	52800005 	mov	w5, #0x0                   	// #0
   90c70:	52800004 	mov	w4, #0x0                   	// #0
   90c74:	52800be3 	mov	w3, #0x5f                  	// #95
   90c78:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   90c7c:	aa1303e0 	mov	x0, x19
   90c80:	97ffc0e4 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   90c84:	7100081f 	cmp	w0, #0x2
   90c88:	540001c0 	b.eq	90cc0 <CUSBSerialCH341Device::Configure()+0xb0>  // b.none
   90c8c:	94003b61 	bl	9fa10 <CLogger::Get()>
   90c90:	f0000103 	adrp	x3, b3000 <_etext+0x2158>
   90c94:	d0000121 	adrp	x1, b6000 <From+0x98>
   90c98:	91072063 	add	x3, x3, #0x1c8
   90c9c:	913ea021 	add	x1, x1, #0xfa8
   90ca0:	52800022 	mov	w2, #0x1                   	// #1
   90ca4:	52800013 	mov	w19, #0x0                   	// #0
   90ca8:	94003d46 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   90cac:	2a1303e0 	mov	w0, w19
   90cb0:	a94153f3 	ldp	x19, x20, [sp, #16]
   90cb4:	f94013f5 	ldr	x21, [sp, #32]
   90cb8:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   90cbc:	d65f03c0 	ret
   90cc0:	94003b54 	bl	9fa10 <CLogger::Get()>
   90cc4:	39400284 	ldrb	w4, [x20]
   90cc8:	f0000103 	adrp	x3, b3000 <_etext+0x2158>
   90ccc:	d0000134 	adrp	x20, b6000 <From+0x98>
   90cd0:	913ea294 	add	x20, x20, #0xfa8
   90cd4:	9107a063 	add	x3, x3, #0x1e8
   90cd8:	aa1403e1 	mov	x1, x20
   90cdc:	52800062 	mov	w2, #0x3                   	// #3
   90ce0:	94003d38 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   90ce4:	aa1503e0 	mov	x0, x21
   90ce8:	97ffe6e6 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   90cec:	aa0003e1 	mov	x1, x0
   90cf0:	52800007 	mov	w7, #0x0                   	// #0
   90cf4:	aa1303e0 	mov	x0, x19
   90cf8:	d2800006 	mov	x6, #0x0                   	// #0
   90cfc:	52800005 	mov	w5, #0x0                   	// #0
   90d00:	52800004 	mov	w4, #0x0                   	// #0
   90d04:	12800bc3 	mov	w3, #0xffffffa1            	// #-95
   90d08:	52800802 	mov	w2, #0x40                  	// #64
   90d0c:	97ffc0c1 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   90d10:	37f804e0 	tbnz	w0, #31, 90dac <CUSBSerialCH341Device::Configure()+0x19c>
   90d14:	f94002a2 	ldr	x2, [x21]
   90d18:	5284b001 	mov	w1, #0x2580                	// #9600
   90d1c:	aa1503e0 	mov	x0, x21
   90d20:	f9403042 	ldr	x2, [x2, #96]
   90d24:	d63f0040 	blr	x2
   90d28:	72001c13 	ands	w19, w0, #0xff
   90d2c:	54fffc00 	b.eq	90cac <CUSBSerialCH341Device::Configure()+0x9c>  // b.none
   90d30:	f94002a4 	ldr	x4, [x21]
   90d34:	aa1503e0 	mov	x0, x21
   90d38:	52800023 	mov	w3, #0x1                   	// #1
   90d3c:	52800002 	mov	w2, #0x0                   	// #0
   90d40:	52800101 	mov	w1, #0x8                   	// #8
   90d44:	f9403484 	ldr	x4, [x4, #104]
   90d48:	d63f0080 	blr	x4
   90d4c:	12001c13 	and	w19, w0, #0xff
   90d50:	f94013f5 	ldr	x21, [sp, #32]
   90d54:	2a1303e0 	mov	w0, w19
   90d58:	a94153f3 	ldp	x19, x20, [sp, #16]
   90d5c:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   90d60:	d65f03c0 	ret
   90d64:	94003b2b 	bl	9fa10 <CLogger::Get()>
   90d68:	f0000103 	adrp	x3, b3000 <_etext+0x2158>
   90d6c:	d0000121 	adrp	x1, b6000 <From+0x98>
   90d70:	9106a063 	add	x3, x3, #0x1a8
   90d74:	913ea021 	add	x1, x1, #0xfa8
   90d78:	52800022 	mov	w2, #0x1                   	// #1
   90d7c:	94003d11 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   90d80:	2a1303e0 	mov	w0, w19
   90d84:	a94153f3 	ldp	x19, x20, [sp, #16]
   90d88:	f94013f5 	ldr	x21, [sp, #32]
   90d8c:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   90d90:	d65f03c0 	ret
   90d94:	f0000101 	adrp	x1, b3000 <_etext+0x2158>
   90d98:	b0000100 	adrp	x0, b1000 <_etext+0x158>
   90d9c:	9105e021 	add	x1, x1, #0x178
   90da0:	910cc000 	add	x0, x0, #0x330
   90da4:	52800882 	mov	w2, #0x44                  	// #68
   90da8:	940033e6 	bl	9dd40 <assertion_failed>
   90dac:	94003b19 	bl	9fa10 <CLogger::Get()>
   90db0:	aa1403e1 	mov	x1, x20
   90db4:	f0000103 	adrp	x3, b3000 <_etext+0x2158>
   90db8:	91080063 	add	x3, x3, #0x200
   90dbc:	52800022 	mov	w2, #0x1                   	// #1
   90dc0:	52800013 	mov	w19, #0x0                   	// #0
   90dc4:	94003cff 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   90dc8:	17ffffb9 	b	90cac <CUSBSerialCH341Device::Configure()+0x9c>
   90dcc:	d503201f 	nop

0000000000090dd0 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   90dd0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   90dd4:	910003fd 	mov	x29, sp
   90dd8:	a90153f3 	stp	x19, x20, [sp, #16]
   90ddc:	2a0103f3 	mov	w19, w1
   90de0:	2a0203f4 	mov	w20, w2
   90de4:	a9025bf5 	stp	x21, x22, [sp, #32]
   90de8:	a90363f7 	stp	x23, x24, [sp, #48]
   90dec:	2a0303f8 	mov	w24, w3
   90df0:	aa0003f7 	mov	x23, x0
   90df4:	97ffe6af 	bl	8a8b0 <CUSBFunction::GetHost() const>
   90df8:	b4001100 	cbz	x0, 91018 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x248>
   90dfc:	aa0003f5 	mov	x21, x0
   90e00:	910103e0 	add	x0, sp, #0x40
   90e04:	94004e13 	bl	a4650 <CString::CString()>
   90e08:	51001660 	sub	w0, w19, #0x5
   90e0c:	71000c1f 	cmp	w0, #0x3
   90e10:	540003c8 	b.hi	90e88 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xb8>  // b.pmore
   90e14:	f0000101 	adrp	x1, b3000 <_etext+0x2158>
   90e18:	2a1303e2 	mov	w2, w19
   90e1c:	91086021 	add	x1, x1, #0x218
   90e20:	910103e0 	add	x0, sp, #0x40
   90e24:	94005443 	bl	a5f30 <CString::Format(char const*, ...)>
   90e28:	51011676 	sub	w22, w19, #0x45
   90e2c:	7100069f 	cmp	w20, #0x1
   90e30:	12001ed6 	and	w22, w22, #0xff
   90e34:	540004c0 	b.eq	90ecc <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xfc>  // b.none
   90e38:	71000a9f 	cmp	w20, #0x2
   90e3c:	54000920 	b.eq	90f60 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x190>  // b.none
   90e40:	340007b4 	cbz	w20, 90f34 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x164>
   90e44:	94003af3 	bl	9fa10 <CLogger::Get()>
   90e48:	f0000103 	adrp	x3, b3000 <_etext+0x2158>
   90e4c:	d0000121 	adrp	x1, b6000 <From+0x98>
   90e50:	2a1403e4 	mov	w4, w20
   90e54:	91094063 	add	x3, x3, #0x250
   90e58:	913ea021 	add	x1, x1, #0xfa8
   90e5c:	52800022 	mov	w2, #0x1                   	// #1
   90e60:	94003cd8 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   90e64:	910103e0 	add	x0, sp, #0x40
   90e68:	52800015 	mov	w21, #0x0                   	// #0
   90e6c:	94004dbd 	bl	a4560 <CString::~CString()>
   90e70:	2a1503e0 	mov	w0, w21
   90e74:	a94153f3 	ldp	x19, x20, [sp, #16]
   90e78:	a9425bf5 	ldp	x21, x22, [sp, #32]
   90e7c:	a94363f7 	ldp	x23, x24, [sp, #48]
   90e80:	a8c67bfd 	ldp	x29, x30, [sp], #96
   90e84:	d65f03c0 	ret
   90e88:	94003ae2 	bl	9fa10 <CLogger::Get()>
   90e8c:	f0000103 	adrp	x3, b3000 <_etext+0x2158>
   90e90:	d0000121 	adrp	x1, b6000 <From+0x98>
   90e94:	2a1303e4 	mov	w4, w19
   90e98:	91088063 	add	x3, x3, #0x220
   90e9c:	913ea021 	add	x1, x1, #0xfa8
   90ea0:	52800022 	mov	w2, #0x1                   	// #1
   90ea4:	52800015 	mov	w21, #0x0                   	// #0
   90ea8:	94003cc6 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   90eac:	910103e0 	add	x0, sp, #0x40
   90eb0:	94004dac 	bl	a4560 <CString::~CString()>
   90eb4:	2a1503e0 	mov	w0, w21
   90eb8:	a94153f3 	ldp	x19, x20, [sp, #16]
   90ebc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   90ec0:	a94363f7 	ldp	x23, x24, [sp, #48]
   90ec4:	a8c67bfd 	ldp	x29, x30, [sp], #96
   90ec8:	d65f03c0 	ret
   90ecc:	f0000101 	adrp	x1, b3000 <_etext+0x2158>
   90ed0:	91090021 	add	x1, x1, #0x240
   90ed4:	910103e0 	add	x0, sp, #0x40
   90ed8:	321d02d6 	orr	w22, w22, #0x8
   90edc:	94004e7d 	bl	a48d0 <CString::Append(char const*)>
   90ee0:	7100071f 	cmp	w24, #0x1
   90ee4:	54000340 	b.eq	90f4c <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x17c>  // b.none
   90ee8:	71000b1f 	cmp	w24, #0x2
   90eec:	54000460 	b.eq	90f78 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1a8>  // b.none
   90ef0:	94003ac8 	bl	9fa10 <CLogger::Get()>
   90ef4:	f0000103 	adrp	x3, b3000 <_etext+0x2158>
   90ef8:	d0000121 	adrp	x1, b6000 <From+0x98>
   90efc:	2a1803e4 	mov	w4, w24
   90f00:	9109a063 	add	x3, x3, #0x268
   90f04:	913ea021 	add	x1, x1, #0xfa8
   90f08:	52800022 	mov	w2, #0x1                   	// #1
   90f0c:	94003cad 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   90f10:	910103e0 	add	x0, sp, #0x40
   90f14:	52800015 	mov	w21, #0x0                   	// #0
   90f18:	94004d92 	bl	a4560 <CString::~CString()>
   90f1c:	2a1503e0 	mov	w0, w21
   90f20:	a94153f3 	ldp	x19, x20, [sp, #16]
   90f24:	a9425bf5 	ldp	x21, x22, [sp, #32]
   90f28:	a94363f7 	ldp	x23, x24, [sp, #48]
   90f2c:	a8c67bfd 	ldp	x29, x30, [sp], #96
   90f30:	d65f03c0 	ret
   90f34:	f0000101 	adrp	x1, b3000 <_etext+0x2158>
   90f38:	9108e021 	add	x1, x1, #0x238
   90f3c:	910103e0 	add	x0, sp, #0x40
   90f40:	94004e64 	bl	a48d0 <CString::Append(char const*)>
   90f44:	7100071f 	cmp	w24, #0x1
   90f48:	54fffd01 	b.ne	90ee8 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x118>  // b.any
   90f4c:	f0000101 	adrp	x1, b3000 <_etext+0x2158>
   90f50:	9134e021 	add	x1, x1, #0xd38
   90f54:	910103e0 	add	x0, sp, #0x40
   90f58:	94004e5e 	bl	a48d0 <CString::Append(char const*)>
   90f5c:	1400000c 	b	90f8c <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1bc>
   90f60:	f0000101 	adrp	x1, b3000 <_etext+0x2158>
   90f64:	91092021 	add	x1, x1, #0x248
   90f68:	910103e0 	add	x0, sp, #0x40
   90f6c:	321d06d6 	orr	w22, w22, #0x18
   90f70:	94004e58 	bl	a48d0 <CString::Append(char const*)>
   90f74:	17ffffdb 	b	90ee0 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x110>
   90f78:	f0000101 	adrp	x1, b3000 <_etext+0x2158>
   90f7c:	91044021 	add	x1, x1, #0x110
   90f80:	910103e0 	add	x0, sp, #0x40
   90f84:	321e02d6 	orr	w22, w22, #0x4
   90f88:	94004e52 	bl	a48d0 <CString::Append(char const*)>
   90f8c:	aa1703e0 	mov	x0, x23
   90f90:	97ffe63c 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   90f94:	aa0003e1 	mov	x1, x0
   90f98:	2a1603e5 	mov	w5, w22
   90f9c:	52800007 	mov	w7, #0x0                   	// #0
   90fa0:	d2800006 	mov	x6, #0x0                   	// #0
   90fa4:	5284a304 	mov	w4, #0x2518                	// #9496
   90fa8:	12800ca3 	mov	w3, #0xffffff9a            	// #-102
   90fac:	52800802 	mov	w2, #0x40                  	// #64
   90fb0:	aa1503e0 	mov	x0, x21
   90fb4:	97ffc017 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   90fb8:	37f803c0 	tbnz	w0, #31, 91030 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x260>
   90fbc:	aa1703e0 	mov	x0, x23
   90fc0:	97ffe630 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   90fc4:	aa0003e1 	mov	x1, x0
   90fc8:	52800007 	mov	w7, #0x0                   	// #0
   90fcc:	aa1503e0 	mov	x0, x21
   90fd0:	d2800006 	mov	x6, #0x0                   	// #0
   90fd4:	52800005 	mov	w5, #0x0                   	// #0
   90fd8:	12800004 	mov	w4, #0xffffffff            	// #-1
   90fdc:	12800b63 	mov	w3, #0xffffffa4            	// #-92
   90fe0:	52800802 	mov	w2, #0x40                  	// #64
   90fe4:	97ffc00b 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   90fe8:	37f80360 	tbnz	w0, #31, 91054 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x284>
   90fec:	910103e0 	add	x0, sp, #0x40
   90ff0:	2905d2f3 	stp	w19, w20, [x23, #44]
   90ff4:	52800035 	mov	w21, #0x1                   	// #1
   90ff8:	b90036f8 	str	w24, [x23, #52]
   90ffc:	94004d59 	bl	a4560 <CString::~CString()>
   91000:	2a1503e0 	mov	w0, w21
   91004:	a94153f3 	ldp	x19, x20, [sp, #16]
   91008:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9100c:	a94363f7 	ldp	x23, x24, [sp, #48]
   91010:	a8c67bfd 	ldp	x29, x30, [sp], #96
   91014:	d65f03c0 	ret
   91018:	d0000101 	adrp	x1, b3000 <_etext+0x2158>
   9101c:	90000100 	adrp	x0, b1000 <_etext+0x158>
   91020:	9105e021 	add	x1, x1, #0x178
   91024:	910cc000 	add	x0, x0, #0x330
   91028:	52801402 	mov	w2, #0xa0                  	// #160
   9102c:	94003345 	bl	9dd40 <assertion_failed>
   91030:	94003a78 	bl	9fa10 <CLogger::Get()>
   91034:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91038:	b0000121 	adrp	x1, b6000 <From+0x98>
   9103c:	910a0063 	add	x3, x3, #0x280
   91040:	913ea021 	add	x1, x1, #0xfa8
   91044:	52800022 	mov	w2, #0x1                   	// #1
   91048:	52800015 	mov	w21, #0x0                   	// #0
   9104c:	94003c5d 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91050:	17ffff97 	b	90eac <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xdc>
   91054:	94003a6f 	bl	9fa10 <CLogger::Get()>
   91058:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   9105c:	b0000121 	adrp	x1, b6000 <From+0x98>
   91060:	910a8063 	add	x3, x3, #0x2a0
   91064:	913ea021 	add	x1, x1, #0xfa8
   91068:	52800022 	mov	w2, #0x1                   	// #1
   9106c:	52800015 	mov	w21, #0x0                   	// #0
   91070:	94003c54 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91074:	17ffff8e 	b	90eac <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xdc>
	...

0000000000091080 <CUSBSerialCP210xDevice::~CUSBSerialCP210xDevice()>:
   91080:	b0000121 	adrp	x1, b6000 <From+0x98>
   91084:	913f6021 	add	x1, x1, #0xfd8
   91088:	f9000001 	str	x1, [x0]
   9108c:	14002885 	b	9b2a0 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>

0000000000091090 <CUSBSerialCP210xDevice::~CUSBSerialCP210xDevice()>:
   91090:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   91094:	b0000121 	adrp	x1, b6000 <From+0x98>
   91098:	913f6021 	add	x1, x1, #0xfd8
   9109c:	910003fd 	mov	x29, sp
   910a0:	f9000bf3 	str	x19, [sp, #16]
   910a4:	aa0003f3 	mov	x19, x0
   910a8:	f9000001 	str	x1, [x0]
   910ac:	9400287d 	bl	9b2a0 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>
   910b0:	aa1303e0 	mov	x0, x19
   910b4:	d2801001 	mov	x1, #0x80                  	// #128
   910b8:	f9400bf3 	ldr	x19, [sp, #16]
   910bc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   910c0:	14005c90 	b	a8300 <operator delete(void*, unsigned long)>
   910c4:	d503201f 	nop
   910c8:	d503201f 	nop
   910cc:	d503201f 	nop

00000000000910d0 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)>:
   910d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   910d4:	910003fd 	mov	x29, sp
   910d8:	b9002fe1 	str	w1, [sp, #44]
   910dc:	f9403c02 	ldr	x2, [x0, #120]
   910e0:	b4000722 	cbz	x2, 911c4 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0xf4>
   910e4:	b9400442 	ldr	w2, [x2, #4]
   910e8:	6b01005f 	cmp	w2, w1
   910ec:	54000403 	b.cc	9116c <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0x9c>  // b.lo, b.ul, b.last
   910f0:	a90153f3 	stp	x19, x20, [sp, #16]
   910f4:	aa0003f3 	mov	x19, x0
   910f8:	97ffe5ee 	bl	8a8b0 <CUSBFunction::GetHost() const>
   910fc:	aa0003f4 	mov	x20, x0
   91100:	b4000700 	cbz	x0, 911e0 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0x110>
   91104:	aa1303e0 	mov	x0, x19
   91108:	97ffe5de 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   9110c:	aa0003e1 	mov	x1, x0
   91110:	52800087 	mov	w7, #0x4                   	// #4
   91114:	aa1403e0 	mov	x0, x20
   91118:	9100b3e6 	add	x6, sp, #0x2c
   9111c:	52800005 	mov	w5, #0x0                   	// #0
   91120:	52800004 	mov	w4, #0x0                   	// #0
   91124:	528003c3 	mov	w3, #0x1e                  	// #30
   91128:	52800822 	mov	w2, #0x41                  	// #65
   9112c:	97ffbfb9 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   91130:	37f80340 	tbnz	w0, #31, 91198 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0xc8>
   91134:	b9402fe0 	ldr	w0, [sp, #44]
   91138:	b9002a60 	str	w0, [x19, #40]
   9113c:	94003a35 	bl	9fa10 <CLogger::Get()>
   91140:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91144:	d0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   91148:	b9402a64 	ldr	w4, [x19, #40]
   9114c:	910ca063 	add	x3, x3, #0x328
   91150:	91012021 	add	x1, x1, #0x48
   91154:	52800082 	mov	w2, #0x4                   	// #4
   91158:	94003c1a 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9115c:	52800020 	mov	w0, #0x1                   	// #1
   91160:	a94153f3 	ldp	x19, x20, [sp, #16]
   91164:	a8c37bfd 	ldp	x29, x30, [sp], #48
   91168:	d65f03c0 	ret
   9116c:	94003a29 	bl	9fa10 <CLogger::Get()>
   91170:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91174:	d0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   91178:	b9402fe4 	ldr	w4, [sp, #44]
   9117c:	910bc063 	add	x3, x3, #0x2f0
   91180:	91012021 	add	x1, x1, #0x48
   91184:	52800022 	mov	w2, #0x1                   	// #1
   91188:	94003c0e 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9118c:	52800000 	mov	w0, #0x0                   	// #0
   91190:	a8c37bfd 	ldp	x29, x30, [sp], #48
   91194:	d65f03c0 	ret
   91198:	94003a1e 	bl	9fa10 <CLogger::Get()>
   9119c:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   911a0:	d0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   911a4:	910c4063 	add	x3, x3, #0x310
   911a8:	91012021 	add	x1, x1, #0x48
   911ac:	52800022 	mov	w2, #0x1                   	// #1
   911b0:	94003c04 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   911b4:	52800000 	mov	w0, #0x0                   	// #0
   911b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   911bc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   911c0:	d65f03c0 	ret
   911c4:	d0000101 	adrp	x1, b3000 <_etext+0x2158>
   911c8:	d0000100 	adrp	x0, b3000 <_etext+0x2158>
   911cc:	a90153f3 	stp	x19, x20, [sp, #16]
   911d0:	910b0021 	add	x1, x1, #0x2c0
   911d4:	910b6000 	add	x0, x0, #0x2d8
   911d8:	52801382 	mov	w2, #0x9c                  	// #156
   911dc:	940032d9 	bl	9dd40 <assertion_failed>
   911e0:	d0000101 	adrp	x1, b3000 <_etext+0x2158>
   911e4:	90000100 	adrp	x0, b1000 <_etext+0x158>
   911e8:	910b0021 	add	x1, x1, #0x2c0
   911ec:	910cc000 	add	x0, x0, #0x330
   911f0:	528014c2 	mov	w2, #0xa6                  	// #166
   911f4:	940032d3 	bl	9dd40 <assertion_failed>
   911f8:	d503201f 	nop
   911fc:	d503201f 	nop

0000000000091200 <CUSBSerialCP210xDevice::CUSBSerialCP210xDevice(CUSBFunction*)>:
   91200:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   91204:	d2800002 	mov	x2, #0x0                   	// #0
   91208:	910003fd 	mov	x29, sp
   9120c:	f9000bf3 	str	x19, [sp, #16]
   91210:	aa0003f3 	mov	x19, x0
   91214:	940029b7 	bl	9b8f0 <CUSBSerialHostDevice::CUSBSerialHostDevice(CUSBFunction*, unsigned long)>
   91218:	b0000120 	adrp	x0, b6000 <From+0x98>
   9121c:	913f6000 	add	x0, x0, #0xfd8
   91220:	f9003e7f 	str	xzr, [x19, #120]
   91224:	f9000260 	str	x0, [x19]
   91228:	f9400bf3 	ldr	x19, [sp, #16]
   9122c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91230:	d65f03c0 	ret
   91234:	d503201f 	nop
   91238:	d503201f 	nop
   9123c:	d503201f 	nop

0000000000091240 <CUSBSerialCP210xDevice::GetDeviceIDTable()>:
   91240:	d0000120 	adrp	x0, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   91244:	91012000 	add	x0, x0, #0x48
   91248:	91002000 	add	x0, x0, #0x8
   9124c:	d65f03c0 	ret

0000000000091250 <CUSBSerialCP210xDevice::Configure()>:
   91250:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   91254:	910003fd 	mov	x29, sp
   91258:	a90153f3 	stp	x19, x20, [sp, #16]
   9125c:	aa0003f4 	mov	x20, x0
   91260:	94002a0c 	bl	9ba90 <CUSBSerialHostDevice::Configure()>
   91264:	72001c13 	ands	w19, w0, #0xff
   91268:	540009e0 	b.eq	913a4 <CUSBSerialCP210xDevice::Configure()+0x154>  // b.none
   9126c:	aa1403e0 	mov	x0, x20
   91270:	a9025bf5 	stp	x21, x22, [sp, #32]
   91274:	97ffe58f 	bl	8a8b0 <CUSBFunction::GetHost() const>
   91278:	aa0003f3 	mov	x19, x0
   9127c:	b4000dc0 	cbz	x0, 91434 <CUSBSerialCP210xDevice::Configure()+0x1e4>
   91280:	9101bff5 	add	x21, sp, #0x6f
   91284:	aa1403e0 	mov	x0, x20
   91288:	927ae6b5 	and	x21, x21, #0xffffffffffffffc0
   9128c:	a9007ebf 	stp	xzr, xzr, [x21]
   91290:	a9017ebf 	stp	xzr, xzr, [x21, #16]
   91294:	a9027ebf 	stp	xzr, xzr, [x21, #32]
   91298:	a9037ebf 	stp	xzr, xzr, [x21, #48]
   9129c:	97ffe579 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   912a0:	aa0003e1 	mov	x1, x0
   912a4:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   912a8:	52800027 	mov	w7, #0x1                   	// #1
   912ac:	aa1503e6 	mov	x6, x21
   912b0:	52800005 	mov	w5, #0x0                   	// #0
   912b4:	5286e164 	mov	w4, #0x370b                	// #14091
   912b8:	12800003 	mov	w3, #0xffffffff            	// #-1
   912bc:	aa1303e0 	mov	x0, x19
   912c0:	97ffbf54 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   912c4:	7100041f 	cmp	w0, #0x1
   912c8:	2a0003e2 	mov	w2, w0
   912cc:	54000821 	b.ne	913d0 <CUSBSerialCP210xDevice::Configure()+0x180>  // b.any
   912d0:	d0000136 	adrp	x22, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   912d4:	910122d6 	add	x22, x22, #0x48
   912d8:	394002a3 	ldrb	w3, [x21]
   912dc:	910042c1 	add	x1, x22, #0x10
   912e0:	f9003e9f 	str	xzr, [x20, #120]
   912e4:	14000005 	b	912f8 <CUSBSerialCP210xDevice::Configure()+0xa8>
   912e8:	b9401c22 	ldr	w2, [x1, #28]
   912ec:	91006021 	add	x1, x1, #0x18
   912f0:	340008e2 	cbz	w2, 9140c <CUSBSerialCP210xDevice::Configure()+0x1bc>
   912f4:	39400022 	ldrb	w2, [x1]
   912f8:	6b03005f 	cmp	w2, w3
   912fc:	54ffff61 	b.ne	912e8 <CUSBSerialCP210xDevice::Configure()+0x98>  // b.any
   91300:	f9003e81 	str	x1, [x20, #120]
   91304:	940039c3 	bl	9fa10 <CLogger::Get()>
   91308:	f9403e84 	ldr	x4, [x20, #120]
   9130c:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91310:	52800062 	mov	w2, #0x3                   	// #3
   91314:	910d6063 	add	x3, x3, #0x358
   91318:	aa1603e1 	mov	x1, x22
   9131c:	f9400884 	ldr	x4, [x4, #16]
   91320:	94003ba8 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91324:	aa1403e0 	mov	x0, x20
   91328:	97ffe556 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   9132c:	aa0003e1 	mov	x1, x0
   91330:	52800007 	mov	w7, #0x0                   	// #0
   91334:	aa1303e0 	mov	x0, x19
   91338:	d2800006 	mov	x6, #0x0                   	// #0
   9133c:	52800005 	mov	w5, #0x0                   	// #0
   91340:	52800024 	mov	w4, #0x1                   	// #1
   91344:	52800003 	mov	w3, #0x0                   	// #0
   91348:	52800822 	mov	w2, #0x41                  	// #65
   9134c:	97ffbf31 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   91350:	37f807e0 	tbnz	w0, #31, 9144c <CUSBSerialCP210xDevice::Configure()+0x1fc>
   91354:	f9400282 	ldr	x2, [x20]
   91358:	5284b001 	mov	w1, #0x2580                	// #9600
   9135c:	aa1403e0 	mov	x0, x20
   91360:	f9403042 	ldr	x2, [x2, #96]
   91364:	d63f0040 	blr	x2
   91368:	72001c13 	ands	w19, w0, #0xff
   9136c:	540004c0 	b.eq	91404 <CUSBSerialCP210xDevice::Configure()+0x1b4>  // b.none
   91370:	f9400284 	ldr	x4, [x20]
   91374:	aa1403e0 	mov	x0, x20
   91378:	52800023 	mov	w3, #0x1                   	// #1
   9137c:	52800002 	mov	w2, #0x0                   	// #0
   91380:	52800101 	mov	w1, #0x8                   	// #8
   91384:	f9403484 	ldr	x4, [x4, #104]
   91388:	d63f0080 	blr	x4
   9138c:	12001c13 	and	w19, w0, #0xff
   91390:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91394:	2a1303e0 	mov	w0, w19
   91398:	a94153f3 	ldp	x19, x20, [sp, #16]
   9139c:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   913a0:	d65f03c0 	ret
   913a4:	9400399b 	bl	9fa10 <CLogger::Get()>
   913a8:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   913ac:	d0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   913b0:	9106a063 	add	x3, x3, #0x1a8
   913b4:	91012021 	add	x1, x1, #0x48
   913b8:	52800022 	mov	w2, #0x1                   	// #1
   913bc:	94003b81 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   913c0:	2a1303e0 	mov	w0, w19
   913c4:	a94153f3 	ldp	x19, x20, [sp, #16]
   913c8:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   913cc:	d65f03c0 	ret
   913d0:	94003990 	bl	9fa10 <CLogger::Get()>
   913d4:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   913d8:	d0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   913dc:	910ce063 	add	x3, x3, #0x338
   913e0:	91012021 	add	x1, x1, #0x48
   913e4:	52800022 	mov	w2, #0x1                   	// #1
   913e8:	52800013 	mov	w19, #0x0                   	// #0
   913ec:	94003b75 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   913f0:	2a1303e0 	mov	w0, w19
   913f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   913f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   913fc:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   91400:	d65f03c0 	ret
   91404:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91408:	17ffffee 	b	913c0 <CUSBSerialCP210xDevice::Configure()+0x170>
   9140c:	94003981 	bl	9fa10 <CLogger::Get()>
   91410:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91414:	394002a4 	ldrb	w4, [x21]
   91418:	aa1603e1 	mov	x1, x22
   9141c:	910e2063 	add	x3, x3, #0x388
   91420:	52800022 	mov	w2, #0x1                   	// #1
   91424:	94003b67 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91428:	52800013 	mov	w19, #0x0                   	// #0
   9142c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91430:	17ffffe4 	b	913c0 <CUSBSerialCP210xDevice::Configure()+0x170>
   91434:	d0000101 	adrp	x1, b3000 <_etext+0x2158>
   91438:	90000100 	adrp	x0, b1000 <_etext+0x158>
   9143c:	910b0021 	add	x1, x1, #0x2c0
   91440:	910cc000 	add	x0, x0, #0x330
   91444:	52800ba2 	mov	w2, #0x5d                  	// #93
   91448:	9400323e 	bl	9dd40 <assertion_failed>
   9144c:	94003971 	bl	9fa10 <CLogger::Get()>
   91450:	aa1603e1 	mov	x1, x22
   91454:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91458:	910da063 	add	x3, x3, #0x368
   9145c:	52800022 	mov	w2, #0x1                   	// #1
   91460:	94003b58 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91464:	52800013 	mov	w19, #0x0                   	// #0
   91468:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9146c:	17ffffd5 	b	913c0 <CUSBSerialCP210xDevice::Configure()+0x170>

0000000000091470 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   91470:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   91474:	910003fd 	mov	x29, sp
   91478:	f9403c05 	ldr	x5, [x0, #120]
   9147c:	a90153f3 	stp	x19, x20, [sp, #16]
   91480:	b4000ea5 	cbz	x5, 91654 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1e4>
   91484:	2a0103f3 	mov	w19, w1
   91488:	b94008a1 	ldr	w1, [x5, #8]
   9148c:	a90363f7 	stp	x23, x24, [sp, #48]
   91490:	6b13003f 	cmp	w1, w19
   91494:	54000c4c 	b.gt	9161c <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1ac>
   91498:	b9400ca1 	ldr	w1, [x5, #12]
   9149c:	2a0303f4 	mov	w20, w3
   914a0:	6b03003f 	cmp	w1, w3
   914a4:	5400042b 	b.lt	91528 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xb8>  // b.tstop
   914a8:	a9025bf5 	stp	x21, x22, [sp, #32]
   914ac:	aa0003f6 	mov	x22, x0
   914b0:	2a0203f5 	mov	w21, w2
   914b4:	97ffe4ff 	bl	8a8b0 <CUSBFunction::GetHost() const>
   914b8:	aa0003f7 	mov	x23, x0
   914bc:	b4001100 	cbz	x0, 916dc <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x26c>
   914c0:	910103e0 	add	x0, sp, #0x40
   914c4:	94004c63 	bl	a4650 <CString::CString()>
   914c8:	51001660 	sub	w0, w19, #0x5
   914cc:	71000c1f 	cmp	w0, #0x3
   914d0:	54000488 	b.hi	91560 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xf0>  // b.pmore
   914d4:	d0000101 	adrp	x1, b3000 <_etext+0x2158>
   914d8:	2a1303e2 	mov	w2, w19
   914dc:	91086021 	add	x1, x1, #0x218
   914e0:	910103e0 	add	x0, sp, #0x40
   914e4:	94005293 	bl	a5f30 <CString::Format(char const*, ...)>
   914e8:	710006bf 	cmp	w21, #0x1
   914ec:	53181e78 	ubfiz	w24, w19, #8, #8
   914f0:	540008a0 	b.eq	91604 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x194>  // b.none
   914f4:	71000abf 	cmp	w21, #0x2
   914f8:	54000560 	b.eq	915a4 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x134>  // b.none
   914fc:	340007b5 	cbz	w21, 915f0 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x180>
   91500:	94003944 	bl	9fa10 <CLogger::Get()>
   91504:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91508:	d0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9150c:	2a1503e4 	mov	w4, w21
   91510:	91094063 	add	x3, x3, #0x250
   91514:	91012021 	add	x1, x1, #0x48
   91518:	52800022 	mov	w2, #0x1                   	// #1
   9151c:	52800017 	mov	w23, #0x0                   	// #0
   91520:	94003b28 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91524:	14000018 	b	91584 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x114>
   91528:	9400393a 	bl	9fa10 <CLogger::Get()>
   9152c:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91530:	d0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   91534:	2a1403e4 	mov	w4, w20
   91538:	910f2063 	add	x3, x3, #0x3c8
   9153c:	91012021 	add	x1, x1, #0x48
   91540:	52800022 	mov	w2, #0x1                   	// #1
   91544:	94003b1f 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91548:	52800017 	mov	w23, #0x0                   	// #0
   9154c:	a94153f3 	ldp	x19, x20, [sp, #16]
   91550:	2a1703e0 	mov	w0, w23
   91554:	a94363f7 	ldp	x23, x24, [sp, #48]
   91558:	a8c67bfd 	ldp	x29, x30, [sp], #96
   9155c:	d65f03c0 	ret
   91560:	9400392c 	bl	9fa10 <CLogger::Get()>
   91564:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91568:	d0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9156c:	2a1303e4 	mov	w4, w19
   91570:	91088063 	add	x3, x3, #0x220
   91574:	91012021 	add	x1, x1, #0x48
   91578:	52800022 	mov	w2, #0x1                   	// #1
   9157c:	52800017 	mov	w23, #0x0                   	// #0
   91580:	94003b10 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91584:	910103e0 	add	x0, sp, #0x40
   91588:	94004bf6 	bl	a4560 <CString::~CString()>
   9158c:	2a1703e0 	mov	w0, w23
   91590:	a94153f3 	ldp	x19, x20, [sp, #16]
   91594:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91598:	a94363f7 	ldp	x23, x24, [sp, #48]
   9159c:	a8c67bfd 	ldp	x29, x30, [sp], #96
   915a0:	d65f03c0 	ret
   915a4:	d0000101 	adrp	x1, b3000 <_etext+0x2158>
   915a8:	91092021 	add	x1, x1, #0x248
   915ac:	910103e0 	add	x0, sp, #0x40
   915b0:	321b0318 	orr	w24, w24, #0x20
   915b4:	94004cc7 	bl	a48d0 <CString::Append(char const*)>
   915b8:	7100069f 	cmp	w20, #0x1
   915bc:	54000860 	b.eq	916c8 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x258>  // b.none
   915c0:	71000a9f 	cmp	w20, #0x2
   915c4:	54000580 	b.eq	91674 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x204>  // b.none
   915c8:	94003912 	bl	9fa10 <CLogger::Get()>
   915cc:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   915d0:	d0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   915d4:	2a1403e4 	mov	w4, w20
   915d8:	9109a063 	add	x3, x3, #0x268
   915dc:	91012021 	add	x1, x1, #0x48
   915e0:	52800022 	mov	w2, #0x1                   	// #1
   915e4:	52800017 	mov	w23, #0x0                   	// #0
   915e8:	94003af6 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   915ec:	17ffffe6 	b	91584 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x114>
   915f0:	d0000101 	adrp	x1, b3000 <_etext+0x2158>
   915f4:	9108e021 	add	x1, x1, #0x238
   915f8:	910103e0 	add	x0, sp, #0x40
   915fc:	94004cb5 	bl	a48d0 <CString::Append(char const*)>
   91600:	17ffffee 	b	915b8 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x148>
   91604:	d0000101 	adrp	x1, b3000 <_etext+0x2158>
   91608:	91090021 	add	x1, x1, #0x240
   9160c:	910103e0 	add	x0, sp, #0x40
   91610:	321c0318 	orr	w24, w24, #0x10
   91614:	94004caf 	bl	a48d0 <CString::Append(char const*)>
   91618:	17ffffe8 	b	915b8 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x148>
   9161c:	940038fd 	bl	9fa10 <CLogger::Get()>
   91620:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91624:	d0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   91628:	2a1303e4 	mov	w4, w19
   9162c:	910ea063 	add	x3, x3, #0x3a8
   91630:	91012021 	add	x1, x1, #0x48
   91634:	52800022 	mov	w2, #0x1                   	// #1
   91638:	94003ae2 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9163c:	52800017 	mov	w23, #0x0                   	// #0
   91640:	a94153f3 	ldp	x19, x20, [sp, #16]
   91644:	2a1703e0 	mov	w0, w23
   91648:	a94363f7 	ldp	x23, x24, [sp, #48]
   9164c:	a8c67bfd 	ldp	x29, x30, [sp], #96
   91650:	d65f03c0 	ret
   91654:	d0000101 	adrp	x1, b3000 <_etext+0x2158>
   91658:	d0000100 	adrp	x0, b3000 <_etext+0x2158>
   9165c:	a9025bf5 	stp	x21, x22, [sp, #32]
   91660:	910b0021 	add	x1, x1, #0x2c0
   91664:	910b6000 	add	x0, x0, #0x2d8
   91668:	528017c2 	mov	w2, #0xbe                  	// #190
   9166c:	a90363f7 	stp	x23, x24, [sp, #48]
   91670:	940031b4 	bl	9dd40 <assertion_failed>
   91674:	d0000101 	adrp	x1, b3000 <_etext+0x2158>
   91678:	91044021 	add	x1, x1, #0x110
   9167c:	910103e0 	add	x0, sp, #0x40
   91680:	321f0318 	orr	w24, w24, #0x2
   91684:	94004c93 	bl	a48d0 <CString::Append(char const*)>
   91688:	aa1603e0 	mov	x0, x22
   9168c:	97ffe47d 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   91690:	aa0003e1 	mov	x1, x0
   91694:	2a1803e4 	mov	w4, w24
   91698:	aa1703e0 	mov	x0, x23
   9169c:	52800007 	mov	w7, #0x0                   	// #0
   916a0:	d2800006 	mov	x6, #0x0                   	// #0
   916a4:	52800005 	mov	w5, #0x0                   	// #0
   916a8:	52800063 	mov	w3, #0x3                   	// #3
   916ac:	52800822 	mov	w2, #0x41                  	// #65
   916b0:	97ffbe58 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   916b4:	37f80200 	tbnz	w0, #31, 916f4 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x284>
   916b8:	52800037 	mov	w23, #0x1                   	// #1
   916bc:	2905d6d3 	stp	w19, w21, [x22, #44]
   916c0:	b90036d4 	str	w20, [x22, #52]
   916c4:	17ffffb0 	b	91584 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x114>
   916c8:	d0000101 	adrp	x1, b3000 <_etext+0x2158>
   916cc:	9134e021 	add	x1, x1, #0xd38
   916d0:	910103e0 	add	x0, sp, #0x40
   916d4:	94004c7f 	bl	a48d0 <CString::Append(char const*)>
   916d8:	17ffffec 	b	91688 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x218>
   916dc:	d0000101 	adrp	x1, b3000 <_etext+0x2158>
   916e0:	90000100 	adrp	x0, b1000 <_etext+0x158>
   916e4:	910b0021 	add	x1, x1, #0x2c0
   916e8:	910cc000 	add	x0, x0, #0x330
   916ec:	528019c2 	mov	w2, #0xce                  	// #206
   916f0:	94003194 	bl	9dd40 <assertion_failed>
   916f4:	940038c7 	bl	9fa10 <CLogger::Get()>
   916f8:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   916fc:	d0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   91700:	910fa063 	add	x3, x3, #0x3e8
   91704:	91012021 	add	x1, x1, #0x48
   91708:	52800022 	mov	w2, #0x1                   	// #1
   9170c:	52800017 	mov	w23, #0x0                   	// #0
   91710:	94003aac 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91714:	17ffff9c 	b	91584 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x114>
	...

0000000000091720 <CUSBSerialPL2303Device::~CUSBSerialPL2303Device()>:
   91720:	d0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   91724:	9105c021 	add	x1, x1, #0x170
   91728:	f9000001 	str	x1, [x0]
   9172c:	140026dd 	b	9b2a0 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>

0000000000091730 <CUSBSerialPL2303Device::~CUSBSerialPL2303Device()>:
   91730:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   91734:	d0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   91738:	9105c021 	add	x1, x1, #0x170
   9173c:	910003fd 	mov	x29, sp
   91740:	f9000bf3 	str	x19, [sp, #16]
   91744:	aa0003f3 	mov	x19, x0
   91748:	f9000001 	str	x1, [x0]
   9174c:	940026d5 	bl	9b2a0 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>
   91750:	aa1303e0 	mov	x0, x19
   91754:	d2800f01 	mov	x1, #0x78                  	// #120
   91758:	f9400bf3 	ldr	x19, [sp, #16]
   9175c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91760:	14005ae8 	b	a8300 <operator delete(void*, unsigned long)>
   91764:	d503201f 	nop
   91768:	d503201f 	nop
   9176c:	d503201f 	nop

0000000000091770 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)>:
   91770:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
   91774:	910003fd 	mov	x29, sp
   91778:	a90153f3 	stp	x19, x20, [sp, #16]
   9177c:	a9025bf5 	stp	x21, x22, [sp, #32]
   91780:	aa0003f5 	mov	x21, x0
   91784:	b9003fe1 	str	w1, [sp, #60]
   91788:	97ffe44a 	bl	8a8b0 <CUSBFunction::GetHost() const>
   9178c:	b4000720 	cbz	x0, 91870 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0x100>
   91790:	9101fff3 	add	x19, sp, #0x7f
   91794:	aa0003f4 	mov	x20, x0
   91798:	927ae673 	and	x19, x19, #0xffffffffffffffc0
   9179c:	aa1503e0 	mov	x0, x21
   917a0:	a9007e7f 	stp	xzr, xzr, [x19]
   917a4:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   917a8:	a9027e7f 	stp	xzr, xzr, [x19, #32]
   917ac:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   917b0:	97ffe434 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   917b4:	aa0003e1 	mov	x1, x0
   917b8:	528000e7 	mov	w7, #0x7                   	// #7
   917bc:	aa1303e6 	mov	x6, x19
   917c0:	52800005 	mov	w5, #0x0                   	// #0
   917c4:	52800004 	mov	w4, #0x0                   	// #0
   917c8:	52800423 	mov	w3, #0x21                  	// #33
   917cc:	12800bc2 	mov	w2, #0xffffffa1            	// #-95
   917d0:	aa1403e0 	mov	x0, x20
   917d4:	97ffbe0f 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   917d8:	71001c1f 	cmp	w0, #0x7
   917dc:	2a0003f6 	mov	w22, w0
   917e0:	54000301 	b.ne	91840 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0xd0>  // b.any
   917e4:	d2800082 	mov	x2, #0x4                   	// #4
   917e8:	9100f3e1 	add	x1, sp, #0x3c
   917ec:	aa1303e0 	mov	x0, x19
   917f0:	94005816 	bl	a7848 <memcpy>
   917f4:	aa1503e0 	mov	x0, x21
   917f8:	97ffe422 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   917fc:	aa0003e1 	mov	x1, x0
   91800:	2a1603e7 	mov	w7, w22
   91804:	aa1303e6 	mov	x6, x19
   91808:	aa1403e0 	mov	x0, x20
   9180c:	52800005 	mov	w5, #0x0                   	// #0
   91810:	52800004 	mov	w4, #0x0                   	// #0
   91814:	52800403 	mov	w3, #0x20                  	// #32
   91818:	52800422 	mov	w2, #0x21                  	// #33
   9181c:	97ffbdfd 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   91820:	37f80340 	tbnz	w0, #31, 91888 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0x118>
   91824:	b9403fe1 	ldr	w1, [sp, #60]
   91828:	52800020 	mov	w0, #0x1                   	// #1
   9182c:	b9002aa1 	str	w1, [x21, #40]
   91830:	a94153f3 	ldp	x19, x20, [sp, #16]
   91834:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91838:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   9183c:	d65f03c0 	ret
   91840:	94003874 	bl	9fa10 <CLogger::Get()>
   91844:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91848:	d0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9184c:	91118063 	add	x3, x3, #0x460
   91850:	91078021 	add	x1, x1, #0x1e0
   91854:	52800022 	mov	w2, #0x1                   	// #1
   91858:	94003a5a 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9185c:	52800000 	mov	w0, #0x0                   	// #0
   91860:	a94153f3 	ldp	x19, x20, [sp, #16]
   91864:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91868:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   9186c:	d65f03c0 	ret
   91870:	d0000101 	adrp	x1, b3000 <_etext+0x2158>
   91874:	90000100 	adrp	x0, b1000 <_etext+0x158>
   91878:	91112021 	add	x1, x1, #0x448
   9187c:	910cc000 	add	x0, x0, #0x330
   91880:	52801da2 	mov	w2, #0xed                  	// #237
   91884:	9400312f 	bl	9dd40 <assertion_failed>
   91888:	94003862 	bl	9fa10 <CLogger::Get()>
   9188c:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91890:	d0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   91894:	910c4063 	add	x3, x3, #0x310
   91898:	91078021 	add	x1, x1, #0x1e0
   9189c:	52800022 	mov	w2, #0x1                   	// #1
   918a0:	94003a48 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   918a4:	52800000 	mov	w0, #0x0                   	// #0
   918a8:	17ffffe2 	b	91830 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0xc0>
   918ac:	d503201f 	nop

00000000000918b0 <CUSBSerialPL2303Device::CUSBSerialPL2303Device(CUSBFunction*)>:
   918b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   918b4:	d2800002 	mov	x2, #0x0                   	// #0
   918b8:	910003fd 	mov	x29, sp
   918bc:	f9000bf3 	str	x19, [sp, #16]
   918c0:	aa0003f3 	mov	x19, x0
   918c4:	9400280b 	bl	9b8f0 <CUSBSerialHostDevice::CUSBSerialHostDevice(CUSBFunction*, unsigned long)>
   918c8:	d0000120 	adrp	x0, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   918cc:	9105c000 	add	x0, x0, #0x170
   918d0:	f9000260 	str	x0, [x19]
   918d4:	f9400bf3 	ldr	x19, [sp, #16]
   918d8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   918dc:	d65f03c0 	ret

00000000000918e0 <CUSBSerialPL2303Device::GetDeviceIDTable()>:
   918e0:	d0000120 	adrp	x0, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   918e4:	91078000 	add	x0, x0, #0x1e0
   918e8:	91002000 	add	x0, x0, #0x8
   918ec:	d65f03c0 	ret

00000000000918f0 <CUSBSerialPL2303Device::Configure()>:
   918f0:	a9b37bfd 	stp	x29, x30, [sp, #-208]!
   918f4:	910003fd 	mov	x29, sp
   918f8:	a90153f3 	stp	x19, x20, [sp, #16]
   918fc:	aa0003f4 	mov	x20, x0
   91900:	a9025bf5 	stp	x21, x22, [sp, #32]
   91904:	94002863 	bl	9ba90 <CUSBSerialHostDevice::Configure()>
   91908:	72001c15 	ands	w21, w0, #0xff
   9190c:	54000920 	b.eq	91a30 <CUSBSerialPL2303Device::Configure()+0x140>  // b.none
   91910:	aa1403e0 	mov	x0, x20
   91914:	a90363f7 	stp	x23, x24, [sp, #48]
   91918:	b0000116 	adrp	x22, b2000 <_etext+0x1158>
   9191c:	910ba2d6 	add	x22, x22, #0x2e8
   91920:	91027ff3 	add	x19, sp, #0x9f
   91924:	927ae673 	and	x19, x19, #0xffffffffffffffc0
   91928:	97ffe3ca 	bl	8a850 <CUSBFunction::GetDevice() const>
   9192c:	97ffdbdd 	bl	888a0 <CUSBDevice::GetDeviceDescriptor() const>
   91930:	aa0003f5 	mov	x21, x0
   91934:	aa1603e1 	mov	x1, x22
   91938:	910103e0 	add	x0, sp, #0x40
   9193c:	94004b4d 	bl	a4670 <CString::CString(char const*)>
   91940:	394012a2 	ldrb	w2, [x21, #4]
   91944:	7100085f 	cmp	w2, #0x2
   91948:	540012c0 	b.eq	91ba0 <CUSBSerialPL2303Device::Configure()+0x2b0>  // b.none
   9194c:	39401ea0 	ldrb	w0, [x21, #7]
   91950:	7101001f 	cmp	w0, #0x40
   91954:	54001120 	b.eq	91b78 <CUSBSerialPL2303Device::Configure()+0x288>  // b.none
   91958:	51000442 	sub	w2, w2, #0x1
   9195c:	12001c42 	and	w2, w2, #0xff
   91960:	7103f45f 	cmp	w2, #0xfd
   91964:	54001148 	b.hi	91b8c <CUSBSerialPL2303Device::Configure()+0x29c>  // b.pmore
   91968:	9400382a 	bl	9fa10 <CLogger::Get()>
   9196c:	aa0003f5 	mov	x21, x0
   91970:	910103e0 	add	x0, sp, #0x40
   91974:	94004b7b 	bl	a4760 <CString::operator char const*() const>
   91978:	d0000137 	adrp	x23, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9197c:	910782f7 	add	x23, x23, #0x1e0
   91980:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91984:	aa0003e4 	mov	x4, x0
   91988:	aa1703e1 	mov	x1, x23
   9198c:	aa1503e0 	mov	x0, x21
   91990:	91120063 	add	x3, x3, #0x480
   91994:	52800062 	mov	w2, #0x3                   	// #3
   91998:	94003a0a 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9199c:	aa1403e0 	mov	x0, x20
   919a0:	97ffe3c4 	bl	8a8b0 <CUSBFunction::GetHost() const>
   919a4:	aa0003f5 	mov	x21, x0
   919a8:	b4001140 	cbz	x0, 91bd0 <CUSBSerialPL2303Device::Configure()+0x2e0>
   919ac:	aa1403e0 	mov	x0, x20
   919b0:	a9007e7f 	stp	xzr, xzr, [x19]
   919b4:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   919b8:	a9027e7f 	stp	xzr, xzr, [x19, #32]
   919bc:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   919c0:	97ffe3b0 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   919c4:	52800027 	mov	w7, #0x1                   	// #1
   919c8:	aa0003e1 	mov	x1, x0
   919cc:	2a0703e3 	mov	w3, w7
   919d0:	aa1303e6 	mov	x6, x19
   919d4:	52800005 	mov	w5, #0x0                   	// #0
   919d8:	128f6f64 	mov	w4, #0xffff8484            	// #-31612
   919dc:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   919e0:	aa1503e0 	mov	x0, x21
   919e4:	97ffbd8b 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   919e8:	7100041f 	cmp	w0, #0x1
   919ec:	2a0003f6 	mov	w22, w0
   919f0:	54000380 	b.eq	91a60 <CUSBSerialPL2303Device::Configure()+0x170>  // b.none
   919f4:	94003807 	bl	9fa10 <CLogger::Get()>
   919f8:	aa1703e1 	mov	x1, x23
   919fc:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91a00:	91128063 	add	x3, x3, #0x4a0
   91a04:	52800022 	mov	w2, #0x1                   	// #1
   91a08:	52800015 	mov	w21, #0x0                   	// #0
   91a0c:	940039ed 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91a10:	910103e0 	add	x0, sp, #0x40
   91a14:	94004ad3 	bl	a4560 <CString::~CString()>
   91a18:	2a1503e0 	mov	w0, w21
   91a1c:	a94153f3 	ldp	x19, x20, [sp, #16]
   91a20:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91a24:	a94363f7 	ldp	x23, x24, [sp, #48]
   91a28:	a8cd7bfd 	ldp	x29, x30, [sp], #208
   91a2c:	d65f03c0 	ret
   91a30:	940037f8 	bl	9fa10 <CLogger::Get()>
   91a34:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91a38:	d0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   91a3c:	9106a063 	add	x3, x3, #0x1a8
   91a40:	91078021 	add	x1, x1, #0x1e0
   91a44:	52800022 	mov	w2, #0x1                   	// #1
   91a48:	940039de 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91a4c:	2a1503e0 	mov	w0, w21
   91a50:	a94153f3 	ldp	x19, x20, [sp, #16]
   91a54:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91a58:	a8cd7bfd 	ldp	x29, x30, [sp], #208
   91a5c:	d65f03c0 	ret
   91a60:	aa1403e0 	mov	x0, x20
   91a64:	97ffe387 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   91a68:	aa0003e1 	mov	x1, x0
   91a6c:	52800007 	mov	w7, #0x0                   	// #0
   91a70:	d2800006 	mov	x6, #0x0                   	// #0
   91a74:	52800005 	mov	w5, #0x0                   	// #0
   91a78:	52808084 	mov	w4, #0x404                 	// #1028
   91a7c:	2a1603e3 	mov	w3, w22
   91a80:	52800802 	mov	w2, #0x40                  	// #64
   91a84:	aa1503e0 	mov	x0, x21
   91a88:	97ffbd62 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   91a8c:	37f80920 	tbnz	w0, #31, 91bb0 <CUSBSerialPL2303Device::Configure()+0x2c0>
   91a90:	aa1403e0 	mov	x0, x20
   91a94:	97ffe37b 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   91a98:	aa0003e1 	mov	x1, x0
   91a9c:	2a1603e7 	mov	w7, w22
   91aa0:	aa1303e6 	mov	x6, x19
   91aa4:	52800005 	mov	w5, #0x0                   	// #0
   91aa8:	128f6f64 	mov	w4, #0xffff8484            	// #-31612
   91aac:	2a1603e3 	mov	w3, w22
   91ab0:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   91ab4:	aa1503e0 	mov	x0, x21
   91ab8:	97ffbd56 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   91abc:	7100041f 	cmp	w0, #0x1
   91ac0:	2a0003f8 	mov	w24, w0
   91ac4:	540004a1 	b.ne	91b58 <CUSBSerialPL2303Device::Configure()+0x268>  // b.any
   91ac8:	aa1403e0 	mov	x0, x20
   91acc:	97ffe36d 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   91ad0:	aa0003e1 	mov	x1, x0
   91ad4:	2a1803e7 	mov	w7, w24
   91ad8:	aa1303e6 	mov	x6, x19
   91adc:	52800005 	mov	w5, #0x0                   	// #0
   91ae0:	128f8f84 	mov	w4, #0xffff8383            	// #-31869
   91ae4:	2a1803e3 	mov	w3, w24
   91ae8:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   91aec:	aa1503e0 	mov	x0, x21
   91af0:	97ffbd48 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   91af4:	7100041f 	cmp	w0, #0x1
   91af8:	2a0003f6 	mov	w22, w0
   91afc:	54000120 	b.eq	91b20 <CUSBSerialPL2303Device::Configure()+0x230>  // b.none
   91b00:	940037c4 	bl	9fa10 <CLogger::Get()>
   91b04:	2a1803e2 	mov	w2, w24
   91b08:	aa1703e1 	mov	x1, x23
   91b0c:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91b10:	91134063 	add	x3, x3, #0x4d0
   91b14:	52800015 	mov	w21, #0x0                   	// #0
   91b18:	940039aa 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91b1c:	17ffffbd 	b	91a10 <CUSBSerialPL2303Device::Configure()+0x120>
   91b20:	aa1403e0 	mov	x0, x20
   91b24:	97ffe357 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   91b28:	aa0003e1 	mov	x1, x0
   91b2c:	2a1603e7 	mov	w7, w22
   91b30:	aa1303e6 	mov	x6, x19
   91b34:	52800005 	mov	w5, #0x0                   	// #0
   91b38:	128f6f64 	mov	w4, #0xffff8484            	// #-31612
   91b3c:	2a1603e3 	mov	w3, w22
   91b40:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   91b44:	aa1503e0 	mov	x0, x21
   91b48:	97ffbd32 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   91b4c:	7100041f 	cmp	w0, #0x1
   91b50:	2a0003f8 	mov	w24, w0
   91b54:	540004a0 	b.eq	91be8 <CUSBSerialPL2303Device::Configure()+0x2f8>  // b.none
   91b58:	940037ae 	bl	9fa10 <CLogger::Get()>
   91b5c:	2a1603e2 	mov	w2, w22
   91b60:	aa1703e1 	mov	x1, x23
   91b64:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91b68:	91128063 	add	x3, x3, #0x4a0
   91b6c:	52800015 	mov	w21, #0x0                   	// #0
   91b70:	94003994 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91b74:	17ffffa7 	b	91a10 <CUSBSerialPL2303Device::Configure()+0x120>
   91b78:	d0000101 	adrp	x1, b3000 <_etext+0x2158>
   91b7c:	9111e021 	add	x1, x1, #0x478
   91b80:	910103e0 	add	x0, sp, #0x40
   91b84:	94004aff 	bl	a4780 <CString::operator=(char const*)>
   91b88:	17ffff78 	b	91968 <CUSBSerialPL2303Device::Configure()+0x78>
   91b8c:	d0000101 	adrp	x1, b3000 <_etext+0x2158>
   91b90:	9134e021 	add	x1, x1, #0xd38
   91b94:	910103e0 	add	x0, sp, #0x40
   91b98:	94004afa 	bl	a4780 <CString::operator=(char const*)>
   91b9c:	17ffff73 	b	91968 <CUSBSerialPL2303Device::Configure()+0x78>
   91ba0:	aa1603e1 	mov	x1, x22
   91ba4:	910103e0 	add	x0, sp, #0x40
   91ba8:	94004af6 	bl	a4780 <CString::operator=(char const*)>
   91bac:	17ffff6f 	b	91968 <CUSBSerialPL2303Device::Configure()+0x78>
   91bb0:	94003798 	bl	9fa10 <CLogger::Get()>
   91bb4:	2a1603e2 	mov	w2, w22
   91bb8:	aa1703e1 	mov	x1, x23
   91bbc:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91bc0:	9112e063 	add	x3, x3, #0x4b8
   91bc4:	52800015 	mov	w21, #0x0                   	// #0
   91bc8:	9400397e 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91bcc:	17ffff91 	b	91a10 <CUSBSerialPL2303Device::Configure()+0x120>
   91bd0:	d0000101 	adrp	x1, b3000 <_etext+0x2158>
   91bd4:	90000100 	adrp	x0, b1000 <_etext+0x158>
   91bd8:	91112021 	add	x1, x1, #0x448
   91bdc:	910cc000 	add	x0, x0, #0x330
   91be0:	52800942 	mov	w2, #0x4a                  	// #74
   91be4:	94003057 	bl	9dd40 <assertion_failed>
   91be8:	aa1403e0 	mov	x0, x20
   91bec:	97ffe325 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   91bf0:	aa0003e1 	mov	x1, x0
   91bf4:	52800007 	mov	w7, #0x0                   	// #0
   91bf8:	d2800006 	mov	x6, #0x0                   	// #0
   91bfc:	2a1803e5 	mov	w5, w24
   91c00:	52808084 	mov	w4, #0x404                 	// #1028
   91c04:	2a1803e3 	mov	w3, w24
   91c08:	52800802 	mov	w2, #0x40                  	// #64
   91c0c:	aa1503e0 	mov	x0, x21
   91c10:	97ffbd00 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   91c14:	37f80460 	tbnz	w0, #31, 91ca0 <CUSBSerialPL2303Device::Configure()+0x3b0>
   91c18:	aa1403e0 	mov	x0, x20
   91c1c:	97ffe319 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   91c20:	aa0003e1 	mov	x1, x0
   91c24:	2a1803e7 	mov	w7, w24
   91c28:	aa1303e6 	mov	x6, x19
   91c2c:	52800005 	mov	w5, #0x0                   	// #0
   91c30:	128f6f64 	mov	w4, #0xffff8484            	// #-31612
   91c34:	2a1803e3 	mov	w3, w24
   91c38:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   91c3c:	aa1503e0 	mov	x0, x21
   91c40:	97ffbcf4 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   91c44:	7100041f 	cmp	w0, #0x1
   91c48:	2a0003f6 	mov	w22, w0
   91c4c:	54000080 	b.eq	91c5c <CUSBSerialPL2303Device::Configure()+0x36c>  // b.none
   91c50:	94003770 	bl	9fa10 <CLogger::Get()>
   91c54:	2a1803e2 	mov	w2, w24
   91c58:	17ffffc2 	b	91b60 <CUSBSerialPL2303Device::Configure()+0x270>
   91c5c:	aa1403e0 	mov	x0, x20
   91c60:	97ffe308 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   91c64:	aa1303e6 	mov	x6, x19
   91c68:	aa0003e1 	mov	x1, x0
   91c6c:	2a1603e7 	mov	w7, w22
   91c70:	52800005 	mov	w5, #0x0                   	// #0
   91c74:	128f8f84 	mov	w4, #0xffff8383            	// #-31869
   91c78:	2a1603e3 	mov	w3, w22
   91c7c:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   91c80:	aa1503e0 	mov	x0, x21
   91c84:	97ffbce3 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   91c88:	7100041f 	cmp	w0, #0x1
   91c8c:	2a0003f3 	mov	w19, w0
   91c90:	540000e0 	b.eq	91cac <CUSBSerialPL2303Device::Configure()+0x3bc>  // b.none
   91c94:	9400375f 	bl	9fa10 <CLogger::Get()>
   91c98:	2a1603e2 	mov	w2, w22
   91c9c:	17ffff9b 	b	91b08 <CUSBSerialPL2303Device::Configure()+0x218>
   91ca0:	9400375c 	bl	9fa10 <CLogger::Get()>
   91ca4:	2a1803e2 	mov	w2, w24
   91ca8:	17ffffc4 	b	91bb8 <CUSBSerialPL2303Device::Configure()+0x2c8>
   91cac:	aa1403e0 	mov	x0, x20
   91cb0:	97ffe2f4 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   91cb4:	aa0003e1 	mov	x1, x0
   91cb8:	52800007 	mov	w7, #0x0                   	// #0
   91cbc:	d2800006 	mov	x6, #0x0                   	// #0
   91cc0:	2a1303e5 	mov	w5, w19
   91cc4:	2a1303e3 	mov	w3, w19
   91cc8:	52800004 	mov	w4, #0x0                   	// #0
   91ccc:	52800802 	mov	w2, #0x40                  	// #64
   91cd0:	aa1503e0 	mov	x0, x21
   91cd4:	97ffbccf 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   91cd8:	37f806a0 	tbnz	w0, #31, 91dac <CUSBSerialPL2303Device::Configure()+0x4bc>
   91cdc:	aa1403e0 	mov	x0, x20
   91ce0:	97ffe2e8 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   91ce4:	52800024 	mov	w4, #0x1                   	// #1
   91ce8:	aa0003e1 	mov	x1, x0
   91cec:	2a0403e3 	mov	w3, w4
   91cf0:	52800007 	mov	w7, #0x0                   	// #0
   91cf4:	d2800006 	mov	x6, #0x0                   	// #0
   91cf8:	52800005 	mov	w5, #0x0                   	// #0
   91cfc:	52800802 	mov	w2, #0x40                  	// #64
   91d00:	aa1503e0 	mov	x0, x21
   91d04:	97ffbcc3 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   91d08:	37f80620 	tbnz	w0, #31, 91dcc <CUSBSerialPL2303Device::Configure()+0x4dc>
   91d0c:	aa1403e0 	mov	x0, x20
   91d10:	97ffe2dc 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   91d14:	aa0003e1 	mov	x1, x0
   91d18:	52800007 	mov	w7, #0x0                   	// #0
   91d1c:	d2800006 	mov	x6, #0x0                   	// #0
   91d20:	52800885 	mov	w5, #0x44                  	// #68
   91d24:	52800044 	mov	w4, #0x2                   	// #2
   91d28:	52800023 	mov	w3, #0x1                   	// #1
   91d2c:	52800802 	mov	w2, #0x40                  	// #64
   91d30:	aa1503e0 	mov	x0, x21
   91d34:	97ffbcb7 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   91d38:	37f805a0 	tbnz	w0, #31, 91dec <CUSBSerialPL2303Device::Configure()+0x4fc>
   91d3c:	aa1403e0 	mov	x0, x20
   91d40:	97ffe2d0 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   91d44:	aa0003e1 	mov	x1, x0
   91d48:	52800007 	mov	w7, #0x0                   	// #0
   91d4c:	aa1503e0 	mov	x0, x21
   91d50:	d2800006 	mov	x6, #0x0                   	// #0
   91d54:	52800005 	mov	w5, #0x0                   	// #0
   91d58:	52800004 	mov	w4, #0x0                   	// #0
   91d5c:	52800023 	mov	w3, #0x1                   	// #1
   91d60:	52800802 	mov	w2, #0x40                  	// #64
   91d64:	97ffbcab 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   91d68:	37f80220 	tbnz	w0, #31, 91dac <CUSBSerialPL2303Device::Configure()+0x4bc>
   91d6c:	f9400282 	ldr	x2, [x20]
   91d70:	5284b001 	mov	w1, #0x2580                	// #9600
   91d74:	aa1403e0 	mov	x0, x20
   91d78:	f9403042 	ldr	x2, [x2, #96]
   91d7c:	d63f0040 	blr	x2
   91d80:	72001c15 	ands	w21, w0, #0xff
   91d84:	54ffe460 	b.eq	91a10 <CUSBSerialPL2303Device::Configure()+0x120>  // b.none
   91d88:	f9400284 	ldr	x4, [x20]
   91d8c:	aa1403e0 	mov	x0, x20
   91d90:	52800023 	mov	w3, #0x1                   	// #1
   91d94:	52800002 	mov	w2, #0x0                   	// #0
   91d98:	52800101 	mov	w1, #0x8                   	// #8
   91d9c:	f9403484 	ldr	x4, [x4, #104]
   91da0:	d63f0080 	blr	x4
   91da4:	12001c15 	and	w21, w0, #0xff
   91da8:	17ffff1a 	b	91a10 <CUSBSerialPL2303Device::Configure()+0x120>
   91dac:	94003719 	bl	9fa10 <CLogger::Get()>
   91db0:	aa1703e1 	mov	x1, x23
   91db4:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91db8:	9113a063 	add	x3, x3, #0x4e8
   91dbc:	52800022 	mov	w2, #0x1                   	// #1
   91dc0:	52800015 	mov	w21, #0x0                   	// #0
   91dc4:	940038ff 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91dc8:	17ffff12 	b	91a10 <CUSBSerialPL2303Device::Configure()+0x120>
   91dcc:	94003711 	bl	9fa10 <CLogger::Get()>
   91dd0:	aa1703e1 	mov	x1, x23
   91dd4:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91dd8:	9113e063 	add	x3, x3, #0x4f8
   91ddc:	52800022 	mov	w2, #0x1                   	// #1
   91de0:	52800015 	mov	w21, #0x0                   	// #0
   91de4:	940038f7 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91de8:	17ffff0a 	b	91a10 <CUSBSerialPL2303Device::Configure()+0x120>
   91dec:	94003709 	bl	9fa10 <CLogger::Get()>
   91df0:	aa1703e1 	mov	x1, x23
   91df4:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91df8:	91142063 	add	x3, x3, #0x508
   91dfc:	52800022 	mov	w2, #0x1                   	// #1
   91e00:	52800015 	mov	w21, #0x0                   	// #0
   91e04:	940038ef 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91e08:	17ffff02 	b	91a10 <CUSBSerialPL2303Device::Configure()+0x120>
   91e0c:	d503201f 	nop

0000000000091e10 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   91e10:	a9b37bfd 	stp	x29, x30, [sp, #-208]!
   91e14:	910003fd 	mov	x29, sp
   91e18:	a90153f3 	stp	x19, x20, [sp, #16]
   91e1c:	a9025bf5 	stp	x21, x22, [sp, #32]
   91e20:	2a0103f5 	mov	w21, w1
   91e24:	aa0003f6 	mov	x22, x0
   91e28:	a90363f7 	stp	x23, x24, [sp, #48]
   91e2c:	2a0203f7 	mov	w23, w2
   91e30:	2a0303f8 	mov	w24, w3
   91e34:	97ffe29f 	bl	8a8b0 <CUSBFunction::GetHost() const>
   91e38:	b4000a80 	cbz	x0, 91f88 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x178>
   91e3c:	91027ff3 	add	x19, sp, #0x9f
   91e40:	aa0003f4 	mov	x20, x0
   91e44:	927ae673 	and	x19, x19, #0xffffffffffffffc0
   91e48:	aa1603e0 	mov	x0, x22
   91e4c:	a9007e7f 	stp	xzr, xzr, [x19]
   91e50:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   91e54:	a9027e7f 	stp	xzr, xzr, [x19, #32]
   91e58:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   91e5c:	97ffe289 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   91e60:	aa0003e1 	mov	x1, x0
   91e64:	528000e7 	mov	w7, #0x7                   	// #7
   91e68:	aa1303e6 	mov	x6, x19
   91e6c:	52800005 	mov	w5, #0x0                   	// #0
   91e70:	52800004 	mov	w4, #0x0                   	// #0
   91e74:	52800423 	mov	w3, #0x21                  	// #33
   91e78:	12800bc2 	mov	w2, #0xffffffa1            	// #-95
   91e7c:	aa1403e0 	mov	x0, x20
   91e80:	97ffbc64 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   91e84:	71001c1f 	cmp	w0, #0x7
   91e88:	540004c1 	b.ne	91f20 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x110>  // b.any
   91e8c:	910103e0 	add	x0, sp, #0x40
   91e90:	940049f0 	bl	a4650 <CString::CString()>
   91e94:	71001ebf 	cmp	w21, #0x7
   91e98:	540000c0 	b.eq	91eb0 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xa0>  // b.none
   91e9c:	540005e8 	b.hi	91f58 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x148>  // b.pmore
   91ea0:	710016bf 	cmp	w21, #0x5
   91ea4:	54000060 	b.eq	91eb0 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xa0>  // b.none
   91ea8:	71001abf 	cmp	w21, #0x6
   91eac:	540005a1 	b.ne	91f60 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x150>  // b.any
   91eb0:	d0000101 	adrp	x1, b3000 <_etext+0x2158>
   91eb4:	2a1503e2 	mov	w2, w21
   91eb8:	39001a75 	strb	w21, [x19, #6]
   91ebc:	91086021 	add	x1, x1, #0x218
   91ec0:	910103e0 	add	x0, sp, #0x40
   91ec4:	9400501b 	bl	a5f30 <CString::Format(char const*, ...)>
   91ec8:	710006ff 	cmp	w23, #0x1
   91ecc:	540009c0 	b.eq	92004 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1f4>  // b.none
   91ed0:	71000aff 	cmp	w23, #0x2
   91ed4:	540008c0 	b.eq	91fec <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1dc>  // b.none
   91ed8:	34000657 	cbz	w23, 91fa0 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x190>
   91edc:	940036cd 	bl	9fa10 <CLogger::Get()>
   91ee0:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91ee4:	d0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   91ee8:	2a1703e4 	mov	w4, w23
   91eec:	91094063 	add	x3, x3, #0x250
   91ef0:	91078021 	add	x1, x1, #0x1e0
   91ef4:	52800022 	mov	w2, #0x1                   	// #1
   91ef8:	52800013 	mov	w19, #0x0                   	// #0
   91efc:	940038b1 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91f00:	910103e0 	add	x0, sp, #0x40
   91f04:	94004997 	bl	a4560 <CString::~CString()>
   91f08:	2a1303e0 	mov	w0, w19
   91f0c:	a94153f3 	ldp	x19, x20, [sp, #16]
   91f10:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91f14:	a94363f7 	ldp	x23, x24, [sp, #48]
   91f18:	a8cd7bfd 	ldp	x29, x30, [sp], #208
   91f1c:	d65f03c0 	ret
   91f20:	940036bc 	bl	9fa10 <CLogger::Get()>
   91f24:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91f28:	d0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   91f2c:	91146063 	add	x3, x3, #0x518
   91f30:	91078021 	add	x1, x1, #0x1e0
   91f34:	52800022 	mov	w2, #0x1                   	// #1
   91f38:	52800013 	mov	w19, #0x0                   	// #0
   91f3c:	940038a1 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91f40:	2a1303e0 	mov	w0, w19
   91f44:	a94153f3 	ldp	x19, x20, [sp, #16]
   91f48:	a9425bf5 	ldp	x21, x22, [sp, #32]
   91f4c:	a94363f7 	ldp	x23, x24, [sp, #48]
   91f50:	a8cd7bfd 	ldp	x29, x30, [sp], #208
   91f54:	d65f03c0 	ret
   91f58:	710022bf 	cmp	w21, #0x8
   91f5c:	54fffaa0 	b.eq	91eb0 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xa0>  // b.none
   91f60:	940036ac 	bl	9fa10 <CLogger::Get()>
   91f64:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91f68:	d0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   91f6c:	2a1503e4 	mov	w4, w21
   91f70:	91088063 	add	x3, x3, #0x220
   91f74:	91078021 	add	x1, x1, #0x1e0
   91f78:	52800022 	mov	w2, #0x1                   	// #1
   91f7c:	52800013 	mov	w19, #0x0                   	// #0
   91f80:	94003890 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91f84:	17ffffdf 	b	91f00 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xf0>
   91f88:	d0000101 	adrp	x1, b3000 <_etext+0x2158>
   91f8c:	90000100 	adrp	x0, b1000 <_etext+0x158>
   91f90:	91112021 	add	x1, x1, #0x448
   91f94:	910cc000 	add	x0, x0, #0x330
   91f98:	528022a2 	mov	w2, #0x115                 	// #277
   91f9c:	94002f69 	bl	9dd40 <assertion_failed>
   91fa0:	d0000101 	adrp	x1, b3000 <_etext+0x2158>
   91fa4:	9108e021 	add	x1, x1, #0x238
   91fa8:	3900167f 	strb	wzr, [x19, #5]
   91fac:	910103e0 	add	x0, sp, #0x40
   91fb0:	94004a48 	bl	a48d0 <CString::Append(char const*)>
   91fb4:	7100071f 	cmp	w24, #0x1
   91fb8:	54000600 	b.eq	92078 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x268>  // b.none
   91fbc:	71000b1f 	cmp	w24, #0x2
   91fc0:	540002e0 	b.eq	9201c <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x20c>  // b.none
   91fc4:	94003693 	bl	9fa10 <CLogger::Get()>
   91fc8:	d0000103 	adrp	x3, b3000 <_etext+0x2158>
   91fcc:	d0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   91fd0:	2a1803e4 	mov	w4, w24
   91fd4:	9109a063 	add	x3, x3, #0x268
   91fd8:	91078021 	add	x1, x1, #0x1e0
   91fdc:	52800022 	mov	w2, #0x1                   	// #1
   91fe0:	52800013 	mov	w19, #0x0                   	// #0
   91fe4:	94003877 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   91fe8:	17ffffc6 	b	91f00 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xf0>
   91fec:	d0000101 	adrp	x1, b3000 <_etext+0x2158>
   91ff0:	91092021 	add	x1, x1, #0x248
   91ff4:	39001677 	strb	w23, [x19, #5]
   91ff8:	910103e0 	add	x0, sp, #0x40
   91ffc:	94004a35 	bl	a48d0 <CString::Append(char const*)>
   92000:	17ffffed 	b	91fb4 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1a4>
   92004:	b0000101 	adrp	x1, b3000 <_etext+0x2158>
   92008:	91090021 	add	x1, x1, #0x240
   9200c:	39001677 	strb	w23, [x19, #5]
   92010:	910103e0 	add	x0, sp, #0x40
   92014:	94004a2f 	bl	a48d0 <CString::Append(char const*)>
   92018:	17ffffe7 	b	91fb4 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1a4>
   9201c:	b0000101 	adrp	x1, b3000 <_etext+0x2158>
   92020:	91044021 	add	x1, x1, #0x110
   92024:	39001278 	strb	w24, [x19, #4]
   92028:	910103e0 	add	x0, sp, #0x40
   9202c:	94004a29 	bl	a48d0 <CString::Append(char const*)>
   92030:	aa1603e0 	mov	x0, x22
   92034:	97ffe213 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   92038:	aa0003e1 	mov	x1, x0
   9203c:	aa1303e6 	mov	x6, x19
   92040:	aa1403e0 	mov	x0, x20
   92044:	528000e7 	mov	w7, #0x7                   	// #7
   92048:	52800005 	mov	w5, #0x0                   	// #0
   9204c:	52800004 	mov	w4, #0x0                   	// #0
   92050:	52800403 	mov	w3, #0x20                  	// #32
   92054:	52800422 	mov	w2, #0x21                  	// #33
   92058:	97ffbbee 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9205c:	37f801a0 	tbnz	w0, #31, 92090 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x280>
   92060:	910103e0 	add	x0, sp, #0x40
   92064:	2905ded5 	stp	w21, w23, [x22, #44]
   92068:	52800033 	mov	w19, #0x1                   	// #1
   9206c:	b90036d8 	str	w24, [x22, #52]
   92070:	9400493c 	bl	a4560 <CString::~CString()>
   92074:	17ffffa5 	b	91f08 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xf8>
   92078:	b0000101 	adrp	x1, b3000 <_etext+0x2158>
   9207c:	9134e021 	add	x1, x1, #0xd38
   92080:	3900127f 	strb	wzr, [x19, #4]
   92084:	910103e0 	add	x0, sp, #0x40
   92088:	94004a12 	bl	a48d0 <CString::Append(char const*)>
   9208c:	17ffffe9 	b	92030 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x220>
   92090:	94003660 	bl	9fa10 <CLogger::Get()>
   92094:	b0000103 	adrp	x3, b3000 <_etext+0x2158>
   92098:	b0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9209c:	910fa063 	add	x3, x3, #0x3e8
   920a0:	91078021 	add	x1, x1, #0x1e0
   920a4:	52800022 	mov	w2, #0x1                   	// #1
   920a8:	52800013 	mov	w19, #0x0                   	// #0
   920ac:	94003845 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   920b0:	17ffff94 	b	91f00 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xf0>
	...

00000000000920c0 <CUSBSerialFT231XDevice::~CUSBSerialFT231XDevice()>:
   920c0:	b0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   920c4:	91080021 	add	x1, x1, #0x200
   920c8:	f9000001 	str	x1, [x0]
   920cc:	14002475 	b	9b2a0 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>

00000000000920d0 <CUSBSerialFT231XDevice::~CUSBSerialFT231XDevice()>:
   920d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   920d4:	b0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   920d8:	91080021 	add	x1, x1, #0x200
   920dc:	910003fd 	mov	x29, sp
   920e0:	f9000bf3 	str	x19, [sp, #16]
   920e4:	aa0003f3 	mov	x19, x0
   920e8:	f9000001 	str	x1, [x0]
   920ec:	9400246d 	bl	9b2a0 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>
   920f0:	aa1303e0 	mov	x0, x19
   920f4:	d2800f01 	mov	x1, #0x78                  	// #120
   920f8:	f9400bf3 	ldr	x19, [sp, #16]
   920fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   92100:	14005880 	b	a8300 <operator delete(void*, unsigned long)>
   92104:	d503201f 	nop
   92108:	d503201f 	nop
   9210c:	d503201f 	nop

0000000000092110 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)>:
   92110:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   92114:	910003fd 	mov	x29, sp
   92118:	a90153f3 	stp	x19, x20, [sp, #16]
   9211c:	aa0003f4 	mov	x20, x0
   92120:	a9025bf5 	stp	x21, x22, [sp, #32]
   92124:	2a0103f6 	mov	w22, w1
   92128:	f9001bf7 	str	x23, [sp, #48]
   9212c:	97ffe1e1 	bl	8a8b0 <CUSBFunction::GetHost() const>
   92130:	b4000880 	cbz	x0, 92240 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x130>
   92134:	5286c005 	mov	w5, #0x3600                	// #13824
   92138:	72a02dc5 	movk	w5, #0x16e, lsl #16
   9213c:	d2806001 	mov	x1, #0x300                 	// #768
   92140:	f2a08041 	movk	x1, #0x402, lsl #16
   92144:	1ad608a5 	udiv	w5, w5, w22
   92148:	f2c0a021 	movk	x1, #0x501, lsl #32
   9214c:	f2e0e0c1 	movk	x1, #0x706, lsl #48
   92150:	aa0003f5 	mov	x21, x0
   92154:	910123e0 	add	x0, sp, #0x48
   92158:	f90027e1 	str	x1, [sp, #72]
   9215c:	120008a1 	and	w1, w5, #0x7
   92160:	3861c800 	ldrb	w0, [x0, w1, sxtw]
   92164:	53124400 	lsl	w0, w0, #14
   92168:	2a450c05 	orr	w5, w0, w5, lsr #3
   9216c:	710004bf 	cmp	w5, #0x1
   92170:	54000480 	b.eq	92200 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0xf0>  // b.none
   92174:	52880020 	mov	w0, #0x4001                	// #16385
   92178:	6b0000bf 	cmp	w5, w0
   9217c:	540003c0 	b.eq	921f4 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0xe4>  // b.none
   92180:	12003cb7 	and	w23, w5, #0xffff
   92184:	53107cb3 	lsr	w19, w5, #16
   92188:	aa1403e0 	mov	x0, x20
   9218c:	97ffe1bd 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   92190:	aa0003e1 	mov	x1, x0
   92194:	2a1303e5 	mov	w5, w19
   92198:	2a1703e4 	mov	w4, w23
   9219c:	aa1503e0 	mov	x0, x21
   921a0:	52800007 	mov	w7, #0x0                   	// #0
   921a4:	d2800006 	mov	x6, #0x0                   	// #0
   921a8:	52800063 	mov	w3, #0x3                   	// #3
   921ac:	52800802 	mov	w2, #0x40                  	// #64
   921b0:	97ffbb98 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   921b4:	37f802c0 	tbnz	w0, #31, 9220c <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0xfc>
   921b8:	b9002a96 	str	w22, [x20, #40]
   921bc:	94003615 	bl	9fa10 <CLogger::Get()>
   921c0:	b0000103 	adrp	x3, b3000 <_etext+0x2158>
   921c4:	b0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   921c8:	b9402a84 	ldr	w4, [x20, #40]
   921cc:	910ca063 	add	x3, x3, #0x328
   921d0:	9109c021 	add	x1, x1, #0x270
   921d4:	52800082 	mov	w2, #0x4                   	// #4
   921d8:	940037fa 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   921dc:	52800020 	mov	w0, #0x1                   	// #1
   921e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   921e4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   921e8:	f9401bf7 	ldr	x23, [sp, #48]
   921ec:	a8c57bfd 	ldp	x29, x30, [sp], #80
   921f0:	d65f03c0 	ret
   921f4:	52800013 	mov	w19, #0x0                   	// #0
   921f8:	52800037 	mov	w23, #0x1                   	// #1
   921fc:	17ffffe3 	b	92188 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x78>
   92200:	52800013 	mov	w19, #0x0                   	// #0
   92204:	52800017 	mov	w23, #0x0                   	// #0
   92208:	17ffffe0 	b	92188 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x78>
   9220c:	94003601 	bl	9fa10 <CLogger::Get()>
   92210:	b0000103 	adrp	x3, b3000 <_etext+0x2158>
   92214:	b0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   92218:	910c4063 	add	x3, x3, #0x310
   9221c:	9109c021 	add	x1, x1, #0x270
   92220:	52800022 	mov	w2, #0x1                   	// #1
   92224:	940037e7 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   92228:	52800000 	mov	w0, #0x0                   	// #0
   9222c:	a94153f3 	ldp	x19, x20, [sp, #16]
   92230:	a9425bf5 	ldp	x21, x22, [sp, #32]
   92234:	f9401bf7 	ldr	x23, [sp, #48]
   92238:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9223c:	d65f03c0 	ret
   92240:	b0000101 	adrp	x1, b3000 <_etext+0x2158>
   92244:	f00000e0 	adrp	x0, b1000 <_etext+0x158>
   92248:	9114e021 	add	x1, x1, #0x538
   9224c:	910cc000 	add	x0, x0, #0x330
   92250:	52800f62 	mov	w2, #0x7b                  	// #123
   92254:	94002ebb 	bl	9dd40 <assertion_failed>
   92258:	d503201f 	nop
   9225c:	d503201f 	nop

0000000000092260 <CUSBSerialFT231XDevice::CUSBSerialFT231XDevice(CUSBFunction*)>:
   92260:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   92264:	d2800042 	mov	x2, #0x2                   	// #2
   92268:	910003fd 	mov	x29, sp
   9226c:	f9000bf3 	str	x19, [sp, #16]
   92270:	aa0003f3 	mov	x19, x0
   92274:	9400259f 	bl	9b8f0 <CUSBSerialHostDevice::CUSBSerialHostDevice(CUSBFunction*, unsigned long)>
   92278:	b0000120 	adrp	x0, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9227c:	91080000 	add	x0, x0, #0x200
   92280:	f9000260 	str	x0, [x19]
   92284:	f9400bf3 	ldr	x19, [sp, #16]
   92288:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9228c:	d65f03c0 	ret

0000000000092290 <CUSBSerialFT231XDevice::GetDeviceIDTable()>:
   92290:	b0000120 	adrp	x0, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   92294:	9109c000 	add	x0, x0, #0x270
   92298:	91002000 	add	x0, x0, #0x8
   9229c:	d65f03c0 	ret

00000000000922a0 <CUSBSerialFT231XDevice::Configure()>:
   922a0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   922a4:	910003fd 	mov	x29, sp
   922a8:	a90153f3 	stp	x19, x20, [sp, #16]
   922ac:	aa0003f4 	mov	x20, x0
   922b0:	940025f8 	bl	9ba90 <CUSBSerialHostDevice::Configure()>
   922b4:	72001c13 	ands	w19, w0, #0xff
   922b8:	54000a80 	b.eq	92408 <CUSBSerialFT231XDevice::Configure()+0x168>  // b.none
   922bc:	aa1403e0 	mov	x0, x20
   922c0:	f90013f5 	str	x21, [sp, #32]
   922c4:	97ffe163 	bl	8a850 <CUSBFunction::GetDevice() const>
   922c8:	97ffd976 	bl	888a0 <CUSBDevice::GetDeviceDescriptor() const>
   922cc:	b0000101 	adrp	x1, b3000 <_etext+0x2158>
   922d0:	aa0003f3 	mov	x19, x0
   922d4:	91154021 	add	x1, x1, #0x550
   922d8:	9100c3e0 	add	x0, sp, #0x30
   922dc:	940048e5 	bl	a4670 <CString::CString(char const*)>
   922e0:	39403261 	ldrb	w1, [x19, #12]
   922e4:	39403660 	ldrb	w0, [x19, #13]
   922e8:	2a002020 	orr	w0, w1, w0, lsl #8
   922ec:	7140041f 	cmp	w0, #0x1, lsl #12
   922f0:	54000c60 	b.eq	9247c <CUSBSerialFT231XDevice::Configure()+0x1dc>  // b.none
   922f4:	7118001f 	cmp	w0, #0x600
   922f8:	540009e0 	b.eq	92434 <CUSBSerialFT231XDevice::Configure()+0x194>  // b.none
   922fc:	511c0000 	sub	w0, w0, #0x700
   92300:	529fbfe1 	mov	w1, #0xfdff                	// #65023
   92304:	6a01001f 	tst	w0, w1
   92308:	54000b00 	b.eq	92468 <CUSBSerialFT231XDevice::Configure()+0x1c8>  // b.none
   9230c:	940035c1 	bl	9fa10 <CLogger::Get()>
   92310:	aa0003f3 	mov	x19, x0
   92314:	9100c3e0 	add	x0, sp, #0x30
   92318:	94004912 	bl	a4760 <CString::operator char const*() const>
   9231c:	b0000135 	adrp	x21, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   92320:	9109c2b5 	add	x21, x21, #0x270
   92324:	b0000103 	adrp	x3, b3000 <_etext+0x2158>
   92328:	aa0003e4 	mov	x4, x0
   9232c:	aa1503e1 	mov	x1, x21
   92330:	aa1303e0 	mov	x0, x19
   92334:	910d6063 	add	x3, x3, #0x358
   92338:	52800062 	mov	w2, #0x3                   	// #3
   9233c:	940037a1 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   92340:	aa1403e0 	mov	x0, x20
   92344:	97ffe15b 	bl	8a8b0 <CUSBFunction::GetHost() const>
   92348:	aa0003f3 	mov	x19, x0
   9234c:	b4000a20 	cbz	x0, 92490 <CUSBSerialFT231XDevice::Configure()+0x1f0>
   92350:	aa1403e0 	mov	x0, x20
   92354:	97ffe14b 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   92358:	aa0003e1 	mov	x1, x0
   9235c:	52800007 	mov	w7, #0x0                   	// #0
   92360:	d2800006 	mov	x6, #0x0                   	// #0
   92364:	52800005 	mov	w5, #0x0                   	// #0
   92368:	52800004 	mov	w4, #0x0                   	// #0
   9236c:	52800003 	mov	w3, #0x0                   	// #0
   92370:	52800802 	mov	w2, #0x40                  	// #64
   92374:	aa1303e0 	mov	x0, x19
   92378:	97ffbb26 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9237c:	37f80660 	tbnz	w0, #31, 92448 <CUSBSerialFT231XDevice::Configure()+0x1a8>
   92380:	aa1403e0 	mov	x0, x20
   92384:	97ffe13f 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   92388:	aa0003e1 	mov	x1, x0
   9238c:	52800007 	mov	w7, #0x0                   	// #0
   92390:	aa1303e0 	mov	x0, x19
   92394:	d2800006 	mov	x6, #0x0                   	// #0
   92398:	52800005 	mov	w5, #0x0                   	// #0
   9239c:	52800004 	mov	w4, #0x0                   	// #0
   923a0:	52800043 	mov	w3, #0x2                   	// #2
   923a4:	52800802 	mov	w2, #0x40                  	// #64
   923a8:	97ffbb1a 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   923ac:	37f807e0 	tbnz	w0, #31, 924a8 <CUSBSerialFT231XDevice::Configure()+0x208>
   923b0:	f9400282 	ldr	x2, [x20]
   923b4:	5284b001 	mov	w1, #0x2580                	// #9600
   923b8:	aa1403e0 	mov	x0, x20
   923bc:	f9403042 	ldr	x2, [x2, #96]
   923c0:	d63f0040 	blr	x2
   923c4:	72001c13 	ands	w19, w0, #0xff
   923c8:	54000120 	b.eq	923ec <CUSBSerialFT231XDevice::Configure()+0x14c>  // b.none
   923cc:	f9400284 	ldr	x4, [x20]
   923d0:	aa1403e0 	mov	x0, x20
   923d4:	52800023 	mov	w3, #0x1                   	// #1
   923d8:	52800002 	mov	w2, #0x0                   	// #0
   923dc:	52800101 	mov	w1, #0x8                   	// #8
   923e0:	f9403484 	ldr	x4, [x4, #104]
   923e4:	d63f0080 	blr	x4
   923e8:	12001c13 	and	w19, w0, #0xff
   923ec:	9100c3e0 	add	x0, sp, #0x30
   923f0:	9400485c 	bl	a4560 <CString::~CString()>
   923f4:	2a1303e0 	mov	w0, w19
   923f8:	a94153f3 	ldp	x19, x20, [sp, #16]
   923fc:	f94013f5 	ldr	x21, [sp, #32]
   92400:	a8c57bfd 	ldp	x29, x30, [sp], #80
   92404:	d65f03c0 	ret
   92408:	94003582 	bl	9fa10 <CLogger::Get()>
   9240c:	b0000103 	adrp	x3, b3000 <_etext+0x2158>
   92410:	b0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   92414:	9106a063 	add	x3, x3, #0x1a8
   92418:	9109c021 	add	x1, x1, #0x270
   9241c:	52800022 	mov	w2, #0x1                   	// #1
   92420:	94003768 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   92424:	2a1303e0 	mov	w0, w19
   92428:	a94153f3 	ldp	x19, x20, [sp, #16]
   9242c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   92430:	d65f03c0 	ret
   92434:	b0000101 	adrp	x1, b3000 <_etext+0x2158>
   92438:	91158021 	add	x1, x1, #0x560
   9243c:	9100c3e0 	add	x0, sp, #0x30
   92440:	940048d0 	bl	a4780 <CString::operator=(char const*)>
   92444:	17ffffb2 	b	9230c <CUSBSerialFT231XDevice::Configure()+0x6c>
   92448:	94003572 	bl	9fa10 <CLogger::Get()>
   9244c:	aa1503e1 	mov	x1, x21
   92450:	b0000103 	adrp	x3, b3000 <_etext+0x2158>
   92454:	9115c063 	add	x3, x3, #0x570
   92458:	52800022 	mov	w2, #0x1                   	// #1
   9245c:	52800013 	mov	w19, #0x0                   	// #0
   92460:	94003758 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   92464:	17ffffe2 	b	923ec <CUSBSerialFT231XDevice::Configure()+0x14c>
   92468:	b0000101 	adrp	x1, b3000 <_etext+0x2158>
   9246c:	9115a021 	add	x1, x1, #0x568
   92470:	9100c3e0 	add	x0, sp, #0x30
   92474:	940048c3 	bl	a4780 <CString::operator=(char const*)>
   92478:	17ffffa5 	b	9230c <CUSBSerialFT231XDevice::Configure()+0x6c>
   9247c:	b0000101 	adrp	x1, b3000 <_etext+0x2158>
   92480:	91156021 	add	x1, x1, #0x558
   92484:	9100c3e0 	add	x0, sp, #0x30
   92488:	940048be 	bl	a4780 <CString::operator=(char const*)>
   9248c:	17ffffa0 	b	9230c <CUSBSerialFT231XDevice::Configure()+0x6c>
   92490:	b0000101 	adrp	x1, b3000 <_etext+0x2158>
   92494:	f00000e0 	adrp	x0, b1000 <_etext+0x158>
   92498:	9114e021 	add	x1, x1, #0x538
   9249c:	910cc000 	add	x0, x0, #0x330
   924a0:	52800a22 	mov	w2, #0x51                  	// #81
   924a4:	94002e27 	bl	9dd40 <assertion_failed>
   924a8:	9400355a 	bl	9fa10 <CLogger::Get()>
   924ac:	aa1503e1 	mov	x1, x21
   924b0:	b0000103 	adrp	x3, b3000 <_etext+0x2158>
   924b4:	91162063 	add	x3, x3, #0x588
   924b8:	52800022 	mov	w2, #0x1                   	// #1
   924bc:	52800013 	mov	w19, #0x0                   	// #0
   924c0:	94003740 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   924c4:	17ffffca 	b	923ec <CUSBSerialFT231XDevice::Configure()+0x14c>
   924c8:	d503201f 	nop
   924cc:	d503201f 	nop

00000000000924d0 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   924d0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   924d4:	910003fd 	mov	x29, sp
   924d8:	a90153f3 	stp	x19, x20, [sp, #16]
   924dc:	2a0103f3 	mov	w19, w1
   924e0:	2a0203f4 	mov	w20, w2
   924e4:	a9025bf5 	stp	x21, x22, [sp, #32]
   924e8:	a90363f7 	stp	x23, x24, [sp, #48]
   924ec:	2a0303f8 	mov	w24, w3
   924f0:	aa0003f7 	mov	x23, x0
   924f4:	97ffe0ef 	bl	8a8b0 <CUSBFunction::GetHost() const>
   924f8:	b4001140 	cbz	x0, 92720 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x250>
   924fc:	aa0003f5 	mov	x21, x0
   92500:	910103e0 	add	x0, sp, #0x40
   92504:	94004853 	bl	a4650 <CString::CString()>
   92508:	71001e7f 	cmp	w19, #0x7
   9250c:	54000280 	b.eq	9255c <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x8c>  // b.none
   92510:	7100227f 	cmp	w19, #0x8
   92514:	54000240 	b.eq	9255c <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x8c>  // b.none
   92518:	9400353e 	bl	9fa10 <CLogger::Get()>
   9251c:	b0000103 	adrp	x3, b3000 <_etext+0x2158>
   92520:	b0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   92524:	2a1303e4 	mov	w4, w19
   92528:	910ea063 	add	x3, x3, #0x3a8
   9252c:	9109c021 	add	x1, x1, #0x270
   92530:	52800022 	mov	w2, #0x1                   	// #1
   92534:	52800013 	mov	w19, #0x0                   	// #0
   92538:	94003722 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9253c:	910103e0 	add	x0, sp, #0x40
   92540:	94004808 	bl	a4560 <CString::~CString()>
   92544:	2a1303e0 	mov	w0, w19
   92548:	a94153f3 	ldp	x19, x20, [sp, #16]
   9254c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   92550:	a94363f7 	ldp	x23, x24, [sp, #48]
   92554:	a8c67bfd 	ldp	x29, x30, [sp], #96
   92558:	d65f03c0 	ret
   9255c:	b0000101 	adrp	x1, b3000 <_etext+0x2158>
   92560:	2a1303e2 	mov	w2, w19
   92564:	91086021 	add	x1, x1, #0x218
   92568:	910103e0 	add	x0, sp, #0x40
   9256c:	94004e71 	bl	a5f30 <CString::Format(char const*, ...)>
   92570:	7100069f 	cmp	w20, #0x1
   92574:	2a1303f6 	mov	w22, w19
   92578:	540002a0 	b.eq	925cc <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xfc>  // b.none
   9257c:	71000a9f 	cmp	w20, #0x2
   92580:	54000c20 	b.eq	92704 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x234>  // b.none
   92584:	340005b4 	cbz	w20, 92638 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x168>
   92588:	94003522 	bl	9fa10 <CLogger::Get()>
   9258c:	b0000103 	adrp	x3, b3000 <_etext+0x2158>
   92590:	b0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   92594:	2a1403e4 	mov	w4, w20
   92598:	91094063 	add	x3, x3, #0x250
   9259c:	9109c021 	add	x1, x1, #0x270
   925a0:	52800022 	mov	w2, #0x1                   	// #1
   925a4:	94003707 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   925a8:	910103e0 	add	x0, sp, #0x40
   925ac:	52800013 	mov	w19, #0x0                   	// #0
   925b0:	940047ec 	bl	a4560 <CString::~CString()>
   925b4:	2a1303e0 	mov	w0, w19
   925b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   925bc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   925c0:	a94363f7 	ldp	x23, x24, [sp, #48]
   925c4:	a8c67bfd 	ldp	x29, x30, [sp], #96
   925c8:	d65f03c0 	ret
   925cc:	32180276 	orr	w22, w19, #0x100
   925d0:	b0000101 	adrp	x1, b3000 <_etext+0x2158>
   925d4:	91090021 	add	x1, x1, #0x240
   925d8:	910103e0 	add	x0, sp, #0x40
   925dc:	12003ed6 	and	w22, w22, #0xffff
   925e0:	940048bc 	bl	a48d0 <CString::Append(char const*)>
   925e4:	7100071f 	cmp	w24, #0x1
   925e8:	54000340 	b.eq	92650 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x180>  // b.none
   925ec:	71000b1f 	cmp	w24, #0x2
   925f0:	540003a0 	b.eq	92664 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x194>  // b.none
   925f4:	94003507 	bl	9fa10 <CLogger::Get()>
   925f8:	b0000103 	adrp	x3, b3000 <_etext+0x2158>
   925fc:	b0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   92600:	2a1803e4 	mov	w4, w24
   92604:	9109a063 	add	x3, x3, #0x268
   92608:	9109c021 	add	x1, x1, #0x270
   9260c:	52800022 	mov	w2, #0x1                   	// #1
   92610:	940036ec 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   92614:	910103e0 	add	x0, sp, #0x40
   92618:	52800013 	mov	w19, #0x0                   	// #0
   9261c:	940047d1 	bl	a4560 <CString::~CString()>
   92620:	2a1303e0 	mov	w0, w19
   92624:	a94153f3 	ldp	x19, x20, [sp, #16]
   92628:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9262c:	a94363f7 	ldp	x23, x24, [sp, #48]
   92630:	a8c67bfd 	ldp	x29, x30, [sp], #96
   92634:	d65f03c0 	ret
   92638:	b0000101 	adrp	x1, b3000 <_etext+0x2158>
   9263c:	9108e021 	add	x1, x1, #0x238
   92640:	910103e0 	add	x0, sp, #0x40
   92644:	940048a3 	bl	a48d0 <CString::Append(char const*)>
   92648:	7100071f 	cmp	w24, #0x1
   9264c:	54fffd01 	b.ne	925ec <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x11c>  // b.any
   92650:	b0000101 	adrp	x1, b3000 <_etext+0x2158>
   92654:	9134e021 	add	x1, x1, #0xd38
   92658:	910103e0 	add	x0, sp, #0x40
   9265c:	9400489d 	bl	a48d0 <CString::Append(char const*)>
   92660:	14000006 	b	92678 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1a8>
   92664:	b0000101 	adrp	x1, b3000 <_etext+0x2158>
   92668:	91044021 	add	x1, x1, #0x110
   9266c:	910103e0 	add	x0, sp, #0x40
   92670:	321402d6 	orr	w22, w22, #0x1000
   92674:	94004897 	bl	a48d0 <CString::Append(char const*)>
   92678:	aa1703e0 	mov	x0, x23
   9267c:	97ffe081 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   92680:	aa0003e1 	mov	x1, x0
   92684:	2a1603e4 	mov	w4, w22
   92688:	aa1503e0 	mov	x0, x21
   9268c:	52800007 	mov	w7, #0x0                   	// #0
   92690:	d2800006 	mov	x6, #0x0                   	// #0
   92694:	52800005 	mov	w5, #0x0                   	// #0
   92698:	52800083 	mov	w3, #0x4                   	// #4
   9269c:	52800802 	mov	w2, #0x40                  	// #64
   926a0:	97ffba5c 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   926a4:	37f804a0 	tbnz	w0, #31, 92738 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x268>
   926a8:	2905d2f3 	stp	w19, w20, [x23, #44]
   926ac:	52800033 	mov	w19, #0x1                   	// #1
   926b0:	b90036f8 	str	w24, [x23, #52]
   926b4:	940034d7 	bl	9fa10 <CLogger::Get()>
   926b8:	aa0003f4 	mov	x20, x0
   926bc:	910103e0 	add	x0, sp, #0x40
   926c0:	94004828 	bl	a4760 <CString::operator char const*() const>
   926c4:	b0000103 	adrp	x3, b3000 <_etext+0x2158>
   926c8:	b0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   926cc:	aa0003e4 	mov	x4, x0
   926d0:	9116a063 	add	x3, x3, #0x5a8
   926d4:	aa1403e0 	mov	x0, x20
   926d8:	9109c021 	add	x1, x1, #0x270
   926dc:	52800082 	mov	w2, #0x4                   	// #4
   926e0:	940036b8 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   926e4:	910103e0 	add	x0, sp, #0x40
   926e8:	9400479e 	bl	a4560 <CString::~CString()>
   926ec:	2a1303e0 	mov	w0, w19
   926f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   926f4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   926f8:	a94363f7 	ldp	x23, x24, [sp, #48]
   926fc:	a8c67bfd 	ldp	x29, x30, [sp], #96
   92700:	d65f03c0 	ret
   92704:	32170276 	orr	w22, w19, #0x200
   92708:	b0000101 	adrp	x1, b3000 <_etext+0x2158>
   9270c:	91092021 	add	x1, x1, #0x248
   92710:	910103e0 	add	x0, sp, #0x40
   92714:	12003ed6 	and	w22, w22, #0xffff
   92718:	9400486e 	bl	a48d0 <CString::Append(char const*)>
   9271c:	17ffffb2 	b	925e4 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x114>
   92720:	b0000101 	adrp	x1, b3000 <_etext+0x2158>
   92724:	f00000e0 	adrp	x0, b1000 <_etext+0x158>
   92728:	9114e021 	add	x1, x1, #0x538
   9272c:	910cc000 	add	x0, x0, #0x330
   92730:	52801422 	mov	w2, #0xa1                  	// #161
   92734:	94002d83 	bl	9dd40 <assertion_failed>
   92738:	940034b6 	bl	9fa10 <CLogger::Get()>
   9273c:	b0000103 	adrp	x3, b3000 <_etext+0x2158>
   92740:	b0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   92744:	910fa063 	add	x3, x3, #0x3e8
   92748:	9109c021 	add	x1, x1, #0x270
   9274c:	52800022 	mov	w2, #0x1                   	// #1
   92750:	52800013 	mov	w19, #0x0                   	// #0
   92754:	9400369b 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   92758:	17ffff79 	b	9253c <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x6c>
   9275c:	00000000 	udf	#0

0000000000092760 <CUSBSerialCDCDevice::~CUSBSerialCDCDevice()>:
   92760:	b0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   92764:	910a8021 	add	x1, x1, #0x2a0
   92768:	f9000001 	str	x1, [x0]
   9276c:	140022cd 	b	9b2a0 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>

0000000000092770 <CUSBSerialCDCDevice::~CUSBSerialCDCDevice()>:
   92770:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   92774:	b0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   92778:	910a8021 	add	x1, x1, #0x2a0
   9277c:	910003fd 	mov	x29, sp
   92780:	f9000bf3 	str	x19, [sp, #16]
   92784:	aa0003f3 	mov	x19, x0
   92788:	f9000001 	str	x1, [x0]
   9278c:	940022c5 	bl	9b2a0 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>
   92790:	aa1303e0 	mov	x0, x19
   92794:	d2800f01 	mov	x1, #0x78                  	// #120
   92798:	f9400bf3 	ldr	x19, [sp, #16]
   9279c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   927a0:	140056d8 	b	a8300 <operator delete(void*, unsigned long)>
   927a4:	d503201f 	nop
   927a8:	d503201f 	nop
   927ac:	d503201f 	nop

00000000000927b0 <CUSBSerialCDCDevice::CUSBSerialCDCDevice(CUSBFunction*)>:
   927b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   927b4:	d2800002 	mov	x2, #0x0                   	// #0
   927b8:	910003fd 	mov	x29, sp
   927bc:	f9000bf3 	str	x19, [sp, #16]
   927c0:	aa0003f3 	mov	x19, x0
   927c4:	9400244b 	bl	9b8f0 <CUSBSerialHostDevice::CUSBSerialHostDevice(CUSBFunction*, unsigned long)>
   927c8:	b0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   927cc:	910a8021 	add	x1, x1, #0x2a0
   927d0:	aa1303e0 	mov	x0, x19
   927d4:	f9000261 	str	x1, [x19]
   927d8:	97ffe0a2 	bl	8aa60 <CUSBFunction::GetInterfaceNumber() const>
   927dc:	2a0003e5 	mov	w5, w0
   927e0:	52800004 	mov	w4, #0x0                   	// #0
   927e4:	aa1303e0 	mov	x0, x19
   927e8:	52800003 	mov	w3, #0x0                   	// #0
   927ec:	52800002 	mov	w2, #0x0                   	// #0
   927f0:	52800141 	mov	w1, #0xa                   	// #10
   927f4:	3901d665 	strb	w5, [x19, #117]
   927f8:	97ffe05a 	bl	8a960 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char, unsigned int)>
   927fc:	3901da60 	strb	w0, [x19, #118]
   92800:	f9400bf3 	ldr	x19, [sp, #16]
   92804:	a8c27bfd 	ldp	x29, x30, [sp], #32
   92808:	d65f03c0 	ret
   9280c:	d503201f 	nop

0000000000092810 <CUSBSerialCDCDevice::SetLineCoding()>:
   92810:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   92814:	910003fd 	mov	x29, sp
   92818:	a90153f3 	stp	x19, x20, [sp, #16]
   9281c:	aa0003f3 	mov	x19, x0
   92820:	9101bff4 	add	x20, sp, #0x6f
   92824:	927ae694 	and	x20, x20, #0xffffffffffffffc0
   92828:	b9403400 	ldr	w0, [x0, #52]
   9282c:	29450a63 	ldp	w3, w2, [x19, #40]
   92830:	7100041f 	cmp	w0, #0x1
   92834:	b9403260 	ldr	w0, [x19, #48]
   92838:	1a9f07e1 	cset	w1, ne	// ne = any
   9283c:	531f1821 	ubfiz	w1, w1, #1, #7
   92840:	f90013f5 	str	x21, [sp, #32]
   92844:	b9000283 	str	w3, [x20]
   92848:	39001281 	strb	w1, [x20, #4]
   9284c:	39001a82 	strb	w2, [x20, #6]
   92850:	7100041f 	cmp	w0, #0x1
   92854:	54000140 	b.eq	9287c <CUSBSerialCDCDevice::SetLineCoding()+0x6c>  // b.none
   92858:	7100081f 	cmp	w0, #0x2
   9285c:	54000100 	b.eq	9287c <CUSBSerialCDCDevice::SetLineCoding()+0x6c>  // b.none
   92860:	340003c0 	cbz	w0, 928d8 <CUSBSerialCDCDevice::SetLineCoding()+0xc8>
   92864:	b0000101 	adrp	x1, b3000 <_etext+0x2158>
   92868:	90000100 	adrp	x0, b2000 <_etext+0x1158>
   9286c:	9116e021 	add	x1, x1, #0x5b8
   92870:	910ba000 	add	x0, x0, #0x2e8
   92874:	52801102 	mov	w2, #0x88                  	// #136
   92878:	94002d32 	bl	9dd40 <assertion_failed>
   9287c:	2a0003e1 	mov	w1, w0
   92880:	aa1303e0 	mov	x0, x19
   92884:	39001681 	strb	w1, [x20, #5]
   92888:	97ffe00a 	bl	8a8b0 <CUSBFunction::GetHost() const>
   9288c:	aa0003f5 	mov	x21, x0
   92890:	aa1303e0 	mov	x0, x19
   92894:	97ffdffb 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   92898:	aa0003e1 	mov	x1, x0
   9289c:	3941d665 	ldrb	w5, [x19, #117]
   928a0:	aa1403e6 	mov	x6, x20
   928a4:	aa1503e0 	mov	x0, x21
   928a8:	528000e7 	mov	w7, #0x7                   	// #7
   928ac:	52800004 	mov	w4, #0x0                   	// #0
   928b0:	52800403 	mov	w3, #0x20                  	// #32
   928b4:	52800422 	mov	w2, #0x21                  	// #33
   928b8:	97ffb9d6 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   928bc:	52800021 	mov	w1, #0x1                   	// #1
   928c0:	37f80100 	tbnz	w0, #31, 928e0 <CUSBSerialCDCDevice::SetLineCoding()+0xd0>
   928c4:	2a0103e0 	mov	w0, w1
   928c8:	a94153f3 	ldp	x19, x20, [sp, #16]
   928cc:	f94013f5 	ldr	x21, [sp, #32]
   928d0:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   928d4:	d65f03c0 	ret
   928d8:	52800001 	mov	w1, #0x0                   	// #0
   928dc:	17ffffe9 	b	92880 <CUSBSerialCDCDevice::SetLineCoding()+0x70>
   928e0:	9400344c 	bl	9fa10 <CLogger::Get()>
   928e4:	b0000103 	adrp	x3, b3000 <_etext+0x2158>
   928e8:	b0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   928ec:	91174063 	add	x3, x3, #0x5d0
   928f0:	910c4021 	add	x1, x1, #0x310
   928f4:	52800042 	mov	w2, #0x2                   	// #2
   928f8:	94003632 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   928fc:	52800001 	mov	w1, #0x0                   	// #0
   92900:	a94153f3 	ldp	x19, x20, [sp, #16]
   92904:	2a0103e0 	mov	w0, w1
   92908:	f94013f5 	ldr	x21, [sp, #32]
   9290c:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   92910:	d65f03c0 	ret
   92914:	d503201f 	nop
   92918:	d503201f 	nop
   9291c:	d503201f 	nop

0000000000092920 <CUSBSerialCDCDevice::SetBaudRate(unsigned int)>:
   92920:	b9002801 	str	w1, [x0, #40]
   92924:	17ffffbb 	b	92810 <CUSBSerialCDCDevice::SetLineCoding()>
   92928:	d503201f 	nop
   9292c:	d503201f 	nop

0000000000092930 <CUSBSerialCDCDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   92930:	29058801 	stp	w1, w2, [x0, #44]
   92934:	b9003403 	str	w3, [x0, #52]
   92938:	17ffffb6 	b	92810 <CUSBSerialCDCDevice::SetLineCoding()>
   9293c:	d503201f 	nop

0000000000092940 <CUSBSerialCDCDevice::Configure()>:
   92940:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   92944:	910003fd 	mov	x29, sp
   92948:	a90153f3 	stp	x19, x20, [sp, #16]
   9294c:	3941d813 	ldrb	w19, [x0, #118]
   92950:	34000533 	cbz	w19, 929f4 <CUSBSerialCDCDevice::Configure()+0xb4>
   92954:	aa0003f4 	mov	x20, x0
   92958:	9400244e 	bl	9ba90 <CUSBSerialHostDevice::Configure()>
   9295c:	72001c13 	ands	w19, w0, #0xff
   92960:	54000340 	b.eq	929c8 <CUSBSerialCDCDevice::Configure()+0x88>  // b.none
   92964:	aa1403e0 	mov	x0, x20
   92968:	97ffffaa 	bl	92810 <CUSBSerialCDCDevice::SetLineCoding()>
   9296c:	72001c13 	ands	w19, w0, #0xff
   92970:	540003a0 	b.eq	929e4 <CUSBSerialCDCDevice::Configure()+0xa4>  // b.none
   92974:	aa1403e0 	mov	x0, x20
   92978:	f90013f5 	str	x21, [sp, #32]
   9297c:	97ffdfcd 	bl	8a8b0 <CUSBFunction::GetHost() const>
   92980:	aa0003f5 	mov	x21, x0
   92984:	aa1403e0 	mov	x0, x20
   92988:	97ffdfbe 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   9298c:	aa0003e1 	mov	x1, x0
   92990:	3941d685 	ldrb	w5, [x20, #117]
   92994:	aa1503e0 	mov	x0, x21
   92998:	52800007 	mov	w7, #0x0                   	// #0
   9299c:	d2800006 	mov	x6, #0x0                   	// #0
   929a0:	52800064 	mov	w4, #0x3                   	// #3
   929a4:	52800443 	mov	w3, #0x22                  	// #34
   929a8:	52800422 	mov	w2, #0x21                  	// #33
   929ac:	97ffb999 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   929b0:	37f80300 	tbnz	w0, #31, 92a10 <CUSBSerialCDCDevice::Configure()+0xd0>
   929b4:	2a1303e0 	mov	w0, w19
   929b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   929bc:	f94013f5 	ldr	x21, [sp, #32]
   929c0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   929c4:	d65f03c0 	ret
   929c8:	94003412 	bl	9fa10 <CLogger::Get()>
   929cc:	b0000103 	adrp	x3, b3000 <_etext+0x2158>
   929d0:	b0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   929d4:	9106a063 	add	x3, x3, #0x1a8
   929d8:	910c4021 	add	x1, x1, #0x310
   929dc:	52800022 	mov	w2, #0x1                   	// #1
   929e0:	940035f8 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   929e4:	2a1303e0 	mov	w0, w19
   929e8:	a94153f3 	ldp	x19, x20, [sp, #16]
   929ec:	a8c37bfd 	ldp	x29, x30, [sp], #48
   929f0:	d65f03c0 	ret
   929f4:	b0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   929f8:	910c4021 	add	x1, x1, #0x310
   929fc:	97ffdfc5 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   92a00:	2a1303e0 	mov	w0, w19
   92a04:	a94153f3 	ldp	x19, x20, [sp, #16]
   92a08:	a8c37bfd 	ldp	x29, x30, [sp], #48
   92a0c:	d65f03c0 	ret
   92a10:	94003400 	bl	9fa10 <CLogger::Get()>
   92a14:	b0000103 	adrp	x3, b3000 <_etext+0x2158>
   92a18:	b0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   92a1c:	9117a063 	add	x3, x3, #0x5e8
   92a20:	910c4021 	add	x1, x1, #0x310
   92a24:	52800022 	mov	w2, #0x1                   	// #1
   92a28:	52800013 	mov	w19, #0x0                   	// #0
   92a2c:	940035e5 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   92a30:	f94013f5 	ldr	x21, [sp, #32]
   92a34:	17ffffec 	b	929e4 <CUSBSerialCDCDevice::Configure()+0xa4>
	...

0000000000092a40 <CUSBTouchScreenDevice::~CUSBTouchScreenDevice()>:
   92a40:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   92a44:	910003fd 	mov	x29, sp
   92a48:	b0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   92a4c:	910ca021 	add	x1, x1, #0x328
   92a50:	f9000bf3 	str	x19, [sp, #16]
   92a54:	aa0003f3 	mov	x19, x0
   92a58:	f9411400 	ldr	x0, [x0, #552]
   92a5c:	f9000261 	str	x1, [x19]
   92a60:	b4000080 	cbz	x0, 92a70 <CUSBTouchScreenDevice::~CUSBTouchScreenDevice()+0x30>
   92a64:	f9400001 	ldr	x1, [x0]
   92a68:	f9400421 	ldr	x1, [x1, #8]
   92a6c:	d63f0020 	blr	x1
   92a70:	aa1303e0 	mov	x0, x19
   92a74:	f901167f 	str	xzr, [x19, #552]
   92a78:	f9400bf3 	ldr	x19, [sp, #16]
   92a7c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   92a80:	17ffeb7c 	b	8d870 <CUSBHIDDevice::~CUSBHIDDevice()>
   92a84:	d503201f 	nop
   92a88:	d503201f 	nop
   92a8c:	d503201f 	nop

0000000000092a90 <CUSBTouchScreenDevice::~CUSBTouchScreenDevice()>:
   92a90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   92a94:	910003fd 	mov	x29, sp
   92a98:	b0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   92a9c:	910ca021 	add	x1, x1, #0x328
   92aa0:	f9000bf3 	str	x19, [sp, #16]
   92aa4:	aa0003f3 	mov	x19, x0
   92aa8:	f9411400 	ldr	x0, [x0, #552]
   92aac:	f9000261 	str	x1, [x19]
   92ab0:	b4000080 	cbz	x0, 92ac0 <CUSBTouchScreenDevice::~CUSBTouchScreenDevice()+0x30>
   92ab4:	f9400001 	ldr	x1, [x0]
   92ab8:	f9400421 	ldr	x1, [x1, #8]
   92abc:	d63f0020 	blr	x1
   92ac0:	aa1303e0 	mov	x0, x19
   92ac4:	f901167f 	str	xzr, [x19, #552]
   92ac8:	97ffeb6a 	bl	8d870 <CUSBHIDDevice::~CUSBHIDDevice()>
   92acc:	aa1303e0 	mov	x0, x19
   92ad0:	d2804601 	mov	x1, #0x230                 	// #560
   92ad4:	f9400bf3 	ldr	x19, [sp, #16]
   92ad8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   92adc:	14005609 	b	a8300 <operator delete(void*, unsigned long)>

0000000000092ae0 <CUSBTouchScreenDevice::CUSBTouchScreenDevice(CUSBFunction*)>:
   92ae0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   92ae4:	52800002 	mov	w2, #0x0                   	// #0
   92ae8:	910003fd 	mov	x29, sp
   92aec:	f9000bf3 	str	x19, [sp, #16]
   92af0:	aa0003f3 	mov	x19, x0
   92af4:	97ffeb47 	bl	8d810 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   92af8:	b0000123 	adrp	x3, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   92afc:	910ca063 	add	x3, x3, #0x328
   92b00:	f901167f 	str	xzr, [x19, #552]
   92b04:	52800001 	mov	w1, #0x0                   	// #0
   92b08:	91012260 	add	x0, x19, #0x48
   92b0c:	d2803482 	mov	x2, #0x1a4                 	// #420
   92b10:	f9000263 	str	x3, [x19]
   92b14:	94005335 	bl	a77e8 <memset>
   92b18:	9107b261 	add	x1, x19, #0x1ec
   92b1c:	9107da60 	add	x0, x19, #0x1f6
   92b20:	3800143f 	strb	wzr, [x1], #1
   92b24:	eb00003f 	cmp	x1, x0
   92b28:	54ffffc1 	b.ne	92b20 <CUSBTouchScreenDevice::CUSBTouchScreenDevice(CUSBFunction*)+0x40>  // b.any
   92b2c:	f9400bf3 	ldr	x19, [sp, #16]
   92b30:	a8c27bfd 	ldp	x29, x30, [sp], #32
   92b34:	d65f03c0 	ret
   92b38:	d503201f 	nop
   92b3c:	d503201f 	nop

0000000000092b40 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)>:
   92b40:	34001e82 	cbz	w2, 92f10 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x3d0>
   92b44:	5280000e 	mov	w14, #0x0                   	// #0
   92b48:	52800007 	mov	w7, #0x0                   	// #0
   92b4c:	5280000c 	mov	w12, #0x0                   	// #0
   92b50:	52800006 	mov	w6, #0x0                   	// #0
   92b54:	5280000b 	mov	w11, #0x0                   	// #0
   92b58:	52800005 	mov	w5, #0x0                   	// #0
   92b5c:	5280000a 	mov	w10, #0x0                   	// #0
   92b60:	5280000f 	mov	w15, #0x0                   	// #0
   92b64:	d503201f 	nop
   92b68:	39400023 	ldrb	w3, [x1]
   92b6c:	12000464 	and	w4, w3, #0x3
   92b70:	7100089f 	cmp	w4, #0x2
   92b74:	540010c0 	b.eq	92d8c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x24c>  // b.none
   92b78:	71000c9f 	cmp	w4, #0x3
   92b7c:	54000f40 	b.eq	92d64 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x224>  // b.none
   92b80:	7100049f 	cmp	w4, #0x1
   92b84:	54000e00 	b.eq	92d44 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x204>  // b.none
   92b88:	91000421 	add	x1, x1, #0x1
   92b8c:	51000442 	sub	w2, w2, #0x1
   92b90:	52800004 	mov	w4, #0x0                   	// #0
   92b94:	121e1463 	and	w3, w3, #0xfc
   92b98:	7101d07f 	cmp	w3, #0x74
   92b9c:	54000e00 	b.eq	92d5c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x21c>  // b.none
   92ba0:	54000628 	b.hi	92c64 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x124>  // b.pmore
   92ba4:	7100107f 	cmp	w3, #0x4
   92ba8:	54000a80 	b.eq	92cf8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1b8>  // b.none
   92bac:	7100207f 	cmp	w3, #0x8
   92bb0:	54000a61 	b.ne	92cfc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1bc>  // b.any
   92bb4:	2a0403e5 	mov	w5, w4
   92bb8:	710005ff 	cmp	w15, #0x1
   92bbc:	540001e0 	b.eq	92bf8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xb8>  // b.none
   92bc0:	710009ff 	cmp	w15, #0x2
   92bc4:	54000621 	b.ne	92c88 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x148>  // b.any
   92bc8:	7102807f 	cmp	w3, #0xa0
   92bcc:	54001160 	b.eq	92df8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x2b8>  // b.none
   92bd0:	7103007f 	cmp	w3, #0xc0
   92bd4:	54000e81 	b.ne	92da4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x264>  // b.any
   92bd8:	710025df 	cmp	w14, #0x9
   92bdc:	5280002f 	mov	w15, #0x1                   	// #1
   92be0:	540000c8 	b.hi	92bf8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xb8>  // b.pmore
   92be4:	b9405003 	ldr	w3, [x0, #80]
   92be8:	0b0f01ce 	add	w14, w14, w15
   92bec:	0b0f0063 	add	w3, w3, w15
   92bf0:	b9005003 	str	w3, [x0, #80]
   92bf4:	d503201f 	nop
   92bf8:	35fffb82 	cbnz	w2, 92b68 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x28>
   92bfc:	d503201f 	nop
   92c00:	11001ce2 	add	w2, w7, #0x7
   92c04:	53037c42 	lsr	w2, w2, #3
   92c08:	b9405003 	ldr	w3, [x0, #80]
   92c0c:	b9004802 	str	w2, [x0, #72]
   92c10:	7100047f 	cmp	w3, #0x1
   92c14:	540001c9 	b.ls	92c4c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x10c>  // b.plast
   92c18:	b9405801 	ldr	w1, [x0, #88]
   92c1c:	34000ee1 	cbz	w1, 92df8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x2b8>
   92c20:	91024001 	add	x1, x0, #0x90
   92c24:	51000462 	sub	w2, w3, #0x1
   92c28:	52800504 	mov	w4, #0x28                  	// #40
   92c2c:	9101a000 	add	x0, x0, #0x68
   92c30:	9ba40442 	umaddl	x2, w2, w4, x1
   92c34:	d503201f 	nop
   92c38:	b9400001 	ldr	w1, [x0]
   92c3c:	9100a000 	add	x0, x0, #0x28
   92c40:	eb02001f 	cmp	x0, x2
   92c44:	34000da1 	cbz	w1, 92df8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x2b8>
   92c48:	54ffff81 	b.ne	92c38 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xf8>  // b.any
   92c4c:	710001ff 	cmp	w15, #0x0
   92c50:	1a9f17e0 	cset	w0, eq	// eq = none
   92c54:	7100007f 	cmp	w3, #0x0
   92c58:	1a9f07e1 	cset	w1, ne	// ne = any
   92c5c:	0a010000 	and	w0, w0, w1
   92c60:	d65f03c0 	ret
   92c64:	7102107f 	cmp	w3, #0x84
   92c68:	54000200 	b.eq	92ca8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x168>  // b.none
   92c6c:	7102507f 	cmp	w3, #0x94
   92c70:	54000461 	b.ne	92cfc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1bc>  // b.any
   92c74:	710005ff 	cmp	w15, #0x1
   92c78:	2a0403e6 	mov	w6, w4
   92c7c:	540001c0 	b.eq	92cb4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x174>  // b.none
   92c80:	710009ff 	cmp	w15, #0x2
   92c84:	54000a00 	b.eq	92dc4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x284>  // b.none
   92c88:	7102807f 	cmp	w3, #0xa0
   92c8c:	7a410880 	ccmp	w4, #0x1, #0x0, eq	// eq = none
   92c90:	54000981 	b.ne	92dc0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x280>  // b.any
   92c94:	7100355f 	cmp	w10, #0xd
   92c98:	7a4408a0 	ccmp	w5, #0x4, #0x0, eq	// eq = none
   92c9c:	1a9f17ef 	cset	w15, eq	// eq = none
   92ca0:	35fff642 	cbnz	w2, 92b68 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x28>
   92ca4:	17ffffd7 	b	92c00 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xc0>
   92ca8:	710005ff 	cmp	w15, #0x1
   92cac:	2a0403eb 	mov	w11, w4
   92cb0:	54fffe81 	b.ne	92c80 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x140>  // b.any
   92cb4:	7102807f 	cmp	w3, #0xa0
   92cb8:	540002a0 	b.eq	92d0c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1cc>  // b.none
   92cbc:	7103007f 	cmp	w3, #0xc0
   92cc0:	5280000f 	mov	w15, #0x0                   	// #0
   92cc4:	54fff9a0 	b.eq	92bf8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xb8>  // b.none
   92cc8:	7102007f 	cmp	w3, #0x80
   92ccc:	54000901 	b.ne	92dec <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x2ac>  // b.any
   92cd0:	12000484 	and	w4, w4, #0x3
   92cd4:	5280002f 	mov	w15, #0x1                   	// #1
   92cd8:	7100089f 	cmp	w4, #0x2
   92cdc:	54000b80 	b.eq	92e4c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x30c>  // b.none
   92ce0:	39413004 	ldrb	w4, [x0, #76]
   92ce4:	1b061d83 	madd	w3, w12, w6, w7
   92ce8:	6b0b009f 	cmp	w4, w11
   92cec:	1a870067 	csel	w7, w3, w7, eq	// eq = none
   92cf0:	35fff3c2 	cbnz	w2, 92b68 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x28>
   92cf4:	17ffffc3 	b	92c00 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xc0>
   92cf8:	2a0403ea 	mov	w10, w4
   92cfc:	710005ff 	cmp	w15, #0x1
   92d00:	54fff601 	b.ne	92bc0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x80>  // b.any
   92d04:	7102807f 	cmp	w3, #0xa0
   92d08:	54fffda1 	b.ne	92cbc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x17c>  // b.any
   92d0c:	710088bf 	cmp	w5, #0x22
   92d10:	5280002f 	mov	w15, #0x1                   	// #1
   92d14:	7a420880 	ccmp	w4, #0x2, #0x0, eq	// eq = none
   92d18:	7a4d0940 	ccmp	w10, #0xd, #0x0, eq	// eq = none
   92d1c:	54fff6e1 	b.ne	92bf8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xb8>  // b.any
   92d20:	39413003 	ldrb	w3, [x0, #76]
   92d24:	35000583 	cbnz	w3, 92dd4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x294>
   92d28:	3901300b 	strb	w11, [x0, #76]
   92d2c:	110020e7 	add	w7, w7, #0x8
   92d30:	52800445 	mov	w5, #0x22                  	// #34
   92d34:	528001aa 	mov	w10, #0xd                   	// #13
   92d38:	5280004f 	mov	w15, #0x2                   	// #2
   92d3c:	35fff162 	cbnz	w2, 92b68 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x28>
   92d40:	17ffffb0 	b	92c00 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xc0>
   92d44:	121e1463 	and	w3, w3, #0xfc
   92d48:	39400424 	ldrb	w4, [x1, #1]
   92d4c:	51000842 	sub	w2, w2, #0x2
   92d50:	7101d07f 	cmp	w3, #0x74
   92d54:	91000821 	add	x1, x1, #0x2
   92d58:	54fff241 	b.ne	92ba0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x60>  // b.any
   92d5c:	2a0403ec 	mov	w12, w4
   92d60:	17ffff96 	b	92bb8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x78>
   92d64:	3940042d 	ldrb	w13, [x1, #1]
   92d68:	51001442 	sub	w2, w2, #0x5
   92d6c:	91001421 	add	x1, x1, #0x5
   92d70:	385fd029 	ldurb	w9, [x1, #-3]
   92d74:	385fe028 	ldurb	w8, [x1, #-2]
   92d78:	385ff024 	ldurb	w4, [x1, #-1]
   92d7c:	aa0921a9 	orr	x9, x13, x9, lsl #8
   92d80:	aa084128 	orr	x8, x9, x8, lsl #16
   92d84:	2a046104 	orr	w4, w8, w4, lsl #24
   92d88:	17ffff83 	b	92b94 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x54>
   92d8c:	39400428 	ldrb	w8, [x1, #1]
   92d90:	51000c42 	sub	w2, w2, #0x3
   92d94:	91000c21 	add	x1, x1, #0x3
   92d98:	385ff024 	ldurb	w4, [x1, #-1]
   92d9c:	2a042104 	orr	w4, w8, w4, lsl #8
   92da0:	17ffff7d 	b	92b94 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x54>
   92da4:	7102007f 	cmp	w3, #0x80
   92da8:	540001c1 	b.ne	92de0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x2a0>  // b.any
   92dac:	1200048f 	and	w15, w4, #0x3
   92db0:	710009ff 	cmp	w15, #0x2
   92db4:	54000260 	b.eq	92e00 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x2c0>  // b.none
   92db8:	5280004f 	mov	w15, #0x2                   	// #2
   92dbc:	17ffffc9 	b	92ce0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1a0>
   92dc0:	5280000f 	mov	w15, #0x0                   	// #0
   92dc4:	7102007f 	cmp	w3, #0x80
   92dc8:	54fff8c0 	b.eq	92ce0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1a0>  // b.none
   92dcc:	35ffece2 	cbnz	w2, 92b68 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x28>
   92dd0:	17ffff8c 	b	92c00 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xc0>
   92dd4:	52800445 	mov	w5, #0x22                  	// #34
   92dd8:	528001aa 	mov	w10, #0xd                   	// #13
   92ddc:	d503201f 	nop
   92de0:	5280004f 	mov	w15, #0x2                   	// #2
   92de4:	35ffec22 	cbnz	w2, 92b68 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x28>
   92de8:	17ffff86 	b	92c00 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xc0>
   92dec:	5280002f 	mov	w15, #0x1                   	// #1
   92df0:	35ffebc2 	cbnz	w2, 92b68 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x28>
   92df4:	17ffff83 	b	92c00 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xc0>
   92df8:	52800000 	mov	w0, #0x0                   	// #0
   92dfc:	d65f03c0 	ret
   92e00:	7100055f 	cmp	w10, #0x1
   92e04:	54000360 	b.eq	92e70 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x330>  // b.none
   92e08:	7100355f 	cmp	w10, #0xd
   92e0c:	54fff6a1 	b.ne	92ce0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1a0>  // b.any
   92e10:	710108bf 	cmp	w5, #0x42
   92e14:	540006c0 	b.eq	92eec <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x3ac>  // b.none
   92e18:	710144bf 	cmp	w5, #0x51
   92e1c:	54000560 	b.eq	92ec8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x388>  // b.none
   92e20:	7100c0bf 	cmp	w5, #0x30
   92e24:	54fff5e1 	b.ne	92ce0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1a0>  // b.any
   92e28:	710004df 	cmp	w6, #0x1
   92e2c:	54fffe61 	b.ne	92df8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x2b8>  // b.any
   92e30:	710025df 	cmp	w14, #0x9
   92e34:	54fff568 	b.hi	92ce0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1a0>  // b.pmore
   92e38:	d37e7dc3 	ubfiz	x3, x14, #2, #32
   92e3c:	8b2e4063 	add	x3, x3, w14, uxtw
   92e40:	8b030c03 	add	x3, x0, x3, lsl #3
   92e44:	290db067 	stp	w7, w12, [x3, #108]
   92e48:	17ffffa6 	b	92ce0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1a0>
   92e4c:	710150bf 	cmp	w5, #0x54
   92e50:	7a4d0940 	ccmp	w10, #0xd, #0x0, eq	// eq = none
   92e54:	54fff461 	b.ne	92ce0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1a0>  // b.any
   92e58:	6b0f00df 	cmp	w6, w15
   92e5c:	54fffce1 	b.ne	92df8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x2b8>  // b.any
   92e60:	52800a85 	mov	w5, #0x54                  	// #84
   92e64:	528001aa 	mov	w10, #0xd                   	// #13
   92e68:	290ab007 	stp	w7, w12, [x0, #84]
   92e6c:	17ffff9d 	b	92ce0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1a0>
   92e70:	7100c0bf 	cmp	w5, #0x30
   92e74:	54000180 	b.eq	92ea4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x364>  // b.none
   92e78:	7100c4bf 	cmp	w5, #0x31
   92e7c:	54fff321 	b.ne	92ce0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1a0>  // b.any
   92e80:	710004df 	cmp	w6, #0x1
   92e84:	54fffba1 	b.ne	92df8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x2b8>  // b.any
   92e88:	710025df 	cmp	w14, #0x9
   92e8c:	54fff2a8 	b.hi	92ce0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1a0>  // b.pmore
   92e90:	d37e7dc3 	ubfiz	x3, x14, #2, #32
   92e94:	8b2e4063 	add	x3, x3, w14, uxtw
   92e98:	8b030c03 	add	x3, x0, x3, lsl #3
   92e9c:	290fb067 	stp	w7, w12, [x3, #124]
   92ea0:	17ffff90 	b	92ce0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1a0>
   92ea4:	710004df 	cmp	w6, #0x1
   92ea8:	54fffa81 	b.ne	92df8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x2b8>  // b.any
   92eac:	710025df 	cmp	w14, #0x9
   92eb0:	54fff188 	b.hi	92ce0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1a0>  // b.pmore
   92eb4:	d37e7dc3 	ubfiz	x3, x14, #2, #32
   92eb8:	8b2e4063 	add	x3, x3, w14, uxtw
   92ebc:	8b030c03 	add	x3, x0, x3, lsl #3
   92ec0:	290eb067 	stp	w7, w12, [x3, #116]
   92ec4:	17ffff87 	b	92ce0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1a0>
   92ec8:	710004df 	cmp	w6, #0x1
   92ecc:	54fff961 	b.ne	92df8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x2b8>  // b.any
   92ed0:	710025df 	cmp	w14, #0x9
   92ed4:	54fff068 	b.hi	92ce0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1a0>  // b.pmore
   92ed8:	d37e7dc3 	ubfiz	x3, x14, #2, #32
   92edc:	8b2e4063 	add	x3, x3, w14, uxtw
   92ee0:	8b030c03 	add	x3, x0, x3, lsl #3
   92ee4:	290cb067 	stp	w7, w12, [x3, #100]
   92ee8:	17ffff7e 	b	92ce0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1a0>
   92eec:	710004df 	cmp	w6, #0x1
   92ef0:	54fff841 	b.ne	92df8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x2b8>  // b.any
   92ef4:	710025df 	cmp	w14, #0x9
   92ef8:	54ffef48 	b.hi	92ce0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1a0>  // b.pmore
   92efc:	d37e7dc3 	ubfiz	x3, x14, #2, #32
   92f00:	8b2e4063 	add	x3, x3, w14, uxtw
   92f04:	8b030c03 	add	x3, x0, x3, lsl #3
   92f08:	290bb067 	stp	w7, w12, [x3, #92]
   92f0c:	17ffff75 	b	92ce0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1a0>
   92f10:	5280000f 	mov	w15, #0x0                   	// #0
   92f14:	17ffff3d 	b	92c08 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xc8>
   92f18:	d503201f 	nop
   92f1c:	d503201f 	nop

0000000000092f20 <CUSBTouchScreenDevice::Configure()>:
   92f20:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   92f24:	52800421 	mov	w1, #0x21                  	// #33
   92f28:	910003fd 	mov	x29, sp
   92f2c:	a90153f3 	stp	x19, x20, [sp, #16]
   92f30:	aa0003f4 	mov	x20, x0
   92f34:	a9025bf5 	stp	x21, x22, [sp, #32]
   92f38:	a90363f7 	stp	x23, x24, [sp, #48]
   92f3c:	97ffde69 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   92f40:	b40000c0 	cbz	x0, 92f58 <CUSBTouchScreenDevice::Configure()+0x38>
   92f44:	aa0003f3 	mov	x19, x0
   92f48:	39401c00 	ldrb	w0, [x0, #7]
   92f4c:	39402275 	ldrb	w21, [x19, #8]
   92f50:	2a152015 	orr	w21, w0, w21, lsl #8
   92f54:	350001b5 	cbnz	w21, 92f88 <CUSBTouchScreenDevice::Configure()+0x68>
   92f58:	b0000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   92f5c:	910e4021 	add	x1, x1, #0x390
   92f60:	aa1403e0 	mov	x0, x20
   92f64:	52800013 	mov	w19, #0x0                   	// #0
   92f68:	97ffde6a 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   92f6c:	910003bf 	mov	sp, x29
   92f70:	2a1303e0 	mov	w0, w19
   92f74:	a94153f3 	ldp	x19, x20, [sp, #16]
   92f78:	a9425bf5 	ldp	x21, x22, [sp, #32]
   92f7c:	a94363f7 	ldp	x23, x24, [sp, #48]
   92f80:	a8c47bfd 	ldp	x29, x30, [sp], #64
   92f84:	d65f03c0 	ret
   92f88:	92403ea1 	and	x1, x21, #0xffff
   92f8c:	aa1403e0 	mov	x0, x20
   92f90:	d1000421 	sub	x1, x1, #0x1
   92f94:	b2401421 	orr	x1, x1, #0x3f
   92f98:	91010021 	add	x1, x1, #0x40
   92f9c:	927cec21 	and	x1, x1, #0xfffffffffffffff0
   92fa0:	cb2163ff 	sub	sp, sp, x1
   92fa4:	97ffde43 	bl	8a8b0 <CUSBFunction::GetHost() const>
   92fa8:	aa0003f7 	mov	x23, x0
   92fac:	aa1403e0 	mov	x0, x20
   92fb0:	97ffde34 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   92fb4:	39401a78 	ldrb	w24, [x19, #6]
   92fb8:	aa0003e1 	mov	x1, x0
   92fbc:	9100fff6 	add	x22, sp, #0x3f
   92fc0:	aa1403e0 	mov	x0, x20
   92fc4:	aa0103f3 	mov	x19, x1
   92fc8:	927ae6d6 	and	x22, x22, #0xffffffffffffffc0
   92fcc:	97ffdea5 	bl	8aa60 <CUSBFunction::GetInterfaceNumber() const>
   92fd0:	12001c07 	and	w7, w0, #0xff
   92fd4:	aa1303e1 	mov	x1, x19
   92fd8:	2a1803e2 	mov	w2, w24
   92fdc:	aa1703e0 	mov	x0, x23
   92fe0:	aa1603e4 	mov	x4, x22
   92fe4:	12800fc6 	mov	w6, #0xffffff81            	// #-127
   92fe8:	2a1503e5 	mov	w5, w21
   92fec:	52800003 	mov	w3, #0x0                   	// #0
   92ff0:	97ffb850 	bl	81130 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   92ff4:	6b15001f 	cmp	w0, w21
   92ff8:	2a0003e2 	mov	w2, w0
   92ffc:	54000200 	b.eq	9303c <CUSBTouchScreenDevice::Configure()+0x11c>  // b.none
   93000:	94003284 	bl	9fa10 <CLogger::Get()>
   93004:	f00000e3 	adrp	x3, b2000 <_etext+0x1158>
   93008:	90000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9300c:	911d0063 	add	x3, x3, #0x740
   93010:	910e4021 	add	x1, x1, #0x390
   93014:	52800022 	mov	w2, #0x1                   	// #1
   93018:	52800013 	mov	w19, #0x0                   	// #0
   9301c:	94003469 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   93020:	910003bf 	mov	sp, x29
   93024:	2a1303e0 	mov	w0, w19
   93028:	a94153f3 	ldp	x19, x20, [sp, #16]
   9302c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   93030:	a94363f7 	ldp	x23, x24, [sp, #48]
   93034:	a8c47bfd 	ldp	x29, x30, [sp], #64
   93038:	d65f03c0 	ret
   9303c:	aa1603e1 	mov	x1, x22
   93040:	aa1403e0 	mov	x0, x20
   93044:	97fffebf 	bl	92b40 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)>
   93048:	72001c13 	ands	w19, w0, #0xff
   9304c:	54000280 	b.eq	9309c <CUSBTouchScreenDevice::Configure()+0x17c>  // b.none
   93050:	b9404a81 	ldr	w1, [x20, #72]
   93054:	aa1403e0 	mov	x0, x20
   93058:	97ffea32 	bl	8d920 <CUSBHIDDevice::ConfigureHID(unsigned int)>
   9305c:	72001c13 	ands	w19, w0, #0xff
   93060:	540002e0 	b.eq	930bc <CUSBTouchScreenDevice::Configure()+0x19c>  // b.none
   93064:	aa1403e0 	mov	x0, x20
   93068:	97ffeb6e 	bl	8de20 <CUSBHIDDevice::StartRequest()>
   9306c:	72001c13 	ands	w19, w0, #0xff
   93070:	54fff7e0 	b.eq	92f6c <CUSBTouchScreenDevice::Configure()+0x4c>  // b.none
   93074:	f9411680 	ldr	x0, [x20, #552]
   93078:	b5000320 	cbnz	x0, 930dc <CUSBTouchScreenDevice::Configure()+0x1bc>
   9307c:	d2800900 	mov	x0, #0x48                  	// #72
   93080:	94005478 	bl	a8260 <operator new(unsigned long)>
   93084:	aa0003f5 	mov	x21, x0
   93088:	d2800002 	mov	x2, #0x0                   	// #0
   9308c:	d2800001 	mov	x1, #0x0                   	// #0
   93090:	94002738 	bl	9cd70 <CTouchScreenDevice::CTouchScreenDevice(void (*)(void*), void*)>
   93094:	f9011695 	str	x21, [x20, #552]
   93098:	17ffffb5 	b	92f6c <CUSBTouchScreenDevice::Configure()+0x4c>
   9309c:	9400325d 	bl	9fa10 <CLogger::Get()>
   930a0:	90000103 	adrp	x3, b3000 <_etext+0x2158>
   930a4:	90000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   930a8:	91182063 	add	x3, x3, #0x608
   930ac:	910e4021 	add	x1, x1, #0x390
   930b0:	52800022 	mov	w2, #0x1                   	// #1
   930b4:	94003443 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   930b8:	17ffffad 	b	92f6c <CUSBTouchScreenDevice::Configure()+0x4c>
   930bc:	94003255 	bl	9fa10 <CLogger::Get()>
   930c0:	d00000e3 	adrp	x3, b1000 <_etext+0x158>
   930c4:	90000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   930c8:	9100a063 	add	x3, x3, #0x28
   930cc:	910e4021 	add	x1, x1, #0x390
   930d0:	52800022 	mov	w2, #0x1                   	// #1
   930d4:	9400343b 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   930d8:	17ffffa5 	b	92f6c <CUSBTouchScreenDevice::Configure()+0x4c>
   930dc:	90000101 	adrp	x1, b3000 <_etext+0x2158>
   930e0:	90000100 	adrp	x0, b3000 <_etext+0x2158>
   930e4:	9118a021 	add	x1, x1, #0x628
   930e8:	91190000 	add	x0, x0, #0x640
   930ec:	52800f42 	mov	w2, #0x7a                  	// #122
   930f0:	94002b14 	bl	9dd40 <assertion_failed>
   930f4:	d503201f 	nop
   930f8:	d503201f 	nop
   930fc:	d503201f 	nop

0000000000093100 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>:
   93100:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   93104:	910003fd 	mov	x29, sp
   93108:	b4000400 	cbz	x0, 93188 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)+0x88>
   9310c:	b9400424 	ldr	w4, [x1, #4]
   93110:	7100809f 	cmp	w4, #0x20
   93114:	54000468 	b.hi	931a0 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)+0xa0>  // b.pmore
   93118:	aa0003e3 	mov	x3, x0
   9311c:	2a0203e0 	mov	w0, w2
   93120:	34000244 	cbz	w4, 93168 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)+0x68>
   93124:	b9400020 	ldr	w0, [x1]
   93128:	7100609f 	cmp	w4, #0x18
   9312c:	53037c01 	lsr	w1, w0, #3
   93130:	12000805 	and	w5, w0, #0x7
   93134:	b8614862 	ldr	w2, [x3, w1, uxtw]
   93138:	53037c00 	lsr	w0, w0, #3
   9313c:	8b000063 	add	x3, x3, x0
   93140:	1ac52440 	lsr	w0, w2, w5
   93144:	54000169 	b.ls	93170 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)+0x70>  // b.plast
   93148:	b8403062 	ldur	w2, [x3, #3]
   9314c:	51006084 	sub	w4, w4, #0x18
   93150:	52800021 	mov	w1, #0x1                   	// #1
   93154:	1ac42021 	lsl	w1, w1, w4
   93158:	51000421 	sub	w1, w1, #0x1
   9315c:	1ac52442 	lsr	w2, w2, w5
   93160:	0a020021 	and	w1, w1, w2
   93164:	33081c20 	bfi	w0, w1, #24, #8
   93168:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9316c:	d65f03c0 	ret
   93170:	52800021 	mov	w1, #0x1                   	// #1
   93174:	a8c17bfd 	ldp	x29, x30, [sp], #16
   93178:	1ac42021 	lsl	w1, w1, w4
   9317c:	51000421 	sub	w1, w1, #0x1
   93180:	0a000020 	and	w0, w1, w0
   93184:	d65f03c0 	ret
   93188:	90000101 	adrp	x1, b3000 <_etext+0x2158>
   9318c:	d00000e0 	adrp	x0, b1000 <_etext+0x158>
   93190:	9118a021 	add	x1, x1, #0x628
   93194:	911f6000 	add	x0, x0, #0x7d8
   93198:	52803702 	mov	w2, #0x1b8                 	// #440
   9319c:	94002ae9 	bl	9dd40 <assertion_failed>
   931a0:	90000101 	adrp	x1, b3000 <_etext+0x2158>
   931a4:	90000100 	adrp	x0, b3000 <_etext+0x2158>
   931a8:	9118a021 	add	x1, x1, #0x628
   931ac:	91194000 	add	x0, x0, #0x650
   931b0:	52803782 	mov	w2, #0x1bc                 	// #444
   931b4:	94002ae3 	bl	9dd40 <assertion_failed>
   931b8:	d503201f 	nop
   931bc:	d503201f 	nop

00000000000931c0 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)>:
   931c0:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
   931c4:	910003fd 	mov	x29, sp
   931c8:	a90153f3 	stp	x19, x20, [sp, #16]
   931cc:	aa0003f4 	mov	x20, x0
   931d0:	f9411400 	ldr	x0, [x0, #552]
   931d4:	a9025bf5 	stp	x21, x22, [sp, #32]
   931d8:	b40010e0 	cbz	x0, 933f4 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x234>
   931dc:	aa0103f5 	mov	x21, x1
   931e0:	b40005e1 	cbz	x1, 9329c <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0xdc>
   931e4:	b9404a80 	ldr	w0, [x20, #72]
   931e8:	6b02001f 	cmp	w0, w2
   931ec:	54000581 	b.ne	9329c <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0xdc>  // b.any
   931f0:	39413280 	ldrb	w0, [x20, #76]
   931f4:	34000080 	cbz	w0, 93204 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x44>
   931f8:	39400021 	ldrb	w1, [x1]
   931fc:	6b00003f 	cmp	w1, w0
   93200:	540004e1 	b.ne	9329c <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0xdc>  // b.any
   93204:	52800022 	mov	w2, #0x1                   	// #1
   93208:	91015281 	add	x1, x20, #0x54
   9320c:	a90573fb 	stp	x27, x28, [sp, #80]
   93210:	aa1503e0 	mov	x0, x21
   93214:	97ffffbb 	bl	93100 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   93218:	7100281f 	cmp	w0, #0xa
   9321c:	2a0003fb 	mov	w27, w0
   93220:	54001368 	b.hi	9348c <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x2cc>  // b.pmore
   93224:	340002e0 	cbz	w0, 93280 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0xc0>
   93228:	52800501 	mov	w1, #0x28                  	// #40
   9322c:	a90363f7 	stp	x23, x24, [sp, #48]
   93230:	51000418 	sub	w24, w0, #0x1
   93234:	91021280 	add	x0, x20, #0x84
   93238:	91017293 	add	x19, x20, #0x5c
   9323c:	9101c3f6 	add	x22, sp, #0x70
   93240:	9ba10318 	umaddl	x24, w24, w1, x0
   93244:	a9046bf9 	stp	x25, x26, [sp, #64]
   93248:	12800019 	mov	w25, #0xffffffff            	// #-1
   9324c:	d503201f 	nop
   93250:	52800022 	mov	w2, #0x1                   	// #1
   93254:	aa1303e1 	mov	x1, x19
   93258:	aa1503e0 	mov	x0, x21
   9325c:	97ffffa9 	bl	93100 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   93260:	35000500 	cbnz	w0, 93300 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x140>
   93264:	390002d9 	strb	w25, [x22]
   93268:	9100a273 	add	x19, x19, #0x28
   9326c:	910006d6 	add	x22, x22, #0x1
   93270:	eb18027f 	cmp	x19, x24
   93274:	54fffee1 	b.ne	93250 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x90>  // b.any
   93278:	a94363f7 	ldp	x23, x24, [sp, #48]
   9327c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   93280:	d2800013 	mov	x19, #0x0                   	// #0
   93284:	9107b295 	add	x21, x20, #0x1ec
   93288:	9107da96 	add	x22, x20, #0x1f6
   9328c:	b9405286 	ldr	w6, [x20, #80]
   93290:	35000306 	cbnz	w6, 932f0 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x130>
   93294:	d503201f 	nop
   93298:	a94573fb 	ldp	x27, x28, [sp, #80]
   9329c:	a94153f3 	ldp	x19, x20, [sp, #16]
   932a0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   932a4:	a8c87bfd 	ldp	x29, x30, [sp], #128
   932a8:	d65f03c0 	ret
   932ac:	34000b7b 	cbz	w27, 93418 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x258>
   932b0:	38736ac5 	ldrb	w5, [x22, x19]
   932b4:	9101c3e3 	add	x3, sp, #0x70
   932b8:	52800001 	mov	w1, #0x0                   	// #0
   932bc:	14000005 	b	932d0 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x110>
   932c0:	11000421 	add	w1, w1, #0x1
   932c4:	91000463 	add	x3, x3, #0x1
   932c8:	6b01037f 	cmp	w27, w1
   932cc:	54000a60 	b.eq	93418 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x258>  // b.none
   932d0:	39400064 	ldrb	w4, [x3]
   932d4:	6b05009f 	cmp	w4, w5
   932d8:	54ffff41 	b.ne	932c0 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x100>  // b.any
   932dc:	6b01037f 	cmp	w27, w1
   932e0:	540009c0 	b.eq	93418 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x258>  // b.none
   932e4:	91000673 	add	x19, x19, #0x1
   932e8:	6b1300df 	cmp	w6, w19
   932ec:	54fffd69 	b.ls	93298 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0xd8>  // b.plast
   932f0:	38736aa1 	ldrb	w1, [x21, x19]
   932f4:	2a1303e2 	mov	w2, w19
   932f8:	34ffff61 	cbz	w1, 932e4 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x124>
   932fc:	17ffffec 	b	932ac <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0xec>
   93300:	52800022 	mov	w2, #0x1                   	// #1
   93304:	91004261 	add	x1, x19, #0x10
   93308:	aa1503e0 	mov	x0, x21
   9330c:	97ffff7d 	bl	93100 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   93310:	34fffaa0 	cbz	w0, 93264 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0xa4>
   93314:	52800002 	mov	w2, #0x0                   	// #0
   93318:	91002261 	add	x1, x19, #0x8
   9331c:	aa1503e0 	mov	x0, x21
   93320:	52800017 	mov	w23, #0x0                   	// #0
   93324:	97ffff77 	bl	93100 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   93328:	12001c1c 	and	w28, w0, #0xff
   9332c:	52800002 	mov	w2, #0x0                   	// #0
   93330:	91006261 	add	x1, x19, #0x18
   93334:	aa1503e0 	mov	x0, x21
   93338:	390002dc 	strb	w28, [x22]
   9333c:	97ffff71 	bl	93100 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   93340:	91008261 	add	x1, x19, #0x20
   93344:	2a0003fa 	mov	w26, w0
   93348:	52800002 	mov	w2, #0x0                   	// #0
   9334c:	aa1503e0 	mov	x0, x21
   93350:	97ffff6c 	bl	93100 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   93354:	b9405285 	ldr	w5, [x20, #80]
   93358:	2a0003e4 	mov	w4, w0
   9335c:	9107da81 	add	x1, x20, #0x1f6
   93360:	12800000 	mov	w0, #0xffffffff            	// #-1
   93364:	34000185 	cbz	w5, 93394 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1d4>
   93368:	385f6022 	ldurb	w2, [x1, #-10]
   9336c:	34000082 	cbz	w2, 9337c <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1bc>
   93370:	39400022 	ldrb	w2, [x1]
   93374:	6b1c005f 	cmp	w2, w28
   93378:	54000600 	b.eq	93438 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x278>  // b.none
   9337c:	110006f7 	add	w23, w23, #0x1
   93380:	91000421 	add	x1, x1, #0x1
   93384:	6b1700bf 	cmp	w5, w23
   93388:	54ffff01 	b.ne	93368 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1a8>  // b.any
   9338c:	710006e0 	subs	w0, w23, #0x1
   93390:	540008e0 	b.eq	934ac <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x2ec>  // b.none
   93394:	9107b281 	add	x1, x20, #0x1ec
   93398:	52800017 	mov	w23, #0x0                   	// #0
   9339c:	14000005 	b	933b0 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1f0>
   933a0:	110006f7 	add	w23, w23, #0x1
   933a4:	91000421 	add	x1, x1, #0x1
   933a8:	6b17001f 	cmp	w0, w23
   933ac:	54000060 	b.eq	933b8 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1f8>  // b.none
   933b0:	39400022 	ldrb	w2, [x1]
   933b4:	35ffff62 	cbnz	w2, 933a0 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1e0>
   933b8:	2a1703e5 	mov	w5, w23
   933bc:	52800001 	mov	w1, #0x0                   	// #0
   933c0:	f9411680 	ldr	x0, [x20, #552]
   933c4:	aa0503e2 	mov	x2, x5
   933c8:	2a1a03e3 	mov	w3, w26
   933cc:	b9006be4 	str	w4, [sp, #104]
   933d0:	f90033e5 	str	x5, [sp, #96]
   933d4:	940026d3 	bl	9cf20 <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)>
   933d8:	f94033e5 	ldr	x5, [sp, #96]
   933dc:	52800021 	mov	w1, #0x1                   	// #1
   933e0:	b9406be4 	ldr	w4, [sp, #104]
   933e4:	8b050280 	add	x0, x20, x5
   933e8:	3907b001 	strb	w1, [x0, #492]
   933ec:	3907d81c 	strb	w28, [x0, #502]
   933f0:	14000023 	b	9347c <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x2bc>
   933f4:	90000101 	adrp	x1, b3000 <_etext+0x2158>
   933f8:	d00000e0 	adrp	x0, b1000 <_etext+0x158>
   933fc:	a90363f7 	stp	x23, x24, [sp, #48]
   93400:	9118a021 	add	x1, x1, #0x628
   93404:	91210000 	add	x0, x0, #0x840
   93408:	52801062 	mov	w2, #0x83                  	// #131
   9340c:	a9046bf9 	stp	x25, x26, [sp, #64]
   93410:	a90573fb 	stp	x27, x28, [sp, #80]
   93414:	94002a4b 	bl	9dd40 <assertion_failed>
   93418:	52800004 	mov	w4, #0x0                   	// #0
   9341c:	52800003 	mov	w3, #0x0                   	// #0
   93420:	f9411680 	ldr	x0, [x20, #552]
   93424:	52800021 	mov	w1, #0x1                   	// #1
   93428:	940026be 	bl	9cf20 <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)>
   9342c:	b9405286 	ldr	w6, [x20, #80]
   93430:	38336abf 	strb	wzr, [x21, x19]
   93434:	17ffffac 	b	932e4 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x124>
   93438:	8b374681 	add	x1, x20, w23, uxtw #1
   9343c:	79440020 	ldrh	w0, [x1, #512]
   93440:	2a1703e5 	mov	w5, w23
   93444:	6b00035f 	cmp	w26, w0
   93448:	54000081 	b.ne	93458 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x298>  // b.any
   9344c:	79442820 	ldrh	w0, [x1, #532]
   93450:	6b00009f 	cmp	w4, w0
   93454:	54000140 	b.eq	9347c <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x2bc>  // b.none
   93458:	2a1703e2 	mov	w2, w23
   9345c:	2a1a03e3 	mov	w3, w26
   93460:	f9411680 	ldr	x0, [x20, #552]
   93464:	52800041 	mov	w1, #0x2                   	// #2
   93468:	b90063e4 	str	w4, [sp, #96]
   9346c:	f90037e5 	str	x5, [sp, #104]
   93470:	940026ac 	bl	9cf20 <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)>
   93474:	b94063e4 	ldr	w4, [sp, #96]
   93478:	f94037e5 	ldr	x5, [sp, #104]
   9347c:	8b050681 	add	x1, x20, x5, lsl #1
   93480:	7904003a 	strh	w26, [x1, #512]
   93484:	79042824 	strh	w4, [x1, #532]
   93488:	17ffff78 	b	93268 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0xa8>
   9348c:	90000101 	adrp	x1, b3000 <_etext+0x2158>
   93490:	90000100 	adrp	x0, b3000 <_etext+0x2158>
   93494:	a90363f7 	stp	x23, x24, [sp, #48]
   93498:	9118a021 	add	x1, x1, #0x628
   9349c:	91198000 	add	x0, x0, #0x660
   934a0:	52801262 	mov	w2, #0x93                  	// #147
   934a4:	a9046bf9 	stp	x25, x26, [sp, #64]
   934a8:	94002a26 	bl	9dd40 <assertion_failed>
   934ac:	52800017 	mov	w23, #0x0                   	// #0
   934b0:	17ffffc2 	b	933b8 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1f8>
	...

00000000000934c0 <CXHCICommandManager::CXHCICommandManager(CXHCIDevice*)>:
   934c0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   934c4:	910003fd 	mov	x29, sp
   934c8:	a90153f3 	stp	x19, x20, [sp, #16]
   934cc:	aa0003f3 	mov	x19, x0
   934d0:	aa0103e0 	mov	x0, x1
   934d4:	aa0103f4 	mov	x20, x1
   934d8:	a9025bf5 	stp	x21, x22, [sp, #32]
   934dc:	91004275 	add	x21, x19, #0x10
   934e0:	f9000261 	str	x1, [x19]
   934e4:	97ffbff3 	bl	834b0 <CXHCIDevice::GetMMIOSpace()>
   934e8:	aa0003e4 	mov	x4, x0
   934ec:	aa1403e3 	mov	x3, x20
   934f0:	aa1503e0 	mov	x0, x21
   934f4:	52800802 	mov	w2, #0x40                  	// #64
   934f8:	52800041 	mov	w1, #0x2                   	// #2
   934fc:	f9000664 	str	x4, [x19, #8]
   93500:	97ffca5c 	bl	85e70 <CXHCIRing::CXHCIRing(TXHCIRingType, unsigned int, CXHCIDevice*)>
   93504:	52800021 	mov	w1, #0x1                   	// #1
   93508:	aa1503e0 	mov	x0, x21
   9350c:	f900227f 	str	xzr, [x19, #64]
   93510:	3900e261 	strb	w1, [x19, #56]
   93514:	97ffcaaf 	bl	85fd0 <CXHCIRing::IsValid() const>
   93518:	72001c1f 	tst	w0, #0xff
   9351c:	54000260 	b.eq	93568 <CXHCICommandManager::CXHCICommandManager(CXHCIDevice*)+0xa8>  // b.none
   93520:	f9400674 	ldr	x20, [x19, #8]
   93524:	b40002b4 	cbz	x20, 93578 <CXHCICommandManager::CXHCICommandManager(CXHCIDevice*)+0xb8>
   93528:	aa1503e0 	mov	x0, x21
   9352c:	97ffcab9 	bl	86010 <CXHCIRing::GetFirstTRB()>
   93530:	aa0003f3 	mov	x19, x0
   93534:	d0000140 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   93538:	f9417416 	ldr	x22, [x0, #744]
   9353c:	aa1503e0 	mov	x0, x21
   93540:	97ffcb80 	bl	86340 <CXHCIRing::GetCycleState() const>
   93544:	2a0003e3 	mov	w3, w0
   93548:	52800301 	mov	w1, #0x18                  	// #24
   9354c:	aa030273 	orr	x19, x19, x3
   93550:	aa1403e0 	mov	x0, x20
   93554:	aa160262 	orr	x2, x19, x22
   93558:	a94153f3 	ldp	x19, x20, [sp, #16]
   9355c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   93560:	a8c37bfd 	ldp	x29, x30, [sp], #48
   93564:	17ffc9c7 	b	85c80 <CXHCIMMIOSpace::op_write64(unsigned int, unsigned long)>
   93568:	a94153f3 	ldp	x19, x20, [sp, #16]
   9356c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   93570:	a8c37bfd 	ldp	x29, x30, [sp], #48
   93574:	d65f03c0 	ret
   93578:	90000101 	adrp	x1, b3000 <_etext+0x2158>
   9357c:	d00000e0 	adrp	x0, b1000 <_etext+0x158>
   93580:	911a2021 	add	x1, x1, #0x688
   93584:	9127c000 	add	x0, x0, #0x9f0
   93588:	52800502 	mov	w2, #0x28                  	// #40
   9358c:	940029ed 	bl	9dd40 <assertion_failed>

0000000000093590 <CXHCICommandManager::~CXHCICommandManager()>:
   93590:	aa0003e1 	mov	x1, x0
   93594:	3940e000 	ldrb	w0, [x0, #56]
   93598:	72001c1f 	tst	w0, #0xff
   9359c:	540000a0 	b.eq	935b0 <CXHCICommandManager::~CXHCICommandManager()+0x20>  // b.none
   935a0:	aa0103e0 	mov	x0, x1
   935a4:	f900043f 	str	xzr, [x1, #8]
   935a8:	f801041f 	str	xzr, [x0], #16
   935ac:	17ffca81 	b	85fb0 <CXHCIRing::~CXHCIRing()>
   935b0:	90000101 	adrp	x1, b3000 <_etext+0x2158>
   935b4:	90000100 	adrp	x0, b3000 <_etext+0x2158>
   935b8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   935bc:	911a2021 	add	x1, x1, #0x688
   935c0:	910003fd 	mov	x29, sp
   935c4:	911a8000 	add	x0, x0, #0x6a0
   935c8:	528005e2 	mov	w2, #0x2f                  	// #47
   935cc:	940029dd 	bl	9dd40 <assertion_failed>

00000000000935d0 <CXHCICommandManager::IsValid()>:
   935d0:	91004000 	add	x0, x0, #0x10
   935d4:	17ffca7f 	b	85fd0 <CXHCIRing::IsValid() const>
   935d8:	d503201f 	nop
   935dc:	d503201f 	nop

00000000000935e0 <CXHCICommandManager::DumpStatus()>:
   935e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   935e4:	910003fd 	mov	x29, sp
   935e8:	a90153f3 	stp	x19, x20, [sp, #16]
   935ec:	aa0003f3 	mov	x19, x0
   935f0:	90000134 	adrp	x20, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   935f4:	910e6294 	add	x20, x20, #0x398
   935f8:	3940e000 	ldrb	w0, [x0, #56]
   935fc:	72001c1f 	tst	w0, #0xff
   93600:	540000c0 	b.eq	93618 <CXHCICommandManager::DumpStatus()+0x38>  // b.none
   93604:	aa1403e1 	mov	x1, x20
   93608:	91004260 	add	x0, x19, #0x10
   9360c:	a94153f3 	ldp	x19, x20, [sp, #16]
   93610:	a8c27bfd 	ldp	x29, x30, [sp], #32
   93614:	17ffcb57 	b	86370 <CXHCIRing::DumpStatus(char const*)>
   93618:	940030fe 	bl	9fa10 <CLogger::Get()>
   9361c:	f9402265 	ldr	x5, [x19, #64]
   93620:	90000103 	adrp	x3, b3000 <_etext+0x2158>
   93624:	aa1403e1 	mov	x1, x20
   93628:	52800082 	mov	w2, #0x4                   	// #4
   9362c:	911ae063 	add	x3, x3, #0x6b8
   93630:	394030a8 	ldrb	w8, [x5, #12]
   93634:	394034a6 	ldrb	w6, [x5, #13]
   93638:	394038a4 	ldrb	w4, [x5, #14]
   9363c:	39403ca7 	ldrb	w7, [x5, #15]
   93640:	aa062105 	orr	x5, x8, x6, lsl #8
   93644:	aa0440a4 	orr	x4, x5, x4, lsl #16
   93648:	2a076084 	orr	w4, w4, w7, lsl #24
   9364c:	940032dd 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   93650:	aa1403e1 	mov	x1, x20
   93654:	91004260 	add	x0, x19, #0x10
   93658:	a94153f3 	ldp	x19, x20, [sp, #16]
   9365c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   93660:	17ffcb44 	b	86370 <CXHCIRing::DumpStatus(char const*)>
   93664:	d503201f 	nop
   93668:	d503201f 	nop
   9366c:	d503201f 	nop

0000000000093670 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)>:
   93670:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   93674:	910003fd 	mov	x29, sp
   93678:	a90153f3 	stp	x19, x20, [sp, #16]
   9367c:	aa0003f4 	mov	x20, x0
   93680:	a9025bf5 	stp	x21, x22, [sp, #32]
   93684:	2a0103f5 	mov	w21, w1
   93688:	90000136 	adrp	x22, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9368c:	910e62d6 	add	x22, x22, #0x398
   93690:	a90363f7 	stp	x23, x24, [sp, #48]
   93694:	2a0303f8 	mov	w24, w3
   93698:	aa0503f7 	mov	x23, x5
   9369c:	a9046bf9 	stp	x25, x26, [sp, #64]
   936a0:	2a0203f9 	mov	w25, w2
   936a4:	2a0403fa 	mov	w26, w4
   936a8:	f9002bfb 	str	x27, [sp, #80]
   936ac:	940030d9 	bl	9fa10 <CLogger::Get()>
   936b0:	90000103 	adrp	x3, b3000 <_etext+0x2158>
   936b4:	2a1503e5 	mov	w5, w21
   936b8:	d34a3ea4 	ubfx	x4, x21, #10, #6
   936bc:	aa1603e1 	mov	x1, x22
   936c0:	911b8063 	add	x3, x3, #0x6e0
   936c4:	52800082 	mov	w2, #0x4                   	// #4
   936c8:	940032be 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   936cc:	3940e280 	ldrb	w0, [x20, #56]
   936d0:	72001c1f 	tst	w0, #0xff
   936d4:	54000b60 	b.eq	93840 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)+0x1d0>  // b.none
   936d8:	9100429b 	add	x27, x20, #0x10
   936dc:	aa1b03e0 	mov	x0, x27
   936e0:	97ffca78 	bl	860c0 <CXHCIRing::GetEnqueueTRB()>
   936e4:	aa0003f3 	mov	x19, x0
   936e8:	b4000b80 	cbz	x0, 93858 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)+0x1e8>
   936ec:	d3483f21 	ubfx	x1, x25, #8, #8
   936f0:	d3505f20 	ubfx	x0, x25, #16, #8
   936f4:	39000279 	strb	w25, [x19]
   936f8:	d3483f04 	ubfx	x4, x24, #8, #8
   936fc:	d3505f03 	ubfx	x3, x24, #16, #8
   93700:	39001278 	strb	w24, [x19, #4]
   93704:	53187f39 	lsr	w25, w25, #24
   93708:	53187f18 	lsr	w24, w24, #24
   9370c:	39000661 	strb	w1, [x19, #1]
   93710:	d3483f42 	ubfx	x2, x26, #8, #8
   93714:	d3505f41 	ubfx	x1, x26, #16, #8
   93718:	39000a60 	strb	w0, [x19, #2]
   9371c:	53187f40 	lsr	w0, w26, #24
   93720:	39000e79 	strb	w25, [x19, #3]
   93724:	39001664 	strb	w4, [x19, #5]
   93728:	39001a63 	strb	w3, [x19, #6]
   9372c:	39001e78 	strb	w24, [x19, #7]
   93730:	3900227a 	strb	w26, [x19, #8]
   93734:	39002662 	strb	w2, [x19, #9]
   93738:	39002a61 	strb	w1, [x19, #10]
   9373c:	39002e60 	strb	w0, [x19, #11]
   93740:	37000915 	tbnz	w21, #0, 93860 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)+0x1f0>
   93744:	aa1b03e0 	mov	x0, x27
   93748:	97ffcafe 	bl	86340 <CXHCIRing::GetCycleState() const>
   9374c:	2a0003e2 	mov	w2, w0
   93750:	aa1b03e0 	mov	x0, x27
   93754:	2a150041 	orr	w1, w2, w21
   93758:	2a150042 	orr	w2, w2, w21
   9375c:	d3483c24 	ubfx	x4, x1, #8, #8
   93760:	d3505c23 	ubfx	x3, x1, #16, #8
   93764:	53187c21 	lsr	w1, w1, #24
   93768:	39003262 	strb	w2, [x19, #12]
   9376c:	39003664 	strb	w4, [x19, #13]
   93770:	39003a63 	strb	w3, [x19, #14]
   93774:	39003e61 	strb	w1, [x19, #15]
   93778:	3900e29f 	strb	wzr, [x20, #56]
   9377c:	f9002293 	str	x19, [x20, #64]
   93780:	97ffcaa8 	bl	86220 <CXHCIRing::IncrementEnqueue()>
   93784:	d5033f9f 	dsb	sy
   93788:	f9400680 	ldr	x0, [x20, #8]
   9378c:	52800002 	mov	w2, #0x0                   	// #0
   93790:	52800001 	mov	w1, #0x0                   	// #0
   93794:	97ffc907 	bl	85bb0 <CXHCIMMIOSpace::db_write32(unsigned int, unsigned int)>
   93798:	94004e56 	bl	a70f0 <CTimer::Get()>
   9379c:	94004b35 	bl	a6470 <CTimer::GetTicks() const>
   937a0:	2a0003f3 	mov	w19, w0
   937a4:	14000006 	b	937bc <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)+0x14c>
   937a8:	94004e52 	bl	a70f0 <CTimer::Get()>
   937ac:	94004b31 	bl	a6470 <CTimer::GetTicks() const>
   937b0:	4b130002 	sub	w2, w0, w19
   937b4:	7104ac5f 	cmp	w2, #0x12b
   937b8:	54000208 	b.hi	937f8 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)+0x188>  // b.pmore
   937bc:	3940e282 	ldrb	w2, [x20, #56]
   937c0:	72001c5f 	tst	w2, #0xff
   937c4:	54ffff20 	b.eq	937a8 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)+0x138>  // b.none
   937c8:	d5033fbf 	dmb	sy
   937cc:	b4000077 	cbz	x23, 937d8 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)+0x168>
   937d0:	39412680 	ldrb	w0, [x20, #73]
   937d4:	390002e0 	strb	w0, [x23]
   937d8:	39412280 	ldrb	w0, [x20, #72]
   937dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   937e0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   937e4:	a94363f7 	ldp	x23, x24, [sp, #48]
   937e8:	a9446bf9 	ldp	x25, x26, [sp, #64]
   937ec:	f9402bfb 	ldr	x27, [sp, #80]
   937f0:	a8c67bfd 	ldp	x29, x30, [sp], #96
   937f4:	d65f03c0 	ret
   937f8:	94003086 	bl	9fa10 <CLogger::Get()>
   937fc:	90000103 	adrp	x3, b3000 <_etext+0x2158>
   93800:	2a1503e4 	mov	w4, w21
   93804:	aa1603e1 	mov	x1, x22
   93808:	911cc063 	add	x3, x3, #0x730
   9380c:	52800082 	mov	w2, #0x4                   	// #4
   93810:	9400326c 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   93814:	52800021 	mov	w1, #0x1                   	// #1
   93818:	12800020 	mov	w0, #0xfffffffe            	// #-2
   9381c:	f900229f 	str	xzr, [x20, #64]
   93820:	a9425bf5 	ldp	x21, x22, [sp, #32]
   93824:	3900e281 	strb	w1, [x20, #56]
   93828:	a94153f3 	ldp	x19, x20, [sp, #16]
   9382c:	a94363f7 	ldp	x23, x24, [sp, #48]
   93830:	a9446bf9 	ldp	x25, x26, [sp, #64]
   93834:	f9402bfb 	ldr	x27, [sp, #80]
   93838:	a8c67bfd 	ldp	x29, x30, [sp], #96
   9383c:	d65f03c0 	ret
   93840:	90000101 	adrp	x1, b3000 <_etext+0x2158>
   93844:	90000100 	adrp	x0, b3000 <_etext+0x2158>
   93848:	911a2021 	add	x1, x1, #0x688
   9384c:	911a8000 	add	x0, x0, #0x6a0
   93850:	528013a2 	mov	w2, #0x9d                  	// #157
   93854:	9400293b 	bl	9dd40 <assertion_failed>
   93858:	528001e0 	mov	w0, #0xf                   	// #15
   9385c:	17ffffe0 	b	937dc <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)+0x16c>
   93860:	90000101 	adrp	x1, b3000 <_etext+0x2158>
   93864:	90000100 	adrp	x0, b3000 <_etext+0x2158>
   93868:	911a2021 	add	x1, x1, #0x688
   9386c:	911c2000 	add	x0, x0, #0x708
   93870:	52801522 	mov	w2, #0xa9                  	// #169
   93874:	94002933 	bl	9dd40 <assertion_failed>
   93878:	d503201f 	nop
   9387c:	d503201f 	nop

0000000000093880 <CXHCICommandManager::EnableSlot(unsigned char*)>:
   93880:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   93884:	910003fd 	mov	x29, sp
   93888:	9100bfe5 	add	x5, sp, #0x2f
   9388c:	52800004 	mov	w4, #0x0                   	// #0
   93890:	52800003 	mov	w3, #0x0                   	// #0
   93894:	52800002 	mov	w2, #0x0                   	// #0
   93898:	f9000bf3 	str	x19, [sp, #16]
   9389c:	aa0103f3 	mov	x19, x1
   938a0:	52848001 	mov	w1, #0x2400                	// #9216
   938a4:	97ffff73 	bl	93670 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)>
   938a8:	7100041f 	cmp	w0, #0x1
   938ac:	54000101 	b.ne	938cc <CXHCICommandManager::EnableSlot(unsigned char*)+0x4c>  // b.any
   938b0:	3940bfe2 	ldrb	w2, [sp, #47]
   938b4:	51000441 	sub	w1, w2, #0x1
   938b8:	12001c21 	and	w1, w1, #0xff
   938bc:	71007c3f 	cmp	w1, #0x1f
   938c0:	540000c8 	b.hi	938d8 <CXHCICommandManager::EnableSlot(unsigned char*)+0x58>  // b.pmore
   938c4:	b4000133 	cbz	x19, 938e8 <CXHCICommandManager::EnableSlot(unsigned char*)+0x68>
   938c8:	39000262 	strb	w2, [x19]
   938cc:	f9400bf3 	ldr	x19, [sp, #16]
   938d0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   938d4:	d65f03c0 	ret
   938d8:	52800120 	mov	w0, #0x9                   	// #9
   938dc:	f9400bf3 	ldr	x19, [sp, #16]
   938e0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   938e4:	d65f03c0 	ret
   938e8:	90000101 	adrp	x1, b3000 <_etext+0x2158>
   938ec:	90000100 	adrp	x0, b3000 <_etext+0x2158>
   938f0:	911a2021 	add	x1, x1, #0x688
   938f4:	911d6000 	add	x0, x0, #0x758
   938f8:	52800922 	mov	w2, #0x49                  	// #73
   938fc:	94002911 	bl	9dd40 <assertion_failed>

0000000000093900 <CXHCICommandManager::DisableSlot(unsigned char)>:
   93900:	12001c21 	and	w1, w1, #0xff
   93904:	51000422 	sub	w2, w1, #0x1
   93908:	12001c42 	and	w2, w2, #0xff
   9390c:	71007c5f 	cmp	w2, #0x1f
   93910:	54000108 	b.hi	93930 <CXHCICommandManager::DisableSlot(unsigned char)+0x30>  // b.pmore
   93914:	52850002 	mov	w2, #0x2800                	// #10240
   93918:	d2800005 	mov	x5, #0x0                   	// #0
   9391c:	2a016041 	orr	w1, w2, w1, lsl #24
   93920:	52800004 	mov	w4, #0x0                   	// #0
   93924:	52800003 	mov	w3, #0x0                   	// #0
   93928:	52800002 	mov	w2, #0x0                   	// #0
   9392c:	17ffff51 	b	93670 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)>
   93930:	90000101 	adrp	x1, b3000 <_etext+0x2158>
   93934:	f00000e0 	adrp	x0, b2000 <_etext+0x1158>
   93938:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9393c:	911a2021 	add	x1, x1, #0x688
   93940:	910003fd 	mov	x29, sp
   93944:	9101c000 	add	x0, x0, #0x70
   93948:	52800a22 	mov	w2, #0x51                  	// #81
   9394c:	940028fd 	bl	9dd40 <assertion_failed>

0000000000093950 <CXHCICommandManager::AddressDevice(unsigned char, TXHCIInputContext*, bool)>:
   93950:	12001c21 	and	w1, w1, #0xff
   93954:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   93958:	910003fd 	mov	x29, sp
   9395c:	51000424 	sub	w4, w1, #0x1
   93960:	12001c84 	and	w4, w4, #0xff
   93964:	71007c9f 	cmp	w4, #0x1f
   93968:	54000268 	b.hi	939b4 <CXHCICommandManager::AddressDevice(unsigned char, TXHCIInputContext*, bool)+0x64>  // b.pmore
   9396c:	53081c21 	lsl	w1, w1, #24
   93970:	12001c63 	and	w3, w3, #0xff
   93974:	52858004 	mov	w4, #0x2c00                	// #11264
   93978:	5285c005 	mov	w5, #0x2e00                	// #11776
   9397c:	2a040024 	orr	w4, w1, w4
   93980:	7100007f 	cmp	w3, #0x0
   93984:	2a050021 	orr	w1, w1, w5
   93988:	1a840021 	csel	w1, w1, w4, eq	// eq = none
   9398c:	b4000202 	cbz	x2, 939cc <CXHCICommandManager::AddressDevice(unsigned char, TXHCIInputContext*, bool)+0x7c>
   93990:	d0000143 	adrp	x3, bd000 <CNetDevice::s_SpeedString+0x18>
   93994:	a8c17bfd 	ldp	x29, x30, [sp], #16
   93998:	d2800005 	mov	x5, #0x0                   	// #0
   9399c:	52800004 	mov	w4, #0x0                   	// #0
   939a0:	f9417466 	ldr	x6, [x3, #744]
   939a4:	aa060043 	orr	x3, x2, x6
   939a8:	2a0200c2 	orr	w2, w6, w2
   939ac:	d360fc63 	lsr	x3, x3, #32
   939b0:	17ffff30 	b	93670 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)>
   939b4:	90000101 	adrp	x1, b3000 <_etext+0x2158>
   939b8:	f00000e0 	adrp	x0, b2000 <_etext+0x1158>
   939bc:	911a2021 	add	x1, x1, #0x688
   939c0:	9101c000 	add	x0, x0, #0x70
   939c4:	52800b42 	mov	w2, #0x5a                  	// #90
   939c8:	940028de 	bl	9dd40 <assertion_failed>
   939cc:	90000101 	adrp	x1, b3000 <_etext+0x2158>
   939d0:	d00000e0 	adrp	x0, b1000 <_etext+0x158>
   939d4:	911a2021 	add	x1, x1, #0x688
   939d8:	91240000 	add	x0, x0, #0x900
   939dc:	52800c42 	mov	w2, #0x62                  	// #98
   939e0:	940028d8 	bl	9dd40 <assertion_failed>
   939e4:	d503201f 	nop
   939e8:	d503201f 	nop
   939ec:	d503201f 	nop

00000000000939f0 <CXHCICommandManager::ConfigureEndpoint(unsigned char, TXHCIInputContext*, bool)>:
   939f0:	12001c21 	and	w1, w1, #0xff
   939f4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   939f8:	910003fd 	mov	x29, sp
   939fc:	51000424 	sub	w4, w1, #0x1
   93a00:	12001c84 	and	w4, w4, #0xff
   93a04:	71007c9f 	cmp	w4, #0x1f
   93a08:	54000248 	b.hi	93a50 <CXHCICommandManager::ConfigureEndpoint(unsigned char, TXHCIInputContext*, bool)+0x60>  // b.pmore
   93a0c:	12001c63 	and	w3, w3, #0xff
   93a10:	53081c21 	lsl	w1, w1, #24
   93a14:	52864004 	mov	w4, #0x3200                	// #12800
   93a18:	7100007f 	cmp	w3, #0x0
   93a1c:	32140423 	orr	w3, w1, #0x3000
   93a20:	2a040021 	orr	w1, w1, w4
   93a24:	1a831021 	csel	w1, w1, w3, ne	// ne = any
   93a28:	b4000202 	cbz	x2, 93a68 <CXHCICommandManager::ConfigureEndpoint(unsigned char, TXHCIInputContext*, bool)+0x78>
   93a2c:	d0000143 	adrp	x3, bd000 <CNetDevice::s_SpeedString+0x18>
   93a30:	a8c17bfd 	ldp	x29, x30, [sp], #16
   93a34:	d2800005 	mov	x5, #0x0                   	// #0
   93a38:	52800004 	mov	w4, #0x0                   	// #0
   93a3c:	f9417466 	ldr	x6, [x3, #744]
   93a40:	aa060043 	orr	x3, x2, x6
   93a44:	2a0200c2 	orr	w2, w6, w2
   93a48:	d360fc63 	lsr	x3, x3, #32
   93a4c:	17ffff09 	b	93670 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)>
   93a50:	90000101 	adrp	x1, b3000 <_etext+0x2158>
   93a54:	f00000e0 	adrp	x0, b2000 <_etext+0x1158>
   93a58:	911a2021 	add	x1, x1, #0x688
   93a5c:	9101c000 	add	x0, x0, #0x70
   93a60:	52800d22 	mov	w2, #0x69                  	// #105
   93a64:	940028b7 	bl	9dd40 <assertion_failed>
   93a68:	90000101 	adrp	x1, b3000 <_etext+0x2158>
   93a6c:	d00000e0 	adrp	x0, b1000 <_etext+0x158>
   93a70:	911a2021 	add	x1, x1, #0x688
   93a74:	91240000 	add	x0, x0, #0x900
   93a78:	52800e22 	mov	w2, #0x71                  	// #113
   93a7c:	940028b1 	bl	9dd40 <assertion_failed>

0000000000093a80 <CXHCICommandManager::EvaluateContext(unsigned char, TXHCIInputContext*)>:
   93a80:	12001c21 	and	w1, w1, #0xff
   93a84:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   93a88:	910003fd 	mov	x29, sp
   93a8c:	51000423 	sub	w3, w1, #0x1
   93a90:	12001c63 	and	w3, w3, #0xff
   93a94:	71007c7f 	cmp	w3, #0x1f
   93a98:	540001a8 	b.hi	93acc <CXHCICommandManager::EvaluateContext(unsigned char, TXHCIInputContext*)+0x4c>  // b.pmore
   93a9c:	52868003 	mov	w3, #0x3400                	// #13312
   93aa0:	2a016061 	orr	w1, w3, w1, lsl #24
   93aa4:	b4000202 	cbz	x2, 93ae4 <CXHCICommandManager::EvaluateContext(unsigned char, TXHCIInputContext*)+0x64>
   93aa8:	d0000143 	adrp	x3, bd000 <CNetDevice::s_SpeedString+0x18>
   93aac:	a8c17bfd 	ldp	x29, x30, [sp], #16
   93ab0:	d2800005 	mov	x5, #0x0                   	// #0
   93ab4:	52800004 	mov	w4, #0x0                   	// #0
   93ab8:	f9417466 	ldr	x6, [x3, #744]
   93abc:	aa060043 	orr	x3, x2, x6
   93ac0:	2a0200c2 	orr	w2, w6, w2
   93ac4:	d360fc63 	lsr	x3, x3, #32
   93ac8:	17fffeea 	b	93670 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)>
   93acc:	90000101 	adrp	x1, b3000 <_etext+0x2158>
   93ad0:	f00000e0 	adrp	x0, b2000 <_etext+0x1158>
   93ad4:	911a2021 	add	x1, x1, #0x688
   93ad8:	9101c000 	add	x0, x0, #0x70
   93adc:	52800ee2 	mov	w2, #0x77                  	// #119
   93ae0:	94002898 	bl	9dd40 <assertion_failed>
   93ae4:	90000101 	adrp	x1, b3000 <_etext+0x2158>
   93ae8:	d00000e0 	adrp	x0, b1000 <_etext+0x158>
   93aec:	911a2021 	add	x1, x1, #0x688
   93af0:	91240000 	add	x0, x0, #0x900
   93af4:	52800f62 	mov	w2, #0x7b                  	// #123
   93af8:	94002892 	bl	9dd40 <assertion_failed>
   93afc:	d503201f 	nop

0000000000093b00 <CXHCICommandManager::NoOp()>:
   93b00:	d2800005 	mov	x5, #0x0                   	// #0
   93b04:	52800004 	mov	w4, #0x0                   	// #0
   93b08:	52800003 	mov	w3, #0x0                   	// #0
   93b0c:	52800002 	mov	w2, #0x0                   	// #0
   93b10:	528b8001 	mov	w1, #0x5c00                	// #23552
   93b14:	17fffed7 	b	93670 <CXHCICommandManager::DoCommand(unsigned int, unsigned int, unsigned int, unsigned int, unsigned char*)>
   93b18:	d503201f 	nop
   93b1c:	d503201f 	nop

0000000000093b20 <CXHCICommandManager::CommandCompleted(TXHCITRB*, unsigned char, unsigned char)>:
   93b20:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   93b24:	910003fd 	mov	x29, sp
   93b28:	a90153f3 	stp	x19, x20, [sp, #16]
   93b2c:	a9025bf5 	stp	x21, x22, [sp, #32]
   93b30:	f9001bf7 	str	x23, [sp, #48]
   93b34:	b40004e1 	cbz	x1, 93bd0 <CXHCICommandManager::CommandCompleted(TXHCITRB*, unsigned char, unsigned char)+0xb0>
   93b38:	39403435 	ldrb	w21, [x1, #13]
   93b3c:	12001c57 	and	w23, w2, #0xff
   93b40:	12001c76 	and	w22, w3, #0xff
   93b44:	aa0103f4 	mov	x20, x1
   93b48:	aa0003f3 	mov	x19, x0
   93b4c:	94002fb1 	bl	9fa10 <CLogger::Get()>
   93b50:	90000103 	adrp	x3, b3000 <_etext+0x2158>
   93b54:	90000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   93b58:	911e0063 	add	x3, x3, #0x780
   93b5c:	910e6021 	add	x1, x1, #0x398
   93b60:	d34286b5 	ubfx	x21, x21, #2, #32
   93b64:	2a1603e6 	mov	w6, w22
   93b68:	2a1503e4 	mov	w4, w21
   93b6c:	2a1703e5 	mov	w5, w23
   93b70:	52800082 	mov	w2, #0x4                   	// #4
   93b74:	94003193 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   93b78:	3940e260 	ldrb	w0, [x19, #56]
   93b7c:	72001c1f 	tst	w0, #0xff
   93b80:	54000081 	b.ne	93b90 <CXHCICommandManager::CommandCompleted(TXHCITRB*, unsigned char, unsigned char)+0x70>  // b.any
   93b84:	f9402260 	ldr	x0, [x19, #64]
   93b88:	eb14001f 	cmp	x0, x20
   93b8c:	540000c0 	b.eq	93ba4 <CXHCICommandManager::CommandCompleted(TXHCITRB*, unsigned char, unsigned char)+0x84>  // b.none
   93b90:	a94153f3 	ldp	x19, x20, [sp, #16]
   93b94:	a9425bf5 	ldp	x21, x22, [sp, #32]
   93b98:	f9401bf7 	ldr	x23, [sp, #48]
   93b9c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   93ba0:	d65f03c0 	ret
   93ba4:	f900227f 	str	xzr, [x19, #64]
   93ba8:	39012277 	strb	w23, [x19, #72]
   93bac:	39012676 	strb	w22, [x19, #73]
   93bb0:	d5033fbf 	dmb	sy
   93bb4:	52800020 	mov	w0, #0x1                   	// #1
   93bb8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   93bbc:	3900e260 	strb	w0, [x19, #56]
   93bc0:	a94153f3 	ldp	x19, x20, [sp, #16]
   93bc4:	f9401bf7 	ldr	x23, [sp, #48]
   93bc8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   93bcc:	d65f03c0 	ret
   93bd0:	90000101 	adrp	x1, b3000 <_etext+0x2158>
   93bd4:	90000100 	adrp	x0, b3000 <_etext+0x2158>
   93bd8:	911a2021 	add	x1, x1, #0x688
   93bdc:	911da000 	add	x0, x0, #0x768
   93be0:	52801a62 	mov	w2, #0xd3                  	// #211
   93be4:	94002857 	bl	9dd40 <assertion_failed>
	...

0000000000093bf0 <CUSBAudioControlDevice::~CUSBAudioControlDevice()>:
   93bf0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   93bf4:	910003fd 	mov	x29, sp
   93bf8:	90000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   93bfc:	910ec021 	add	x1, x1, #0x3b0
   93c00:	f9000bf3 	str	x19, [sp, #16]
   93c04:	aa0003f3 	mov	x19, x0
   93c08:	b9483000 	ldr	w0, [x0, #2096]
   93c0c:	f9000261 	str	x1, [x19]
   93c10:	350000e0 	cbnz	w0, 93c2c <CUSBAudioControlDevice::~CUSBAudioControlDevice()+0x3c>
   93c14:	9100a260 	add	x0, x19, #0x28
   93c18:	94000c4e 	bl	96d50 <CUSBAudioFunctionTopology::~CUSBAudioFunctionTopology()>
   93c1c:	aa1303e0 	mov	x0, x19
   93c20:	f9400bf3 	ldr	x19, [sp, #16]
   93c24:	a8c27bfd 	ldp	x29, x30, [sp], #32
   93c28:	17ffda02 	b	8a430 <CUSBFunction::~CUSBFunction()>
   93c2c:	94002c29 	bl	9ecd0 <CDeviceNameService::Get()>
   93c30:	90000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   93c34:	b9483262 	ldr	w2, [x19, #2096]
   93c38:	52800003 	mov	w3, #0x0                   	// #0
   93c3c:	91104021 	add	x1, x1, #0x410
   93c40:	94002c50 	bl	9ed80 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   93c44:	b9483261 	ldr	w1, [x19, #2096]
   93c48:	d0000140 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   93c4c:	91036000 	add	x0, x0, #0xd8
   93c50:	94005360 	bl	a89d0 <CNumberPool::FreeNumber(unsigned int)>
   93c54:	9100a260 	add	x0, x19, #0x28
   93c58:	94000c3e 	bl	96d50 <CUSBAudioFunctionTopology::~CUSBAudioFunctionTopology()>
   93c5c:	aa1303e0 	mov	x0, x19
   93c60:	f9400bf3 	ldr	x19, [sp, #16]
   93c64:	a8c27bfd 	ldp	x29, x30, [sp], #32
   93c68:	17ffd9f2 	b	8a430 <CUSBFunction::~CUSBFunction()>
   93c6c:	d503201f 	nop

0000000000093c70 <CUSBAudioControlDevice::~CUSBAudioControlDevice()>:
   93c70:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   93c74:	910003fd 	mov	x29, sp
   93c78:	f9000bf3 	str	x19, [sp, #16]
   93c7c:	aa0003f3 	mov	x19, x0
   93c80:	97ffffdc 	bl	93bf0 <CUSBAudioControlDevice::~CUSBAudioControlDevice()>
   93c84:	aa1303e0 	mov	x0, x19
   93c88:	d2810701 	mov	x1, #0x838                 	// #2104
   93c8c:	f9400bf3 	ldr	x19, [sp, #16]
   93c90:	a8c27bfd 	ldp	x29, x30, [sp], #32
   93c94:	1400519b 	b	a8300 <operator delete(void*, unsigned long)>
   93c98:	d503201f 	nop
   93c9c:	d503201f 	nop

0000000000093ca0 <CUSBAudioControlDevice::CUSBAudioControlDevice(CUSBFunction*)>:
   93ca0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   93ca4:	910003fd 	mov	x29, sp
   93ca8:	f9000bf3 	str	x19, [sp, #16]
   93cac:	aa0003f3 	mov	x19, x0
   93cb0:	97ffda84 	bl	8a6c0 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   93cb4:	aa1303e0 	mov	x0, x19
   93cb8:	90000121 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   93cbc:	910ec021 	add	x1, x1, #0x3b0
   93cc0:	f8028401 	str	x1, [x0], #40
   93cc4:	94000c1f 	bl	96d40 <CUSBAudioFunctionTopology::CUSBAudioFunctionTopology()>
   93cc8:	d2c00020 	mov	x0, #0x100000000           	// #4294967296
   93ccc:	f9041a60 	str	x0, [x19, #2096]
   93cd0:	f9400bf3 	ldr	x19, [sp, #16]
   93cd4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   93cd8:	d65f03c0 	ret
   93cdc:	d503201f 	nop

0000000000093ce0 <CUSBAudioControlDevice::GetDeviceNumber() const>:
   93ce0:	b9483000 	ldr	w0, [x0, #2096]
   93ce4:	34000040 	cbz	w0, 93cec <CUSBAudioControlDevice::GetDeviceNumber() const+0xc>
   93ce8:	d65f03c0 	ret
   93cec:	90000101 	adrp	x1, b3000 <_etext+0x2158>
   93cf0:	90000100 	adrp	x0, b3000 <_etext+0x2158>
   93cf4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   93cf8:	911ea021 	add	x1, x1, #0x7a8
   93cfc:	910003fd 	mov	x29, sp
   93d00:	911f0000 	add	x0, x0, #0x7c0
   93d04:	52800a42 	mov	w2, #0x52                  	// #82
   93d08:	9400280e 	bl	9dd40 <assertion_failed>
   93d0c:	d503201f 	nop

0000000000093d10 <CUSBAudioControlDevice::GetNextStreamingSubDeviceNumber()>:
   93d10:	aa0003e1 	mov	x1, x0
   93d14:	b9483400 	ldr	w0, [x0, #2100]
   93d18:	11000402 	add	w2, w0, #0x1
   93d1c:	b9083422 	str	w2, [x1, #2100]
   93d20:	d65f03c0 	ret
   93d24:	d503201f 	nop
   93d28:	d503201f 	nop
   93d2c:	d503201f 	nop

0000000000093d30 <CUSBAudioControlDevice::GetTerminalType(unsigned char, bool) const>:
   93d30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   93d34:	910003fd 	mov	x29, sp
   93d38:	a90153f3 	stp	x19, x20, [sp, #16]
   93d3c:	9100a013 	add	x19, x0, #0x28
   93d40:	12001c54 	and	w20, w2, #0xff
   93d44:	aa1303e0 	mov	x0, x19
   93d48:	94000c12 	bl	96d90 <CUSBAudioFunctionTopology::GetEntity(unsigned char) const>
   93d4c:	b4000140 	cbz	x0, 93d74 <CUSBAudioControlDevice::GetTerminalType(unsigned char, bool) const+0x44>
   93d50:	aa0003e2 	mov	x2, x0
   93d54:	2a1403e3 	mov	w3, w20
   93d58:	aa1303e0 	mov	x0, x19
   93d5c:	52800001 	mov	w1, #0x0                   	// #0
   93d60:	94000c7c 	bl	96f50 <CUSBAudioFunctionTopology::FindEntity(CUSBAudioEntity::TEntityType, CUSBAudioEntity*, bool) const>
   93d64:	b4000080 	cbz	x0, 93d74 <CUSBAudioControlDevice::GetTerminalType(unsigned char, bool) const+0x44>
   93d68:	a94153f3 	ldp	x19, x20, [sp, #16]
   93d6c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   93d70:	140009dc 	b	964e0 <CUSBAudioTerminal::GetTerminalType() const>
   93d74:	52802000 	mov	w0, #0x100                 	// #256
   93d78:	a94153f3 	ldp	x19, x20, [sp, #16]
   93d7c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   93d80:	d65f03c0 	ret
   93d84:	d503201f 	nop
   93d88:	d503201f 	nop
   93d8c:	d503201f 	nop

0000000000093d90 <CUSBAudioControlDevice::GetClockSourceID(unsigned char) const>:
   93d90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   93d94:	910003fd 	mov	x29, sp
   93d98:	a90153f3 	stp	x19, x20, [sp, #16]
   93d9c:	9100a013 	add	x19, x0, #0x28
   93da0:	aa1303e0 	mov	x0, x19
   93da4:	94000bfb 	bl	96d90 <CUSBAudioFunctionTopology::GetEntity(unsigned char) const>
   93da8:	b4000080 	cbz	x0, 93db8 <CUSBAudioControlDevice::GetClockSourceID(unsigned char) const+0x28>
   93dac:	aa0003f4 	mov	x20, x0
   93db0:	940008d8 	bl	96110 <CUSBAudioEntity::GetEntityType() const>
   93db4:	340000c0 	cbz	w0, 93dcc <CUSBAudioControlDevice::GetClockSourceID(unsigned char) const+0x3c>
   93db8:	52800013 	mov	w19, #0x0                   	// #0
   93dbc:	2a1303e0 	mov	w0, w19
   93dc0:	a94153f3 	ldp	x19, x20, [sp, #16]
   93dc4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   93dc8:	d65f03c0 	ret
   93dcc:	aa1403e0 	mov	x0, x20
   93dd0:	940009c8 	bl	964f0 <CUSBAudioTerminal::GetClockSourceID() const>
   93dd4:	2a0003e1 	mov	w1, w0
   93dd8:	aa1303e0 	mov	x0, x19
   93ddc:	12001c33 	and	w19, w1, #0xff
   93de0:	94000bec 	bl	96d90 <CUSBAudioFunctionTopology::GetEntity(unsigned char) const>
   93de4:	aa0003f4 	mov	x20, x0
   93de8:	b4fffe80 	cbz	x0, 93db8 <CUSBAudioControlDevice::GetClockSourceID(unsigned char) const+0x28>
   93dec:	940008c9 	bl	96110 <CUSBAudioEntity::GetEntityType() const>
   93df0:	7100141f 	cmp	w0, #0x5
   93df4:	54fffe41 	b.ne	93dbc <CUSBAudioControlDevice::GetClockSourceID(unsigned char) const+0x2c>  // b.any
   93df8:	aa1403e0 	mov	x0, x20
   93dfc:	52800001 	mov	w1, #0x0                   	// #0
   93e00:	a94153f3 	ldp	x19, x20, [sp, #16]
   93e04:	a8c27bfd 	ldp	x29, x30, [sp], #32
   93e08:	1400090e 	b	96240 <CUSBAudioEntity::GetSourceID(unsigned int) const>
   93e0c:	d503201f 	nop

0000000000093e10 <CUSBAudioControlDevice::GetSelectorUnitID(unsigned char) const>:
   93e10:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   93e14:	910003fd 	mov	x29, sp
   93e18:	a90153f3 	stp	x19, x20, [sp, #16]
   93e1c:	9100a013 	add	x19, x0, #0x28
   93e20:	aa1303e0 	mov	x0, x19
   93e24:	94000bdb 	bl	96d90 <CUSBAudioFunctionTopology::GetEntity(unsigned char) const>
   93e28:	b4000080 	cbz	x0, 93e38 <CUSBAudioControlDevice::GetSelectorUnitID(unsigned char) const+0x28>
   93e2c:	aa0003f4 	mov	x20, x0
   93e30:	940008b8 	bl	96110 <CUSBAudioEntity::GetEntityType() const>
   93e34:	340000a0 	cbz	w0, 93e48 <CUSBAudioControlDevice::GetSelectorUnitID(unsigned char) const+0x38>
   93e38:	52800000 	mov	w0, #0x0                   	// #0
   93e3c:	a94153f3 	ldp	x19, x20, [sp, #16]
   93e40:	a8c27bfd 	ldp	x29, x30, [sp], #32
   93e44:	d65f03c0 	ret
   93e48:	aa1403e2 	mov	x2, x20
   93e4c:	aa1303e0 	mov	x0, x19
   93e50:	52800023 	mov	w3, #0x1                   	// #1
   93e54:	52800041 	mov	w1, #0x2                   	// #2
   93e58:	94000c3e 	bl	96f50 <CUSBAudioFunctionTopology::FindEntity(CUSBAudioEntity::TEntityType, CUSBAudioEntity*, bool) const>
   93e5c:	b4fffee0 	cbz	x0, 93e38 <CUSBAudioControlDevice::GetSelectorUnitID(unsigned char) const+0x28>
   93e60:	a94153f3 	ldp	x19, x20, [sp, #16]
   93e64:	a8c27bfd 	ldp	x29, x30, [sp], #32
   93e68:	140008ba 	b	96150 <CUSBAudioEntity::GetID() const>
   93e6c:	d503201f 	nop

0000000000093e70 <CUSBAudioControlDevice::GetNumSources(unsigned char) const>:
   93e70:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   93e74:	9100a000 	add	x0, x0, #0x28
   93e78:	910003fd 	mov	x29, sp
   93e7c:	94000bc5 	bl	96d90 <CUSBAudioFunctionTopology::GetEntity(unsigned char) const>
   93e80:	b4000060 	cbz	x0, 93e8c <CUSBAudioControlDevice::GetNumSources(unsigned char) const+0x1c>
   93e84:	a8c17bfd 	ldp	x29, x30, [sp], #16
   93e88:	140008ea 	b	96230 <CUSBAudioEntity::GetNumSources() const>
   93e8c:	52800000 	mov	w0, #0x0                   	// #0
   93e90:	a8c17bfd 	ldp	x29, x30, [sp], #16
   93e94:	d65f03c0 	ret
   93e98:	d503201f 	nop
   93e9c:	d503201f 	nop

0000000000093ea0 <CUSBAudioControlDevice::GetSourceID(unsigned char, unsigned int) const>:
   93ea0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   93ea4:	9100a000 	add	x0, x0, #0x28
   93ea8:	910003fd 	mov	x29, sp
   93eac:	f9000bf3 	str	x19, [sp, #16]
   93eb0:	2a0203f3 	mov	w19, w2
   93eb4:	94000bb7 	bl	96d90 <CUSBAudioFunctionTopology::GetEntity(unsigned char) const>
   93eb8:	b40000a0 	cbz	x0, 93ecc <CUSBAudioControlDevice::GetSourceID(unsigned char, unsigned int) const+0x2c>
   93ebc:	2a1303e1 	mov	w1, w19
   93ec0:	f9400bf3 	ldr	x19, [sp, #16]
   93ec4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   93ec8:	140008de 	b	96240 <CUSBAudioEntity::GetSourceID(unsigned int) const>
   93ecc:	52800000 	mov	w0, #0x0                   	// #0
   93ed0:	f9400bf3 	ldr	x19, [sp, #16]
   93ed4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   93ed8:	d65f03c0 	ret
   93edc:	d503201f 	nop

0000000000093ee0 <CUSBAudioControlDevice::GetFeatureUnitID(unsigned char, bool) const>:
   93ee0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   93ee4:	910003fd 	mov	x29, sp
   93ee8:	a90153f3 	stp	x19, x20, [sp, #16]
   93eec:	9100a013 	add	x19, x0, #0x28
   93ef0:	aa1303e0 	mov	x0, x19
   93ef4:	a9025bf5 	stp	x21, x22, [sp, #32]
   93ef8:	12001c35 	and	w21, w1, #0xff
   93efc:	12001c56 	and	w22, w2, #0xff
   93f00:	2a1503e1 	mov	w1, w21
   93f04:	94000ba3 	bl	96d90 <CUSBAudioFunctionTopology::GetEntity(unsigned char) const>
   93f08:	b40001e0 	cbz	x0, 93f44 <CUSBAudioControlDevice::GetFeatureUnitID(unsigned char, bool) const+0x64>
   93f0c:	aa0003f4 	mov	x20, x0
   93f10:	94000880 	bl	96110 <CUSBAudioEntity::GetEntityType() const>
   93f14:	71000c1f 	cmp	w0, #0x3
   93f18:	54000180 	b.eq	93f48 <CUSBAudioControlDevice::GetFeatureUnitID(unsigned char, bool) const+0x68>  // b.none
   93f1c:	2a1603e3 	mov	w3, w22
   93f20:	aa1403e2 	mov	x2, x20
   93f24:	aa1303e0 	mov	x0, x19
   93f28:	52800061 	mov	w1, #0x3                   	// #3
   93f2c:	94000c09 	bl	96f50 <CUSBAudioFunctionTopology::FindEntity(CUSBAudioEntity::TEntityType, CUSBAudioEntity*, bool) const>
   93f30:	b40000a0 	cbz	x0, 93f44 <CUSBAudioControlDevice::GetFeatureUnitID(unsigned char, bool) const+0x64>
   93f34:	a94153f3 	ldp	x19, x20, [sp, #16]
   93f38:	a9425bf5 	ldp	x21, x22, [sp, #32]
   93f3c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   93f40:	14000884 	b	96150 <CUSBAudioEntity::GetID() const>
   93f44:	52800015 	mov	w21, #0x0                   	// #0
   93f48:	2a1503e0 	mov	w0, w21
   93f4c:	a94153f3 	ldp	x19, x20, [sp, #16]
   93f50:	a9425bf5 	ldp	x21, x22, [sp, #32]
   93f54:	a8c37bfd 	ldp	x29, x30, [sp], #48
   93f58:	d65f03c0 	ret
   93f5c:	d503201f 	nop

0000000000093f60 <CUSBAudioControlDevice::GetClockSelectorID(unsigned int)>:
   93f60:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   93f64:	2a0103e2 	mov	w2, w1
   93f68:	910003fd 	mov	x29, sp
   93f6c:	9100a000 	add	x0, x0, #0x28
   93f70:	528000a1 	mov	w1, #0x5                   	// #5
   93f74:	94000b8b 	bl	96da0 <CUSBAudioFunctionTopology::FindEntity(CUSBAudioEntity::TEntityType, unsigned int) const>
   93f78:	b4000060 	cbz	x0, 93f84 <CUSBAudioControlDevice::GetClockSelectorID(unsigned int)+0x24>
   93f7c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   93f80:	14000874 	b	96150 <CUSBAudioEntity::GetID() const>
   93f84:	52800000 	mov	w0, #0x0                   	// #0
   93f88:	a8c17bfd 	ldp	x29, x30, [sp], #16
   93f8c:	d65f03c0 	ret

0000000000093f90 <CUSBAudioControlDevice::IsControlSupported(unsigned char, unsigned int, CUSBAudioFeatureUnit::TControl) const>:
   93f90:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   93f94:	9100a000 	add	x0, x0, #0x28
   93f98:	910003fd 	mov	x29, sp
   93f9c:	a90153f3 	stp	x19, x20, [sp, #16]
   93fa0:	2a0203f4 	mov	w20, w2
   93fa4:	f90013f5 	str	x21, [sp, #32]
   93fa8:	2a0303f5 	mov	w21, w3
   93fac:	94000b79 	bl	96d90 <CUSBAudioFunctionTopology::GetEntity(unsigned char) const>
   93fb0:	b40000a0 	cbz	x0, 93fc4 <CUSBAudioControlDevice::IsControlSupported(unsigned char, unsigned int, CUSBAudioFeatureUnit::TControl) const+0x34>
   93fb4:	aa0003f3 	mov	x19, x0
   93fb8:	94000856 	bl	96110 <CUSBAudioEntity::GetEntityType() const>
   93fbc:	71000c1f 	cmp	w0, #0x3
   93fc0:	540000c0 	b.eq	93fd8 <CUSBAudioControlDevice::IsControlSupported(unsigned char, unsigned int, CUSBAudioFeatureUnit::TControl) const+0x48>  // b.none
   93fc4:	52800000 	mov	w0, #0x0                   	// #0
   93fc8:	a94153f3 	ldp	x19, x20, [sp, #16]
   93fcc:	f94013f5 	ldr	x21, [sp, #32]
   93fd0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   93fd4:	d65f03c0 	ret
   93fd8:	2a1503e2 	mov	w2, w21
   93fdc:	2a1403e1 	mov	w1, w20
   93fe0:	aa1303e0 	mov	x0, x19
   93fe4:	94000ab7 	bl	96ac0 <CUSBAudioFeatureUnit::GetControlStatus(unsigned int, CUSBAudioFeatureUnit::TControl) const>
   93fe8:	71000c1f 	cmp	w0, #0x3
   93fec:	1a9f17e0 	cset	w0, eq	// eq = none
   93ff0:	a94153f3 	ldp	x19, x20, [sp, #16]
   93ff4:	f94013f5 	ldr	x21, [sp, #32]
   93ff8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   93ffc:	d65f03c0 	ret

0000000000094000 <CUSBAudioControlDevice::Configure()>:
   94000:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   94004:	52800481 	mov	w1, #0x24                  	// #36
   94008:	910003fd 	mov	x29, sp
   9400c:	a90153f3 	stp	x19, x20, [sp, #16]
   94010:	aa0003f4 	mov	x20, x0
   94014:	97ffda33 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   94018:	b40000c0 	cbz	x0, 94030 <CUSBAudioControlDevice::Configure()+0x30>
   9401c:	a9025bf5 	stp	x21, x22, [sp, #32]
   94020:	39400815 	ldrb	w21, [x0, #2]
   94024:	710006bf 	cmp	w21, #0x1
   94028:	540001e0 	b.eq	94064 <CUSBAudioControlDevice::Configure()+0x64>  // b.none
   9402c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94030:	52800013 	mov	w19, #0x0                   	// #0
   94034:	94002e77 	bl	9fa10 <CLogger::Get()>
   94038:	f0000101 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9403c:	91104021 	add	x1, x1, #0x410
   94040:	f00000e3 	adrp	x3, b3000 <_etext+0x2158>
   94044:	91004021 	add	x1, x1, #0x10
   94048:	911f4063 	add	x3, x3, #0x7d0
   9404c:	52800042 	mov	w2, #0x2                   	// #2
   94050:	9400305c 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   94054:	2a1303e0 	mov	w0, w19
   94058:	a94153f3 	ldp	x19, x20, [sp, #16]
   9405c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   94060:	d65f03c0 	ret
   94064:	aa0003e1 	mov	x1, x0
   94068:	9100a280 	add	x0, x20, #0x28
   9406c:	94000c41 	bl	97170 <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)>
   94070:	72001c13 	ands	w19, w0, #0xff
   94074:	540000c1 	b.ne	9408c <CUSBAudioControlDevice::Configure()+0x8c>  // b.any
   94078:	2a1303e0 	mov	w0, w19
   9407c:	a94153f3 	ldp	x19, x20, [sp, #16]
   94080:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94084:	a8c37bfd 	ldp	x29, x30, [sp], #48
   94088:	d65f03c0 	ret
   9408c:	aa1403e0 	mov	x0, x20
   94090:	97ffd920 	bl	8a510 <CUSBFunction::Configure()>
   94094:	72001c13 	ands	w19, w0, #0xff
   94098:	540002c0 	b.eq	940f0 <CUSBAudioControlDevice::Configure()+0xf0>  // b.none
   9409c:	b9483280 	ldr	w0, [x20, #2096]
   940a0:	350003c0 	cbnz	w0, 94118 <CUSBAudioControlDevice::Configure()+0x118>
   940a4:	f0000116 	adrp	x22, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   940a8:	911042d6 	add	x22, x22, #0x410
   940ac:	b0000140 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   940b0:	2a1503e1 	mov	w1, w21
   940b4:	910042c2 	add	x2, x22, #0x10
   940b8:	91036000 	add	x0, x0, #0xd8
   940bc:	94005215 	bl	a8910 <CNumberPool::AllocateNumber(bool, char const*)>
   940c0:	b9083280 	str	w0, [x20, #2096]
   940c4:	94002b03 	bl	9ecd0 <CDeviceNameService::Get()>
   940c8:	b9483282 	ldr	w2, [x20, #2096]
   940cc:	aa1603e1 	mov	x1, x22
   940d0:	aa1403e3 	mov	x3, x20
   940d4:	52800004 	mov	w4, #0x0                   	// #0
   940d8:	94002b0a 	bl	9ed00 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   940dc:	2a1303e0 	mov	w0, w19
   940e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   940e4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   940e8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   940ec:	d65f03c0 	ret
   940f0:	94002e48 	bl	9fa10 <CLogger::Get()>
   940f4:	f0000101 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   940f8:	91104021 	add	x1, x1, #0x410
   940fc:	b00000e3 	adrp	x3, b1000 <_etext+0x158>
   94100:	91004021 	add	x1, x1, #0x10
   94104:	9112c063 	add	x3, x3, #0x4b0
   94108:	52800042 	mov	w2, #0x2                   	// #2
   9410c:	9400302d 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   94110:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94114:	17ffffd0 	b	94054 <CUSBAudioControlDevice::Configure()+0x54>
   94118:	f00000e1 	adrp	x1, b3000 <_etext+0x2158>
   9411c:	f00000e0 	adrp	x0, b3000 <_etext+0x2158>
   94120:	911ea021 	add	x1, x1, #0x7a8
   94124:	91026000 	add	x0, x0, #0x98
   94128:	52800902 	mov	w2, #0x48                  	// #72
   9412c:	94002705 	bl	9dd40 <assertion_failed>

0000000000094130 <_GLOBAL__sub_I__ZN22CUSBAudioControlDevice18s_DeviceNumberPoolE>:
   94130:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   94134:	910003fd 	mov	x29, sp
   94138:	528007e2 	mov	w2, #0x3f                  	// #63
   9413c:	52800021 	mov	w1, #0x1                   	// #1
   94140:	f9000bf3 	str	x19, [sp, #16]
   94144:	b0000153 	adrp	x19, bd000 <CNetDevice::s_SpeedString+0x18>
   94148:	91036273 	add	x19, x19, #0xd8
   9414c:	aa1303e0 	mov	x0, x19
   94150:	940051d4 	bl	a88a0 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   94154:	b0000142 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   94158:	900000a0 	adrp	x0, a8000 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x20>
   9415c:	aa1303e1 	mov	x1, x19
   94160:	91074042 	add	x2, x2, #0x1d0
   94164:	f9400bf3 	ldr	x19, [sp, #16]
   94168:	91240000 	add	x0, x0, #0x900
   9416c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   94170:	14004794 	b	a5fc0 <__cxa_atexit>
	...

0000000000094180 <CUSBAudioStreamingDevice::CompletionHandler(CUSBRequest*, void*, void*)>:
   94180:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   94184:	910003fd 	mov	x29, sp
   94188:	a90153f3 	stp	x19, x20, [sp, #16]
   9418c:	a9025bf5 	stp	x21, x22, [sp, #32]
   94190:	b4000420 	cbz	x0, 94214 <CUSBAudioStreamingDevice::CompletionHandler(CUSBRequest*, void*, void*)+0x94>
   94194:	aa0003f3 	mov	x19, x0
   94198:	aa0103f5 	mov	x21, x1
   9419c:	aa0203f4 	mov	x20, x2
   941a0:	52800016 	mov	w22, #0x0                   	// #0
   941a4:	97ffb67b 	bl	81b90 <CUSBRequest::GetStatus() const>
   941a8:	350001c0 	cbnz	w0, 941e0 <CUSBAudioStreamingDevice::CompletionHandler(CUSBRequest*, void*, void*)+0x60>
   941ac:	aa1303e0 	mov	x0, x19
   941b0:	97ffb65c 	bl	81b20 <CUSBRequest::~CUSBRequest()>
   941b4:	aa1303e0 	mov	x0, x19
   941b8:	d2801201 	mov	x1, #0x90                  	// #144
   941bc:	97ffb739 	bl	81ea0 <CUSBRequest::operator delete(void*, unsigned long)>
   941c0:	b4000234 	cbz	x20, 94204 <CUSBAudioStreamingDevice::CompletionHandler(CUSBRequest*, void*, void*)+0x84>
   941c4:	aa1503e1 	mov	x1, x21
   941c8:	2a1603e0 	mov	w0, w22
   941cc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   941d0:	aa1403f0 	mov	x16, x20
   941d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   941d8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   941dc:	d61f0200 	br	x16
   941e0:	aa1303e0 	mov	x0, x19
   941e4:	97ffb66f 	bl	81ba0 <CUSBRequest::GetResultLength() const>
   941e8:	2a0003f6 	mov	w22, w0
   941ec:	aa1303e0 	mov	x0, x19
   941f0:	97ffb64c 	bl	81b20 <CUSBRequest::~CUSBRequest()>
   941f4:	aa1303e0 	mov	x0, x19
   941f8:	d2801201 	mov	x1, #0x90                  	// #144
   941fc:	97ffb729 	bl	81ea0 <CUSBRequest::operator delete(void*, unsigned long)>
   94200:	b5fffe34 	cbnz	x20, 941c4 <CUSBAudioStreamingDevice::CompletionHandler(CUSBRequest*, void*, void*)+0x44>
   94204:	a94153f3 	ldp	x19, x20, [sp, #16]
   94208:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9420c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   94210:	d65f03c0 	ret
   94214:	f00000e1 	adrp	x1, b3000 <_etext+0x2158>
   94218:	f00000e0 	adrp	x0, b3000 <_etext+0x2158>
   9421c:	91200021 	add	x1, x1, #0x800
   94220:	91206000 	add	x0, x0, #0x818
   94224:	52808242 	mov	w2, #0x412                 	// #1042
   94228:	940026c6 	bl	9dd40 <assertion_failed>
   9422c:	d503201f 	nop

0000000000094230 <CUSBAudioStreamingDevice::SyncCompletionHandler(CUSBRequest*, void*, void*)>:
   94230:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   94234:	910003fd 	mov	x29, sp
   94238:	a90153f3 	stp	x19, x20, [sp, #16]
   9423c:	b4000922 	cbz	x2, 94360 <CUSBAudioStreamingDevice::SyncCompletionHandler(CUSBRequest*, void*, void*)+0x130>
   94240:	aa0203f3 	mov	x19, x2
   94244:	39413041 	ldrb	w1, [x2, #76]
   94248:	340009a1 	cbz	w1, 9437c <CUSBAudioStreamingDevice::SyncCompletionHandler(CUSBRequest*, void*, void*)+0x14c>
   9424c:	aa0003f4 	mov	x20, x0
   94250:	b4000a40 	cbz	x0, 94398 <CUSBAudioStreamingDevice::SyncCompletionHandler(CUSBRequest*, void*, void*)+0x168>
   94254:	97ffb64f 	bl	81b90 <CUSBRequest::GetStatus() const>
   94258:	35000280 	cbnz	w0, 942a8 <CUSBAudioStreamingDevice::SyncCompletionHandler(CUSBRequest*, void*, void*)+0x78>
   9425c:	aa1403e0 	mov	x0, x20
   94260:	97ffb630 	bl	81b20 <CUSBRequest::~CUSBRequest()>
   94264:	aa1403e0 	mov	x0, x20
   94268:	d2801201 	mov	x1, #0x90                  	// #144
   9426c:	97ffb70d 	bl	81ea0 <CUSBRequest::operator delete(void*, unsigned long)>
   94270:	39457260 	ldrb	w0, [x19, #348]
   94274:	72001c1f 	tst	w0, #0xff
   94278:	540000a0 	b.eq	9428c <CUSBAudioStreamingDevice::SyncCompletionHandler(CUSBRequest*, void*, void*)+0x5c>  // b.none
   9427c:	3905727f 	strb	wzr, [x19, #348]
   94280:	a94153f3 	ldp	x19, x20, [sp, #16]
   94284:	a8c37bfd 	ldp	x29, x30, [sp], #48
   94288:	d65f03c0 	ret
   9428c:	f90013f5 	str	x21, [sp, #32]
   94290:	f00000e1 	adrp	x1, b3000 <_etext+0x2158>
   94294:	f00000e0 	adrp	x0, b3000 <_etext+0x2158>
   94298:	91200021 	add	x1, x1, #0x800
   9429c:	9120e000 	add	x0, x0, #0x838
   942a0:	52808562 	mov	w2, #0x42b                 	// #1067
   942a4:	940026a7 	bl	9dd40 <assertion_failed>
   942a8:	aa1403e0 	mov	x0, x20
   942ac:	97ffb63d 	bl	81ba0 <CUSBRequest::GetResultLength() const>
   942b0:	7100081f 	cmp	w0, #0x2
   942b4:	54fffd49 	b.ls	9425c <CUSBAudioStreamingDevice::SyncCompletionHandler(CUSBRequest*, void*, void*)+0x2c>  // b.plast
   942b8:	aa1403e0 	mov	x0, x20
   942bc:	f90013f5 	str	x21, [sp, #32]
   942c0:	97ffb638 	bl	81ba0 <CUSBRequest::GetResultLength() const>
   942c4:	2a0003f5 	mov	w21, w0
   942c8:	aa1403e0 	mov	x0, x20
   942cc:	97ffb615 	bl	81b20 <CUSBRequest::~CUSBRequest()>
   942d0:	aa1403e0 	mov	x0, x20
   942d4:	d2801201 	mov	x1, #0x90                  	// #144
   942d8:	97ffb6f2 	bl	81ea0 <CUSBRequest::operator delete(void*, unsigned long)>
   942dc:	39457260 	ldrb	w0, [x19, #348]
   942e0:	72001c1f 	tst	w0, #0xff
   942e4:	54fffd60 	b.eq	94290 <CUSBAudioStreamingDevice::SyncCompletionHandler(CUSBRequest*, void*, void*)+0x60>  // b.none
   942e8:	b9402e63 	ldr	w3, [x19, #44]
   942ec:	71000ebf 	cmp	w21, #0x3
   942f0:	b9405262 	ldr	w2, [x19, #80]
   942f4:	b9418260 	ldr	w0, [x19, #384]
   942f8:	b941c261 	ldr	w1, [x19, #448]
   942fc:	1b037c42 	mul	w2, w2, w3
   94300:	540001a1 	b.ne	94334 <CUSBAudioStreamingDevice::SyncCompletionHandler(CUSBRequest*, void*, void*)+0x104>  // b.any
   94304:	12005c00 	and	w0, w0, #0xffffff
   94308:	f94013f5 	ldr	x21, [sp, #32]
   9430c:	0b010000 	add	w0, w0, w1
   94310:	530e7c01 	lsr	w1, w0, #14
   94314:	12003400 	and	w0, w0, #0x3fff
   94318:	1b027c21 	mul	w1, w1, w2
   9431c:	b901c260 	str	w0, [x19, #448]
   94320:	b9011261 	str	w1, [x19, #272]
   94324:	3905727f 	strb	wzr, [x19, #348]
   94328:	a94153f3 	ldp	x19, x20, [sp, #16]
   9432c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   94330:	d65f03c0 	ret
   94334:	0b000021 	add	w1, w1, w0
   94338:	f94013f5 	ldr	x21, [sp, #32]
   9433c:	53107c20 	lsr	w0, w1, #16
   94340:	12003c21 	and	w1, w1, #0xffff
   94344:	1b027c00 	mul	w0, w0, w2
   94348:	b901c261 	str	w1, [x19, #448]
   9434c:	b9011260 	str	w0, [x19, #272]
   94350:	3905727f 	strb	wzr, [x19, #348]
   94354:	a94153f3 	ldp	x19, x20, [sp, #16]
   94358:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9435c:	d65f03c0 	ret
   94360:	f00000e1 	adrp	x1, b3000 <_etext+0x2158>
   94364:	d00000e0 	adrp	x0, b2000 <_etext+0x1158>
   94368:	f90013f5 	str	x21, [sp, #32]
   9436c:	91200021 	add	x1, x1, #0x800
   94370:	913bc000 	add	x0, x0, #0xef0
   94374:	52808422 	mov	w2, #0x421                 	// #1057
   94378:	94002672 	bl	9dd40 <assertion_failed>
   9437c:	f00000e1 	adrp	x1, b3000 <_etext+0x2158>
   94380:	f00000e0 	adrp	x0, b3000 <_etext+0x2158>
   94384:	f90013f5 	str	x21, [sp, #32]
   94388:	91200021 	add	x1, x1, #0x800
   9438c:	91208000 	add	x0, x0, #0x820
   94390:	52808462 	mov	w2, #0x423                 	// #1059
   94394:	9400266b 	bl	9dd40 <assertion_failed>
   94398:	f00000e1 	adrp	x1, b3000 <_etext+0x2158>
   9439c:	f00000e0 	adrp	x0, b3000 <_etext+0x2158>
   943a0:	f90013f5 	str	x21, [sp, #32]
   943a4:	91200021 	add	x1, x1, #0x800
   943a8:	91206000 	add	x0, x0, #0x818
   943ac:	528084a2 	mov	w2, #0x425                 	// #1061
   943b0:	94002664 	bl	9dd40 <assertion_failed>
   943b4:	d503201f 	nop
   943b8:	d503201f 	nop
   943bc:	d503201f 	nop

00000000000943c0 <CUSBAudioStreamingDevice::CUSBAudioStreamingDevice(CUSBFunction*)>:
   943c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   943c4:	910003fd 	mov	x29, sp
   943c8:	f9000bf3 	str	x19, [sp, #16]
   943cc:	aa0003f3 	mov	x19, x0
   943d0:	97ffd8bc 	bl	8a6c0 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   943d4:	f0000100 	adrp	x0, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   943d8:	91110000 	add	x0, x0, #0x440
   943dc:	f9000260 	str	x0, [x19]
   943e0:	94002b74 	bl	9f1b0 <CKernelOptions::Get()>
   943e4:	94002b3b 	bl	9f0d0 <CKernelOptions::GetSoundOption() const>
   943e8:	7100601f 	cmp	w0, #0x18
   943ec:	540003a0 	b.eq	94460 <CUSBAudioStreamingDevice::CUSBAudioStreamingDevice(CUSBFunction*)+0xa0>  // b.none
   943f0:	52800042 	mov	w2, #0x2                   	// #2
   943f4:	52800201 	mov	w1, #0x10                  	// #16
   943f8:	d2c00024 	mov	x4, #0x100000000           	// #4294967296
   943fc:	52800023 	mov	w3, #0x1                   	// #1
   94400:	b901127f 	str	wzr, [x19, #272]
   94404:	91074260 	add	x0, x19, #0x1d0
   94408:	29050a61 	stp	w1, w2, [x19, #40]
   9440c:	a903fe7f 	stp	xzr, xzr, [x19, #56]
   94410:	f9002a64 	str	x4, [x19, #80]
   94414:	b9005a7f 	str	wzr, [x19, #88]
   94418:	b9010e7f 	str	wzr, [x19, #268]
   9441c:	b9011a7f 	str	wzr, [x19, #280]
   94420:	3905727f 	strb	wzr, [x19, #348]
   94424:	b901c27f 	str	wzr, [x19, #448]
   94428:	79038a7f 	strh	wzr, [x19, #452]
   9442c:	b901ce63 	str	w3, [x19, #460]
   94430:	94004088 	bl	a4650 <CString::CString()>
   94434:	f00000e3 	adrp	x3, b3000 <_etext+0x2158>
   94438:	91214063 	add	x3, x3, #0x850
   9443c:	79038e7f 	strh	wzr, [x19, #454]
   94440:	91017260 	add	x0, x19, #0x5c
   94444:	d2801602 	mov	x2, #0xb0                  	// #176
   94448:	7903927f 	strh	wzr, [x19, #456]
   9444c:	52800001 	mov	w1, #0x0                   	// #0
   94450:	f900fa63 	str	x3, [x19, #496]
   94454:	f9400bf3 	ldr	x19, [sp, #16]
   94458:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9445c:	14004ce3 	b	a77e8 <memset>
   94460:	52800062 	mov	w2, #0x3                   	// #3
   94464:	2a0003e1 	mov	w1, w0
   94468:	17ffffe4 	b	943f8 <CUSBAudioStreamingDevice::CUSBAudioStreamingDevice(CUSBFunction*)+0x38>
   9446c:	d503201f 	nop

0000000000094470 <CUSBAudioStreamingDevice::GetDeviceInfo() const>:
   94470:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   94474:	91017001 	add	x1, x0, #0x5c
   94478:	910003fd 	mov	x29, sp
   9447c:	aa0803e0 	mov	x0, x8
   94480:	d2801602 	mov	x2, #0xb0                  	// #176
   94484:	94004cf1 	bl	a7848 <memcpy>
   94488:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9448c:	d65f03c0 	ret

0000000000094490 <CUSBAudioStreamingDevice::GetChunkSizeBytes() const>:
   94490:	b9411001 	ldr	w1, [x0, #272]
   94494:	34000061 	cbz	w1, 944a0 <CUSBAudioStreamingDevice::GetChunkSizeBytes() const+0x10>
   94498:	b9411000 	ldr	w0, [x0, #272]
   9449c:	d65f03c0 	ret
   944a0:	f00000e1 	adrp	x1, b3000 <_etext+0x2158>
   944a4:	f00000e0 	adrp	x0, b3000 <_etext+0x2158>
   944a8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   944ac:	91200021 	add	x1, x1, #0x800
   944b0:	910003fd 	mov	x29, sp
   944b4:	91216000 	add	x0, x0, #0x858
   944b8:	52805c82 	mov	w2, #0x2e4                 	// #740
   944bc:	94002621 	bl	9dd40 <assertion_failed>

00000000000944c0 <CUSBAudioStreamingDevice::SelectInputTerminal(unsigned int)>:
   944c0:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
   944c4:	910003fd 	mov	x29, sp
   944c8:	b9405402 	ldr	w2, [x0, #84]
   944cc:	340006a2 	cbz	w2, 945a0 <CUSBAudioStreamingDevice::SelectInputTerminal(unsigned int)+0xe0>
   944d0:	7100045f 	cmp	w2, #0x1
   944d4:	a9025bf5 	stp	x21, x22, [sp, #32]
   944d8:	540005a0 	b.eq	9458c <CUSBAudioStreamingDevice::SelectInputTerminal(unsigned int)+0xcc>  // b.none
   944dc:	39413016 	ldrb	w22, [x0, #76]
   944e0:	a90153f3 	stp	x19, x20, [sp, #16]
   944e4:	aa0003f3 	mov	x19, x0
   944e8:	f9001bf7 	str	x23, [sp, #48]
   944ec:	350006d6 	cbnz	w22, 945c4 <CUSBAudioStreamingDevice::SelectInputTerminal(unsigned int)+0x104>
   944f0:	6b01005f 	cmp	w2, w1
   944f4:	2a0103f4 	mov	w20, w1
   944f8:	54000729 	b.ls	945dc <CUSBAudioStreamingDevice::SelectInputTerminal(unsigned int)+0x11c>  // b.plast
   944fc:	39471401 	ldrb	w1, [x0, #453]
   94500:	340007a1 	cbz	w1, 945f4 <CUSBAudioStreamingDevice::SelectInputTerminal(unsigned int)+0x134>
   94504:	9101fff5 	add	x21, sp, #0x7f
   94508:	11000681 	add	w1, w20, #0x1
   9450c:	927ae6b5 	and	x21, x21, #0xffffffffffffffc0
   94510:	390002a1 	strb	w1, [x21]
   94514:	97ffd8e7 	bl	8a8b0 <CUSBFunction::GetHost() const>
   94518:	aa0003f7 	mov	x23, x0
   9451c:	aa1303e0 	mov	x0, x19
   94520:	97ffd8d8 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   94524:	39471665 	ldrb	w5, [x19, #453]
   94528:	52800027 	mov	w7, #0x1                   	// #1
   9452c:	aa0003e1 	mov	x1, x0
   94530:	aa1503e6 	mov	x6, x21
   94534:	aa1703e0 	mov	x0, x23
   94538:	3940c264 	ldrb	w4, [x19, #48]
   9453c:	2a0703e3 	mov	w3, w7
   94540:	52800422 	mov	w2, #0x21                  	// #33
   94544:	53181ca5 	ubfiz	w5, w5, #8, #8
   94548:	53181c84 	ubfiz	w4, w4, #8, #8
   9454c:	97ffb2b1 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   94550:	37f80120 	tbnz	w0, #31, 94574 <CUSBAudioStreamingDevice::SelectInputTerminal(unsigned int)+0xb4>
   94554:	52800036 	mov	w22, #0x1                   	// #1
   94558:	f9401bf7 	ldr	x23, [sp, #48]
   9455c:	b9005a74 	str	w20, [x19, #88]
   94560:	2a1603e0 	mov	w0, w22
   94564:	a94153f3 	ldp	x19, x20, [sp, #16]
   94568:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9456c:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   94570:	d65f03c0 	ret
   94574:	2a1603e0 	mov	w0, w22
   94578:	a94153f3 	ldp	x19, x20, [sp, #16]
   9457c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94580:	f9401bf7 	ldr	x23, [sp, #48]
   94584:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   94588:	d65f03c0 	ret
   9458c:	2a0203f6 	mov	w22, w2
   94590:	2a1603e0 	mov	w0, w22
   94594:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94598:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   9459c:	d65f03c0 	ret
   945a0:	f00000e1 	adrp	x1, b3000 <_etext+0x2158>
   945a4:	f00000e0 	adrp	x0, b3000 <_etext+0x2158>
   945a8:	a90153f3 	stp	x19, x20, [sp, #16]
   945ac:	91200021 	add	x1, x1, #0x800
   945b0:	9121c000 	add	x0, x0, #0x870
   945b4:	52806882 	mov	w2, #0x344                 	// #836
   945b8:	a9025bf5 	stp	x21, x22, [sp, #32]
   945bc:	f9001bf7 	str	x23, [sp, #48]
   945c0:	940025e0 	bl	9dd40 <assertion_failed>
   945c4:	f00000e1 	adrp	x1, b3000 <_etext+0x2158>
   945c8:	f00000e0 	adrp	x0, b3000 <_etext+0x2158>
   945cc:	91200021 	add	x1, x1, #0x800
   945d0:	91220000 	add	x0, x0, #0x880
   945d4:	52806942 	mov	w2, #0x34a                 	// #842
   945d8:	940025da 	bl	9dd40 <assertion_failed>
   945dc:	f00000e1 	adrp	x1, b3000 <_etext+0x2158>
   945e0:	f00000e0 	adrp	x0, b3000 <_etext+0x2158>
   945e4:	91200021 	add	x1, x1, #0x800
   945e8:	91224000 	add	x0, x0, #0x890
   945ec:	52806962 	mov	w2, #0x34b                 	// #843
   945f0:	940025d4 	bl	9dd40 <assertion_failed>
   945f4:	f00000e1 	adrp	x1, b3000 <_etext+0x2158>
   945f8:	f00000e0 	adrp	x0, b3000 <_etext+0x2158>
   945fc:	91200021 	add	x1, x1, #0x800
   94600:	9122a000 	add	x0, x0, #0x8a8
   94604:	52806982 	mov	w2, #0x34c                 	// #844
   94608:	940025ce 	bl	9dd40 <assertion_failed>
   9460c:	d503201f 	nop

0000000000094610 <CUSBAudioStreamingDevice::SetMute(bool)>:
   94610:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   94614:	910003fd 	mov	x29, sp
   94618:	294a8803 	ldp	w3, w2, [x0, #84]
   9461c:	a90153f3 	stp	x19, x20, [sp, #16]
   94620:	6b03005f 	cmp	w2, w3
   94624:	540004a2 	b.cs	946b8 <CUSBAudioStreamingDevice::SetMute(bool)+0xa8>  // b.hs, b.nlast
   94628:	2a0203e2 	mov	w2, w2
   9462c:	aa0003f3 	mov	x19, x0
   94630:	8b021003 	add	x3, x0, x2, lsl #4
   94634:	39433863 	ldrb	w3, [x3, #206]
   94638:	34000383 	cbz	w3, 946a8 <CUSBAudioStreamingDevice::SetMute(bool)+0x98>
   9463c:	8b020002 	add	x2, x0, x2
   94640:	f90013f5 	str	x21, [sp, #32]
   94644:	39471842 	ldrb	w2, [x2, #454]
   94648:	34000462 	cbz	w2, 946d4 <CUSBAudioStreamingDevice::SetMute(bool)+0xc4>
   9464c:	9101bff4 	add	x20, sp, #0x6f
   94650:	12001c21 	and	w1, w1, #0xff
   94654:	927ae694 	and	x20, x20, #0xffffffffffffffc0
   94658:	39000281 	strb	w1, [x20]
   9465c:	97ffd895 	bl	8a8b0 <CUSBFunction::GetHost() const>
   94660:	aa0003f5 	mov	x21, x0
   94664:	aa1303e0 	mov	x0, x19
   94668:	97ffd886 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   9466c:	b9405a65 	ldr	w5, [x19, #88]
   94670:	52800027 	mov	w7, #0x1                   	// #1
   94674:	aa0003e1 	mov	x1, x0
   94678:	2a0703e3 	mov	w3, w7
   9467c:	aa1503e0 	mov	x0, x21
   94680:	aa1403e6 	mov	x6, x20
   94684:	52802004 	mov	w4, #0x100                 	// #256
   94688:	52800422 	mov	w2, #0x21                  	// #33
   9468c:	8b050273 	add	x19, x19, x5
   94690:	39471a65 	ldrb	w5, [x19, #454]
   94694:	53181ca5 	ubfiz	w5, w5, #8, #8
   94698:	97ffb25e 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9469c:	f94013f5 	ldr	x21, [sp, #32]
   946a0:	2a2003e3 	mvn	w3, w0
   946a4:	531f7c63 	lsr	w3, w3, #31
   946a8:	2a0303e0 	mov	w0, w3
   946ac:	a94153f3 	ldp	x19, x20, [sp, #16]
   946b0:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   946b4:	d65f03c0 	ret
   946b8:	f00000e1 	adrp	x1, b3000 <_etext+0x2158>
   946bc:	f00000e0 	adrp	x0, b3000 <_etext+0x2158>
   946c0:	f90013f5 	str	x21, [sp, #32]
   946c4:	91200021 	add	x1, x1, #0x800
   946c8:	91238000 	add	x0, x0, #0x8e0
   946cc:	52806c42 	mov	w2, #0x362                 	// #866
   946d0:	9400259c 	bl	9dd40 <assertion_failed>
   946d4:	f00000e1 	adrp	x1, b3000 <_etext+0x2158>
   946d8:	f00000e0 	adrp	x0, b3000 <_etext+0x2158>
   946dc:	91200021 	add	x1, x1, #0x800
   946e0:	91242000 	add	x0, x0, #0x908
   946e4:	52806d22 	mov	w2, #0x369                 	// #873
   946e8:	94002596 	bl	9dd40 <assertion_failed>
   946ec:	d503201f 	nop

00000000000946f0 <CUSBAudioStreamingDevice::SetVolume(unsigned int, int)>:
   946f0:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
   946f4:	910003fd 	mov	x29, sp
   946f8:	b9405003 	ldr	w3, [x0, #80]
   946fc:	a90153f3 	stp	x19, x20, [sp, #16]
   94700:	a9025bf5 	stp	x21, x22, [sp, #32]
   94704:	6b01007f 	cmp	w3, w1
   94708:	f9001bf7 	str	x23, [sp, #48]
   9470c:	54000aa3 	b.cc	94860 <CUSBAudioStreamingDevice::SetVolume(unsigned int, int)+0x170>  // b.lo, b.ul, b.last
   94710:	aa0003f3 	mov	x19, x0
   94714:	2a0103f5 	mov	w21, w1
   94718:	294a8001 	ldp	w1, w0, [x0, #84]
   9471c:	6b01001f 	cmp	w0, w1
   94720:	54000ac2 	b.cs	94878 <CUSBAudioStreamingDevice::SetVolume(unsigned int, int)+0x188>  // b.hs, b.nlast
   94724:	d37c7c01 	ubfiz	x1, x0, #4, #32
   94728:	2a0003e0 	mov	w0, w0
   9472c:	8b010261 	add	x1, x19, x1
   94730:	39433c24 	ldrb	w4, [x1, #207]
   94734:	340007c4 	cbz	w4, 9482c <CUSBAudioStreamingDevice::SetVolume(unsigned int, int)+0x13c>
   94738:	8b000260 	add	x0, x19, x0
   9473c:	39471800 	ldrb	w0, [x0, #454]
   94740:	34000840 	cbz	w0, 94848 <CUSBAudioStreamingDevice::SetVolume(unsigned int, int)+0x158>
   94744:	9101fff4 	add	x20, sp, #0x7f
   94748:	53185c42 	lsl	w2, w2, #8
   9474c:	39434037 	ldrb	w23, [x1, #208]
   94750:	927ae694 	and	x20, x20, #0xffffffffffffffc0
   94754:	79000282 	strh	w2, [x20]
   94758:	35000377 	cbnz	w23, 947c4 <CUSBAudioStreamingDevice::SetVolume(unsigned int, int)+0xd4>
   9475c:	35000695 	cbnz	w21, 9482c <CUSBAudioStreamingDevice::SetVolume(unsigned int, int)+0x13c>
   94760:	aa1303e0 	mov	x0, x19
   94764:	97ffd853 	bl	8a8b0 <CUSBFunction::GetHost() const>
   94768:	aa0003f6 	mov	x22, x0
   9476c:	aa1303e0 	mov	x0, x19
   94770:	97ffd844 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   94774:	b9405a65 	ldr	w5, [x19, #88]
   94778:	aa0003e1 	mov	x1, x0
   9477c:	aa1403e6 	mov	x6, x20
   94780:	aa1603e0 	mov	x0, x22
   94784:	321702a4 	orr	w4, w21, #0x200
   94788:	52800047 	mov	w7, #0x2                   	// #2
   9478c:	52800023 	mov	w3, #0x1                   	// #1
   94790:	52800422 	mov	w2, #0x21                  	// #33
   94794:	8b050273 	add	x19, x19, x5
   94798:	39471a65 	ldrb	w5, [x19, #454]
   9479c:	53181ca5 	ubfiz	w5, w5, #8, #8
   947a0:	97ffb21c 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   947a4:	2a2003f7 	mvn	w23, w0
   947a8:	531f7ef7 	lsr	w23, w23, #31
   947ac:	2a1703e0 	mov	w0, w23
   947b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   947b4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   947b8:	f9401bf7 	ldr	x23, [sp, #48]
   947bc:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   947c0:	d65f03c0 	ret
   947c4:	35fffcf5 	cbnz	w21, 94760 <CUSBAudioStreamingDevice::SetVolume(unsigned int, int)+0x70>
   947c8:	52800036 	mov	w22, #0x1                   	// #1
   947cc:	350000c3 	cbnz	w3, 947e4 <CUSBAudioStreamingDevice::SetVolume(unsigned int, int)+0xf4>
   947d0:	17fffff7 	b	947ac <CUSBAudioStreamingDevice::SetVolume(unsigned int, int)+0xbc>
   947d4:	b9405260 	ldr	w0, [x19, #80]
   947d8:	110006d6 	add	w22, w22, #0x1
   947dc:	6b16001f 	cmp	w0, w22
   947e0:	54fffe63 	b.cc	947ac <CUSBAudioStreamingDevice::SetVolume(unsigned int, int)+0xbc>  // b.lo, b.ul, b.last
   947e4:	aa1303e0 	mov	x0, x19
   947e8:	97ffd832 	bl	8a8b0 <CUSBFunction::GetHost() const>
   947ec:	aa0003f5 	mov	x21, x0
   947f0:	aa1303e0 	mov	x0, x19
   947f4:	97ffd823 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   947f8:	b9405a65 	ldr	w5, [x19, #88]
   947fc:	aa0003e1 	mov	x1, x0
   94800:	52800047 	mov	w7, #0x2                   	// #2
   94804:	aa1503e0 	mov	x0, x21
   94808:	aa1403e6 	mov	x6, x20
   9480c:	321702c4 	orr	w4, w22, #0x200
   94810:	52800023 	mov	w3, #0x1                   	// #1
   94814:	52800422 	mov	w2, #0x21                  	// #33
   94818:	8b050265 	add	x5, x19, x5
   9481c:	394718a5 	ldrb	w5, [x5, #454]
   94820:	53181ca5 	ubfiz	w5, w5, #8, #8
   94824:	97ffb1fb 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   94828:	36fffd60 	tbz	w0, #31, 947d4 <CUSBAudioStreamingDevice::SetVolume(unsigned int, int)+0xe4>
   9482c:	52800017 	mov	w23, #0x0                   	// #0
   94830:	a94153f3 	ldp	x19, x20, [sp, #16]
   94834:	2a1703e0 	mov	w0, w23
   94838:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9483c:	f9401bf7 	ldr	x23, [sp, #48]
   94840:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   94844:	d65f03c0 	ret
   94848:	f00000e1 	adrp	x1, b3000 <_etext+0x2158>
   9484c:	f00000e0 	adrp	x0, b3000 <_etext+0x2158>
   94850:	91200021 	add	x1, x1, #0x800
   94854:	91242000 	add	x0, x0, #0x908
   94858:	528070c2 	mov	w2, #0x386                 	// #902
   9485c:	94002539 	bl	9dd40 <assertion_failed>
   94860:	f00000e1 	adrp	x1, b3000 <_etext+0x2158>
   94864:	f00000e0 	adrp	x0, b3000 <_etext+0x2158>
   94868:	91200021 	add	x1, x1, #0x800
   9486c:	91254000 	add	x0, x0, #0x950
   94870:	52806fc2 	mov	w2, #0x37e                 	// #894
   94874:	94002533 	bl	9dd40 <assertion_failed>
   94878:	f00000e1 	adrp	x1, b3000 <_etext+0x2158>
   9487c:	f00000e0 	adrp	x0, b3000 <_etext+0x2158>
   94880:	91200021 	add	x1, x1, #0x800
   94884:	91238000 	add	x0, x0, #0x8e0
   94888:	52806fe2 	mov	w2, #0x37f                 	// #895
   9488c:	9400252d 	bl	9dd40 <assertion_failed>

0000000000094890 <CUSBAudioStreamingDevice::InitTerminalControlInfo(CUSBAudioControlDevice*)>:
   94890:	a9b27bfd 	stp	x29, x30, [sp, #-224]!
   94894:	910003fd 	mov	x29, sp
   94898:	a90153f3 	stp	x19, x20, [sp, #16]
   9489c:	a9025bf5 	stp	x21, x22, [sp, #32]
   948a0:	a90363f7 	stp	x23, x24, [sp, #48]
   948a4:	a9046bf9 	stp	x25, x26, [sp, #64]
   948a8:	a90573fb 	stp	x27, x28, [sp, #80]
   948ac:	b4001441 	cbz	x1, 94b34 <CUSBAudioStreamingDevice::InitTerminalControlInfo(CUSBAudioControlDevice*)+0x2a4>
   948b0:	9102bff7 	add	x23, sp, #0xaf
   948b4:	aa0003f6 	mov	x22, x0
   948b8:	91033814 	add	x20, x0, #0xce
   948bc:	9107181b 	add	x27, x0, #0x1c6
   948c0:	b9405400 	ldr	w0, [x0, #84]
   948c4:	aa0103f8 	mov	x24, x1
   948c8:	927ae6f7 	and	x23, x23, #0xffffffffffffffc0
   948cc:	d2800013 	mov	x19, #0x0                   	// #0
   948d0:	340013e0 	cbz	w0, 94b4c <CUSBAudioStreamingDevice::InitTerminalControlInfo(CUSBAudioControlDevice*)+0x2bc>
   948d4:	d503201f 	nop
   948d8:	38736b75 	ldrb	w21, [x27, x19]
   948dc:	340007d5 	cbz	w21, 949d4 <CUSBAudioStreamingDevice::InitTerminalControlInfo(CUSBAudioControlDevice*)+0x144>
   948e0:	52800003 	mov	w3, #0x0                   	// #0
   948e4:	52800002 	mov	w2, #0x0                   	// #0
   948e8:	2a1503e1 	mov	w1, w21
   948ec:	aa1803e0 	mov	x0, x24
   948f0:	97fffda8 	bl	93f90 <CUSBAudioControlDevice::IsControlSupported(unsigned char, unsigned int, CUSBAudioFeatureUnit::TControl) const>
   948f4:	2a0003e4 	mov	w4, w0
   948f8:	52800023 	mov	w3, #0x1                   	// #1
   948fc:	2a0303e2 	mov	w2, w3
   94900:	2a1503e1 	mov	w1, w21
   94904:	aa1803e0 	mov	x0, x24
   94908:	39000284 	strb	w4, [x20]
   9490c:	52804039 	mov	w25, #0x201                 	// #513
   94910:	97fffda0 	bl	93f90 <CUSBAudioControlDevice::IsControlSupported(unsigned char, unsigned int, CUSBAudioFeatureUnit::TControl) const>
   94914:	72001c1f 	tst	w0, #0xff
   94918:	5280003a 	mov	w26, #0x1                   	// #1
   9491c:	54000a20 	b.eq	94a60 <CUSBAudioStreamingDevice::InitTerminalControlInfo(CUSBAudioControlDevice*)+0x1d0>  // b.none
   94920:	3940c2dc 	ldrb	w28, [x22, #48]
   94924:	53181eb5 	ubfiz	w21, w21, #8, #8
   94928:	aa1603e0 	mov	x0, x22
   9492c:	350006fc 	cbnz	w28, 94a08 <CUSBAudioStreamingDevice::InitTerminalControlInfo(CUSBAudioControlDevice*)+0x178>
   94930:	97ffd7e0 	bl	8a8b0 <CUSBFunction::GetHost() const>
   94934:	aa0003e2 	mov	x2, x0
   94938:	aa1603e0 	mov	x0, x22
   9493c:	f90037e2 	str	x2, [sp, #104]
   94940:	97ffd7d0 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   94944:	f94037e2 	ldr	x2, [sp, #104]
   94948:	aa0003e1 	mov	x1, x0
   9494c:	52800047 	mov	w7, #0x2                   	// #2
   94950:	aa1703e6 	mov	x6, x23
   94954:	2a1503e5 	mov	w5, w21
   94958:	2a1903e4 	mov	w4, w25
   9495c:	12800fa3 	mov	w3, #0xffffff82            	// #-126
   94960:	aa0203e0 	mov	x0, x2
   94964:	12800bc2 	mov	w2, #0xffffffa1            	// #-95
   94968:	97ffb1aa 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9496c:	37f808e0 	tbnz	w0, #31, 94a88 <CUSBAudioStreamingDevice::InitTerminalControlInfo(CUSBAudioControlDevice*)+0x1f8>
   94970:	39c006e1 	ldrsb	w1, [x23, #1]
   94974:	aa1603e0 	mov	x0, x22
   94978:	b8006281 	stur	w1, [x20, #6]
   9497c:	97ffd7cd 	bl	8a8b0 <CUSBFunction::GetHost() const>
   94980:	aa0003e2 	mov	x2, x0
   94984:	aa1603e0 	mov	x0, x22
   94988:	f90037e2 	str	x2, [sp, #104]
   9498c:	97ffd7bd 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   94990:	f94037e2 	ldr	x2, [sp, #104]
   94994:	aa0003e1 	mov	x1, x0
   94998:	2a1503e5 	mov	w5, w21
   9499c:	2a1903e4 	mov	w4, w25
   949a0:	52800047 	mov	w7, #0x2                   	// #2
   949a4:	aa1703e6 	mov	x6, x23
   949a8:	12800f83 	mov	w3, #0xffffff83            	// #-125
   949ac:	aa0203e0 	mov	x0, x2
   949b0:	12800bc2 	mov	w2, #0xffffffa1            	// #-95
   949b4:	97ffb197 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   949b8:	37f80a20 	tbnz	w0, #31, 94afc <CUSBAudioStreamingDevice::InitTerminalControlInfo(CUSBAudioControlDevice*)+0x26c>
   949bc:	39c006e0 	ldrsb	w0, [x23, #1]
   949c0:	b800a280 	stur	w0, [x20, #10]
   949c4:	52800020 	mov	w0, #0x1                   	// #1
   949c8:	39000a9a 	strb	w26, [x20, #2]
   949cc:	39000680 	strb	w0, [x20, #1]
   949d0:	b94056c0 	ldr	w0, [x22, #84]
   949d4:	91000673 	add	x19, x19, #0x1
   949d8:	91004294 	add	x20, x20, #0x10
   949dc:	6b13001f 	cmp	w0, w19
   949e0:	54fff7c8 	b.hi	948d8 <CUSBAudioStreamingDevice::InitTerminalControlInfo(CUSBAudioControlDevice*)+0x48>  // b.pmore
   949e4:	5280003c 	mov	w28, #0x1                   	// #1
   949e8:	a94153f3 	ldp	x19, x20, [sp, #16]
   949ec:	2a1c03e0 	mov	w0, w28
   949f0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   949f4:	a94363f7 	ldp	x23, x24, [sp, #48]
   949f8:	a9446bf9 	ldp	x25, x26, [sp, #64]
   949fc:	a94573fb 	ldp	x27, x28, [sp, #80]
   94a00:	a8ce7bfd 	ldp	x29, x30, [sp], #224
   94a04:	d65f03c0 	ret
   94a08:	97ffd7aa 	bl	8a8b0 <CUSBFunction::GetHost() const>
   94a0c:	aa0003fc 	mov	x28, x0
   94a10:	aa1603e0 	mov	x0, x22
   94a14:	97ffd79b 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   94a18:	aa0003e1 	mov	x1, x0
   94a1c:	2a1503e5 	mov	w5, w21
   94a20:	aa1c03e0 	mov	x0, x28
   94a24:	2a1903e4 	mov	w4, w25
   94a28:	52800107 	mov	w7, #0x8                   	// #8
   94a2c:	aa1703e6 	mov	x6, x23
   94a30:	52800043 	mov	w3, #0x2                   	// #2
   94a34:	12800bc2 	mov	w2, #0xffffffa1            	// #-95
   94a38:	97ffb176 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   94a3c:	37f80420 	tbnz	w0, #31, 94ac0 <CUSBAudioStreamingDevice::InitTerminalControlInfo(CUSBAudioControlDevice*)+0x230>
   94a40:	79c002e0 	ldrsh	w0, [x23]
   94a44:	7100041f 	cmp	w0, #0x1
   94a48:	54fffc41 	b.ne	949d0 <CUSBAudioStreamingDevice::InitTerminalControlInfo(CUSBAudioControlDevice*)+0x140>  // b.any
   94a4c:	39c00ee1 	ldrsb	w1, [x23, #3]
   94a50:	39c016e0 	ldrsb	w0, [x23, #5]
   94a54:	b8006281 	stur	w1, [x20, #6]
   94a58:	b800a280 	stur	w0, [x20, #10]
   94a5c:	17ffffda 	b	949c4 <CUSBAudioStreamingDevice::InitTerminalControlInfo(CUSBAudioControlDevice*)+0x134>
   94a60:	2a1a03e3 	mov	w3, w26
   94a64:	52800002 	mov	w2, #0x0                   	// #0
   94a68:	2a1503e1 	mov	w1, w21
   94a6c:	aa1803e0 	mov	x0, x24
   94a70:	97fffd48 	bl	93f90 <CUSBAudioControlDevice::IsControlSupported(unsigned char, unsigned int, CUSBAudioFeatureUnit::TControl) const>
   94a74:	72001c1f 	tst	w0, #0xff
   94a78:	52804019 	mov	w25, #0x200                 	// #512
   94a7c:	5280001a 	mov	w26, #0x0                   	// #0
   94a80:	54fff501 	b.ne	94920 <CUSBAudioStreamingDevice::InitTerminalControlInfo(CUSBAudioControlDevice*)+0x90>  // b.any
   94a84:	17ffffd3 	b	949d0 <CUSBAudioStreamingDevice::InitTerminalControlInfo(CUSBAudioControlDevice*)+0x140>
   94a88:	94002be2 	bl	9fa10 <CLogger::Get()>
   94a8c:	52800042 	mov	w2, #0x2                   	// #2
   94a90:	f00000e3 	adrp	x3, b3000 <_etext+0x2158>
   94a94:	9125e063 	add	x3, x3, #0x978
   94a98:	f940fac1 	ldr	x1, [x22, #496]
   94a9c:	94002dc9 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   94aa0:	2a1c03e0 	mov	w0, w28
   94aa4:	a94153f3 	ldp	x19, x20, [sp, #16]
   94aa8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94aac:	a94363f7 	ldp	x23, x24, [sp, #48]
   94ab0:	a9446bf9 	ldp	x25, x26, [sp, #64]
   94ab4:	a94573fb 	ldp	x27, x28, [sp, #80]
   94ab8:	a8ce7bfd 	ldp	x29, x30, [sp], #224
   94abc:	d65f03c0 	ret
   94ac0:	94002bd4 	bl	9fa10 <CLogger::Get()>
   94ac4:	52800042 	mov	w2, #0x2                   	// #2
   94ac8:	f00000e3 	adrp	x3, b3000 <_etext+0x2158>
   94acc:	9126e063 	add	x3, x3, #0x9b8
   94ad0:	f940fac1 	ldr	x1, [x22, #496]
   94ad4:	5280001c 	mov	w28, #0x0                   	// #0
   94ad8:	94002dba 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   94adc:	2a1c03e0 	mov	w0, w28
   94ae0:	a94153f3 	ldp	x19, x20, [sp, #16]
   94ae4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94ae8:	a94363f7 	ldp	x23, x24, [sp, #48]
   94aec:	a9446bf9 	ldp	x25, x26, [sp, #64]
   94af0:	a94573fb 	ldp	x27, x28, [sp, #80]
   94af4:	a8ce7bfd 	ldp	x29, x30, [sp], #224
   94af8:	d65f03c0 	ret
   94afc:	94002bc5 	bl	9fa10 <CLogger::Get()>
   94b00:	52800042 	mov	w2, #0x2                   	// #2
   94b04:	f00000e3 	adrp	x3, b3000 <_etext+0x2158>
   94b08:	91266063 	add	x3, x3, #0x998
   94b0c:	f940fac1 	ldr	x1, [x22, #496]
   94b10:	94002dac 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   94b14:	2a1c03e0 	mov	w0, w28
   94b18:	a94153f3 	ldp	x19, x20, [sp, #16]
   94b1c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94b20:	a94363f7 	ldp	x23, x24, [sp, #48]
   94b24:	a9446bf9 	ldp	x25, x26, [sp, #64]
   94b28:	a94573fb 	ldp	x27, x28, [sp, #80]
   94b2c:	a8ce7bfd 	ldp	x29, x30, [sp], #224
   94b30:	d65f03c0 	ret
   94b34:	f00000e1 	adrp	x1, b3000 <_etext+0x2158>
   94b38:	f00000e0 	adrp	x0, b3000 <_etext+0x2158>
   94b3c:	91200021 	add	x1, x1, #0x800
   94b40:	9125a000 	add	x0, x0, #0x968
   94b44:	52807682 	mov	w2, #0x3b4                 	// #948
   94b48:	9400247e 	bl	9dd40 <assertion_failed>
   94b4c:	f00000e1 	adrp	x1, b3000 <_etext+0x2158>
   94b50:	f00000e0 	adrp	x0, b3000 <_etext+0x2158>
   94b54:	91200021 	add	x1, x1, #0x800
   94b58:	9121c000 	add	x0, x0, #0x870
   94b5c:	528076a2 	mov	w2, #0x3b5                 	// #949
   94b60:	94002478 	bl	9dd40 <assertion_failed>
   94b64:	d503201f 	nop
   94b68:	d503201f 	nop
   94b6c:	d503201f 	nop

0000000000094b70 <CUSBAudioStreamingDevice::UpdateChunkSize()>:
   94b70:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   94b74:	910003fd 	mov	x29, sp
   94b78:	39445001 	ldrb	w1, [x0, #276]
   94b7c:	a90153f3 	stp	x19, x20, [sp, #16]
   94b80:	340007c1 	cbz	w1, 94c78 <CUSBAudioStreamingDevice::UpdateChunkSize()+0x108>
   94b84:	aa0003f4 	mov	x20, x0
   94b88:	b9410c01 	ldr	w1, [x0, #268]
   94b8c:	34000821 	cbz	w1, 94c90 <CUSBAudioStreamingDevice::UpdateChunkSize()+0x120>
   94b90:	97ffd730 	bl	8a850 <CUSBFunction::GetDevice() const>
   94b94:	97ffcf17 	bl	887f0 <CUSBDevice::GetSpeed() const>
   94b98:	b9404a81 	ldr	w1, [x20, #72]
   94b9c:	7100041f 	cmp	w0, #0x1
   94ba0:	5283e800 	mov	w0, #0x1f40                	// #8000
   94ba4:	52807d13 	mov	w19, #0x3e8                 	// #1000
   94ba8:	1a800273 	csel	w19, w19, w0, eq	// eq = none
   94bac:	b941ce80 	ldr	w0, [x20, #460]
   94bb0:	1ac10a73 	udiv	w19, w19, w1
   94bb4:	35000480 	cbnz	w0, 94c44 <CUSBAudioStreamingDevice::UpdateChunkSize()+0xd4>
   94bb8:	5289ba66 	mov	w6, #0x4dd3                	// #19923
   94bbc:	72a20c46 	movk	w6, #0x1062, lsl #16
   94bc0:	710f9e7f 	cmp	w19, #0x3e7
   94bc4:	9ba67e66 	umull	x6, w19, w6
   94bc8:	d366fcc6 	lsr	x6, x6, #38
   94bcc:	b9011a86 	str	w6, [x20, #280]
   94bd0:	54000509 	b.ls	94c70 <CUSBAudioStreamingDevice::UpdateChunkSize()+0x100>  // b.plast
   94bd4:	b9402e82 	ldr	w2, [x20, #44]
   94bd8:	d2800003 	mov	x3, #0x0                   	// #0
   94bdc:	52800005 	mov	w5, #0x0                   	// #0
   94be0:	91047289 	add	x9, x20, #0x11c
   94be4:	b9405287 	ldr	w7, [x20, #80]
   94be8:	b9410e88 	ldr	w8, [x20, #268]
   94bec:	b941c281 	ldr	w1, [x20, #448]
   94bf0:	1b027ce7 	mul	w7, w7, w2
   94bf4:	12003ce7 	and	w7, w7, #0xffff
   94bf8:	0b010101 	add	w1, w8, w1
   94bfc:	1ad30824 	udiv	w4, w1, w19
   94c00:	1b047ce2 	mul	w2, w7, w4
   94c04:	1b138481 	msub	w1, w4, w19, w1
   94c08:	12003c42 	and	w2, w2, #0xffff
   94c0c:	0b0200a5 	add	w5, w5, w2
   94c10:	78237922 	strh	w2, [x9, x3, lsl #1]
   94c14:	91000463 	add	x3, x3, #0x1
   94c18:	6b0300df 	cmp	w6, w3
   94c1c:	54fffee8 	b.hi	94bf8 <CUSBAudioStreamingDevice::UpdateChunkSize()+0x88>  // b.pmore
   94c20:	b901c281 	str	w1, [x20, #448]
   94c24:	b9011285 	str	w5, [x20, #272]
   94c28:	35000080 	cbnz	w0, 94c38 <CUSBAudioStreamingDevice::UpdateChunkSize()+0xc8>
   94c2c:	a94153f3 	ldp	x19, x20, [sp, #16]
   94c30:	a8c27bfd 	ldp	x29, x30, [sp], #32
   94c34:	d65f03c0 	ret
   94c38:	a94153f3 	ldp	x19, x20, [sp, #16]
   94c3c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   94c40:	14005170 	b	a9200 <LeaveCritical>
   94c44:	9400513f 	bl	a9140 <EnterCritical>
   94c48:	5289ba66 	mov	w6, #0x4dd3                	// #19923
   94c4c:	72a20c46 	movk	w6, #0x1062, lsl #16
   94c50:	b941ce80 	ldr	w0, [x20, #460]
   94c54:	710f9e7f 	cmp	w19, #0x3e7
   94c58:	9ba67e66 	umull	x6, w19, w6
   94c5c:	d366fcc6 	lsr	x6, x6, #38
   94c60:	b9011a86 	str	w6, [x20, #280]
   94c64:	54fffb88 	b.hi	94bd4 <CUSBAudioStreamingDevice::UpdateChunkSize()+0x64>  // b.pmore
   94c68:	52800005 	mov	w5, #0x0                   	// #0
   94c6c:	17ffffee 	b	94c24 <CUSBAudioStreamingDevice::UpdateChunkSize()+0xb4>
   94c70:	b901129f 	str	wzr, [x20, #272]
   94c74:	17ffffee 	b	94c2c <CUSBAudioStreamingDevice::UpdateChunkSize()+0xbc>
   94c78:	f00000e1 	adrp	x1, b3000 <_etext+0x2158>
   94c7c:	f00000e0 	adrp	x0, b3000 <_etext+0x2158>
   94c80:	91200021 	add	x1, x1, #0x800
   94c84:	91274000 	add	x0, x0, #0x9d0
   94c88:	528088c2 	mov	w2, #0x446                 	// #1094
   94c8c:	9400242d 	bl	9dd40 <assertion_failed>
   94c90:	f00000e1 	adrp	x1, b3000 <_etext+0x2158>
   94c94:	f00000e0 	adrp	x0, b3000 <_etext+0x2158>
   94c98:	91200021 	add	x1, x1, #0x800
   94c9c:	9127a000 	add	x0, x0, #0x9e8
   94ca0:	528088e2 	mov	w2, #0x447                 	// #1095
   94ca4:	94002427 	bl	9dd40 <assertion_failed>
   94ca8:	d503201f 	nop
   94cac:	d503201f 	nop

0000000000094cb0 <CUSBAudioStreamingDevice::Setup(unsigned int)>:
   94cb0:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
   94cb4:	910003fd 	mov	x29, sp
   94cb8:	f9401c02 	ldr	x2, [x0, #56]
   94cbc:	a90153f3 	stp	x19, x20, [sp, #16]
   94cc0:	a9025bf5 	stp	x21, x22, [sp, #32]
   94cc4:	b40012a2 	cbz	x2, 94f18 <CUSBAudioStreamingDevice::Setup(unsigned int)+0x268>
   94cc8:	aa0003f5 	mov	x21, x0
   94ccc:	2a0103f3 	mov	w19, w1
   94cd0:	b9406404 	ldr	w4, [x0, #100]
   94cd4:	34000244 	cbz	w4, 94d1c <CUSBAudioStreamingDevice::Setup(unsigned int)+0x6c>
   94cd8:	51000483 	sub	w3, w4, #0x1
   94cdc:	9101d000 	add	x0, x0, #0x74
   94ce0:	52800181 	mov	w1, #0xc                   	// #12
   94ce4:	9101fff4 	add	x20, sp, #0x7f
   94ce8:	927ae694 	and	x20, x20, #0xffffffffffffffc0
   94cec:	9101a2a2 	add	x2, x21, #0x68
   94cf0:	9ba10063 	umaddl	x3, w3, w1, x0
   94cf4:	d503201f 	nop
   94cf8:	b9400041 	ldr	w1, [x2]
   94cfc:	6b13003f 	cmp	w1, w19
   94d00:	54000083 	b.cc	94d10 <CUSBAudioStreamingDevice::Setup(unsigned int)+0x60>  // b.lo, b.ul, b.last
   94d04:	b9400441 	ldr	w1, [x2, #4]
   94d08:	6b13003f 	cmp	w1, w19
   94d0c:	54000229 	b.ls	94d50 <CUSBAudioStreamingDevice::Setup(unsigned int)+0xa0>  // b.plast
   94d10:	91003042 	add	x2, x2, #0xc
   94d14:	eb03005f 	cmp	x2, x3
   94d18:	54ffff01 	b.ne	94cf8 <CUSBAudioStreamingDevice::Setup(unsigned int)+0x48>  // b.any
   94d1c:	94002b3d 	bl	9fa10 <CLogger::Get()>
   94d20:	f00000e3 	adrp	x3, b3000 <_etext+0x2158>
   94d24:	2a1303e4 	mov	w4, w19
   94d28:	f940faa1 	ldr	x1, [x21, #496]
   94d2c:	91298063 	add	x3, x3, #0xa60
   94d30:	52800042 	mov	w2, #0x2                   	// #2
   94d34:	52800014 	mov	w20, #0x0                   	// #0
   94d38:	94002d22 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   94d3c:	2a1403e0 	mov	w0, w20
   94d40:	a94153f3 	ldp	x19, x20, [sp, #16]
   94d44:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94d48:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   94d4c:	d65f03c0 	ret
   94d50:	7100049f 	cmp	w4, #0x1
   94d54:	54000560 	b.eq	94e00 <CUSBAudioStreamingDevice::Setup(unsigned int)+0x150>  // b.none
   94d58:	3940c2a0 	ldrb	w0, [x21, #48]
   94d5c:	b9000293 	str	w19, [x20]
   94d60:	340005c0 	cbz	w0, 94e18 <CUSBAudioStreamingDevice::Setup(unsigned int)+0x168>
   94d64:	394712a0 	ldrb	w0, [x21, #452]
   94d68:	34001080 	cbz	w0, 94f78 <CUSBAudioStreamingDevice::Setup(unsigned int)+0x2c8>
   94d6c:	aa1503e0 	mov	x0, x21
   94d70:	97ffd6d0 	bl	8a8b0 <CUSBFunction::GetHost() const>
   94d74:	aa0003f6 	mov	x22, x0
   94d78:	aa1503e0 	mov	x0, x21
   94d7c:	97ffd6c1 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   94d80:	394712a5 	ldrb	w5, [x21, #452]
   94d84:	aa0003e1 	mov	x1, x0
   94d88:	aa1403e6 	mov	x6, x20
   94d8c:	aa1603e0 	mov	x0, x22
   94d90:	52800087 	mov	w7, #0x4                   	// #4
   94d94:	52802004 	mov	w4, #0x100                 	// #256
   94d98:	52800023 	mov	w3, #0x1                   	// #1
   94d9c:	52800422 	mov	w2, #0x21                  	// #33
   94da0:	53181ca5 	ubfiz	w5, w5, #8, #8
   94da4:	97ffb09b 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   94da8:	37f80c60 	tbnz	w0, #31, 94f34 <CUSBAudioStreamingDevice::Setup(unsigned int)+0x284>
   94dac:	394452b4 	ldrb	w20, [x21, #276]
   94db0:	b9010eb3 	str	w19, [x21, #268]
   94db4:	35000694 	cbnz	w20, 94e84 <CUSBAudioStreamingDevice::Setup(unsigned int)+0x1d4>
   94db8:	394132b4 	ldrb	w20, [x21, #76]
   94dbc:	35000734 	cbnz	w20, 94ea0 <CUSBAudioStreamingDevice::Setup(unsigned int)+0x1f0>
   94dc0:	f9401ea0 	ldr	x0, [x21, #56]
   94dc4:	52800034 	mov	w20, #0x1                   	// #1
   94dc8:	97ffd57e 	bl	8a3c0 <CUSBEndpoint::GetMaxPacketSize() const>
   94dcc:	2a0003f3 	mov	w19, w0
   94dd0:	f9401ea0 	ldr	x0, [x21, #56]
   94dd4:	97ffd57b 	bl	8a3c0 <CUSBEndpoint::GetMaxPacketSize() const>
   94dd8:	b9402ea2 	ldr	w2, [x21, #44]
   94ddc:	1ac20801 	udiv	w1, w0, w2
   94de0:	1b028021 	msub	w1, w1, w2, w0
   94de4:	2a1403e0 	mov	w0, w20
   94de8:	4b010273 	sub	w19, w19, w1
   94dec:	b90112b3 	str	w19, [x21, #272]
   94df0:	a94153f3 	ldp	x19, x20, [sp, #16]
   94df4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94df8:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   94dfc:	d65f03c0 	ret
   94e00:	294d02a1 	ldp	w1, w0, [x21, #104]
   94e04:	6b00003f 	cmp	w1, w0
   94e08:	54fffd20 	b.eq	94dac <CUSBAudioStreamingDevice::Setup(unsigned int)+0xfc>  // b.none
   94e0c:	3940c2a0 	ldrb	w0, [x21, #48]
   94e10:	b9000293 	str	w19, [x20]
   94e14:	35fffa80 	cbnz	w0, 94d64 <CUSBAudioStreamingDevice::Setup(unsigned int)+0xb4>
   94e18:	aa1503e0 	mov	x0, x21
   94e1c:	a90363f7 	stp	x23, x24, [sp, #48]
   94e20:	97ffd6a4 	bl	8a8b0 <CUSBFunction::GetHost() const>
   94e24:	aa0003f7 	mov	x23, x0
   94e28:	aa1503e0 	mov	x0, x21
   94e2c:	97ffd695 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   94e30:	aa0003f8 	mov	x24, x0
   94e34:	f9401ea0 	ldr	x0, [x21, #56]
   94e38:	97ffd546 	bl	8a350 <CUSBEndpoint::GetNumber() const>
   94e3c:	12001c16 	and	w22, w0, #0xff
   94e40:	f9401ea0 	ldr	x0, [x21, #56]
   94e44:	97ffd54b 	bl	8a370 <CUSBEndpoint::IsDirectionIn() const>
   94e48:	12001c05 	and	w5, w0, #0xff
   94e4c:	aa1803e1 	mov	x1, x24
   94e50:	2a051ec5 	orr	w5, w22, w5, lsl #7
   94e54:	aa1703e0 	mov	x0, x23
   94e58:	aa1403e6 	mov	x6, x20
   94e5c:	52800067 	mov	w7, #0x3                   	// #3
   94e60:	52802004 	mov	w4, #0x100                 	// #256
   94e64:	52800023 	mov	w3, #0x1                   	// #1
   94e68:	52800442 	mov	w2, #0x22                  	// #34
   94e6c:	97ffb069 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   94e70:	37f80720 	tbnz	w0, #31, 94f54 <CUSBAudioStreamingDevice::Setup(unsigned int)+0x2a4>
   94e74:	394452b4 	ldrb	w20, [x21, #276]
   94e78:	a94363f7 	ldp	x23, x24, [sp, #48]
   94e7c:	b9010eb3 	str	w19, [x21, #268]
   94e80:	34fff9d4 	cbz	w20, 94db8 <CUSBAudioStreamingDevice::Setup(unsigned int)+0x108>
   94e84:	aa1503e0 	mov	x0, x21
   94e88:	97ffff3a 	bl	94b70 <CUSBAudioStreamingDevice::UpdateChunkSize()>
   94e8c:	2a1403e0 	mov	w0, w20
   94e90:	a94153f3 	ldp	x19, x20, [sp, #16]
   94e94:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94e98:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   94e9c:	d65f03c0 	ret
   94ea0:	aa1503e0 	mov	x0, x21
   94ea4:	97ffd66b 	bl	8a850 <CUSBFunction::GetDevice() const>
   94ea8:	97ffce52 	bl	887f0 <CUSBDevice::GetSpeed() const>
   94eac:	b9404aa3 	ldr	w3, [x21, #72]
   94eb0:	7100041f 	cmp	w0, #0x1
   94eb4:	5283e800 	mov	w0, #0x1f40                	// #8000
   94eb8:	52807d01 	mov	w1, #0x3e8                 	// #1000
   94ebc:	1a800021 	csel	w1, w1, w0, eq	// eq = none
   94ec0:	b9402ea2 	ldr	w2, [x21, #44]
   94ec4:	b94052a0 	ldr	w0, [x21, #80]
   94ec8:	1ac30821 	udiv	w1, w1, w3
   94ecc:	1b027c00 	mul	w0, w0, w2
   94ed0:	1b007e73 	mul	w19, w19, w0
   94ed4:	1ac10a61 	udiv	w1, w19, w1
   94ed8:	b90112a1 	str	w1, [x21, #272]
   94edc:	b94112a1 	ldr	w1, [x21, #272]
   94ee0:	51000421 	sub	w1, w1, #0x1
   94ee4:	0b000021 	add	w1, w1, w0
   94ee8:	b90112a1 	str	w1, [x21, #272]
   94eec:	b94112a1 	ldr	w1, [x21, #272]
   94ef0:	1ac00821 	udiv	w1, w1, w0
   94ef4:	b90112a1 	str	w1, [x21, #272]
   94ef8:	b94112a1 	ldr	w1, [x21, #272]
   94efc:	1b007c20 	mul	w0, w1, w0
   94f00:	b90112a0 	str	w0, [x21, #272]
   94f04:	2a1403e0 	mov	w0, w20
   94f08:	a94153f3 	ldp	x19, x20, [sp, #16]
   94f0c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   94f10:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   94f14:	d65f03c0 	ret
   94f18:	f00000e1 	adrp	x1, b3000 <_etext+0x2158>
   94f1c:	f00000e0 	adrp	x0, b3000 <_etext+0x2158>
   94f20:	a90363f7 	stp	x23, x24, [sp, #48]
   94f24:	91200021 	add	x1, x1, #0x800
   94f28:	91280000 	add	x0, x0, #0xa00
   94f2c:	52805122 	mov	w2, #0x289                 	// #649
   94f30:	94002384 	bl	9dd40 <assertion_failed>
   94f34:	94002ab7 	bl	9fa10 <CLogger::Get()>
   94f38:	f00000e3 	adrp	x3, b3000 <_etext+0x2158>
   94f3c:	91284063 	add	x3, x3, #0xa10
   94f40:	f940faa1 	ldr	x1, [x21, #496]
   94f44:	52800082 	mov	w2, #0x4                   	// #4
   94f48:	52800014 	mov	w20, #0x0                   	// #0
   94f4c:	94002c9d 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   94f50:	17ffff7b 	b	94d3c <CUSBAudioStreamingDevice::Setup(unsigned int)+0x8c>
   94f54:	94002aaf 	bl	9fa10 <CLogger::Get()>
   94f58:	f00000e3 	adrp	x3, b3000 <_etext+0x2158>
   94f5c:	91284063 	add	x3, x3, #0xa10
   94f60:	f940faa1 	ldr	x1, [x21, #496]
   94f64:	52800082 	mov	w2, #0x4                   	// #4
   94f68:	52800014 	mov	w20, #0x0                   	// #0
   94f6c:	94002c95 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   94f70:	a94363f7 	ldp	x23, x24, [sp, #48]
   94f74:	17ffff72 	b	94d3c <CUSBAudioStreamingDevice::Setup(unsigned int)+0x8c>
   94f78:	f00000e1 	adrp	x1, b3000 <_etext+0x2158>
   94f7c:	f00000e0 	adrp	x0, b3000 <_etext+0x2158>
   94f80:	a90363f7 	stp	x23, x24, [sp, #48]
   94f84:	91200021 	add	x1, x1, #0x800
   94f88:	9128a000 	add	x0, x0, #0xa28
   94f8c:	52805682 	mov	w2, #0x2b4                 	// #692
   94f90:	9400236c 	bl	9dd40 <assertion_failed>
   94f94:	d503201f 	nop
   94f98:	d503201f 	nop
   94f9c:	d503201f 	nop

0000000000094fa0 <CUSBAudioStreamingDevice::SendChunk(void const*, unsigned int, void (*)(unsigned int, void*), void*)>:
   94fa0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   94fa4:	910003fd 	mov	x29, sp
   94fa8:	a90153f3 	stp	x19, x20, [sp, #16]
   94fac:	a9025bf5 	stp	x21, x22, [sp, #32]
   94fb0:	a90363f7 	stp	x23, x24, [sp, #48]
   94fb4:	b4000e41 	cbz	x1, 9517c <CUSBAudioStreamingDevice::SendChunk(void const*, unsigned int, void (*)(unsigned int, void*), void*)+0x1dc>
   94fb8:	aa0003f4 	mov	x20, x0
   94fbc:	f9401c00 	ldr	x0, [x0, #56]
   94fc0:	b4000ea0 	cbz	x0, 95194 <CUSBAudioStreamingDevice::SendChunk(void const*, unsigned int, void (*)(unsigned int, void*), void*)+0x1f4>
   94fc4:	d2801200 	mov	x0, #0x90                  	// #144
   94fc8:	aa0103f3 	mov	x19, x1
   94fcc:	2a0203f5 	mov	w21, w2
   94fd0:	aa0303f8 	mov	x24, x3
   94fd4:	aa0403f7 	mov	x23, x4
   94fd8:	97ffb39a 	bl	81e40 <CUSBRequest::operator new(unsigned long)>
   94fdc:	aa1303e2 	mov	x2, x19
   94fe0:	d2800004 	mov	x4, #0x0                   	// #0
   94fe4:	f9401e81 	ldr	x1, [x20, #56]
   94fe8:	2a1503e3 	mov	w3, w21
   94fec:	aa0003f6 	mov	x22, x0
   94ff0:	97ffb2ac 	bl	81aa0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   94ff4:	39445280 	ldrb	w0, [x20, #276]
   94ff8:	34000500 	cbz	w0, 95098 <CUSBAudioStreamingDevice::SendChunk(void const*, unsigned int, void (*)(unsigned int, void*), void*)+0xf8>
   94ffc:	b9411a80 	ldr	w0, [x20, #280]
   95000:	d2800013 	mov	x19, #0x0                   	// #0
   95004:	91047295 	add	x21, x20, #0x11c
   95008:	34000ae0 	cbz	w0, 95164 <CUSBAudioStreamingDevice::SendChunk(void const*, unsigned int, void (*)(unsigned int, void*), void*)+0x1c4>
   9500c:	d503201f 	nop
   95010:	78737aa1 	ldrh	w1, [x21, x19, lsl #1]
   95014:	aa1603e0 	mov	x0, x22
   95018:	91000673 	add	x19, x19, #0x1
   9501c:	97ffb325 	bl	81cb0 <CUSBRequest::AddIsoPacket(unsigned short)>
   95020:	b9411a85 	ldr	w5, [x20, #280]
   95024:	6b1300bf 	cmp	w5, w19
   95028:	54ffff48 	b.hi	95010 <CUSBAudioStreamingDevice::SendChunk(void const*, unsigned int, void (*)(unsigned int, void*), void*)+0x70>  // b.pmore
   9502c:	f0ffffe1 	adrp	x1, 94000 <CUSBAudioControlDevice::Configure()>
   95030:	aa1803e3 	mov	x3, x24
   95034:	aa1703e2 	mov	x2, x23
   95038:	91060021 	add	x1, x1, #0x180
   9503c:	aa1603e0 	mov	x0, x22
   95040:	97ffb35c 	bl	81db0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   95044:	aa1403e0 	mov	x0, x20
   95048:	97ffd61a 	bl	8a8b0 <CUSBFunction::GetHost() const>
   9504c:	f9400003 	ldr	x3, [x0]
   95050:	aa1603e1 	mov	x1, x22
   95054:	52800002 	mov	w2, #0x0                   	// #0
   95058:	f9401463 	ldr	x3, [x3, #40]
   9505c:	d63f0060 	blr	x3
   95060:	72001c00 	ands	w0, w0, #0xff
   95064:	54000100 	b.eq	95084 <CUSBAudioStreamingDevice::SendChunk(void const*, unsigned int, void (*)(unsigned int, void*), void*)+0xe4>  // b.none
   95068:	f9402281 	ldr	x1, [x20, #64]
   9506c:	b4000081 	cbz	x1, 9507c <CUSBAudioStreamingDevice::SendChunk(void const*, unsigned int, void (*)(unsigned int, void*), void*)+0xdc>
   95070:	39457281 	ldrb	w1, [x20, #348]
   95074:	72001c3f 	tst	w1, #0xff
   95078:	54000280 	b.eq	950c8 <CUSBAudioStreamingDevice::SendChunk(void const*, unsigned int, void (*)(unsigned int, void*), void*)+0x128>  // b.none
   9507c:	39445293 	ldrb	w19, [x20, #276]
   95080:	35000153 	cbnz	w19, 950a8 <CUSBAudioStreamingDevice::SendChunk(void const*, unsigned int, void (*)(unsigned int, void*), void*)+0x108>
   95084:	a94153f3 	ldp	x19, x20, [sp, #16]
   95088:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9508c:	a94363f7 	ldp	x23, x24, [sp, #48]
   95090:	a8c47bfd 	ldp	x29, x30, [sp], #64
   95094:	d65f03c0 	ret
   95098:	2a1503e1 	mov	w1, w21
   9509c:	aa1603e0 	mov	x0, x22
   950a0:	97ffb304 	bl	81cb0 <CUSBRequest::AddIsoPacket(unsigned short)>
   950a4:	17ffffe2 	b	9502c <CUSBAudioStreamingDevice::SendChunk(void const*, unsigned int, void (*)(unsigned int, void*), void*)+0x8c>
   950a8:	aa1403e0 	mov	x0, x20
   950ac:	97fffeb1 	bl	94b70 <CUSBAudioStreamingDevice::UpdateChunkSize()>
   950b0:	2a1303e0 	mov	w0, w19
   950b4:	a94153f3 	ldp	x19, x20, [sp, #16]
   950b8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   950bc:	a94363f7 	ldp	x23, x24, [sp, #48]
   950c0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   950c4:	d65f03c0 	ret
   950c8:	52800021 	mov	w1, #0x1                   	// #1
   950cc:	aa1403e0 	mov	x0, x20
   950d0:	39057281 	strb	w1, [x20, #348]
   950d4:	97ffd5df 	bl	8a850 <CUSBFunction::GetDevice() const>
   950d8:	97ffcdc6 	bl	887f0 <CUSBDevice::GetSpeed() const>
   950dc:	f9402281 	ldr	x1, [x20, #64]
   950e0:	7100041f 	cmp	w0, #0x1
   950e4:	1a9f07f5 	cset	w21, ne	// ne = any
   950e8:	11000eb5 	add	w21, w21, #0x3
   950ec:	b4000601 	cbz	x1, 951ac <CUSBAudioStreamingDevice::SendChunk(void const*, unsigned int, void (*)(unsigned int, void*), void*)+0x20c>
   950f0:	d2801200 	mov	x0, #0x90                  	// #144
   950f4:	97ffb353 	bl	81e40 <CUSBRequest::operator new(unsigned long)>
   950f8:	f9402281 	ldr	x1, [x20, #64]
   950fc:	d2800004 	mov	x4, #0x0                   	// #0
   95100:	2a1503e3 	mov	w3, w21
   95104:	91060282 	add	x2, x20, #0x180
   95108:	aa0003f3 	mov	x19, x0
   9510c:	97ffb265 	bl	81aa0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   95110:	2a1503e1 	mov	w1, w21
   95114:	aa1303e0 	mov	x0, x19
   95118:	97ffb2e6 	bl	81cb0 <CUSBRequest::AddIsoPacket(unsigned short)>
   9511c:	f0ffffe1 	adrp	x1, 94000 <CUSBAudioControlDevice::Configure()>
   95120:	aa1403e3 	mov	x3, x20
   95124:	aa1303e0 	mov	x0, x19
   95128:	9108c021 	add	x1, x1, #0x230
   9512c:	d2800002 	mov	x2, #0x0                   	// #0
   95130:	97ffb320 	bl	81db0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   95134:	aa1403e0 	mov	x0, x20
   95138:	97ffd5de 	bl	8a8b0 <CUSBFunction::GetHost() const>
   9513c:	f9400003 	ldr	x3, [x0]
   95140:	aa1303e1 	mov	x1, x19
   95144:	52800002 	mov	w2, #0x0                   	// #0
   95148:	a94153f3 	ldp	x19, x20, [sp, #16]
   9514c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   95150:	a94363f7 	ldp	x23, x24, [sp, #48]
   95154:	a8c47bfd 	ldp	x29, x30, [sp], #64
   95158:	f9401463 	ldr	x3, [x3, #40]
   9515c:	aa0303f0 	mov	x16, x3
   95160:	d61f0200 	br	x16
   95164:	d00000e1 	adrp	x1, b3000 <_etext+0x2158>
   95168:	d00000e0 	adrp	x0, b3000 <_etext+0x2158>
   9516c:	91200021 	add	x1, x1, #0x800
   95170:	912a4000 	add	x0, x0, #0xa90
   95174:	52805e62 	mov	w2, #0x2f3                 	// #755
   95178:	940022f2 	bl	9dd40 <assertion_failed>
   9517c:	d00000e1 	adrp	x1, b3000 <_etext+0x2158>
   95180:	d00000e0 	adrp	x0, b3000 <_etext+0x2158>
   95184:	91200021 	add	x1, x1, #0x800
   95188:	912a2000 	add	x0, x0, #0xa88
   9518c:	52805d62 	mov	w2, #0x2eb                 	// #747
   95190:	940022ec 	bl	9dd40 <assertion_failed>
   95194:	d00000e1 	adrp	x1, b3000 <_etext+0x2158>
   95198:	d00000e0 	adrp	x0, b3000 <_etext+0x2158>
   9519c:	91200021 	add	x1, x1, #0x800
   951a0:	91280000 	add	x0, x0, #0xa00
   951a4:	52805da2 	mov	w2, #0x2ed                 	// #749
   951a8:	940022e6 	bl	9dd40 <assertion_failed>
   951ac:	d00000e1 	adrp	x1, b3000 <_etext+0x2158>
   951b0:	d00000e0 	adrp	x0, b3000 <_etext+0x2158>
   951b4:	91200021 	add	x1, x1, #0x800
   951b8:	912aa000 	add	x0, x0, #0xaa8
   951bc:	52806142 	mov	w2, #0x30a                 	// #778
   951c0:	940022e0 	bl	9dd40 <assertion_failed>
   951c4:	d503201f 	nop
   951c8:	d503201f 	nop
   951cc:	d503201f 	nop

00000000000951d0 <CUSBAudioStreamingDevice::ReceiveChunk(void*, unsigned int, void (*)(unsigned int, void*), void*)>:
   951d0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   951d4:	910003fd 	mov	x29, sp
   951d8:	a90153f3 	stp	x19, x20, [sp, #16]
   951dc:	a9025bf5 	stp	x21, x22, [sp, #32]
   951e0:	a90363f7 	stp	x23, x24, [sp, #48]
   951e4:	b4000881 	cbz	x1, 952f4 <CUSBAudioStreamingDevice::ReceiveChunk(void*, unsigned int, void (*)(unsigned int, void*), void*)+0x124>
   951e8:	aa0003f4 	mov	x20, x0
   951ec:	f9401c00 	ldr	x0, [x0, #56]
   951f0:	b40008e0 	cbz	x0, 9530c <CUSBAudioStreamingDevice::ReceiveChunk(void*, unsigned int, void (*)(unsigned int, void*), void*)+0x13c>
   951f4:	d2801200 	mov	x0, #0x90                  	// #144
   951f8:	aa0103f3 	mov	x19, x1
   951fc:	2a0203f5 	mov	w21, w2
   95200:	aa0303f8 	mov	x24, x3
   95204:	aa0403f7 	mov	x23, x4
   95208:	97ffb30e 	bl	81e40 <CUSBRequest::operator new(unsigned long)>
   9520c:	aa1303e2 	mov	x2, x19
   95210:	d2800004 	mov	x4, #0x0                   	// #0
   95214:	f9401e81 	ldr	x1, [x20, #56]
   95218:	2a1503e3 	mov	w3, w21
   9521c:	aa0003f6 	mov	x22, x0
   95220:	97ffb220 	bl	81aa0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   95224:	f9402280 	ldr	x0, [x20, #64]
   95228:	b50007e0 	cbnz	x0, 95324 <CUSBAudioStreamingDevice::ReceiveChunk(void*, unsigned int, void (*)(unsigned int, void*), void*)+0x154>
   9522c:	39445280 	ldrb	w0, [x20, #276]
   95230:	340004a0 	cbz	w0, 952c4 <CUSBAudioStreamingDevice::ReceiveChunk(void*, unsigned int, void (*)(unsigned int, void*), void*)+0xf4>
   95234:	b9411a80 	ldr	w0, [x20, #280]
   95238:	d2800013 	mov	x19, #0x0                   	// #0
   9523c:	91047295 	add	x21, x20, #0x11c
   95240:	340007e0 	cbz	w0, 9533c <CUSBAudioStreamingDevice::ReceiveChunk(void*, unsigned int, void (*)(unsigned int, void*), void*)+0x16c>
   95244:	d503201f 	nop
   95248:	78737aa1 	ldrh	w1, [x21, x19, lsl #1]
   9524c:	aa1603e0 	mov	x0, x22
   95250:	91000673 	add	x19, x19, #0x1
   95254:	97ffb297 	bl	81cb0 <CUSBRequest::AddIsoPacket(unsigned short)>
   95258:	b9411a85 	ldr	w5, [x20, #280]
   9525c:	6b1300bf 	cmp	w5, w19
   95260:	54ffff48 	b.hi	95248 <CUSBAudioStreamingDevice::ReceiveChunk(void*, unsigned int, void (*)(unsigned int, void*), void*)+0x78>  // b.pmore
   95264:	f0ffffe1 	adrp	x1, 94000 <CUSBAudioControlDevice::Configure()>
   95268:	aa1803e3 	mov	x3, x24
   9526c:	aa1703e2 	mov	x2, x23
   95270:	91060021 	add	x1, x1, #0x180
   95274:	aa1603e0 	mov	x0, x22
   95278:	97ffb2ce 	bl	81db0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   9527c:	aa1403e0 	mov	x0, x20
   95280:	97ffd58c 	bl	8a8b0 <CUSBFunction::GetHost() const>
   95284:	f9400003 	ldr	x3, [x0]
   95288:	aa1603e1 	mov	x1, x22
   9528c:	52800002 	mov	w2, #0x0                   	// #0
   95290:	f9401463 	ldr	x3, [x3, #40]
   95294:	d63f0060 	blr	x3
   95298:	72001c1f 	tst	w0, #0xff
   9529c:	2a0003f3 	mov	w19, w0
   952a0:	54000060 	b.eq	952ac <CUSBAudioStreamingDevice::ReceiveChunk(void*, unsigned int, void (*)(unsigned int, void*), void*)+0xdc>  // b.none
   952a4:	39445280 	ldrb	w0, [x20, #276]
   952a8:	35000160 	cbnz	w0, 952d4 <CUSBAudioStreamingDevice::ReceiveChunk(void*, unsigned int, void (*)(unsigned int, void*), void*)+0x104>
   952ac:	2a1303e0 	mov	w0, w19
   952b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   952b4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   952b8:	a94363f7 	ldp	x23, x24, [sp, #48]
   952bc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   952c0:	d65f03c0 	ret
   952c4:	2a1503e1 	mov	w1, w21
   952c8:	aa1603e0 	mov	x0, x22
   952cc:	97ffb279 	bl	81cb0 <CUSBRequest::AddIsoPacket(unsigned short)>
   952d0:	17ffffe5 	b	95264 <CUSBAudioStreamingDevice::ReceiveChunk(void*, unsigned int, void (*)(unsigned int, void*), void*)+0x94>
   952d4:	aa1403e0 	mov	x0, x20
   952d8:	97fffe26 	bl	94b70 <CUSBAudioStreamingDevice::UpdateChunkSize()>
   952dc:	2a1303e0 	mov	w0, w19
   952e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   952e4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   952e8:	a94363f7 	ldp	x23, x24, [sp, #48]
   952ec:	a8c47bfd 	ldp	x29, x30, [sp], #64
   952f0:	d65f03c0 	ret
   952f4:	d00000e1 	adrp	x1, b3000 <_etext+0x2158>
   952f8:	d00000e0 	adrp	x0, b3000 <_etext+0x2158>
   952fc:	91200021 	add	x1, x1, #0x800
   95300:	912a2000 	add	x0, x0, #0xa88
   95304:	52806422 	mov	w2, #0x321                 	// #801
   95308:	9400228e 	bl	9dd40 <assertion_failed>
   9530c:	d00000e1 	adrp	x1, b3000 <_etext+0x2158>
   95310:	d00000e0 	adrp	x0, b3000 <_etext+0x2158>
   95314:	91200021 	add	x1, x1, #0x800
   95318:	91280000 	add	x0, x0, #0xa00
   9531c:	52806462 	mov	w2, #0x323                 	// #803
   95320:	94002288 	bl	9dd40 <assertion_failed>
   95324:	d00000e1 	adrp	x1, b3000 <_etext+0x2158>
   95328:	d00000e0 	adrp	x0, b3000 <_etext+0x2158>
   9532c:	91200021 	add	x1, x1, #0x800
   95330:	912ae000 	add	x0, x0, #0xab8
   95334:	528064e2 	mov	w2, #0x327                 	// #807
   95338:	94002282 	bl	9dd40 <assertion_failed>
   9533c:	d00000e1 	adrp	x1, b3000 <_etext+0x2158>
   95340:	d00000e0 	adrp	x0, b3000 <_etext+0x2158>
   95344:	91200021 	add	x1, x1, #0x800
   95348:	912a4000 	add	x0, x0, #0xa90
   9534c:	52806542 	mov	w2, #0x32a                 	// #810
   95350:	9400227c 	bl	9dd40 <assertion_failed>
   95354:	d503201f 	nop
   95358:	d503201f 	nop
   9535c:	d503201f 	nop

0000000000095360 <CUSBAudioStreamingDevice::~CUSBAudioStreamingDevice()>:
   95360:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   95364:	910003fd 	mov	x29, sp
   95368:	d0000101 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9536c:	91110021 	add	x1, x1, #0x440
   95370:	a90153f3 	stp	x19, x20, [sp, #16]
   95374:	aa0003f3 	mov	x19, x0
   95378:	91074014 	add	x20, x0, #0x1d0
   9537c:	aa1403e0 	mov	x0, x20
   95380:	f90013f5 	str	x21, [sp, #32]
   95384:	f9000261 	str	x1, [x19]
   95388:	94003d4a 	bl	a48b0 <CString::GetLength() const>
   9538c:	b5000300 	cbnz	x0, 953ec <CUSBAudioStreamingDevice::~CUSBAudioStreamingDevice()+0x8c>
   95390:	f9402275 	ldr	x21, [x19, #64]
   95394:	b40000d5 	cbz	x21, 953ac <CUSBAudioStreamingDevice::~CUSBAudioStreamingDevice()+0x4c>
   95398:	aa1503e0 	mov	x0, x21
   9539c:	97ffd3d1 	bl	8a2e0 <CUSBEndpoint::~CUSBEndpoint()>
   953a0:	aa1503e0 	mov	x0, x21
   953a4:	d2800401 	mov	x1, #0x20                  	// #32
   953a8:	94004bd6 	bl	a8300 <operator delete(void*, unsigned long)>
   953ac:	f900227f 	str	xzr, [x19, #64]
   953b0:	f9401e75 	ldr	x21, [x19, #56]
   953b4:	b40000d5 	cbz	x21, 953cc <CUSBAudioStreamingDevice::~CUSBAudioStreamingDevice()+0x6c>
   953b8:	aa1503e0 	mov	x0, x21
   953bc:	97ffd3c9 	bl	8a2e0 <CUSBEndpoint::~CUSBEndpoint()>
   953c0:	aa1503e0 	mov	x0, x21
   953c4:	d2800401 	mov	x1, #0x20                  	// #32
   953c8:	94004bce 	bl	a8300 <operator delete(void*, unsigned long)>
   953cc:	aa1403e0 	mov	x0, x20
   953d0:	f9001e7f 	str	xzr, [x19, #56]
   953d4:	94003c63 	bl	a4560 <CString::~CString()>
   953d8:	aa1303e0 	mov	x0, x19
   953dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   953e0:	f94013f5 	ldr	x21, [sp, #32]
   953e4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   953e8:	17ffd412 	b	8a430 <CUSBFunction::~CUSBFunction()>
   953ec:	94002639 	bl	9ecd0 <CDeviceNameService::Get()>
   953f0:	aa0003f5 	mov	x21, x0
   953f4:	aa1403e0 	mov	x0, x20
   953f8:	94003cda 	bl	a4760 <CString::operator char const*() const>
   953fc:	aa0003e1 	mov	x1, x0
   95400:	52800002 	mov	w2, #0x0                   	// #0
   95404:	aa1503e0 	mov	x0, x21
   95408:	9400257e 	bl	9ea00 <CDeviceNameService::RemoveDevice(char const*, bool)>
   9540c:	17ffffe1 	b	95390 <CUSBAudioStreamingDevice::~CUSBAudioStreamingDevice()+0x30>

0000000000095410 <CUSBAudioStreamingDevice::~CUSBAudioStreamingDevice()>:
   95410:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   95414:	910003fd 	mov	x29, sp
   95418:	f9000bf3 	str	x19, [sp, #16]
   9541c:	aa0003f3 	mov	x19, x0
   95420:	97ffffd0 	bl	95360 <CUSBAudioStreamingDevice::~CUSBAudioStreamingDevice()>
   95424:	aa1303e0 	mov	x0, x19
   95428:	d2804001 	mov	x1, #0x200                 	// #512
   9542c:	f9400bf3 	ldr	x19, [sp, #16]
   95430:	a8c27bfd 	ldp	x29, x30, [sp], #32
   95434:	14004bb3 	b	a8300 <operator delete(void*, unsigned long)>
   95438:	d503201f 	nop
   9543c:	d503201f 	nop

0000000000095440 <CUSBAudioStreamingDevice::Initialize()>:
   95440:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   95444:	910003fd 	mov	x29, sp
   95448:	a90153f3 	stp	x19, x20, [sp, #16]
   9544c:	aa0003f4 	mov	x20, x0
   95450:	97ffd3f0 	bl	8a410 <CUSBFunction::Initialize()>
   95454:	72001c13 	ands	w19, w0, #0xff
   95458:	540000c1 	b.ne	95470 <CUSBAudioStreamingDevice::Initialize()+0x30>  // b.any
   9545c:	52800013 	mov	w19, #0x0                   	// #0
   95460:	2a1303e0 	mov	w0, w19
   95464:	a94153f3 	ldp	x19, x20, [sp, #16]
   95468:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9546c:	d65f03c0 	ret
   95470:	aa1403e0 	mov	x0, x20
   95474:	97ffd4eb 	bl	8a820 <CUSBFunction::GetNumEndpoints() const>
   95478:	72001c1f 	tst	w0, #0xff
   9547c:	54ffff00 	b.eq	9545c <CUSBAudioStreamingDevice::Initialize()+0x1c>  // b.none
   95480:	aa1403e0 	mov	x0, x20
   95484:	a9025bf5 	stp	x21, x22, [sp, #32]
   95488:	97ffd5a6 	bl	8ab20 <CUSBFunction::GetInterfaceDescriptor() const>
   9548c:	39400001 	ldrb	w1, [x0]
   95490:	8b010015 	add	x21, x0, x1
   95494:	394006a2 	ldrb	w2, [x21, #1]
   95498:	7100905f 	cmp	w2, #0x24
   9549c:	54000301 	b.ne	954fc <CUSBAudioStreamingDevice::Initialize()+0xbc>  // b.any
   954a0:	39400aa2 	ldrb	w2, [x21, #2]
   954a4:	7100045f 	cmp	w2, #0x1
   954a8:	540002a1 	b.ne	954fc <CUSBAudioStreamingDevice::Initialize()+0xbc>  // b.any
   954ac:	38616800 	ldrb	w0, [x0, x1]
   954b0:	8b0002b6 	add	x22, x21, x0
   954b4:	394006c1 	ldrb	w1, [x22, #1]
   954b8:	7100903f 	cmp	w1, #0x24
   954bc:	54000201 	b.ne	954fc <CUSBAudioStreamingDevice::Initialize()+0xbc>  // b.any
   954c0:	39400ac1 	ldrb	w1, [x22, #2]
   954c4:	7100083f 	cmp	w1, #0x2
   954c8:	540001a1 	b.ne	954fc <CUSBAudioStreamingDevice::Initialize()+0xbc>  // b.any
   954cc:	39400ec1 	ldrb	w1, [x22, #3]
   954d0:	7100043f 	cmp	w1, #0x1
   954d4:	54000141 	b.ne	954fc <CUSBAudioStreamingDevice::Initialize()+0xbc>  // b.any
   954d8:	f9001bf7 	str	x23, [sp, #48]
   954dc:	38606ab7 	ldrb	w23, [x21, x0]
   954e0:	8b1702d7 	add	x23, x22, x23
   954e4:	394006e0 	ldrb	w0, [x23, #1]
   954e8:	7100141f 	cmp	w0, #0x5
   954ec:	540000c0 	b.eq	95504 <CUSBAudioStreamingDevice::Initialize()+0xc4>  // b.none
   954f0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   954f4:	f9401bf7 	ldr	x23, [sp, #48]
   954f8:	17ffffd9 	b	9545c <CUSBAudioStreamingDevice::Initialize()+0x1c>
   954fc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   95500:	17ffffd7 	b	9545c <CUSBAudioStreamingDevice::Initialize()+0x1c>
   95504:	9400272b 	bl	9f1b0 <CKernelOptions::Get()>
   95508:	940026ea 	bl	9f0b0 <CKernelOptions::GetUSBSoundChannels() const>
   9550c:	aa0003e1 	mov	x1, x0
   95510:	b4000800 	cbz	x0, 95610 <CUSBAudioStreamingDevice::Initialize()+0x1d0>
   95514:	39c00ae3 	ldrsb	w3, [x23, #2]
   95518:	91001022 	add	x2, x1, #0x4
   9551c:	aa1403e0 	mov	x0, x20
   95520:	7100007f 	cmp	w3, #0x0
   95524:	9a81b041 	csel	x1, x2, x1, lt	// lt = tstop
   95528:	b9400037 	ldr	w23, [x1]
   9552c:	97ffd571 	bl	8aaf0 <CUSBFunction::GetInterfaceProtocol() const>
   95530:	12001c00 	and	w0, w0, #0xff
   95534:	7100801f 	cmp	w0, #0x20
   95538:	540003a0 	b.eq	955ac <CUSBAudioStreamingDevice::Initialize()+0x16c>  // b.none
   9553c:	34000097 	cbz	w23, 9554c <CUSBAudioStreamingDevice::Initialize()+0x10c>
   95540:	394012c0 	ldrb	w0, [x22, #4]
   95544:	6b17001f 	cmp	w0, w23
   95548:	54000181 	b.ne	95578 <CUSBAudioStreamingDevice::Initialize()+0x138>  // b.any
   9554c:	394016c1 	ldrb	w1, [x22, #5]
   95550:	b9402e80 	ldr	w0, [x20, #44]
   95554:	6b00003f 	cmp	w1, w0
   95558:	54000101 	b.ne	95578 <CUSBAudioStreamingDevice::Initialize()+0x138>  // b.any
   9555c:	39401ac1 	ldrb	w1, [x22, #6]
   95560:	b9402a80 	ldr	w0, [x20, #40]
   95564:	6b00003f 	cmp	w1, w0
   95568:	54000081 	b.ne	95578 <CUSBAudioStreamingDevice::Initialize()+0x138>  // b.any
   9556c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   95570:	f9401bf7 	ldr	x23, [sp, #48]
   95574:	17ffffbb 	b	95460 <CUSBAudioStreamingDevice::Initialize()+0x20>
   95578:	94002926 	bl	9fa10 <CLogger::Get()>
   9557c:	d00000e3 	adrp	x3, b3000 <_etext+0x2158>
   95580:	394016c6 	ldrb	w6, [x22, #5]
   95584:	52800082 	mov	w2, #0x4                   	// #4
   95588:	912b8063 	add	x3, x3, #0xae0
   9558c:	52800013 	mov	w19, #0x0                   	// #0
   95590:	39401ac5 	ldrb	w5, [x22, #6]
   95594:	394012c4 	ldrb	w4, [x22, #4]
   95598:	f940fa81 	ldr	x1, [x20, #496]
   9559c:	94002b09 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   955a0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   955a4:	f9401bf7 	ldr	x23, [sp, #48]
   955a8:	17ffffae 	b	95460 <CUSBAudioStreamingDevice::Initialize()+0x20>
   955ac:	34000097 	cbz	w23, 955bc <CUSBAudioStreamingDevice::Initialize()+0x17c>
   955b0:	39402aa0 	ldrb	w0, [x21, #10]
   955b4:	6b17001f 	cmp	w0, w23
   955b8:	54000121 	b.ne	955dc <CUSBAudioStreamingDevice::Initialize()+0x19c>  // b.any
   955bc:	394012c1 	ldrb	w1, [x22, #4]
   955c0:	b9402e80 	ldr	w0, [x20, #44]
   955c4:	6b00003f 	cmp	w1, w0
   955c8:	540000a1 	b.ne	955dc <CUSBAudioStreamingDevice::Initialize()+0x19c>  // b.any
   955cc:	394016c1 	ldrb	w1, [x22, #5]
   955d0:	b9402a80 	ldr	w0, [x20, #40]
   955d4:	6b00003f 	cmp	w1, w0
   955d8:	54fffca0 	b.eq	9556c <CUSBAudioStreamingDevice::Initialize()+0x12c>  // b.none
   955dc:	9400290d 	bl	9fa10 <CLogger::Get()>
   955e0:	d00000e3 	adrp	x3, b3000 <_etext+0x2158>
   955e4:	39402aa4 	ldrb	w4, [x21, #10]
   955e8:	52800082 	mov	w2, #0x4                   	// #4
   955ec:	912b8063 	add	x3, x3, #0xae0
   955f0:	52800013 	mov	w19, #0x0                   	// #0
   955f4:	394012c6 	ldrb	w6, [x22, #4]
   955f8:	394016c5 	ldrb	w5, [x22, #5]
   955fc:	f940fa81 	ldr	x1, [x20, #496]
   95600:	94002af0 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   95604:	a9425bf5 	ldp	x21, x22, [sp, #32]
   95608:	f9401bf7 	ldr	x23, [sp, #48]
   9560c:	17ffff95 	b	95460 <CUSBAudioStreamingDevice::Initialize()+0x20>
   95610:	d00000e1 	adrp	x1, b3000 <_etext+0x2158>
   95614:	d00000e0 	adrp	x0, b3000 <_etext+0x2158>
   95618:	91200021 	add	x1, x1, #0x800
   9561c:	912b4000 	add	x0, x0, #0xad0
   95620:	52801a22 	mov	w2, #0xd1                  	// #209
   95624:	940021c7 	bl	9dd40 <assertion_failed>
   95628:	d503201f 	nop
   9562c:	d503201f 	nop

0000000000095630 <CUSBAudioStreamingDevice::Configure()>:
   95630:	a9ad7bfd 	stp	x29, x30, [sp, #-304]!
   95634:	910003fd 	mov	x29, sp
   95638:	9103ffa1 	add	x1, x29, #0xff
   9563c:	a90153f3 	stp	x19, x20, [sp, #16]
   95640:	aa0003f4 	mov	x20, x0
   95644:	a9025bf5 	stp	x21, x22, [sp, #32]
   95648:	927ae436 	and	x22, x1, #0xffffffffffffffc0
   9564c:	a90363f7 	stp	x23, x24, [sp, #48]
   95650:	a9046bf9 	stp	x25, x26, [sp, #64]
   95654:	f9002bfb 	str	x27, [sp, #80]
   95658:	97ffd472 	bl	8a820 <CUSBFunction::GetNumEndpoints() const>
   9565c:	72001c1f 	tst	w0, #0xff
   95660:	54002120 	b.eq	95a84 <CUSBAudioStreamingDevice::Configure()+0x454>  // b.none
   95664:	aa1403e0 	mov	x0, x20
   95668:	97ffd522 	bl	8aaf0 <CUSBFunction::GetInterfaceProtocol() const>
   9566c:	12001c00 	and	w0, w0, #0xff
   95670:	7100801f 	cmp	w0, #0x20
   95674:	1a9f17e0 	cset	w0, eq	// eq = none
   95678:	3900c280 	strb	w0, [x20, #48]
   9567c:	14000004 	b	9568c <CUSBAudioStreamingDevice::Configure()+0x5c>
   95680:	39400a60 	ldrb	w0, [x19, #2]
   95684:	7100041f 	cmp	w0, #0x1
   95688:	540001c0 	b.eq	956c0 <CUSBAudioStreamingDevice::Configure()+0x90>  // b.none
   9568c:	52800481 	mov	w1, #0x24                  	// #36
   95690:	aa1403e0 	mov	x0, x20
   95694:	97ffd493 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   95698:	aa0003f3 	mov	x19, x0
   9569c:	b5ffff20 	cbnz	x0, 95680 <CUSBAudioStreamingDevice::Configure()+0x50>
   956a0:	940028dc 	bl	9fa10 <CLogger::Get()>
   956a4:	d00000e3 	adrp	x3, b3000 <_etext+0x2158>
   956a8:	91376063 	add	x3, x3, #0xdd8
   956ac:	f940fa81 	ldr	x1, [x20, #496]
   956b0:	52800042 	mov	w2, #0x2                   	// #2
   956b4:	52800017 	mov	w23, #0x0                   	// #0
   956b8:	94002ac2 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   956bc:	14000010 	b	956fc <CUSBAudioStreamingDevice::Configure()+0xcc>
   956c0:	52800481 	mov	w1, #0x24                  	// #36
   956c4:	aa1403e0 	mov	x0, x20
   956c8:	97ffd486 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   956cc:	aa0003f5 	mov	x21, x0
   956d0:	b4000080 	cbz	x0, 956e0 <CUSBAudioStreamingDevice::Configure()+0xb0>
   956d4:	39400aa0 	ldrb	w0, [x21, #2]
   956d8:	7100081f 	cmp	w0, #0x2
   956dc:	54000220 	b.eq	95720 <CUSBAudioStreamingDevice::Configure()+0xf0>  // b.none
   956e0:	940028cc 	bl	9fa10 <CLogger::Get()>
   956e4:	d00000e3 	adrp	x3, b3000 <_etext+0x2158>
   956e8:	912ce063 	add	x3, x3, #0xb38
   956ec:	f940fa81 	ldr	x1, [x20, #496]
   956f0:	52800042 	mov	w2, #0x2                   	// #2
   956f4:	52800017 	mov	w23, #0x0                   	// #0
   956f8:	94002ab2 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   956fc:	910003bf 	mov	sp, x29
   95700:	2a1703e0 	mov	w0, w23
   95704:	a94153f3 	ldp	x19, x20, [sp, #16]
   95708:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9570c:	a94363f7 	ldp	x23, x24, [sp, #48]
   95710:	a9446bf9 	ldp	x25, x26, [sp, #64]
   95714:	f9402bfb 	ldr	x27, [sp, #80]
   95718:	a8d37bfd 	ldp	x29, x30, [sp], #304
   9571c:	d65f03c0 	ret
   95720:	528000a1 	mov	w1, #0x5                   	// #5
   95724:	aa1403e0 	mov	x0, x20
   95728:	97ffd46e 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   9572c:	aa0003f8 	mov	x24, x0
   95730:	b40019a0 	cbz	x0, 95a64 <CUSBAudioStreamingDevice::Configure()+0x434>
   95734:	39400c01 	ldrb	w1, [x0, #3]
   95738:	52800660 	mov	w0, #0x33                  	// #51
   9573c:	0a010000 	and	w0, w0, w1
   95740:	7100041f 	cmp	w0, #0x1
   95744:	54001901 	b.ne	95a64 <CUSBAudioStreamingDevice::Configure()+0x434>  // b.any
   95748:	39c00b01 	ldrsb	w1, [x24, #2]
   9574c:	3940c297 	ldrb	w23, [x20, #48]
   95750:	2a2103e0 	mvn	w0, w1
   95754:	531f7c00 	lsr	w0, w0, #31
   95758:	39013280 	strb	w0, [x20, #76]
   9575c:	39400ea0 	ldrb	w0, [x21, #3]
   95760:	7100041f 	cmp	w0, #0x1
   95764:	340019d7 	cbz	w23, 95a9c <CUSBAudioStreamingDevice::Configure()+0x46c>
   95768:	54001c61 	b.ne	95af4 <CUSBAudioStreamingDevice::Configure()+0x4c4>  // b.any
   9576c:	394012a2 	ldrb	w2, [x21, #4]
   95770:	b9402e80 	ldr	w0, [x20, #44]
   95774:	6b00005f 	cmp	w2, w0
   95778:	54001be1 	b.ne	95af4 <CUSBAudioStreamingDevice::Configure()+0x4c4>  // b.any
   9577c:	394016a2 	ldrb	w2, [x21, #5]
   95780:	b9402a80 	ldr	w0, [x20, #40]
   95784:	6b00005f 	cmp	w2, w0
   95788:	54001b61 	b.ne	95af4 <CUSBAudioStreamingDevice::Configure()+0x4c4>  // b.any
   9578c:	39402a60 	ldrb	w0, [x19, #10]
   95790:	34001b20 	cbz	w0, 95af4 <CUSBAudioStreamingDevice::Configure()+0x4c4>
   95794:	b9005280 	str	w0, [x20, #80]
   95798:	37f81ec1 	tbnz	w1, #31, 95b70 <CUSBAudioStreamingDevice::Configure()+0x540>
   9579c:	7100041f 	cmp	w0, #0x1
   957a0:	54002220 	b.eq	95be4 <CUSBAudioStreamingDevice::Configure()+0x5b4>  // b.none
   957a4:	39400f00 	ldrb	w0, [x24, #3]
   957a8:	121e0400 	and	w0, w0, #0xc
   957ac:	7100101f 	cmp	w0, #0x4
   957b0:	54001f40 	b.eq	95b98 <CUSBAudioStreamingDevice::Configure()+0x568>  // b.none
   957b4:	7100301f 	cmp	w0, #0xc
   957b8:	aa1403e0 	mov	x0, x20
   957bc:	1a9f17e1 	cset	w1, eq	// eq = none
   957c0:	39045281 	strb	w1, [x20, #276]
   957c4:	97ffd423 	bl	8a850 <CUSBFunction::GetDevice() const>
   957c8:	aa0003f7 	mov	x23, x0
   957cc:	d2800400 	mov	x0, #0x20                  	// #32
   957d0:	94004aa4 	bl	a8260 <operator new(unsigned long)>
   957d4:	aa1703e1 	mov	x1, x23
   957d8:	aa1803e2 	mov	x2, x24
   957dc:	aa0003f7 	mov	x23, x0
   957e0:	97ffd254 	bl	8a130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   957e4:	f9001e97 	str	x23, [x20, #56]
   957e8:	39401b00 	ldrb	w0, [x24, #6]
   957ec:	340021c0 	cbz	w0, 95c24 <CUSBAudioStreamingDevice::Configure()+0x5f4>
   957f0:	51000400 	sub	w0, w0, #0x1
   957f4:	52800021 	mov	w1, #0x1                   	// #1
   957f8:	1ac02021 	lsl	w1, w1, w0
   957fc:	aa1403e0 	mov	x0, x20
   95800:	12800019 	mov	w25, #0xffffffff            	// #-1
   95804:	b9004a81 	str	w1, [x20, #72]
   95808:	97ffd342 	bl	8a510 <CUSBFunction::Configure()>
   9580c:	72001c17 	ands	w23, w0, #0xff
   95810:	54001b60 	b.eq	95b7c <CUSBAudioStreamingDevice::Configure()+0x54c>  // b.none
   95814:	d503201f 	nop
   95818:	aa1403e0 	mov	x0, x20
   9581c:	11000739 	add	w25, w25, #0x1
   95820:	97ffd40c 	bl	8a850 <CUSBFunction::GetDevice() const>
   95824:	2a1903e1 	mov	w1, w25
   95828:	97ffcc4e 	bl	88960 <CUSBDevice::GetFunction(unsigned int)>
   9582c:	aa0003f8 	mov	x24, x0
   95830:	b40017c0 	cbz	x0, 95b28 <CUSBAudioStreamingDevice::Configure()+0x4f8>
   95834:	97ffd497 	bl	8aa90 <CUSBFunction::GetInterfaceClass() const>
   95838:	12001c00 	and	w0, w0, #0xff
   9583c:	7100041f 	cmp	w0, #0x1
   95840:	54fffec1 	b.ne	95818 <CUSBAudioStreamingDevice::Configure()+0x1e8>  // b.any
   95844:	aa1803e0 	mov	x0, x24
   95848:	97ffd49e 	bl	8aac0 <CUSBFunction::GetInterfaceSubClass() const>
   9584c:	12001c17 	and	w23, w0, #0xff
   95850:	710006ff 	cmp	w23, #0x1
   95854:	54fffe21 	b.ne	95818 <CUSBAudioStreamingDevice::Configure()+0x1e8>  // b.any
   95858:	39413282 	ldrb	w2, [x20, #76]
   9585c:	b9405281 	ldr	w1, [x20, #80]
   95860:	3940c280 	ldrb	w0, [x20, #48]
   95864:	39017282 	strb	w2, [x20, #92]
   95868:	b9006281 	str	w1, [x20, #96]
   9586c:	35002920 	cbnz	w0, 95d90 <CUSBAudioStreamingDevice::Configure()+0x760>
   95870:	39401ea0 	ldrb	w0, [x21, #7]
   95874:	35002620 	cbnz	w0, 95d38 <CUSBAudioStreamingDevice::Configure()+0x708>
   95878:	b9006697 	str	w23, [x20, #100]
   9587c:	39402aa1 	ldrb	w1, [x21, #10]
   95880:	394026a0 	ldrb	w0, [x21, #9]
   95884:	394022a2 	ldrb	w2, [x21, #8]
   95888:	53103c21 	lsl	w1, w1, #16
   9588c:	2a002020 	orr	w0, w1, w0, lsl #8
   95890:	2a020000 	orr	w0, w0, w2
   95894:	b9006a80 	str	w0, [x20, #104]
   95898:	394036a1 	ldrb	w1, [x21, #13]
   9589c:	394032a0 	ldrb	w0, [x21, #12]
   958a0:	39402ea2 	ldrb	w2, [x21, #11]
   958a4:	53103c21 	lsl	w1, w1, #16
   958a8:	2a002020 	orr	w0, w1, w0, lsl #8
   958ac:	2a020000 	orr	w0, w0, w2
   958b0:	b9006e80 	str	w0, [x20, #108]
   958b4:	39400e73 	ldrb	w19, [x19, #3]
   958b8:	340039f3 	cbz	w19, 95ff4 <CUSBAudioStreamingDevice::Configure()+0x9c4>
   958bc:	39413280 	ldrb	w0, [x20, #76]
   958c0:	34003760 	cbz	w0, 95fac <CUSBAudioStreamingDevice::Configure()+0x97c>
   958c4:	b9405680 	ldr	w0, [x20, #84]
   958c8:	7100041f 	cmp	w0, #0x1
   958cc:	54003641 	b.ne	95f94 <CUSBAudioStreamingDevice::Configure()+0x964>  // b.any
   958d0:	52800002 	mov	w2, #0x0                   	// #0
   958d4:	2a1303e1 	mov	w1, w19
   958d8:	aa1803e0 	mov	x0, x24
   958dc:	97fff915 	bl	93d30 <CUSBAudioControlDevice::GetTerminalType(unsigned char, bool) const>
   958e0:	2a1303e1 	mov	w1, w19
   958e4:	52800002 	mov	w2, #0x0                   	// #0
   958e8:	12003c03 	and	w3, w0, #0xffff
   958ec:	52806020 	mov	w0, #0x301                 	// #769
   958f0:	7104007f 	cmp	w3, #0x100
   958f4:	1a801063 	csel	w3, w3, w0, ne	// ne = any
   958f8:	aa1803e0 	mov	x0, x24
   958fc:	79019a83 	strh	w3, [x20, #204]
   95900:	97fff978 	bl	93ee0 <CUSBAudioControlDevice::GetFeatureUnitID(unsigned char, bool) const>
   95904:	b9405682 	ldr	w2, [x20, #84]
   95908:	39071a80 	strb	w0, [x20, #454]
   9590c:	aa1803e1 	mov	x1, x24
   95910:	aa1403e0 	mov	x0, x20
   95914:	b900ca82 	str	w2, [x20, #200]
   95918:	97fffbde 	bl	94890 <CUSBAudioStreamingDevice::InitTerminalControlInfo(CUSBAudioControlDevice*)>
   9591c:	72001c17 	ands	w23, w0, #0xff
   95920:	54ffeee0 	b.eq	956fc <CUSBAudioStreamingDevice::Configure()+0xcc>  // b.none
   95924:	39413280 	ldrb	w0, [x20, #76]
   95928:	350000c0 	cbnz	w0, 95940 <CUSBAudioStreamingDevice::Configure()+0x310>
   9592c:	52800001 	mov	w1, #0x0                   	// #0
   95930:	aa1403e0 	mov	x0, x20
   95934:	97fffae3 	bl	944c0 <CUSBAudioStreamingDevice::SelectInputTerminal(unsigned int)>
   95938:	72001c1f 	tst	w0, #0xff
   9593c:	54003680 	b.eq	9600c <CUSBAudioStreamingDevice::Configure()+0x9dc>  // b.none
   95940:	910183a0 	add	x0, x29, #0x60
   95944:	94003b43 	bl	a4650 <CString::CString()>
   95948:	b9406680 	ldr	w0, [x20, #100]
   9594c:	340003e0 	cbz	w0, 959c8 <CUSBAudioStreamingDevice::Configure()+0x398>
   95950:	d00000fa 	adrp	x26, b3000 <_etext+0x2158>
   95954:	9135e35a 	add	x26, x26, #0xd78
   95958:	d00000f9 	adrp	x25, b3000 <_etext+0x2158>
   9595c:	9135a339 	add	x25, x25, #0xd68
   95960:	9101a295 	add	x21, x20, #0x68
   95964:	52800016 	mov	w22, #0x0                   	// #0
   95968:	910283b3 	add	x19, x29, #0xa0
   9596c:	b00000fb 	adrp	x27, b2000 <_etext+0x1158>
   95970:	aa1303e0 	mov	x0, x19
   95974:	94003b37 	bl	a4650 <CString::CString()>
   95978:	29400ea2 	ldp	w2, w3, [x21]
   9597c:	6b03005f 	cmp	w2, w3
   95980:	540014a0 	b.eq	95c14 <CUSBAudioStreamingDevice::Configure()+0x5e4>  // b.none
   95984:	b9400aa4 	ldr	w4, [x21, #8]
   95988:	aa1903e1 	mov	x1, x25
   9598c:	aa1303e0 	mov	x0, x19
   95990:	94004168 	bl	a5f30 <CString::Format(char const*, ...)>
   95994:	35001396 	cbnz	w22, 95c04 <CUSBAudioStreamingDevice::Configure()+0x5d4>
   95998:	aa1303e0 	mov	x0, x19
   9599c:	110006d6 	add	w22, w22, #0x1
   959a0:	94003b70 	bl	a4760 <CString::operator char const*() const>
   959a4:	aa0003e1 	mov	x1, x0
   959a8:	910183a0 	add	x0, x29, #0x60
   959ac:	94003bc9 	bl	a48d0 <CString::Append(char const*)>
   959b0:	aa1303e0 	mov	x0, x19
   959b4:	910032b5 	add	x21, x21, #0xc
   959b8:	94003aea 	bl	a4560 <CString::~CString()>
   959bc:	b9406680 	ldr	w0, [x20, #100]
   959c0:	6b16001f 	cmp	w0, w22
   959c4:	54fffd68 	b.hi	95970 <CUSBAudioStreamingDevice::Configure()+0x340>  // b.pmore
   959c8:	910203a0 	add	x0, x29, #0x80
   959cc:	94003b21 	bl	a4650 <CString::CString()>
   959d0:	b9405680 	ldr	w0, [x20, #84]
   959d4:	34001340 	cbz	w0, 95c3c <CUSBAudioStreamingDevice::Configure()+0x60c>
   959d8:	910283b3 	add	x19, x29, #0xa0
   959dc:	aa1403fa 	mov	x26, x20
   959e0:	aa1303e0 	mov	x0, x19
   959e4:	d00000f5 	adrp	x21, b3000 <_etext+0x2158>
   959e8:	913602b5 	add	x21, x21, #0xd80
   959ec:	b00000f9 	adrp	x25, b2000 <_etext+0x1158>
   959f0:	910e0339 	add	x25, x25, #0x380
   959f4:	d2800016 	mov	x22, #0x0                   	// #0
   959f8:	94003b16 	bl	a4650 <CString::CString()>
   959fc:	784ccf42 	ldrh	w2, [x26, #204]!
   95a00:	aa1503e1 	mov	x1, x21
   95a04:	aa1303e0 	mov	x0, x19
   95a08:	9400414a 	bl	a5f30 <CString::Format(char const*, ...)>
   95a0c:	aa1303e0 	mov	x0, x19
   95a10:	910006d6 	add	x22, x22, #0x1
   95a14:	94003b53 	bl	a4760 <CString::operator char const*() const>
   95a18:	aa0003e1 	mov	x1, x0
   95a1c:	910203a0 	add	x0, x29, #0x80
   95a20:	94003bac 	bl	a48d0 <CString::Append(char const*)>
   95a24:	aa1303e0 	mov	x0, x19
   95a28:	94003ace 	bl	a4560 <CString::~CString()>
   95a2c:	b9405680 	ldr	w0, [x20, #84]
   95a30:	6b16001f 	cmp	w0, w22
   95a34:	54001049 	b.ls	95c3c <CUSBAudioStreamingDevice::Configure()+0x60c>  // b.plast
   95a38:	aa1303e0 	mov	x0, x19
   95a3c:	94003b05 	bl	a4650 <CString::CString()>
   95a40:	d37ceec0 	lsl	x0, x22, #4
   95a44:	aa1503e1 	mov	x1, x21
   95a48:	78606b42 	ldrh	w2, [x26, x0]
   95a4c:	aa1303e0 	mov	x0, x19
   95a50:	94004138 	bl	a5f30 <CString::Format(char const*, ...)>
   95a54:	aa1903e1 	mov	x1, x25
   95a58:	910203a0 	add	x0, x29, #0x80
   95a5c:	94003b9d 	bl	a48d0 <CString::Append(char const*)>
   95a60:	17ffffeb 	b	95a0c <CUSBAudioStreamingDevice::Configure()+0x3dc>
   95a64:	940027eb 	bl	9fa10 <CLogger::Get()>
   95a68:	d00000e3 	adrp	x3, b3000 <_etext+0x2158>
   95a6c:	912d6063 	add	x3, x3, #0xb58
   95a70:	f940fa81 	ldr	x1, [x20, #496]
   95a74:	52800082 	mov	w2, #0x4                   	// #4
   95a78:	52800017 	mov	w23, #0x0                   	// #0
   95a7c:	940029d1 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   95a80:	17ffff1f 	b	956fc <CUSBAudioStreamingDevice::Configure()+0xcc>
   95a84:	d00000e1 	adrp	x1, b3000 <_etext+0x2158>
   95a88:	d00000e0 	adrp	x0, b3000 <_etext+0x2158>
   95a8c:	91200021 	add	x1, x1, #0x800
   95a90:	912c8000 	add	x0, x0, #0xb20
   95a94:	52801f02 	mov	w2, #0xf8                  	// #248
   95a98:	940020aa 	bl	9dd40 <assertion_failed>
   95a9c:	54000161 	b.ne	95ac8 <CUSBAudioStreamingDevice::Configure()+0x498>  // b.any
   95aa0:	394012a0 	ldrb	w0, [x21, #4]
   95aa4:	34000120 	cbz	w0, 95ac8 <CUSBAudioStreamingDevice::Configure()+0x498>
   95aa8:	394016a3 	ldrb	w3, [x21, #5]
   95aac:	b9402e82 	ldr	w2, [x20, #44]
   95ab0:	6b02007f 	cmp	w3, w2
   95ab4:	540000a1 	b.ne	95ac8 <CUSBAudioStreamingDevice::Configure()+0x498>  // b.any
   95ab8:	39401aa3 	ldrb	w3, [x21, #6]
   95abc:	b9402a82 	ldr	w2, [x20, #40]
   95ac0:	6b02007f 	cmp	w3, w2
   95ac4:	54ffe680 	b.eq	95794 <CUSBAudioStreamingDevice::Configure()+0x164>  // b.none
   95ac8:	940027d2 	bl	9fa10 <CLogger::Get()>
   95acc:	52800042 	mov	w2, #0x2                   	// #2
   95ad0:	d00000e3 	adrp	x3, b3000 <_etext+0x2158>
   95ad4:	912de063 	add	x3, x3, #0xb78
   95ad8:	f940fa81 	ldr	x1, [x20, #496]
   95adc:	940029b9 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   95ae0:	394002a1 	ldrb	w1, [x21]
   95ae4:	aa1503e0 	mov	x0, x21
   95ae8:	f940fa82 	ldr	x2, [x20, #496]
   95aec:	9400225d 	bl	9e460 <debug_hexdump(void const*, unsigned int, char const*)>
   95af0:	17ffff03 	b	956fc <CUSBAudioStreamingDevice::Configure()+0xcc>
   95af4:	940027c7 	bl	9fa10 <CLogger::Get()>
   95af8:	39402a64 	ldrb	w4, [x19, #10]
   95afc:	d00000e3 	adrp	x3, b3000 <_etext+0x2158>
   95b00:	52800042 	mov	w2, #0x2                   	// #2
   95b04:	912e6063 	add	x3, x3, #0xb98
   95b08:	52800017 	mov	w23, #0x0                   	// #0
   95b0c:	f940fa81 	ldr	x1, [x20, #496]
   95b10:	940029ac 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   95b14:	394002a1 	ldrb	w1, [x21]
   95b18:	aa1503e0 	mov	x0, x21
   95b1c:	f940fa82 	ldr	x2, [x20, #496]
   95b20:	94002250 	bl	9e460 <debug_hexdump(void const*, unsigned int, char const*)>
   95b24:	17fffef6 	b	956fc <CUSBAudioStreamingDevice::Configure()+0xcc>
   95b28:	940027ba 	bl	9fa10 <CLogger::Get()>
   95b2c:	d00000e3 	adrp	x3, b3000 <_etext+0x2158>
   95b30:	9130a063 	add	x3, x3, #0xc28
   95b34:	f940fa81 	ldr	x1, [x20, #496]
   95b38:	52800042 	mov	w2, #0x2                   	// #2
   95b3c:	52800017 	mov	w23, #0x0                   	// #0
   95b40:	940029a0 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   95b44:	17fffeee 	b	956fc <CUSBAudioStreamingDevice::Configure()+0xcc>
   95b48:	aa1403e0 	mov	x0, x20
   95b4c:	97ffd341 	bl	8a850 <CUSBFunction::GetDevice() const>
   95b50:	aa0003f9 	mov	x25, x0
   95b54:	d2800400 	mov	x0, #0x20                  	// #32
   95b58:	940049c2 	bl	a8260 <operator new(unsigned long)>
   95b5c:	aa1903e1 	mov	x1, x25
   95b60:	aa0003f9 	mov	x25, x0
   95b64:	aa1703e2 	mov	x2, x23
   95b68:	97ffd172 	bl	8a130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   95b6c:	f9002299 	str	x25, [x20, #64]
   95b70:	39400f00 	ldrb	w0, [x24, #3]
   95b74:	121e0400 	and	w0, w0, #0xc
   95b78:	17ffff0f 	b	957b4 <CUSBAudioStreamingDevice::Configure()+0x184>
   95b7c:	940027a5 	bl	9fa10 <CLogger::Get()>
   95b80:	900000e3 	adrp	x3, b1000 <_etext+0x158>
   95b84:	9112c063 	add	x3, x3, #0x4b0
   95b88:	f940fa81 	ldr	x1, [x20, #496]
   95b8c:	52800042 	mov	w2, #0x2                   	// #2
   95b90:	9400298c 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   95b94:	17fffeda 	b	956fc <CUSBAudioStreamingDevice::Configure()+0xcc>
   95b98:	528000a1 	mov	w1, #0x5                   	// #5
   95b9c:	aa1403e0 	mov	x0, x20
   95ba0:	97ffd350 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   95ba4:	aa0003f7 	mov	x23, x0
   95ba8:	b40000e0 	cbz	x0, 95bc4 <CUSBAudioStreamingDevice::Configure()+0x594>
   95bac:	39400c00 	ldrb	w0, [x0, #3]
   95bb0:	12001400 	and	w0, w0, #0x3f
   95bb4:	7100441f 	cmp	w0, #0x11
   95bb8:	54000061 	b.ne	95bc4 <CUSBAudioStreamingDevice::Configure()+0x594>  // b.any
   95bbc:	39c00ae0 	ldrsb	w0, [x23, #2]
   95bc0:	37fffc40 	tbnz	w0, #31, 95b48 <CUSBAudioStreamingDevice::Configure()+0x518>
   95bc4:	94002793 	bl	9fa10 <CLogger::Get()>
   95bc8:	d00000e3 	adrp	x3, b3000 <_etext+0x2158>
   95bcc:	912f8063 	add	x3, x3, #0xbe0
   95bd0:	f940fa81 	ldr	x1, [x20, #496]
   95bd4:	52800042 	mov	w2, #0x2                   	// #2
   95bd8:	52800017 	mov	w23, #0x0                   	// #0
   95bdc:	94002979 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   95be0:	17fffec7 	b	956fc <CUSBAudioStreamingDevice::Configure()+0xcc>
   95be4:	9400278b 	bl	9fa10 <CLogger::Get()>
   95be8:	d00000e3 	adrp	x3, b3000 <_etext+0x2158>
   95bec:	912f0063 	add	x3, x3, #0xbc0
   95bf0:	f940fa81 	ldr	x1, [x20, #496]
   95bf4:	52800042 	mov	w2, #0x2                   	// #2
   95bf8:	52800017 	mov	w23, #0x0                   	// #0
   95bfc:	94002971 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   95c00:	17fffebf 	b	956fc <CUSBAudioStreamingDevice::Configure()+0xcc>
   95c04:	910e0361 	add	x1, x27, #0x380
   95c08:	910183a0 	add	x0, x29, #0x60
   95c0c:	94003b31 	bl	a48d0 <CString::Append(char const*)>
   95c10:	17ffff62 	b	95998 <CUSBAudioStreamingDevice::Configure()+0x368>
   95c14:	aa1a03e1 	mov	x1, x26
   95c18:	aa1303e0 	mov	x0, x19
   95c1c:	940040c5 	bl	a5f30 <CString::Format(char const*, ...)>
   95c20:	17ffff5d 	b	95994 <CUSBAudioStreamingDevice::Configure()+0x364>
   95c24:	d00000e1 	adrp	x1, b3000 <_etext+0x2158>
   95c28:	d00000e0 	adrp	x0, b3000 <_etext+0x2158>
   95c2c:	91200021 	add	x1, x1, #0x800
   95c30:	91302000 	add	x0, x0, #0xc08
   95c34:	52802de2 	mov	w2, #0x16f                 	// #367
   95c38:	94002042 	bl	9dd40 <assertion_failed>
   95c3c:	aa1803e0 	mov	x0, x24
   95c40:	91074293 	add	x19, x20, #0x1d0
   95c44:	97fff827 	bl	93ce0 <CUSBAudioControlDevice::GetDeviceNumber() const>
   95c48:	2a0003f5 	mov	w21, w0
   95c4c:	aa1803e0 	mov	x0, x24
   95c50:	97fff830 	bl	93d10 <CUSBAudioControlDevice::GetNextStreamingSubDeviceNumber()>
   95c54:	d0000101 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   95c58:	2a1503e2 	mov	w2, w21
   95c5c:	2a0003e3 	mov	w3, w0
   95c60:	91128021 	add	x1, x1, #0x4a0
   95c64:	aa1303e0 	mov	x0, x19
   95c68:	940040b2 	bl	a5f30 <CString::Format(char const*, ...)>
   95c6c:	94002419 	bl	9ecd0 <CDeviceNameService::Get()>
   95c70:	aa0003f5 	mov	x21, x0
   95c74:	aa1303e0 	mov	x0, x19
   95c78:	94003aba 	bl	a4760 <CString::operator char const*() const>
   95c7c:	aa0003e1 	mov	x1, x0
   95c80:	52800003 	mov	w3, #0x0                   	// #0
   95c84:	aa1403e2 	mov	x2, x20
   95c88:	aa1503e0 	mov	x0, x21
   95c8c:	94002321 	bl	9e910 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   95c90:	aa1303e0 	mov	x0, x19
   95c94:	d00000f3 	adrp	x19, b3000 <_etext+0x2158>
   95c98:	912c4273 	add	x19, x19, #0xb10
   95c9c:	94003ab1 	bl	a4760 <CString::operator char const*() const>
   95ca0:	f900fa80 	str	x0, [x20, #496]
   95ca4:	9400275b 	bl	9fa10 <CLogger::Get()>
   95ca8:	39413281 	ldrb	w1, [x20, #76]
   95cac:	aa0003f5 	mov	x21, x0
   95cb0:	d00000e2 	adrp	x2, b3000 <_etext+0x2158>
   95cb4:	912c6042 	add	x2, x2, #0xb18
   95cb8:	910203a0 	add	x0, x29, #0x80
   95cbc:	f940fa96 	ldr	x22, [x20, #496]
   95cc0:	7100003f 	cmp	w1, #0x0
   95cc4:	9a821273 	csel	x19, x19, x2, ne	// ne = any
   95cc8:	94003aa6 	bl	a4760 <CString::operator char const*() const>
   95ccc:	b9402a87 	ldr	w7, [x20, #40]
   95cd0:	d00000e3 	adrp	x3, b3000 <_etext+0x2158>
   95cd4:	aa0003e5 	mov	x5, x0
   95cd8:	aa1303e4 	mov	x4, x19
   95cdc:	aa1603e1 	mov	x1, x22
   95ce0:	b9405286 	ldr	w6, [x20, #80]
   95ce4:	91362063 	add	x3, x3, #0xd88
   95ce8:	52800062 	mov	w2, #0x3                   	// #3
   95cec:	aa1503e0 	mov	x0, x21
   95cf0:	94002934 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   95cf4:	94002747 	bl	9fa10 <CLogger::Get()>
   95cf8:	f940fa94 	ldr	x20, [x20, #496]
   95cfc:	aa0003f3 	mov	x19, x0
   95d00:	910183a0 	add	x0, x29, #0x60
   95d04:	94003a97 	bl	a4760 <CString::operator char const*() const>
   95d08:	d00000e3 	adrp	x3, b3000 <_etext+0x2158>
   95d0c:	aa0003e4 	mov	x4, x0
   95d10:	9136e063 	add	x3, x3, #0xdb8
   95d14:	aa1303e0 	mov	x0, x19
   95d18:	52800062 	mov	w2, #0x3                   	// #3
   95d1c:	aa1403e1 	mov	x1, x20
   95d20:	94002928 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   95d24:	910203a0 	add	x0, x29, #0x80
   95d28:	94003a0e 	bl	a4560 <CString::~CString()>
   95d2c:	910183a0 	add	x0, x29, #0x60
   95d30:	94003a0c 	bl	a4560 <CString::~CString()>
   95d34:	17fffe72 	b	956fc <CUSBAudioStreamingDevice::Configure()+0xcc>
   95d38:	52800101 	mov	w1, #0x8                   	// #8
   95d3c:	7100201f 	cmp	w0, #0x8
   95d40:	1a819000 	csel	w0, w0, w1, ls	// ls = plast
   95d44:	91002ea3 	add	x3, x21, #0xb
   95d48:	51000401 	sub	w1, w0, #0x1
   95d4c:	b9006680 	str	w0, [x20, #100]
   95d50:	52800060 	mov	w0, #0x3                   	// #3
   95d54:	910022b5 	add	x21, x21, #0x8
   95d58:	9101a282 	add	x2, x20, #0x68
   95d5c:	9ba00c21 	umaddl	x1, w1, w0, x3
   95d60:	39400aa3 	ldrb	w3, [x21, #2]
   95d64:	394006a0 	ldrb	w0, [x21, #1]
   95d68:	384036a4 	ldrb	w4, [x21], #3
   95d6c:	53103c63 	lsl	w3, w3, #16
   95d70:	2a002060 	orr	w0, w3, w0, lsl #8
   95d74:	2a040000 	orr	w0, w0, w4
   95d78:	eb0102bf 	cmp	x21, x1
   95d7c:	b9000440 	str	w0, [x2, #4]
   95d80:	b800c440 	str	w0, [x2], #12
   95d84:	54fffee1 	b.ne	95d60 <CUSBAudioStreamingDevice::Configure()+0x730>  // b.any
   95d88:	39400e73 	ldrb	w19, [x19, #3]
   95d8c:	17fffecb 	b	958b8 <CUSBAudioStreamingDevice::Configure()+0x288>
   95d90:	52800001 	mov	w1, #0x0                   	// #0
   95d94:	aa1803e0 	mov	x0, x24
   95d98:	97fff872 	bl	93f60 <CUSBAudioControlDevice::GetClockSelectorID(unsigned int)>
   95d9c:	72001c15 	ands	w21, w0, #0xff
   95da0:	910003f9 	mov	x25, sp
   95da4:	54000220 	b.eq	95de8 <CUSBAudioStreamingDevice::Configure()+0x7b8>  // b.none
   95da8:	aa1403e0 	mov	x0, x20
   95dac:	390002d7 	strb	w23, [x22]
   95db0:	97ffd2c0 	bl	8a8b0 <CUSBFunction::GetHost() const>
   95db4:	aa0003fa 	mov	x26, x0
   95db8:	aa1403e0 	mov	x0, x20
   95dbc:	97ffd2b1 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   95dc0:	aa0003e1 	mov	x1, x0
   95dc4:	2a1703e7 	mov	w7, w23
   95dc8:	aa1603e6 	mov	x6, x22
   95dcc:	aa1a03e0 	mov	x0, x26
   95dd0:	53181ea5 	ubfiz	w5, w21, #8, #8
   95dd4:	2a1703e3 	mov	w3, w23
   95dd8:	52802004 	mov	w4, #0x100                 	// #256
   95ddc:	52800422 	mov	w2, #0x21                  	// #33
   95de0:	97ffac8c 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   95de4:	37f809a0 	tbnz	w0, #31, 95f18 <CUSBAudioStreamingDevice::Configure()+0x8e8>
   95de8:	39400e61 	ldrb	w1, [x19, #3]
   95dec:	aa1803e0 	mov	x0, x24
   95df0:	97fff7e8 	bl	93d90 <CUSBAudioControlDevice::GetClockSourceID(unsigned char) const>
   95df4:	72001c1f 	tst	w0, #0xff
   95df8:	39071280 	strb	w0, [x20, #452]
   95dfc:	54000bc0 	b.eq	95f74 <CUSBAudioStreamingDevice::Configure()+0x944>  // b.none
   95e00:	aa1403e0 	mov	x0, x20
   95e04:	97ffd2ab 	bl	8a8b0 <CUSBFunction::GetHost() const>
   95e08:	aa0003f5 	mov	x21, x0
   95e0c:	aa1403e0 	mov	x0, x20
   95e10:	97ffd29c 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   95e14:	39471285 	ldrb	w5, [x20, #452]
   95e18:	52800047 	mov	w7, #0x2                   	// #2
   95e1c:	aa0003e1 	mov	x1, x0
   95e20:	2a0703e3 	mov	w3, w7
   95e24:	aa1503e0 	mov	x0, x21
   95e28:	aa1603e6 	mov	x6, x22
   95e2c:	52802004 	mov	w4, #0x100                 	// #256
   95e30:	12800bc2 	mov	w2, #0xffffffa1            	// #-95
   95e34:	53181ca5 	ubfiz	w5, w5, #8, #8
   95e38:	97ffac76 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   95e3c:	37f808e0 	tbnz	w0, #31, 95f58 <CUSBAudioStreamingDevice::Configure()+0x928>
   95e40:	794002d7 	ldrh	w23, [x22]
   95e44:	52800196 	mov	w22, #0xc                   	// #12
   95e48:	aa1403e0 	mov	x0, x20
   95e4c:	1b167ef6 	mul	w22, w23, w22
   95e50:	11000ac1 	add	w1, w22, #0x2
   95e54:	aa0103f6 	mov	x22, x1
   95e58:	d1000421 	sub	x1, x1, #0x1
   95e5c:	b2401421 	orr	x1, x1, #0x3f
   95e60:	91010021 	add	x1, x1, #0x40
   95e64:	927cec21 	and	x1, x1, #0xfffffffffffffff0
   95e68:	cb2163ff 	sub	sp, sp, x1
   95e6c:	97ffd291 	bl	8a8b0 <CUSBFunction::GetHost() const>
   95e70:	aa0003fa 	mov	x26, x0
   95e74:	aa1403e0 	mov	x0, x20
   95e78:	97ffd282 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   95e7c:	39471285 	ldrb	w5, [x20, #452]
   95e80:	9100fff5 	add	x21, sp, #0x3f
   95e84:	aa0003e1 	mov	x1, x0
   95e88:	927ae6b5 	and	x21, x21, #0xffffffffffffffc0
   95e8c:	2a1603e7 	mov	w7, w22
   95e90:	aa1a03e0 	mov	x0, x26
   95e94:	aa1503e6 	mov	x6, x21
   95e98:	52802004 	mov	w4, #0x100                 	// #256
   95e9c:	52800043 	mov	w3, #0x2                   	// #2
   95ea0:	12800bc2 	mov	w2, #0xffffffa1            	// #-95
   95ea4:	53181ca5 	ubfiz	w5, w5, #8, #8
   95ea8:	97ffac5a 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   95eac:	37f80480 	tbnz	w0, #31, 95f3c <CUSBAudioStreamingDevice::Configure()+0x90c>
   95eb0:	710022ff 	cmp	w23, #0x8
   95eb4:	52800102 	mov	w2, #0x8                   	// #8
   95eb8:	1a8292e2 	csel	w2, w23, w2, ls	// ls = plast
   95ebc:	b9006682 	str	w2, [x20, #100]
   95ec0:	91000aa0 	add	x0, x21, #0x2
   95ec4:	34000257 	cbz	w23, 95f0c <CUSBAudioStreamingDevice::Configure()+0x8dc>
   95ec8:	9101a281 	add	x1, x20, #0x68
   95ecc:	52800003 	mov	w3, #0x0                   	// #0
   95ed0:	79400008 	ldrh	w8, [x0]
   95ed4:	aa0003e4 	mov	x4, x0
   95ed8:	11000463 	add	w3, w3, #0x1
   95edc:	6b03005f 	cmp	w2, w3
   95ee0:	91003000 	add	x0, x0, #0xc
   95ee4:	785f6006 	ldurh	w6, [x0, #-10]
   95ee8:	785f8007 	ldurh	w7, [x0, #-8]
   95eec:	785fa005 	ldurh	w5, [x0, #-6]
   95ef0:	aa064106 	orr	x6, x8, x6, lsl #16
   95ef4:	aa0540e5 	orr	x5, x7, x5, lsl #16
   95ef8:	29001426 	stp	w6, w5, [x1]
   95efc:	91003021 	add	x1, x1, #0xc
   95f00:	b9400884 	ldr	w4, [x4, #8]
   95f04:	b81fc024 	stur	w4, [x1, #-4]
   95f08:	54fffe48 	b.hi	95ed0 <CUSBAudioStreamingDevice::Configure()+0x8a0>  // b.pmore
   95f0c:	39400e73 	ldrb	w19, [x19, #3]
   95f10:	9100033f 	mov	sp, x25
   95f14:	17fffe69 	b	958b8 <CUSBAudioStreamingDevice::Configure()+0x288>
   95f18:	940026be 	bl	9fa10 <CLogger::Get()>
   95f1c:	d00000e3 	adrp	x3, b3000 <_etext+0x2158>
   95f20:	91314063 	add	x3, x3, #0xc50
   95f24:	f940fa81 	ldr	x1, [x20, #496]
   95f28:	52800082 	mov	w2, #0x4                   	// #4
   95f2c:	940028a5 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   95f30:	52800017 	mov	w23, #0x0                   	// #0
   95f34:	9100033f 	mov	sp, x25
   95f38:	17fffdf1 	b	956fc <CUSBAudioStreamingDevice::Configure()+0xcc>
   95f3c:	940026b5 	bl	9fa10 <CLogger::Get()>
   95f40:	d00000e3 	adrp	x3, b3000 <_etext+0x2158>
   95f44:	91334063 	add	x3, x3, #0xcd0
   95f48:	f940fa81 	ldr	x1, [x20, #496]
   95f4c:	52800042 	mov	w2, #0x2                   	// #2
   95f50:	9400289c 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   95f54:	17fffff7 	b	95f30 <CUSBAudioStreamingDevice::Configure()+0x900>
   95f58:	940026ae 	bl	9fa10 <CLogger::Get()>
   95f5c:	d00000e3 	adrp	x3, b3000 <_etext+0x2158>
   95f60:	91326063 	add	x3, x3, #0xc98
   95f64:	f940fa81 	ldr	x1, [x20, #496]
   95f68:	52800042 	mov	w2, #0x2                   	// #2
   95f6c:	94002895 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   95f70:	17fffff0 	b	95f30 <CUSBAudioStreamingDevice::Configure()+0x900>
   95f74:	940026a7 	bl	9fa10 <CLogger::Get()>
   95f78:	d00000e3 	adrp	x3, b3000 <_etext+0x2158>
   95f7c:	39400e64 	ldrb	w4, [x19, #3]
   95f80:	52800042 	mov	w2, #0x2                   	// #2
   95f84:	9131c063 	add	x3, x3, #0xc70
   95f88:	f940fa81 	ldr	x1, [x20, #496]
   95f8c:	9400288d 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   95f90:	17ffffe8 	b	95f30 <CUSBAudioStreamingDevice::Configure()+0x900>
   95f94:	d00000e1 	adrp	x1, b3000 <_etext+0x2158>
   95f98:	d00000e0 	adrp	x0, b3000 <_etext+0x2158>
   95f9c:	91200021 	add	x1, x1, #0x800
   95fa0:	9134a000 	add	x0, x0, #0xd28
   95fa4:	528040c2 	mov	w2, #0x206                 	// #518
   95fa8:	94001f66 	bl	9dd40 <assertion_failed>
   95fac:	2a1303e1 	mov	w1, w19
   95fb0:	aa1803e0 	mov	x0, x24
   95fb4:	97fff797 	bl	93e10 <CUSBAudioControlDevice::GetSelectorUnitID(unsigned char) const>
   95fb8:	72001c1f 	tst	w0, #0xff
   95fbc:	39071680 	strb	w0, [x20, #453]
   95fc0:	2a0003e1 	mov	w1, w0
   95fc4:	54000401 	b.ne	96044 <CUSBAudioStreamingDevice::Configure()+0xa14>  // b.any
   95fc8:	b9405695 	ldr	w21, [x20, #84]
   95fcc:	710006bf 	cmp	w21, #0x1
   95fd0:	540002e1 	b.ne	9602c <CUSBAudioStreamingDevice::Configure()+0x9fc>  // b.any
   95fd4:	2a1503e2 	mov	w2, w21
   95fd8:	2a1303e1 	mov	w1, w19
   95fdc:	aa1803e0 	mov	x0, x24
   95fe0:	97fff754 	bl	93d30 <CUSBAudioControlDevice::GetTerminalType(unsigned char, bool) const>
   95fe4:	2a0003e3 	mov	w3, w0
   95fe8:	2a1503e2 	mov	w2, w21
   95fec:	2a1303e1 	mov	w1, w19
   95ff0:	17fffe42 	b	958f8 <CUSBAudioStreamingDevice::Configure()+0x2c8>
   95ff4:	d00000e1 	adrp	x1, b3000 <_etext+0x2158>
   95ff8:	d00000e0 	adrp	x0, b3000 <_etext+0x2158>
   95ffc:	91200021 	add	x1, x1, #0x800
   96000:	9133e000 	add	x0, x0, #0xcf8
   96004:	52804062 	mov	w2, #0x203                 	// #515
   96008:	94001f4e 	bl	9dd40 <assertion_failed>
   9600c:	94002681 	bl	9fa10 <CLogger::Get()>
   96010:	b00000e3 	adrp	x3, b3000 <_etext+0x2158>
   96014:	91350063 	add	x3, x3, #0xd40
   96018:	f940fa81 	ldr	x1, [x20, #496]
   9601c:	52800042 	mov	w2, #0x2                   	// #2
   96020:	52800017 	mov	w23, #0x0                   	// #0
   96024:	94002867 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   96028:	17fffdb5 	b	956fc <CUSBAudioStreamingDevice::Configure()+0xcc>
   9602c:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96030:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   96034:	91200021 	add	x1, x1, #0x800
   96038:	9134a000 	add	x0, x0, #0xd28
   9603c:	52804342 	mov	w2, #0x21a                 	// #538
   96040:	94001f40 	bl	9dd40 <assertion_failed>
   96044:	aa1803e0 	mov	x0, x24
   96048:	97fff78a 	bl	93e70 <CUSBAudioControlDevice::GetNumSources(unsigned char) const>
   9604c:	b9005680 	str	w0, [x20, #84]
   96050:	340003c0 	cbz	w0, 960c8 <CUSBAudioStreamingDevice::Configure()+0xa98>
   96054:	7100101f 	cmp	w0, #0x4
   96058:	54000069 	b.ls	96064 <CUSBAudioStreamingDevice::Configure()+0xa34>  // b.plast
   9605c:	52800080 	mov	w0, #0x4                   	// #4
   96060:	b9005680 	str	w0, [x20, #84]
   96064:	d2800013 	mov	x19, #0x0                   	// #0
   96068:	91033297 	add	x23, x20, #0xcc
   9606c:	91071a96 	add	x22, x20, #0x1c6
   96070:	b9405682 	ldr	w2, [x20, #84]
   96074:	6b13005f 	cmp	w2, w19
   96078:	54ffc4a9 	b.ls	9590c <CUSBAudioStreamingDevice::Configure()+0x2dc>  // b.plast
   9607c:	2a1303e2 	mov	w2, w19
   96080:	39471681 	ldrb	w1, [x20, #453]
   96084:	aa1803e0 	mov	x0, x24
   96088:	97fff786 	bl	93ea0 <CUSBAudioControlDevice::GetSourceID(unsigned char, unsigned int) const>
   9608c:	2a0003f5 	mov	w21, w0
   96090:	52800022 	mov	w2, #0x1                   	// #1
   96094:	2a1503e1 	mov	w1, w21
   96098:	aa1803e0 	mov	x0, x24
   9609c:	97fff725 	bl	93d30 <CUSBAudioControlDevice::GetTerminalType(unsigned char, bool) const>
   960a0:	2a0003e4 	mov	w4, w0
   960a4:	d37cee63 	lsl	x3, x19, #4
   960a8:	2a1503e1 	mov	w1, w21
   960ac:	52800022 	mov	w2, #0x1                   	// #1
   960b0:	aa1803e0 	mov	x0, x24
   960b4:	78236ae4 	strh	w4, [x23, x3]
   960b8:	97fff78a 	bl	93ee0 <CUSBAudioControlDevice::GetFeatureUnitID(unsigned char, bool) const>
   960bc:	38336ac0 	strb	w0, [x22, x19]
   960c0:	91000673 	add	x19, x19, #0x1
   960c4:	17ffffeb 	b	96070 <CUSBAudioStreamingDevice::Configure()+0xa40>
   960c8:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   960cc:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   960d0:	91200021 	add	x1, x1, #0x800
   960d4:	9121c000 	add	x0, x0, #0x870
   960d8:	528044a2 	mov	w2, #0x225                 	// #549
   960dc:	94001f19 	bl	9dd40 <assertion_failed>

00000000000960e0 <CUSBAudioEntity::CUSBAudioEntity(CUSBAudioEntity::TEntityType)>:
   960e0:	aa0003e3 	mov	x3, x0
   960e4:	2a0103e4 	mov	w4, w1
   960e8:	d2800142 	mov	x2, #0xa                   	// #10
   960ec:	91003000 	add	x0, x0, #0xc
   960f0:	52800001 	mov	w1, #0x0                   	// #0
   960f4:	b9000064 	str	w4, [x3]
   960f8:	3900107f 	strb	wzr, [x3, #4]
   960fc:	b900087f 	str	wzr, [x3, #8]
   96100:	b900187f 	str	wzr, [x3, #24]
   96104:	140045b9 	b	a77e8 <memset>
   96108:	d503201f 	nop
   9610c:	d503201f 	nop

0000000000096110 <CUSBAudioEntity::GetEntityType() const>:
   96110:	b9400000 	ldr	w0, [x0]
   96114:	d65f03c0 	ret
   96118:	d503201f 	nop
   9611c:	d503201f 	nop

0000000000096120 <CUSBAudioEntity::SetID(unsigned char)>:
   96120:	72001c21 	ands	w1, w1, #0xff
   96124:	54000060 	b.eq	96130 <CUSBAudioEntity::SetID(unsigned char)+0x10>  // b.none
   96128:	39001001 	strb	w1, [x0, #4]
   9612c:	d65f03c0 	ret
   96130:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96134:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   96138:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9613c:	9137e021 	add	x1, x1, #0xdf8
   96140:	910003fd 	mov	x29, sp
   96144:	91386000 	add	x0, x0, #0xe18
   96148:	52800602 	mov	w2, #0x30                  	// #48
   9614c:	94001efd 	bl	9dd40 <assertion_failed>

0000000000096150 <CUSBAudioEntity::GetID() const>:
   96150:	39401000 	ldrb	w0, [x0, #4]
   96154:	d65f03c0 	ret
   96158:	d503201f 	nop
   9615c:	d503201f 	nop

0000000000096160 <CUSBAudioEntity::SetNumSources(unsigned int)>:
   96160:	7100283f 	cmp	w1, #0xa
   96164:	54000068 	b.hi	96170 <CUSBAudioEntity::SetNumSources(unsigned int)+0x10>  // b.pmore
   96168:	b9000801 	str	w1, [x0, #8]
   9616c:	d65f03c0 	ret
   96170:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96174:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   96178:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9617c:	9137e021 	add	x1, x1, #0xdf8
   96180:	910003fd 	mov	x29, sp
   96184:	9138c000 	add	x0, x0, #0xe30
   96188:	52800782 	mov	w2, #0x3c                  	// #60
   9618c:	94001eed 	bl	9dd40 <assertion_failed>

0000000000096190 <CUSBAudioEntity::SetSourceID(unsigned int, unsigned char)>:
   96190:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   96194:	910003fd 	mov	x29, sp
   96198:	b9400803 	ldr	w3, [x0, #8]
   9619c:	6b01007f 	cmp	w3, w1
   961a0:	54000103 	b.cc	961c0 <CUSBAudioEntity::SetSourceID(unsigned int, unsigned char)+0x30>  // b.lo, b.ul, b.last
   961a4:	8b214001 	add	x1, x0, w1, uxtw
   961a8:	39403020 	ldrb	w0, [x1, #12]
   961ac:	35000160 	cbnz	w0, 961d8 <CUSBAudioEntity::SetSourceID(unsigned int, unsigned char)+0x48>
   961b0:	12001c42 	and	w2, w2, #0xff
   961b4:	39003022 	strb	w2, [x1, #12]
   961b8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   961bc:	d65f03c0 	ret
   961c0:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   961c4:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   961c8:	9137e021 	add	x1, x1, #0xdf8
   961cc:	91396000 	add	x0, x0, #0xe58
   961d0:	52800862 	mov	w2, #0x43                  	// #67
   961d4:	94001edb 	bl	9dd40 <assertion_failed>
   961d8:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   961dc:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   961e0:	9137e021 	add	x1, x1, #0xdf8
   961e4:	9139c000 	add	x0, x0, #0xe70
   961e8:	52800882 	mov	w2, #0x44                  	// #68
   961ec:	94001ed5 	bl	9dd40 <assertion_failed>

00000000000961f0 <CUSBAudioEntity::SetSourceID(unsigned char)>:
   961f0:	52800023 	mov	w3, #0x1                   	// #1
   961f4:	39403002 	ldrb	w2, [x0, #12]
   961f8:	b9000803 	str	w3, [x0, #8]
   961fc:	35000082 	cbnz	w2, 9620c <CUSBAudioEntity::SetSourceID(unsigned char)+0x1c>
   96200:	12001c21 	and	w1, w1, #0xff
   96204:	39003001 	strb	w1, [x0, #12]
   96208:	d65f03c0 	ret
   9620c:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96210:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   96214:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   96218:	9137e021 	add	x1, x1, #0xdf8
   9621c:	910003fd 	mov	x29, sp
   96220:	9139c000 	add	x0, x0, #0xe70
   96224:	52800882 	mov	w2, #0x44                  	// #68
   96228:	94001ec6 	bl	9dd40 <assertion_failed>
   9622c:	d503201f 	nop

0000000000096230 <CUSBAudioEntity::GetNumSources() const>:
   96230:	b9400800 	ldr	w0, [x0, #8]
   96234:	d65f03c0 	ret
   96238:	d503201f 	nop
   9623c:	d503201f 	nop

0000000000096240 <CUSBAudioEntity::GetSourceID(unsigned int) const>:
   96240:	b9400802 	ldr	w2, [x0, #8]
   96244:	6b01005f 	cmp	w2, w1
   96248:	54000083 	b.cc	96258 <CUSBAudioEntity::GetSourceID(unsigned int) const+0x18>  // b.lo, b.ul, b.last
   9624c:	8b214001 	add	x1, x0, w1, uxtw
   96250:	39403020 	ldrb	w0, [x1, #12]
   96254:	d65f03c0 	ret
   96258:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   9625c:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   96260:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   96264:	9137e021 	add	x1, x1, #0xdf8
   96268:	910003fd 	mov	x29, sp
   9626c:	91396000 	add	x0, x0, #0xe58
   96270:	52800ac2 	mov	w2, #0x56                  	// #86
   96274:	94001eb3 	bl	9dd40 <assertion_failed>
   96278:	d503201f 	nop
   9627c:	d503201f 	nop

0000000000096280 <CUSBAudioEntity::SetNumChannels(unsigned int)>:
   96280:	7101903f 	cmp	w1, #0x64
   96284:	54000068 	b.hi	96290 <CUSBAudioEntity::SetNumChannels(unsigned int)+0x10>  // b.pmore
   96288:	b9001801 	str	w1, [x0, #24]
   9628c:	d65f03c0 	ret
   96290:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96294:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   96298:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9629c:	9137e021 	add	x1, x1, #0xdf8
   962a0:	910003fd 	mov	x29, sp
   962a4:	913a6000 	add	x0, x0, #0xe98
   962a8:	52800ba2 	mov	w2, #0x5d                  	// #93
   962ac:	94001ea5 	bl	9dd40 <assertion_failed>

00000000000962b0 <CUSBAudioEntity::GetNumChannels() const>:
   962b0:	b9401800 	ldr	w0, [x0, #24]
   962b4:	7101901f 	cmp	w0, #0x64
   962b8:	54000048 	b.hi	962c0 <CUSBAudioEntity::GetNumChannels() const+0x10>  // b.pmore
   962bc:	d65f03c0 	ret
   962c0:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   962c4:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   962c8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   962cc:	9137e021 	add	x1, x1, #0xdf8
   962d0:	910003fd 	mov	x29, sp
   962d4:	913b0000 	add	x0, x0, #0xec0
   962d8:	52800c82 	mov	w2, #0x64                  	// #100
   962dc:	94001e99 	bl	9dd40 <assertion_failed>

00000000000962e0 <CUSBAudioTerminal::CUSBAudioTerminal(TUSBAudioControlInterfaceDescriptor const*, bool)>:
   962e0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   962e4:	910003fd 	mov	x29, sp
   962e8:	a90153f3 	stp	x19, x20, [sp, #16]
   962ec:	aa0003f3 	mov	x19, x0
   962f0:	aa0103f4 	mov	x20, x1
   962f4:	91003000 	add	x0, x0, #0xc
   962f8:	52800001 	mov	w1, #0x0                   	// #0
   962fc:	f90013f5 	str	x21, [sp, #32]
   96300:	12001c55 	and	w21, w2, #0xff
   96304:	d2800142 	mov	x2, #0xa                   	// #10
   96308:	b900027f 	str	wzr, [x19]
   9630c:	3900127f 	strb	wzr, [x19, #4]
   96310:	b9000a7f 	str	wzr, [x19, #8]
   96314:	b9001a7f 	str	wzr, [x19, #24]
   96318:	94004534 	bl	a77e8 <memset>
   9631c:	3900827f 	strb	wzr, [x19, #32]
   96320:	b4000b34 	cbz	x20, 96484 <CUSBAudioTerminal::CUSBAudioTerminal(TUSBAudioControlInterfaceDescriptor const*, bool)+0x1a4>
   96324:	39400a80 	ldrb	w0, [x20, #2]
   96328:	7100081f 	cmp	w0, #0x2
   9632c:	1a9f17e1 	cset	w1, eq	// eq = none
   96330:	39007261 	strb	w1, [x19, #28]
   96334:	54000321 	b.ne	96398 <CUSBAudioTerminal::CUSBAudioTerminal(TUSBAudioControlInterfaceDescriptor const*, bool)+0xb8>  // b.any
   96338:	39400e80 	ldrb	w0, [x20, #3]
   9633c:	340005b5 	cbz	w21, 963f0 <CUSBAudioTerminal::CUSBAudioTerminal(TUSBAudioControlInterfaceDescriptor const*, bool)+0x110>
   96340:	34000960 	cbz	w0, 9646c <CUSBAudioTerminal::CUSBAudioTerminal(TUSBAudioControlInterfaceDescriptor const*, bool)+0x18c>
   96344:	39001260 	strb	w0, [x19, #4]
   96348:	39401283 	ldrb	w3, [x20, #4]
   9634c:	39401681 	ldrb	w1, [x20, #5]
   96350:	39402280 	ldrb	w0, [x20, #8]
   96354:	39401e82 	ldrb	w2, [x20, #7]
   96358:	aa012061 	orr	x1, x3, x1, lsl #8
   9635c:	7101901f 	cmp	w0, #0x64
   96360:	79003e61 	strh	w1, [x19, #30]
   96364:	39008262 	strb	w2, [x19, #32]
   96368:	54000568 	b.hi	96414 <CUSBAudioTerminal::CUSBAudioTerminal(TUSBAudioControlInterfaceDescriptor const*, bool)+0x134>  // b.pmore
   9636c:	b9001a60 	str	w0, [x19, #24]
   96370:	350000c0 	cbnz	w0, 96388 <CUSBAudioTerminal::CUSBAudioTerminal(TUSBAudioControlInterfaceDescriptor const*, bool)+0xa8>
   96374:	79403e60 	ldrh	w0, [x19, #30]
   96378:	7104041f 	cmp	w0, #0x101
   9637c:	54000061 	b.ne	96388 <CUSBAudioTerminal::CUSBAudioTerminal(TUSBAudioControlInterfaceDescriptor const*, bool)+0xa8>  // b.any
   96380:	52800040 	mov	w0, #0x2                   	// #2
   96384:	b9001a60 	str	w0, [x19, #24]
   96388:	a94153f3 	ldp	x19, x20, [sp, #16]
   9638c:	f94013f5 	ldr	x21, [sp, #32]
   96390:	a8c37bfd 	ldp	x29, x30, [sp], #48
   96394:	d65f03c0 	ret
   96398:	71000c1f 	cmp	w0, #0x3
   9639c:	54000801 	b.ne	9649c <CUSBAudioTerminal::CUSBAudioTerminal(TUSBAudioControlInterfaceDescriptor const*, bool)+0x1bc>  // b.any
   963a0:	39400e80 	ldrb	w0, [x20, #3]
   963a4:	34000455 	cbz	w21, 9642c <CUSBAudioTerminal::CUSBAudioTerminal(TUSBAudioControlInterfaceDescriptor const*, bool)+0x14c>
   963a8:	34000620 	cbz	w0, 9646c <CUSBAudioTerminal::CUSBAudioTerminal(TUSBAudioControlInterfaceDescriptor const*, bool)+0x18c>
   963ac:	52800022 	mov	w2, #0x1                   	// #1
   963b0:	39403261 	ldrb	w1, [x19, #12]
   963b4:	39001260 	strb	w0, [x19, #4]
   963b8:	b9000a62 	str	w2, [x19, #8]
   963bc:	39401e80 	ldrb	w0, [x20, #7]
   963c0:	350007a1 	cbnz	w1, 964b4 <CUSBAudioTerminal::CUSBAudioTerminal(TUSBAudioControlInterfaceDescriptor const*, bool)+0x1d4>
   963c4:	39003260 	strb	w0, [x19, #12]
   963c8:	39401282 	ldrb	w2, [x20, #4]
   963cc:	39401680 	ldrb	w0, [x20, #5]
   963d0:	39402281 	ldrb	w1, [x20, #8]
   963d4:	aa002040 	orr	x0, x2, x0, lsl #8
   963d8:	39008261 	strb	w1, [x19, #32]
   963dc:	79003e60 	strh	w0, [x19, #30]
   963e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   963e4:	f94013f5 	ldr	x21, [sp, #32]
   963e8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   963ec:	d65f03c0 	ret
   963f0:	340003e0 	cbz	w0, 9646c <CUSBAudioTerminal::CUSBAudioTerminal(TUSBAudioControlInterfaceDescriptor const*, bool)+0x18c>
   963f4:	39001260 	strb	w0, [x19, #4]
   963f8:	39401282 	ldrb	w2, [x20, #4]
   963fc:	39401681 	ldrb	w1, [x20, #5]
   96400:	39401e80 	ldrb	w0, [x20, #7]
   96404:	aa012041 	orr	x1, x2, x1, lsl #8
   96408:	7101901f 	cmp	w0, #0x64
   9640c:	79003e61 	strh	w1, [x19, #30]
   96410:	54fffae9 	b.ls	9636c <CUSBAudioTerminal::CUSBAudioTerminal(TUSBAudioControlInterfaceDescriptor const*, bool)+0x8c>  // b.plast
   96414:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96418:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   9641c:	9137e021 	add	x1, x1, #0xdf8
   96420:	913a6000 	add	x0, x0, #0xe98
   96424:	52800ba2 	mov	w2, #0x5d                  	// #93
   96428:	94001e46 	bl	9dd40 <assertion_failed>
   9642c:	34000200 	cbz	w0, 9646c <CUSBAudioTerminal::CUSBAudioTerminal(TUSBAudioControlInterfaceDescriptor const*, bool)+0x18c>
   96430:	52800022 	mov	w2, #0x1                   	// #1
   96434:	39403261 	ldrb	w1, [x19, #12]
   96438:	39001260 	strb	w0, [x19, #4]
   9643c:	b9000a62 	str	w2, [x19, #8]
   96440:	39401e80 	ldrb	w0, [x20, #7]
   96444:	35000381 	cbnz	w1, 964b4 <CUSBAudioTerminal::CUSBAudioTerminal(TUSBAudioControlInterfaceDescriptor const*, bool)+0x1d4>
   96448:	39003260 	strb	w0, [x19, #12]
   9644c:	39401281 	ldrb	w1, [x20, #4]
   96450:	39401680 	ldrb	w0, [x20, #5]
   96454:	f94013f5 	ldr	x21, [sp, #32]
   96458:	aa002020 	orr	x0, x1, x0, lsl #8
   9645c:	79003e60 	strh	w0, [x19, #30]
   96460:	a94153f3 	ldp	x19, x20, [sp, #16]
   96464:	a8c37bfd 	ldp	x29, x30, [sp], #48
   96468:	d65f03c0 	ret
   9646c:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96470:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   96474:	9137e021 	add	x1, x1, #0xdf8
   96478:	91386000 	add	x0, x0, #0xe18
   9647c:	52800602 	mov	w2, #0x30                  	// #48
   96480:	94001e30 	bl	9dd40 <assertion_failed>
   96484:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96488:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   9648c:	9137e021 	add	x1, x1, #0xdf8
   96490:	913ba000 	add	x0, x0, #0xee8
   96494:	52801122 	mov	w2, #0x89                  	// #137
   96498:	94001e2a 	bl	9dd40 <assertion_failed>
   9649c:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   964a0:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   964a4:	9137e021 	add	x1, x1, #0xdf8
   964a8:	913bc000 	add	x0, x0, #0xef0
   964ac:	52801522 	mov	w2, #0xa9                  	// #169
   964b0:	94001e24 	bl	9dd40 <assertion_failed>
   964b4:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   964b8:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   964bc:	9137e021 	add	x1, x1, #0xdf8
   964c0:	9139c000 	add	x0, x0, #0xe70
   964c4:	52800882 	mov	w2, #0x44                  	// #68
   964c8:	94001e1e 	bl	9dd40 <assertion_failed>
   964cc:	d503201f 	nop

00000000000964d0 <CUSBAudioTerminal::IsInput() const>:
   964d0:	39407000 	ldrb	w0, [x0, #28]
   964d4:	d65f03c0 	ret
   964d8:	d503201f 	nop
   964dc:	d503201f 	nop

00000000000964e0 <CUSBAudioTerminal::GetTerminalType() const>:
   964e0:	79403c00 	ldrh	w0, [x0, #30]
   964e4:	d65f03c0 	ret
   964e8:	d503201f 	nop
   964ec:	d503201f 	nop

00000000000964f0 <CUSBAudioTerminal::GetClockSourceID() const>:
   964f0:	39408000 	ldrb	w0, [x0, #32]
   964f4:	d65f03c0 	ret
   964f8:	d503201f 	nop
   964fc:	d503201f 	nop

0000000000096500 <CUSBAudioMixerUnit::CUSBAudioMixerUnit(TUSBAudioControlInterfaceDescriptor const*, bool)>:
   96500:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   96504:	910003fd 	mov	x29, sp
   96508:	52800023 	mov	w3, #0x1                   	// #1
   9650c:	a90153f3 	stp	x19, x20, [sp, #16]
   96510:	aa0003f3 	mov	x19, x0
   96514:	aa0103f4 	mov	x20, x1
   96518:	52800001 	mov	w1, #0x0                   	// #0
   9651c:	a9025bf5 	stp	x21, x22, [sp, #32]
   96520:	91003015 	add	x21, x0, #0xc
   96524:	12001c56 	and	w22, w2, #0xff
   96528:	aa1503e0 	mov	x0, x21
   9652c:	d2800142 	mov	x2, #0xa                   	// #10
   96530:	b9000263 	str	w3, [x19]
   96534:	3900127f 	strb	wzr, [x19, #4]
   96538:	b9000a7f 	str	wzr, [x19, #8]
   9653c:	b9001a7f 	str	wzr, [x19, #24]
   96540:	940044aa 	bl	a77e8 <memset>
   96544:	b4000714 	cbz	x20, 96624 <CUSBAudioMixerUnit::CUSBAudioMixerUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x124>
   96548:	39400a80 	ldrb	w0, [x20, #2]
   9654c:	7100101f 	cmp	w0, #0x4
   96550:	54000761 	b.ne	9663c <CUSBAudioMixerUnit::CUSBAudioMixerUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x13c>  // b.any
   96554:	39400e80 	ldrb	w0, [x20, #3]
   96558:	34000356 	cbz	w22, 965c0 <CUSBAudioMixerUnit::CUSBAudioMixerUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0xc0>
   9655c:	340007c0 	cbz	w0, 96654 <CUSBAudioMixerUnit::CUSBAudioMixerUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x154>
   96560:	39401282 	ldrb	w2, [x20, #4]
   96564:	39001260 	strb	w0, [x19, #4]
   96568:	7100285f 	cmp	w2, #0xa
   9656c:	54000808 	b.hi	9666c <CUSBAudioMixerUnit::CUSBAudioMixerUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x16c>  // b.pmore
   96570:	b9000a62 	str	w2, [x19, #8]
   96574:	d2800000 	mov	x0, #0x0                   	// #0
   96578:	91001681 	add	x1, x20, #0x5
   9657c:	34000102 	cbz	w2, 9659c <CUSBAudioMixerUnit::CUSBAudioMixerUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x9c>
   96580:	38606aa3 	ldrb	w3, [x21, x0]
   96584:	38606824 	ldrb	w4, [x1, x0]
   96588:	35000423 	cbnz	w3, 9660c <CUSBAudioMixerUnit::CUSBAudioMixerUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x10c>
   9658c:	38206aa4 	strb	w4, [x21, x0]
   96590:	91000400 	add	x0, x0, #0x1
   96594:	6b00005f 	cmp	w2, w0
   96598:	54ffff48 	b.hi	96580 <CUSBAudioMixerUnit::CUSBAudioMixerUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x80>  // b.pmore
   9659c:	11001442 	add	w2, w2, #0x5
   965a0:	38624a80 	ldrb	w0, [x20, w2, uxtw]
   965a4:	7101901f 	cmp	w0, #0x64
   965a8:	540006e8 	b.hi	96684 <CUSBAudioMixerUnit::CUSBAudioMixerUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x184>  // b.pmore
   965ac:	a9425bf5 	ldp	x21, x22, [sp, #32]
   965b0:	b9001a60 	str	w0, [x19, #24]
   965b4:	a94153f3 	ldp	x19, x20, [sp, #16]
   965b8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   965bc:	d65f03c0 	ret
   965c0:	340004a0 	cbz	w0, 96654 <CUSBAudioMixerUnit::CUSBAudioMixerUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x154>
   965c4:	39401282 	ldrb	w2, [x20, #4]
   965c8:	39001260 	strb	w0, [x19, #4]
   965cc:	7100285f 	cmp	w2, #0xa
   965d0:	540004e8 	b.hi	9666c <CUSBAudioMixerUnit::CUSBAudioMixerUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x16c>  // b.pmore
   965d4:	b9000a62 	str	w2, [x19, #8]
   965d8:	d2800000 	mov	x0, #0x0                   	// #0
   965dc:	91001681 	add	x1, x20, #0x5
   965e0:	34fffde2 	cbz	w2, 9659c <CUSBAudioMixerUnit::CUSBAudioMixerUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x9c>
   965e4:	38606aa3 	ldrb	w3, [x21, x0]
   965e8:	38606824 	ldrb	w4, [x1, x0]
   965ec:	35000103 	cbnz	w3, 9660c <CUSBAudioMixerUnit::CUSBAudioMixerUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x10c>
   965f0:	38206aa4 	strb	w4, [x21, x0]
   965f4:	91000400 	add	x0, x0, #0x1
   965f8:	6b00005f 	cmp	w2, w0
   965fc:	54fffd09 	b.ls	9659c <CUSBAudioMixerUnit::CUSBAudioMixerUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x9c>  // b.plast
   96600:	38606aa3 	ldrb	w3, [x21, x0]
   96604:	38606824 	ldrb	w4, [x1, x0]
   96608:	34ffff43 	cbz	w3, 965f0 <CUSBAudioMixerUnit::CUSBAudioMixerUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0xf0>
   9660c:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96610:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   96614:	9137e021 	add	x1, x1, #0xdf8
   96618:	9139c000 	add	x0, x0, #0xe70
   9661c:	52800882 	mov	w2, #0x44                  	// #68
   96620:	94001dc8 	bl	9dd40 <assertion_failed>
   96624:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96628:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   9662c:	9137e021 	add	x1, x1, #0xdf8
   96630:	913ba000 	add	x0, x0, #0xee8
   96634:	52801a42 	mov	w2, #0xd2                  	// #210
   96638:	94001dc2 	bl	9dd40 <assertion_failed>
   9663c:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96640:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   96644:	9137e021 	add	x1, x1, #0xdf8
   96648:	913d0000 	add	x0, x0, #0xf40
   9664c:	52801a62 	mov	w2, #0xd3                  	// #211
   96650:	94001dbc 	bl	9dd40 <assertion_failed>
   96654:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96658:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   9665c:	9137e021 	add	x1, x1, #0xdf8
   96660:	91386000 	add	x0, x0, #0xe18
   96664:	52800602 	mov	w2, #0x30                  	// #48
   96668:	94001db6 	bl	9dd40 <assertion_failed>
   9666c:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96670:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   96674:	9137e021 	add	x1, x1, #0xdf8
   96678:	9138c000 	add	x0, x0, #0xe30
   9667c:	52800782 	mov	w2, #0x3c                  	// #60
   96680:	94001db0 	bl	9dd40 <assertion_failed>
   96684:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96688:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   9668c:	9137e021 	add	x1, x1, #0xdf8
   96690:	913a6000 	add	x0, x0, #0xe98
   96694:	52800ba2 	mov	w2, #0x5d                  	// #93
   96698:	94001daa 	bl	9dd40 <assertion_failed>
   9669c:	d503201f 	nop

00000000000966a0 <CUSBAudioSelectorUnit::CUSBAudioSelectorUnit(TUSBAudioControlInterfaceDescriptor const*, bool)>:
   966a0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   966a4:	910003fd 	mov	x29, sp
   966a8:	52800043 	mov	w3, #0x2                   	// #2
   966ac:	a90153f3 	stp	x19, x20, [sp, #16]
   966b0:	aa0003f4 	mov	x20, x0
   966b4:	aa0103f3 	mov	x19, x1
   966b8:	52800001 	mov	w1, #0x0                   	// #0
   966bc:	a9025bf5 	stp	x21, x22, [sp, #32]
   966c0:	91003015 	add	x21, x0, #0xc
   966c4:	12001c56 	and	w22, w2, #0xff
   966c8:	aa1503e0 	mov	x0, x21
   966cc:	d2800142 	mov	x2, #0xa                   	// #10
   966d0:	b9000283 	str	w3, [x20]
   966d4:	3900129f 	strb	wzr, [x20, #4]
   966d8:	b9000a9f 	str	wzr, [x20, #8]
   966dc:	b9001a9f 	str	wzr, [x20, #24]
   966e0:	94004442 	bl	a77e8 <memset>
   966e4:	b4000673 	cbz	x19, 967b0 <CUSBAudioSelectorUnit::CUSBAudioSelectorUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x110>
   966e8:	39400a60 	ldrb	w0, [x19, #2]
   966ec:	7100141f 	cmp	w0, #0x5
   966f0:	540006c1 	b.ne	967c8 <CUSBAudioSelectorUnit::CUSBAudioSelectorUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x128>  // b.any
   966f4:	39400e60 	ldrb	w0, [x19, #3]
   966f8:	350002b6 	cbnz	w22, 9674c <CUSBAudioSelectorUnit::CUSBAudioSelectorUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0xac>
   966fc:	34000720 	cbz	w0, 967e0 <CUSBAudioSelectorUnit::CUSBAudioSelectorUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x140>
   96700:	39401261 	ldrb	w1, [x19, #4]
   96704:	39001280 	strb	w0, [x20, #4]
   96708:	7100283f 	cmp	w1, #0xa
   9670c:	54000768 	b.hi	967f8 <CUSBAudioSelectorUnit::CUSBAudioSelectorUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x158>  // b.pmore
   96710:	b9000a81 	str	w1, [x20, #8]
   96714:	34000141 	cbz	w1, 9673c <CUSBAudioSelectorUnit::CUSBAudioSelectorUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x9c>
   96718:	91001673 	add	x19, x19, #0x5
   9671c:	d2800000 	mov	x0, #0x0                   	// #0
   96720:	38606aa2 	ldrb	w2, [x21, x0]
   96724:	38606a63 	ldrb	w3, [x19, x0]
   96728:	35000382 	cbnz	w2, 96798 <CUSBAudioSelectorUnit::CUSBAudioSelectorUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0xf8>
   9672c:	38206aa3 	strb	w3, [x21, x0]
   96730:	91000400 	add	x0, x0, #0x1
   96734:	6b00003f 	cmp	w1, w0
   96738:	54ffff48 	b.hi	96720 <CUSBAudioSelectorUnit::CUSBAudioSelectorUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x80>  // b.pmore
   9673c:	a94153f3 	ldp	x19, x20, [sp, #16]
   96740:	a9425bf5 	ldp	x21, x22, [sp, #32]
   96744:	a8c37bfd 	ldp	x29, x30, [sp], #48
   96748:	d65f03c0 	ret
   9674c:	340004a0 	cbz	w0, 967e0 <CUSBAudioSelectorUnit::CUSBAudioSelectorUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x140>
   96750:	39401261 	ldrb	w1, [x19, #4]
   96754:	39001280 	strb	w0, [x20, #4]
   96758:	7100283f 	cmp	w1, #0xa
   9675c:	540004e8 	b.hi	967f8 <CUSBAudioSelectorUnit::CUSBAudioSelectorUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x158>  // b.pmore
   96760:	b9000a81 	str	w1, [x20, #8]
   96764:	91001673 	add	x19, x19, #0x5
   96768:	d2800000 	mov	x0, #0x0                   	// #0
   9676c:	34fffe81 	cbz	w1, 9673c <CUSBAudioSelectorUnit::CUSBAudioSelectorUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x9c>
   96770:	38606aa2 	ldrb	w2, [x21, x0]
   96774:	38606a63 	ldrb	w3, [x19, x0]
   96778:	35000102 	cbnz	w2, 96798 <CUSBAudioSelectorUnit::CUSBAudioSelectorUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0xf8>
   9677c:	38206aa3 	strb	w3, [x21, x0]
   96780:	91000400 	add	x0, x0, #0x1
   96784:	6b00003f 	cmp	w1, w0
   96788:	54fffda9 	b.ls	9673c <CUSBAudioSelectorUnit::CUSBAudioSelectorUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x9c>  // b.plast
   9678c:	38606aa2 	ldrb	w2, [x21, x0]
   96790:	38606a63 	ldrb	w3, [x19, x0]
   96794:	34ffff42 	cbz	w2, 9677c <CUSBAudioSelectorUnit::CUSBAudioSelectorUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0xdc>
   96798:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   9679c:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   967a0:	9137e021 	add	x1, x1, #0xdf8
   967a4:	9139c000 	add	x0, x0, #0xe70
   967a8:	52800882 	mov	w2, #0x44                  	// #68
   967ac:	94001d65 	bl	9dd40 <assertion_failed>
   967b0:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   967b4:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   967b8:	9137e021 	add	x1, x1, #0xdf8
   967bc:	913ba000 	add	x0, x0, #0xee8
   967c0:	52801fa2 	mov	w2, #0xfd                  	// #253
   967c4:	94001d5f 	bl	9dd40 <assertion_failed>
   967c8:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   967cc:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   967d0:	9137e021 	add	x1, x1, #0xdf8
   967d4:	913e2000 	add	x0, x0, #0xf88
   967d8:	52801fc2 	mov	w2, #0xfe                  	// #254
   967dc:	94001d59 	bl	9dd40 <assertion_failed>
   967e0:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   967e4:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   967e8:	9137e021 	add	x1, x1, #0xdf8
   967ec:	91386000 	add	x0, x0, #0xe18
   967f0:	52800602 	mov	w2, #0x30                  	// #48
   967f4:	94001d53 	bl	9dd40 <assertion_failed>
   967f8:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   967fc:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   96800:	9137e021 	add	x1, x1, #0xdf8
   96804:	9138c000 	add	x0, x0, #0xe30
   96808:	52800782 	mov	w2, #0x3c                  	// #60
   9680c:	94001d4d 	bl	9dd40 <assertion_failed>

0000000000096810 <CUSBAudioFeatureUnit::CUSBAudioFeatureUnit(TUSBAudioControlInterfaceDescriptor const*, bool)>:
   96810:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   96814:	910003fd 	mov	x29, sp
   96818:	a90153f3 	stp	x19, x20, [sp, #16]
   9681c:	52800074 	mov	w20, #0x3                   	// #3
   96820:	aa0103f3 	mov	x19, x1
   96824:	52800001 	mov	w1, #0x0                   	// #0
   96828:	a9025bf5 	stp	x21, x22, [sp, #32]
   9682c:	aa0003f5 	mov	x21, x0
   96830:	12001c56 	and	w22, w2, #0xff
   96834:	91003000 	add	x0, x0, #0xc
   96838:	d2800142 	mov	x2, #0xa                   	// #10
   9683c:	b90002b4 	str	w20, [x21]
   96840:	390012bf 	strb	wzr, [x21, #4]
   96844:	b9000abf 	str	wzr, [x21, #8]
   96848:	b9001abf 	str	wzr, [x21, #24]
   9684c:	940043e7 	bl	a77e8 <memset>
   96850:	b4000cb3 	cbz	x19, 969e4 <CUSBAudioFeatureUnit::CUSBAudioFeatureUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x1d4>
   96854:	39400a60 	ldrb	w0, [x19, #2]
   96858:	7100181f 	cmp	w0, #0x6
   9685c:	54000d01 	b.ne	969fc <CUSBAudioFeatureUnit::CUSBAudioFeatureUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x1ec>  // b.any
   96860:	39400e60 	ldrb	w0, [x19, #3]
   96864:	35000656 	cbnz	w22, 9692c <CUSBAudioFeatureUnit::CUSBAudioFeatureUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x11c>
   96868:	34000d60 	cbz	w0, 96a14 <CUSBAudioFeatureUnit::CUSBAudioFeatureUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x204>
   9686c:	52800022 	mov	w2, #0x1                   	// #1
   96870:	394032a1 	ldrb	w1, [x21, #12]
   96874:	390012a0 	strb	w0, [x21, #4]
   96878:	b9000aa2 	str	w2, [x21, #8]
   9687c:	39401260 	ldrb	w0, [x19, #4]
   96880:	35000d61 	cbnz	w1, 96a2c <CUSBAudioFeatureUnit::CUSBAudioFeatureUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x21c>
   96884:	390032a0 	strb	w0, [x21, #12]
   96888:	39401665 	ldrb	w5, [x19, #5]
   9688c:	710040bf 	cmp	w5, #0x10
   96890:	54000da8 	b.hi	96a44 <CUSBAudioFeatureUnit::CUSBAudioFeatureUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x234>  // b.pmore
   96894:	39400260 	ldrb	w0, [x19]
   96898:	11001ca1 	add	w1, w5, #0x7
   9689c:	6b01001f 	cmp	w0, w1
   968a0:	54000f63 	b.cc	96a8c <CUSBAudioFeatureUnit::CUSBAudioFeatureUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x27c>  // b.lo, b.ul, b.last
   968a4:	51001c08 	sub	w8, w0, #0x7
   968a8:	4b050108 	sub	w8, w8, w5
   968ac:	1ac50908 	udiv	w8, w8, w5
   968b0:	7101911f 	cmp	w8, #0x64
   968b4:	54000f88 	b.hi	96aa4 <CUSBAudioFeatureUnit::CUSBAudioFeatureUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x294>  // b.pmore
   968b8:	91001a61 	add	x1, x19, #0x6
   968bc:	531d70a5 	lsl	w5, w5, #3
   968c0:	b9001aa8 	str	w8, [x21, #24]
   968c4:	910072a9 	add	x9, x21, #0x1c
   968c8:	aa0103e6 	mov	x6, x1
   968cc:	d2800007 	mov	x7, #0x0                   	// #0
   968d0:	11000508 	add	w8, w8, #0x1
   968d4:	d503201f 	nop
   968d8:	52800003 	mov	w3, #0x0                   	// #0
   968dc:	52800004 	mov	w4, #0x0                   	// #0
   968e0:	350001a5 	cbnz	w5, 96914 <CUSBAudioFeatureUnit::CUSBAudioFeatureUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x104>
   968e4:	14000037 	b	969c0 <CUSBAudioFeatureUnit::CUSBAudioFeatureUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x1b0>
   968e8:	38676820 	ldrb	w0, [x1, x7]
   968ec:	92403c00 	and	x0, x0, #0xffff
   968f0:	531f7862 	lsl	w2, w3, #1
   968f4:	9ac32400 	lsr	x0, x0, x3
   968f8:	1ac22282 	lsl	w2, w20, w2
   968fc:	f240001f 	tst	x0, #0x1
   96900:	11000463 	add	w3, w3, #0x1
   96904:	2a020080 	orr	w0, w4, w2
   96908:	1a841004 	csel	w4, w0, w4, ne	// ne = any
   9690c:	6b0300bf 	cmp	w5, w3
   96910:	54000580 	b.eq	969c0 <CUSBAudioFeatureUnit::CUSBAudioFeatureUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x1b0>  // b.none
   96914:	710020bf 	cmp	w5, #0x8
   96918:	54fffe89 	b.ls	968e8 <CUSBAudioFeatureUnit::CUSBAudioFeatureUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0xd8>  // b.plast
   9691c:	394004c2 	ldrb	w2, [x6, #1]
   96920:	394000c0 	ldrb	w0, [x6]
   96924:	33185c40 	bfi	w0, w2, #8, #24
   96928:	17fffff1 	b	968ec <CUSBAudioFeatureUnit::CUSBAudioFeatureUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0xdc>
   9692c:	34000740 	cbz	w0, 96a14 <CUSBAudioFeatureUnit::CUSBAudioFeatureUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x204>
   96930:	52800022 	mov	w2, #0x1                   	// #1
   96934:	394032a1 	ldrb	w1, [x21, #12]
   96938:	390012a0 	strb	w0, [x21, #4]
   9693c:	b9000aa2 	str	w2, [x21, #8]
   96940:	39401262 	ldrb	w2, [x19, #4]
   96944:	35000741 	cbnz	w1, 96a2c <CUSBAudioFeatureUnit::CUSBAudioFeatureUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x21c>
   96948:	390032a2 	strb	w2, [x21, #12]
   9694c:	39400260 	ldrb	w0, [x19]
   96950:	7100241f 	cmp	w0, #0x9
   96954:	54000849 	b.ls	96a5c <CUSBAudioFeatureUnit::CUSBAudioFeatureUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x24c>  // b.plast
   96958:	51002800 	sub	w0, w0, #0xa
   9695c:	f240041f 	tst	x0, #0x3
   96960:	540008a1 	b.ne	96a74 <CUSBAudioFeatureUnit::CUSBAudioFeatureUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x264>  // b.any
   96964:	13027c01 	asr	w1, w0, #2
   96968:	910072a9 	add	x9, x21, #0x1c
   9696c:	11000425 	add	w5, w1, #0x1
   96970:	d2800000 	mov	x0, #0x0                   	// #0
   96974:	93407ca5 	sxtw	x5, w5
   96978:	b9001aa1 	str	w1, [x21, #24]
   9697c:	d503201f 	nop
   96980:	8b204a61 	add	x1, x19, w0, uxtw #2
   96984:	39401424 	ldrb	w4, [x1, #5]
   96988:	39401823 	ldrb	w3, [x1, #6]
   9698c:	39401c22 	ldrb	w2, [x1, #7]
   96990:	39402021 	ldrb	w1, [x1, #8]
   96994:	aa032083 	orr	x3, x4, x3, lsl #8
   96998:	aa024062 	orr	x2, x3, x2, lsl #16
   9699c:	aa016041 	orr	x1, x2, x1, lsl #24
   969a0:	b8207921 	str	w1, [x9, x0, lsl #2]
   969a4:	91000400 	add	x0, x0, #0x1
   969a8:	eb0000bf 	cmp	x5, x0
   969ac:	54fffea1 	b.ne	96980 <CUSBAudioFeatureUnit::CUSBAudioFeatureUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0x170>  // b.any
   969b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   969b4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   969b8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   969bc:	d65f03c0 	ret
   969c0:	b8277924 	str	w4, [x9, x7, lsl #2]
   969c4:	910004e7 	add	x7, x7, #0x1
   969c8:	910008c6 	add	x6, x6, #0x2
   969cc:	eb07011f 	cmp	x8, x7
   969d0:	54fff841 	b.ne	968d8 <CUSBAudioFeatureUnit::CUSBAudioFeatureUnit(TUSBAudioControlInterfaceDescriptor const*, bool)+0xc8>  // b.any
   969d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   969d8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   969dc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   969e0:	d65f03c0 	ret
   969e4:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   969e8:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   969ec:	9137e021 	add	x1, x1, #0xdf8
   969f0:	913ba000 	add	x0, x0, #0xee8
   969f4:	52802382 	mov	w2, #0x11c                 	// #284
   969f8:	94001cd2 	bl	9dd40 <assertion_failed>
   969fc:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96a00:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   96a04:	9137e021 	add	x1, x1, #0xdf8
   96a08:	913f4000 	add	x0, x0, #0xfd0
   96a0c:	528023a2 	mov	w2, #0x11d                 	// #285
   96a10:	94001ccc 	bl	9dd40 <assertion_failed>
   96a14:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96a18:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   96a1c:	9137e021 	add	x1, x1, #0xdf8
   96a20:	91386000 	add	x0, x0, #0xe18
   96a24:	52800602 	mov	w2, #0x30                  	// #48
   96a28:	94001cc6 	bl	9dd40 <assertion_failed>
   96a2c:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96a30:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   96a34:	9137e021 	add	x1, x1, #0xdf8
   96a38:	9139c000 	add	x0, x0, #0xe70
   96a3c:	52800882 	mov	w2, #0x44                  	// #68
   96a40:	94001cc0 	bl	9dd40 <assertion_failed>
   96a44:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96a48:	d00000e0 	adrp	x0, b4000 <_etext+0x3158>
   96a4c:	9137e021 	add	x1, x1, #0xdf8
   96a50:	91014000 	add	x0, x0, #0x50
   96a54:	52802662 	mov	w2, #0x133                 	// #307
   96a58:	94001cba 	bl	9dd40 <assertion_failed>
   96a5c:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96a60:	d00000e0 	adrp	x0, b4000 <_etext+0x3158>
   96a64:	9137e021 	add	x1, x1, #0xdf8
   96a68:	91006000 	add	x0, x0, #0x18
   96a6c:	52802482 	mov	w2, #0x124                 	// #292
   96a70:	94001cb4 	bl	9dd40 <assertion_failed>
   96a74:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96a78:	d00000e0 	adrp	x0, b4000 <_etext+0x3158>
   96a7c:	9137e021 	add	x1, x1, #0xdf8
   96a80:	9100c000 	add	x0, x0, #0x30
   96a84:	528024a2 	mov	w2, #0x125                 	// #293
   96a88:	94001cae 	bl	9dd40 <assertion_failed>
   96a8c:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96a90:	d00000e0 	adrp	x0, b4000 <_etext+0x3158>
   96a94:	9137e021 	add	x1, x1, #0xdf8
   96a98:	9101c000 	add	x0, x0, #0x70
   96a9c:	528026a2 	mov	w2, #0x135                 	// #309
   96aa0:	94001ca8 	bl	9dd40 <assertion_failed>
   96aa4:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96aa8:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   96aac:	9137e021 	add	x1, x1, #0xdf8
   96ab0:	913a6000 	add	x0, x0, #0xe98
   96ab4:	52800ba2 	mov	w2, #0x5d                  	// #93
   96ab8:	94001ca2 	bl	9dd40 <assertion_failed>
   96abc:	d503201f 	nop

0000000000096ac0 <CUSBAudioFeatureUnit::GetControlStatus(unsigned int, CUSBAudioFeatureUnit::TControl) const>:
   96ac0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   96ac4:	7101903f 	cmp	w1, #0x64
   96ac8:	910003fd 	mov	x29, sp
   96acc:	54000148 	b.hi	96af4 <CUSBAudioFeatureUnit::GetControlStatus(unsigned int, CUSBAudioFeatureUnit::TControl) const+0x34>  // b.pmore
   96ad0:	71003c5f 	cmp	w2, #0xf
   96ad4:	540001cc 	b.gt	96b0c <CUSBAudioFeatureUnit::GetControlStatus(unsigned int, CUSBAudioFeatureUnit::TControl) const+0x4c>
   96ad8:	8b214801 	add	x1, x0, w1, uxtw #2
   96adc:	b9401c20 	ldr	w0, [x1, #28]
   96ae0:	531f7842 	lsl	w2, w2, #1
   96ae4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   96ae8:	1ac22400 	lsr	w0, w0, w2
   96aec:	12000400 	and	w0, w0, #0x3
   96af0:	d65f03c0 	ret
   96af4:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96af8:	d00000e0 	adrp	x0, b4000 <_etext+0x3158>
   96afc:	9137e021 	add	x1, x1, #0xdf8
   96b00:	91026000 	add	x0, x0, #0x98
   96b04:	52802b02 	mov	w2, #0x158                 	// #344
   96b08:	94001c8e 	bl	9dd40 <assertion_failed>
   96b0c:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96b10:	d00000e0 	adrp	x0, b4000 <_etext+0x3158>
   96b14:	9137e021 	add	x1, x1, #0xdf8
   96b18:	9102e000 	add	x0, x0, #0xb8
   96b1c:	52802b22 	mov	w2, #0x159                 	// #345
   96b20:	94001c88 	bl	9dd40 <assertion_failed>
   96b24:	d503201f 	nop
   96b28:	d503201f 	nop
   96b2c:	d503201f 	nop

0000000000096b30 <CUSBAudioClockSource::CUSBAudioClockSource(TUSBAudioControlInterfaceDescriptor const*, bool)>:
   96b30:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   96b34:	910003fd 	mov	x29, sp
   96b38:	52800083 	mov	w3, #0x4                   	// #4
   96b3c:	a90153f3 	stp	x19, x20, [sp, #16]
   96b40:	aa0003f3 	mov	x19, x0
   96b44:	aa0103f4 	mov	x20, x1
   96b48:	91003000 	add	x0, x0, #0xc
   96b4c:	52800001 	mov	w1, #0x0                   	// #0
   96b50:	f90013f5 	str	x21, [sp, #32]
   96b54:	12001c55 	and	w21, w2, #0xff
   96b58:	d2800142 	mov	x2, #0xa                   	// #10
   96b5c:	b9000263 	str	w3, [x19]
   96b60:	3900127f 	strb	wzr, [x19, #4]
   96b64:	b9000a7f 	str	wzr, [x19, #8]
   96b68:	b9001a7f 	str	wzr, [x19, #24]
   96b6c:	9400431f 	bl	a77e8 <memset>
   96b70:	b4000194 	cbz	x20, 96ba0 <CUSBAudioClockSource::CUSBAudioClockSource(TUSBAudioControlInterfaceDescriptor const*, bool)+0x70>
   96b74:	39400a80 	ldrb	w0, [x20, #2]
   96b78:	7100281f 	cmp	w0, #0xa
   96b7c:	540001e1 	b.ne	96bb8 <CUSBAudioClockSource::CUSBAudioClockSource(TUSBAudioControlInterfaceDescriptor const*, bool)+0x88>  // b.any
   96b80:	34000295 	cbz	w21, 96bd0 <CUSBAudioClockSource::CUSBAudioClockSource(TUSBAudioControlInterfaceDescriptor const*, bool)+0xa0>
   96b84:	39400e80 	ldrb	w0, [x20, #3]
   96b88:	34000300 	cbz	w0, 96be8 <CUSBAudioClockSource::CUSBAudioClockSource(TUSBAudioControlInterfaceDescriptor const*, bool)+0xb8>
   96b8c:	39001260 	strb	w0, [x19, #4]
   96b90:	a94153f3 	ldp	x19, x20, [sp, #16]
   96b94:	f94013f5 	ldr	x21, [sp, #32]
   96b98:	a8c37bfd 	ldp	x29, x30, [sp], #48
   96b9c:	d65f03c0 	ret
   96ba0:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96ba4:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   96ba8:	9137e021 	add	x1, x1, #0xdf8
   96bac:	913ba000 	add	x0, x0, #0xee8
   96bb0:	52802c82 	mov	w2, #0x164                 	// #356
   96bb4:	94001c63 	bl	9dd40 <assertion_failed>
   96bb8:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96bbc:	d00000e0 	adrp	x0, b4000 <_etext+0x3158>
   96bc0:	9137e021 	add	x1, x1, #0xdf8
   96bc4:	91036000 	add	x0, x0, #0xd8
   96bc8:	52802ca2 	mov	w2, #0x165                 	// #357
   96bcc:	94001c5d 	bl	9dd40 <assertion_failed>
   96bd0:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96bd4:	d00000e0 	adrp	x0, b4000 <_etext+0x3158>
   96bd8:	9137e021 	add	x1, x1, #0xdf8
   96bdc:	91048000 	add	x0, x0, #0x120
   96be0:	52802cc2 	mov	w2, #0x166                 	// #358
   96be4:	94001c57 	bl	9dd40 <assertion_failed>
   96be8:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96bec:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   96bf0:	9137e021 	add	x1, x1, #0xdf8
   96bf4:	91386000 	add	x0, x0, #0xe18
   96bf8:	52800602 	mov	w2, #0x30                  	// #48
   96bfc:	94001c51 	bl	9dd40 <assertion_failed>

0000000000096c00 <CUSBAudioClockSelector::CUSBAudioClockSelector(TUSBAudioControlInterfaceDescriptor const*, bool)>:
   96c00:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   96c04:	910003fd 	mov	x29, sp
   96c08:	528000a3 	mov	w3, #0x5                   	// #5
   96c0c:	a90153f3 	stp	x19, x20, [sp, #16]
   96c10:	aa0003f3 	mov	x19, x0
   96c14:	aa0103f4 	mov	x20, x1
   96c18:	52800001 	mov	w1, #0x0                   	// #0
   96c1c:	a9025bf5 	stp	x21, x22, [sp, #32]
   96c20:	91003015 	add	x21, x0, #0xc
   96c24:	12001c56 	and	w22, w2, #0xff
   96c28:	aa1503e0 	mov	x0, x21
   96c2c:	d2800142 	mov	x2, #0xa                   	// #10
   96c30:	b9000263 	str	w3, [x19]
   96c34:	3900127f 	strb	wzr, [x19, #4]
   96c38:	b9000a7f 	str	wzr, [x19, #8]
   96c3c:	b9001a7f 	str	wzr, [x19, #24]
   96c40:	940042ea 	bl	a77e8 <memset>
   96c44:	b4000414 	cbz	x20, 96cc4 <CUSBAudioClockSelector::CUSBAudioClockSelector(TUSBAudioControlInterfaceDescriptor const*, bool)+0xc4>
   96c48:	39400a80 	ldrb	w0, [x20, #2]
   96c4c:	71002c1f 	cmp	w0, #0xb
   96c50:	54000461 	b.ne	96cdc <CUSBAudioClockSelector::CUSBAudioClockSelector(TUSBAudioControlInterfaceDescriptor const*, bool)+0xdc>  // b.any
   96c54:	34000516 	cbz	w22, 96cf4 <CUSBAudioClockSelector::CUSBAudioClockSelector(TUSBAudioControlInterfaceDescriptor const*, bool)+0xf4>
   96c58:	39400e80 	ldrb	w0, [x20, #3]
   96c5c:	34000580 	cbz	w0, 96d0c <CUSBAudioClockSelector::CUSBAudioClockSelector(TUSBAudioControlInterfaceDescriptor const*, bool)+0x10c>
   96c60:	39401281 	ldrb	w1, [x20, #4]
   96c64:	39001260 	strb	w0, [x19, #4]
   96c68:	7100283f 	cmp	w1, #0xa
   96c6c:	540005c8 	b.hi	96d24 <CUSBAudioClockSelector::CUSBAudioClockSelector(TUSBAudioControlInterfaceDescriptor const*, bool)+0x124>  // b.pmore
   96c70:	b9000a61 	str	w1, [x19, #8]
   96c74:	34000141 	cbz	w1, 96c9c <CUSBAudioClockSelector::CUSBAudioClockSelector(TUSBAudioControlInterfaceDescriptor const*, bool)+0x9c>
   96c78:	91001694 	add	x20, x20, #0x5
   96c7c:	d2800000 	mov	x0, #0x0                   	// #0
   96c80:	38606aa2 	ldrb	w2, [x21, x0]
   96c84:	38606a83 	ldrb	w3, [x20, x0]
   96c88:	35000122 	cbnz	w2, 96cac <CUSBAudioClockSelector::CUSBAudioClockSelector(TUSBAudioControlInterfaceDescriptor const*, bool)+0xac>
   96c8c:	38206aa3 	strb	w3, [x21, x0]
   96c90:	91000400 	add	x0, x0, #0x1
   96c94:	6b00003f 	cmp	w1, w0
   96c98:	54ffff48 	b.hi	96c80 <CUSBAudioClockSelector::CUSBAudioClockSelector(TUSBAudioControlInterfaceDescriptor const*, bool)+0x80>  // b.pmore
   96c9c:	a94153f3 	ldp	x19, x20, [sp, #16]
   96ca0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   96ca4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   96ca8:	d65f03c0 	ret
   96cac:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96cb0:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   96cb4:	9137e021 	add	x1, x1, #0xdf8
   96cb8:	9139c000 	add	x0, x0, #0xe70
   96cbc:	52800882 	mov	w2, #0x44                  	// #68
   96cc0:	94001c20 	bl	9dd40 <assertion_failed>
   96cc4:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96cc8:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   96ccc:	9137e021 	add	x1, x1, #0xdf8
   96cd0:	913ba000 	add	x0, x0, #0xee8
   96cd4:	52802e22 	mov	w2, #0x171                 	// #369
   96cd8:	94001c1a 	bl	9dd40 <assertion_failed>
   96cdc:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96ce0:	d00000e0 	adrp	x0, b4000 <_etext+0x3158>
   96ce4:	9137e021 	add	x1, x1, #0xdf8
   96ce8:	9104a000 	add	x0, x0, #0x128
   96cec:	52802e42 	mov	w2, #0x172                 	// #370
   96cf0:	94001c14 	bl	9dd40 <assertion_failed>
   96cf4:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96cf8:	d00000e0 	adrp	x0, b4000 <_etext+0x3158>
   96cfc:	9137e021 	add	x1, x1, #0xdf8
   96d00:	91048000 	add	x0, x0, #0x120
   96d04:	52802e62 	mov	w2, #0x173                 	// #371
   96d08:	94001c0e 	bl	9dd40 <assertion_failed>
   96d0c:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96d10:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   96d14:	9137e021 	add	x1, x1, #0xdf8
   96d18:	91386000 	add	x0, x0, #0xe18
   96d1c:	52800602 	mov	w2, #0x30                  	// #48
   96d20:	94001c08 	bl	9dd40 <assertion_failed>
   96d24:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96d28:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   96d2c:	9137e021 	add	x1, x1, #0xdf8
   96d30:	9138c000 	add	x0, x0, #0xe30
   96d34:	52800782 	mov	w2, #0x3c                  	// #60
   96d38:	94001c02 	bl	9dd40 <assertion_failed>
   96d3c:	d503201f 	nop

0000000000096d40 <CUSBAudioFunctionTopology::CUSBAudioFunctionTopology()>:
   96d40:	d2810002 	mov	x2, #0x800                 	// #2048
   96d44:	91002000 	add	x0, x0, #0x8
   96d48:	52800001 	mov	w1, #0x0                   	// #0
   96d4c:	140042a7 	b	a77e8 <memset>

0000000000096d50 <CUSBAudioFunctionTopology::~CUSBAudioFunctionTopology()>:
   96d50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   96d54:	910003fd 	mov	x29, sp
   96d58:	a90153f3 	stp	x19, x20, [sp, #16]
   96d5c:	91002013 	add	x19, x0, #0x8
   96d60:	91202014 	add	x20, x0, #0x808
   96d64:	d503201f 	nop
   96d68:	d2800381 	mov	x1, #0x1c                  	// #28
   96d6c:	f9400260 	ldr	x0, [x19]
   96d70:	b4000040 	cbz	x0, 96d78 <CUSBAudioFunctionTopology::~CUSBAudioFunctionTopology()+0x28>
   96d74:	94004563 	bl	a8300 <operator delete(void*, unsigned long)>
   96d78:	f800867f 	str	xzr, [x19], #8
   96d7c:	eb14027f 	cmp	x19, x20
   96d80:	54ffff41 	b.ne	96d68 <CUSBAudioFunctionTopology::~CUSBAudioFunctionTopology()+0x18>  // b.any
   96d84:	a94153f3 	ldp	x19, x20, [sp, #16]
   96d88:	a8c27bfd 	ldp	x29, x30, [sp], #32
   96d8c:	d65f03c0 	ret

0000000000096d90 <CUSBAudioFunctionTopology::GetEntity(unsigned char) const>:
   96d90:	8b210c00 	add	x0, x0, w1, uxtb #3
   96d94:	f9400400 	ldr	x0, [x0, #8]
   96d98:	d65f03c0 	ret
   96d9c:	d503201f 	nop

0000000000096da0 <CUSBAudioFunctionTopology::FindEntity(CUSBAudioEntity::TEntityType, unsigned int) const>:
   96da0:	91002003 	add	x3, x0, #0x8
   96da4:	91202006 	add	x6, x0, #0x808
   96da8:	14000004 	b	96db8 <CUSBAudioFunctionTopology::FindEntity(CUSBAudioEntity::TEntityType, unsigned int) const+0x18>
   96dac:	2a0503e2 	mov	w2, w5
   96db0:	eb06007f 	cmp	x3, x6
   96db4:	54000140 	b.eq	96ddc <CUSBAudioFunctionTopology::FindEntity(CUSBAudioEntity::TEntityType, unsigned int) const+0x3c>  // b.none
   96db8:	f9400060 	ldr	x0, [x3]
   96dbc:	51000445 	sub	w5, w2, #0x1
   96dc0:	91002063 	add	x3, x3, #0x8
   96dc4:	b4ffff60 	cbz	x0, 96db0 <CUSBAudioFunctionTopology::FindEntity(CUSBAudioEntity::TEntityType, unsigned int) const+0x10>
   96dc8:	b9400004 	ldr	w4, [x0]
   96dcc:	6b01009f 	cmp	w4, w1
   96dd0:	54ffff01 	b.ne	96db0 <CUSBAudioFunctionTopology::FindEntity(CUSBAudioEntity::TEntityType, unsigned int) const+0x10>  // b.any
   96dd4:	35fffec2 	cbnz	w2, 96dac <CUSBAudioFunctionTopology::FindEntity(CUSBAudioEntity::TEntityType, unsigned int) const+0xc>
   96dd8:	d65f03c0 	ret
   96ddc:	d2800000 	mov	x0, #0x0                   	// #0
   96de0:	d65f03c0 	ret
   96de4:	d503201f 	nop
   96de8:	d503201f 	nop
   96dec:	d503201f 	nop

0000000000096df0 <CUSBAudioFunctionTopology::FindUpstream(CUSBAudioEntity*, CUSBAudioEntity*) const>:
   96df0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   96df4:	910003fd 	mov	x29, sp
   96df8:	b4000781 	cbz	x1, 96ee8 <CUSBAudioFunctionTopology::FindUpstream(CUSBAudioEntity*, CUSBAudioEntity*) const+0xf8>
   96dfc:	a90153f3 	stp	x19, x20, [sp, #16]
   96e00:	a9025bf5 	stp	x21, x22, [sp, #32]
   96e04:	aa0203f5 	mov	x21, x2
   96e08:	b4000842 	cbz	x2, 96f10 <CUSBAudioFunctionTopology::FindUpstream(CUSBAudioEntity*, CUSBAudioEntity*) const+0x120>
   96e0c:	aa0003f6 	mov	x22, x0
   96e10:	aa0103f4 	mov	x20, x1
   96e14:	b9400820 	ldr	w0, [x1, #8]
   96e18:	d2800013 	mov	x19, #0x0                   	// #0
   96e1c:	f90023f9 	str	x25, [sp, #64]
   96e20:	91003039 	add	x25, x1, #0xc
   96e24:	34000480 	cbz	w0, 96eb4 <CUSBAudioFunctionTopology::FindUpstream(CUSBAudioEntity*, CUSBAudioEntity*) const+0xc4>
   96e28:	a90363f7 	stp	x23, x24, [sp, #48]
   96e2c:	d00000f8 	adrp	x24, b4000 <_etext+0x3158>
   96e30:	91064318 	add	x24, x24, #0x190
   96e34:	b0000117 	adrp	x23, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   96e38:	9112c2f7 	add	x23, x23, #0x4b0
   96e3c:	1400000c 	b	96e6c <CUSBAudioFunctionTopology::FindUpstream(CUSBAudioEntity*, CUSBAudioEntity*) const+0x7c>
   96e40:	eb0102bf 	cmp	x21, x1
   96e44:	54000440 	b.eq	96ecc <CUSBAudioFunctionTopology::FindUpstream(CUSBAudioEntity*, CUSBAudioEntity*) const+0xdc>  // b.none
   96e48:	aa1503e2 	mov	x2, x21
   96e4c:	aa1603e0 	mov	x0, x22
   96e50:	97ffffe8 	bl	96df0 <CUSBAudioFunctionTopology::FindUpstream(CUSBAudioEntity*, CUSBAudioEntity*) const>
   96e54:	72001c1f 	tst	w0, #0xff
   96e58:	540003a1 	b.ne	96ecc <CUSBAudioFunctionTopology::FindUpstream(CUSBAudioEntity*, CUSBAudioEntity*) const+0xdc>  // b.any
   96e5c:	b9400a80 	ldr	w0, [x20, #8]
   96e60:	91000673 	add	x19, x19, #0x1
   96e64:	6b13001f 	cmp	w0, w19
   96e68:	54000249 	b.ls	96eb0 <CUSBAudioFunctionTopology::FindUpstream(CUSBAudioEntity*, CUSBAudioEntity*) const+0xc0>  // b.plast
   96e6c:	38736b23 	ldrb	w3, [x25, x19]
   96e70:	8b030ec3 	add	x3, x22, x3, lsl #3
   96e74:	f9400461 	ldr	x1, [x3, #8]
   96e78:	b5fffe41 	cbnz	x1, 96e40 <CUSBAudioFunctionTopology::FindUpstream(CUSBAudioEntity*, CUSBAudioEntity*) const+0x50>
   96e7c:	940022e5 	bl	9fa10 <CLogger::Get()>
   96e80:	b9400a81 	ldr	w1, [x20, #8]
   96e84:	6b13003f 	cmp	w1, w19
   96e88:	54000543 	b.cc	96f30 <CUSBAudioFunctionTopology::FindUpstream(CUSBAudioEntity*, CUSBAudioEntity*) const+0x140>  // b.lo, b.ul, b.last
   96e8c:	38736b24 	ldrb	w4, [x25, x19]
   96e90:	aa1803e3 	mov	x3, x24
   96e94:	52800042 	mov	w2, #0x2                   	// #2
   96e98:	aa1703e1 	mov	x1, x23
   96e9c:	91000673 	add	x19, x19, #0x1
   96ea0:	940024c8 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   96ea4:	b9400a80 	ldr	w0, [x20, #8]
   96ea8:	6b13001f 	cmp	w0, w19
   96eac:	54fffe08 	b.hi	96e6c <CUSBAudioFunctionTopology::FindUpstream(CUSBAudioEntity*, CUSBAudioEntity*) const+0x7c>  // b.pmore
   96eb0:	a94363f7 	ldp	x23, x24, [sp, #48]
   96eb4:	52800000 	mov	w0, #0x0                   	// #0
   96eb8:	a94153f3 	ldp	x19, x20, [sp, #16]
   96ebc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   96ec0:	f94023f9 	ldr	x25, [sp, #64]
   96ec4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   96ec8:	d65f03c0 	ret
   96ecc:	52800020 	mov	w0, #0x1                   	// #1
   96ed0:	a94153f3 	ldp	x19, x20, [sp, #16]
   96ed4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   96ed8:	a94363f7 	ldp	x23, x24, [sp, #48]
   96edc:	f94023f9 	ldr	x25, [sp, #64]
   96ee0:	a8c57bfd 	ldp	x29, x30, [sp], #80
   96ee4:	d65f03c0 	ret
   96ee8:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96eec:	d00000e0 	adrp	x0, b4000 <_etext+0x3158>
   96ef0:	a90153f3 	stp	x19, x20, [sp, #16]
   96ef4:	9137e021 	add	x1, x1, #0xdf8
   96ef8:	9105c000 	add	x0, x0, #0x170
   96efc:	528044e2 	mov	w2, #0x227                 	// #551
   96f00:	a9025bf5 	stp	x21, x22, [sp, #32]
   96f04:	a90363f7 	stp	x23, x24, [sp, #48]
   96f08:	f90023f9 	str	x25, [sp, #64]
   96f0c:	94001b8d 	bl	9dd40 <assertion_failed>
   96f10:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96f14:	d00000e0 	adrp	x0, b4000 <_etext+0x3158>
   96f18:	a90363f7 	stp	x23, x24, [sp, #48]
   96f1c:	9137e021 	add	x1, x1, #0xdf8
   96f20:	91060000 	add	x0, x0, #0x180
   96f24:	52804502 	mov	w2, #0x228                 	// #552
   96f28:	f90023f9 	str	x25, [sp, #64]
   96f2c:	94001b85 	bl	9dd40 <assertion_failed>
   96f30:	b00000e1 	adrp	x1, b3000 <_etext+0x2158>
   96f34:	b00000e0 	adrp	x0, b3000 <_etext+0x2158>
   96f38:	9137e021 	add	x1, x1, #0xdf8
   96f3c:	91396000 	add	x0, x0, #0xe58
   96f40:	52800ac2 	mov	w2, #0x56                  	// #86
   96f44:	94001b7f 	bl	9dd40 <assertion_failed>
   96f48:	d503201f 	nop
   96f4c:	d503201f 	nop

0000000000096f50 <CUSBAudioFunctionTopology::FindEntity(CUSBAudioEntity::TEntityType, CUSBAudioEntity*, bool) const>:
   96f50:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   96f54:	910003fd 	mov	x29, sp
   96f58:	a90153f3 	stp	x19, x20, [sp, #16]
   96f5c:	a9025bf5 	stp	x21, x22, [sp, #32]
   96f60:	a90363f7 	stp	x23, x24, [sp, #48]
   96f64:	f90023f9 	str	x25, [sp, #64]
   96f68:	b4000582 	cbz	x2, 97018 <CUSBAudioFunctionTopology::FindEntity(CUSBAudioEntity::TEntityType, CUSBAudioEntity*, bool) const+0xc8>
   96f6c:	aa0003f7 	mov	x23, x0
   96f70:	aa0203f8 	mov	x24, x2
   96f74:	12001c79 	and	w25, w3, #0xff
   96f78:	2a0103f6 	mov	w22, w1
   96f7c:	91002015 	add	x21, x0, #0x8
   96f80:	d2800013 	mov	x19, #0x0                   	// #0
   96f84:	1400000a 	b	96fac <CUSBAudioFunctionTopology::FindEntity(CUSBAudioEntity::TEntityType, CUSBAudioEntity*, bool) const+0x5c>
   96f88:	aa0103e2 	mov	x2, x1
   96f8c:	aa1703e0 	mov	x0, x23
   96f90:	aa1803e1 	mov	x1, x24
   96f94:	97ffff97 	bl	96df0 <CUSBAudioFunctionTopology::FindUpstream(CUSBAudioEntity*, CUSBAudioEntity*) const>
   96f98:	72001c1f 	tst	w0, #0xff
   96f9c:	54000201 	b.ne	96fdc <CUSBAudioFunctionTopology::FindEntity(CUSBAudioEntity::TEntityType, CUSBAudioEntity*, bool) const+0x8c>  // b.any
   96fa0:	91000673 	add	x19, x19, #0x1
   96fa4:	f104027f 	cmp	x19, #0x100
   96fa8:	540002a0 	b.eq	96ffc <CUSBAudioFunctionTopology::FindEntity(CUSBAudioEntity::TEntityType, CUSBAudioEntity*, bool) const+0xac>  // b.none
   96fac:	f8737aa1 	ldr	x1, [x21, x19, lsl #3]
   96fb0:	2a1303f4 	mov	w20, w19
   96fb4:	b4ffff61 	cbz	x1, 96fa0 <CUSBAudioFunctionTopology::FindEntity(CUSBAudioEntity::TEntityType, CUSBAudioEntity*, bool) const+0x50>
   96fb8:	b9400023 	ldr	w3, [x1]
   96fbc:	6b16007f 	cmp	w3, w22
   96fc0:	54ffff01 	b.ne	96fa0 <CUSBAudioFunctionTopology::FindEntity(CUSBAudioEntity::TEntityType, CUSBAudioEntity*, bool) const+0x50>  // b.any
   96fc4:	35fffe39 	cbnz	w25, 96f88 <CUSBAudioFunctionTopology::FindEntity(CUSBAudioEntity::TEntityType, CUSBAudioEntity*, bool) const+0x38>
   96fc8:	aa1803e2 	mov	x2, x24
   96fcc:	aa1703e0 	mov	x0, x23
   96fd0:	97ffff88 	bl	96df0 <CUSBAudioFunctionTopology::FindUpstream(CUSBAudioEntity*, CUSBAudioEntity*) const>
   96fd4:	72001c1f 	tst	w0, #0xff
   96fd8:	54fffe40 	b.eq	96fa0 <CUSBAudioFunctionTopology::FindEntity(CUSBAudioEntity::TEntityType, CUSBAudioEntity*, bool) const+0x50>  // b.none
   96fdc:	8b344ef4 	add	x20, x23, w20, uxtw #3
   96fe0:	f9400680 	ldr	x0, [x20, #8]
   96fe4:	a94153f3 	ldp	x19, x20, [sp, #16]
   96fe8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   96fec:	a94363f7 	ldp	x23, x24, [sp, #48]
   96ff0:	f94023f9 	ldr	x25, [sp, #64]
   96ff4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   96ff8:	d65f03c0 	ret
   96ffc:	d2800000 	mov	x0, #0x0                   	// #0
   97000:	a94153f3 	ldp	x19, x20, [sp, #16]
   97004:	a9425bf5 	ldp	x21, x22, [sp, #32]
   97008:	a94363f7 	ldp	x23, x24, [sp, #48]
   9700c:	f94023f9 	ldr	x25, [sp, #64]
   97010:	a8c57bfd 	ldp	x29, x30, [sp], #80
   97014:	d65f03c0 	ret
   97018:	900000e1 	adrp	x1, b3000 <_etext+0x2158>
   9701c:	b00000e0 	adrp	x0, b4000 <_etext+0x3158>
   97020:	9137e021 	add	x1, x1, #0xdf8
   97024:	9106c000 	add	x0, x0, #0x1b0
   97028:	52803e62 	mov	w2, #0x1f3                 	// #499
   9702c:	94001b45 	bl	9dd40 <assertion_failed>

0000000000097030 <CUSBAudioEntity::Dump()>:
   97030:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
   97034:	b00000e1 	adrp	x1, b4000 <_etext+0x3158>
   97038:	910003fd 	mov	x29, sp
   9703c:	91072021 	add	x1, x1, #0x1c8
   97040:	a90153f3 	stp	x19, x20, [sp, #16]
   97044:	aa0003f4 	mov	x20, x0
   97048:	910103e0 	add	x0, sp, #0x40
   9704c:	a9025bf5 	stp	x21, x22, [sp, #32]
   97050:	94003588 	bl	a4670 <CString::CString(char const*)>
   97054:	b9400a80 	ldr	w0, [x20, #8]
   97058:	34000480 	cbz	w0, 970e8 <CUSBAudioEntity::Dump()+0xb8>
   9705c:	910183e0 	add	x0, sp, #0x60
   97060:	900000f5 	adrp	x21, b3000 <_etext+0x2158>
   97064:	9135e2b5 	add	x21, x21, #0xd78
   97068:	f9001bf7 	str	x23, [sp, #48]
   9706c:	aa1403f7 	mov	x23, x20
   97070:	94003578 	bl	a4650 <CString::CString()>
   97074:	3840cee2 	ldrb	w2, [x23, #12]!
   97078:	aa1503e1 	mov	x1, x21
   9707c:	910183e0 	add	x0, sp, #0x60
   97080:	d2800013 	mov	x19, #0x0                   	// #0
   97084:	f00000d6 	adrp	x22, b2000 <_etext+0x1158>
   97088:	910e02d6 	add	x22, x22, #0x380
   9708c:	94003ba9 	bl	a5f30 <CString::Format(char const*, ...)>
   97090:	14000009 	b	970b4 <CUSBAudioEntity::Dump()+0x84>
   97094:	9400356f 	bl	a4650 <CString::CString()>
   97098:	38736ae2 	ldrb	w2, [x23, x19]
   9709c:	aa1503e1 	mov	x1, x21
   970a0:	910183e0 	add	x0, sp, #0x60
   970a4:	94003ba3 	bl	a5f30 <CString::Format(char const*, ...)>
   970a8:	aa1603e1 	mov	x1, x22
   970ac:	910103e0 	add	x0, sp, #0x40
   970b0:	94003608 	bl	a48d0 <CString::Append(char const*)>
   970b4:	910183e0 	add	x0, sp, #0x60
   970b8:	91000673 	add	x19, x19, #0x1
   970bc:	940035a9 	bl	a4760 <CString::operator char const*() const>
   970c0:	aa0003e1 	mov	x1, x0
   970c4:	910103e0 	add	x0, sp, #0x40
   970c8:	94003602 	bl	a48d0 <CString::Append(char const*)>
   970cc:	910183e0 	add	x0, sp, #0x60
   970d0:	94003524 	bl	a4560 <CString::~CString()>
   970d4:	b9400a81 	ldr	w1, [x20, #8]
   970d8:	910183e0 	add	x0, sp, #0x60
   970dc:	6b13003f 	cmp	w1, w19
   970e0:	54fffda8 	b.hi	97094 <CUSBAudioEntity::Dump()+0x64>  // b.pmore
   970e4:	f9401bf7 	ldr	x23, [sp, #48]
   970e8:	910103e0 	add	x0, sp, #0x40
   970ec:	940035f1 	bl	a48b0 <CString::GetLength() const>
   970f0:	f100181f 	cmp	x0, #0x6
   970f4:	54000329 	b.ls	97158 <CUSBAudioEntity::Dump()+0x128>  // b.plast
   970f8:	94002246 	bl	9fa10 <CLogger::Get()>
   970fc:	39401295 	ldrb	w21, [x20, #4]
   97100:	aa0003f3 	mov	x19, x0
   97104:	910103e0 	add	x0, sp, #0x40
   97108:	b9400296 	ldr	w22, [x20]
   9710c:	b9401a94 	ldr	w20, [x20, #24]
   97110:	94003594 	bl	a4760 <CString::operator char const*() const>
   97114:	b00000e3 	adrp	x3, b4000 <_etext+0x3158>
   97118:	90000101 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9711c:	aa0003e7 	mov	x7, x0
   97120:	2a1603e5 	mov	w5, w22
   97124:	2a1503e4 	mov	w4, w21
   97128:	aa1303e0 	mov	x0, x19
   9712c:	2a1403e6 	mov	w6, w20
   97130:	91074063 	add	x3, x3, #0x1d0
   97134:	9112c021 	add	x1, x1, #0x4b0
   97138:	52800082 	mov	w2, #0x4                   	// #4
   9713c:	94002421 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   97140:	910103e0 	add	x0, sp, #0x40
   97144:	94003507 	bl	a4560 <CString::~CString()>
   97148:	a94153f3 	ldp	x19, x20, [sp, #16]
   9714c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   97150:	a8c87bfd 	ldp	x29, x30, [sp], #128
   97154:	d65f03c0 	ret
   97158:	f00000c1 	adrp	x1, b2000 <_etext+0x1158>
   9715c:	91374021 	add	x1, x1, #0xdd0
   97160:	910103e0 	add	x0, sp, #0x40
   97164:	94003587 	bl	a4780 <CString::operator=(char const*)>
   97168:	17ffffe4 	b	970f8 <CUSBAudioEntity::Dump()+0xc8>
   9716c:	d503201f 	nop

0000000000097170 <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)>:
   97170:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   97174:	910003fd 	mov	x29, sp
   97178:	a90153f3 	stp	x19, x20, [sp, #16]
   9717c:	a9025bf5 	stp	x21, x22, [sp, #32]
   97180:	b40011e1 	cbz	x1, 973bc <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0x24c>
   97184:	aa0003f5 	mov	x21, x0
   97188:	aa0103f3 	mov	x19, x1
   9718c:	39400420 	ldrb	w0, [x1, #1]
   97190:	7100901f 	cmp	w0, #0x24
   97194:	54000761 	b.ne	97280 <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0x110>  // b.any
   97198:	90000116 	adrp	x22, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9719c:	9112c2d6 	add	x22, x22, #0x4b0
   971a0:	f9001bf7 	str	x23, [sp, #48]
   971a4:	b00000f7 	adrp	x23, b4000 <_etext+0x3158>
   971a8:	910882f7 	add	x23, x23, #0x220
   971ac:	d503201f 	nop
   971b0:	39400a62 	ldrb	w2, [x19, #2]
   971b4:	7100145f 	cmp	w2, #0x5
   971b8:	54000b40 	b.eq	97320 <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0x1b0>  // b.none
   971bc:	54000368 	b.hi	97228 <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0xb8>  // b.pmore
   971c0:	7100105f 	cmp	w2, #0x4
   971c4:	54000da0 	b.eq	97378 <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0x208>  // b.none
   971c8:	7100045f 	cmp	w2, #0x1
   971cc:	54000c88 	b.hi	9735c <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0x1ec>  // b.pmore
   971d0:	54000b61 	b.ne	9733c <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0x1cc>  // b.any
   971d4:	39400e61 	ldrb	w1, [x19, #3]
   971d8:	39401260 	ldrb	w0, [x19, #4]
   971dc:	2a002020 	orr	w0, w1, w0, lsl #8
   971e0:	7108001f 	cmp	w0, #0x200
   971e4:	1a9f17e0 	cset	w0, eq	// eq = none
   971e8:	390002a0 	strb	w0, [x21]
   971ec:	54000e00 	b.eq	973ac <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0x23c>  // b.none
   971f0:	39400e61 	ldrb	w1, [x19, #3]
   971f4:	39401260 	ldrb	w0, [x19, #4]
   971f8:	2a002020 	orr	w0, w1, w0, lsl #8
   971fc:	7104001f 	cmp	w0, #0x100
   97200:	54000ec1 	b.ne	973d8 <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0x268>  // b.any
   97204:	39401660 	ldrb	w0, [x19, #5]
   97208:	39401a61 	ldrb	w1, [x19, #6]
   9720c:	2a012001 	orr	w1, w0, w1, lsl #8
   97210:	39400260 	ldrb	w0, [x19]
   97214:	6b01001f 	cmp	w0, w1
   97218:	540002ab 	b.lt	9726c <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0xfc>  // b.tstop
   9721c:	52800000 	mov	w0, #0x0                   	// #0
   97220:	f9401bf7 	ldr	x23, [sp, #48]
   97224:	14000018 	b	97284 <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0x114>
   97228:	7100285f 	cmp	w2, #0xa
   9722c:	540006c0 	b.eq	97304 <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0x194>  // b.none
   97230:	71002c5f 	cmp	w2, #0xb
   97234:	54000301 	b.ne	97294 <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0x124>  // b.any
   97238:	d2800380 	mov	x0, #0x1c                  	// #28
   9723c:	94004409 	bl	a8260 <operator new(unsigned long)>
   97240:	394002a2 	ldrb	w2, [x21]
   97244:	aa1303e1 	mov	x1, x19
   97248:	aa0003f4 	mov	x20, x0
   9724c:	97fffe6d 	bl	96c00 <CUSBAudioClockSelector::CUSBAudioClockSelector(TUSBAudioControlInterfaceDescriptor const*, bool)>
   97250:	39401281 	ldrb	w1, [x20, #4]
   97254:	34000341 	cbz	w1, 972bc <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0x14c>
   97258:	8b210ea1 	add	x1, x21, w1, uxtb #3
   9725c:	f9400420 	ldr	x0, [x1, #8]
   97260:	b50009a0 	cbnz	x0, 97394 <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0x224>
   97264:	f9000434 	str	x20, [x1, #8]
   97268:	39400260 	ldrb	w0, [x19]
   9726c:	8b200273 	add	x19, x19, w0, uxtb
   97270:	39400660 	ldrb	w0, [x19, #1]
   97274:	7100901f 	cmp	w0, #0x24
   97278:	54fff9c0 	b.eq	971b0 <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0x40>  // b.none
   9727c:	f9401bf7 	ldr	x23, [sp, #48]
   97280:	52800020 	mov	w0, #0x1                   	// #1
   97284:	a94153f3 	ldp	x19, x20, [sp, #16]
   97288:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9728c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   97290:	d65f03c0 	ret
   97294:	7100185f 	cmp	w2, #0x6
   97298:	54000521 	b.ne	9733c <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0x1cc>  // b.any
   9729c:	d2803600 	mov	x0, #0x1b0                 	// #432
   972a0:	940043f0 	bl	a8260 <operator new(unsigned long)>
   972a4:	aa1303e1 	mov	x1, x19
   972a8:	394002a2 	ldrb	w2, [x21]
   972ac:	aa0003f4 	mov	x20, x0
   972b0:	97fffd58 	bl	96810 <CUSBAudioFeatureUnit::CUSBAudioFeatureUnit(TUSBAudioControlInterfaceDescriptor const*, bool)>
   972b4:	39401281 	ldrb	w1, [x20, #4]
   972b8:	35fffd01 	cbnz	w1, 97258 <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0xe8>
   972bc:	940021d5 	bl	9fa10 <CLogger::Get()>
   972c0:	b00000e3 	adrp	x3, b4000 <_etext+0x3158>
   972c4:	90000101 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   972c8:	9108e063 	add	x3, x3, #0x238
   972cc:	52800042 	mov	w2, #0x2                   	// #2
   972d0:	9112c021 	add	x1, x1, #0x4b0
   972d4:	940023bb 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   972d8:	aa1403e0 	mov	x0, x20
   972dc:	97ffff55 	bl	97030 <CUSBAudioEntity::Dump()>
   972e0:	aa1403e0 	mov	x0, x20
   972e4:	d2800381 	mov	x1, #0x1c                  	// #28
   972e8:	94004406 	bl	a8300 <operator delete(void*, unsigned long)>
   972ec:	52800000 	mov	w0, #0x0                   	// #0
   972f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   972f4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   972f8:	f9401bf7 	ldr	x23, [sp, #48]
   972fc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   97300:	d65f03c0 	ret
   97304:	d2800380 	mov	x0, #0x1c                  	// #28
   97308:	940043d6 	bl	a8260 <operator new(unsigned long)>
   9730c:	394002a2 	ldrb	w2, [x21]
   97310:	aa1303e1 	mov	x1, x19
   97314:	aa0003f4 	mov	x20, x0
   97318:	97fffe06 	bl	96b30 <CUSBAudioClockSource::CUSBAudioClockSource(TUSBAudioControlInterfaceDescriptor const*, bool)>
   9731c:	17ffffcd 	b	97250 <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0xe0>
   97320:	d2800380 	mov	x0, #0x1c                  	// #28
   97324:	940043cf 	bl	a8260 <operator new(unsigned long)>
   97328:	394002a2 	ldrb	w2, [x21]
   9732c:	aa1303e1 	mov	x1, x19
   97330:	aa0003f4 	mov	x20, x0
   97334:	97fffcdb 	bl	966a0 <CUSBAudioSelectorUnit::CUSBAudioSelectorUnit(TUSBAudioControlInterfaceDescriptor const*, bool)>
   97338:	17ffffc6 	b	97250 <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0xe0>
   9733c:	940021b5 	bl	9fa10 <CLogger::Get()>
   97340:	39400a64 	ldrb	w4, [x19, #2]
   97344:	aa1703e3 	mov	x3, x23
   97348:	52800042 	mov	w2, #0x2                   	// #2
   9734c:	aa1603e1 	mov	x1, x22
   97350:	9400239c 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   97354:	39400260 	ldrb	w0, [x19]
   97358:	17ffffc5 	b	9726c <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0xfc>
   9735c:	d2800480 	mov	x0, #0x24                  	// #36
   97360:	940043c0 	bl	a8260 <operator new(unsigned long)>
   97364:	394002a2 	ldrb	w2, [x21]
   97368:	aa1303e1 	mov	x1, x19
   9736c:	aa0003f4 	mov	x20, x0
   97370:	97fffbdc 	bl	962e0 <CUSBAudioTerminal::CUSBAudioTerminal(TUSBAudioControlInterfaceDescriptor const*, bool)>
   97374:	17ffffb7 	b	97250 <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0xe0>
   97378:	d2800380 	mov	x0, #0x1c                  	// #28
   9737c:	940043b9 	bl	a8260 <operator new(unsigned long)>
   97380:	394002a2 	ldrb	w2, [x21]
   97384:	aa1303e1 	mov	x1, x19
   97388:	aa0003f4 	mov	x20, x0
   9738c:	97fffc5d 	bl	96500 <CUSBAudioMixerUnit::CUSBAudioMixerUnit(TUSBAudioControlInterfaceDescriptor const*, bool)>
   97390:	17ffffb0 	b	97250 <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0xe0>
   97394:	900000e1 	adrp	x1, b3000 <_etext+0x2158>
   97398:	b00000e0 	adrp	x0, b4000 <_etext+0x3158>
   9739c:	9137e021 	add	x1, x1, #0xdf8
   973a0:	91094000 	add	x0, x0, #0x250
   973a4:	52803bc2 	mov	w2, #0x1de                 	// #478
   973a8:	94001a66 	bl	9dd40 <assertion_failed>
   973ac:	39401a60 	ldrb	w0, [x19, #6]
   973b0:	39401e61 	ldrb	w1, [x19, #7]
   973b4:	2a012001 	orr	w1, w0, w1, lsl #8
   973b8:	17ffff96 	b	97210 <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0xa0>
   973bc:	900000e1 	adrp	x1, b3000 <_etext+0x2158>
   973c0:	900000e0 	adrp	x0, b3000 <_etext+0x2158>
   973c4:	f9001bf7 	str	x23, [sp, #48]
   973c8:	9137e021 	add	x1, x1, #0xdf8
   973cc:	913ba000 	add	x0, x0, #0xee8
   973d0:	52803262 	mov	w2, #0x193                 	// #403
   973d4:	94001a5b 	bl	9dd40 <assertion_failed>
   973d8:	9400218e 	bl	9fa10 <CLogger::Get()>
   973dc:	b00000e3 	adrp	x3, b4000 <_etext+0x3158>
   973e0:	90000101 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   973e4:	9107e063 	add	x3, x3, #0x1f8
   973e8:	9112c021 	add	x1, x1, #0x4b0
   973ec:	52800042 	mov	w2, #0x2                   	// #2
   973f0:	94002374 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   973f4:	52800000 	mov	w0, #0x0                   	// #0
   973f8:	f9401bf7 	ldr	x23, [sp, #48]
   973fc:	17ffffa2 	b	97284 <CUSBAudioFunctionTopology::Parse(TUSBAudioControlInterfaceDescriptor const*)+0x114>

0000000000097400 <CUSBAudioFunctionTopology::Dump()>:
   97400:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   97404:	910003fd 	mov	x29, sp
   97408:	a90153f3 	stp	x19, x20, [sp, #16]
   9740c:	aa0003f4 	mov	x20, x0
   97410:	91002293 	add	x19, x20, #0x8
   97414:	91202294 	add	x20, x20, #0x808
   97418:	9400217e 	bl	9fa10 <CLogger::Get()>
   9741c:	b00000e3 	adrp	x3, b4000 <_etext+0x3158>
   97420:	90000101 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   97424:	91098063 	add	x3, x3, #0x260
   97428:	9112c021 	add	x1, x1, #0x4b0
   9742c:	52800082 	mov	w2, #0x4                   	// #4
   97430:	94002364 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   97434:	d503201f 	nop
   97438:	f9400260 	ldr	x0, [x19]
   9743c:	91002273 	add	x19, x19, #0x8
   97440:	b4000040 	cbz	x0, 97448 <CUSBAudioFunctionTopology::Dump()+0x48>
   97444:	97fffefb 	bl	97030 <CUSBAudioEntity::Dump()>
   97448:	eb14027f 	cmp	x19, x20
   9744c:	54ffff61 	b.ne	97438 <CUSBAudioFunctionTopology::Dump()+0x38>  // b.any
   97450:	a94153f3 	ldp	x19, x20, [sp, #16]
   97454:	a8c27bfd 	ldp	x29, x30, [sp], #32
   97458:	d65f03c0 	ret
   9745c:	00000000 	udf	#0

0000000000097460 <CLAN7800Device::GetMACAddress() const>:
   97460:	91010000 	add	x0, x0, #0x40
   97464:	d65f03c0 	ret
   97468:	d503201f 	nop
   9746c:	d503201f 	nop

0000000000097470 <CLAN7800Device::~CLAN7800Device()>:
   97470:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   97474:	90000102 	adrp	x2, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   97478:	91134042 	add	x2, x2, #0x4d0
   9747c:	910003fd 	mov	x29, sp
   97480:	90000101 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   97484:	9115a021 	add	x1, x1, #0x568
   97488:	a90153f3 	stp	x19, x20, [sp, #16]
   9748c:	aa0003f3 	mov	x19, x0
   97490:	f9000002 	str	x2, [x0]
   97494:	f9001401 	str	x1, [x0, #40]
   97498:	f9401c14 	ldr	x20, [x0, #56]
   9749c:	b40000d4 	cbz	x20, 974b4 <CLAN7800Device::~CLAN7800Device()+0x44>
   974a0:	aa1403e0 	mov	x0, x20
   974a4:	97ffcb8f 	bl	8a2e0 <CUSBEndpoint::~CUSBEndpoint()>
   974a8:	aa1403e0 	mov	x0, x20
   974ac:	d2800401 	mov	x1, #0x20                  	// #32
   974b0:	94004394 	bl	a8300 <operator delete(void*, unsigned long)>
   974b4:	f9001e7f 	str	xzr, [x19, #56]
   974b8:	f9401a74 	ldr	x20, [x19, #48]
   974bc:	b40000d4 	cbz	x20, 974d4 <CLAN7800Device::~CLAN7800Device()+0x64>
   974c0:	aa1403e0 	mov	x0, x20
   974c4:	97ffcb87 	bl	8a2e0 <CUSBEndpoint::~CUSBEndpoint()>
   974c8:	aa1403e0 	mov	x0, x20
   974cc:	d2800401 	mov	x1, #0x20                  	// #32
   974d0:	9400438c 	bl	a8300 <operator delete(void*, unsigned long)>
   974d4:	91010260 	add	x0, x19, #0x40
   974d8:	f9001a7f 	str	xzr, [x19, #48]
   974dc:	940041f5 	bl	a7cb0 <CMACAddress::~CMACAddress()>
   974e0:	aa1303e0 	mov	x0, x19
   974e4:	a94153f3 	ldp	x19, x20, [sp, #16]
   974e8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   974ec:	17ffcbd1 	b	8a430 <CUSBFunction::~CUSBFunction()>

00000000000974f0 <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   974f0:	d100a000 	sub	x0, x0, #0x28
   974f4:	17ffffdf 	b	97470 <CLAN7800Device::~CLAN7800Device()>
   974f8:	d503201f 	nop
   974fc:	d503201f 	nop

0000000000097500 <CLAN7800Device::~CLAN7800Device()>:
   97500:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   97504:	910003fd 	mov	x29, sp
   97508:	f9000bf3 	str	x19, [sp, #16]
   9750c:	aa0003f3 	mov	x19, x0
   97510:	97ffffd8 	bl	97470 <CLAN7800Device::~CLAN7800Device()>
   97514:	aa1303e0 	mov	x0, x19
   97518:	d2800901 	mov	x1, #0x48                  	// #72
   9751c:	f9400bf3 	ldr	x19, [sp, #16]
   97520:	a8c27bfd 	ldp	x29, x30, [sp], #32
   97524:	14004377 	b	a8300 <operator delete(void*, unsigned long)>
   97528:	d503201f 	nop
   9752c:	d503201f 	nop

0000000000097530 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   97530:	a9b47bfd 	stp	x29, x30, [sp, #-192]!
   97534:	910003fd 	mov	x29, sp
   97538:	a90153f3 	stp	x19, x20, [sp, #16]
   9753c:	aa0103f3 	mov	x19, x1
   97540:	a9025bf5 	stp	x21, x22, [sp, #32]
   97544:	f9401801 	ldr	x1, [x0, #48]
   97548:	b40005e1 	cbz	x1, 97604 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xd4>
   9754c:	b4000693 	cbz	x19, 9761c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xec>
   97550:	aa0003f4 	mov	x20, x0
   97554:	d2800004 	mov	x4, #0x0                   	// #0
   97558:	5280c803 	mov	w3, #0x640                 	// #1600
   9755c:	9100c3e0 	add	x0, sp, #0x30
   97560:	aa0203f5 	mov	x21, x2
   97564:	aa1303e2 	mov	x2, x19
   97568:	97ffa94e 	bl	81aa0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   9756c:	aa1403e0 	mov	x0, x20
   97570:	97ffccd0 	bl	8a8b0 <CUSBFunction::GetHost() const>
   97574:	f9400003 	ldr	x3, [x0]
   97578:	9100c3e1 	add	x1, sp, #0x30
   9757c:	52800002 	mov	w2, #0x0                   	// #0
   97580:	f9401063 	ldr	x3, [x3, #32]
   97584:	d63f0060 	blr	x3
   97588:	72001c14 	ands	w20, w0, #0xff
   9758c:	54000121 	b.ne	975b0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x80>  // b.any
   97590:	52800014 	mov	w20, #0x0                   	// #0
   97594:	9100c3e0 	add	x0, sp, #0x30
   97598:	97ffa962 	bl	81b20 <CUSBRequest::~CUSBRequest()>
   9759c:	2a1403e0 	mov	w0, w20
   975a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   975a4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   975a8:	a8cc7bfd 	ldp	x29, x30, [sp], #192
   975ac:	d65f03c0 	ret
   975b0:	9100c3e0 	add	x0, sp, #0x30
   975b4:	97ffa97b 	bl	81ba0 <CUSBRequest::GetResultLength() const>
   975b8:	7100241f 	cmp	w0, #0x9
   975bc:	2a0003e3 	mov	w3, w0
   975c0:	54fffe89 	b.ls	97590 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x60>  // b.plast
   975c4:	b9400276 	ldr	w22, [x19]
   975c8:	37b00376 	tbnz	w22, #22, 97634 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x104>
   975cc:	120036d6 	and	w22, w22, #0x3fff
   975d0:	51002800 	sub	w0, w0, #0xa
   975d4:	6b16001f 	cmp	w0, w22
   975d8:	54000401 	b.ne	97658 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x128>  // b.any
   975dc:	7100101f 	cmp	w0, #0x4
   975e0:	54000489 	b.ls	97670 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x140>  // b.plast
   975e4:	91002a61 	add	x1, x19, #0xa
   975e8:	aa1303e0 	mov	x0, x19
   975ec:	51003862 	sub	w2, w3, #0xe
   975f0:	51003873 	sub	w19, w3, #0xe
   975f4:	94004095 	bl	a7848 <memcpy>
   975f8:	b4000495 	cbz	x21, 97688 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x158>
   975fc:	b90002b3 	str	w19, [x21]
   97600:	17ffffe5 	b	97594 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x64>
   97604:	b00000e1 	adrp	x1, b4000 <_etext+0x3158>
   97608:	b00000e0 	adrp	x0, b4000 <_etext+0x3158>
   9760c:	9109c021 	add	x1, x1, #0x270
   97610:	910a0000 	add	x0, x0, #0x280
   97614:	52803802 	mov	w2, #0x1c0                 	// #448
   97618:	940019ca 	bl	9dd40 <assertion_failed>
   9761c:	b00000e1 	adrp	x1, b4000 <_etext+0x3158>
   97620:	d00000c0 	adrp	x0, b1000 <_etext+0x158>
   97624:	9109c021 	add	x1, x1, #0x270
   97628:	911f6000 	add	x0, x0, #0x7d8
   9762c:	52803822 	mov	w2, #0x1c1                 	// #449
   97630:	940019c4 	bl	9dd40 <assertion_failed>
   97634:	940020f7 	bl	9fa10 <CLogger::Get()>
   97638:	b00000e3 	adrp	x3, b4000 <_etext+0x3158>
   9763c:	90000101 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   97640:	2a1603e4 	mov	w4, w22
   97644:	910a6063 	add	x3, x3, #0x298
   97648:	9116e021 	add	x1, x1, #0x5b8
   9764c:	52800042 	mov	w2, #0x2                   	// #2
   97650:	940022dc 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   97654:	17ffffcf 	b	97590 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x60>
   97658:	b00000e1 	adrp	x1, b4000 <_etext+0x3158>
   9765c:	b00000e0 	adrp	x0, b4000 <_etext+0x3158>
   97660:	9109c021 	add	x1, x1, #0x270
   97664:	910ac000 	add	x0, x0, #0x2b0
   97668:	52803b02 	mov	w2, #0x1d8                 	// #472
   9766c:	940019b5 	bl	9dd40 <assertion_failed>
   97670:	b00000e1 	adrp	x1, b4000 <_etext+0x3158>
   97674:	b00000e0 	adrp	x0, b4000 <_etext+0x3158>
   97678:	9109c021 	add	x1, x1, #0x270
   9767c:	910b8000 	add	x0, x0, #0x2e0
   97680:	52803b22 	mov	w2, #0x1d9                 	// #473
   97684:	940019af 	bl	9dd40 <assertion_failed>
   97688:	b00000e1 	adrp	x1, b4000 <_etext+0x3158>
   9768c:	b00000e0 	adrp	x0, b4000 <_etext+0x3158>
   97690:	9109c021 	add	x1, x1, #0x270
   97694:	910be000 	add	x0, x0, #0x2f8
   97698:	52803c82 	mov	w2, #0x1e4                 	// #484
   9769c:	940019a9 	bl	9dd40 <assertion_failed>

00000000000976a0 <non-virtual thunk to CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   976a0:	d100a000 	sub	x0, x0, #0x28
   976a4:	17ffffa3 	b	97530 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>
   976a8:	d503201f 	nop
   976ac:	d503201f 	nop

00000000000976b0 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]>:
   976b0:	d11b83ff 	sub	sp, sp, #0x6e0
   976b4:	2a0203e2 	mov	w2, w2
   976b8:	a9007bfd 	stp	x29, x30, [sp]
   976bc:	910003fd 	mov	x29, sp
   976c0:	a90153f3 	stp	x19, x20, [sp, #16]
   976c4:	9101bff3 	add	x19, sp, #0x6f
   976c8:	aa0203f4 	mov	x20, x2
   976cc:	927ae673 	and	x19, x19, #0xffffffffffffffc0
   976d0:	f90013f5 	str	x21, [sp, #32]
   976d4:	aa0003f5 	mov	x21, x0
   976d8:	91002260 	add	x0, x19, #0x8
   976dc:	9400405b 	bl	a7848 <memcpy>
   976e0:	320a0281 	orr	w1, w20, #0x400000
   976e4:	f9401ea0 	ldr	x0, [x21, #56]
   976e8:	29007e61 	stp	w1, wzr, [x19]
   976ec:	b40001e0 	cbz	x0, 97728 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0x78>
   976f0:	aa1503e0 	mov	x0, x21
   976f4:	97ffcc6f 	bl	8a8b0 <CUSBFunction::GetHost() const>
   976f8:	11002283 	add	w3, w20, #0x8
   976fc:	aa1303e2 	mov	x2, x19
   97700:	f9401ea1 	ldr	x1, [x21, #56]
   97704:	52800004 	mov	w4, #0x0                   	// #0
   97708:	97ffa6be 	bl	81200 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   9770c:	2a2003e0 	mvn	w0, w0
   97710:	a9407bfd 	ldp	x29, x30, [sp]
   97714:	531f7c00 	lsr	w0, w0, #31
   97718:	a94153f3 	ldp	x19, x20, [sp, #16]
   9771c:	f94013f5 	ldr	x21, [sp, #32]
   97720:	911b83ff 	add	sp, sp, #0x6e0
   97724:	d65f03c0 	ret
   97728:	b00000e1 	adrp	x1, b4000 <_etext+0x3158>
   9772c:	b00000e0 	adrp	x0, b4000 <_etext+0x3158>
   97730:	9109c021 	add	x1, x1, #0x270
   97734:	910c4000 	add	x0, x0, #0x310
   97738:	52803742 	mov	w2, #0x1ba                 	// #442
   9773c:	94001981 	bl	9dd40 <assertion_failed>

0000000000097740 <CLAN7800Device::SendFrame(void const*, unsigned int)>:
   97740:	7119005f 	cmp	w2, #0x640
   97744:	54000068 	b.hi	97750 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x10>  // b.pmore
   97748:	b4000081 	cbz	x1, 97758 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x18>
   9774c:	17ffffd9 	b	976b0 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]>
   97750:	52800000 	mov	w0, #0x0                   	// #0
   97754:	d65f03c0 	ret
   97758:	b00000e1 	adrp	x1, b4000 <_etext+0x3158>
   9775c:	d00000c0 	adrp	x0, b1000 <_etext+0x158>
   97760:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   97764:	9109c021 	add	x1, x1, #0x270
   97768:	910003fd 	mov	x29, sp
   9776c:	911f6000 	add	x0, x0, #0x7d8
   97770:	52803662 	mov	w2, #0x1b3                 	// #435
   97774:	94001973 	bl	9dd40 <assertion_failed>
   97778:	d503201f 	nop
   9777c:	d503201f 	nop

0000000000097780 <non-virtual thunk to CLAN7800Device::GetMACAddress() const>:
   97780:	91006000 	add	x0, x0, #0x18
   97784:	d65f03c0 	ret
   97788:	d503201f 	nop
   9778c:	d503201f 	nop

0000000000097790 <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   97790:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   97794:	910003fd 	mov	x29, sp
   97798:	f9000bf3 	str	x19, [sp, #16]
   9779c:	d100a013 	sub	x19, x0, #0x28
   977a0:	aa1303e0 	mov	x0, x19
   977a4:	97ffff33 	bl	97470 <CLAN7800Device::~CLAN7800Device()>
   977a8:	aa1303e0 	mov	x0, x19
   977ac:	d2800901 	mov	x1, #0x48                  	// #72
   977b0:	f9400bf3 	ldr	x19, [sp, #16]
   977b4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   977b8:	140042d2 	b	a8300 <operator delete(void*, unsigned long)>
   977bc:	d503201f 	nop

00000000000977c0 <non-virtual thunk to CLAN7800Device::SendFrame(void const*, unsigned int)>:
   977c0:	7119005f 	cmp	w2, #0x640
   977c4:	54000088 	b.hi	977d4 <non-virtual thunk to CLAN7800Device::SendFrame(void const*, unsigned int)+0x14>  // b.pmore
   977c8:	b40000a1 	cbz	x1, 977dc <non-virtual thunk to CLAN7800Device::SendFrame(void const*, unsigned int)+0x1c>
   977cc:	d100a000 	sub	x0, x0, #0x28
   977d0:	17ffffb8 	b	976b0 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]>
   977d4:	52800000 	mov	w0, #0x0                   	// #0
   977d8:	d65f03c0 	ret
   977dc:	b00000e1 	adrp	x1, b4000 <_etext+0x3158>
   977e0:	d00000c0 	adrp	x0, b1000 <_etext+0x158>
   977e4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   977e8:	9109c021 	add	x1, x1, #0x270
   977ec:	910003fd 	mov	x29, sp
   977f0:	911f6000 	add	x0, x0, #0x7d8
   977f4:	52803662 	mov	w2, #0x1b3                 	// #435
   977f8:	94001952 	bl	9dd40 <assertion_failed>
   977fc:	d503201f 	nop

0000000000097800 <CLAN7800Device::CLAN7800Device(CUSBFunction*)>:
   97800:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   97804:	910003fd 	mov	x29, sp
   97808:	f9000bf3 	str	x19, [sp, #16]
   9780c:	aa0003f3 	mov	x19, x0
   97810:	97ffcbac 	bl	8a6c0 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   97814:	90000102 	adrp	x2, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   97818:	91134042 	add	x2, x2, #0x4d0
   9781c:	f9001e7f 	str	xzr, [x19, #56]
   97820:	90000101 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   97824:	9115a021 	add	x1, x1, #0x568
   97828:	91010260 	add	x0, x19, #0x40
   9782c:	f9000262 	str	x2, [x19]
   97830:	a902fe61 	stp	x1, xzr, [x19, #40]
   97834:	f9400bf3 	ldr	x19, [sp, #16]
   97838:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9783c:	14004105 	b	a7c50 <CMACAddress::CMACAddress()>

0000000000097840 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>:
   97840:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   97844:	910003fd 	mov	x29, sp
   97848:	a90153f3 	stp	x19, x20, [sp, #16]
   9784c:	2a0103f3 	mov	w19, w1
   97850:	f90013f5 	str	x21, [sp, #32]
   97854:	aa0003f5 	mov	x21, x0
   97858:	b9003fe2 	str	w2, [sp, #60]
   9785c:	97ffcc15 	bl	8a8b0 <CUSBFunction::GetHost() const>
   97860:	aa0003f4 	mov	x20, x0
   97864:	aa1503e0 	mov	x0, x21
   97868:	97ffcc06 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   9786c:	aa0003e1 	mov	x1, x0
   97870:	2a1303e5 	mov	w5, w19
   97874:	aa1403e0 	mov	x0, x20
   97878:	52800087 	mov	w7, #0x4                   	// #4
   9787c:	9100f3e6 	add	x6, sp, #0x3c
   97880:	52800004 	mov	w4, #0x0                   	// #0
   97884:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   97888:	52800802 	mov	w2, #0x40                  	// #64
   9788c:	97ffa5e1 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   97890:	37f800c0 	tbnz	w0, #31, 978a8 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x68>
   97894:	52800020 	mov	w0, #0x1                   	// #1
   97898:	a94153f3 	ldp	x19, x20, [sp, #16]
   9789c:	f94013f5 	ldr	x21, [sp, #32]
   978a0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   978a4:	d65f03c0 	ret
   978a8:	9400205a 	bl	9fa10 <CLogger::Get()>
   978ac:	b00000e3 	adrp	x3, b4000 <_etext+0x3158>
   978b0:	90000101 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   978b4:	2a1303e4 	mov	w4, w19
   978b8:	910ca063 	add	x3, x3, #0x328
   978bc:	9116e021 	add	x1, x1, #0x5b8
   978c0:	52800042 	mov	w2, #0x2                   	// #2
   978c4:	9400223f 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   978c8:	52800000 	mov	w0, #0x0                   	// #0
   978cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   978d0:	f94013f5 	ldr	x21, [sp, #32]
   978d4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   978d8:	d65f03c0 	ret
   978dc:	d503201f 	nop

00000000000978e0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>:
   978e0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   978e4:	910003fd 	mov	x29, sp
   978e8:	a90153f3 	stp	x19, x20, [sp, #16]
   978ec:	2a0103f3 	mov	w19, w1
   978f0:	a9025bf5 	stp	x21, x22, [sp, #32]
   978f4:	aa0203f5 	mov	x21, x2
   978f8:	aa0003f6 	mov	x22, x0
   978fc:	97ffcbed 	bl	8a8b0 <CUSBFunction::GetHost() const>
   97900:	aa0003f4 	mov	x20, x0
   97904:	aa1603e0 	mov	x0, x22
   97908:	97ffcbde 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   9790c:	aa0003e1 	mov	x1, x0
   97910:	aa1503e6 	mov	x6, x21
   97914:	aa1403e0 	mov	x0, x20
   97918:	2a1303e5 	mov	w5, w19
   9791c:	52800087 	mov	w7, #0x4                   	// #4
   97920:	52800004 	mov	w4, #0x0                   	// #0
   97924:	12800bc3 	mov	w3, #0xffffffa1            	// #-95
   97928:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   9792c:	97ffa5b9 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   97930:	7100101f 	cmp	w0, #0x4
   97934:	540000c1 	b.ne	9794c <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x6c>  // b.any
   97938:	52800020 	mov	w0, #0x1                   	// #1
   9793c:	a94153f3 	ldp	x19, x20, [sp, #16]
   97940:	a9425bf5 	ldp	x21, x22, [sp, #32]
   97944:	a8c37bfd 	ldp	x29, x30, [sp], #48
   97948:	d65f03c0 	ret
   9794c:	94002031 	bl	9fa10 <CLogger::Get()>
   97950:	b00000e3 	adrp	x3, b4000 <_etext+0x3158>
   97954:	90000101 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   97958:	2a1303e4 	mov	w4, w19
   9795c:	910d2063 	add	x3, x3, #0x348
   97960:	9116e021 	add	x1, x1, #0x5b8
   97964:	52800042 	mov	w2, #0x2                   	// #2
   97968:	94002216 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9796c:	52800000 	mov	w0, #0x0                   	// #0
   97970:	a94153f3 	ldp	x19, x20, [sp, #16]
   97974:	a9425bf5 	ldp	x21, x22, [sp, #32]
   97978:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9797c:	d65f03c0 	ret

0000000000097980 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   97980:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   97984:	910003fd 	mov	x29, sp
   97988:	a90153f3 	stp	x19, x20, [sp, #16]
   9798c:	2a0403f3 	mov	w19, w4
   97990:	a9025bf5 	stp	x21, x22, [sp, #32]
   97994:	2a0503f5 	mov	w21, w5
   97998:	a90363f7 	stp	x23, x24, [sp, #48]
   9799c:	aa0003f7 	mov	x23, x0
   979a0:	2a0103f8 	mov	w24, w1
   979a4:	a9046bf9 	stp	x25, x26, [sp, #64]
   979a8:	2a0203f9 	mov	w25, w2
   979ac:	2a0303fa 	mov	w26, w3
   979b0:	94003dd0 	bl	a70f0 <CTimer::Get()>
   979b4:	b4000520 	cbz	x0, 97a58 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xd8>
   979b8:	aa0003f4 	mov	x20, x0
   979bc:	94003aad 	bl	a6470 <CTimer::GetTicks() const>
   979c0:	2a0003f6 	mov	w22, w0
   979c4:	d503201f 	nop
   979c8:	350002d3 	cbnz	w19, 97a20 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
   979cc:	aa1403e0 	mov	x0, x20
   979d0:	94003aa8 	bl	a6470 <CTimer::GetTicks() const>
   979d4:	4b160000 	sub	w0, w0, w22
   979d8:	6b15001f 	cmp	w0, w21
   979dc:	54000302 	b.cs	97a3c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xbc>  // b.hs, b.nlast
   979e0:	910173e2 	add	x2, sp, #0x5c
   979e4:	2a1803e1 	mov	w1, w24
   979e8:	aa1703e0 	mov	x0, x23
   979ec:	97ffffbd 	bl	978e0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   979f0:	72001c00 	ands	w0, w0, #0xff
   979f4:	54000240 	b.eq	97a3c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xbc>  // b.none
   979f8:	b9405fe1 	ldr	w1, [sp, #92]
   979fc:	0a010321 	and	w1, w25, w1
   97a00:	6b1a003f 	cmp	w1, w26
   97a04:	54fffe21 	b.ne	979c8 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x48>  // b.any
   97a08:	a94153f3 	ldp	x19, x20, [sp, #16]
   97a0c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   97a10:	a94363f7 	ldp	x23, x24, [sp, #48]
   97a14:	a9446bf9 	ldp	x25, x26, [sp, #64]
   97a18:	a8c67bfd 	ldp	x29, x30, [sp], #96
   97a1c:	d65f03c0 	ret
   97a20:	2a1303e0 	mov	w0, w19
   97a24:	94003d6f 	bl	a6fe0 <CTimer::SimpleusDelay(unsigned int)>
   97a28:	aa1403e0 	mov	x0, x20
   97a2c:	94003a91 	bl	a6470 <CTimer::GetTicks() const>
   97a30:	4b160000 	sub	w0, w0, w22
   97a34:	6b15001f 	cmp	w0, w21
   97a38:	54fffd43 	b.cc	979e0 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x60>  // b.lo, b.ul, b.last
   97a3c:	52800000 	mov	w0, #0x0                   	// #0
   97a40:	a94153f3 	ldp	x19, x20, [sp, #16]
   97a44:	a9425bf5 	ldp	x21, x22, [sp, #32]
   97a48:	a94363f7 	ldp	x23, x24, [sp, #48]
   97a4c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   97a50:	a8c67bfd 	ldp	x29, x30, [sp], #96
   97a54:	d65f03c0 	ret
   97a58:	b00000e1 	adrp	x1, b4000 <_etext+0x3158>
   97a5c:	b00000e0 	adrp	x0, b4000 <_etext+0x3158>
   97a60:	9109c021 	add	x1, x1, #0x270
   97a64:	910da000 	add	x0, x0, #0x368
   97a68:	528051e2 	mov	w2, #0x28f                 	// #655
   97a6c:	940018b5 	bl	9dd40 <assertion_failed>

0000000000097a70 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>:
   97a70:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   97a74:	910003fd 	mov	x29, sp
   97a78:	a90153f3 	stp	x19, x20, [sp, #16]
   97a7c:	12001c34 	and	w20, w1, #0xff
   97a80:	71007e9f 	cmp	w20, #0x1f
   97a84:	f90013f5 	str	x21, [sp, #32]
   97a88:	540004e8 	b.hi	97b24 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xb4>  // b.pmore
   97a8c:	12003c55 	and	w21, w2, #0xffff
   97a90:	52800c85 	mov	w5, #0x64                  	// #100
   97a94:	52800004 	mov	w4, #0x0                   	// #0
   97a98:	52800003 	mov	w3, #0x0                   	// #0
   97a9c:	52800022 	mov	w2, #0x1                   	// #1
   97aa0:	52802401 	mov	w1, #0x120                 	// #288
   97aa4:	aa0003f3 	mov	x19, x0
   97aa8:	97ffffb6 	bl	97980 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   97aac:	72001c1f 	tst	w0, #0xff
   97ab0:	540000c1 	b.ne	97ac8 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x58>  // b.any
   97ab4:	52800000 	mov	w0, #0x0                   	// #0
   97ab8:	a94153f3 	ldp	x19, x20, [sp, #16]
   97abc:	f94013f5 	ldr	x21, [sp, #32]
   97ac0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   97ac4:	d65f03c0 	ret
   97ac8:	2a1503e2 	mov	w2, w21
   97acc:	52802481 	mov	w1, #0x124                 	// #292
   97ad0:	aa1303e0 	mov	x0, x19
   97ad4:	97ffff5b 	bl	97840 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   97ad8:	72001c1f 	tst	w0, #0xff
   97adc:	54fffec0 	b.eq	97ab4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x44>  // b.none
   97ae0:	52810062 	mov	w2, #0x803                 	// #2051
   97ae4:	52802401 	mov	w1, #0x120                 	// #288
   97ae8:	2a141842 	orr	w2, w2, w20, lsl #6
   97aec:	aa1303e0 	mov	x0, x19
   97af0:	97ffff54 	bl	97840 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   97af4:	72001c1f 	tst	w0, #0xff
   97af8:	54fffde0 	b.eq	97ab4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x44>  // b.none
   97afc:	aa1303e0 	mov	x0, x19
   97b00:	52800c85 	mov	w5, #0x64                  	// #100
   97b04:	a94153f3 	ldp	x19, x20, [sp, #16]
   97b08:	52800004 	mov	w4, #0x0                   	// #0
   97b0c:	52800003 	mov	w3, #0x0                   	// #0
   97b10:	52800022 	mov	w2, #0x1                   	// #1
   97b14:	52802401 	mov	w1, #0x120                 	// #288
   97b18:	f94013f5 	ldr	x21, [sp, #32]
   97b1c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   97b20:	17ffff98 	b	97980 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   97b24:	b00000e1 	adrp	x1, b4000 <_etext+0x3158>
   97b28:	b00000e0 	adrp	x0, b4000 <_etext+0x3158>
   97b2c:	9109c021 	add	x1, x1, #0x270
   97b30:	910de000 	add	x0, x0, #0x378
   97b34:	52804b42 	mov	w2, #0x25a                 	// #602
   97b38:	94001882 	bl	9dd40 <assertion_failed>
   97b3c:	d503201f 	nop

0000000000097b40 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>:
   97b40:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   97b44:	910003fd 	mov	x29, sp
   97b48:	a90153f3 	stp	x19, x20, [sp, #16]
   97b4c:	12001c34 	and	w20, w1, #0xff
   97b50:	71007e9f 	cmp	w20, #0x1f
   97b54:	f90013f5 	str	x21, [sp, #32]
   97b58:	540005c8 	b.hi	97c10 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xd0>  // b.pmore
   97b5c:	aa0203f5 	mov	x21, x2
   97b60:	52800c85 	mov	w5, #0x64                  	// #100
   97b64:	52800004 	mov	w4, #0x0                   	// #0
   97b68:	52800003 	mov	w3, #0x0                   	// #0
   97b6c:	52800022 	mov	w2, #0x1                   	// #1
   97b70:	52802401 	mov	w1, #0x120                 	// #288
   97b74:	aa0003f3 	mov	x19, x0
   97b78:	97ffff82 	bl	97980 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   97b7c:	72001c00 	ands	w0, w0, #0xff
   97b80:	540000a1 	b.ne	97b94 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x54>  // b.any
   97b84:	a94153f3 	ldp	x19, x20, [sp, #16]
   97b88:	f94013f5 	ldr	x21, [sp, #32]
   97b8c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   97b90:	d65f03c0 	ret
   97b94:	52810022 	mov	w2, #0x801                 	// #2049
   97b98:	52802401 	mov	w1, #0x120                 	// #288
   97b9c:	2a141842 	orr	w2, w2, w20, lsl #6
   97ba0:	aa1303e0 	mov	x0, x19
   97ba4:	97ffff27 	bl	97840 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   97ba8:	72001c1f 	tst	w0, #0xff
   97bac:	54000140 	b.eq	97bd4 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x94>  // b.none
   97bb0:	52800c85 	mov	w5, #0x64                  	// #100
   97bb4:	52800004 	mov	w4, #0x0                   	// #0
   97bb8:	52800003 	mov	w3, #0x0                   	// #0
   97bbc:	52800022 	mov	w2, #0x1                   	// #1
   97bc0:	52802401 	mov	w1, #0x120                 	// #288
   97bc4:	aa1303e0 	mov	x0, x19
   97bc8:	97ffff6e 	bl	97980 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   97bcc:	72001c1f 	tst	w0, #0xff
   97bd0:	540000c1 	b.ne	97be8 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xa8>  // b.any
   97bd4:	52800000 	mov	w0, #0x0                   	// #0
   97bd8:	a94153f3 	ldp	x19, x20, [sp, #16]
   97bdc:	f94013f5 	ldr	x21, [sp, #32]
   97be0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   97be4:	d65f03c0 	ret
   97be8:	aa1303e0 	mov	x0, x19
   97bec:	9100f3e2 	add	x2, sp, #0x3c
   97bf0:	52802481 	mov	w1, #0x124                 	// #292
   97bf4:	97ffff3b 	bl	978e0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   97bf8:	72001c00 	ands	w0, w0, #0xff
   97bfc:	54fffec0 	b.eq	97bd4 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x94>  // b.none
   97c00:	b4000155 	cbz	x21, 97c28 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xe8>
   97c04:	b9403fe1 	ldr	w1, [sp, #60]
   97c08:	790002a1 	strh	w1, [x21]
   97c0c:	17ffffde 	b	97b84 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x44>
   97c10:	b00000e1 	adrp	x1, b4000 <_etext+0x3158>
   97c14:	b00000e0 	adrp	x0, b4000 <_etext+0x3158>
   97c18:	9109c021 	add	x1, x1, #0x270
   97c1c:	910de000 	add	x0, x0, #0x378
   97c20:	52804e22 	mov	w2, #0x271                 	// #625
   97c24:	94001847 	bl	9dd40 <assertion_failed>
   97c28:	b00000e1 	adrp	x1, b4000 <_etext+0x3158>
   97c2c:	b00000e0 	adrp	x0, b4000 <_etext+0x3158>
   97c30:	9109c021 	add	x1, x1, #0x270
   97c34:	910e2000 	add	x0, x0, #0x388
   97c38:	528050a2 	mov	w2, #0x285                 	// #645
   97c3c:	94001841 	bl	9dd40 <assertion_failed>

0000000000097c40 <CLAN7800Device::IsLinkUp()>:
   97c40:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   97c44:	52800021 	mov	w1, #0x1                   	// #1
   97c48:	910003fd 	mov	x29, sp
   97c4c:	91007be2 	add	x2, sp, #0x1e
   97c50:	97ffffbc 	bl	97b40 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   97c54:	72001c00 	ands	w0, w0, #0xff
   97c58:	54000060 	b.eq	97c64 <CLAN7800Device::IsLinkUp()+0x24>  // b.none
   97c5c:	79403fe0 	ldrh	w0, [sp, #30]
   97c60:	d3420800 	ubfx	x0, x0, #2, #1
   97c64:	a8c27bfd 	ldp	x29, x30, [sp], #32
   97c68:	d65f03c0 	ret
   97c6c:	d503201f 	nop

0000000000097c70 <CLAN7800Device::GetLinkSpeed()>:
   97c70:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   97c74:	52800002 	mov	w2, #0x0                   	// #0
   97c78:	910003fd 	mov	x29, sp
   97c7c:	528003e1 	mov	w1, #0x1f                  	// #31
   97c80:	f9000bf3 	str	x19, [sp, #16]
   97c84:	aa0003f3 	mov	x19, x0
   97c88:	97ffff7a 	bl	97a70 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   97c8c:	72001c1f 	tst	w0, #0xff
   97c90:	54000220 	b.eq	97cd4 <CLAN7800Device::GetLinkSpeed()+0x64>  // b.none
   97c94:	aa1303e0 	mov	x0, x19
   97c98:	9100bbe2 	add	x2, sp, #0x2e
   97c9c:	52800381 	mov	w1, #0x1c                  	// #28
   97ca0:	97ffffa8 	bl	97b40 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   97ca4:	72001c1f 	tst	w0, #0xff
   97ca8:	54000160 	b.eq	97cd4 <CLAN7800Device::GetLinkSpeed()+0x64>  // b.none
   97cac:	79405fe1 	ldrh	w1, [sp, #46]
   97cb0:	377002a1 	tbnz	w1, #14, 97d04 <CLAN7800Device::GetLinkSpeed()+0x94>
   97cb4:	528000c0 	mov	w0, #0x6                   	// #6
   97cb8:	36780081 	tbz	w1, #15, 97cc8 <CLAN7800Device::GetLinkSpeed()+0x58>
   97cbc:	d3431421 	ubfx	x1, x1, #3, #3
   97cc0:	71001c3f 	cmp	w1, #0x7
   97cc4:	54000101 	b.ne	97ce4 <CLAN7800Device::GetLinkSpeed()+0x74>  // b.any
   97cc8:	f9400bf3 	ldr	x19, [sp, #16]
   97ccc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   97cd0:	d65f03c0 	ret
   97cd4:	528000c0 	mov	w0, #0x6                   	// #6
   97cd8:	f9400bf3 	ldr	x19, [sp, #16]
   97cdc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   97ce0:	d65f03c0 	ret
   97ce4:	90000100 	adrp	x0, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   97ce8:	9116e000 	add	x0, x0, #0x5b8
   97cec:	f9400bf3 	ldr	x19, [sp, #16]
   97cf0:	92403c21 	and	x1, x1, #0xffff
   97cf4:	91002000 	add	x0, x0, #0x8
   97cf8:	b8617800 	ldr	w0, [x0, x1, lsl #2]
   97cfc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   97d00:	d65f03c0 	ret
   97d04:	b00000e1 	adrp	x1, b4000 <_etext+0x3158>
   97d08:	b00000e0 	adrp	x0, b4000 <_etext+0x3158>
   97d0c:	9109c021 	add	x1, x1, #0x270
   97d10:	910e6000 	add	x0, x0, #0x398
   97d14:	52804082 	mov	w2, #0x204                 	// #516
   97d18:	9400180a 	bl	9dd40 <assertion_failed>
   97d1c:	d503201f 	nop

0000000000097d20 <non-virtual thunk to CLAN7800Device::GetLinkSpeed()>:
   97d20:	d100a000 	sub	x0, x0, #0x28
   97d24:	17ffffd3 	b	97c70 <CLAN7800Device::GetLinkSpeed()>
   97d28:	d503201f 	nop
   97d2c:	d503201f 	nop

0000000000097d30 <CLAN7800Device::InitPHY()>:
   97d30:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   97d34:	52800002 	mov	w2, #0x0                   	// #0
   97d38:	910003fd 	mov	x29, sp
   97d3c:	528003e1 	mov	w1, #0x1f                  	// #31
   97d40:	f9000bf3 	str	x19, [sp, #16]
   97d44:	aa0003f3 	mov	x19, x0
   97d48:	97ffff4a 	bl	97a70 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   97d4c:	72001c00 	ands	w0, w0, #0xff
   97d50:	54000081 	b.ne	97d60 <CLAN7800Device::InitPHY()+0x30>  // b.any
   97d54:	f9400bf3 	ldr	x19, [sp, #16]
   97d58:	a8c37bfd 	ldp	x29, x30, [sp], #48
   97d5c:	d65f03c0 	ret
   97d60:	9100bbe2 	add	x2, sp, #0x2e
   97d64:	528003a1 	mov	w1, #0x1d                  	// #29
   97d68:	aa1303e0 	mov	x0, x19
   97d6c:	97ffff75 	bl	97b40 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   97d70:	72001c00 	ands	w0, w0, #0xff
   97d74:	54ffff00 	b.eq	97d54 <CLAN7800Device::InitPHY()+0x24>  // b.none
   97d78:	79405fe2 	ldrh	w2, [sp, #46]
   97d7c:	52800c23 	mov	w3, #0x61                  	// #97
   97d80:	aa1303e0 	mov	x0, x19
   97d84:	528003a1 	mov	w1, #0x1d                  	// #29
   97d88:	f9400bf3 	ldr	x19, [sp, #16]
   97d8c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   97d90:	12185c42 	and	w2, w2, #0xffffff00
   97d94:	2a030042 	orr	w2, w2, w3
   97d98:	17ffff36 	b	97a70 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   97d9c:	d503201f 	nop

0000000000097da0 <non-virtual thunk to CLAN7800Device::IsLinkUp()>:
   97da0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   97da4:	d100a000 	sub	x0, x0, #0x28
   97da8:	910003fd 	mov	x29, sp
   97dac:	91007be2 	add	x2, sp, #0x1e
   97db0:	52800021 	mov	w1, #0x1                   	// #1
   97db4:	97ffff63 	bl	97b40 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   97db8:	72001c00 	ands	w0, w0, #0xff
   97dbc:	54000060 	b.eq	97dc8 <non-virtual thunk to CLAN7800Device::IsLinkUp()+0x28>  // b.none
   97dc0:	79403fe0 	ldrh	w0, [sp, #30]
   97dc4:	d3420800 	ubfx	x0, x0, #2, #1
   97dc8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   97dcc:	d65f03c0 	ret

0000000000097dd0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>:
   97dd0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   97dd4:	910003fd 	mov	x29, sp
   97dd8:	a9025bf5 	stp	x21, x22, [sp, #32]
   97ddc:	2a0203f6 	mov	w22, w2
   97de0:	9100f3e2 	add	x2, sp, #0x3c
   97de4:	2a0103f5 	mov	w21, w1
   97de8:	a90153f3 	stp	x19, x20, [sp, #16]
   97dec:	2a0303f3 	mov	w19, w3
   97df0:	aa0003f4 	mov	x20, x0
   97df4:	97fffebb 	bl	978e0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   97df8:	72001c00 	ands	w0, w0, #0xff
   97dfc:	54000120 	b.eq	97e20 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)+0x50>  // b.none
   97e00:	b9403fe2 	ldr	w2, [sp, #60]
   97e04:	2a1503e1 	mov	w1, w21
   97e08:	aa1403e0 	mov	x0, x20
   97e0c:	0a020263 	and	w3, w19, w2
   97e10:	2a160062 	orr	w2, w3, w22
   97e14:	b9003fe2 	str	w2, [sp, #60]
   97e18:	97fffe8a 	bl	97840 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   97e1c:	12001c00 	and	w0, w0, #0xff
   97e20:	a94153f3 	ldp	x19, x20, [sp, #16]
   97e24:	a9425bf5 	ldp	x21, x22, [sp, #32]
   97e28:	a8c47bfd 	ldp	x29, x30, [sp], #64
   97e2c:	d65f03c0 	ret

0000000000097e30 <CLAN7800Device::InitMACAddress()>:
   97e30:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   97e34:	910003fd 	mov	x29, sp
   97e38:	52800001 	mov	w1, #0x0                   	// #0
   97e3c:	a90153f3 	stp	x19, x20, [sp, #16]
   97e40:	aa0003f3 	mov	x19, x0
   97e44:	9100c3e0 	add	x0, sp, #0x30
   97e48:	940017e2 	bl	9ddd0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   97e4c:	9100c3e0 	add	x0, sp, #0x30
   97e50:	52800061 	mov	w1, #0x3                   	// #3
   97e54:	72a00021 	movk	w1, #0x1, lsl #16
   97e58:	52800004 	mov	w4, #0x0                   	// #0
   97e5c:	52800283 	mov	w3, #0x14                  	// #20
   97e60:	9100e3e2 	add	x2, sp, #0x38
   97e64:	9400183b 	bl	9df50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   97e68:	72001c1f 	tst	w0, #0xff
   97e6c:	54000101 	b.ne	97e8c <CLAN7800Device::InitMACAddress()+0x5c>  // b.any
   97e70:	52800013 	mov	w19, #0x0                   	// #0
   97e74:	9100c3e0 	add	x0, sp, #0x30
   97e78:	940017da 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   97e7c:	2a1303e0 	mov	w0, w19
   97e80:	a94153f3 	ldp	x19, x20, [sp, #16]
   97e84:	a8c77bfd 	ldp	x29, x30, [sp], #112
   97e88:	d65f03c0 	ret
   97e8c:	a9025bf5 	stp	x21, x22, [sp, #32]
   97e90:	91010275 	add	x21, x19, #0x40
   97e94:	910113e1 	add	x1, sp, #0x44
   97e98:	aa1503e0 	mov	x0, x21
   97e9c:	94003fc1 	bl	a7da0 <CMACAddress::Set(unsigned char const*)>
   97ea0:	b94047f4 	ldr	w20, [sp, #68]
   97ea4:	52802381 	mov	w1, #0x11c                 	// #284
   97ea8:	aa1303e0 	mov	x0, x19
   97eac:	794093f6 	ldrh	w22, [sp, #72]
   97eb0:	2a1403e2 	mov	w2, w20
   97eb4:	97fffe63 	bl	97840 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   97eb8:	72001c1f 	tst	w0, #0xff
   97ebc:	540000e0 	b.eq	97ed8 <CLAN7800Device::InitMACAddress()+0xa8>  // b.none
   97ec0:	2a1603e2 	mov	w2, w22
   97ec4:	52802301 	mov	w1, #0x118                 	// #280
   97ec8:	aa1303e0 	mov	x0, x19
   97ecc:	97fffe5d 	bl	97840 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   97ed0:	72001c1f 	tst	w0, #0xff
   97ed4:	54000061 	b.ne	97ee0 <CLAN7800Device::InitMACAddress()+0xb0>  // b.any
   97ed8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   97edc:	17ffffe5 	b	97e70 <CLAN7800Device::InitMACAddress()+0x40>
   97ee0:	2a1403e2 	mov	w2, w20
   97ee4:	52808081 	mov	w1, #0x404                 	// #1028
   97ee8:	aa1303e0 	mov	x0, x19
   97eec:	97fffe55 	bl	97840 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   97ef0:	72001c1f 	tst	w0, #0xff
   97ef4:	54ffff20 	b.eq	97ed8 <CLAN7800Device::InitMACAddress()+0xa8>  // b.none
   97ef8:	aa1303e0 	mov	x0, x19
   97efc:	320102c2 	orr	w2, w22, #0x80000000
   97f00:	52808001 	mov	w1, #0x400                 	// #1024
   97f04:	97fffe4f 	bl	97840 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   97f08:	72001c13 	ands	w19, w0, #0xff
   97f0c:	54fffe60 	b.eq	97ed8 <CLAN7800Device::InitMACAddress()+0xa8>  // b.none
   97f10:	910143e0 	add	x0, sp, #0x50
   97f14:	940031cf 	bl	a4650 <CString::CString()>
   97f18:	910143e1 	add	x1, sp, #0x50
   97f1c:	aa1503e0 	mov	x0, x21
   97f20:	94004004 	bl	a7f30 <CMACAddress::Format(CString*) const>
   97f24:	94001ebb 	bl	9fa10 <CLogger::Get()>
   97f28:	aa0003f4 	mov	x20, x0
   97f2c:	910143e0 	add	x0, sp, #0x50
   97f30:	9400320c 	bl	a4760 <CString::operator char const*() const>
   97f34:	b00000e3 	adrp	x3, b4000 <_etext+0x3158>
   97f38:	90000101 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   97f3c:	aa0003e4 	mov	x4, x0
   97f40:	910f0063 	add	x3, x3, #0x3c0
   97f44:	aa1403e0 	mov	x0, x20
   97f48:	9116e021 	add	x1, x1, #0x5b8
   97f4c:	52800082 	mov	w2, #0x4                   	// #4
   97f50:	9400209c 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   97f54:	910143e0 	add	x0, sp, #0x50
   97f58:	94003182 	bl	a4560 <CString::~CString()>
   97f5c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   97f60:	17ffffc5 	b	97e74 <CLAN7800Device::InitMACAddress()+0x44>
   97f64:	d503201f 	nop
   97f68:	d503201f 	nop
   97f6c:	d503201f 	nop

0000000000097f70 <CLAN7800Device::Configure()>:
   97f70:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   97f74:	910003fd 	mov	x29, sp
   97f78:	a90153f3 	stp	x19, x20, [sp, #16]
   97f7c:	aa0003f4 	mov	x20, x0
   97f80:	97ffca28 	bl	8a820 <CUSBFunction::GetNumEndpoints() const>
   97f84:	12001c00 	and	w0, w0, #0xff
   97f88:	71000c1f 	cmp	w0, #0x3
   97f8c:	540000c0 	b.eq	97fa4 <CLAN7800Device::Configure()+0x34>  // b.none
   97f90:	14000029 	b	98034 <CLAN7800Device::Configure()+0xc4>
   97f94:	39400e61 	ldrb	w1, [x19, #3]
   97f98:	12001421 	and	w1, w1, #0x3f
   97f9c:	7100083f 	cmp	w1, #0x2
   97fa0:	540005c0 	b.eq	98058 <CLAN7800Device::Configure()+0xe8>  // b.none
   97fa4:	528000a1 	mov	w1, #0x5                   	// #5
   97fa8:	aa1403e0 	mov	x0, x20
   97fac:	97ffca4d 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   97fb0:	aa0003f3 	mov	x19, x0
   97fb4:	b5ffff00 	cbnz	x0, 97f94 <CLAN7800Device::Configure()+0x24>
   97fb8:	f9401a80 	ldr	x0, [x20, #48]
   97fbc:	b40003c0 	cbz	x0, 98034 <CLAN7800Device::Configure()+0xc4>
   97fc0:	f9401e80 	ldr	x0, [x20, #56]
   97fc4:	b4000380 	cbz	x0, 98034 <CLAN7800Device::Configure()+0xc4>
   97fc8:	aa1403e0 	mov	x0, x20
   97fcc:	97ffc951 	bl	8a510 <CUSBFunction::Configure()>
   97fd0:	72001c13 	ands	w19, w0, #0xff
   97fd4:	540009e0 	b.eq	98110 <CLAN7800Device::Configure()+0x1a0>  // b.none
   97fd8:	9100e3e2 	add	x2, sp, #0x38
   97fdc:	52800001 	mov	w1, #0x0                   	// #0
   97fe0:	aa1403e0 	mov	x0, x20
   97fe4:	97fffe3f 	bl	978e0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   97fe8:	72001c1f 	tst	w0, #0xff
   97fec:	540000a0 	b.eq	98000 <CLAN7800Device::Configure()+0x90>  // b.none
   97ff0:	794077e1 	ldrh	w1, [sp, #58]
   97ff4:	528f0000 	mov	w0, #0x7800                	// #30720
   97ff8:	6b00003f 	cmp	w1, w0
   97ffc:	540006c0 	b.eq	980d4 <CLAN7800Device::Configure()+0x164>  // b.none
   98000:	94001e84 	bl	9fa10 <CLogger::Get()>
   98004:	900000e3 	adrp	x3, b4000 <_etext+0x3158>
   98008:	f00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9800c:	794077e4 	ldrh	w4, [sp, #58]
   98010:	910f6063 	add	x3, x3, #0x3d8
   98014:	9116e021 	add	x1, x1, #0x5b8
   98018:	52800022 	mov	w2, #0x1                   	// #1
   9801c:	52800013 	mov	w19, #0x0                   	// #0
   98020:	94002068 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   98024:	2a1303e0 	mov	w0, w19
   98028:	a94153f3 	ldp	x19, x20, [sp, #16]
   9802c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   98030:	d65f03c0 	ret
   98034:	aa1403e0 	mov	x0, x20
   98038:	f00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9803c:	9116e021 	add	x1, x1, #0x5b8
   98040:	52800013 	mov	w19, #0x0                   	// #0
   98044:	97ffca33 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   98048:	2a1303e0 	mov	w0, w19
   9804c:	a94153f3 	ldp	x19, x20, [sp, #16]
   98050:	a8c47bfd 	ldp	x29, x30, [sp], #64
   98054:	d65f03c0 	ret
   98058:	39c00a61 	ldrsb	w1, [x19, #2]
   9805c:	aa1403e0 	mov	x0, x20
   98060:	37f801e1 	tbnz	w1, #31, 9809c <CLAN7800Device::Configure()+0x12c>
   98064:	f9401e81 	ldr	x1, [x20, #56]
   98068:	b5fffe61 	cbnz	x1, 98034 <CLAN7800Device::Configure()+0xc4>
   9806c:	f90013f5 	str	x21, [sp, #32]
   98070:	97ffc9f8 	bl	8a850 <CUSBFunction::GetDevice() const>
   98074:	aa0003f5 	mov	x21, x0
   98078:	d2800400 	mov	x0, #0x20                  	// #32
   9807c:	94004079 	bl	a8260 <operator new(unsigned long)>
   98080:	aa1503e1 	mov	x1, x21
   98084:	aa0003f5 	mov	x21, x0
   98088:	aa1303e2 	mov	x2, x19
   9808c:	97ffc829 	bl	8a130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   98090:	f9001e95 	str	x21, [x20, #56]
   98094:	f94013f5 	ldr	x21, [sp, #32]
   98098:	17ffffc3 	b	97fa4 <CLAN7800Device::Configure()+0x34>
   9809c:	f9401a81 	ldr	x1, [x20, #48]
   980a0:	b5fffcc1 	cbnz	x1, 98038 <CLAN7800Device::Configure()+0xc8>
   980a4:	f90013f5 	str	x21, [sp, #32]
   980a8:	97ffc9ea 	bl	8a850 <CUSBFunction::GetDevice() const>
   980ac:	aa0003f5 	mov	x21, x0
   980b0:	d2800400 	mov	x0, #0x20                  	// #32
   980b4:	9400406b 	bl	a8260 <operator new(unsigned long)>
   980b8:	aa1503e1 	mov	x1, x21
   980bc:	aa0003f5 	mov	x21, x0
   980c0:	aa1303e2 	mov	x2, x19
   980c4:	97ffc81b 	bl	8a130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   980c8:	f9001a95 	str	x21, [x20, #48]
   980cc:	f94013f5 	ldr	x21, [sp, #32]
   980d0:	17ffffb5 	b	97fa4 <CLAN7800Device::Configure()+0x34>
   980d4:	52800201 	mov	w1, #0x10                  	// #16
   980d8:	9100f3e2 	add	x2, sp, #0x3c
   980dc:	aa1403e0 	mov	x0, x20
   980e0:	97fffe00 	bl	978e0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   980e4:	72001c1f 	tst	w0, #0xff
   980e8:	540002a1 	b.ne	9813c <CLAN7800Device::Configure()+0x1cc>  // b.any
   980ec:	94001e49 	bl	9fa10 <CLogger::Get()>
   980f0:	900000e3 	adrp	x3, b4000 <_etext+0x3158>
   980f4:	f00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   980f8:	910fc063 	add	x3, x3, #0x3f0
   980fc:	9116e021 	add	x1, x1, #0x5b8
   98100:	52800022 	mov	w2, #0x1                   	// #1
   98104:	52800013 	mov	w19, #0x0                   	// #0
   98108:	9400202e 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9810c:	17ffffcf 	b	98048 <CLAN7800Device::Configure()+0xd8>
   98110:	94001e40 	bl	9fa10 <CLogger::Get()>
   98114:	b00000c3 	adrp	x3, b1000 <_etext+0x158>
   98118:	f00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9811c:	9112c063 	add	x3, x3, #0x4b0
   98120:	9116e021 	add	x1, x1, #0x5b8
   98124:	52800022 	mov	w2, #0x1                   	// #1
   98128:	94002026 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9812c:	2a1303e0 	mov	w0, w19
   98130:	a94153f3 	ldp	x19, x20, [sp, #16]
   98134:	a8c47bfd 	ldp	x29, x30, [sp], #64
   98138:	d65f03c0 	ret
   9813c:	b9403fe2 	ldr	w2, [sp, #60]
   98140:	52800201 	mov	w1, #0x10                  	// #16
   98144:	aa1403e0 	mov	x0, x20
   98148:	321f0042 	orr	w2, w2, #0x2
   9814c:	b9003fe2 	str	w2, [sp, #60]
   98150:	97fffdbc 	bl	97840 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   98154:	72001c1f 	tst	w0, #0xff
   98158:	54fffca0 	b.eq	980ec <CLAN7800Device::Configure()+0x17c>  // b.none
   9815c:	52800c85 	mov	w5, #0x64                  	// #100
   98160:	52807d04 	mov	w4, #0x3e8                 	// #1000
   98164:	52800003 	mov	w3, #0x0                   	// #0
   98168:	52800042 	mov	w2, #0x2                   	// #2
   9816c:	52800201 	mov	w1, #0x10                  	// #16
   98170:	aa1403e0 	mov	x0, x20
   98174:	97fffe03 	bl	97980 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   98178:	72001c1f 	tst	w0, #0xff
   9817c:	54fffb80 	b.eq	980ec <CLAN7800Device::Configure()+0x17c>  // b.none
   98180:	aa1403e0 	mov	x0, x20
   98184:	97ffff2b 	bl	97e30 <CLAN7800Device::InitMACAddress()>
   98188:	72001c13 	ands	w19, w0, #0xff
   9818c:	54001260 	b.eq	983d8 <CLAN7800Device::Configure()+0x468>  // b.none
   98190:	52800302 	mov	w2, #0x18                  	// #24
   98194:	52801201 	mov	w1, #0x90                  	// #144
   98198:	aa1403e0 	mov	x0, x20
   9819c:	97fffda9 	bl	97840 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   981a0:	72001c1f 	tst	w0, #0xff
   981a4:	54001160 	b.eq	983d0 <CLAN7800Device::Configure()+0x460>  // b.none
   981a8:	52810002 	mov	w2, #0x800                 	// #2048
   981ac:	52801281 	mov	w1, #0x94                  	// #148
   981b0:	aa1403e0 	mov	x0, x20
   981b4:	97fffda3 	bl	97840 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   981b8:	72001c1f 	tst	w0, #0xff
   981bc:	540010a0 	b.eq	983d0 <CLAN7800Device::Configure()+0x460>  // b.none
   981c0:	9100f3e2 	add	x2, sp, #0x3c
   981c4:	52800201 	mov	w1, #0x10                  	// #16
   981c8:	aa1403e0 	mov	x0, x20
   981cc:	97fffdc5 	bl	978e0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   981d0:	72001c13 	ands	w19, w0, #0xff
   981d4:	54fff3a0 	b.eq	98048 <CLAN7800Device::Configure()+0xd8>  // b.none
   981d8:	b9403fe2 	ldr	w2, [sp, #60]
   981dc:	52800201 	mov	w1, #0x10                  	// #16
   981e0:	aa1403e0 	mov	x0, x20
   981e4:	121b7842 	and	w2, w2, #0xffffffef
   981e8:	320c0442 	orr	w2, w2, #0x300000
   981ec:	b9003fe2 	str	w2, [sp, #60]
   981f0:	97fffd94 	bl	97840 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   981f4:	72001c1f 	tst	w0, #0xff
   981f8:	54000ec0 	b.eq	983d0 <CLAN7800Device::Configure()+0x460>  // b.none
   981fc:	9100f3e2 	add	x2, sp, #0x3c
   98200:	52801001 	mov	w1, #0x80                  	// #128
   98204:	aa1403e0 	mov	x0, x20
   98208:	97fffdb6 	bl	978e0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   9820c:	72001c13 	ands	w19, w0, #0xff
   98210:	54fff1c0 	b.eq	98048 <CLAN7800Device::Configure()+0xd8>  // b.none
   98214:	b9403fe2 	ldr	w2, [sp, #60]
   98218:	52801001 	mov	w1, #0x80                  	// #128
   9821c:	aa1403e0 	mov	x0, x20
   98220:	12197842 	and	w2, w2, #0xffffffbf
   98224:	321b0042 	orr	w2, w2, #0x20
   98228:	b9003fe2 	str	w2, [sp, #60]
   9822c:	97fffd85 	bl	97840 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   98230:	72001c1f 	tst	w0, #0xff
   98234:	54000ce0 	b.eq	983d0 <CLAN7800Device::Configure()+0x460>  // b.none
   98238:	528002e2 	mov	w2, #0x17                  	// #23
   9823c:	52801901 	mov	w1, #0xc8                  	// #200
   98240:	aa1403e0 	mov	x0, x20
   98244:	97fffd7f 	bl	97840 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   98248:	72001c1f 	tst	w0, #0xff
   9824c:	54000c20 	b.eq	983d0 <CLAN7800Device::Configure()+0x460>  // b.none
   98250:	528002e2 	mov	w2, #0x17                  	// #23
   98254:	52801981 	mov	w1, #0xcc                  	// #204
   98258:	aa1403e0 	mov	x0, x20
   9825c:	97fffd79 	bl	97840 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   98260:	72001c1f 	tst	w0, #0xff
   98264:	54000b60 	b.eq	983d0 <CLAN7800Device::Configure()+0x460>  // b.none
   98268:	52800002 	mov	w2, #0x0                   	// #0
   9826c:	52801301 	mov	w1, #0x98                  	// #152
   98270:	aa1403e0 	mov	x0, x20
   98274:	97fffd73 	bl	97840 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   98278:	72001c1f 	tst	w0, #0xff
   9827c:	54000aa0 	b.eq	983d0 <CLAN7800Device::Configure()+0x460>  // b.none
   98280:	12800002 	mov	w2, #0xffffffff            	// #-1
   98284:	52800181 	mov	w1, #0xc                   	// #12
   98288:	aa1403e0 	mov	x0, x20
   9828c:	97fffd6d 	bl	97840 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   98290:	72001c1f 	tst	w0, #0xff
   98294:	540009e0 	b.eq	983d0 <CLAN7800Device::Configure()+0x460>  // b.none
   98298:	52800002 	mov	w2, #0x0                   	// #0
   9829c:	52802181 	mov	w1, #0x10c                 	// #268
   982a0:	aa1403e0 	mov	x0, x20
   982a4:	97fffd67 	bl	97840 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   982a8:	72001c1f 	tst	w0, #0xff
   982ac:	54000920 	b.eq	983d0 <CLAN7800Device::Configure()+0x460>  // b.none
   982b0:	52800002 	mov	w2, #0x0                   	// #0
   982b4:	52801a01 	mov	w1, #0xd0                  	// #208
   982b8:	aa1403e0 	mov	x0, x20
   982bc:	97fffd61 	bl	97840 <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   982c0:	72001c1f 	tst	w0, #0xff
   982c4:	54000860 	b.eq	983d0 <CLAN7800Device::Configure()+0x460>  // b.none
   982c8:	12800003 	mov	w3, #0xffffffff            	// #-1
   982cc:	52808042 	mov	w2, #0x402                 	// #1026
   982d0:	52801601 	mov	w1, #0xb0                  	// #176
   982d4:	aa1403e0 	mov	x0, x20
   982d8:	97fffebe 	bl	97dd0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   982dc:	72001c1f 	tst	w0, #0xff
   982e0:	54000780 	b.eq	983d0 <CLAN7800Device::Configure()+0x460>  // b.none
   982e4:	12800003 	mov	w3, #0xffffffff            	// #-1
   982e8:	52800202 	mov	w2, #0x10                  	// #16
   982ec:	52800281 	mov	w1, #0x14                  	// #20
   982f0:	aa1403e0 	mov	x0, x20
   982f4:	97fffeb7 	bl	97dd0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   982f8:	72001c1f 	tst	w0, #0xff
   982fc:	540008e0 	b.eq	98418 <CLAN7800Device::Configure()+0x4a8>  // b.none
   98300:	52800c85 	mov	w5, #0x64                  	// #100
   98304:	52807d04 	mov	w4, #0x3e8                 	// #1000
   98308:	52801003 	mov	w3, #0x80                  	// #128
   9830c:	52801202 	mov	w2, #0x90                  	// #144
   98310:	52800281 	mov	w1, #0x14                  	// #20
   98314:	aa1403e0 	mov	x0, x20
   98318:	97fffd9a 	bl	97980 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   9831c:	72001c1f 	tst	w0, #0xff
   98320:	540007c0 	b.eq	98418 <CLAN7800Device::Configure()+0x4a8>  // b.none
   98324:	12800003 	mov	w3, #0xffffffff            	// #-1
   98328:	52830002 	mov	w2, #0x1800                	// #6144
   9832c:	52802001 	mov	w1, #0x100                 	// #256
   98330:	aa1403e0 	mov	x0, x20
   98334:	97fffea7 	bl	97dd0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   98338:	72001c1f 	tst	w0, #0xff
   9833c:	540004a0 	b.eq	983d0 <CLAN7800Device::Configure()+0x460>  // b.none
   98340:	12800003 	mov	w3, #0xffffffff            	// #-1
   98344:	52800022 	mov	w2, #0x1                   	// #1
   98348:	52802101 	mov	w1, #0x108                 	// #264
   9834c:	aa1403e0 	mov	x0, x20
   98350:	97fffea0 	bl	97dd0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   98354:	72001c1f 	tst	w0, #0xff
   98358:	540003c0 	b.eq	983d0 <CLAN7800Device::Configure()+0x460>  // b.none
   9835c:	12800003 	mov	w3, #0xffffffff            	// #-1
   98360:	52b00002 	mov	w2, #0x80000000            	// #-2147483648
   98364:	52801881 	mov	w1, #0xc4                  	// #196
   98368:	aa1403e0 	mov	x0, x20
   9836c:	97fffe99 	bl	97dd0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   98370:	72001c1f 	tst	w0, #0xff
   98374:	540002e0 	b.eq	983d0 <CLAN7800Device::Configure()+0x460>  // b.none
   98378:	52800022 	mov	w2, #0x1                   	// #1
   9837c:	72a0bdc2 	movk	w2, #0x5ee, lsl #16
   98380:	12a7ffe3 	mov	w3, #0xc000ffff            	// #-1073676289
   98384:	52802081 	mov	w1, #0x104                 	// #260
   98388:	aa1403e0 	mov	x0, x20
   9838c:	97fffe91 	bl	97dd0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   98390:	72001c1f 	tst	w0, #0xff
   98394:	540001e0 	b.eq	983d0 <CLAN7800Device::Configure()+0x460>  // b.none
   98398:	12800003 	mov	w3, #0xffffffff            	// #-1
   9839c:	52b00002 	mov	w2, #0x80000000            	// #-2147483648
   983a0:	52801801 	mov	w1, #0xc0                  	// #192
   983a4:	aa1403e0 	mov	x0, x20
   983a8:	97fffe8a 	bl	97dd0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   983ac:	72001c1f 	tst	w0, #0xff
   983b0:	54000100 	b.eq	983d0 <CLAN7800Device::Configure()+0x460>  // b.none
   983b4:	aa1403e0 	mov	x0, x20
   983b8:	97fffe5e 	bl	97d30 <CLAN7800Device::InitPHY()>
   983bc:	72001c13 	ands	w19, w0, #0xff
   983c0:	540001c0 	b.eq	983f8 <CLAN7800Device::Configure()+0x488>  // b.none
   983c4:	9100a280 	add	x0, x20, #0x28
   983c8:	94003efa 	bl	a7fb0 <CNetDevice::AddNetDevice()>
   983cc:	17ffff1f 	b	98048 <CLAN7800Device::Configure()+0xd8>
   983d0:	52800013 	mov	w19, #0x0                   	// #0
   983d4:	17ffff1d 	b	98048 <CLAN7800Device::Configure()+0xd8>
   983d8:	94001d8e 	bl	9fa10 <CLogger::Get()>
   983dc:	900000e3 	adrp	x3, b4000 <_etext+0x3158>
   983e0:	f00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   983e4:	91100063 	add	x3, x3, #0x400
   983e8:	9116e021 	add	x1, x1, #0x5b8
   983ec:	52800022 	mov	w2, #0x1                   	// #1
   983f0:	94001f74 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   983f4:	17ffff15 	b	98048 <CLAN7800Device::Configure()+0xd8>
   983f8:	94001d86 	bl	9fa10 <CLogger::Get()>
   983fc:	900000e3 	adrp	x3, b4000 <_etext+0x3158>
   98400:	f00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   98404:	9110c063 	add	x3, x3, #0x430
   98408:	9116e021 	add	x1, x1, #0x5b8
   9840c:	52800022 	mov	w2, #0x1                   	// #1
   98410:	94001f6c 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   98414:	17ffff0d 	b	98048 <CLAN7800Device::Configure()+0xd8>
   98418:	94001d7e 	bl	9fa10 <CLogger::Get()>
   9841c:	900000e3 	adrp	x3, b4000 <_etext+0x3158>
   98420:	f00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   98424:	91106063 	add	x3, x3, #0x418
   98428:	9116e021 	add	x1, x1, #0x5b8
   9842c:	52800022 	mov	w2, #0x1                   	// #1
   98430:	52800013 	mov	w19, #0x0                   	// #0
   98434:	94001f63 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   98438:	17ffff04 	b	98048 <CLAN7800Device::Configure()+0xd8>
   9843c:	00000000 	udf	#0

0000000000098440 <CNetDevice::GetType()>:
   98440:	52800000 	mov	w0, #0x0                   	// #0
   98444:	d65f03c0 	ret
	...

0000000000098450 <CNetDevice::IsSendFrameAdvisable()>:
   98450:	52800020 	mov	w0, #0x1                   	// #1
   98454:	d65f03c0 	ret
	...

0000000000098460 <CNetDevice::UpdatePHY()>:
   98460:	52800000 	mov	w0, #0x0                   	// #0
   98464:	d65f03c0 	ret
	...

0000000000098470 <CSMSC951xDevice::GetMACAddress() const>:
   98470:	91010000 	add	x0, x0, #0x40
   98474:	d65f03c0 	ret
   98478:	d503201f 	nop
   9847c:	d503201f 	nop

0000000000098480 <CSMSC951xDevice::~CSMSC951xDevice()>:
   98480:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   98484:	f00000e2 	adrp	x2, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   98488:	9117c042 	add	x2, x2, #0x5f0
   9848c:	910003fd 	mov	x29, sp
   98490:	f00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   98494:	911a2021 	add	x1, x1, #0x688
   98498:	a90153f3 	stp	x19, x20, [sp, #16]
   9849c:	aa0003f3 	mov	x19, x0
   984a0:	f9000002 	str	x2, [x0]
   984a4:	f9001401 	str	x1, [x0, #40]
   984a8:	f9401c14 	ldr	x20, [x0, #56]
   984ac:	b40000d4 	cbz	x20, 984c4 <CSMSC951xDevice::~CSMSC951xDevice()+0x44>
   984b0:	aa1403e0 	mov	x0, x20
   984b4:	97ffc78b 	bl	8a2e0 <CUSBEndpoint::~CUSBEndpoint()>
   984b8:	aa1403e0 	mov	x0, x20
   984bc:	d2800401 	mov	x1, #0x20                  	// #32
   984c0:	94003f90 	bl	a8300 <operator delete(void*, unsigned long)>
   984c4:	f9001e7f 	str	xzr, [x19, #56]
   984c8:	f9401a74 	ldr	x20, [x19, #48]
   984cc:	b40000d4 	cbz	x20, 984e4 <CSMSC951xDevice::~CSMSC951xDevice()+0x64>
   984d0:	aa1403e0 	mov	x0, x20
   984d4:	97ffc783 	bl	8a2e0 <CUSBEndpoint::~CUSBEndpoint()>
   984d8:	aa1403e0 	mov	x0, x20
   984dc:	d2800401 	mov	x1, #0x20                  	// #32
   984e0:	94003f88 	bl	a8300 <operator delete(void*, unsigned long)>
   984e4:	91010260 	add	x0, x19, #0x40
   984e8:	f9001a7f 	str	xzr, [x19, #48]
   984ec:	94003df1 	bl	a7cb0 <CMACAddress::~CMACAddress()>
   984f0:	aa1303e0 	mov	x0, x19
   984f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   984f8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   984fc:	17ffc7cd 	b	8a430 <CUSBFunction::~CUSBFunction()>

0000000000098500 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   98500:	d100a000 	sub	x0, x0, #0x28
   98504:	17ffffdf 	b	98480 <CSMSC951xDevice::~CSMSC951xDevice()>
   98508:	d503201f 	nop
   9850c:	d503201f 	nop

0000000000098510 <CSMSC951xDevice::~CSMSC951xDevice()>:
   98510:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   98514:	910003fd 	mov	x29, sp
   98518:	f9000bf3 	str	x19, [sp, #16]
   9851c:	aa0003f3 	mov	x19, x0
   98520:	97ffffd8 	bl	98480 <CSMSC951xDevice::~CSMSC951xDevice()>
   98524:	aa1303e0 	mov	x0, x19
   98528:	d2800901 	mov	x1, #0x48                  	// #72
   9852c:	f9400bf3 	ldr	x19, [sp, #16]
   98530:	a8c27bfd 	ldp	x29, x30, [sp], #32
   98534:	14003f73 	b	a8300 <operator delete(void*, unsigned long)>
   98538:	d503201f 	nop
   9853c:	d503201f 	nop

0000000000098540 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   98540:	a9b47bfd 	stp	x29, x30, [sp, #-192]!
   98544:	910003fd 	mov	x29, sp
   98548:	a90153f3 	stp	x19, x20, [sp, #16]
   9854c:	aa0103f3 	mov	x19, x1
   98550:	a9025bf5 	stp	x21, x22, [sp, #32]
   98554:	f9401801 	ldr	x1, [x0, #48]
   98558:	b4000621 	cbz	x1, 9861c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xdc>
   9855c:	b40006d3 	cbz	x19, 98634 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xf4>
   98560:	aa0003f4 	mov	x20, x0
   98564:	d2800004 	mov	x4, #0x0                   	// #0
   98568:	5280c803 	mov	w3, #0x640                 	// #1600
   9856c:	9100c3e0 	add	x0, sp, #0x30
   98570:	aa0203f5 	mov	x21, x2
   98574:	aa1303e2 	mov	x2, x19
   98578:	97ffa54a 	bl	81aa0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   9857c:	aa1403e0 	mov	x0, x20
   98580:	97ffc8cc 	bl	8a8b0 <CUSBFunction::GetHost() const>
   98584:	f9400003 	ldr	x3, [x0]
   98588:	9100c3e1 	add	x1, sp, #0x30
   9858c:	52800002 	mov	w2, #0x0                   	// #0
   98590:	f9401063 	ldr	x3, [x3, #32]
   98594:	d63f0060 	blr	x3
   98598:	72001c14 	ands	w20, w0, #0xff
   9859c:	54000121 	b.ne	985c0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x80>  // b.any
   985a0:	52800014 	mov	w20, #0x0                   	// #0
   985a4:	9100c3e0 	add	x0, sp, #0x30
   985a8:	97ffa55e 	bl	81b20 <CUSBRequest::~CUSBRequest()>
   985ac:	2a1403e0 	mov	w0, w20
   985b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   985b4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   985b8:	a8cc7bfd 	ldp	x29, x30, [sp], #192
   985bc:	d65f03c0 	ret
   985c0:	9100c3e0 	add	x0, sp, #0x30
   985c4:	97ffa577 	bl	81ba0 <CUSBRequest::GetResultLength() const>
   985c8:	71000c1f 	cmp	w0, #0x3
   985cc:	54fffea9 	b.ls	985a0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x60>  // b.plast
   985d0:	b9400276 	ldr	w22, [x19]
   985d4:	52921bc1 	mov	w1, #0x90de                	// #37086
   985d8:	72a80001 	movk	w1, #0x4000, lsl #16
   985dc:	6a0102df 	tst	w22, w1
   985e0:	54000361 	b.ne	9864c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x10c>  // b.any
   985e4:	d35076d6 	ubfx	x22, x22, #16, #14
   985e8:	51001003 	sub	w3, w0, #0x4
   985ec:	6b16007f 	cmp	w3, w22
   985f0:	54000401 	b.ne	98670 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x130>  // b.any
   985f4:	7100107f 	cmp	w3, #0x4
   985f8:	54000489 	b.ls	98688 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x148>  // b.plast
   985fc:	91001261 	add	x1, x19, #0x4
   98600:	aa1303e0 	mov	x0, x19
   98604:	51001062 	sub	w2, w3, #0x4
   98608:	51001073 	sub	w19, w3, #0x4
   9860c:	94003c8f 	bl	a7848 <memcpy>
   98610:	b4000495 	cbz	x21, 986a0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x160>
   98614:	b90002b3 	str	w19, [x21]
   98618:	17ffffe3 	b	985a4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x64>
   9861c:	900000e1 	adrp	x1, b4000 <_etext+0x3158>
   98620:	900000e0 	adrp	x0, b4000 <_etext+0x3158>
   98624:	91110021 	add	x1, x1, #0x440
   98628:	910a0000 	add	x0, x0, #0x280
   9862c:	52802282 	mov	w2, #0x114                 	// #276
   98630:	940015c4 	bl	9dd40 <assertion_failed>
   98634:	900000e1 	adrp	x1, b4000 <_etext+0x3158>
   98638:	b00000c0 	adrp	x0, b1000 <_etext+0x158>
   9863c:	91110021 	add	x1, x1, #0x440
   98640:	911f6000 	add	x0, x0, #0x7d8
   98644:	528022a2 	mov	w2, #0x115                 	// #277
   98648:	940015be 	bl	9dd40 <assertion_failed>
   9864c:	94001cf1 	bl	9fa10 <CLogger::Get()>
   98650:	900000e3 	adrp	x3, b4000 <_etext+0x3158>
   98654:	f00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   98658:	2a1603e4 	mov	w4, w22
   9865c:	910a6063 	add	x3, x3, #0x298
   98660:	911b6021 	add	x1, x1, #0x6d8
   98664:	52800042 	mov	w2, #0x2                   	// #2
   98668:	94001ed6 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9866c:	17ffffcd 	b	985a0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x60>
   98670:	900000e1 	adrp	x1, b4000 <_etext+0x3158>
   98674:	900000e0 	adrp	x0, b4000 <_etext+0x3158>
   98678:	91110021 	add	x1, x1, #0x440
   9867c:	91114000 	add	x0, x0, #0x450
   98680:	52802582 	mov	w2, #0x12c                 	// #300
   98684:	940015af 	bl	9dd40 <assertion_failed>
   98688:	900000e1 	adrp	x1, b4000 <_etext+0x3158>
   9868c:	900000e0 	adrp	x0, b4000 <_etext+0x3158>
   98690:	91110021 	add	x1, x1, #0x440
   98694:	910b8000 	add	x0, x0, #0x2e0
   98698:	528025a2 	mov	w2, #0x12d                 	// #301
   9869c:	940015a9 	bl	9dd40 <assertion_failed>
   986a0:	900000e1 	adrp	x1, b4000 <_etext+0x3158>
   986a4:	900000e0 	adrp	x0, b4000 <_etext+0x3158>
   986a8:	91110021 	add	x1, x1, #0x440
   986ac:	910be000 	add	x0, x0, #0x2f8
   986b0:	52802702 	mov	w2, #0x138                 	// #312
   986b4:	940015a3 	bl	9dd40 <assertion_failed>
   986b8:	d503201f 	nop
   986bc:	d503201f 	nop

00000000000986c0 <non-virtual thunk to CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   986c0:	d100a000 	sub	x0, x0, #0x28
   986c4:	17ffff9f 	b	98540 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>
   986c8:	d503201f 	nop
   986cc:	d503201f 	nop

00000000000986d0 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]>:
   986d0:	d11b83ff 	sub	sp, sp, #0x6e0
   986d4:	2a0203e2 	mov	w2, w2
   986d8:	a9007bfd 	stp	x29, x30, [sp]
   986dc:	910003fd 	mov	x29, sp
   986e0:	a90153f3 	stp	x19, x20, [sp, #16]
   986e4:	9101bff3 	add	x19, sp, #0x6f
   986e8:	aa0203f4 	mov	x20, x2
   986ec:	927ae673 	and	x19, x19, #0xffffffffffffffc0
   986f0:	f90013f5 	str	x21, [sp, #32]
   986f4:	aa0003f5 	mov	x21, x0
   986f8:	91002260 	add	x0, x19, #0x8
   986fc:	94003c53 	bl	a7848 <memcpy>
   98700:	32140681 	orr	w1, w20, #0x3000
   98704:	f9401ea0 	ldr	x0, [x21, #56]
   98708:	29005261 	stp	w1, w20, [x19]
   9870c:	b40001e0 	cbz	x0, 98748 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x78>
   98710:	aa1503e0 	mov	x0, x21
   98714:	97ffc867 	bl	8a8b0 <CUSBFunction::GetHost() const>
   98718:	11002283 	add	w3, w20, #0x8
   9871c:	aa1303e2 	mov	x2, x19
   98720:	f9401ea1 	ldr	x1, [x21, #56]
   98724:	52800004 	mov	w4, #0x0                   	// #0
   98728:	97ffa2b6 	bl	81200 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   9872c:	2a2003e0 	mvn	w0, w0
   98730:	a9407bfd 	ldp	x29, x30, [sp]
   98734:	531f7c00 	lsr	w0, w0, #31
   98738:	a94153f3 	ldp	x19, x20, [sp, #16]
   9873c:	f94013f5 	ldr	x21, [sp, #32]
   98740:	911b83ff 	add	sp, sp, #0x6e0
   98744:	d65f03c0 	ret
   98748:	900000e1 	adrp	x1, b4000 <_etext+0x3158>
   9874c:	900000e0 	adrp	x0, b4000 <_etext+0x3158>
   98750:	91110021 	add	x1, x1, #0x440
   98754:	910c4000 	add	x0, x0, #0x310
   98758:	528021c2 	mov	w2, #0x10e                 	// #270
   9875c:	94001579 	bl	9dd40 <assertion_failed>

0000000000098760 <CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   98760:	7119005f 	cmp	w2, #0x640
   98764:	54000068 	b.hi	98770 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x10>  // b.pmore
   98768:	b4000081 	cbz	x1, 98778 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x18>
   9876c:	17ffffd9 	b	986d0 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]>
   98770:	52800000 	mov	w0, #0x0                   	// #0
   98774:	d65f03c0 	ret
   98778:	900000e1 	adrp	x1, b4000 <_etext+0x3158>
   9877c:	b00000c0 	adrp	x0, b1000 <_etext+0x158>
   98780:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   98784:	91110021 	add	x1, x1, #0x440
   98788:	910003fd 	mov	x29, sp
   9878c:	911f6000 	add	x0, x0, #0x7d8
   98790:	528020e2 	mov	w2, #0x107                 	// #263
   98794:	9400156b 	bl	9dd40 <assertion_failed>
   98798:	d503201f 	nop
   9879c:	d503201f 	nop

00000000000987a0 <non-virtual thunk to CSMSC951xDevice::GetMACAddress() const>:
   987a0:	91006000 	add	x0, x0, #0x18
   987a4:	d65f03c0 	ret
   987a8:	d503201f 	nop
   987ac:	d503201f 	nop

00000000000987b0 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   987b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   987b4:	910003fd 	mov	x29, sp
   987b8:	f9000bf3 	str	x19, [sp, #16]
   987bc:	d100a013 	sub	x19, x0, #0x28
   987c0:	aa1303e0 	mov	x0, x19
   987c4:	97ffff2f 	bl	98480 <CSMSC951xDevice::~CSMSC951xDevice()>
   987c8:	aa1303e0 	mov	x0, x19
   987cc:	d2800901 	mov	x1, #0x48                  	// #72
   987d0:	f9400bf3 	ldr	x19, [sp, #16]
   987d4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   987d8:	14003eca 	b	a8300 <operator delete(void*, unsigned long)>
   987dc:	d503201f 	nop

00000000000987e0 <non-virtual thunk to CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   987e0:	7119005f 	cmp	w2, #0x640
   987e4:	54000088 	b.hi	987f4 <non-virtual thunk to CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x14>  // b.pmore
   987e8:	b40000a1 	cbz	x1, 987fc <non-virtual thunk to CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x1c>
   987ec:	d100a000 	sub	x0, x0, #0x28
   987f0:	17ffffb8 	b	986d0 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]>
   987f4:	52800000 	mov	w0, #0x0                   	// #0
   987f8:	d65f03c0 	ret
   987fc:	900000e1 	adrp	x1, b4000 <_etext+0x3158>
   98800:	b00000c0 	adrp	x0, b1000 <_etext+0x158>
   98804:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   98808:	91110021 	add	x1, x1, #0x440
   9880c:	910003fd 	mov	x29, sp
   98810:	911f6000 	add	x0, x0, #0x7d8
   98814:	528020e2 	mov	w2, #0x107                 	// #263
   98818:	9400154a 	bl	9dd40 <assertion_failed>
   9881c:	d503201f 	nop

0000000000098820 <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>:
   98820:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   98824:	910003fd 	mov	x29, sp
   98828:	f9000bf3 	str	x19, [sp, #16]
   9882c:	aa0003f3 	mov	x19, x0
   98830:	97ffc7a4 	bl	8a6c0 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   98834:	f00000e2 	adrp	x2, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   98838:	9117c042 	add	x2, x2, #0x5f0
   9883c:	f9001e7f 	str	xzr, [x19, #56]
   98840:	f00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   98844:	911a2021 	add	x1, x1, #0x688
   98848:	91010260 	add	x0, x19, #0x40
   9884c:	f9000262 	str	x2, [x19]
   98850:	a902fe61 	stp	x1, xzr, [x19, #40]
   98854:	f9400bf3 	ldr	x19, [sp, #16]
   98858:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9885c:	14003cfd 	b	a7c50 <CMACAddress::CMACAddress()>

0000000000098860 <CSMSC951xDevice::PHYWaitNotBusy()>:
   98860:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   98864:	910003fd 	mov	x29, sp
   98868:	a90153f3 	stp	x19, x20, [sp, #16]
   9886c:	aa0003f4 	mov	x20, x0
   98870:	a9025bf5 	stp	x21, x22, [sp, #32]
   98874:	94003a1f 	bl	a70f0 <CTimer::Get()>
   98878:	b40004c0 	cbz	x0, 98910 <CSMSC951xDevice::PHYWaitNotBusy()+0xb0>
   9887c:	aa0003f5 	mov	x21, x0
   98880:	940036fc 	bl	a6470 <CTimer::GetTicks() const>
   98884:	2a0003f6 	mov	w22, w0
   98888:	14000013 	b	988d4 <CSMSC951xDevice::PHYWaitNotBusy()+0x74>
   9888c:	aa1403e0 	mov	x0, x20
   98890:	97ffc808 	bl	8a8b0 <CUSBFunction::GetHost() const>
   98894:	aa0003f3 	mov	x19, x0
   98898:	aa1403e0 	mov	x0, x20
   9889c:	97ffc7f9 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   988a0:	aa0003e1 	mov	x1, x0
   988a4:	52800087 	mov	w7, #0x4                   	// #4
   988a8:	aa1303e0 	mov	x0, x19
   988ac:	9100f3e6 	add	x6, sp, #0x3c
   988b0:	52802285 	mov	w5, #0x114                 	// #276
   988b4:	52800004 	mov	w4, #0x0                   	// #0
   988b8:	12800bc3 	mov	w3, #0xffffffa1            	// #-95
   988bc:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   988c0:	97ffa1d4 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   988c4:	7100101f 	cmp	w0, #0x4
   988c8:	54000101 	b.ne	988e8 <CSMSC951xDevice::PHYWaitNotBusy()+0x88>  // b.any
   988cc:	b9403fe1 	ldr	w1, [sp, #60]
   988d0:	36000161 	tbz	w1, #0, 988fc <CSMSC951xDevice::PHYWaitNotBusy()+0x9c>
   988d4:	aa1503e0 	mov	x0, x21
   988d8:	940036e6 	bl	a6470 <CTimer::GetTicks() const>
   988dc:	4b160001 	sub	w1, w0, w22
   988e0:	71018c3f 	cmp	w1, #0x63
   988e4:	54fffd49 	b.ls	9888c <CSMSC951xDevice::PHYWaitNotBusy()+0x2c>  // b.plast
   988e8:	52800000 	mov	w0, #0x0                   	// #0
   988ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   988f0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   988f4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   988f8:	d65f03c0 	ret
   988fc:	52800020 	mov	w0, #0x1                   	// #1
   98900:	a94153f3 	ldp	x19, x20, [sp, #16]
   98904:	a9425bf5 	ldp	x21, x22, [sp, #32]
   98908:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9890c:	d65f03c0 	ret
   98910:	900000e1 	adrp	x1, b4000 <_etext+0x3158>
   98914:	900000e0 	adrp	x0, b4000 <_etext+0x3158>
   98918:	91110021 	add	x1, x1, #0x440
   9891c:	910da000 	add	x0, x0, #0x368
   98920:	528031e2 	mov	w2, #0x18f                 	// #399
   98924:	94001507 	bl	9dd40 <assertion_failed>
   98928:	d503201f 	nop
   9892c:	d503201f 	nop

0000000000098930 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)>:
   98930:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   98934:	910003fd 	mov	x29, sp
   98938:	a90153f3 	stp	x19, x20, [sp, #16]
   9893c:	12001c34 	and	w20, w1, #0xff
   98940:	71007e9f 	cmp	w20, #0x1f
   98944:	f90013f5 	str	x21, [sp, #32]
   98948:	54000648 	b.hi	98a10 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0xe0>  // b.pmore
   9894c:	12003c55 	and	w21, w2, #0xffff
   98950:	aa0003f3 	mov	x19, x0
   98954:	97ffffc3 	bl	98860 <CSMSC951xDevice::PHYWaitNotBusy()>
   98958:	72001c1f 	tst	w0, #0xff
   9895c:	540000c1 	b.ne	98974 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x44>  // b.any
   98960:	52800000 	mov	w0, #0x0                   	// #0
   98964:	a94153f3 	ldp	x19, x20, [sp, #16]
   98968:	f94013f5 	ldr	x21, [sp, #32]
   9896c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   98970:	d65f03c0 	ret
   98974:	aa1303e0 	mov	x0, x19
   98978:	b9003ff5 	str	w21, [sp, #60]
   9897c:	97ffc7cd 	bl	8a8b0 <CUSBFunction::GetHost() const>
   98980:	aa0003f5 	mov	x21, x0
   98984:	aa1303e0 	mov	x0, x19
   98988:	97ffc7be 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   9898c:	aa0003e1 	mov	x1, x0
   98990:	9100f3e6 	add	x6, sp, #0x3c
   98994:	aa1503e0 	mov	x0, x21
   98998:	52800087 	mov	w7, #0x4                   	// #4
   9899c:	52802305 	mov	w5, #0x118                 	// #280
   989a0:	52800004 	mov	w4, #0x0                   	// #0
   989a4:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   989a8:	52800802 	mov	w2, #0x40                  	// #64
   989ac:	97ffa199 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   989b0:	37fffd80 	tbnz	w0, #31, 98960 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x30>
   989b4:	52810061 	mov	w1, #0x803                 	// #2051
   989b8:	aa1303e0 	mov	x0, x19
   989bc:	2a141834 	orr	w20, w1, w20, lsl #6
   989c0:	b9003ff4 	str	w20, [sp, #60]
   989c4:	97ffc7bb 	bl	8a8b0 <CUSBFunction::GetHost() const>
   989c8:	aa0003f4 	mov	x20, x0
   989cc:	aa1303e0 	mov	x0, x19
   989d0:	97ffc7ac 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   989d4:	aa0003e1 	mov	x1, x0
   989d8:	9100f3e6 	add	x6, sp, #0x3c
   989dc:	aa1403e0 	mov	x0, x20
   989e0:	52800087 	mov	w7, #0x4                   	// #4
   989e4:	52802285 	mov	w5, #0x114                 	// #276
   989e8:	52800004 	mov	w4, #0x0                   	// #0
   989ec:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   989f0:	52800802 	mov	w2, #0x40                  	// #64
   989f4:	97ffa187 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   989f8:	37fffb40 	tbnz	w0, #31, 98960 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x30>
   989fc:	aa1303e0 	mov	x0, x19
   98a00:	a94153f3 	ldp	x19, x20, [sp, #16]
   98a04:	f94013f5 	ldr	x21, [sp, #32]
   98a08:	a8c47bfd 	ldp	x29, x30, [sp], #64
   98a0c:	17ffff95 	b	98860 <CSMSC951xDevice::PHYWaitNotBusy()>
   98a10:	900000e1 	adrp	x1, b4000 <_etext+0x3158>
   98a14:	900000e0 	adrp	x0, b4000 <_etext+0x3158>
   98a18:	91110021 	add	x1, x1, #0x440
   98a1c:	910de000 	add	x0, x0, #0x378
   98a20:	52802c62 	mov	w2, #0x163                 	// #355
   98a24:	940014c7 	bl	9dd40 <assertion_failed>
   98a28:	d503201f 	nop
   98a2c:	d503201f 	nop

0000000000098a30 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>:
   98a30:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   98a34:	910003fd 	mov	x29, sp
   98a38:	a9025bf5 	stp	x21, x22, [sp, #32]
   98a3c:	12001c35 	and	w21, w1, #0xff
   98a40:	71007ebf 	cmp	w21, #0x1f
   98a44:	a90153f3 	stp	x19, x20, [sp, #16]
   98a48:	54000788 	b.hi	98b38 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x108>  // b.pmore
   98a4c:	aa0203f6 	mov	x22, x2
   98a50:	aa0003f4 	mov	x20, x0
   98a54:	97ffff83 	bl	98860 <CSMSC951xDevice::PHYWaitNotBusy()>
   98a58:	72001c13 	ands	w19, w0, #0xff
   98a5c:	540000c1 	b.ne	98a74 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x44>  // b.any
   98a60:	2a1303e0 	mov	w0, w19
   98a64:	a94153f3 	ldp	x19, x20, [sp, #16]
   98a68:	a9425bf5 	ldp	x21, x22, [sp, #32]
   98a6c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   98a70:	d65f03c0 	ret
   98a74:	52810021 	mov	w1, #0x801                 	// #2049
   98a78:	aa1403e0 	mov	x0, x20
   98a7c:	2a151835 	orr	w21, w1, w21, lsl #6
   98a80:	b9003ff5 	str	w21, [sp, #60]
   98a84:	97ffc78b 	bl	8a8b0 <CUSBFunction::GetHost() const>
   98a88:	aa0003f3 	mov	x19, x0
   98a8c:	aa1403e0 	mov	x0, x20
   98a90:	97ffc77c 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   98a94:	aa0003e1 	mov	x1, x0
   98a98:	9100f3e6 	add	x6, sp, #0x3c
   98a9c:	aa1303e0 	mov	x0, x19
   98aa0:	52800087 	mov	w7, #0x4                   	// #4
   98aa4:	52802285 	mov	w5, #0x114                 	// #276
   98aa8:	52800004 	mov	w4, #0x0                   	// #0
   98aac:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   98ab0:	52800802 	mov	w2, #0x40                  	// #64
   98ab4:	97ffa157 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   98ab8:	37f800a0 	tbnz	w0, #31, 98acc <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x9c>
   98abc:	aa1403e0 	mov	x0, x20
   98ac0:	97ffff68 	bl	98860 <CSMSC951xDevice::PHYWaitNotBusy()>
   98ac4:	72001c13 	ands	w19, w0, #0xff
   98ac8:	540000e1 	b.ne	98ae4 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0xb4>  // b.any
   98acc:	52800013 	mov	w19, #0x0                   	// #0
   98ad0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   98ad4:	2a1303e0 	mov	w0, w19
   98ad8:	a94153f3 	ldp	x19, x20, [sp, #16]
   98adc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   98ae0:	d65f03c0 	ret
   98ae4:	aa1403e0 	mov	x0, x20
   98ae8:	97ffc772 	bl	8a8b0 <CUSBFunction::GetHost() const>
   98aec:	aa0003e1 	mov	x1, x0
   98af0:	aa1403e0 	mov	x0, x20
   98af4:	aa0103f4 	mov	x20, x1
   98af8:	97ffc762 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   98afc:	aa0003e1 	mov	x1, x0
   98b00:	9100f3e6 	add	x6, sp, #0x3c
   98b04:	aa1403e0 	mov	x0, x20
   98b08:	52800087 	mov	w7, #0x4                   	// #4
   98b0c:	52802305 	mov	w5, #0x118                 	// #280
   98b10:	52800004 	mov	w4, #0x0                   	// #0
   98b14:	12800bc3 	mov	w3, #0xffffffa1            	// #-95
   98b18:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   98b1c:	97ffa13d 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   98b20:	7100101f 	cmp	w0, #0x4
   98b24:	54fffd41 	b.ne	98acc <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x9c>  // b.any
   98b28:	b4000156 	cbz	x22, 98b50 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x120>
   98b2c:	b9403fe0 	ldr	w0, [sp, #60]
   98b30:	790002c0 	strh	w0, [x22]
   98b34:	17ffffcb 	b	98a60 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x30>
   98b38:	900000e1 	adrp	x1, b4000 <_etext+0x3158>
   98b3c:	900000e0 	adrp	x0, b4000 <_etext+0x3158>
   98b40:	91110021 	add	x1, x1, #0x440
   98b44:	910de000 	add	x0, x0, #0x378
   98b48:	52802ec2 	mov	w2, #0x176                 	// #374
   98b4c:	9400147d 	bl	9dd40 <assertion_failed>
   98b50:	900000e1 	adrp	x1, b4000 <_etext+0x3158>
   98b54:	900000e0 	adrp	x0, b4000 <_etext+0x3158>
   98b58:	91110021 	add	x1, x1, #0x440
   98b5c:	910e2000 	add	x0, x0, #0x388
   98b60:	528030c2 	mov	w2, #0x186                 	// #390
   98b64:	94001477 	bl	9dd40 <assertion_failed>
   98b68:	d503201f 	nop
   98b6c:	d503201f 	nop

0000000000098b70 <CSMSC951xDevice::IsLinkUp()>:
   98b70:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   98b74:	910003fd 	mov	x29, sp
   98b78:	a90153f3 	stp	x19, x20, [sp, #16]
   98b7c:	aa0003f3 	mov	x19, x0
   98b80:	97ffff38 	bl	98860 <CSMSC951xDevice::PHYWaitNotBusy()>
   98b84:	72001c00 	ands	w0, w0, #0xff
   98b88:	54000081 	b.ne	98b98 <CSMSC951xDevice::IsLinkUp()+0x28>  // b.any
   98b8c:	a94153f3 	ldp	x19, x20, [sp, #16]
   98b90:	a8c37bfd 	ldp	x29, x30, [sp], #48
   98b94:	d65f03c0 	ret
   98b98:	52810821 	mov	w1, #0x841                 	// #2113
   98b9c:	aa1303e0 	mov	x0, x19
   98ba0:	b9002fe1 	str	w1, [sp, #44]
   98ba4:	97ffc743 	bl	8a8b0 <CUSBFunction::GetHost() const>
   98ba8:	aa0003f4 	mov	x20, x0
   98bac:	aa1303e0 	mov	x0, x19
   98bb0:	97ffc734 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   98bb4:	aa0003e1 	mov	x1, x0
   98bb8:	9100b3e6 	add	x6, sp, #0x2c
   98bbc:	aa1403e0 	mov	x0, x20
   98bc0:	52800087 	mov	w7, #0x4                   	// #4
   98bc4:	52802285 	mov	w5, #0x114                 	// #276
   98bc8:	52800004 	mov	w4, #0x0                   	// #0
   98bcc:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   98bd0:	52800802 	mov	w2, #0x40                  	// #64
   98bd4:	97ffa10f 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   98bd8:	37f800a0 	tbnz	w0, #31, 98bec <CSMSC951xDevice::IsLinkUp()+0x7c>
   98bdc:	aa1303e0 	mov	x0, x19
   98be0:	97ffff20 	bl	98860 <CSMSC951xDevice::PHYWaitNotBusy()>
   98be4:	72001c1f 	tst	w0, #0xff
   98be8:	540000a1 	b.ne	98bfc <CSMSC951xDevice::IsLinkUp()+0x8c>  // b.any
   98bec:	52800000 	mov	w0, #0x0                   	// #0
   98bf0:	a94153f3 	ldp	x19, x20, [sp, #16]
   98bf4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   98bf8:	d65f03c0 	ret
   98bfc:	aa1303e0 	mov	x0, x19
   98c00:	97ffc72c 	bl	8a8b0 <CUSBFunction::GetHost() const>
   98c04:	aa0003e1 	mov	x1, x0
   98c08:	aa1303e0 	mov	x0, x19
   98c0c:	aa0103f3 	mov	x19, x1
   98c10:	97ffc71c 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   98c14:	aa0003e1 	mov	x1, x0
   98c18:	9100b3e6 	add	x6, sp, #0x2c
   98c1c:	aa1303e0 	mov	x0, x19
   98c20:	52800087 	mov	w7, #0x4                   	// #4
   98c24:	52802305 	mov	w5, #0x118                 	// #280
   98c28:	52800004 	mov	w4, #0x0                   	// #0
   98c2c:	12800bc3 	mov	w3, #0xffffffa1            	// #-95
   98c30:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   98c34:	97ffa0f7 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   98c38:	7100101f 	cmp	w0, #0x4
   98c3c:	54fffd81 	b.ne	98bec <CSMSC951xDevice::IsLinkUp()+0x7c>  // b.any
   98c40:	b9402fe0 	ldr	w0, [sp, #44]
   98c44:	a94153f3 	ldp	x19, x20, [sp, #16]
   98c48:	a8c37bfd 	ldp	x29, x30, [sp], #48
   98c4c:	d3420800 	ubfx	x0, x0, #2, #1
   98c50:	d65f03c0 	ret
   98c54:	d503201f 	nop
   98c58:	d503201f 	nop
   98c5c:	d503201f 	nop

0000000000098c60 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()>:
   98c60:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   98c64:	910003fd 	mov	x29, sp
   98c68:	a90153f3 	stp	x19, x20, [sp, #16]
   98c6c:	d100a013 	sub	x19, x0, #0x28
   98c70:	aa1303e0 	mov	x0, x19
   98c74:	97fffefb 	bl	98860 <CSMSC951xDevice::PHYWaitNotBusy()>
   98c78:	72001c00 	ands	w0, w0, #0xff
   98c7c:	54000081 	b.ne	98c8c <non-virtual thunk to CSMSC951xDevice::IsLinkUp()+0x2c>  // b.any
   98c80:	a94153f3 	ldp	x19, x20, [sp, #16]
   98c84:	a8c37bfd 	ldp	x29, x30, [sp], #48
   98c88:	d65f03c0 	ret
   98c8c:	52810821 	mov	w1, #0x841                 	// #2113
   98c90:	aa1303e0 	mov	x0, x19
   98c94:	b9002fe1 	str	w1, [sp, #44]
   98c98:	97ffc706 	bl	8a8b0 <CUSBFunction::GetHost() const>
   98c9c:	aa0003f4 	mov	x20, x0
   98ca0:	aa1303e0 	mov	x0, x19
   98ca4:	97ffc6f7 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   98ca8:	aa0003e1 	mov	x1, x0
   98cac:	9100b3e6 	add	x6, sp, #0x2c
   98cb0:	aa1403e0 	mov	x0, x20
   98cb4:	52800087 	mov	w7, #0x4                   	// #4
   98cb8:	52802285 	mov	w5, #0x114                 	// #276
   98cbc:	52800004 	mov	w4, #0x0                   	// #0
   98cc0:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   98cc4:	52800802 	mov	w2, #0x40                  	// #64
   98cc8:	97ffa0d2 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   98ccc:	37f800a0 	tbnz	w0, #31, 98ce0 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()+0x80>
   98cd0:	aa1303e0 	mov	x0, x19
   98cd4:	97fffee3 	bl	98860 <CSMSC951xDevice::PHYWaitNotBusy()>
   98cd8:	72001c1f 	tst	w0, #0xff
   98cdc:	540000a1 	b.ne	98cf0 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()+0x90>  // b.any
   98ce0:	52800000 	mov	w0, #0x0                   	// #0
   98ce4:	a94153f3 	ldp	x19, x20, [sp, #16]
   98ce8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   98cec:	d65f03c0 	ret
   98cf0:	aa1303e0 	mov	x0, x19
   98cf4:	97ffc6ef 	bl	8a8b0 <CUSBFunction::GetHost() const>
   98cf8:	aa0003e1 	mov	x1, x0
   98cfc:	aa1303e0 	mov	x0, x19
   98d00:	aa0103f3 	mov	x19, x1
   98d04:	97ffc6df 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   98d08:	aa0003e1 	mov	x1, x0
   98d0c:	9100b3e6 	add	x6, sp, #0x2c
   98d10:	aa1303e0 	mov	x0, x19
   98d14:	52800087 	mov	w7, #0x4                   	// #4
   98d18:	52802305 	mov	w5, #0x118                 	// #280
   98d1c:	52800004 	mov	w4, #0x0                   	// #0
   98d20:	12800bc3 	mov	w3, #0xffffffa1            	// #-95
   98d24:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   98d28:	97ffa0ba 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   98d2c:	7100101f 	cmp	w0, #0x4
   98d30:	54fffd81 	b.ne	98ce0 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()+0x80>  // b.any
   98d34:	b9402fe0 	ldr	w0, [sp, #44]
   98d38:	a94153f3 	ldp	x19, x20, [sp, #16]
   98d3c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   98d40:	d3420800 	ubfx	x0, x0, #2, #1
   98d44:	d65f03c0 	ret
   98d48:	d503201f 	nop
   98d4c:	d503201f 	nop

0000000000098d50 <CSMSC951xDevice::GetLinkSpeed()>:
   98d50:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   98d54:	910003fd 	mov	x29, sp
   98d58:	a90153f3 	stp	x19, x20, [sp, #16]
   98d5c:	aa0003f3 	mov	x19, x0
   98d60:	97fffec0 	bl	98860 <CSMSC951xDevice::PHYWaitNotBusy()>
   98d64:	72001c1f 	tst	w0, #0xff
   98d68:	540000a1 	b.ne	98d7c <CSMSC951xDevice::GetLinkSpeed()+0x2c>  // b.any
   98d6c:	528000c0 	mov	w0, #0x6                   	// #6
   98d70:	a94153f3 	ldp	x19, x20, [sp, #16]
   98d74:	a8c37bfd 	ldp	x29, x30, [sp], #48
   98d78:	d65f03c0 	ret
   98d7c:	5281f821 	mov	w1, #0xfc1                 	// #4033
   98d80:	aa1303e0 	mov	x0, x19
   98d84:	b9002fe1 	str	w1, [sp, #44]
   98d88:	97ffc6ca 	bl	8a8b0 <CUSBFunction::GetHost() const>
   98d8c:	aa0003f4 	mov	x20, x0
   98d90:	aa1303e0 	mov	x0, x19
   98d94:	97ffc6bb 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   98d98:	aa0003e1 	mov	x1, x0
   98d9c:	9100b3e6 	add	x6, sp, #0x2c
   98da0:	aa1403e0 	mov	x0, x20
   98da4:	52800087 	mov	w7, #0x4                   	// #4
   98da8:	52802285 	mov	w5, #0x114                 	// #276
   98dac:	52800004 	mov	w4, #0x0                   	// #0
   98db0:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   98db4:	52800802 	mov	w2, #0x40                  	// #64
   98db8:	97ffa096 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   98dbc:	37fffd80 	tbnz	w0, #31, 98d6c <CSMSC951xDevice::GetLinkSpeed()+0x1c>
   98dc0:	aa1303e0 	mov	x0, x19
   98dc4:	97fffea7 	bl	98860 <CSMSC951xDevice::PHYWaitNotBusy()>
   98dc8:	72001c1f 	tst	w0, #0xff
   98dcc:	54fffd00 	b.eq	98d6c <CSMSC951xDevice::GetLinkSpeed()+0x1c>  // b.none
   98dd0:	aa1303e0 	mov	x0, x19
   98dd4:	97ffc6b7 	bl	8a8b0 <CUSBFunction::GetHost() const>
   98dd8:	aa0003e1 	mov	x1, x0
   98ddc:	aa1303e0 	mov	x0, x19
   98de0:	aa0103f3 	mov	x19, x1
   98de4:	97ffc6a7 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   98de8:	aa0003e1 	mov	x1, x0
   98dec:	9100b3e6 	add	x6, sp, #0x2c
   98df0:	aa1303e0 	mov	x0, x19
   98df4:	52800087 	mov	w7, #0x4                   	// #4
   98df8:	52802305 	mov	w5, #0x118                 	// #280
   98dfc:	52800004 	mov	w4, #0x0                   	// #0
   98e00:	12800bc3 	mov	w3, #0xffffffa1            	// #-95
   98e04:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   98e08:	97ffa082 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   98e0c:	7100101f 	cmp	w0, #0x4
   98e10:	54fffae1 	b.ne	98d6c <CSMSC951xDevice::GetLinkSpeed()+0x1c>  // b.any
   98e14:	79405be0 	ldrh	w0, [sp, #44]
   98e18:	3667faa0 	tbz	w0, #12, 98d6c <CSMSC951xDevice::GetLinkSpeed()+0x1c>
   98e1c:	d3421000 	ubfx	x0, x0, #2, #3
   98e20:	51000400 	sub	w0, w0, #0x1
   98e24:	12003c00 	and	w0, w0, #0xffff
   98e28:	7100141f 	cmp	w0, #0x5
   98e2c:	54fffa08 	b.hi	98d6c <CSMSC951xDevice::GetLinkSpeed()+0x1c>  // b.pmore
   98e30:	f00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   98e34:	911b6021 	add	x1, x1, #0x6d8
   98e38:	a94153f3 	ldp	x19, x20, [sp, #16]
   98e3c:	91004021 	add	x1, x1, #0x10
   98e40:	92403c00 	and	x0, x0, #0xffff
   98e44:	b8607820 	ldr	w0, [x1, x0, lsl #2]
   98e48:	a8c37bfd 	ldp	x29, x30, [sp], #48
   98e4c:	d65f03c0 	ret

0000000000098e50 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()>:
   98e50:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   98e54:	910003fd 	mov	x29, sp
   98e58:	a90153f3 	stp	x19, x20, [sp, #16]
   98e5c:	d100a013 	sub	x19, x0, #0x28
   98e60:	aa1303e0 	mov	x0, x19
   98e64:	97fffe7f 	bl	98860 <CSMSC951xDevice::PHYWaitNotBusy()>
   98e68:	72001c1f 	tst	w0, #0xff
   98e6c:	540000a1 	b.ne	98e80 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x30>  // b.any
   98e70:	528000c0 	mov	w0, #0x6                   	// #6
   98e74:	a94153f3 	ldp	x19, x20, [sp, #16]
   98e78:	a8c37bfd 	ldp	x29, x30, [sp], #48
   98e7c:	d65f03c0 	ret
   98e80:	5281f821 	mov	w1, #0xfc1                 	// #4033
   98e84:	aa1303e0 	mov	x0, x19
   98e88:	b9002fe1 	str	w1, [sp, #44]
   98e8c:	97ffc689 	bl	8a8b0 <CUSBFunction::GetHost() const>
   98e90:	aa0003f4 	mov	x20, x0
   98e94:	aa1303e0 	mov	x0, x19
   98e98:	97ffc67a 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   98e9c:	aa0003e1 	mov	x1, x0
   98ea0:	9100b3e6 	add	x6, sp, #0x2c
   98ea4:	aa1403e0 	mov	x0, x20
   98ea8:	52800087 	mov	w7, #0x4                   	// #4
   98eac:	52802285 	mov	w5, #0x114                 	// #276
   98eb0:	52800004 	mov	w4, #0x0                   	// #0
   98eb4:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   98eb8:	52800802 	mov	w2, #0x40                  	// #64
   98ebc:	97ffa055 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   98ec0:	37fffd80 	tbnz	w0, #31, 98e70 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x20>
   98ec4:	aa1303e0 	mov	x0, x19
   98ec8:	97fffe66 	bl	98860 <CSMSC951xDevice::PHYWaitNotBusy()>
   98ecc:	72001c1f 	tst	w0, #0xff
   98ed0:	54fffd00 	b.eq	98e70 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x20>  // b.none
   98ed4:	aa1303e0 	mov	x0, x19
   98ed8:	97ffc676 	bl	8a8b0 <CUSBFunction::GetHost() const>
   98edc:	aa0003e1 	mov	x1, x0
   98ee0:	aa1303e0 	mov	x0, x19
   98ee4:	aa0103f3 	mov	x19, x1
   98ee8:	97ffc666 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   98eec:	aa0003e1 	mov	x1, x0
   98ef0:	9100b3e6 	add	x6, sp, #0x2c
   98ef4:	aa1303e0 	mov	x0, x19
   98ef8:	52800087 	mov	w7, #0x4                   	// #4
   98efc:	52802305 	mov	w5, #0x118                 	// #280
   98f00:	52800004 	mov	w4, #0x0                   	// #0
   98f04:	12800bc3 	mov	w3, #0xffffffa1            	// #-95
   98f08:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   98f0c:	97ffa041 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   98f10:	7100101f 	cmp	w0, #0x4
   98f14:	54fffae1 	b.ne	98e70 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x20>  // b.any
   98f18:	79405be0 	ldrh	w0, [sp, #44]
   98f1c:	3667faa0 	tbz	w0, #12, 98e70 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x20>
   98f20:	d3421000 	ubfx	x0, x0, #2, #3
   98f24:	51000400 	sub	w0, w0, #0x1
   98f28:	12003c00 	and	w0, w0, #0xffff
   98f2c:	7100141f 	cmp	w0, #0x5
   98f30:	54fffa08 	b.hi	98e70 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x20>  // b.pmore
   98f34:	f00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   98f38:	911b6021 	add	x1, x1, #0x6d8
   98f3c:	a94153f3 	ldp	x19, x20, [sp, #16]
   98f40:	91004021 	add	x1, x1, #0x10
   98f44:	92403c00 	and	x0, x0, #0xffff
   98f48:	b8607820 	ldr	w0, [x1, x0, lsl #2]
   98f4c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   98f50:	d65f03c0 	ret
   98f54:	d503201f 	nop
   98f58:	d503201f 	nop
   98f5c:	d503201f 	nop

0000000000098f60 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>:
   98f60:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   98f64:	910003fd 	mov	x29, sp
   98f68:	a90153f3 	stp	x19, x20, [sp, #16]
   98f6c:	2a0103f4 	mov	w20, w1
   98f70:	f90013f5 	str	x21, [sp, #32]
   98f74:	aa0003f5 	mov	x21, x0
   98f78:	b9003fe2 	str	w2, [sp, #60]
   98f7c:	97ffc64d 	bl	8a8b0 <CUSBFunction::GetHost() const>
   98f80:	aa0003f3 	mov	x19, x0
   98f84:	aa1503e0 	mov	x0, x21
   98f88:	97ffc63e 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   98f8c:	aa0003e1 	mov	x1, x0
   98f90:	2a1403e5 	mov	w5, w20
   98f94:	9100f3e6 	add	x6, sp, #0x3c
   98f98:	aa1303e0 	mov	x0, x19
   98f9c:	52800087 	mov	w7, #0x4                   	// #4
   98fa0:	52800004 	mov	w4, #0x0                   	// #0
   98fa4:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   98fa8:	52800802 	mov	w2, #0x40                  	// #64
   98fac:	97ffa019 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   98fb0:	2a2003e0 	mvn	w0, w0
   98fb4:	a94153f3 	ldp	x19, x20, [sp, #16]
   98fb8:	531f7c00 	lsr	w0, w0, #31
   98fbc:	f94013f5 	ldr	x21, [sp, #32]
   98fc0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   98fc4:	d65f03c0 	ret
   98fc8:	d503201f 	nop
   98fcc:	d503201f 	nop

0000000000098fd0 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>:
   98fd0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   98fd4:	910003fd 	mov	x29, sp
   98fd8:	a90153f3 	stp	x19, x20, [sp, #16]
   98fdc:	2a0103f4 	mov	w20, w1
   98fe0:	a9025bf5 	stp	x21, x22, [sp, #32]
   98fe4:	aa0203f5 	mov	x21, x2
   98fe8:	aa0003f6 	mov	x22, x0
   98fec:	97ffc631 	bl	8a8b0 <CUSBFunction::GetHost() const>
   98ff0:	aa0003f3 	mov	x19, x0
   98ff4:	aa1603e0 	mov	x0, x22
   98ff8:	97ffc622 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   98ffc:	aa0003e1 	mov	x1, x0
   99000:	aa1503e6 	mov	x6, x21
   99004:	2a1403e5 	mov	w5, w20
   99008:	aa1303e0 	mov	x0, x19
   9900c:	52800087 	mov	w7, #0x4                   	// #4
   99010:	52800004 	mov	w4, #0x0                   	// #0
   99014:	12800bc3 	mov	w3, #0xffffffa1            	// #-95
   99018:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   9901c:	97ff9ffd 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   99020:	7100101f 	cmp	w0, #0x4
   99024:	1a9f17e0 	cset	w0, eq	// eq = none
   99028:	a94153f3 	ldp	x19, x20, [sp, #16]
   9902c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   99030:	a8c37bfd 	ldp	x29, x30, [sp], #48
   99034:	d65f03c0 	ret
   99038:	d503201f 	nop
   9903c:	d503201f 	nop

0000000000099040 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>:
   99040:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   99044:	910003fd 	mov	x29, sp
   99048:	a90153f3 	stp	x19, x20, [sp, #16]
   9904c:	2a0203f4 	mov	w20, w2
   99050:	a9025bf5 	stp	x21, x22, [sp, #32]
   99054:	aa0103f6 	mov	x22, x1
   99058:	aa0003f5 	mov	x21, x0
   9905c:	97ffc615 	bl	8a8b0 <CUSBFunction::GetHost() const>
   99060:	aa0003f3 	mov	x19, x0
   99064:	aa1503e0 	mov	x0, x21
   99068:	97ffc606 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   9906c:	aa0003e1 	mov	x1, x0
   99070:	2a1403e5 	mov	w5, w20
   99074:	aa1303e0 	mov	x0, x19
   99078:	52800087 	mov	w7, #0x4                   	// #4
   9907c:	9100f3e6 	add	x6, sp, #0x3c
   99080:	52800004 	mov	w4, #0x0                   	// #0
   99084:	12800bc3 	mov	w3, #0xffffffa1            	// #-95
   99088:	128007e2 	mov	w2, #0xffffffc0            	// #-64
   9908c:	97ff9fe1 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   99090:	7100101f 	cmp	w0, #0x4
   99094:	540001e1 	b.ne	990d0 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x90>  // b.any
   99098:	2a0003f3 	mov	w19, w0
   9909c:	94001a5d 	bl	9fa10 <CLogger::Get()>
   990a0:	f00000c3 	adrp	x3, b4000 <_etext+0x3158>
   990a4:	d00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   990a8:	b9403fe4 	ldr	w4, [sp, #60]
   990ac:	aa1603e5 	mov	x5, x22
   990b0:	2a1303e2 	mov	w2, w19
   990b4:	9111c063 	add	x3, x3, #0x470
   990b8:	911b6021 	add	x1, x1, #0x6d8
   990bc:	94001c41 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   990c0:	a94153f3 	ldp	x19, x20, [sp, #16]
   990c4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   990c8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   990cc:	d65f03c0 	ret
   990d0:	94001a50 	bl	9fa10 <CLogger::Get()>
   990d4:	f00000c3 	adrp	x3, b4000 <_etext+0x3158>
   990d8:	d00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   990dc:	2a1403e4 	mov	w4, w20
   990e0:	910d2063 	add	x3, x3, #0x348
   990e4:	911b6021 	add	x1, x1, #0x6d8
   990e8:	52800022 	mov	w2, #0x1                   	// #1
   990ec:	94001c35 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   990f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   990f4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   990f8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   990fc:	d65f03c0 	ret

0000000000099100 <CSMSC951xDevice::DumpRegs()>:
   99100:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   99104:	52800002 	mov	w2, #0x0                   	// #0
   99108:	910003fd 	mov	x29, sp
   9910c:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99110:	9111e021 	add	x1, x1, #0x478
   99114:	f9000bf3 	str	x19, [sp, #16]
   99118:	aa0003f3 	mov	x19, x0
   9911c:	97ffffc9 	bl	99040 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   99120:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99124:	aa1303e0 	mov	x0, x19
   99128:	91120021 	add	x1, x1, #0x480
   9912c:	52800102 	mov	w2, #0x8                   	// #8
   99130:	97ffffc4 	bl	99040 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   99134:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99138:	aa1303e0 	mov	x0, x19
   9913c:	91122021 	add	x1, x1, #0x488
   99140:	52800182 	mov	w2, #0xc                   	// #12
   99144:	97ffffbf 	bl	99040 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   99148:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9914c:	aa1303e0 	mov	x0, x19
   99150:	91124021 	add	x1, x1, #0x490
   99154:	52800202 	mov	w2, #0x10                  	// #16
   99158:	97ffffba 	bl	99040 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   9915c:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99160:	aa1303e0 	mov	x0, x19
   99164:	91126021 	add	x1, x1, #0x498
   99168:	52800282 	mov	w2, #0x14                  	// #20
   9916c:	97ffffb5 	bl	99040 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   99170:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99174:	aa1303e0 	mov	x0, x19
   99178:	91128021 	add	x1, x1, #0x4a0
   9917c:	52800302 	mov	w2, #0x18                  	// #24
   99180:	97ffffb0 	bl	99040 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   99184:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99188:	aa1303e0 	mov	x0, x19
   9918c:	9112c021 	add	x1, x1, #0x4b0
   99190:	52800402 	mov	w2, #0x20                  	// #32
   99194:	97ffffab 	bl	99040 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   99198:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9919c:	aa1303e0 	mov	x0, x19
   991a0:	9112e021 	add	x1, x1, #0x4b8
   991a4:	52800482 	mov	w2, #0x24                  	// #36
   991a8:	97ffffa6 	bl	99040 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   991ac:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   991b0:	aa1303e0 	mov	x0, x19
   991b4:	91132021 	add	x1, x1, #0x4c8
   991b8:	52800502 	mov	w2, #0x28                  	// #40
   991bc:	97ffffa1 	bl	99040 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   991c0:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   991c4:	aa1303e0 	mov	x0, x19
   991c8:	91136021 	add	x1, x1, #0x4d8
   991cc:	52800582 	mov	w2, #0x2c                  	// #44
   991d0:	97ffff9c 	bl	99040 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   991d4:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   991d8:	aa1303e0 	mov	x0, x19
   991dc:	91138021 	add	x1, x1, #0x4e0
   991e0:	52800702 	mov	w2, #0x38                  	// #56
   991e4:	97ffff97 	bl	99040 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   991e8:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   991ec:	aa1303e0 	mov	x0, x19
   991f0:	9113c021 	add	x1, x1, #0x4f0
   991f4:	52800d02 	mov	w2, #0x68                  	// #104
   991f8:	97ffff92 	bl	99040 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   991fc:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99200:	aa1303e0 	mov	x0, x19
   99204:	91140021 	add	x1, x1, #0x500
   99208:	52800d82 	mov	w2, #0x6c                  	// #108
   9920c:	97ffff8d 	bl	99040 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   99210:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99214:	aa1303e0 	mov	x0, x19
   99218:	91144021 	add	x1, x1, #0x510
   9921c:	52802002 	mov	w2, #0x100                 	// #256
   99220:	97ffff88 	bl	99040 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   99224:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99228:	aa1303e0 	mov	x0, x19
   9922c:	91146021 	add	x1, x1, #0x518
   99230:	52802082 	mov	w2, #0x104                 	// #260
   99234:	97ffff83 	bl	99040 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   99238:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9923c:	aa1303e0 	mov	x0, x19
   99240:	91148021 	add	x1, x1, #0x520
   99244:	52802102 	mov	w2, #0x108                 	// #264
   99248:	97ffff7e 	bl	99040 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   9924c:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99250:	aa1303e0 	mov	x0, x19
   99254:	9114a021 	add	x1, x1, #0x528
   99258:	52802182 	mov	w2, #0x10c                 	// #268
   9925c:	97ffff79 	bl	99040 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   99260:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99264:	aa1303e0 	mov	x0, x19
   99268:	9114c021 	add	x1, x1, #0x530
   9926c:	52802202 	mov	w2, #0x110                 	// #272
   99270:	97ffff74 	bl	99040 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   99274:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99278:	aa1303e0 	mov	x0, x19
   9927c:	9114e021 	add	x1, x1, #0x538
   99280:	52802382 	mov	w2, #0x11c                 	// #284
   99284:	97ffff6f 	bl	99040 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   99288:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9928c:	aa1303e0 	mov	x0, x19
   99290:	f9400bf3 	ldr	x19, [sp, #16]
   99294:	91150021 	add	x1, x1, #0x540
   99298:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9929c:	52802582 	mov	w2, #0x12c                 	// #300
   992a0:	17ffff68 	b	99040 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   992a4:	d503201f 	nop
   992a8:	d503201f 	nop
   992ac:	d503201f 	nop

00000000000992b0 <CSMSC951xDevice::Configure()>:
   992b0:	a9b77bfd 	stp	x29, x30, [sp, #-144]!
   992b4:	910003fd 	mov	x29, sp
   992b8:	52800001 	mov	w1, #0x0                   	// #0
   992bc:	a90153f3 	stp	x19, x20, [sp, #16]
   992c0:	aa0003f4 	mov	x20, x0
   992c4:	910143e0 	add	x0, sp, #0x50
   992c8:	940012c2 	bl	9ddd0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   992cc:	910143e0 	add	x0, sp, #0x50
   992d0:	52800061 	mov	w1, #0x3                   	// #3
   992d4:	72a00021 	movk	w1, #0x1, lsl #16
   992d8:	52800004 	mov	w4, #0x0                   	// #0
   992dc:	52800283 	mov	w3, #0x14                  	// #20
   992e0:	910163e2 	add	x2, sp, #0x58
   992e4:	9400131b 	bl	9df50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   992e8:	72001c13 	ands	w19, w0, #0xff
   992ec:	54001520 	b.eq	99590 <CSMSC951xDevice::Configure()+0x2e0>  // b.none
   992f0:	a9025bf5 	stp	x21, x22, [sp, #32]
   992f4:	91010296 	add	x22, x20, #0x40
   992f8:	910193e1 	add	x1, sp, #0x64
   992fc:	aa1603e0 	mov	x0, x22
   99300:	d00000f5 	adrp	x21, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   99304:	911b62b5 	add	x21, x21, #0x6d8
   99308:	94003aa6 	bl	a7da0 <CMACAddress::Set(unsigned char const*)>
   9930c:	9101c3e0 	add	x0, sp, #0x70
   99310:	94002cd0 	bl	a4650 <CString::CString()>
   99314:	9101c3e1 	add	x1, sp, #0x70
   99318:	aa1603e0 	mov	x0, x22
   9931c:	94003b05 	bl	a7f30 <CMACAddress::Format(CString*) const>
   99320:	940019bc 	bl	9fa10 <CLogger::Get()>
   99324:	aa0003f3 	mov	x19, x0
   99328:	9101c3e0 	add	x0, sp, #0x70
   9932c:	94002d0d 	bl	a4760 <CString::operator char const*() const>
   99330:	f00000c3 	adrp	x3, b4000 <_etext+0x3158>
   99334:	aa0003e4 	mov	x4, x0
   99338:	aa1503e1 	mov	x1, x21
   9933c:	aa1303e0 	mov	x0, x19
   99340:	910f0063 	add	x3, x3, #0x3c0
   99344:	52800082 	mov	w2, #0x4                   	// #4
   99348:	94001b9e 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9934c:	aa1403e0 	mov	x0, x20
   99350:	97ffc534 	bl	8a820 <CUSBFunction::GetNumEndpoints() const>
   99354:	12001c00 	and	w0, w0, #0xff
   99358:	71000c1f 	cmp	w0, #0x3
   9935c:	54000e21 	b.ne	99520 <CSMSC951xDevice::Configure()+0x270>  // b.any
   99360:	f9001bf7 	str	x23, [sp, #48]
   99364:	14000005 	b	99378 <CSMSC951xDevice::Configure()+0xc8>
   99368:	39400e61 	ldrb	w1, [x19, #3]
   9936c:	12001421 	and	w1, w1, #0x3f
   99370:	7100083f 	cmp	w1, #0x2
   99374:	54000f00 	b.eq	99554 <CSMSC951xDevice::Configure()+0x2a4>  // b.none
   99378:	528000a1 	mov	w1, #0x5                   	// #5
   9937c:	aa1403e0 	mov	x0, x20
   99380:	97ffc558 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   99384:	aa0003f3 	mov	x19, x0
   99388:	b5ffff00 	cbnz	x0, 99368 <CSMSC951xDevice::Configure()+0xb8>
   9938c:	f9401a80 	ldr	x0, [x20, #48]
   99390:	b40012a0 	cbz	x0, 995e4 <CSMSC951xDevice::Configure()+0x334>
   99394:	f9401e80 	ldr	x0, [x20, #56]
   99398:	b4001260 	cbz	x0, 995e4 <CSMSC951xDevice::Configure()+0x334>
   9939c:	aa1403e0 	mov	x0, x20
   993a0:	97ffc45c 	bl	8a510 <CUSBFunction::Configure()>
   993a4:	72001c13 	ands	w19, w0, #0xff
   993a8:	540010e0 	b.eq	995c4 <CSMSC951xDevice::Configure()+0x314>  // b.none
   993ac:	aa1603e0 	mov	x0, x22
   993b0:	910123e1 	add	x1, sp, #0x48
   993b4:	94003aab 	bl	a7e60 <CMACAddress::CopyTo(unsigned char*) const>
   993b8:	79409be1 	ldrh	w1, [sp, #76]
   993bc:	aa1403e0 	mov	x0, x20
   993c0:	b9404bf7 	ldr	w23, [sp, #72]
   993c4:	b90047e1 	str	w1, [sp, #68]
   993c8:	97ffc53a 	bl	8a8b0 <CUSBFunction::GetHost() const>
   993cc:	aa0003f6 	mov	x22, x0
   993d0:	aa1403e0 	mov	x0, x20
   993d4:	97ffc52b 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   993d8:	aa0003e1 	mov	x1, x0
   993dc:	910113e6 	add	x6, sp, #0x44
   993e0:	aa1603e0 	mov	x0, x22
   993e4:	52800087 	mov	w7, #0x4                   	// #4
   993e8:	52802085 	mov	w5, #0x104                 	// #260
   993ec:	52800004 	mov	w4, #0x0                   	// #0
   993f0:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   993f4:	52800802 	mov	w2, #0x40                  	// #64
   993f8:	97ff9f06 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   993fc:	37f81180 	tbnz	w0, #31, 9962c <CSMSC951xDevice::Configure()+0x37c>
   99400:	aa1403e0 	mov	x0, x20
   99404:	b90047f7 	str	w23, [sp, #68]
   99408:	97ffc52a 	bl	8a8b0 <CUSBFunction::GetHost() const>
   9940c:	aa0003f6 	mov	x22, x0
   99410:	aa1403e0 	mov	x0, x20
   99414:	97ffc51b 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   99418:	aa0003e1 	mov	x1, x0
   9941c:	52800087 	mov	w7, #0x4                   	// #4
   99420:	aa1603e0 	mov	x0, x22
   99424:	910113e6 	add	x6, sp, #0x44
   99428:	52802105 	mov	w5, #0x108                 	// #264
   9942c:	52800004 	mov	w4, #0x0                   	// #0
   99430:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   99434:	52800802 	mov	w2, #0x40                  	// #64
   99438:	97ff9ef6 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9943c:	37f80f80 	tbnz	w0, #31, 9962c <CSMSC951xDevice::Configure()+0x37c>
   99440:	52a02221 	mov	w1, #0x1110000             	// #17891328
   99444:	aa1403e0 	mov	x0, x20
   99448:	b90047e1 	str	w1, [sp, #68]
   9944c:	97ffc519 	bl	8a8b0 <CUSBFunction::GetHost() const>
   99450:	aa0003f6 	mov	x22, x0
   99454:	aa1403e0 	mov	x0, x20
   99458:	97ffc50a 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   9945c:	aa0003e1 	mov	x1, x0
   99460:	52800087 	mov	w7, #0x4                   	// #4
   99464:	aa1603e0 	mov	x0, x22
   99468:	910113e6 	add	x6, sp, #0x44
   9946c:	52800485 	mov	w5, #0x24                  	// #36
   99470:	52800004 	mov	w4, #0x0                   	// #0
   99474:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   99478:	52800802 	mov	w2, #0x40                  	// #64
   9947c:	97ff9ee5 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   99480:	37f80e80 	tbnz	w0, #31, 99650 <CSMSC951xDevice::Configure()+0x3a0>
   99484:	52800181 	mov	w1, #0xc                   	// #12
   99488:	72a01001 	movk	w1, #0x80, lsl #16
   9948c:	aa1403e0 	mov	x0, x20
   99490:	b90047e1 	str	w1, [sp, #68]
   99494:	97ffc507 	bl	8a8b0 <CUSBFunction::GetHost() const>
   99498:	aa0003f6 	mov	x22, x0
   9949c:	aa1403e0 	mov	x0, x20
   994a0:	97ffc4f8 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   994a4:	aa0003e1 	mov	x1, x0
   994a8:	52800087 	mov	w7, #0x4                   	// #4
   994ac:	aa1603e0 	mov	x0, x22
   994b0:	910113e6 	add	x6, sp, #0x44
   994b4:	52802005 	mov	w5, #0x100                 	// #256
   994b8:	52800004 	mov	w4, #0x0                   	// #0
   994bc:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   994c0:	52800802 	mov	w2, #0x40                  	// #64
   994c4:	97ff9ed3 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   994c8:	37f80c40 	tbnz	w0, #31, 99650 <CSMSC951xDevice::Configure()+0x3a0>
   994cc:	52800097 	mov	w23, #0x4                   	// #4
   994d0:	aa1403e0 	mov	x0, x20
   994d4:	b90047f7 	str	w23, [sp, #68]
   994d8:	97ffc4f6 	bl	8a8b0 <CUSBFunction::GetHost() const>
   994dc:	aa0003f6 	mov	x22, x0
   994e0:	aa1403e0 	mov	x0, x20
   994e4:	97ffc4e7 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   994e8:	aa0003e1 	mov	x1, x0
   994ec:	2a1703e7 	mov	w7, w23
   994f0:	910113e6 	add	x6, sp, #0x44
   994f4:	aa1603e0 	mov	x0, x22
   994f8:	52800205 	mov	w5, #0x10                  	// #16
   994fc:	52800004 	mov	w4, #0x0                   	// #0
   99500:	12800be3 	mov	w3, #0xffffffa0            	// #-96
   99504:	52800802 	mov	w2, #0x40                  	// #64
   99508:	97ff9ec2 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   9950c:	37f80a20 	tbnz	w0, #31, 99650 <CSMSC951xDevice::Configure()+0x3a0>
   99510:	9100a280 	add	x0, x20, #0x28
   99514:	94003aa7 	bl	a7fb0 <CNetDevice::AddNetDevice()>
   99518:	f9401bf7 	ldr	x23, [sp, #48]
   9951c:	14000005 	b	99530 <CSMSC951xDevice::Configure()+0x280>
   99520:	aa1503e1 	mov	x1, x21
   99524:	aa1403e0 	mov	x0, x20
   99528:	52800013 	mov	w19, #0x0                   	// #0
   9952c:	97ffc4f9 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   99530:	9101c3e0 	add	x0, sp, #0x70
   99534:	94002c0b 	bl	a4560 <CString::~CString()>
   99538:	910143e0 	add	x0, sp, #0x50
   9953c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   99540:	94001228 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   99544:	2a1303e0 	mov	w0, w19
   99548:	a94153f3 	ldp	x19, x20, [sp, #16]
   9954c:	a8c97bfd 	ldp	x29, x30, [sp], #144
   99550:	d65f03c0 	ret
   99554:	39c00a61 	ldrsb	w1, [x19, #2]
   99558:	aa1403e0 	mov	x0, x20
   9955c:	37f80501 	tbnz	w1, #31, 995fc <CSMSC951xDevice::Configure()+0x34c>
   99560:	f9401e81 	ldr	x1, [x20, #56]
   99564:	b5000401 	cbnz	x1, 995e4 <CSMSC951xDevice::Configure()+0x334>
   99568:	97ffc4ba 	bl	8a850 <CUSBFunction::GetDevice() const>
   9956c:	aa0003f7 	mov	x23, x0
   99570:	d2800400 	mov	x0, #0x20                  	// #32
   99574:	94003b3b 	bl	a8260 <operator new(unsigned long)>
   99578:	aa1703e1 	mov	x1, x23
   9957c:	aa0003f7 	mov	x23, x0
   99580:	aa1303e2 	mov	x2, x19
   99584:	97ffc2eb 	bl	8a130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   99588:	f9001e97 	str	x23, [x20, #56]
   9958c:	17ffff7b 	b	99378 <CSMSC951xDevice::Configure()+0xc8>
   99590:	94001920 	bl	9fa10 <CLogger::Get()>
   99594:	f00000c3 	adrp	x3, b4000 <_etext+0x3158>
   99598:	d00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9959c:	91152063 	add	x3, x3, #0x548
   995a0:	911b6021 	add	x1, x1, #0x6d8
   995a4:	52800022 	mov	w2, #0x1                   	// #1
   995a8:	94001b06 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   995ac:	910143e0 	add	x0, sp, #0x50
   995b0:	9400120c 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   995b4:	2a1303e0 	mov	w0, w19
   995b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   995bc:	a8c97bfd 	ldp	x29, x30, [sp], #144
   995c0:	d65f03c0 	ret
   995c4:	94001913 	bl	9fa10 <CLogger::Get()>
   995c8:	aa1503e1 	mov	x1, x21
   995cc:	900000c3 	adrp	x3, b1000 <_etext+0x158>
   995d0:	9112c063 	add	x3, x3, #0x4b0
   995d4:	52800022 	mov	w2, #0x1                   	// #1
   995d8:	94001afa 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   995dc:	f9401bf7 	ldr	x23, [sp, #48]
   995e0:	17ffffd4 	b	99530 <CSMSC951xDevice::Configure()+0x280>
   995e4:	aa1503e1 	mov	x1, x21
   995e8:	aa1403e0 	mov	x0, x20
   995ec:	97ffc4c9 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   995f0:	52800013 	mov	w19, #0x0                   	// #0
   995f4:	f9401bf7 	ldr	x23, [sp, #48]
   995f8:	17ffffce 	b	99530 <CSMSC951xDevice::Configure()+0x280>
   995fc:	f9401a81 	ldr	x1, [x20, #48]
   99600:	b50003a1 	cbnz	x1, 99674 <CSMSC951xDevice::Configure()+0x3c4>
   99604:	97ffc493 	bl	8a850 <CUSBFunction::GetDevice() const>
   99608:	aa0003f7 	mov	x23, x0
   9960c:	d2800400 	mov	x0, #0x20                  	// #32
   99610:	94003b14 	bl	a8260 <operator new(unsigned long)>
   99614:	aa1703e1 	mov	x1, x23
   99618:	aa0003f7 	mov	x23, x0
   9961c:	aa1303e2 	mov	x2, x19
   99620:	97ffc2c4 	bl	8a130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   99624:	f9001a97 	str	x23, [x20, #48]
   99628:	17ffff54 	b	99378 <CSMSC951xDevice::Configure()+0xc8>
   9962c:	940018f9 	bl	9fa10 <CLogger::Get()>
   99630:	aa1503e1 	mov	x1, x21
   99634:	f00000c3 	adrp	x3, b4000 <_etext+0x3158>
   99638:	91158063 	add	x3, x3, #0x560
   9963c:	52800022 	mov	w2, #0x1                   	// #1
   99640:	94001ae0 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99644:	52800013 	mov	w19, #0x0                   	// #0
   99648:	f9401bf7 	ldr	x23, [sp, #48]
   9964c:	17ffffb9 	b	99530 <CSMSC951xDevice::Configure()+0x280>
   99650:	940018f0 	bl	9fa10 <CLogger::Get()>
   99654:	aa1503e1 	mov	x1, x21
   99658:	f00000c3 	adrp	x3, b4000 <_etext+0x3158>
   9965c:	9115e063 	add	x3, x3, #0x578
   99660:	52800022 	mov	w2, #0x1                   	// #1
   99664:	94001ad7 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99668:	52800013 	mov	w19, #0x0                   	// #0
   9966c:	f9401bf7 	ldr	x23, [sp, #48]
   99670:	17ffffb0 	b	99530 <CSMSC951xDevice::Configure()+0x280>
   99674:	aa1503e1 	mov	x1, x21
   99678:	52800013 	mov	w19, #0x0                   	// #0
   9967c:	97ffc4a5 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   99680:	f9401bf7 	ldr	x23, [sp, #48]
   99684:	17ffffab 	b	99530 <CSMSC951xDevice::Configure()+0x280>
	...

0000000000099690 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   99690:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   99694:	910003fd 	mov	x29, sp
   99698:	d00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9969c:	911c4021 	add	x1, x1, #0x710
   996a0:	a90153f3 	stp	x19, x20, [sp, #16]
   996a4:	aa0003f3 	mov	x19, x0
   996a8:	b9405000 	ldr	w0, [x0, #80]
   996ac:	f9000261 	str	x1, [x19]
   996b0:	f900267f 	str	xzr, [x19, #72]
   996b4:	35000420 	cbnz	w0, 99738 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xa8>
   996b8:	f9402260 	ldr	x0, [x19, #64]
   996bc:	b4000040 	cbz	x0, 996c4 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x34>
   996c0:	94003b04 	bl	a82d0 <operator delete[](void*)>
   996c4:	f900227f 	str	xzr, [x19, #64]
   996c8:	f9401e74 	ldr	x20, [x19, #56]
   996cc:	b40000d4 	cbz	x20, 996e4 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x54>
   996d0:	aa1403e0 	mov	x0, x20
   996d4:	97ffc303 	bl	8a2e0 <CUSBEndpoint::~CUSBEndpoint()>
   996d8:	aa1403e0 	mov	x0, x20
   996dc:	d2800401 	mov	x1, #0x20                  	// #32
   996e0:	94003b08 	bl	a8300 <operator delete(void*, unsigned long)>
   996e4:	f9001e7f 	str	xzr, [x19, #56]
   996e8:	f9401a74 	ldr	x20, [x19, #48]
   996ec:	b40000d4 	cbz	x20, 99704 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x74>
   996f0:	aa1403e0 	mov	x0, x20
   996f4:	97ffc2fb 	bl	8a2e0 <CUSBEndpoint::~CUSBEndpoint()>
   996f8:	aa1403e0 	mov	x0, x20
   996fc:	d2800401 	mov	x1, #0x20                  	// #32
   99700:	94003b00 	bl	a8300 <operator delete(void*, unsigned long)>
   99704:	f9001a7f 	str	xzr, [x19, #48]
   99708:	f9401674 	ldr	x20, [x19, #40]
   9970c:	b40000d4 	cbz	x20, 99724 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x94>
   99710:	aa1403e0 	mov	x0, x20
   99714:	97ffc2f3 	bl	8a2e0 <CUSBEndpoint::~CUSBEndpoint()>
   99718:	aa1403e0 	mov	x0, x20
   9971c:	d2800401 	mov	x1, #0x20                  	// #32
   99720:	94003af8 	bl	a8300 <operator delete(void*, unsigned long)>
   99724:	aa1303e0 	mov	x0, x19
   99728:	f900167f 	str	xzr, [x19, #40]
   9972c:	a94153f3 	ldp	x19, x20, [sp, #16]
   99730:	a8c27bfd 	ldp	x29, x30, [sp], #32
   99734:	17ffc33f 	b	8a430 <CUSBFunction::~CUSBFunction()>
   99738:	94001566 	bl	9ecd0 <CDeviceNameService::Get()>
   9973c:	b9405262 	ldr	w2, [x19, #80]
   99740:	d00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   99744:	52800003 	mov	w3, #0x0                   	// #0
   99748:	911dc021 	add	x1, x1, #0x770
   9974c:	9400158d 	bl	9ed80 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   99750:	b9405261 	ldr	w1, [x19, #80]
   99754:	90000120 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   99758:	9103a000 	add	x0, x0, #0xe8
   9975c:	94003c9d 	bl	a89d0 <CNumberPool::FreeNumber(unsigned int)>
   99760:	17ffffd6 	b	996b8 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x28>
   99764:	d503201f 	nop
   99768:	d503201f 	nop
   9976c:	d503201f 	nop

0000000000099770 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   99770:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   99774:	910003fd 	mov	x29, sp
   99778:	f9000bf3 	str	x19, [sp, #16]
   9977c:	aa0003f3 	mov	x19, x0
   99780:	97ffffc4 	bl	99690 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>
   99784:	aa1303e0 	mov	x0, x19
   99788:	d2800b01 	mov	x1, #0x58                  	// #88
   9978c:	f9400bf3 	ldr	x19, [sp, #16]
   99790:	a8c27bfd 	ldp	x29, x30, [sp], #32
   99794:	14003adb 	b	a8300 <operator delete(void*, unsigned long)>
   99798:	d503201f 	nop
   9979c:	d503201f 	nop

00000000000997a0 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>:
   997a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   997a4:	910003fd 	mov	x29, sp
   997a8:	f9000bf3 	str	x19, [sp, #16]
   997ac:	aa0003f3 	mov	x19, x0
   997b0:	97ffc3c4 	bl	8a6c0 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   997b4:	d00000e0 	adrp	x0, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   997b8:	911c4000 	add	x0, x0, #0x710
   997bc:	a902fe7f 	stp	xzr, xzr, [x19, #40]
   997c0:	f9000260 	str	x0, [x19]
   997c4:	a903fe7f 	stp	xzr, xzr, [x19, #56]
   997c8:	f900267f 	str	xzr, [x19, #72]
   997cc:	b900527f 	str	wzr, [x19, #80]
   997d0:	f9400bf3 	ldr	x19, [sp, #16]
   997d4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   997d8:	d65f03c0 	ret
   997dc:	d503201f 	nop

00000000000997e0 <CUSBBluetoothDevice::SendHCICommand(void const*, unsigned int)>:
   997e0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   997e4:	910003fd 	mov	x29, sp
   997e8:	a90153f3 	stp	x19, x20, [sp, #16]
   997ec:	aa0103f4 	mov	x20, x1
   997f0:	a9025bf5 	stp	x21, x22, [sp, #32]
   997f4:	2a0203f5 	mov	w21, w2
   997f8:	aa0003f6 	mov	x22, x0
   997fc:	97ffc42d 	bl	8a8b0 <CUSBFunction::GetHost() const>
   99800:	aa0003f3 	mov	x19, x0
   99804:	aa1603e0 	mov	x0, x22
   99808:	97ffc41e 	bl	8a880 <CUSBFunction::GetEndpoint0() const>
   9980c:	aa0003e1 	mov	x1, x0
   99810:	2a1503e7 	mov	w7, w21
   99814:	aa1403e6 	mov	x6, x20
   99818:	aa1303e0 	mov	x0, x19
   9981c:	52800005 	mov	w5, #0x0                   	// #0
   99820:	52800004 	mov	w4, #0x0                   	// #0
   99824:	52800003 	mov	w3, #0x0                   	// #0
   99828:	52800402 	mov	w2, #0x20                  	// #32
   9982c:	97ff9df9 	bl	81010 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   99830:	2a2003e0 	mvn	w0, w0
   99834:	a94153f3 	ldp	x19, x20, [sp, #16]
   99838:	531f7c00 	lsr	w0, w0, #31
   9983c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   99840:	a8c37bfd 	ldp	x29, x30, [sp], #48
   99844:	d65f03c0 	ret
   99848:	d503201f 	nop
   9984c:	d503201f 	nop

0000000000099850 <CUSBBluetoothDevice::StartRequest()>:
   99850:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   99854:	910003fd 	mov	x29, sp
   99858:	a90153f3 	stp	x19, x20, [sp, #16]
   9985c:	aa0003f3 	mov	x19, x0
   99860:	f9401400 	ldr	x0, [x0, #40]
   99864:	b40003a0 	cbz	x0, 998d8 <CUSBBluetoothDevice::StartRequest()+0x88>
   99868:	f9402261 	ldr	x1, [x19, #64]
   9986c:	b4000421 	cbz	x1, 998f0 <CUSBBluetoothDevice::StartRequest()+0xa0>
   99870:	97ffc2d4 	bl	8a3c0 <CUSBEndpoint::GetMaxPacketSize() const>
   99874:	2a0003f4 	mov	w20, w0
   99878:	d2801200 	mov	x0, #0x90                  	// #144
   9987c:	97ffa171 	bl	81e40 <CUSBRequest::operator new(unsigned long)>
   99880:	f9401661 	ldr	x1, [x19, #40]
   99884:	d2800004 	mov	x4, #0x0                   	// #0
   99888:	2a1403e3 	mov	w3, w20
   9988c:	aa0003f4 	mov	x20, x0
   99890:	f9402262 	ldr	x2, [x19, #64]
   99894:	97ffa083 	bl	81aa0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   99898:	90000001 	adrp	x1, 99000 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)+0x30>
   9989c:	aa1303e3 	mov	x3, x19
   998a0:	aa1403e0 	mov	x0, x20
   998a4:	912a0021 	add	x1, x1, #0xa80
   998a8:	d2800002 	mov	x2, #0x0                   	// #0
   998ac:	97ffa141 	bl	81db0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   998b0:	aa1303e0 	mov	x0, x19
   998b4:	97ffc3ff 	bl	8a8b0 <CUSBFunction::GetHost() const>
   998b8:	f9400003 	ldr	x3, [x0]
   998bc:	aa1403e1 	mov	x1, x20
   998c0:	52800002 	mov	w2, #0x0                   	// #0
   998c4:	a94153f3 	ldp	x19, x20, [sp, #16]
   998c8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   998cc:	f9401463 	ldr	x3, [x3, #40]
   998d0:	aa0303f0 	mov	x16, x3
   998d4:	d61f0200 	br	x16
   998d8:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   998dc:	f00000c0 	adrp	x0, b4000 <_etext+0x3158>
   998e0:	91164021 	add	x1, x1, #0x590
   998e4:	9116a000 	add	x0, x0, #0x5a8
   998e8:	52801582 	mov	w2, #0xac                  	// #172
   998ec:	94001115 	bl	9dd40 <assertion_failed>
   998f0:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   998f4:	f00000c0 	adrp	x0, b4000 <_etext+0x3158>
   998f8:	91164021 	add	x1, x1, #0x590
   998fc:	91172000 	add	x0, x0, #0x5c8
   99900:	528015a2 	mov	w2, #0xad                  	// #173
   99904:	9400110f 	bl	9dd40 <assertion_failed>
   99908:	d503201f 	nop
   9990c:	d503201f 	nop

0000000000099910 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))>:
   99910:	f9002401 	str	x1, [x0, #72]
   99914:	b4000041 	cbz	x1, 9991c <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0xc>
   99918:	17ffffce 	b	99850 <CUSBBluetoothDevice::StartRequest()>
   9991c:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99920:	f00000c0 	adrp	x0, b4000 <_etext+0x3158>
   99924:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   99928:	91164021 	add	x1, x1, #0x590
   9992c:	910003fd 	mov	x29, sp
   99930:	91178000 	add	x0, x0, #0x5e0
   99934:	528014a2 	mov	w2, #0xa5                  	// #165
   99938:	94001102 	bl	9dd40 <assertion_failed>
   9993c:	d503201f 	nop

0000000000099940 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>:
   99940:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   99944:	910003fd 	mov	x29, sp
   99948:	a90153f3 	stp	x19, x20, [sp, #16]
   9994c:	b4000641 	cbz	x1, 99a14 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   99950:	aa0003f4 	mov	x20, x0
   99954:	aa0103e0 	mov	x0, x1
   99958:	aa0103f3 	mov	x19, x1
   9995c:	97ffa08d 	bl	81b90 <CUSBRequest::GetStatus() const>
   99960:	34000300 	cbz	w0, 999c0 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x80>
   99964:	a9025bf5 	stp	x21, x22, [sp, #32]
   99968:	f9402695 	ldr	x21, [x20, #72]
   9996c:	b4000795 	cbz	x21, 99a5c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x11c>
   99970:	f9402296 	ldr	x22, [x20, #64]
   99974:	b4000456 	cbz	x22, 999fc <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xbc>
   99978:	aa1303e0 	mov	x0, x19
   9997c:	97ffa089 	bl	81ba0 <CUSBRequest::GetResultLength() const>
   99980:	2a0003e1 	mov	w1, w0
   99984:	aa1603e0 	mov	x0, x22
   99988:	d63f02a0 	blr	x21
   9998c:	aa1303e0 	mov	x0, x19
   99990:	97ffa064 	bl	81b20 <CUSBRequest::~CUSBRequest()>
   99994:	aa1303e0 	mov	x0, x19
   99998:	d2801201 	mov	x1, #0x90                  	// #144
   9999c:	97ffa141 	bl	81ea0 <CUSBRequest::operator delete(void*, unsigned long)>
   999a0:	aa1403e0 	mov	x0, x20
   999a4:	97ffffab 	bl	99850 <CUSBBluetoothDevice::StartRequest()>
   999a8:	72001c1f 	tst	w0, #0xff
   999ac:	54000420 	b.eq	99a30 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xf0>  // b.none
   999b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   999b4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   999b8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   999bc:	d65f03c0 	ret
   999c0:	94001814 	bl	9fa10 <CLogger::Get()>
   999c4:	d00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   999c8:	911dc021 	add	x1, x1, #0x770
   999cc:	f00000c3 	adrp	x3, b4000 <_etext+0x3158>
   999d0:	91002021 	add	x1, x1, #0x8
   999d4:	9117e063 	add	x3, x3, #0x5f8
   999d8:	52800042 	mov	w2, #0x2                   	// #2
   999dc:	940019f9 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   999e0:	aa1303e0 	mov	x0, x19
   999e4:	97ffa04f 	bl	81b20 <CUSBRequest::~CUSBRequest()>
   999e8:	aa1303e0 	mov	x0, x19
   999ec:	d2801201 	mov	x1, #0x90                  	// #144
   999f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   999f4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   999f8:	17ffa12a 	b	81ea0 <CUSBRequest::operator delete(void*, unsigned long)>
   999fc:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99a00:	f00000c0 	adrp	x0, b4000 <_etext+0x3158>
   99a04:	91164021 	add	x1, x1, #0x590
   99a08:	91172000 	add	x0, x0, #0x5c8
   99a0c:	52801822 	mov	w2, #0xc1                  	// #193
   99a10:	940010cc 	bl	9dd40 <assertion_failed>
   99a14:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99a18:	900000c0 	adrp	x0, b1000 <_etext+0x158>
   99a1c:	a9025bf5 	stp	x21, x22, [sp, #32]
   99a20:	91164021 	add	x1, x1, #0x590
   99a24:	910aa000 	add	x0, x0, #0x2a8
   99a28:	52801742 	mov	w2, #0xba                  	// #186
   99a2c:	940010c5 	bl	9dd40 <assertion_failed>
   99a30:	940017f8 	bl	9fa10 <CLogger::Get()>
   99a34:	d00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   99a38:	911dc021 	add	x1, x1, #0x770
   99a3c:	a94153f3 	ldp	x19, x20, [sp, #16]
   99a40:	900000c3 	adrp	x3, b1000 <_etext+0x158>
   99a44:	91002021 	add	x1, x1, #0x8
   99a48:	91194063 	add	x3, x3, #0x650
   99a4c:	52800022 	mov	w2, #0x1                   	// #1
   99a50:	a9425bf5 	ldp	x21, x22, [sp, #32]
   99a54:	a8c37bfd 	ldp	x29, x30, [sp], #48
   99a58:	140019da 	b	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99a5c:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99a60:	f00000c0 	adrp	x0, b4000 <_etext+0x3158>
   99a64:	91164021 	add	x1, x1, #0x590
   99a68:	91178000 	add	x0, x0, #0x5e0
   99a6c:	52801802 	mov	w2, #0xc0                  	// #192
   99a70:	940010b4 	bl	9dd40 <assertion_failed>
   99a74:	d503201f 	nop
   99a78:	d503201f 	nop
   99a7c:	d503201f 	nop

0000000000099a80 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   99a80:	b4000082 	cbz	x2, 99a90 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x10>
   99a84:	aa0003e1 	mov	x1, x0
   99a88:	aa0203e0 	mov	x0, x2
   99a8c:	17ffffad 	b	99940 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>
   99a90:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99a94:	900000c0 	adrp	x0, b1000 <_etext+0x158>
   99a98:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   99a9c:	91164021 	add	x1, x1, #0x590
   99aa0:	910003fd 	mov	x29, sp
   99aa4:	910b6000 	add	x0, x0, #0x2d8
   99aa8:	52801ae2 	mov	w2, #0xd7                  	// #215
   99aac:	940010a5 	bl	9dd40 <assertion_failed>

0000000000099ab0 <CUSBBluetoothDevice::Configure()>:
   99ab0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   99ab4:	910003fd 	mov	x29, sp
   99ab8:	a90153f3 	stp	x19, x20, [sp, #16]
   99abc:	aa0003f4 	mov	x20, x0
   99ac0:	97ffc3e8 	bl	8aa60 <CUSBFunction::GetInterfaceNumber() const>
   99ac4:	72001c1f 	tst	w0, #0xff
   99ac8:	54000d61 	b.ne	99c74 <CUSBBluetoothDevice::Configure()+0x1c4>  // b.any
   99acc:	aa1403e0 	mov	x0, x20
   99ad0:	97ffc354 	bl	8a820 <CUSBFunction::GetNumEndpoints() const>
   99ad4:	12001c00 	and	w0, w0, #0xff
   99ad8:	71000c1f 	cmp	w0, #0x3
   99adc:	54000801 	b.ne	99bdc <CUSBBluetoothDevice::Configure()+0x12c>  // b.any
   99ae0:	f90013f5 	str	x21, [sp, #32]
   99ae4:	d503201f 	nop
   99ae8:	528000a1 	mov	w1, #0x5                   	// #5
   99aec:	aa1403e0 	mov	x0, x20
   99af0:	97ffc37c 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   99af4:	aa0003f3 	mov	x19, x0
   99af8:	b4000300 	cbz	x0, 99b58 <CUSBBluetoothDevice::Configure()+0xa8>
   99afc:	39400e61 	ldrb	w1, [x19, #3]
   99b00:	12001421 	and	w1, w1, #0x3f
   99b04:	7100083f 	cmp	w1, #0x2
   99b08:	540007e0 	b.eq	99c04 <CUSBBluetoothDevice::Configure()+0x154>  // b.none
   99b0c:	71000c3f 	cmp	w1, #0x3
   99b10:	54fffec1 	b.ne	99ae8 <CUSBBluetoothDevice::Configure()+0x38>  // b.any
   99b14:	f9401680 	ldr	x0, [x20, #40]
   99b18:	b5000c80 	cbnz	x0, 99ca8 <CUSBBluetoothDevice::Configure()+0x1f8>
   99b1c:	aa1403e0 	mov	x0, x20
   99b20:	97ffc34c 	bl	8a850 <CUSBFunction::GetDevice() const>
   99b24:	aa0003f5 	mov	x21, x0
   99b28:	d2800400 	mov	x0, #0x20                  	// #32
   99b2c:	940039cd 	bl	a8260 <operator new(unsigned long)>
   99b30:	aa1503e1 	mov	x1, x21
   99b34:	aa1303e2 	mov	x2, x19
   99b38:	aa0003f5 	mov	x21, x0
   99b3c:	97ffc17d 	bl	8a130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   99b40:	528000a1 	mov	w1, #0x5                   	// #5
   99b44:	aa1403e0 	mov	x0, x20
   99b48:	f9001695 	str	x21, [x20, #40]
   99b4c:	97ffc365 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   99b50:	aa0003f3 	mov	x19, x0
   99b54:	b5fffd40 	cbnz	x0, 99afc <CUSBBluetoothDevice::Configure()+0x4c>
   99b58:	f9401a80 	ldr	x0, [x20, #48]
   99b5c:	b4000a60 	cbz	x0, 99ca8 <CUSBBluetoothDevice::Configure()+0x1f8>
   99b60:	f9401e80 	ldr	x0, [x20, #56]
   99b64:	b4000a20 	cbz	x0, 99ca8 <CUSBBluetoothDevice::Configure()+0x1f8>
   99b68:	f9401680 	ldr	x0, [x20, #40]
   99b6c:	b40009e0 	cbz	x0, 99ca8 <CUSBBluetoothDevice::Configure()+0x1f8>
   99b70:	aa1403e0 	mov	x0, x20
   99b74:	97ffc267 	bl	8a510 <CUSBFunction::Configure()>
   99b78:	72001c13 	ands	w19, w0, #0xff
   99b7c:	54000ac0 	b.eq	99cd4 <CUSBBluetoothDevice::Configure()+0x224>  // b.none
   99b80:	f9401680 	ldr	x0, [x20, #40]
   99b84:	97ffc20f 	bl	8a3c0 <CUSBEndpoint::GetMaxPacketSize() const>
   99b88:	2a0003e0 	mov	w0, w0
   99b8c:	940039bd 	bl	a8280 <operator new[](unsigned long)>
   99b90:	b9405281 	ldr	w1, [x20, #80]
   99b94:	f9002280 	str	x0, [x20, #64]
   99b98:	35000b21 	cbnz	w1, 99cfc <CUSBBluetoothDevice::Configure()+0x24c>
   99b9c:	d00000f5 	adrp	x21, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   99ba0:	911dc2b5 	add	x21, x21, #0x770
   99ba4:	90000120 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   99ba8:	910022a2 	add	x2, x21, #0x8
   99bac:	52800021 	mov	w1, #0x1                   	// #1
   99bb0:	9103a000 	add	x0, x0, #0xe8
   99bb4:	94003b57 	bl	a8910 <CNumberPool::AllocateNumber(bool, char const*)>
   99bb8:	b9005280 	str	w0, [x20, #80]
   99bbc:	94001445 	bl	9ecd0 <CDeviceNameService::Get()>
   99bc0:	aa1503e1 	mov	x1, x21
   99bc4:	b9405282 	ldr	w2, [x20, #80]
   99bc8:	52800004 	mov	w4, #0x0                   	// #0
   99bcc:	aa1403e3 	mov	x3, x20
   99bd0:	9400144c 	bl	9ed00 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   99bd4:	f94013f5 	ldr	x21, [sp, #32]
   99bd8:	14000007 	b	99bf4 <CUSBBluetoothDevice::Configure()+0x144>
   99bdc:	d00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   99be0:	911dc021 	add	x1, x1, #0x770
   99be4:	aa1403e0 	mov	x0, x20
   99be8:	91002021 	add	x1, x1, #0x8
   99bec:	52800013 	mov	w19, #0x0                   	// #0
   99bf0:	97ffc348 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   99bf4:	2a1303e0 	mov	w0, w19
   99bf8:	a94153f3 	ldp	x19, x20, [sp, #16]
   99bfc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   99c00:	d65f03c0 	ret
   99c04:	39c00a60 	ldrsb	w0, [x19, #2]
   99c08:	37f801c0 	tbnz	w0, #31, 99c40 <CUSBBluetoothDevice::Configure()+0x190>
   99c0c:	f9401e80 	ldr	x0, [x20, #56]
   99c10:	b50004c0 	cbnz	x0, 99ca8 <CUSBBluetoothDevice::Configure()+0x1f8>
   99c14:	aa1403e0 	mov	x0, x20
   99c18:	97ffc30e 	bl	8a850 <CUSBFunction::GetDevice() const>
   99c1c:	aa0003f5 	mov	x21, x0
   99c20:	d2800400 	mov	x0, #0x20                  	// #32
   99c24:	9400398f 	bl	a8260 <operator new(unsigned long)>
   99c28:	aa1503e1 	mov	x1, x21
   99c2c:	aa0003f5 	mov	x21, x0
   99c30:	aa1303e2 	mov	x2, x19
   99c34:	97ffc13f 	bl	8a130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   99c38:	f9001e95 	str	x21, [x20, #56]
   99c3c:	17ffffab 	b	99ae8 <CUSBBluetoothDevice::Configure()+0x38>
   99c40:	f9401a80 	ldr	x0, [x20, #48]
   99c44:	b5000320 	cbnz	x0, 99ca8 <CUSBBluetoothDevice::Configure()+0x1f8>
   99c48:	aa1403e0 	mov	x0, x20
   99c4c:	97ffc301 	bl	8a850 <CUSBFunction::GetDevice() const>
   99c50:	aa0003f5 	mov	x21, x0
   99c54:	d2800400 	mov	x0, #0x20                  	// #32
   99c58:	94003982 	bl	a8260 <operator new(unsigned long)>
   99c5c:	aa1503e1 	mov	x1, x21
   99c60:	aa0003f5 	mov	x21, x0
   99c64:	aa1303e2 	mov	x2, x19
   99c68:	97ffc132 	bl	8a130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   99c6c:	f9001a95 	str	x21, [x20, #48]
   99c70:	17ffff9e 	b	99ae8 <CUSBBluetoothDevice::Configure()+0x38>
   99c74:	94001767 	bl	9fa10 <CLogger::Get()>
   99c78:	d00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   99c7c:	911dc021 	add	x1, x1, #0x770
   99c80:	f00000c3 	adrp	x3, b4000 <_etext+0x3158>
   99c84:	91002021 	add	x1, x1, #0x8
   99c88:	91182063 	add	x3, x3, #0x608
   99c8c:	52800042 	mov	w2, #0x2                   	// #2
   99c90:	9400194c 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99c94:	52800013 	mov	w19, #0x0                   	// #0
   99c98:	2a1303e0 	mov	w0, w19
   99c9c:	a94153f3 	ldp	x19, x20, [sp, #16]
   99ca0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   99ca4:	d65f03c0 	ret
   99ca8:	d00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   99cac:	911dc021 	add	x1, x1, #0x770
   99cb0:	aa1403e0 	mov	x0, x20
   99cb4:	91002021 	add	x1, x1, #0x8
   99cb8:	97ffc316 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   99cbc:	52800013 	mov	w19, #0x0                   	// #0
   99cc0:	f94013f5 	ldr	x21, [sp, #32]
   99cc4:	2a1303e0 	mov	w0, w19
   99cc8:	a94153f3 	ldp	x19, x20, [sp, #16]
   99ccc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   99cd0:	d65f03c0 	ret
   99cd4:	9400174f 	bl	9fa10 <CLogger::Get()>
   99cd8:	d00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   99cdc:	911dc021 	add	x1, x1, #0x770
   99ce0:	900000c3 	adrp	x3, b1000 <_etext+0x158>
   99ce4:	91002021 	add	x1, x1, #0x8
   99ce8:	9112c063 	add	x3, x3, #0x4b0
   99cec:	52800022 	mov	w2, #0x1                   	// #1
   99cf0:	94001934 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   99cf4:	f94013f5 	ldr	x21, [sp, #32]
   99cf8:	17ffffbf 	b	99bf4 <CUSBBluetoothDevice::Configure()+0x144>
   99cfc:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99d00:	d00000c0 	adrp	x0, b3000 <_etext+0x2158>
   99d04:	91164021 	add	x1, x1, #0x590
   99d08:	91026000 	add	x0, x0, #0x98
   99d0c:	528011e2 	mov	w2, #0x8f                  	// #143
   99d10:	9400100c 	bl	9dd40 <assertion_failed>
	...

0000000000099d20 <_GLOBAL__sub_I__ZN19CUSBBluetoothDevice18s_DeviceNumberPoolE>:
   99d20:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   99d24:	910003fd 	mov	x29, sp
   99d28:	528007e2 	mov	w2, #0x3f                  	// #63
   99d2c:	52800021 	mov	w1, #0x1                   	// #1
   99d30:	f9000bf3 	str	x19, [sp, #16]
   99d34:	90000133 	adrp	x19, bd000 <CNetDevice::s_SpeedString+0x18>
   99d38:	9103a273 	add	x19, x19, #0xe8
   99d3c:	aa1303e0 	mov	x0, x19
   99d40:	94003ad8 	bl	a88a0 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   99d44:	90000122 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   99d48:	f0000060 	adrp	x0, a8000 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x20>
   99d4c:	aa1303e1 	mov	x1, x19
   99d50:	91074042 	add	x2, x2, #0x1d0
   99d54:	f9400bf3 	ldr	x19, [sp, #16]
   99d58:	91240000 	add	x0, x0, #0x900
   99d5c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   99d60:	14003098 	b	a5fc0 <__cxa_atexit>
	...

0000000000099d70 <CUSBCDCEthernetDevice::GetMACAddress() const>:
   99d70:	91012000 	add	x0, x0, #0x48
   99d74:	d65f03c0 	ret
   99d78:	d503201f 	nop
   99d7c:	d503201f 	nop

0000000000099d80 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   99d80:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   99d84:	d00000e2 	adrp	x2, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   99d88:	911e4042 	add	x2, x2, #0x790
   99d8c:	910003fd 	mov	x29, sp
   99d90:	d00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   99d94:	91206021 	add	x1, x1, #0x818
   99d98:	a90153f3 	stp	x19, x20, [sp, #16]
   99d9c:	aa0003f3 	mov	x19, x0
   99da0:	f9000002 	str	x2, [x0]
   99da4:	f9001401 	str	x1, [x0, #40]
   99da8:	f9402014 	ldr	x20, [x0, #64]
   99dac:	b40000d4 	cbz	x20, 99dc4 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x44>
   99db0:	aa1403e0 	mov	x0, x20
   99db4:	97ffc14b 	bl	8a2e0 <CUSBEndpoint::~CUSBEndpoint()>
   99db8:	aa1403e0 	mov	x0, x20
   99dbc:	d2800401 	mov	x1, #0x20                  	// #32
   99dc0:	94003950 	bl	a8300 <operator delete(void*, unsigned long)>
   99dc4:	f900227f 	str	xzr, [x19, #64]
   99dc8:	f9401e74 	ldr	x20, [x19, #56]
   99dcc:	b40000d4 	cbz	x20, 99de4 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x64>
   99dd0:	aa1403e0 	mov	x0, x20
   99dd4:	97ffc143 	bl	8a2e0 <CUSBEndpoint::~CUSBEndpoint()>
   99dd8:	aa1403e0 	mov	x0, x20
   99ddc:	d2800401 	mov	x1, #0x20                  	// #32
   99de0:	94003948 	bl	a8300 <operator delete(void*, unsigned long)>
   99de4:	91012260 	add	x0, x19, #0x48
   99de8:	f9001e7f 	str	xzr, [x19, #56]
   99dec:	940037b1 	bl	a7cb0 <CMACAddress::~CMACAddress()>
   99df0:	aa1303e0 	mov	x0, x19
   99df4:	a94153f3 	ldp	x19, x20, [sp, #16]
   99df8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   99dfc:	17ffc18d 	b	8a430 <CUSBFunction::~CUSBFunction()>

0000000000099e00 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   99e00:	d100a000 	sub	x0, x0, #0x28
   99e04:	17ffffdf 	b	99d80 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   99e08:	d503201f 	nop
   99e0c:	d503201f 	nop

0000000000099e10 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   99e10:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   99e14:	910003fd 	mov	x29, sp
   99e18:	f9000bf3 	str	x19, [sp, #16]
   99e1c:	aa0003f3 	mov	x19, x0
   99e20:	97ffffd8 	bl	99d80 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   99e24:	aa1303e0 	mov	x0, x19
   99e28:	d2800a01 	mov	x1, #0x50                  	// #80
   99e2c:	f9400bf3 	ldr	x19, [sp, #16]
   99e30:	a8c27bfd 	ldp	x29, x30, [sp], #32
   99e34:	14003933 	b	a8300 <operator delete(void*, unsigned long)>
   99e38:	d503201f 	nop
   99e3c:	d503201f 	nop

0000000000099e40 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   99e40:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   99e44:	910003fd 	mov	x29, sp
   99e48:	a90153f3 	stp	x19, x20, [sp, #16]
   99e4c:	f9402003 	ldr	x3, [x0, #64]
   99e50:	f90013f5 	str	x21, [sp, #32]
   99e54:	b4000263 	cbz	x3, 99ea0 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x60>
   99e58:	aa0103f4 	mov	x20, x1
   99e5c:	b40002e1 	cbz	x1, 99eb8 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x78>
   99e60:	7119005f 	cmp	w2, #0x640
   99e64:	2a0203f5 	mov	w21, w2
   99e68:	54000348 	b.hi	99ed0 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x90>  // b.pmore
   99e6c:	aa0003f3 	mov	x19, x0
   99e70:	97ffc290 	bl	8a8b0 <CUSBFunction::GetHost() const>
   99e74:	2a1503e3 	mov	w3, w21
   99e78:	aa1403e2 	mov	x2, x20
   99e7c:	f9402261 	ldr	x1, [x19, #64]
   99e80:	52800004 	mov	w4, #0x0                   	// #0
   99e84:	97ff9cdf 	bl	81200 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   99e88:	2a2003e0 	mvn	w0, w0
   99e8c:	a94153f3 	ldp	x19, x20, [sp, #16]
   99e90:	531f7c00 	lsr	w0, w0, #31
   99e94:	f94013f5 	ldr	x21, [sp, #32]
   99e98:	a8c37bfd 	ldp	x29, x30, [sp], #48
   99e9c:	d65f03c0 	ret
   99ea0:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99ea4:	f00000c0 	adrp	x0, b4000 <_etext+0x3158>
   99ea8:	9118c021 	add	x1, x1, #0x630
   99eac:	910c4000 	add	x0, x0, #0x310
   99eb0:	528011c2 	mov	w2, #0x8e                  	// #142
   99eb4:	94000fa3 	bl	9dd40 <assertion_failed>
   99eb8:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99ebc:	900000c0 	adrp	x0, b1000 <_etext+0x158>
   99ec0:	9118c021 	add	x1, x1, #0x630
   99ec4:	911f6000 	add	x0, x0, #0x7d8
   99ec8:	528011e2 	mov	w2, #0x8f                  	// #143
   99ecc:	94000f9d 	bl	9dd40 <assertion_failed>
   99ed0:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99ed4:	f00000c0 	adrp	x0, b4000 <_etext+0x3158>
   99ed8:	9118c021 	add	x1, x1, #0x630
   99edc:	91192000 	add	x0, x0, #0x648
   99ee0:	52801202 	mov	w2, #0x90                  	// #144
   99ee4:	94000f97 	bl	9dd40 <assertion_failed>
   99ee8:	d503201f 	nop
   99eec:	d503201f 	nop

0000000000099ef0 <non-virtual thunk to CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   99ef0:	d100a000 	sub	x0, x0, #0x28
   99ef4:	17ffffd3 	b	99e40 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>
   99ef8:	d503201f 	nop
   99efc:	d503201f 	nop

0000000000099f00 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   99f00:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
   99f04:	910003fd 	mov	x29, sp
   99f08:	a90153f3 	stp	x19, x20, [sp, #16]
   99f0c:	f9401c03 	ldr	x3, [x0, #56]
   99f10:	b40004e3 	cbz	x3, 99fac <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xac>
   99f14:	b4000581 	cbz	x1, 99fc4 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xc4>
   99f18:	d2800004 	mov	x4, #0x0                   	// #0
   99f1c:	aa0003f3 	mov	x19, x0
   99f20:	aa0203f4 	mov	x20, x2
   99f24:	910083e0 	add	x0, sp, #0x20
   99f28:	aa0103e2 	mov	x2, x1
   99f2c:	aa0303e1 	mov	x1, x3
   99f30:	5280c803 	mov	w3, #0x640                 	// #1600
   99f34:	97ff9edb 	bl	81aa0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   99f38:	910083e0 	add	x0, sp, #0x20
   99f3c:	97ff9fb9 	bl	81e20 <CUSBRequest::SetCompleteOnNAK()>
   99f40:	aa1303e0 	mov	x0, x19
   99f44:	97ffc25b 	bl	8a8b0 <CUSBFunction::GetHost() const>
   99f48:	f9400003 	ldr	x3, [x0]
   99f4c:	910083e1 	add	x1, sp, #0x20
   99f50:	52800002 	mov	w2, #0x0                   	// #0
   99f54:	f9401063 	ldr	x3, [x3, #32]
   99f58:	d63f0060 	blr	x3
   99f5c:	72001c13 	ands	w19, w0, #0xff
   99f60:	54000101 	b.ne	99f80 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x80>  // b.any
   99f64:	910083e0 	add	x0, sp, #0x20
   99f68:	52800013 	mov	w19, #0x0                   	// #0
   99f6c:	97ff9eed 	bl	81b20 <CUSBRequest::~CUSBRequest()>
   99f70:	2a1303e0 	mov	w0, w19
   99f74:	a94153f3 	ldp	x19, x20, [sp, #16]
   99f78:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   99f7c:	d65f03c0 	ret
   99f80:	910083e0 	add	x0, sp, #0x20
   99f84:	97ff9f07 	bl	81ba0 <CUSBRequest::GetResultLength() const>
   99f88:	34fffee0 	cbz	w0, 99f64 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x64>
   99f8c:	b4000294 	cbz	x20, 99fdc <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xdc>
   99f90:	b9000280 	str	w0, [x20]
   99f94:	910083e0 	add	x0, sp, #0x20
   99f98:	97ff9ee2 	bl	81b20 <CUSBRequest::~CUSBRequest()>
   99f9c:	2a1303e0 	mov	w0, w19
   99fa0:	a94153f3 	ldp	x19, x20, [sp, #16]
   99fa4:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   99fa8:	d65f03c0 	ret
   99fac:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99fb0:	f00000c0 	adrp	x0, b4000 <_etext+0x3158>
   99fb4:	9118c021 	add	x1, x1, #0x630
   99fb8:	910a0000 	add	x0, x0, #0x280
   99fbc:	528012c2 	mov	w2, #0x96                  	// #150
   99fc0:	94000f60 	bl	9dd40 <assertion_failed>
   99fc4:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99fc8:	900000c0 	adrp	x0, b1000 <_etext+0x158>
   99fcc:	9118c021 	add	x1, x1, #0x630
   99fd0:	911f6000 	add	x0, x0, #0x7d8
   99fd4:	528012e2 	mov	w2, #0x97                  	// #151
   99fd8:	94000f5a 	bl	9dd40 <assertion_failed>
   99fdc:	f00000c1 	adrp	x1, b4000 <_etext+0x3158>
   99fe0:	f00000c0 	adrp	x0, b4000 <_etext+0x3158>
   99fe4:	9118c021 	add	x1, x1, #0x630
   99fe8:	910be000 	add	x0, x0, #0x2f8
   99fec:	528014e2 	mov	w2, #0xa7                  	// #167
   99ff0:	94000f54 	bl	9dd40 <assertion_failed>
   99ff4:	d503201f 	nop
   99ff8:	d503201f 	nop
   99ffc:	d503201f 	nop

000000000009a000 <non-virtual thunk to CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   9a000:	d100a000 	sub	x0, x0, #0x28
   9a004:	17ffffbf 	b	99f00 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>
   9a008:	d503201f 	nop
   9a00c:	d503201f 	nop

000000000009a010 <non-virtual thunk to CUSBCDCEthernetDevice::GetMACAddress() const>:
   9a010:	91008000 	add	x0, x0, #0x20
   9a014:	d65f03c0 	ret
   9a018:	d503201f 	nop
   9a01c:	d503201f 	nop

000000000009a020 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   9a020:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9a024:	910003fd 	mov	x29, sp
   9a028:	f9000bf3 	str	x19, [sp, #16]
   9a02c:	d100a013 	sub	x19, x0, #0x28
   9a030:	aa1303e0 	mov	x0, x19
   9a034:	97ffff53 	bl	99d80 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   9a038:	aa1303e0 	mov	x0, x19
   9a03c:	d2800a01 	mov	x1, #0x50                  	// #80
   9a040:	f9400bf3 	ldr	x19, [sp, #16]
   9a044:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9a048:	140038ae 	b	a8300 <operator delete(void*, unsigned long)>
   9a04c:	d503201f 	nop

000000000009a050 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>:
   9a050:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9a054:	910003fd 	mov	x29, sp
   9a058:	f9000bf3 	str	x19, [sp, #16]
   9a05c:	aa0003f3 	mov	x19, x0
   9a060:	97ffc198 	bl	8a6c0 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   9a064:	b00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9a068:	911e4021 	add	x1, x1, #0x790
   9a06c:	b00000e0 	adrp	x0, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9a070:	91206000 	add	x0, x0, #0x818
   9a074:	f9000261 	str	x1, [x19]
   9a078:	f9001660 	str	x0, [x19, #40]
   9a07c:	14000004 	b	9a08c <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)+0x3c>
   9a080:	39400801 	ldrb	w1, [x0, #2]
   9a084:	71003c3f 	cmp	w1, #0xf
   9a088:	54000260 	b.eq	9a0d4 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)+0x84>  // b.none
   9a08c:	52800481 	mov	w1, #0x24                  	// #36
   9a090:	aa1303e0 	mov	x0, x19
   9a094:	97ffc213 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   9a098:	b5ffff40 	cbnz	x0, 9a080 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)+0x30>
   9a09c:	52800044 	mov	w4, #0x2                   	// #2
   9a0a0:	52800003 	mov	w3, #0x0                   	// #0
   9a0a4:	3900c260 	strb	w0, [x19, #48]
   9a0a8:	52800002 	mov	w2, #0x0                   	// #0
   9a0ac:	52800141 	mov	w1, #0xa                   	// #10
   9a0b0:	aa1303e0 	mov	x0, x19
   9a0b4:	97ffc22b 	bl	8a960 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char, unsigned int)>
   9a0b8:	2a0003e1 	mov	w1, w0
   9a0bc:	91012260 	add	x0, x19, #0x48
   9a0c0:	a903fe7f 	stp	xzr, xzr, [x19, #56]
   9a0c4:	3900c661 	strb	w1, [x19, #49]
   9a0c8:	f9400bf3 	ldr	x19, [sp, #16]
   9a0cc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9a0d0:	140036e0 	b	a7c50 <CMACAddress::CMACAddress()>
   9a0d4:	39400c00 	ldrb	w0, [x0, #3]
   9a0d8:	35fffe20 	cbnz	w0, 9a09c <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)+0x4c>
   9a0dc:	d00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9a0e0:	d00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9a0e4:	9118c021 	add	x1, x1, #0x630
   9a0e8:	9119a000 	add	x0, x0, #0x668
   9a0ec:	528016c2 	mov	w2, #0xb6                  	// #182
   9a0f0:	94000f14 	bl	9dd40 <assertion_failed>
   9a0f4:	d503201f 	nop
   9a0f8:	d503201f 	nop
   9a0fc:	d503201f 	nop

000000000009a100 <CUSBCDCEthernetDevice::GetMACAddressStringIndex()>:
   9a100:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9a104:	910003fd 	mov	x29, sp
   9a108:	f9000bf3 	str	x19, [sp, #16]
   9a10c:	aa0003f3 	mov	x19, x0
   9a110:	14000004 	b	9a120 <CUSBCDCEthernetDevice::GetMACAddressStringIndex()+0x20>
   9a114:	39400801 	ldrb	w1, [x0, #2]
   9a118:	71003c3f 	cmp	w1, #0xf
   9a11c:	54000100 	b.eq	9a13c <CUSBCDCEthernetDevice::GetMACAddressStringIndex()+0x3c>  // b.none
   9a120:	52800481 	mov	w1, #0x24                  	// #36
   9a124:	aa1303e0 	mov	x0, x19
   9a128:	97ffc1ee 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   9a12c:	b5ffff40 	cbnz	x0, 9a114 <CUSBCDCEthernetDevice::GetMACAddressStringIndex()+0x14>
   9a130:	f9400bf3 	ldr	x19, [sp, #16]
   9a134:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9a138:	d65f03c0 	ret
   9a13c:	39400c00 	ldrb	w0, [x0, #3]
   9a140:	35ffff80 	cbnz	w0, 9a130 <CUSBCDCEthernetDevice::GetMACAddressStringIndex()+0x30>
   9a144:	d00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9a148:	d00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9a14c:	9118c021 	add	x1, x1, #0x630
   9a150:	9119a000 	add	x0, x0, #0x668
   9a154:	528016c2 	mov	w2, #0xb6                  	// #182
   9a158:	94000efa 	bl	9dd40 <assertion_failed>
   9a15c:	d503201f 	nop

000000000009a160 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>:
   9a160:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9a164:	910003fd 	mov	x29, sp
   9a168:	a90153f3 	stp	x19, x20, [sp, #16]
   9a16c:	12001c33 	and	w19, w1, #0xff
   9a170:	aa0003f4 	mov	x20, x0
   9a174:	97ffc1b7 	bl	8a850 <CUSBFunction::GetDevice() const>
   9a178:	aa0003e1 	mov	x1, x0
   9a17c:	9100a3e0 	add	x0, sp, #0x28
   9a180:	97ffd8c0 	bl	90480 <CUSBString::CUSBString(CUSBDevice*)>
   9a184:	35000113 	cbnz	w19, 9a1a4 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x44>
   9a188:	9100a3e0 	add	x0, sp, #0x28
   9a18c:	52800013 	mov	w19, #0x0                   	// #0
   9a190:	97ffd908 	bl	905b0 <CUSBString::~CUSBString()>
   9a194:	2a1303e0 	mov	w0, w19
   9a198:	a94153f3 	ldp	x19, x20, [sp, #16]
   9a19c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9a1a0:	d65f03c0 	ret
   9a1a4:	9100a3e0 	add	x0, sp, #0x28
   9a1a8:	97ffd9b2 	bl	90870 <CUSBString::GetLanguageID()>
   9a1ac:	2a0003e2 	mov	w2, w0
   9a1b0:	2a1303e1 	mov	w1, w19
   9a1b4:	9100a3e0 	add	x0, sp, #0x28
   9a1b8:	97ffd912 	bl	90600 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   9a1bc:	72001c13 	ands	w19, w0, #0xff
   9a1c0:	54fffe40 	b.eq	9a188 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>  // b.none
   9a1c4:	9100a3e0 	add	x0, sp, #0x28
   9a1c8:	97ffd9a6 	bl	90860 <CUSBString::Get() const>
   9a1cc:	910083e4 	add	x4, sp, #0x20
   9a1d0:	91003005 	add	x5, x0, #0xc
   9a1d4:	b4000480 	cbz	x0, 9a264 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x104>
   9a1d8:	39c00002 	ldrsb	w2, [x0]
   9a1dc:	12001c41 	and	w1, w2, #0xff
   9a1e0:	7100e85f 	cmp	w2, #0x3a
   9a1e4:	51001c22 	sub	w2, w1, #0x7
   9a1e8:	12001c42 	and	w2, w2, #0xff
   9a1ec:	1a82b021 	csel	w1, w1, w2, lt	// lt = tstop
   9a1f0:	5100c021 	sub	w1, w1, #0x30
   9a1f4:	12001c21 	and	w1, w1, #0xff
   9a1f8:	71003c3f 	cmp	w1, #0xf
   9a1fc:	54fffc68 	b.hi	9a188 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>  // b.pmore
   9a200:	39c00403 	ldrsb	w3, [x0, #1]
   9a204:	91000800 	add	x0, x0, #0x2
   9a208:	12001c62 	and	w2, w3, #0xff
   9a20c:	7100e87f 	cmp	w3, #0x3a
   9a210:	51001c43 	sub	w3, w2, #0x7
   9a214:	12001c63 	and	w3, w3, #0xff
   9a218:	1a83b042 	csel	w2, w2, w3, lt	// lt = tstop
   9a21c:	5100c042 	sub	w2, w2, #0x30
   9a220:	12001c42 	and	w2, w2, #0xff
   9a224:	71003c5f 	cmp	w2, #0xf
   9a228:	54fffb08 	b.hi	9a188 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>  // b.pmore
   9a22c:	531c0c21 	ubfiz	w1, w1, #4, #4
   9a230:	eb0000bf 	cmp	x5, x0
   9a234:	2a010042 	orr	w2, w2, w1
   9a238:	38001482 	strb	w2, [x4], #1
   9a23c:	54fffce1 	b.ne	9a1d8 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x78>  // b.any
   9a240:	910083e1 	add	x1, sp, #0x20
   9a244:	91012280 	add	x0, x20, #0x48
   9a248:	940036d6 	bl	a7da0 <CMACAddress::Set(unsigned char const*)>
   9a24c:	9100a3e0 	add	x0, sp, #0x28
   9a250:	97ffd8d8 	bl	905b0 <CUSBString::~CUSBString()>
   9a254:	2a1303e0 	mov	w0, w19
   9a258:	a94153f3 	ldp	x19, x20, [sp, #16]
   9a25c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9a260:	d65f03c0 	ret
   9a264:	d00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9a268:	d00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9a26c:	9118c021 	add	x1, x1, #0x630
   9a270:	911a2000 	add	x0, x0, #0x688
   9a274:	52801902 	mov	w2, #0xc8                  	// #200
   9a278:	94000eb2 	bl	9dd40 <assertion_failed>
   9a27c:	d503201f 	nop

000000000009a280 <CUSBCDCEthernetDevice::Configure()>:
   9a280:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   9a284:	910003fd 	mov	x29, sp
   9a288:	a90153f3 	stp	x19, x20, [sp, #16]
   9a28c:	3940c413 	ldrb	w19, [x0, #49]
   9a290:	34000a13 	cbz	w19, 9a3d0 <CUSBCDCEthernetDevice::Configure()+0x150>
   9a294:	3940c001 	ldrb	w1, [x0, #48]
   9a298:	aa0003f4 	mov	x20, x0
   9a29c:	34000081 	cbz	w1, 9a2ac <CUSBCDCEthernetDevice::Configure()+0x2c>
   9a2a0:	97ffffb0 	bl	9a160 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>
   9a2a4:	72001c1f 	tst	w0, #0xff
   9a2a8:	540001a1 	b.ne	9a2dc <CUSBCDCEthernetDevice::Configure()+0x5c>  // b.any
   9a2ac:	940015d9 	bl	9fa10 <CLogger::Get()>
   9a2b0:	d00000c3 	adrp	x3, b4000 <_etext+0x3158>
   9a2b4:	b00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9a2b8:	91152063 	add	x3, x3, #0x548
   9a2bc:	9121a021 	add	x1, x1, #0x868
   9a2c0:	52800022 	mov	w2, #0x1                   	// #1
   9a2c4:	52800013 	mov	w19, #0x0                   	// #0
   9a2c8:	940017be 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9a2cc:	2a1303e0 	mov	w0, w19
   9a2d0:	a94153f3 	ldp	x19, x20, [sp, #16]
   9a2d4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9a2d8:	d65f03c0 	ret
   9a2dc:	9100c3e0 	add	x0, sp, #0x30
   9a2e0:	a9025bf5 	stp	x21, x22, [sp, #32]
   9a2e4:	b00000f5 	adrp	x21, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9a2e8:	9121a2b5 	add	x21, x21, #0x868
   9a2ec:	940028d9 	bl	a4650 <CString::CString()>
   9a2f0:	9100c3e1 	add	x1, sp, #0x30
   9a2f4:	91012280 	add	x0, x20, #0x48
   9a2f8:	9400370e 	bl	a7f30 <CMACAddress::Format(CString*) const>
   9a2fc:	940015c5 	bl	9fa10 <CLogger::Get()>
   9a300:	aa0003f3 	mov	x19, x0
   9a304:	9100c3e0 	add	x0, sp, #0x30
   9a308:	94002916 	bl	a4760 <CString::operator char const*() const>
   9a30c:	d00000c3 	adrp	x3, b4000 <_etext+0x3158>
   9a310:	aa0003e4 	mov	x4, x0
   9a314:	aa1503e1 	mov	x1, x21
   9a318:	aa1303e0 	mov	x0, x19
   9a31c:	910f0063 	add	x3, x3, #0x3c0
   9a320:	52800082 	mov	w2, #0x4                   	// #4
   9a324:	940017a7 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9a328:	14000005 	b	9a33c <CUSBCDCEthernetDevice::Configure()+0xbc>
   9a32c:	39400e61 	ldrb	w1, [x19, #3]
   9a330:	12001421 	and	w1, w1, #0x3f
   9a334:	7100083f 	cmp	w1, #0x2
   9a338:	540002e0 	b.eq	9a394 <CUSBCDCEthernetDevice::Configure()+0x114>  // b.none
   9a33c:	528000a1 	mov	w1, #0x5                   	// #5
   9a340:	aa1403e0 	mov	x0, x20
   9a344:	97ffc167 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   9a348:	aa0003f3 	mov	x19, x0
   9a34c:	b5ffff00 	cbnz	x0, 9a32c <CUSBCDCEthernetDevice::Configure()+0xac>
   9a350:	f9401e80 	ldr	x0, [x20, #56]
   9a354:	b4000640 	cbz	x0, 9a41c <CUSBCDCEthernetDevice::Configure()+0x19c>
   9a358:	f9402280 	ldr	x0, [x20, #64]
   9a35c:	b4000600 	cbz	x0, 9a41c <CUSBCDCEthernetDevice::Configure()+0x19c>
   9a360:	aa1403e0 	mov	x0, x20
   9a364:	97ffc06b 	bl	8a510 <CUSBFunction::Configure()>
   9a368:	72001c13 	ands	w19, w0, #0xff
   9a36c:	54000620 	b.eq	9a430 <CUSBCDCEthernetDevice::Configure()+0x1b0>  // b.none
   9a370:	9100a280 	add	x0, x20, #0x28
   9a374:	9400370f 	bl	a7fb0 <CNetDevice::AddNetDevice()>
   9a378:	9100c3e0 	add	x0, sp, #0x30
   9a37c:	94002879 	bl	a4560 <CString::~CString()>
   9a380:	2a1303e0 	mov	w0, w19
   9a384:	a94153f3 	ldp	x19, x20, [sp, #16]
   9a388:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9a38c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9a390:	d65f03c0 	ret
   9a394:	39c00a61 	ldrsb	w1, [x19, #2]
   9a398:	aa1403e0 	mov	x0, x20
   9a39c:	37f80281 	tbnz	w1, #31, 9a3ec <CUSBCDCEthernetDevice::Configure()+0x16c>
   9a3a0:	f9402281 	ldr	x1, [x20, #64]
   9a3a4:	b50003c1 	cbnz	x1, 9a41c <CUSBCDCEthernetDevice::Configure()+0x19c>
   9a3a8:	97ffc12a 	bl	8a850 <CUSBFunction::GetDevice() const>
   9a3ac:	aa0003f6 	mov	x22, x0
   9a3b0:	d2800400 	mov	x0, #0x20                  	// #32
   9a3b4:	940037ab 	bl	a8260 <operator new(unsigned long)>
   9a3b8:	aa1603e1 	mov	x1, x22
   9a3bc:	aa0003f6 	mov	x22, x0
   9a3c0:	aa1303e2 	mov	x2, x19
   9a3c4:	97ffbf5b 	bl	8a130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   9a3c8:	f9002296 	str	x22, [x20, #64]
   9a3cc:	17ffffdc 	b	9a33c <CUSBCDCEthernetDevice::Configure()+0xbc>
   9a3d0:	b00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9a3d4:	9121a021 	add	x1, x1, #0x868
   9a3d8:	97ffc14e 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   9a3dc:	2a1303e0 	mov	w0, w19
   9a3e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   9a3e4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9a3e8:	d65f03c0 	ret
   9a3ec:	f9401e81 	ldr	x1, [x20, #56]
   9a3f0:	b50002e1 	cbnz	x1, 9a44c <CUSBCDCEthernetDevice::Configure()+0x1cc>
   9a3f4:	97ffc117 	bl	8a850 <CUSBFunction::GetDevice() const>
   9a3f8:	aa0003f6 	mov	x22, x0
   9a3fc:	d2800400 	mov	x0, #0x20                  	// #32
   9a400:	94003798 	bl	a8260 <operator new(unsigned long)>
   9a404:	aa1603e1 	mov	x1, x22
   9a408:	aa0003f6 	mov	x22, x0
   9a40c:	aa1303e2 	mov	x2, x19
   9a410:	97ffbf48 	bl	8a130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   9a414:	f9001e96 	str	x22, [x20, #56]
   9a418:	17ffffc9 	b	9a33c <CUSBCDCEthernetDevice::Configure()+0xbc>
   9a41c:	aa1503e1 	mov	x1, x21
   9a420:	aa1403e0 	mov	x0, x20
   9a424:	52800013 	mov	w19, #0x0                   	// #0
   9a428:	97ffc13a 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   9a42c:	17ffffd3 	b	9a378 <CUSBCDCEthernetDevice::Configure()+0xf8>
   9a430:	94001578 	bl	9fa10 <CLogger::Get()>
   9a434:	aa1503e1 	mov	x1, x21
   9a438:	f00000a3 	adrp	x3, b1000 <_etext+0x158>
   9a43c:	9112c063 	add	x3, x3, #0x4b0
   9a440:	52800022 	mov	w2, #0x1                   	// #1
   9a444:	9400175f 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9a448:	17ffffcc 	b	9a378 <CUSBCDCEthernetDevice::Configure()+0xf8>
   9a44c:	aa1503e1 	mov	x1, x21
   9a450:	52800013 	mov	w19, #0x0                   	// #0
   9a454:	97ffc12f 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   9a458:	17ffffc8 	b	9a378 <CUSBCDCEthernetDevice::Configure()+0xf8>
   9a45c:	00000000 	udf	#0

000000000009a460 <CNetDevice::IsLinkUp()>:
   9a460:	52800020 	mov	w0, #0x1                   	// #1
   9a464:	d65f03c0 	ret
	...

000000000009a470 <CNetDevice::GetLinkSpeed()>:
   9a470:	528000c0 	mov	w0, #0x6                   	// #6
   9a474:	d65f03c0 	ret
	...

000000000009a480 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>:
   9a480:	8b224024 	add	x4, x1, w2, uxtw
   9a484:	f9000001 	str	x1, [x0]
   9a488:	b9000802 	str	w2, [x0, #8]
   9a48c:	3900301f 	strb	wzr, [x0, #12]
   9a490:	a9010404 	stp	x4, x1, [x0, #16]
   9a494:	a902041f 	stp	xzr, x1, [x0, #32]
   9a498:	b4000881 	cbz	x1, 9a5a8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x128>
   9a49c:	51001043 	sub	w3, w2, #0x4
   9a4a0:	710ff07f 	cmp	w3, #0x3fc
   9a4a4:	54000088 	b.hi	9a4b4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x34>  // b.pmore
   9a4a8:	39400023 	ldrb	w3, [x1]
   9a4ac:	7100247f 	cmp	w3, #0x9
   9a4b0:	54000040 	b.eq	9a4b8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x38>  // b.none
   9a4b4:	d65f03c0 	ret
   9a4b8:	39400423 	ldrb	w3, [x1, #1]
   9a4bc:	7100087f 	cmp	w3, #0x2
   9a4c0:	54ffffa1 	b.ne	9a4b4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x34>  // b.any
   9a4c4:	39400826 	ldrb	w6, [x1, #2]
   9a4c8:	39400c25 	ldrb	w5, [x1, #3]
   9a4cc:	2a0520c5 	orr	w5, w6, w5, lsl #8
   9a4d0:	6b05005f 	cmp	w2, w5
   9a4d4:	54ffff03 	b.cc	9a4b4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x34>  // b.lo, b.ul, b.last
   9a4d8:	54000788 	b.hi	9a5c8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x148>  // b.pmore
   9a4dc:	91000822 	add	x2, x1, #0x2
   9a4e0:	eb02009f 	cmp	x4, x2
   9a4e4:	54000789 	b.ls	9a5d4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x154>  // b.plast
   9a4e8:	52800125 	mov	w5, #0x9                   	// #9
   9a4ec:	52800007 	mov	w7, #0x0                   	// #0
   9a4f0:	52800006 	mov	w6, #0x0                   	// #0
   9a4f4:	1400000a 	b	9a51c <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x9c>
   9a4f8:	7100087f 	cmp	w3, #0x2
   9a4fc:	540004c0 	b.eq	9a594 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x114>  // b.none
   9a500:	91000841 	add	x1, x2, #0x2
   9a504:	eb01009f 	cmp	x4, x1
   9a508:	54000689 	b.ls	9a5d8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x158>  // b.plast
   9a50c:	2a0303e6 	mov	w6, w3
   9a510:	39400045 	ldrb	w5, [x2]
   9a514:	aa0203e1 	mov	x1, x2
   9a518:	39400443 	ldrb	w3, [x2, #1]
   9a51c:	8b250022 	add	x2, x1, w5, uxtb
   9a520:	eb04005f 	cmp	x2, x4
   9a524:	540001a8 	b.hi	9a558 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xd8>  // b.pmore
   9a528:	7100107f 	cmp	w3, #0x4
   9a52c:	540001a0 	b.eq	9a560 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xe0>  // b.none
   9a530:	7100147f 	cmp	w3, #0x5
   9a534:	54fffe21 	b.ne	9a4f8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x78>  // b.any
   9a538:	52801fa8 	mov	w8, #0xfd                  	// #253
   9a53c:	6a0800df 	tst	w6, w8
   9a540:	540000c0 	b.eq	9a558 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xd8>  // b.none
   9a544:	340002e7 	cbz	w7, 9a5a0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x120>
   9a548:	51001ca5 	sub	w5, w5, #0x7
   9a54c:	52801fa6 	mov	w6, #0xfd                  	// #253
   9a550:	6a0600bf 	tst	w5, w6
   9a554:	54fffd60 	b.eq	9a500 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x80>  // b.none
   9a558:	f9001401 	str	x1, [x0, #40]
   9a55c:	d65f03c0 	ret
   9a560:	34ffffc6 	cbz	w6, 9a558 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xd8>
   9a564:	39401428 	ldrb	w8, [x1, #5]
   9a568:	52800126 	mov	w6, #0x9                   	// #9
   9a56c:	52800007 	mov	w7, #0x0                   	// #0
   9a570:	7100051f 	cmp	w8, #0x1
   9a574:	540000a1 	b.ne	9a588 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x108>  // b.any
   9a578:	39401c27 	ldrb	w7, [x1, #7]
   9a57c:	710080ff 	cmp	w7, #0x20
   9a580:	1a9f07e7 	cset	w7, ne	// ne = any
   9a584:	d503201f 	nop
   9a588:	6b0600bf 	cmp	w5, w6
   9a58c:	54fffba0 	b.eq	9a500 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x80>  // b.none
   9a590:	17fffff2 	b	9a558 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xd8>
   9a594:	35fffe26 	cbnz	w6, 9a558 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xd8>
   9a598:	52800126 	mov	w6, #0x9                   	// #9
   9a59c:	17fffffb 	b	9a588 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x108>
   9a5a0:	528000e6 	mov	w6, #0x7                   	// #7
   9a5a4:	17fffff9 	b	9a588 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x108>
   9a5a8:	d00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9a5ac:	d00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9a5b0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9a5b4:	911a6021 	add	x1, x1, #0x698
   9a5b8:	910003fd 	mov	x29, sp
   9a5bc:	911ac000 	add	x0, x0, #0x6b0
   9a5c0:	52800482 	mov	w2, #0x24                  	// #36
   9a5c4:	94000ddf 	bl	9dd40 <assertion_failed>
   9a5c8:	8b252024 	add	x4, x1, w5, uxth
   9a5cc:	f9000804 	str	x4, [x0, #16]
   9a5d0:	17ffffc3 	b	9a4dc <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x5c>
   9a5d4:	aa0103e2 	mov	x2, x1
   9a5d8:	eb04005f 	cmp	x2, x4
   9a5dc:	54000060 	b.eq	9a5e8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x168>  // b.none
   9a5e0:	f9001402 	str	x2, [x0, #40]
   9a5e4:	d65f03c0 	ret
   9a5e8:	52800021 	mov	w1, #0x1                   	// #1
   9a5ec:	39003001 	strb	w1, [x0, #12]
   9a5f0:	d65f03c0 	ret
   9a5f4:	d503201f 	nop
   9a5f8:	d503201f 	nop
   9a5fc:	d503201f 	nop

000000000009a600 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>:
   9a600:	b40001c1 	cbz	x1, 9a638 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x38>
   9a604:	39403022 	ldrb	w2, [x1, #12]
   9a608:	b9400823 	ldr	w3, [x1, #8]
   9a60c:	f9400024 	ldr	x4, [x1]
   9a610:	39003002 	strb	w2, [x0, #12]
   9a614:	f9401022 	ldr	x2, [x1, #32]
   9a618:	b9000803 	str	w3, [x0, #8]
   9a61c:	f9000004 	str	x4, [x0]
   9a620:	a9410c24 	ldp	x4, x3, [x1, #16]
   9a624:	f9001002 	str	x2, [x0, #32]
   9a628:	f9401421 	ldr	x1, [x1, #40]
   9a62c:	a9010c04 	stp	x4, x3, [x0, #16]
   9a630:	f9001401 	str	x1, [x0, #40]
   9a634:	d65f03c0 	ret
   9a638:	d00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9a63c:	d00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9a640:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9a644:	911a6021 	add	x1, x1, #0x698
   9a648:	910003fd 	mov	x29, sp
   9a64c:	911b0000 	add	x0, x0, #0x6c0
   9a650:	52801162 	mov	w2, #0x8b                  	// #139
   9a654:	94000dbb 	bl	9dd40 <assertion_failed>
   9a658:	d503201f 	nop
   9a65c:	d503201f 	nop

000000000009a660 <CUSBConfigurationParser::~CUSBConfigurationParser()>:
   9a660:	d65f03c0 	ret
   9a664:	d503201f 	nop
   9a668:	d503201f 	nop
   9a66c:	d503201f 	nop

000000000009a670 <CUSBConfigurationParser::IsValid() const>:
   9a670:	39403000 	ldrb	w0, [x0, #12]
   9a674:	d65f03c0 	ret
   9a678:	d503201f 	nop
   9a67c:	d503201f 	nop

000000000009a680 <CUSBConfigurationParser::GetDescriptor(unsigned char)>:
   9a680:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9a684:	aa0003e5 	mov	x5, x0
   9a688:	910003fd 	mov	x29, sp
   9a68c:	39403000 	ldrb	w0, [x0, #12]
   9a690:	34000460 	cbz	w0, 9a71c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x9c>
   9a694:	a94108a4 	ldp	x4, x2, [x5, #16]
   9a698:	12001c21 	and	w1, w1, #0xff
   9a69c:	eb04005f 	cmp	x2, x4
   9a6a0:	54000143 	b.cc	9a6c8 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x48>  // b.lo, b.ul, b.last
   9a6a4:	1400001a 	b	9a70c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x8c>
   9a6a8:	7100143f 	cmp	w1, #0x5
   9a6ac:	7a440860 	ccmp	w3, #0x4, #0x0, eq	// eq = none
   9a6b0:	540002e0 	b.eq	9a70c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x8c>  // b.none
   9a6b4:	6b01007f 	cmp	w3, w1
   9a6b8:	54000200 	b.eq	9a6f8 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x78>  // b.none
   9a6bc:	eb04005f 	cmp	x2, x4
   9a6c0:	f9000ca2 	str	x2, [x5, #24]
   9a6c4:	54000242 	b.cs	9a70c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x8c>  // b.hs, b.nlast
   9a6c8:	39400046 	ldrb	w6, [x2]
   9a6cc:	aa0203e0 	mov	x0, x2
   9a6d0:	39400443 	ldrb	w3, [x2, #1]
   9a6d4:	8b060042 	add	x2, x2, x6
   9a6d8:	eb04005f 	cmp	x2, x4
   9a6dc:	54fffe69 	b.ls	9a6a8 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x28>  // b.plast
   9a6e0:	d00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9a6e4:	d00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9a6e8:	911a6021 	add	x1, x1, #0x698
   9a6ec:	911b8000 	add	x0, x0, #0x6e0
   9a6f0:	52801642 	mov	w2, #0xb2                  	// #178
   9a6f4:	94000d93 	bl	9dd40 <assertion_failed>
   9a6f8:	f9000ca2 	str	x2, [x5, #24]
   9a6fc:	f90010a0 	str	x0, [x5, #32]
   9a700:	f90014a0 	str	x0, [x5, #40]
   9a704:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9a708:	d65f03c0 	ret
   9a70c:	d2800000 	mov	x0, #0x0                   	// #0
   9a710:	f90010a0 	str	x0, [x5, #32]
   9a714:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9a718:	d65f03c0 	ret
   9a71c:	d00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9a720:	d00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9a724:	911a6021 	add	x1, x1, #0x698
   9a728:	911b4000 	add	x0, x0, #0x6d0
   9a72c:	52801502 	mov	w2, #0xa8                  	// #168
   9a730:	94000d84 	bl	9dd40 <assertion_failed>
   9a734:	d503201f 	nop
   9a738:	d503201f 	nop
   9a73c:	d503201f 	nop

000000000009a740 <CUSBConfigurationParser::GetCurrentDescriptor()>:
   9a740:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9a744:	910003fd 	mov	x29, sp
   9a748:	39403001 	ldrb	w1, [x0, #12]
   9a74c:	340000a1 	cbz	w1, 9a760 <CUSBConfigurationParser::GetCurrentDescriptor()+0x20>
   9a750:	f9401000 	ldr	x0, [x0, #32]
   9a754:	b4000120 	cbz	x0, 9a778 <CUSBConfigurationParser::GetCurrentDescriptor()+0x38>
   9a758:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9a75c:	d65f03c0 	ret
   9a760:	d00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9a764:	d00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9a768:	911a6021 	add	x1, x1, #0x698
   9a76c:	911b4000 	add	x0, x0, #0x6d0
   9a770:	52801a02 	mov	w2, #0xd0                  	// #208
   9a774:	94000d73 	bl	9dd40 <assertion_failed>
   9a778:	d00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9a77c:	d00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9a780:	911a6021 	add	x1, x1, #0x698
   9a784:	911c0000 	add	x0, x0, #0x700
   9a788:	52801a22 	mov	w2, #0xd1                  	// #209
   9a78c:	94000d6d 	bl	9dd40 <assertion_failed>

000000000009a790 <CUSBConfigurationParser::Error(char const*) const>:
   9a790:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9a794:	910003fd 	mov	x29, sp
   9a798:	a90153f3 	stp	x19, x20, [sp, #16]
   9a79c:	b4000241 	cbz	x1, 9a7e4 <CUSBConfigurationParser::Error(char const*) const+0x54>
   9a7a0:	aa0003f3 	mov	x19, x0
   9a7a4:	aa0103f4 	mov	x20, x1
   9a7a8:	9400149a 	bl	9fa10 <CLogger::Get()>
   9a7ac:	f9400264 	ldr	x4, [x19]
   9a7b0:	d00000c3 	adrp	x3, b4000 <_etext+0x3158>
   9a7b4:	aa1403e1 	mov	x1, x20
   9a7b8:	52800022 	mov	w2, #0x1                   	// #1
   9a7bc:	911c8063 	add	x3, x3, #0x720
   9a7c0:	f9401665 	ldr	x5, [x19, #40]
   9a7c4:	4b0400a4 	sub	w4, w5, w4
   9a7c8:	9400167e 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9a7cc:	b9400a61 	ldr	w1, [x19, #8]
   9a7d0:	aa1403e2 	mov	x2, x20
   9a7d4:	f9400260 	ldr	x0, [x19]
   9a7d8:	a94153f3 	ldp	x19, x20, [sp, #16]
   9a7dc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9a7e0:	14000f20 	b	9e460 <debug_hexdump(void const*, unsigned int, char const*)>
   9a7e4:	d00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9a7e8:	900000c0 	adrp	x0, b2000 <_etext+0x1158>
   9a7ec:	911a6021 	add	x1, x1, #0x698
   9a7f0:	912c6000 	add	x0, x0, #0xb18
   9a7f4:	52801b02 	mov	w2, #0xd8                  	// #216
   9a7f8:	94000d52 	bl	9dd40 <assertion_failed>
   9a7fc:	00000000 	udf	#0

000000000009a800 <CUSBGamePadDevice::GetInitialState()>:
   9a800:	91012000 	add	x0, x0, #0x48
   9a804:	d65f03c0 	ret
   9a808:	d503201f 	nop
   9a80c:	d503201f 	nop

000000000009a810 <CUSBGamePadDevice::Configure()>:
   9a810:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9a814:	910003fd 	mov	x29, sp
   9a818:	7942a001 	ldrh	w1, [x0, #336]
   9a81c:	a90153f3 	stp	x19, x20, [sp, #16]
   9a820:	340004e1 	cbz	w1, 9a8bc <CUSBGamePadDevice::Configure()+0xac>
   9a824:	aa0003f3 	mov	x19, x0
   9a828:	97ffcc3e 	bl	8d920 <CUSBHIDDevice::ConfigureHID(unsigned int)>
   9a82c:	72001c1f 	tst	w0, #0xff
   9a830:	2a0003f4 	mov	w20, w0
   9a834:	540002e0 	b.eq	9a890 <CUSBGamePadDevice::Configure()+0x80>  // b.none
   9a838:	b9415660 	ldr	w0, [x19, #340]
   9a83c:	f90013f5 	str	x21, [sp, #32]
   9a840:	350004c0 	cbnz	w0, 9a8d8 <CUSBGamePadDevice::Configure()+0xc8>
   9a844:	b00000f5 	adrp	x21, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9a848:	912482b5 	add	x21, x21, #0x920
   9a84c:	f0000100 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   9a850:	aa1503e2 	mov	x2, x21
   9a854:	52800021 	mov	w1, #0x1                   	// #1
   9a858:	9103e000 	add	x0, x0, #0xf8
   9a85c:	9400382d 	bl	a8910 <CNumberPool::AllocateNumber(bool, char const*)>
   9a860:	b9015660 	str	w0, [x19, #340]
   9a864:	9400111b 	bl	9ecd0 <CDeviceNameService::Get()>
   9a868:	b9415662 	ldr	w2, [x19, #340]
   9a86c:	910022a1 	add	x1, x21, #0x8
   9a870:	aa1303e3 	mov	x3, x19
   9a874:	52800004 	mov	w4, #0x0                   	// #0
   9a878:	94001122 	bl	9ed00 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   9a87c:	2a1403e0 	mov	w0, w20
   9a880:	a94153f3 	ldp	x19, x20, [sp, #16]
   9a884:	f94013f5 	ldr	x21, [sp, #32]
   9a888:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9a88c:	d65f03c0 	ret
   9a890:	94001460 	bl	9fa10 <CLogger::Get()>
   9a894:	f00000a3 	adrp	x3, b1000 <_etext+0x158>
   9a898:	b00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9a89c:	9100a063 	add	x3, x3, #0x28
   9a8a0:	91248021 	add	x1, x1, #0x920
   9a8a4:	52800022 	mov	w2, #0x1                   	// #1
   9a8a8:	94001646 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9a8ac:	2a1403e0 	mov	w0, w20
   9a8b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   9a8b4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9a8b8:	d65f03c0 	ret
   9a8bc:	d00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9a8c0:	900000c0 	adrp	x0, b2000 <_etext+0x1158>
   9a8c4:	f90013f5 	str	x21, [sp, #32]
   9a8c8:	911d4021 	add	x1, x1, #0x750
   9a8cc:	91316000 	add	x0, x0, #0xc58
   9a8d0:	52800742 	mov	w2, #0x3a                  	// #58
   9a8d4:	94000d1b 	bl	9dd40 <assertion_failed>
   9a8d8:	d00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9a8dc:	b00000c0 	adrp	x0, b3000 <_etext+0x2158>
   9a8e0:	911d4021 	add	x1, x1, #0x750
   9a8e4:	91026000 	add	x0, x0, #0x98
   9a8e8:	52800842 	mov	w2, #0x42                  	// #66
   9a8ec:	94000d15 	bl	9dd40 <assertion_failed>

000000000009a8f0 <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)>:
   9a8f0:	b4000321 	cbz	x1, 9a954 <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)+0x64>
   9a8f4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9a8f8:	910003fd 	mov	x29, sp
   9a8fc:	7942a003 	ldrh	w3, [x0, #336]
   9a900:	a90153f3 	stp	x19, x20, [sp, #16]
   9a904:	aa0003f3 	mov	x19, x0
   9a908:	6b02007f 	cmp	w3, w2
   9a90c:	54000080 	b.eq	9a91c <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)+0x2c>  // b.none
   9a910:	a94153f3 	ldp	x19, x20, [sp, #16]
   9a914:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9a918:	d65f03c0 	ret
   9a91c:	f940a402 	ldr	x2, [x0, #328]
   9a920:	b4ffff82 	cbz	x2, 9a910 <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)+0x20>
   9a924:	aa0003f4 	mov	x20, x0
   9a928:	f8448682 	ldr	x2, [x20], #72
   9a92c:	f9404c42 	ldr	x2, [x2, #152]
   9a930:	d63f0040 	blr	x2
   9a934:	b9415660 	ldr	w0, [x19, #340]
   9a938:	aa1403e1 	mov	x1, x20
   9a93c:	f940a662 	ldr	x2, [x19, #328]
   9a940:	a94153f3 	ldp	x19, x20, [sp, #16]
   9a944:	51000400 	sub	w0, w0, #0x1
   9a948:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9a94c:	aa0203f0 	mov	x16, x2
   9a950:	d61f0200 	br	x16
   9a954:	d65f03c0 	ret
   9a958:	d503201f 	nop
   9a95c:	d503201f 	nop

000000000009a960 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))>:
   9a960:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9a964:	910003fd 	mov	x29, sp
   9a968:	f940a402 	ldr	x2, [x0, #328]
   9a96c:	b50000a2 	cbnz	x2, 9a980 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x20>
   9a970:	f900a401 	str	x1, [x0, #328]
   9a974:	b4000121 	cbz	x1, 9a998 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x38>
   9a978:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9a97c:	d65f03c0 	ret
   9a980:	d00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9a984:	d00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9a988:	911d4021 	add	x1, x1, #0x750
   9a98c:	911d8000 	add	x0, x0, #0x760
   9a990:	52800a22 	mov	w2, #0x51                  	// #81
   9a994:	94000ceb 	bl	9dd40 <assertion_failed>
   9a998:	d00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9a99c:	d00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9a9a0:	911d4021 	add	x1, x1, #0x750
   9a9a4:	911de000 	add	x0, x0, #0x778
   9a9a8:	52800a62 	mov	w2, #0x53                  	// #83
   9a9ac:	94000ce5 	bl	9dd40 <assertion_failed>

000000000009a9b0 <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>:
   9a9b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9a9b4:	52800002 	mov	w2, #0x0                   	// #0
   9a9b8:	910003fd 	mov	x29, sp
   9a9bc:	f9000bf3 	str	x19, [sp, #16]
   9a9c0:	aa0003f3 	mov	x19, x0
   9a9c4:	97ffcb93 	bl	8d810 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   9a9c8:	b00000e3 	adrp	x3, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9a9cc:	91220063 	add	x3, x3, #0x880
   9a9d0:	f900a67f 	str	xzr, [x19, #328]
   9a9d4:	91012260 	add	x0, x19, #0x48
   9a9d8:	d2802002 	mov	x2, #0x100                 	// #256
   9a9dc:	7902a27f 	strh	wzr, [x19, #336]
   9a9e0:	52800001 	mov	w1, #0x0                   	// #0
   9a9e4:	f9000263 	str	x3, [x19]
   9a9e8:	b901567f 	str	wzr, [x19, #340]
   9a9ec:	f9400bf3 	ldr	x19, [sp, #16]
   9a9f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9a9f4:	1400337d 	b	a77e8 <memset>
   9a9f8:	d503201f 	nop
   9a9fc:	d503201f 	nop

000000000009aa00 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   9aa00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9aa04:	910003fd 	mov	x29, sp
   9aa08:	b00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9aa0c:	91220021 	add	x1, x1, #0x880
   9aa10:	f9000bf3 	str	x19, [sp, #16]
   9aa14:	aa0003f3 	mov	x19, x0
   9aa18:	b9415400 	ldr	w0, [x0, #340]
   9aa1c:	f9000261 	str	x1, [x19]
   9aa20:	f900a67f 	str	xzr, [x19, #328]
   9aa24:	350000a0 	cbnz	w0, 9aa38 <CUSBGamePadDevice::~CUSBGamePadDevice()+0x38>
   9aa28:	aa1303e0 	mov	x0, x19
   9aa2c:	f9400bf3 	ldr	x19, [sp, #16]
   9aa30:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9aa34:	17ffcb8f 	b	8d870 <CUSBHIDDevice::~CUSBHIDDevice()>
   9aa38:	940010a6 	bl	9ecd0 <CDeviceNameService::Get()>
   9aa3c:	b9415662 	ldr	w2, [x19, #340]
   9aa40:	b00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9aa44:	91248021 	add	x1, x1, #0x920
   9aa48:	52800003 	mov	w3, #0x0                   	// #0
   9aa4c:	91002021 	add	x1, x1, #0x8
   9aa50:	940010cc 	bl	9ed80 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   9aa54:	b9415661 	ldr	w1, [x19, #340]
   9aa58:	f0000100 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   9aa5c:	9103e000 	add	x0, x0, #0xf8
   9aa60:	940037dc 	bl	a89d0 <CNumberPool::FreeNumber(unsigned int)>
   9aa64:	aa1303e0 	mov	x0, x19
   9aa68:	f9400bf3 	ldr	x19, [sp, #16]
   9aa6c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9aa70:	17ffcb80 	b	8d870 <CUSBHIDDevice::~CUSBHIDDevice()>
   9aa74:	d503201f 	nop
   9aa78:	d503201f 	nop
   9aa7c:	d503201f 	nop

000000000009aa80 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   9aa80:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9aa84:	910003fd 	mov	x29, sp
   9aa88:	f9000bf3 	str	x19, [sp, #16]
   9aa8c:	aa0003f3 	mov	x19, x0
   9aa90:	97ffffdc 	bl	9aa00 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   9aa94:	aa1303e0 	mov	x0, x19
   9aa98:	d2802b01 	mov	x1, #0x158                 	// #344
   9aa9c:	f9400bf3 	ldr	x19, [sp, #16]
   9aaa0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9aaa4:	14003617 	b	a8300 <operator delete(void*, unsigned long)>
	...

000000000009aab0 <_GLOBAL__sub_I__ZN17CUSBGamePadDevice18s_DeviceNumberPoolE>:
   9aab0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9aab4:	910003fd 	mov	x29, sp
   9aab8:	528007e2 	mov	w2, #0x3f                  	// #63
   9aabc:	52800021 	mov	w1, #0x1                   	// #1
   9aac0:	f9000bf3 	str	x19, [sp, #16]
   9aac4:	f0000113 	adrp	x19, bd000 <CNetDevice::s_SpeedString+0x18>
   9aac8:	9103e273 	add	x19, x19, #0xf8
   9aacc:	aa1303e0 	mov	x0, x19
   9aad0:	94003774 	bl	a88a0 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   9aad4:	f0000102 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   9aad8:	d0000060 	adrp	x0, a8000 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x20>
   9aadc:	aa1303e1 	mov	x1, x19
   9aae0:	91074042 	add	x2, x2, #0x1d0
   9aae4:	f9400bf3 	ldr	x19, [sp, #16]
   9aae8:	91240000 	add	x0, x0, #0x900
   9aaec:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9aaf0:	14002d34 	b	a5fc0 <__cxa_atexit>
	...

000000000009ab00 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   9ab00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9ab04:	b00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9ab08:	91250021 	add	x1, x1, #0x940
   9ab0c:	910003fd 	mov	x29, sp
   9ab10:	f9000bf3 	str	x19, [sp, #16]
   9ab14:	aa0003f3 	mov	x19, x0
   9ab18:	f9000001 	str	x1, [x0]
   9ab1c:	9400106d 	bl	9ecd0 <CDeviceNameService::Get()>
   9ab20:	b9403662 	ldr	w2, [x19, #52]
   9ab24:	b00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9ab28:	52800003 	mov	w3, #0x0                   	// #0
   9ab2c:	91260021 	add	x1, x1, #0x980
   9ab30:	94001094 	bl	9ed80 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   9ab34:	b9403661 	ldr	w1, [x19, #52]
   9ab38:	f0000100 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   9ab3c:	91042000 	add	x0, x0, #0x108
   9ab40:	940037a4 	bl	a89d0 <CNumberPool::FreeNumber(unsigned int)>
   9ab44:	aa1303e0 	mov	x0, x19
   9ab48:	f9400bf3 	ldr	x19, [sp, #16]
   9ab4c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9ab50:	14000ecc 	b	9e680 <CDevice::~CDevice()>
   9ab54:	d503201f 	nop
   9ab58:	d503201f 	nop
   9ab5c:	d503201f 	nop

000000000009ab60 <ProxyHandler(unsigned int, unsigned char*, unsigned int, unsigned int, void*)>:
   9ab60:	b4000064 	cbz	x4, 9ab6c <ProxyHandler(unsigned int, unsigned char*, unsigned int, unsigned int, void*)+0xc>
   9ab64:	aa0403f0 	mov	x16, x4
   9ab68:	d61f0200 	br	x16
   9ab6c:	d00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9ab70:	d00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9ab74:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9ab78:	911e4021 	add	x1, x1, #0x790
   9ab7c:	910003fd 	mov	x29, sp
   9ab80:	911e8000 	add	x0, x0, #0x7a0
   9ab84:	528007c2 	mov	w2, #0x3e                  	// #62
   9ab88:	94000c6e 	bl	9dd40 <assertion_failed>
   9ab8c:	d503201f 	nop

000000000009ab90 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   9ab90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9ab94:	b00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9ab98:	91250021 	add	x1, x1, #0x940
   9ab9c:	910003fd 	mov	x29, sp
   9aba0:	f9000bf3 	str	x19, [sp, #16]
   9aba4:	aa0003f3 	mov	x19, x0
   9aba8:	f9000001 	str	x1, [x0]
   9abac:	94001049 	bl	9ecd0 <CDeviceNameService::Get()>
   9abb0:	b00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9abb4:	b9403662 	ldr	w2, [x19, #52]
   9abb8:	52800003 	mov	w3, #0x0                   	// #0
   9abbc:	91260021 	add	x1, x1, #0x980
   9abc0:	94001070 	bl	9ed80 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   9abc4:	b9403661 	ldr	w1, [x19, #52]
   9abc8:	f0000100 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   9abcc:	91042000 	add	x0, x0, #0x108
   9abd0:	94003780 	bl	a89d0 <CNumberPool::FreeNumber(unsigned int)>
   9abd4:	aa1303e0 	mov	x0, x19
   9abd8:	94000eaa 	bl	9e680 <CDevice::~CDevice()>
   9abdc:	aa1303e0 	mov	x0, x19
   9abe0:	d2800701 	mov	x1, #0x38                  	// #56
   9abe4:	f9400bf3 	ldr	x19, [sp, #16]
   9abe8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9abec:	140035c5 	b	a8300 <operator delete(void*, unsigned long)>

000000000009abf0 <CUSBMIDIDevice::CUSBMIDIDevice()>:
   9abf0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9abf4:	910003fd 	mov	x29, sp
   9abf8:	a90153f3 	stp	x19, x20, [sp, #16]
   9abfc:	aa0003f3 	mov	x19, x0
   9ac00:	b00000f4 	adrp	x20, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9ac04:	91260294 	add	x20, x20, #0x980
   9ac08:	94000ed2 	bl	9e750 <CDevice::CDevice()>
   9ac0c:	b00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9ac10:	91250021 	add	x1, x1, #0x940
   9ac14:	f9000a7f 	str	xzr, [x19, #16]
   9ac18:	f0000100 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   9ac1c:	91002282 	add	x2, x20, #0x8
   9ac20:	f900127f 	str	xzr, [x19, #32]
   9ac24:	91042000 	add	x0, x0, #0x108
   9ac28:	f9000261 	str	x1, [x19]
   9ac2c:	52800021 	mov	w1, #0x1                   	// #1
   9ac30:	3900c27f 	strb	wzr, [x19, #48]
   9ac34:	94003737 	bl	a8910 <CNumberPool::AllocateNumber(bool, char const*)>
   9ac38:	b9003660 	str	w0, [x19, #52]
   9ac3c:	94001025 	bl	9ecd0 <CDeviceNameService::Get()>
   9ac40:	aa1303e3 	mov	x3, x19
   9ac44:	aa1403e1 	mov	x1, x20
   9ac48:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ac4c:	52800004 	mov	w4, #0x0                   	// #0
   9ac50:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9ac54:	b9403462 	ldr	w2, [x3, #52]
   9ac58:	1400102a 	b	9ed00 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   9ac5c:	d503201f 	nop

000000000009ac60 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))>:
   9ac60:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9ac64:	910003fd 	mov	x29, sp
   9ac68:	b4000121 	cbz	x1, 9ac8c <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x2c>
   9ac6c:	f9000c01 	str	x1, [x0, #24]
   9ac70:	f9400801 	ldr	x1, [x0, #16]
   9ac74:	b5000181 	cbnz	x1, 9aca4 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x44>
   9ac78:	90000001 	adrp	x1, 9a000 <non-virtual thunk to CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>
   9ac7c:	912d8021 	add	x1, x1, #0xb60
   9ac80:	f9000801 	str	x1, [x0, #16]
   9ac84:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9ac88:	d65f03c0 	ret
   9ac8c:	d00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9ac90:	d00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9ac94:	911e4021 	add	x1, x1, #0x790
   9ac98:	911ea000 	add	x0, x0, #0x7a8
   9ac9c:	52800882 	mov	w2, #0x44                  	// #68
   9aca0:	94000c28 	bl	9dd40 <assertion_failed>
   9aca4:	d00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9aca8:	d00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9acac:	911e4021 	add	x1, x1, #0x790
   9acb0:	911ee000 	add	x0, x0, #0x7b8
   9acb4:	52800982 	mov	w2, #0x4c                  	// #76
   9acb8:	94000c22 	bl	9dd40 <assertion_failed>
   9acbc:	d503201f 	nop

000000000009acc0 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int, unsigned int, void*), void*)>:
   9acc0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9acc4:	910003fd 	mov	x29, sp
   9acc8:	f9000c02 	str	x2, [x0, #24]
   9accc:	f9400803 	ldr	x3, [x0, #16]
   9acd0:	b50000a3 	cbnz	x3, 9ace4 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int, unsigned int, void*), void*)+0x24>
   9acd4:	f9000801 	str	x1, [x0, #16]
   9acd8:	b4000121 	cbz	x1, 9acfc <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int, unsigned int, void*), void*)+0x3c>
   9acdc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9ace0:	d65f03c0 	ret
   9ace4:	d00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9ace8:	d00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9acec:	911e4021 	add	x1, x1, #0x790
   9acf0:	911ee000 	add	x0, x0, #0x7b8
   9acf4:	52800982 	mov	w2, #0x4c                  	// #76
   9acf8:	94000c12 	bl	9dd40 <assertion_failed>
   9acfc:	d00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9ad00:	d00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9ad04:	911e4021 	add	x1, x1, #0x790
   9ad08:	911f4000 	add	x0, x0, #0x7d0
   9ad0c:	528009c2 	mov	w2, #0x4e                  	// #78
   9ad10:	94000c0c 	bl	9dd40 <assertion_failed>
   9ad14:	d503201f 	nop
   9ad18:	d503201f 	nop
   9ad1c:	d503201f 	nop

000000000009ad20 <CUSBMIDIDevice::SendEventPackets(unsigned char const*, unsigned int)>:
   9ad20:	aa0003e3 	mov	x3, x0
   9ad24:	aa0103e0 	mov	x0, x1
   9ad28:	f9401064 	ldr	x4, [x3, #32]
   9ad2c:	2a0203e1 	mov	w1, w2
   9ad30:	b4000084 	cbz	x4, 9ad40 <CUSBMIDIDevice::SendEventPackets(unsigned char const*, unsigned int)+0x20>
   9ad34:	aa0403f0 	mov	x16, x4
   9ad38:	f9401462 	ldr	x2, [x3, #40]
   9ad3c:	d61f0200 	br	x16
   9ad40:	52800000 	mov	w0, #0x0                   	// #0
   9ad44:	d65f03c0 	ret
   9ad48:	d503201f 	nop
   9ad4c:	d503201f 	nop

000000000009ad50 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)>:
   9ad50:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9ad54:	910003fd 	mov	x29, sp
   9ad58:	71003c3f 	cmp	w1, #0xf
   9ad5c:	a90153f3 	stp	x19, x20, [sp, #16]
   9ad60:	f90013f5 	str	x21, [sp, #32]
   9ad64:	54001868 	b.hi	9b070 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x320>  // b.pmore
   9ad68:	b4001902 	cbz	x2, 9b088 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x338>
   9ad6c:	340019a3 	cbz	w3, 9b0a0 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x350>
   9ad70:	aa0003eb 	mov	x11, x0
   9ad74:	531e7460 	lsl	w0, w3, #2
   9ad78:	91003c00 	add	x0, x0, #0xf
   9ad7c:	531c0c29 	ubfiz	w9, w1, #4, #4
   9ad80:	927c7000 	and	x0, x0, #0x1fffffff0
   9ad84:	b00000ea 	adrp	x10, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9ad88:	9126014a 	add	x10, x10, #0x980
   9ad8c:	cb2063ff 	sub	sp, sp, x0
   9ad90:	528000ac 	mov	w12, #0x5                   	// #5
   9ad94:	51000474 	sub	w20, w3, #0x1
   9ad98:	910003e0 	mov	x0, sp
   9ad9c:	910003e5 	mov	x5, sp
   9ada0:	9100414a 	add	x10, x10, #0x10
   9ada4:	2a0c012c 	orr	w12, w9, w12
   9ada8:	32000533 	orr	w19, w9, #0x3
   9adac:	321f013e 	orr	w30, w9, #0x2
   9adb0:	321e012f 	orr	w15, w9, #0x4
   9adb4:	d2800001 	mov	x1, #0x0                   	// #0
   9adb8:	128001f2 	mov	w18, #0xfffffff0            	// #-16
   9adbc:	52800031 	mov	w17, #0x1                   	// #1
   9adc0:	d280002d 	mov	x13, #0x1                   	// #1
   9adc4:	d28dd40e 	mov	x14, #0x6ea0                	// #28320
   9adc8:	d28000b0 	mov	x16, #0x5                   	// #5
   9adcc:	aa0203e7 	mov	x7, x2
   9add0:	384014f5 	ldrb	w21, [x7], #1
   9add4:	7103bebf 	cmp	w21, #0xef
   9add8:	54000528 	b.hi	9ae7c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x12c>  // b.pmore
   9addc:	53047ea3 	lsr	w3, w21, #4
   9ade0:	aa0503e6 	mov	x6, x5
   9ade4:	b863d948 	ldr	w8, [x10, w3, sxtw #2]
   9ade8:	2a090064 	orr	w4, w3, w9
   9adec:	91000823 	add	x3, x1, #0x2
   9adf0:	380024c4 	strb	w4, [x6], #2
   9adf4:	390004b5 	strb	w21, [x5, #1]
   9adf8:	71000508 	subs	w8, w8, #0x1
   9adfc:	54000b20 	b.eq	9af60 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x210>  // b.none
   9ae00:	51000681 	sub	w1, w20, #0x1
   9ae04:	34000214 	cbz	w20, 9ae44 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xf4>
   9ae08:	51000508 	sub	w8, w8, #0x1
   9ae0c:	cb020065 	sub	x5, x3, x2
   9ae10:	91000908 	add	x8, x8, #0x2
   9ae14:	8b080042 	add	x2, x2, x8
   9ae18:	910004e7 	add	x7, x7, #0x1
   9ae1c:	2a0103e8 	mov	w8, w1
   9ae20:	aa0703e3 	mov	x3, x7
   9ae24:	eb0200ff 	cmp	x7, x2
   9ae28:	385ffc64 	ldrb	w4, [x3, #-1]!
   9ae2c:	51000421 	sub	w1, w1, #0x1
   9ae30:	380014c4 	strb	w4, [x6], #1
   9ae34:	8b050063 	add	x3, x3, x5
   9ae38:	54000540 	b.eq	9aee0 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x190>  // b.none
   9ae3c:	3100043f 	cmn	w1, #0x1
   9ae40:	54fffec1 	b.ne	9ae18 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xc8>  // b.any
   9ae44:	940012f3 	bl	9fa10 <CLogger::Get()>
   9ae48:	b00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9ae4c:	91260021 	add	x1, x1, #0x980
   9ae50:	d00000c3 	adrp	x3, b4000 <_etext+0x3158>
   9ae54:	91002021 	add	x1, x1, #0x8
   9ae58:	91208063 	add	x3, x3, #0x820
   9ae5c:	52800042 	mov	w2, #0x2                   	// #2
   9ae60:	940014d8 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9ae64:	910003bf 	mov	sp, x29
   9ae68:	52800000 	mov	w0, #0x0                   	// #0
   9ae6c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ae70:	f94013f5 	ldr	x21, [sp, #32]
   9ae74:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9ae78:	d65f03c0 	ret
   9ae7c:	7103c2bf 	cmp	w21, #0xf0
   9ae80:	540008e0 	b.eq	9af9c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x24c>  // b.none
   9ae84:	11003ea3 	add	w3, w21, #0xf
   9ae88:	9ac321a3 	lsl	x3, x13, x3
   9ae8c:	ea0e007f 	tst	x3, x14
   9ae90:	540006e1 	b.ne	9af6c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x21c>  // b.any
   9ae94:	ea10007f 	tst	x3, x16
   9ae98:	54000781 	b.ne	9af88 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x238>  // b.any
   9ae9c:	7103cabf 	cmp	w21, #0xf2
   9aea0:	54000500 	b.eq	9af40 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x1f0>  // b.none
   9aea4:	940012db 	bl	9fa10 <CLogger::Get()>
   9aea8:	b00000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9aeac:	91260021 	add	x1, x1, #0x980
   9aeb0:	d00000c3 	adrp	x3, b4000 <_etext+0x3158>
   9aeb4:	2a1503e4 	mov	w4, w21
   9aeb8:	91002021 	add	x1, x1, #0x8
   9aebc:	911fe063 	add	x3, x3, #0x7f8
   9aec0:	52800042 	mov	w2, #0x2                   	// #2
   9aec4:	940014bf 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9aec8:	910003bf 	mov	sp, x29
   9aecc:	52800000 	mov	w0, #0x0                   	// #0
   9aed0:	a94153f3 	ldp	x19, x20, [sp, #16]
   9aed4:	f94013f5 	ldr	x21, [sp, #32]
   9aed8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9aedc:	d65f03c0 	ret
   9aee0:	aa0703e2 	mov	x2, x7
   9aee4:	f240047f 	tst	x3, #0x3
   9aee8:	aa0303e1 	mov	x1, x3
   9aeec:	51000507 	sub	w7, w8, #0x1
   9aef0:	aa0603e5 	mov	x5, x6
   9aef4:	540000e0 	b.eq	9af10 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x1c0>  // b.none
   9aef8:	380014bf 	strb	wzr, [x5], #1
   9aefc:	8b0300a1 	add	x1, x5, x3
   9af00:	cb060021 	sub	x1, x1, x6
   9af04:	f240043f 	tst	x1, #0x3
   9af08:	54ffff81 	b.ne	9aef8 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x1a8>  // b.any
   9af0c:	51000507 	sub	w7, w8, #0x1
   9af10:	2a0703f4 	mov	w20, w7
   9af14:	35fff5c8 	cbnz	w8, 9adcc <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x7c>
   9af18:	f9401163 	ldr	x3, [x11, #32]
   9af1c:	b4fffa43 	cbz	x3, 9ae64 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x114>
   9af20:	f9401562 	ldr	x2, [x11, #40]
   9af24:	d63f0060 	blr	x3
   9af28:	910003bf 	mov	sp, x29
   9af2c:	12001c00 	and	w0, w0, #0xff
   9af30:	a94153f3 	ldp	x19, x20, [sp, #16]
   9af34:	f94013f5 	ldr	x21, [sp, #32]
   9af38:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9af3c:	d65f03c0 	ret
   9af40:	91000423 	add	x3, x1, #0x1
   9af44:	910004a6 	add	x6, x5, #0x1
   9af48:	2a1303e1 	mov	w1, w19
   9af4c:	52800048 	mov	w8, #0x2                   	// #2
   9af50:	390000a1 	strb	w1, [x5]
   9af54:	91000463 	add	x3, x3, #0x1
   9af58:	380014d5 	strb	w21, [x6], #1
   9af5c:	17ffffa9 	b	9ae00 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xb0>
   9af60:	aa0703e2 	mov	x2, x7
   9af64:	2a1403e8 	mov	w8, w20
   9af68:	17ffffdf 	b	9aee4 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x194>
   9af6c:	aa0503e6 	mov	x6, x5
   9af70:	91000823 	add	x3, x1, #0x2
   9af74:	aa0703e2 	mov	x2, x7
   9af78:	2a1403e8 	mov	w8, w20
   9af7c:	380024cc 	strb	w12, [x6], #2
   9af80:	390004b5 	strb	w21, [x5, #1]
   9af84:	17ffffd8 	b	9aee4 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x194>
   9af88:	91000423 	add	x3, x1, #0x1
   9af8c:	910004a6 	add	x6, x5, #0x1
   9af90:	2a1e03e1 	mov	w1, w30
   9af94:	52800028 	mov	w8, #0x1                   	// #1
   9af98:	17ffffee 	b	9af50 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x200>
   9af9c:	aa0503e3 	mov	x3, x5
   9afa0:	91000821 	add	x1, x1, #0x2
   9afa4:	51000688 	sub	w8, w20, #0x1
   9afa8:	aa0703e2 	mov	x2, x7
   9afac:	3800246f 	strb	w15, [x3], #2
   9afb0:	52800024 	mov	w4, #0x1                   	// #1
   9afb4:	390004b2 	strb	w18, [x5, #1]
   9afb8:	1400000a 	b	9afe0 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x290>
   9afbc:	aa0103f4 	mov	x20, x1
   9afc0:	7103dcdf 	cmp	w6, #0xf7
   9afc4:	38001466 	strb	w6, [x3], #1
   9afc8:	2a0403f5 	mov	w21, w4
   9afcc:	91000681 	add	x1, x20, #0x1
   9afd0:	11000484 	add	w4, w4, #0x1
   9afd4:	51000507 	sub	w7, w8, #0x1
   9afd8:	54000220 	b.eq	9b01c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2cc>  // b.none
   9afdc:	2a0703e8 	mov	w8, w7
   9afe0:	3100051f 	cmn	w8, #0x1
   9afe4:	54fff300 	b.eq	9ae44 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xf4>  // b.none
   9afe8:	71000c9f 	cmp	w4, #0x3
   9afec:	38401446 	ldrb	w6, [x2], #1
   9aff0:	54fffe61 	b.ne	9afbc <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x26c>  // b.any
   9aff4:	aa0303e5 	mov	x5, x3
   9aff8:	91000434 	add	x20, x1, #0x1
   9affc:	3800146f 	strb	w15, [x3], #1
   9b000:	7103dcdf 	cmp	w6, #0xf7
   9b004:	38001466 	strb	w6, [x3], #1
   9b008:	52800024 	mov	w4, #0x1                   	// #1
   9b00c:	52800015 	mov	w21, #0x0                   	// #0
   9b010:	91000681 	add	x1, x20, #0x1
   9b014:	51000507 	sub	w7, w8, #0x1
   9b018:	54fffe21 	b.ne	9afdc <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x28c>  // b.any
   9b01c:	11001086 	add	w6, w4, #0x4
   9b020:	7100089f 	cmp	w4, #0x2
   9b024:	2a060124 	orr	w4, w9, w6
   9b028:	11000aa6 	add	w6, w21, #0x2
   9b02c:	390000a4 	strb	w4, [x5]
   9b030:	aa0303e5 	mov	x5, x3
   9b034:	54fff6e8 	b.hi	9af10 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x1c0>  // b.pmore
   9b038:	4b0302a4 	sub	w4, w21, w3
   9b03c:	380014bf 	strb	wzr, [x5], #1
   9b040:	110004a1 	add	w1, w5, #0x1
   9b044:	0b040021 	add	w1, w1, w4
   9b048:	7100083f 	cmp	w1, #0x2
   9b04c:	54ffff89 	b.ls	9b03c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2ec>  // b.plast
   9b050:	91000a94 	add	x20, x20, #0x2
   9b054:	4b150235 	sub	w21, w17, w21
   9b058:	71000cdf 	cmp	w6, #0x3
   9b05c:	9a9f92a1 	csel	x1, x21, xzr, ls	// ls = plast
   9b060:	9a9585b5 	csinc	x21, x13, x21, hi	// hi = pmore
   9b064:	8b140021 	add	x1, x1, x20
   9b068:	8b150065 	add	x5, x3, x21
   9b06c:	17ffffa9 	b	9af10 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x1c0>
   9b070:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b074:	b00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9b078:	911e4021 	add	x1, x1, #0x790
   9b07c:	911fa000 	add	x0, x0, #0x7e8
   9b080:	52800ba2 	mov	w2, #0x5d                  	// #93
   9b084:	94000b2f 	bl	9dd40 <assertion_failed>
   9b088:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b08c:	f00000a0 	adrp	x0, b2000 <_etext+0x1158>
   9b090:	911e4021 	add	x1, x1, #0x790
   9b094:	913be000 	add	x0, x0, #0xef8
   9b098:	52800bc2 	mov	w2, #0x5e                  	// #94
   9b09c:	94000b29 	bl	9dd40 <assertion_failed>
   9b0a0:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b0a4:	f00000a0 	adrp	x0, b2000 <_etext+0x1158>
   9b0a8:	911e4021 	add	x1, x1, #0x790
   9b0ac:	913c2000 	add	x0, x0, #0xf08
   9b0b0:	52800be2 	mov	w2, #0x5f                  	// #95
   9b0b4:	94000b23 	bl	9dd40 <assertion_failed>
   9b0b8:	d503201f 	nop
   9b0bc:	d503201f 	nop

000000000009b0c0 <CUSBMIDIDevice::SetAllSoundOffOnUSBError(bool)>:
   9b0c0:	3900c001 	strb	w1, [x0, #48]
   9b0c4:	d65f03c0 	ret
   9b0c8:	d503201f 	nop
   9b0cc:	d503201f 	nop

000000000009b0d0 <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)>:
   9b0d0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9b0d4:	910003fd 	mov	x29, sp
   9b0d8:	a90153f3 	stp	x19, x20, [sp, #16]
   9b0dc:	b4000481 	cbz	x1, 9b16c <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0x9c>
   9b0e0:	f240045f 	tst	x2, #0x3
   9b0e4:	2a0203e2 	mov	w2, w2
   9b0e8:	54000521 	b.ne	9b18c <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0xbc>  // b.any
   9b0ec:	8b020034 	add	x20, x1, x2
   9b0f0:	f9001bf7 	str	x23, [sp, #48]
   9b0f4:	aa0103f3 	mov	x19, x1
   9b0f8:	eb14003f 	cmp	x1, x20
   9b0fc:	54000582 	b.cs	9b1ac <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0xdc>  // b.hs, b.nlast
   9b100:	a9025bf5 	stp	x21, x22, [sp, #32]
   9b104:	900000f6 	adrp	x22, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9b108:	912602d6 	add	x22, x22, #0x980
   9b10c:	aa0003f5 	mov	x21, x0
   9b110:	910042d6 	add	x22, x22, #0x10
   9b114:	52800017 	mov	w23, #0x0                   	// #0
   9b118:	39400260 	ldrb	w0, [x19]
   9b11c:	34000160 	cbz	w0, 9b148 <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0x78>
   9b120:	f9400aa5 	ldr	x5, [x21, #16]
   9b124:	52800037 	mov	w23, #0x1                   	// #1
   9b128:	b4000105 	cbz	x5, 9b148 <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0x78>
   9b12c:	92400c02 	and	x2, x0, #0xf
   9b130:	b94036a3 	ldr	w3, [x21, #52]
   9b134:	53047c00 	lsr	w0, w0, #4
   9b138:	91000661 	add	x1, x19, #0x1
   9b13c:	b8627ac2 	ldr	w2, [x22, x2, lsl #2]
   9b140:	f9400ea4 	ldr	x4, [x21, #24]
   9b144:	d63f00a0 	blr	x5
   9b148:	91001273 	add	x19, x19, #0x4
   9b14c:	eb13029f 	cmp	x20, x19
   9b150:	54fffe48 	b.hi	9b118 <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0x48>  // b.pmore
   9b154:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9b158:	2a1703e0 	mov	w0, w23
   9b15c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9b160:	f9401bf7 	ldr	x23, [sp, #48]
   9b164:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9b168:	d65f03c0 	ret
   9b16c:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b170:	b00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9b174:	a9025bf5 	stp	x21, x22, [sp, #32]
   9b178:	911e4021 	add	x1, x1, #0x790
   9b17c:	9120e000 	add	x0, x0, #0x838
   9b180:	52801d62 	mov	w2, #0xeb                  	// #235
   9b184:	f9001bf7 	str	x23, [sp, #48]
   9b188:	94000aee 	bl	9dd40 <assertion_failed>
   9b18c:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b190:	b00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9b194:	a9025bf5 	stp	x21, x22, [sp, #32]
   9b198:	911e4021 	add	x1, x1, #0x790
   9b19c:	91210000 	add	x0, x0, #0x840
   9b1a0:	52801d82 	mov	w2, #0xec                  	// #236
   9b1a4:	f9001bf7 	str	x23, [sp, #48]
   9b1a8:	94000ae6 	bl	9dd40 <assertion_failed>
   9b1ac:	52800017 	mov	w23, #0x0                   	// #0
   9b1b0:	17ffffea 	b	9b158 <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0x88>
   9b1b4:	d503201f 	nop
   9b1b8:	d503201f 	nop
   9b1bc:	d503201f 	nop

000000000009b1c0 <CUSBMIDIDevice::RegisterSendEventsHandler(bool (*)(unsigned char const*, unsigned int, void*), void*)>:
   9b1c0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9b1c4:	910003fd 	mov	x29, sp
   9b1c8:	f9001402 	str	x2, [x0, #40]
   9b1cc:	f9401003 	ldr	x3, [x0, #32]
   9b1d0:	b50000a3 	cbnz	x3, 9b1e4 <CUSBMIDIDevice::RegisterSendEventsHandler(bool (*)(unsigned char const*, unsigned int, void*), void*)+0x24>
   9b1d4:	f9001001 	str	x1, [x0, #32]
   9b1d8:	b4000121 	cbz	x1, 9b1fc <CUSBMIDIDevice::RegisterSendEventsHandler(bool (*)(unsigned char const*, unsigned int, void*), void*)+0x3c>
   9b1dc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9b1e0:	d65f03c0 	ret
   9b1e4:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b1e8:	b00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9b1ec:	911e4021 	add	x1, x1, #0x790
   9b1f0:	91218000 	add	x0, x0, #0x860
   9b1f4:	52802162 	mov	w2, #0x10b                 	// #267
   9b1f8:	94000ad2 	bl	9dd40 <assertion_failed>
   9b1fc:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b200:	b00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9b204:	911e4021 	add	x1, x1, #0x790
   9b208:	9121e000 	add	x0, x0, #0x878
   9b20c:	528021a2 	mov	w2, #0x10d                 	// #269
   9b210:	94000acc 	bl	9dd40 <assertion_failed>
   9b214:	d503201f 	nop
   9b218:	d503201f 	nop
   9b21c:	d503201f 	nop

000000000009b220 <CUSBMIDIDevice::GetAllSoundOffOnUSBError() const>:
   9b220:	3940c000 	ldrb	w0, [x0, #48]
   9b224:	d65f03c0 	ret
	...

000000000009b230 <_GLOBAL__sub_I__ZN14CUSBMIDIDevice18s_DeviceNumberPoolE>:
   9b230:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9b234:	910003fd 	mov	x29, sp
   9b238:	528007e2 	mov	w2, #0x3f                  	// #63
   9b23c:	52800021 	mov	w1, #0x1                   	// #1
   9b240:	f9000bf3 	str	x19, [sp, #16]
   9b244:	d0000113 	adrp	x19, bd000 <CNetDevice::s_SpeedString+0x18>
   9b248:	91042273 	add	x19, x19, #0x108
   9b24c:	aa1303e0 	mov	x0, x19
   9b250:	94003594 	bl	a88a0 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   9b254:	d0000102 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   9b258:	b0000060 	adrp	x0, a8000 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x20>
   9b25c:	aa1303e1 	mov	x1, x19
   9b260:	91074042 	add	x2, x2, #0x1d0
   9b264:	f9400bf3 	ldr	x19, [sp, #16]
   9b268:	91240000 	add	x0, x0, #0x900
   9b26c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9b270:	14002b54 	b	a5fc0 <__cxa_atexit>
	...

000000000009b280 <CUSBSerialHostDevice::SetBaudRate(unsigned int)>:
   9b280:	52800020 	mov	w0, #0x1                   	// #1
   9b284:	d65f03c0 	ret
   9b288:	d503201f 	nop
   9b28c:	d503201f 	nop

000000000009b290 <CUSBSerialHostDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   9b290:	52800020 	mov	w0, #0x1                   	// #1
   9b294:	d65f03c0 	ret
   9b298:	d503201f 	nop
   9b29c:	d503201f 	nop

000000000009b2a0 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>:
   9b2a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9b2a4:	910003fd 	mov	x29, sp
   9b2a8:	900000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9b2ac:	91278021 	add	x1, x1, #0x9e0
   9b2b0:	a90153f3 	stp	x19, x20, [sp, #16]
   9b2b4:	aa0003f3 	mov	x19, x0
   9b2b8:	f9401c00 	ldr	x0, [x0, #56]
   9b2bc:	f9000261 	str	x1, [x19]
   9b2c0:	b4000080 	cbz	x0, 9b2d0 <CUSBSerialHostDevice::~CUSBSerialHostDevice()+0x30>
   9b2c4:	f9400001 	ldr	x1, [x0]
   9b2c8:	f9400421 	ldr	x1, [x1, #8]
   9b2cc:	d63f0020 	blr	x1
   9b2d0:	f9001e7f 	str	xzr, [x19, #56]
   9b2d4:	f9402a74 	ldr	x20, [x19, #80]
   9b2d8:	b40000d4 	cbz	x20, 9b2f0 <CUSBSerialHostDevice::~CUSBSerialHostDevice()+0x50>
   9b2dc:	aa1403e0 	mov	x0, x20
   9b2e0:	97ffbc00 	bl	8a2e0 <CUSBEndpoint::~CUSBEndpoint()>
   9b2e4:	aa1403e0 	mov	x0, x20
   9b2e8:	d2800401 	mov	x1, #0x20                  	// #32
   9b2ec:	94003405 	bl	a8300 <operator delete(void*, unsigned long)>
   9b2f0:	f9002a7f 	str	xzr, [x19, #80]
   9b2f4:	f9402674 	ldr	x20, [x19, #72]
   9b2f8:	b40000d4 	cbz	x20, 9b310 <CUSBSerialHostDevice::~CUSBSerialHostDevice()+0x70>
   9b2fc:	aa1403e0 	mov	x0, x20
   9b300:	97ffbbf8 	bl	8a2e0 <CUSBEndpoint::~CUSBEndpoint()>
   9b304:	aa1403e0 	mov	x0, x20
   9b308:	d2800401 	mov	x1, #0x20                  	// #32
   9b30c:	940033fd 	bl	a8300 <operator delete(void*, unsigned long)>
   9b310:	f900267f 	str	xzr, [x19, #72]
   9b314:	f9402e60 	ldr	x0, [x19, #88]
   9b318:	b4000040 	cbz	x0, 9b320 <CUSBSerialHostDevice::~CUSBSerialHostDevice()+0x80>
   9b31c:	940033ed 	bl	a82d0 <operator delete[](void*)>
   9b320:	aa1303e0 	mov	x0, x19
   9b324:	a905fe7f 	stp	xzr, xzr, [x19, #88]
   9b328:	a94153f3 	ldp	x19, x20, [sp, #16]
   9b32c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9b330:	17ffbc40 	b	8a430 <CUSBFunction::~CUSBFunction()>
   9b334:	d503201f 	nop
   9b338:	d503201f 	nop
   9b33c:	d503201f 	nop

000000000009b340 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>:
   9b340:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9b344:	910003fd 	mov	x29, sp
   9b348:	f9000bf3 	str	x19, [sp, #16]
   9b34c:	aa0003f3 	mov	x19, x0
   9b350:	97ffffd4 	bl	9b2a0 <CUSBSerialHostDevice::~CUSBSerialHostDevice()>
   9b354:	aa1303e0 	mov	x0, x19
   9b358:	d2800f01 	mov	x1, #0x78                  	// #120
   9b35c:	f9400bf3 	ldr	x19, [sp, #16]
   9b360:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9b364:	140033e7 	b	a8300 <operator delete(void*, unsigned long)>
   9b368:	d503201f 	nop
   9b36c:	d503201f 	nop

000000000009b370 <CUSBSerialHostDevice::Write(void const*, unsigned long)>:
   9b370:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9b374:	910003fd 	mov	x29, sp
   9b378:	a90153f3 	stp	x19, x20, [sp, #16]
   9b37c:	a9025bf5 	stp	x21, x22, [sp, #32]
   9b380:	b40005e1 	cbz	x1, 9b43c <CUSBSerialHostDevice::Write(void const*, unsigned long)+0xcc>
   9b384:	aa0203f3 	mov	x19, x2
   9b388:	b4000662 	cbz	x2, 9b454 <CUSBSerialHostDevice::Write(void const*, unsigned long)+0xe4>
   9b38c:	aa0103f4 	mov	x20, x1
   9b390:	aa0003f6 	mov	x22, x0
   9b394:	97ffbd47 	bl	8a8b0 <CUSBFunction::GetHost() const>
   9b398:	aa0003f5 	mov	x21, x0
   9b39c:	b4000680 	cbz	x0, 9b46c <CUSBSerialHostDevice::Write(void const*, unsigned long)+0xfc>
   9b3a0:	d1000664 	sub	x4, x19, #0x1
   9b3a4:	aa1403e1 	mov	x1, x20
   9b3a8:	b2401484 	orr	x4, x4, #0x3f
   9b3ac:	aa1303e2 	mov	x2, x19
   9b3b0:	91010084 	add	x4, x4, #0x40
   9b3b4:	927cec84 	and	x4, x4, #0xfffffffffffffff0
   9b3b8:	cb2463ff 	sub	sp, sp, x4
   9b3bc:	9100fff4 	add	x20, sp, #0x3f
   9b3c0:	927ae694 	and	x20, x20, #0xffffffffffffffc0
   9b3c4:	aa1403e0 	mov	x0, x20
   9b3c8:	94003120 	bl	a7848 <memcpy>
   9b3cc:	f9402ac1 	ldr	x1, [x22, #80]
   9b3d0:	b40005a1 	cbz	x1, 9b484 <CUSBSerialHostDevice::Write(void const*, unsigned long)+0x114>
   9b3d4:	2a1303e3 	mov	w3, w19
   9b3d8:	aa1403e2 	mov	x2, x20
   9b3dc:	aa1503e0 	mov	x0, x21
   9b3e0:	52800004 	mov	w4, #0x0                   	// #0
   9b3e4:	97ff9787 	bl	81200 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   9b3e8:	2a0003f3 	mov	w19, w0
   9b3ec:	37f800e0 	tbnz	w0, #31, 9b408 <CUSBSerialHostDevice::Write(void const*, unsigned long)+0x98>
   9b3f0:	910003bf 	mov	sp, x29
   9b3f4:	2a1303e0 	mov	w0, w19
   9b3f8:	a94153f3 	ldp	x19, x20, [sp, #16]
   9b3fc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9b400:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9b404:	d65f03c0 	ret
   9b408:	94001182 	bl	9fa10 <CLogger::Get()>
   9b40c:	b00000c3 	adrp	x3, b4000 <_etext+0x3158>
   9b410:	900000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9b414:	91230063 	add	x3, x3, #0x8c0
   9b418:	91294021 	add	x1, x1, #0xa50
   9b41c:	52800042 	mov	w2, #0x2                   	// #2
   9b420:	94001368 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9b424:	910003bf 	mov	sp, x29
   9b428:	2a1303e0 	mov	w0, w19
   9b42c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9b430:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9b434:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9b438:	d65f03c0 	ret
   9b43c:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b440:	d00000a0 	adrp	x0, b1000 <_etext+0x158>
   9b444:	91224021 	add	x1, x1, #0x890
   9b448:	911f6000 	add	x0, x0, #0x7d8
   9b44c:	52801042 	mov	w2, #0x82                  	// #130
   9b450:	94000a3c 	bl	9dd40 <assertion_failed>
   9b454:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b458:	900000c0 	adrp	x0, b3000 <_etext+0x2158>
   9b45c:	91224021 	add	x1, x1, #0x890
   9b460:	9101a000 	add	x0, x0, #0x68
   9b464:	52801062 	mov	w2, #0x83                  	// #131
   9b468:	94000a36 	bl	9dd40 <assertion_failed>
   9b46c:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b470:	d00000a0 	adrp	x0, b1000 <_etext+0x158>
   9b474:	91224021 	add	x1, x1, #0x890
   9b478:	910cc000 	add	x0, x0, #0x330
   9b47c:	52801202 	mov	w2, #0x90                  	// #144
   9b480:	94000a30 	bl	9dd40 <assertion_failed>
   9b484:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b488:	b00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9b48c:	91224021 	add	x1, x1, #0x890
   9b490:	9122a000 	add	x0, x0, #0x8a8
   9b494:	528012a2 	mov	w2, #0x95                  	// #149
   9b498:	94000a2a 	bl	9dd40 <assertion_failed>
   9b49c:	d503201f 	nop

000000000009b4a0 <CUSBSerialHostDevice::WriteHandler(void const*, unsigned long, void*)>:
   9b4a0:	aa0203e3 	mov	x3, x2
   9b4a4:	b4000102 	cbz	x2, 9b4c4 <CUSBSerialHostDevice::WriteHandler(void const*, unsigned long, void*)+0x24>
   9b4a8:	f9400064 	ldr	x4, [x3]
   9b4ac:	aa0103e2 	mov	x2, x1
   9b4b0:	aa0003e1 	mov	x1, x0
   9b4b4:	aa0303e0 	mov	x0, x3
   9b4b8:	f9400c83 	ldr	x3, [x4, #24]
   9b4bc:	aa0303f0 	mov	x16, x3
   9b4c0:	d61f0200 	br	x16
   9b4c4:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b4c8:	d00000a0 	adrp	x0, b1000 <_etext+0x158>
   9b4cc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9b4d0:	91224021 	add	x1, x1, #0x890
   9b4d4:	910003fd 	mov	x29, sp
   9b4d8:	910b6000 	add	x0, x0, #0x2d8
   9b4dc:	52802222 	mov	w2, #0x111                 	// #273
   9b4e0:	94000a18 	bl	9dd40 <assertion_failed>
   9b4e4:	d503201f 	nop
   9b4e8:	d503201f 	nop
   9b4ec:	d503201f 	nop

000000000009b4f0 <CUSBSerialHostDevice::Read(void*, unsigned long) [clone .part.0]>:
   9b4f0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9b4f4:	910003fd 	mov	x29, sp
   9b4f8:	f9402c06 	ldr	x6, [x0, #88]
   9b4fc:	a90153f3 	stp	x19, x20, [sp, #16]
   9b500:	b4000906 	cbz	x6, 9b620 <CUSBSerialHostDevice::Read(void*, unsigned long) [clone .part.0]+0x130>
   9b504:	aa0003f3 	mov	x19, x0
   9b508:	f9403005 	ldr	x5, [x0, #96]
   9b50c:	b4000985 	cbz	x5, 9b63c <CUSBSerialHostDevice::Read(void*, unsigned long) [clone .part.0]+0x14c>
   9b510:	f9403403 	ldr	x3, [x0, #104]
   9b514:	eb0300bf 	cmp	x5, x3
   9b518:	54000a03 	b.cc	9b658 <CUSBSerialHostDevice::Read(void*, unsigned long) [clone .part.0]+0x168>  // b.lo, b.ul, b.last
   9b51c:	aa0103e4 	mov	x4, x1
   9b520:	b9407001 	ldr	w1, [x0, #112]
   9b524:	eb01007f 	cmp	x3, x1
   9b528:	54000a63 	b.cc	9b674 <CUSBSerialHostDevice::Read(void*, unsigned long) [clone .part.0]+0x184>  // b.lo, b.ul, b.last
   9b52c:	540002e0 	b.eq	9b588 <CUSBSerialHostDevice::Read(void*, unsigned long) [clone .part.0]+0x98>  // b.none
   9b530:	cb010063 	sub	x3, x3, x1
   9b534:	eb02007f 	cmp	x3, x2
   9b538:	9a829074 	csel	x20, x3, x2, ls	// ls = plast
   9b53c:	b4000194 	cbz	x20, 9b56c <CUSBSerialHostDevice::Read(void*, unsigned long) [clone .part.0]+0x7c>
   9b540:	8b0100c1 	add	x1, x6, x1
   9b544:	aa0403e0 	mov	x0, x4
   9b548:	aa1403e2 	mov	x2, x20
   9b54c:	940030bf 	bl	a7848 <memcpy>
   9b550:	b9407261 	ldr	w1, [x19, #112]
   9b554:	2a1403e0 	mov	w0, w20
   9b558:	0b140021 	add	w1, w1, w20
   9b55c:	b9007261 	str	w1, [x19, #112]
   9b560:	a94153f3 	ldp	x19, x20, [sp, #16]
   9b564:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9b568:	d65f03c0 	ret
   9b56c:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b570:	900000c0 	adrp	x0, b3000 <_etext+0x2158>
   9b574:	f90013f5 	str	x21, [sp, #32]
   9b578:	91224021 	add	x1, x1, #0x890
   9b57c:	9101a000 	add	x0, x0, #0x68
   9b580:	52801a62 	mov	w2, #0xd3                  	// #211
   9b584:	940009ef 	bl	9dd40 <assertion_failed>
   9b588:	f90013f5 	str	x21, [sp, #32]
   9b58c:	97ffbcc9 	bl	8a8b0 <CUSBFunction::GetHost() const>
   9b590:	aa0003f4 	mov	x20, x0
   9b594:	b40007e0 	cbz	x0, 9b690 <CUSBSerialHostDevice::Read(void*, unsigned long) [clone .part.0]+0x1a0>
   9b598:	f9402660 	ldr	x0, [x19, #72]
   9b59c:	b4000860 	cbz	x0, 9b6a8 <CUSBSerialHostDevice::Read(void*, unsigned long) [clone .part.0]+0x1b8>
   9b5a0:	d2801200 	mov	x0, #0x90                  	// #144
   9b5a4:	97ff9a27 	bl	81e40 <CUSBRequest::operator new(unsigned long)>
   9b5a8:	b9406263 	ldr	w3, [x19, #96]
   9b5ac:	d2800004 	mov	x4, #0x0                   	// #0
   9b5b0:	aa0003f5 	mov	x21, x0
   9b5b4:	f9402661 	ldr	x1, [x19, #72]
   9b5b8:	f9402e62 	ldr	x2, [x19, #88]
   9b5bc:	97ff9939 	bl	81aa0 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   9b5c0:	aa1503e0 	mov	x0, x21
   9b5c4:	97ff9a17 	bl	81e20 <CUSBRequest::SetCompleteOnNAK()>
   9b5c8:	90000001 	adrp	x1, 9b000 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2b0>
   9b5cc:	aa1503e0 	mov	x0, x21
   9b5d0:	91298021 	add	x1, x1, #0xa60
   9b5d4:	aa1303e3 	mov	x3, x19
   9b5d8:	d2800002 	mov	x2, #0x0                   	// #0
   9b5dc:	97ff99f5 	bl	81db0 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   9b5e0:	f9400283 	ldr	x3, [x20]
   9b5e4:	52800024 	mov	w4, #0x1                   	// #1
   9b5e8:	aa1503e1 	mov	x1, x21
   9b5ec:	aa1403e0 	mov	x0, x20
   9b5f0:	52800002 	mov	w2, #0x0                   	// #0
   9b5f4:	3901d264 	strb	w4, [x19, #116]
   9b5f8:	f9401463 	ldr	x3, [x3, #40]
   9b5fc:	d63f0060 	blr	x3
   9b600:	2a0003e1 	mov	w1, w0
   9b604:	52800000 	mov	w0, #0x0                   	// #0
   9b608:	72001c3f 	tst	w1, #0xff
   9b60c:	540005a0 	b.eq	9b6c0 <CUSBSerialHostDevice::Read(void*, unsigned long) [clone .part.0]+0x1d0>  // b.none
   9b610:	a94153f3 	ldp	x19, x20, [sp, #16]
   9b614:	f94013f5 	ldr	x21, [sp, #32]
   9b618:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9b61c:	d65f03c0 	ret
   9b620:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b624:	b00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9b628:	f90013f5 	str	x21, [sp, #32]
   9b62c:	91224021 	add	x1, x1, #0x890
   9b630:	91236000 	add	x0, x0, #0x8d8
   9b634:	52801562 	mov	w2, #0xab                  	// #171
   9b638:	940009c2 	bl	9dd40 <assertion_failed>
   9b63c:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b640:	b00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9b644:	f90013f5 	str	x21, [sp, #32]
   9b648:	91224021 	add	x1, x1, #0x890
   9b64c:	9123c000 	add	x0, x0, #0x8f0
   9b650:	52801582 	mov	w2, #0xac                  	// #172
   9b654:	940009bb 	bl	9dd40 <assertion_failed>
   9b658:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b65c:	b00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9b660:	f90013f5 	str	x21, [sp, #32]
   9b664:	91224021 	add	x1, x1, #0x890
   9b668:	91242000 	add	x0, x0, #0x908
   9b66c:	528015a2 	mov	w2, #0xad                  	// #173
   9b670:	940009b4 	bl	9dd40 <assertion_failed>
   9b674:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b678:	b00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9b67c:	f90013f5 	str	x21, [sp, #32]
   9b680:	91224021 	add	x1, x1, #0x890
   9b684:	9124c000 	add	x0, x0, #0x930
   9b688:	528015c2 	mov	w2, #0xae                  	// #174
   9b68c:	940009ad 	bl	9dd40 <assertion_failed>
   9b690:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b694:	d00000a0 	adrp	x0, b1000 <_etext+0x158>
   9b698:	91224021 	add	x1, x1, #0x890
   9b69c:	910cc000 	add	x0, x0, #0x330
   9b6a0:	52801662 	mov	w2, #0xb3                  	// #179
   9b6a4:	940009a7 	bl	9dd40 <assertion_failed>
   9b6a8:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b6ac:	f00000a0 	adrp	x0, b2000 <_etext+0x1158>
   9b6b0:	91224021 	add	x1, x1, #0x890
   9b6b4:	913cc000 	add	x0, x0, #0xf30
   9b6b8:	528016a2 	mov	w2, #0xb5                  	// #181
   9b6bc:	940009a1 	bl	9dd40 <assertion_failed>
   9b6c0:	940010d4 	bl	9fa10 <CLogger::Get()>
   9b6c4:	b00000c3 	adrp	x3, b4000 <_etext+0x3158>
   9b6c8:	900000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9b6cc:	91256063 	add	x3, x3, #0x958
   9b6d0:	91294021 	add	x1, x1, #0xa50
   9b6d4:	52800042 	mov	w2, #0x2                   	// #2
   9b6d8:	940012ba 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9b6dc:	aa1503e0 	mov	x0, x21
   9b6e0:	3901d27f 	strb	wzr, [x19, #116]
   9b6e4:	97ff990f 	bl	81b20 <CUSBRequest::~CUSBRequest()>
   9b6e8:	aa1503e0 	mov	x0, x21
   9b6ec:	d2801201 	mov	x1, #0x90                  	// #144
   9b6f0:	97ff99ec 	bl	81ea0 <CUSBRequest::operator delete(void*, unsigned long)>
   9b6f4:	12800000 	mov	w0, #0xffffffff            	// #-1
   9b6f8:	f94013f5 	ldr	x21, [sp, #32]
   9b6fc:	17ffff99 	b	9b560 <CUSBSerialHostDevice::Read(void*, unsigned long) [clone .part.0]+0x70>

000000000009b700 <CUSBSerialHostDevice::Read(void*, unsigned long)>:
   9b700:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9b704:	910003fd 	mov	x29, sp
   9b708:	b4000101 	cbz	x1, 9b728 <CUSBSerialHostDevice::Read(void*, unsigned long)+0x28>
   9b70c:	b40001a2 	cbz	x2, 9b740 <CUSBSerialHostDevice::Read(void*, unsigned long)+0x40>
   9b710:	d5033fbf 	dmb	sy
   9b714:	3941d003 	ldrb	w3, [x0, #116]
   9b718:	72001c7f 	tst	w3, #0xff
   9b71c:	540001e1 	b.ne	9b758 <CUSBSerialHostDevice::Read(void*, unsigned long)+0x58>  // b.any
   9b720:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9b724:	17ffff73 	b	9b4f0 <CUSBSerialHostDevice::Read(void*, unsigned long) [clone .part.0]>
   9b728:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b72c:	d00000a0 	adrp	x0, b1000 <_etext+0x158>
   9b730:	91224021 	add	x1, x1, #0x890
   9b734:	911f6000 	add	x0, x0, #0x7d8
   9b738:	52801422 	mov	w2, #0xa1                  	// #161
   9b73c:	94000981 	bl	9dd40 <assertion_failed>
   9b740:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b744:	900000c0 	adrp	x0, b3000 <_etext+0x2158>
   9b748:	91224021 	add	x1, x1, #0x890
   9b74c:	9101a000 	add	x0, x0, #0x68
   9b750:	52801442 	mov	w2, #0xa2                  	// #162
   9b754:	9400097b 	bl	9dd40 <assertion_failed>
   9b758:	52800000 	mov	w0, #0x0                   	// #0
   9b75c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9b760:	d65f03c0 	ret
   9b764:	d503201f 	nop
   9b768:	d503201f 	nop
   9b76c:	d503201f 	nop

000000000009b770 <CUSBSerialHostDevice::SetLinePropertiesHandler(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits, void*)>:
   9b770:	b4000203 	cbz	x3, 9b7b0 <CUSBSerialHostDevice::SetLinePropertiesHandler(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits, void*)+0x40>
   9b774:	aa0303e4 	mov	x4, x3
   9b778:	f9400063 	ldr	x3, [x3]
   9b77c:	90000005 	adrp	x5, 9b000 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2b0>
   9b780:	910a40a5 	add	x5, x5, #0x290
   9b784:	f9403466 	ldr	x6, [x3, #104]
   9b788:	eb0500df 	cmp	x6, x5
   9b78c:	54000061 	b.ne	9b798 <CUSBSerialHostDevice::SetLinePropertiesHandler(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits, void*)+0x28>  // b.any
   9b790:	52800020 	mov	w0, #0x1                   	// #1
   9b794:	d65f03c0 	ret
   9b798:	2a0203e3 	mov	w3, w2
   9b79c:	aa0603f0 	mov	x16, x6
   9b7a0:	2a0103e2 	mov	w2, w1
   9b7a4:	2a0003e1 	mov	w1, w0
   9b7a8:	aa0403e0 	mov	x0, x4
   9b7ac:	d61f0200 	br	x16
   9b7b0:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b7b4:	d00000a0 	adrp	x0, b1000 <_etext+0x158>
   9b7b8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9b7bc:	91224021 	add	x1, x1, #0x890
   9b7c0:	910003fd 	mov	x29, sp
   9b7c4:	910b6000 	add	x0, x0, #0x2d8
   9b7c8:	52802582 	mov	w2, #0x12c                 	// #300
   9b7cc:	9400095d 	bl	9dd40 <assertion_failed>

000000000009b7d0 <CUSBSerialHostDevice::SetBaudRateHandler(unsigned int, void*)>:
   9b7d0:	b40001c1 	cbz	x1, 9b808 <CUSBSerialHostDevice::SetBaudRateHandler(unsigned int, void*)+0x38>
   9b7d4:	aa0103e2 	mov	x2, x1
   9b7d8:	f9400021 	ldr	x1, [x1]
   9b7dc:	90000003 	adrp	x3, 9b000 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2b0>
   9b7e0:	910a0063 	add	x3, x3, #0x280
   9b7e4:	f9403024 	ldr	x4, [x1, #96]
   9b7e8:	eb03009f 	cmp	x4, x3
   9b7ec:	54000061 	b.ne	9b7f8 <CUSBSerialHostDevice::SetBaudRateHandler(unsigned int, void*)+0x28>  // b.any
   9b7f0:	52800020 	mov	w0, #0x1                   	// #1
   9b7f4:	d65f03c0 	ret
   9b7f8:	2a0003e1 	mov	w1, w0
   9b7fc:	aa0403f0 	mov	x16, x4
   9b800:	aa0203e0 	mov	x0, x2
   9b804:	d61f0200 	br	x16
   9b808:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b80c:	d00000a0 	adrp	x0, b1000 <_etext+0x158>
   9b810:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9b814:	91224021 	add	x1, x1, #0x890
   9b818:	910003fd 	mov	x29, sp
   9b81c:	910b6000 	add	x0, x0, #0x2d8
   9b820:	52802422 	mov	w2, #0x121                 	// #289
   9b824:	94000947 	bl	9dd40 <assertion_failed>
   9b828:	d503201f 	nop
   9b82c:	d503201f 	nop

000000000009b830 <CUSBSerialHostDevice::ReadHandler(void*, unsigned long, void*)>:
   9b830:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9b834:	910003fd 	mov	x29, sp
   9b838:	aa0203e3 	mov	x3, x2
   9b83c:	b4000342 	cbz	x2, 9b8a4 <CUSBSerialHostDevice::ReadHandler(void*, unsigned long, void*)+0x74>
   9b840:	aa0103e2 	mov	x2, x1
   9b844:	90000001 	adrp	x1, 9b000 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2b0>
   9b848:	911c0021 	add	x1, x1, #0x700
   9b84c:	f9400064 	ldr	x4, [x3]
   9b850:	f9400884 	ldr	x4, [x4, #16]
   9b854:	eb01009f 	cmp	x4, x1
   9b858:	540001c1 	b.ne	9b890 <CUSBSerialHostDevice::ReadHandler(void*, unsigned long, void*)+0x60>  // b.any
   9b85c:	b4000300 	cbz	x0, 9b8bc <CUSBSerialHostDevice::ReadHandler(void*, unsigned long, void*)+0x8c>
   9b860:	b40003a2 	cbz	x2, 9b8d4 <CUSBSerialHostDevice::ReadHandler(void*, unsigned long, void*)+0xa4>
   9b864:	d5033fbf 	dmb	sy
   9b868:	3941d061 	ldrb	w1, [x3, #116]
   9b86c:	72001c3f 	tst	w1, #0xff
   9b870:	540000a1 	b.ne	9b884 <CUSBSerialHostDevice::ReadHandler(void*, unsigned long, void*)+0x54>  // b.any
   9b874:	aa0003e1 	mov	x1, x0
   9b878:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9b87c:	aa0303e0 	mov	x0, x3
   9b880:	17ffff1c 	b	9b4f0 <CUSBSerialHostDevice::Read(void*, unsigned long) [clone .part.0]>
   9b884:	52800000 	mov	w0, #0x0                   	// #0
   9b888:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9b88c:	d65f03c0 	ret
   9b890:	aa0003e1 	mov	x1, x0
   9b894:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9b898:	aa0303e0 	mov	x0, x3
   9b89c:	aa0403f0 	mov	x16, x4
   9b8a0:	d61f0200 	br	x16
   9b8a4:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b8a8:	d00000a0 	adrp	x0, b1000 <_etext+0x158>
   9b8ac:	91224021 	add	x1, x1, #0x890
   9b8b0:	910b6000 	add	x0, x0, #0x2d8
   9b8b4:	52802322 	mov	w2, #0x119                 	// #281
   9b8b8:	94000922 	bl	9dd40 <assertion_failed>
   9b8bc:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b8c0:	d00000a0 	adrp	x0, b1000 <_etext+0x158>
   9b8c4:	91224021 	add	x1, x1, #0x890
   9b8c8:	911f6000 	add	x0, x0, #0x7d8
   9b8cc:	52801422 	mov	w2, #0xa1                  	// #161
   9b8d0:	9400091c 	bl	9dd40 <assertion_failed>
   9b8d4:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9b8d8:	900000c0 	adrp	x0, b3000 <_etext+0x2158>
   9b8dc:	91224021 	add	x1, x1, #0x890
   9b8e0:	9101a000 	add	x0, x0, #0x68
   9b8e4:	52801442 	mov	w2, #0xa2                  	// #162
   9b8e8:	94000916 	bl	9dd40 <assertion_failed>
   9b8ec:	d503201f 	nop

000000000009b8f0 <CUSBSerialHostDevice::CUSBSerialHostDevice(CUSBFunction*, unsigned long)>:
   9b8f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9b8f4:	910003fd 	mov	x29, sp
   9b8f8:	a90153f3 	stp	x19, x20, [sp, #16]
   9b8fc:	aa0003f3 	mov	x19, x0
   9b900:	aa0203f4 	mov	x20, x2
   9b904:	97ffbb6f 	bl	8a6c0 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   9b908:	d284b002 	mov	x2, #0x2580                	// #9600
   9b90c:	d2c00021 	mov	x1, #0x100000000           	// #4294967296
   9b910:	a903d27f 	stp	xzr, x20, [x19, #56]
   9b914:	f2c00102 	movk	x2, #0x8, lsl #32
   9b918:	900000e0 	adrp	x0, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9b91c:	91278000 	add	x0, x0, #0x9e0
   9b920:	a9028662 	stp	x2, x1, [x19, #40]
   9b924:	f9000260 	str	x0, [x19]
   9b928:	a904fe7f 	stp	xzr, xzr, [x19, #72]
   9b92c:	a905fe7f 	stp	xzr, xzr, [x19, #88]
   9b930:	f900367f 	str	xzr, [x19, #104]
   9b934:	b900727f 	str	wzr, [x19, #112]
   9b938:	3901d27f 	strb	wzr, [x19, #116]
   9b93c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9b940:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9b944:	d65f03c0 	ret
   9b948:	d503201f 	nop
   9b94c:	d503201f 	nop

000000000009b950 <CUSBSerialHostDevice::CompletionRoutine(CUSBRequest*)>:
   9b950:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9b954:	910003fd 	mov	x29, sp
   9b958:	a90153f3 	stp	x19, x20, [sp, #16]
   9b95c:	b4000581 	cbz	x1, 9ba0c <CUSBSerialHostDevice::CompletionRoutine(CUSBRequest*)+0xbc>
   9b960:	aa0003f3 	mov	x19, x0
   9b964:	3941d000 	ldrb	w0, [x0, #116]
   9b968:	72001c1f 	tst	w0, #0xff
   9b96c:	540005c0 	b.eq	9ba24 <CUSBSerialHostDevice::CompletionRoutine(CUSBRequest*)+0xd4>  // b.none
   9b970:	b9407260 	ldr	w0, [x19, #112]
   9b974:	aa0103f4 	mov	x20, x1
   9b978:	f9403661 	ldr	x1, [x19, #104]
   9b97c:	eb00003f 	cmp	x1, x0
   9b980:	540005e1 	b.ne	9ba3c <CUSBSerialHostDevice::CompletionRoutine(CUSBRequest*)+0xec>  // b.any
   9b984:	aa1403e0 	mov	x0, x20
   9b988:	97ff9882 	bl	81b90 <CUSBRequest::GetStatus() const>
   9b98c:	35000160 	cbnz	w0, 9b9b8 <CUSBSerialHostDevice::CompletionRoutine(CUSBRequest*)+0x68>
   9b990:	aa1403e0 	mov	x0, x20
   9b994:	97ff9863 	bl	81b20 <CUSBRequest::~CUSBRequest()>
   9b998:	aa1403e0 	mov	x0, x20
   9b99c:	d2801201 	mov	x1, #0x90                  	// #144
   9b9a0:	97ff9940 	bl	81ea0 <CUSBRequest::operator delete(void*, unsigned long)>
   9b9a4:	3901d27f 	strb	wzr, [x19, #116]
   9b9a8:	d5033f9f 	dsb	sy
   9b9ac:	a94153f3 	ldp	x19, x20, [sp, #16]
   9b9b0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9b9b4:	d65f03c0 	ret
   9b9b8:	aa1403e0 	mov	x0, x20
   9b9bc:	97ff9879 	bl	81ba0 <CUSBRequest::GetResultLength() const>
   9b9c0:	f9402261 	ldr	x1, [x19, #64]
   9b9c4:	2a0003e0 	mov	w0, w0
   9b9c8:	f9003660 	str	x0, [x19, #104]
   9b9cc:	b9007261 	str	w1, [x19, #112]
   9b9d0:	b4000180 	cbz	x0, 9ba00 <CUSBSerialHostDevice::CompletionRoutine(CUSBRequest*)+0xb0>
   9b9d4:	92407c21 	and	x1, x1, #0xffffffff
   9b9d8:	eb01001f 	cmp	x0, x1
   9b9dc:	54000120 	b.eq	9ba00 <CUSBSerialHostDevice::CompletionRoutine(CUSBRequest*)+0xb0>  // b.none
   9b9e0:	54fffd82 	b.cs	9b990 <CUSBSerialHostDevice::CompletionRoutine(CUSBRequest*)+0x40>  // b.hs, b.nlast
   9b9e4:	9400100b 	bl	9fa10 <CLogger::Get()>
   9b9e8:	b00000c3 	adrp	x3, b4000 <_etext+0x3158>
   9b9ec:	900000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9b9f0:	9126a063 	add	x3, x3, #0x9a8
   9b9f4:	91294021 	add	x1, x1, #0xa50
   9b9f8:	52800042 	mov	w2, #0x2                   	// #2
   9b9fc:	940011f1 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9ba00:	f900367f 	str	xzr, [x19, #104]
   9ba04:	b900727f 	str	wzr, [x19, #112]
   9ba08:	17ffffe2 	b	9b990 <CUSBSerialHostDevice::CompletionRoutine(CUSBRequest*)+0x40>
   9ba0c:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9ba10:	d00000a0 	adrp	x0, b1000 <_etext+0x158>
   9ba14:	91224021 	add	x1, x1, #0x890
   9ba18:	910aa000 	add	x0, x0, #0x2a8
   9ba1c:	52801d02 	mov	w2, #0xe8                  	// #232
   9ba20:	940008c8 	bl	9dd40 <assertion_failed>
   9ba24:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9ba28:	b00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9ba2c:	91224021 	add	x1, x1, #0x890
   9ba30:	9125a000 	add	x0, x0, #0x968
   9ba34:	52801d22 	mov	w2, #0xe9                  	// #233
   9ba38:	940008c2 	bl	9dd40 <assertion_failed>
   9ba3c:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9ba40:	b00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9ba44:	91224021 	add	x1, x1, #0x890
   9ba48:	91260000 	add	x0, x0, #0x980
   9ba4c:	52801d42 	mov	w2, #0xea                  	// #234
   9ba50:	940008bc 	bl	9dd40 <assertion_failed>
   9ba54:	d503201f 	nop
   9ba58:	d503201f 	nop
   9ba5c:	d503201f 	nop

000000000009ba60 <CUSBSerialHostDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   9ba60:	b4000082 	cbz	x2, 9ba70 <CUSBSerialHostDevice::CompletionStub(CUSBRequest*, void*, void*)+0x10>
   9ba64:	aa0003e1 	mov	x1, x0
   9ba68:	aa0203e0 	mov	x0, x2
   9ba6c:	17ffffb9 	b	9b950 <CUSBSerialHostDevice::CompletionRoutine(CUSBRequest*)>
   9ba70:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9ba74:	d00000a0 	adrp	x0, b1000 <_etext+0x158>
   9ba78:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9ba7c:	91224021 	add	x1, x1, #0x890
   9ba80:	910003fd 	mov	x29, sp
   9ba84:	910b6000 	add	x0, x0, #0x2d8
   9ba88:	52802122 	mov	w2, #0x109                 	// #265
   9ba8c:	940008ad 	bl	9dd40 <assertion_failed>

000000000009ba90 <CUSBSerialHostDevice::Configure()>:
   9ba90:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9ba94:	910003fd 	mov	x29, sp
   9ba98:	a90153f3 	stp	x19, x20, [sp, #16]
   9ba9c:	aa0003f4 	mov	x20, x0
   9baa0:	f90013f5 	str	x21, [sp, #32]
   9baa4:	14000005 	b	9bab8 <CUSBSerialHostDevice::Configure()+0x28>
   9baa8:	39400e61 	ldrb	w1, [x19, #3]
   9baac:	12001421 	and	w1, w1, #0x3f
   9bab0:	7100083f 	cmp	w1, #0x2
   9bab4:	54000680 	b.eq	9bb84 <CUSBSerialHostDevice::Configure()+0xf4>  // b.none
   9bab8:	528000a1 	mov	w1, #0x5                   	// #5
   9babc:	aa1403e0 	mov	x0, x20
   9bac0:	97ffbb88 	bl	8a8e0 <CUSBFunction::GetDescriptor(unsigned char)>
   9bac4:	aa0003f3 	mov	x19, x0
   9bac8:	b5ffff00 	cbnz	x0, 9baa8 <CUSBSerialHostDevice::Configure()+0x18>
   9bacc:	f9402680 	ldr	x0, [x20, #72]
   9bad0:	b4000780 	cbz	x0, 9bbc0 <CUSBSerialHostDevice::Configure()+0x130>
   9bad4:	f9402a81 	ldr	x1, [x20, #80]
   9bad8:	b4000741 	cbz	x1, 9bbc0 <CUSBSerialHostDevice::Configure()+0x130>
   9badc:	97ffba39 	bl	8a3c0 <CUSBEndpoint::GetMaxPacketSize() const>
   9bae0:	2a0003e0 	mov	w0, w0
   9bae4:	f9003280 	str	x0, [x20, #96]
   9bae8:	940031e6 	bl	a8280 <operator new[](unsigned long)>
   9baec:	aa0003e1 	mov	x1, x0
   9baf0:	aa1403e0 	mov	x0, x20
   9baf4:	f9002e81 	str	x1, [x20, #88]
   9baf8:	97ffba86 	bl	8a510 <CUSBFunction::Configure()>
   9bafc:	72001c13 	ands	w19, w0, #0xff
   9bb00:	540008e0 	b.eq	9bc1c <CUSBSerialHostDevice::Configure()+0x18c>  // b.none
   9bb04:	f9401e80 	ldr	x0, [x20, #56]
   9bb08:	b5000a20 	cbnz	x0, 9bc4c <CUSBSerialHostDevice::Configure()+0x1bc>
   9bb0c:	d2800b00 	mov	x0, #0x58                  	// #88
   9bb10:	940031d4 	bl	a8260 <operator new(unsigned long)>
   9bb14:	aa0003f5 	mov	x21, x0
   9bb18:	940000d2 	bl	9be60 <CUSBSerialDevice::CUSBSerialDevice()>
   9bb1c:	90000001 	adrp	x1, 9b000 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2b0>
   9bb20:	aa1503e0 	mov	x0, x21
   9bb24:	f9001e95 	str	x21, [x20, #56]
   9bb28:	aa1403e2 	mov	x2, x20
   9bb2c:	91128021 	add	x1, x1, #0x4a0
   9bb30:	94000108 	bl	9bf50 <CUSBSerialDevice::RegisterWriteHandler(int (*)(void const*, unsigned long, void*), void*)>
   9bb34:	90000001 	adrp	x1, 9b000 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2b0>
   9bb38:	aa1403e2 	mov	x2, x20
   9bb3c:	f9401e80 	ldr	x0, [x20, #56]
   9bb40:	9120c021 	add	x1, x1, #0x830
   9bb44:	9400011b 	bl	9bfb0 <CUSBSerialDevice::RegisterReadHandler(int (*)(void*, unsigned long, void*), void*)>
   9bb48:	90000001 	adrp	x1, 9b000 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2b0>
   9bb4c:	aa1403e2 	mov	x2, x20
   9bb50:	f9401e80 	ldr	x0, [x20, #56]
   9bb54:	911f4021 	add	x1, x1, #0x7d0
   9bb58:	9400012e 	bl	9c010 <CUSBSerialDevice::RegisterSetBaudRateHandler(bool (*)(unsigned int, void*), void*)>
   9bb5c:	90000001 	adrp	x1, 9b000 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2b0>
   9bb60:	f9401e80 	ldr	x0, [x20, #56]
   9bb64:	aa1403e2 	mov	x2, x20
   9bb68:	911dc021 	add	x1, x1, #0x770
   9bb6c:	94000141 	bl	9c070 <CUSBSerialDevice::RegisterSetLinePropertiesHandler(bool (*)(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits, void*), void*)>
   9bb70:	2a1303e0 	mov	w0, w19
   9bb74:	a94153f3 	ldp	x19, x20, [sp, #16]
   9bb78:	f94013f5 	ldr	x21, [sp, #32]
   9bb7c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9bb80:	d65f03c0 	ret
   9bb84:	39c00a60 	ldrsb	w0, [x19, #2]
   9bb88:	37f80300 	tbnz	w0, #31, 9bbe8 <CUSBSerialHostDevice::Configure()+0x158>
   9bb8c:	f9402a80 	ldr	x0, [x20, #80]
   9bb90:	b5000180 	cbnz	x0, 9bbc0 <CUSBSerialHostDevice::Configure()+0x130>
   9bb94:	aa1403e0 	mov	x0, x20
   9bb98:	97ffbb2e 	bl	8a850 <CUSBFunction::GetDevice() const>
   9bb9c:	aa0003f5 	mov	x21, x0
   9bba0:	d2800400 	mov	x0, #0x20                  	// #32
   9bba4:	940031af 	bl	a8260 <operator new(unsigned long)>
   9bba8:	aa1503e1 	mov	x1, x21
   9bbac:	aa0003f5 	mov	x21, x0
   9bbb0:	aa1303e2 	mov	x2, x19
   9bbb4:	97ffb95f 	bl	8a130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   9bbb8:	f9002a95 	str	x21, [x20, #80]
   9bbbc:	17ffffbf 	b	9bab8 <CUSBSerialHostDevice::Configure()+0x28>
   9bbc0:	aa1403e0 	mov	x0, x20
   9bbc4:	900000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9bbc8:	91294021 	add	x1, x1, #0xa50
   9bbcc:	52800013 	mov	w19, #0x0                   	// #0
   9bbd0:	97ffbb50 	bl	8a910 <CUSBFunction::ConfigurationError(char const*) const>
   9bbd4:	2a1303e0 	mov	w0, w19
   9bbd8:	a94153f3 	ldp	x19, x20, [sp, #16]
   9bbdc:	f94013f5 	ldr	x21, [sp, #32]
   9bbe0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9bbe4:	d65f03c0 	ret
   9bbe8:	f9402680 	ldr	x0, [x20, #72]
   9bbec:	b5fffea0 	cbnz	x0, 9bbc0 <CUSBSerialHostDevice::Configure()+0x130>
   9bbf0:	aa1403e0 	mov	x0, x20
   9bbf4:	97ffbb17 	bl	8a850 <CUSBFunction::GetDevice() const>
   9bbf8:	aa0003f5 	mov	x21, x0
   9bbfc:	d2800400 	mov	x0, #0x20                  	// #32
   9bc00:	94003198 	bl	a8260 <operator new(unsigned long)>
   9bc04:	aa1503e1 	mov	x1, x21
   9bc08:	aa0003f5 	mov	x21, x0
   9bc0c:	aa1303e2 	mov	x2, x19
   9bc10:	97ffb948 	bl	8a130 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   9bc14:	f9002695 	str	x21, [x20, #72]
   9bc18:	17ffffa8 	b	9bab8 <CUSBSerialHostDevice::Configure()+0x28>
   9bc1c:	94000f7d 	bl	9fa10 <CLogger::Get()>
   9bc20:	d00000a3 	adrp	x3, b1000 <_etext+0x158>
   9bc24:	900000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9bc28:	9112c063 	add	x3, x3, #0x4b0
   9bc2c:	91294021 	add	x1, x1, #0xa50
   9bc30:	52800022 	mov	w2, #0x1                   	// #1
   9bc34:	94001163 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9bc38:	2a1303e0 	mov	w0, w19
   9bc3c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9bc40:	f94013f5 	ldr	x21, [sp, #32]
   9bc44:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9bc48:	d65f03c0 	ret
   9bc4c:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9bc50:	f00000a0 	adrp	x0, b2000 <_etext+0x1158>
   9bc54:	91224021 	add	x1, x1, #0x890
   9bc58:	913fe000 	add	x0, x0, #0xff8
   9bc5c:	52800e82 	mov	w2, #0x74                  	// #116
   9bc60:	94000838 	bl	9dd40 <assertion_failed>
	...

000000000009bc70 <CUSBSerialDevice::~CUSBSerialDevice()>:
   9bc70:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9bc74:	900000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9bc78:	9129c021 	add	x1, x1, #0xa70
   9bc7c:	910003fd 	mov	x29, sp
   9bc80:	f9000bf3 	str	x19, [sp, #16]
   9bc84:	aa0003f3 	mov	x19, x0
   9bc88:	f9000001 	str	x1, [x0]
   9bc8c:	94000c11 	bl	9ecd0 <CDeviceNameService::Get()>
   9bc90:	b9405662 	ldr	w2, [x19, #84]
   9bc94:	900000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9bc98:	52800003 	mov	w3, #0x0                   	// #0
   9bc9c:	912ac021 	add	x1, x1, #0xab0
   9bca0:	94000c38 	bl	9ed80 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   9bca4:	b9405661 	ldr	w1, [x19, #84]
   9bca8:	d0000100 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   9bcac:	91046000 	add	x0, x0, #0x118
   9bcb0:	94003348 	bl	a89d0 <CNumberPool::FreeNumber(unsigned int)>
   9bcb4:	aa1303e0 	mov	x0, x19
   9bcb8:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   9bcbc:	a9027e7f 	stp	xzr, xzr, [x19, #32]
   9bcc0:	f9400bf3 	ldr	x19, [sp, #16]
   9bcc4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9bcc8:	14000a6e 	b	9e680 <CDevice::~CDevice()>
   9bccc:	d503201f 	nop

000000000009bcd0 <CUSBSerialDevice::Write(void const*, unsigned long)>:
   9bcd0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9bcd4:	910003fd 	mov	x29, sp
   9bcd8:	f9400807 	ldr	x7, [x0, #16]
   9bcdc:	b4000507 	cbz	x7, 9bd7c <CUSBSerialDevice::Write(void const*, unsigned long)+0xac>
   9bce0:	aa0003e5 	mov	x5, x0
   9bce4:	b9405000 	ldr	w0, [x0, #80]
   9bce8:	aa0103e3 	mov	x3, x1
   9bcec:	aa0203e1 	mov	x1, x2
   9bcf0:	360003a0 	tbz	w0, #0, 9bd64 <CUSBSerialDevice::Write(void const*, unsigned long)+0x94>
   9bcf4:	b4000503 	cbz	x3, 9bd94 <CUSBSerialDevice::Write(void const*, unsigned long)+0xc4>
   9bcf8:	d37ff840 	lsl	x0, x2, #1
   9bcfc:	91003c00 	add	x0, x0, #0xf
   9bd00:	927cec00 	and	x0, x0, #0xfffffffffffffff0
   9bd04:	cb2063ff 	sub	sp, sp, x0
   9bd08:	910003e0 	mov	x0, sp
   9bd0c:	b4000222 	cbz	x2, 9bd50 <CUSBSerialDevice::Write(void const*, unsigned long)+0x80>
   9bd10:	8b020066 	add	x6, x3, x2
   9bd14:	528001a8 	mov	w8, #0xd                   	// #13
   9bd18:	910003e2 	mov	x2, sp
   9bd1c:	d503201f 	nop
   9bd20:	39c00061 	ldrsb	w1, [x3]
   9bd24:	aa0203e4 	mov	x4, x2
   9bd28:	7100283f 	cmp	w1, #0xa
   9bd2c:	54000061 	b.ne	9bd38 <CUSBSerialDevice::Write(void const*, unsigned long)+0x68>  // b.any
   9bd30:	91000444 	add	x4, x2, #0x1
   9bd34:	39000048 	strb	w8, [x2]
   9bd38:	aa0403e2 	mov	x2, x4
   9bd3c:	91000463 	add	x3, x3, #0x1
   9bd40:	eb0300df 	cmp	x6, x3
   9bd44:	38001441 	strb	w1, [x2], #1
   9bd48:	54fffec1 	b.ne	9bd20 <CUSBSerialDevice::Write(void const*, unsigned long)+0x50>  // b.any
   9bd4c:	cb000041 	sub	x1, x2, x0
   9bd50:	f94018a2 	ldr	x2, [x5, #48]
   9bd54:	d63f00e0 	blr	x7
   9bd58:	910003bf 	mov	sp, x29
   9bd5c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9bd60:	d65f03c0 	ret
   9bd64:	aa0303e0 	mov	x0, x3
   9bd68:	f94018a2 	ldr	x2, [x5, #48]
   9bd6c:	d63f00e0 	blr	x7
   9bd70:	910003bf 	mov	sp, x29
   9bd74:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9bd78:	d65f03c0 	ret
   9bd7c:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9bd80:	b00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9bd84:	91270021 	add	x1, x1, #0x9c0
   9bd88:	91274000 	add	x0, x0, #0x9d0
   9bd8c:	528006a2 	mov	w2, #0x35                  	// #53
   9bd90:	940007ec 	bl	9dd40 <assertion_failed>
   9bd94:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9bd98:	b00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9bd9c:	91270021 	add	x1, x1, #0x9c0
   9bda0:	91278000 	add	x0, x0, #0x9e0
   9bda4:	528007a2 	mov	w2, #0x3d                  	// #61
   9bda8:	940007e6 	bl	9dd40 <assertion_failed>
   9bdac:	d503201f 	nop

000000000009bdb0 <CUSBSerialDevice::Read(void*, unsigned long)>:
   9bdb0:	f9400c04 	ldr	x4, [x0, #24]
   9bdb4:	b40000e4 	cbz	x4, 9bdd0 <CUSBSerialDevice::Read(void*, unsigned long)+0x20>
   9bdb8:	aa0003e3 	mov	x3, x0
   9bdbc:	aa0403f0 	mov	x16, x4
   9bdc0:	aa0103e0 	mov	x0, x1
   9bdc4:	aa0203e1 	mov	x1, x2
   9bdc8:	f9401c62 	ldr	x2, [x3, #56]
   9bdcc:	d61f0200 	br	x16
   9bdd0:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9bdd4:	b00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9bdd8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9bddc:	91270021 	add	x1, x1, #0x9c0
   9bde0:	910003fd 	mov	x29, sp
   9bde4:	9127a000 	add	x0, x0, #0x9e8
   9bde8:	52800a22 	mov	w2, #0x51                  	// #81
   9bdec:	940007d5 	bl	9dd40 <assertion_failed>

000000000009bdf0 <CUSBSerialDevice::~CUSBSerialDevice()>:
   9bdf0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9bdf4:	900000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9bdf8:	9129c021 	add	x1, x1, #0xa70
   9bdfc:	910003fd 	mov	x29, sp
   9be00:	f9000bf3 	str	x19, [sp, #16]
   9be04:	aa0003f3 	mov	x19, x0
   9be08:	f9000001 	str	x1, [x0]
   9be0c:	94000bb1 	bl	9ecd0 <CDeviceNameService::Get()>
   9be10:	900000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9be14:	b9405662 	ldr	w2, [x19, #84]
   9be18:	52800003 	mov	w3, #0x0                   	// #0
   9be1c:	912ac021 	add	x1, x1, #0xab0
   9be20:	94000bd8 	bl	9ed80 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   9be24:	b9405661 	ldr	w1, [x19, #84]
   9be28:	d0000100 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   9be2c:	91046000 	add	x0, x0, #0x118
   9be30:	940032e8 	bl	a89d0 <CNumberPool::FreeNumber(unsigned int)>
   9be34:	aa1303e0 	mov	x0, x19
   9be38:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   9be3c:	a9027e7f 	stp	xzr, xzr, [x19, #32]
   9be40:	94000a10 	bl	9e680 <CDevice::~CDevice()>
   9be44:	aa1303e0 	mov	x0, x19
   9be48:	d2800b01 	mov	x1, #0x58                  	// #88
   9be4c:	f9400bf3 	ldr	x19, [sp, #16]
   9be50:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9be54:	1400312b 	b	a8300 <operator delete(void*, unsigned long)>
   9be58:	d503201f 	nop
   9be5c:	d503201f 	nop

000000000009be60 <CUSBSerialDevice::CUSBSerialDevice()>:
   9be60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9be64:	910003fd 	mov	x29, sp
   9be68:	a90153f3 	stp	x19, x20, [sp, #16]
   9be6c:	aa0003f3 	mov	x19, x0
   9be70:	900000f4 	adrp	x20, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9be74:	912ac294 	add	x20, x20, #0xab0
   9be78:	94000a36 	bl	9e750 <CDevice::CDevice()>
   9be7c:	900000e1 	adrp	x1, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9be80:	9129c021 	add	x1, x1, #0xa70
   9be84:	a9017e7f 	stp	xzr, xzr, [x19, #16]
   9be88:	d0000100 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   9be8c:	91002282 	add	x2, x20, #0x8
   9be90:	91046000 	add	x0, x0, #0x118
   9be94:	f9000261 	str	x1, [x19]
   9be98:	52800021 	mov	w1, #0x1                   	// #1
   9be9c:	a9027e7f 	stp	xzr, xzr, [x19, #32]
   9bea0:	b900527f 	str	wzr, [x19, #80]
   9bea4:	9400329b 	bl	a8910 <CNumberPool::AllocateNumber(bool, char const*)>
   9bea8:	b9005660 	str	w0, [x19, #84]
   9beac:	94000b89 	bl	9ecd0 <CDeviceNameService::Get()>
   9beb0:	aa1303e3 	mov	x3, x19
   9beb4:	aa1403e1 	mov	x1, x20
   9beb8:	a94153f3 	ldp	x19, x20, [sp, #16]
   9bebc:	52800004 	mov	w4, #0x0                   	// #0
   9bec0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9bec4:	b9405462 	ldr	w2, [x3, #84]
   9bec8:	14000b8e 	b	9ed00 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   9becc:	d503201f 	nop

000000000009bed0 <CUSBSerialDevice::SetBaudRate(unsigned int)>:
   9bed0:	aa0003e2 	mov	x2, x0
   9bed4:	2a0103e0 	mov	w0, w1
   9bed8:	f9401043 	ldr	x3, [x2, #32]
   9bedc:	b4000083 	cbz	x3, 9beec <CUSBSerialDevice::SetBaudRate(unsigned int)+0x1c>
   9bee0:	aa0303f0 	mov	x16, x3
   9bee4:	f9402041 	ldr	x1, [x2, #64]
   9bee8:	d61f0200 	br	x16
   9beec:	52800020 	mov	w0, #0x1                   	// #1
   9bef0:	d65f03c0 	ret
   9bef4:	d503201f 	nop
   9bef8:	d503201f 	nop
   9befc:	d503201f 	nop

000000000009bf00 <CUSBSerialDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   9bf00:	aa0003e4 	mov	x4, x0
   9bf04:	2a0103e0 	mov	w0, w1
   9bf08:	f9401485 	ldr	x5, [x4, #40]
   9bf0c:	2a0203e1 	mov	w1, w2
   9bf10:	2a0303e2 	mov	w2, w3
   9bf14:	b4000085 	cbz	x5, 9bf24 <CUSBSerialDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x24>
   9bf18:	aa0503f0 	mov	x16, x5
   9bf1c:	f9402483 	ldr	x3, [x4, #72]
   9bf20:	d61f0200 	br	x16
   9bf24:	52800020 	mov	w0, #0x1                   	// #1
   9bf28:	d65f03c0 	ret
   9bf2c:	d503201f 	nop

000000000009bf30 <CUSBSerialDevice::GetOptions() const>:
   9bf30:	b9405000 	ldr	w0, [x0, #80]
   9bf34:	d65f03c0 	ret
   9bf38:	d503201f 	nop
   9bf3c:	d503201f 	nop

000000000009bf40 <CUSBSerialDevice::SetOptions(unsigned int)>:
   9bf40:	b9005001 	str	w1, [x0, #80]
   9bf44:	d65f03c0 	ret
   9bf48:	d503201f 	nop
   9bf4c:	d503201f 	nop

000000000009bf50 <CUSBSerialDevice::RegisterWriteHandler(int (*)(void const*, unsigned long, void*), void*)>:
   9bf50:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9bf54:	910003fd 	mov	x29, sp
   9bf58:	f9001802 	str	x2, [x0, #48]
   9bf5c:	f9400803 	ldr	x3, [x0, #16]
   9bf60:	b50000a3 	cbnz	x3, 9bf74 <CUSBSerialDevice::RegisterWriteHandler(int (*)(void const*, unsigned long, void*), void*)+0x24>
   9bf64:	f9000801 	str	x1, [x0, #16]
   9bf68:	b4000121 	cbz	x1, 9bf8c <CUSBSerialDevice::RegisterWriteHandler(int (*)(void const*, unsigned long, void*), void*)+0x3c>
   9bf6c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9bf70:	d65f03c0 	ret
   9bf74:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9bf78:	b00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9bf7c:	91270021 	add	x1, x1, #0x9c0
   9bf80:	9127e000 	add	x0, x0, #0x9f8
   9bf84:	52800f42 	mov	w2, #0x7a                  	// #122
   9bf88:	9400076e 	bl	9dd40 <assertion_failed>
   9bf8c:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9bf90:	b00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9bf94:	91270021 	add	x1, x1, #0x9c0
   9bf98:	91274000 	add	x0, x0, #0x9d0
   9bf9c:	52800f82 	mov	w2, #0x7c                  	// #124
   9bfa0:	94000768 	bl	9dd40 <assertion_failed>
   9bfa4:	d503201f 	nop
   9bfa8:	d503201f 	nop
   9bfac:	d503201f 	nop

000000000009bfb0 <CUSBSerialDevice::RegisterReadHandler(int (*)(void*, unsigned long, void*), void*)>:
   9bfb0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9bfb4:	910003fd 	mov	x29, sp
   9bfb8:	f9001c02 	str	x2, [x0, #56]
   9bfbc:	f9400c03 	ldr	x3, [x0, #24]
   9bfc0:	b50000a3 	cbnz	x3, 9bfd4 <CUSBSerialDevice::RegisterReadHandler(int (*)(void*, unsigned long, void*), void*)+0x24>
   9bfc4:	f9000c01 	str	x1, [x0, #24]
   9bfc8:	b4000121 	cbz	x1, 9bfec <CUSBSerialDevice::RegisterReadHandler(int (*)(void*, unsigned long, void*), void*)+0x3c>
   9bfcc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9bfd0:	d65f03c0 	ret
   9bfd4:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9bfd8:	b00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9bfdc:	91270021 	add	x1, x1, #0x9c0
   9bfe0:	91284000 	add	x0, x0, #0xa10
   9bfe4:	52801062 	mov	w2, #0x83                  	// #131
   9bfe8:	94000756 	bl	9dd40 <assertion_failed>
   9bfec:	b00000c1 	adrp	x1, b4000 <_etext+0x3158>
   9bff0:	b00000c0 	adrp	x0, b4000 <_etext+0x3158>
   9bff4:	91270021 	add	x1, x1, #0x9c0
   9bff8:	9127a000 	add	x0, x0, #0x9e8
   9bffc:	528010a2 	mov	w2, #0x85                  	// #133
   9c000:	94000750 	bl	9dd40 <assertion_failed>
   9c004:	d503201f 	nop
   9c008:	d503201f 	nop
   9c00c:	d503201f 	nop

000000000009c010 <CUSBSerialDevice::RegisterSetBaudRateHandler(bool (*)(unsigned int, void*), void*)>:
   9c010:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9c014:	910003fd 	mov	x29, sp
   9c018:	f9002002 	str	x2, [x0, #64]
   9c01c:	f9401003 	ldr	x3, [x0, #32]
   9c020:	b50000a3 	cbnz	x3, 9c034 <CUSBSerialDevice::RegisterSetBaudRateHandler(bool (*)(unsigned int, void*), void*)+0x24>
   9c024:	f9001001 	str	x1, [x0, #32]
   9c028:	b4000121 	cbz	x1, 9c04c <CUSBSerialDevice::RegisterSetBaudRateHandler(bool (*)(unsigned int, void*), void*)+0x3c>
   9c02c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9c030:	d65f03c0 	ret
   9c034:	900000c1 	adrp	x1, b4000 <_etext+0x3158>
   9c038:	900000c0 	adrp	x0, b4000 <_etext+0x3158>
   9c03c:	91270021 	add	x1, x1, #0x9c0
   9c040:	91288000 	add	x0, x0, #0xa20
   9c044:	52801182 	mov	w2, #0x8c                  	// #140
   9c048:	9400073e 	bl	9dd40 <assertion_failed>
   9c04c:	900000c1 	adrp	x1, b4000 <_etext+0x3158>
   9c050:	900000c0 	adrp	x0, b4000 <_etext+0x3158>
   9c054:	91270021 	add	x1, x1, #0x9c0
   9c058:	9128e000 	add	x0, x0, #0xa38
   9c05c:	528011c2 	mov	w2, #0x8e                  	// #142
   9c060:	94000738 	bl	9dd40 <assertion_failed>
   9c064:	d503201f 	nop
   9c068:	d503201f 	nop
   9c06c:	d503201f 	nop

000000000009c070 <CUSBSerialDevice::RegisterSetLinePropertiesHandler(bool (*)(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits, void*), void*)>:
   9c070:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9c074:	910003fd 	mov	x29, sp
   9c078:	f9002402 	str	x2, [x0, #72]
   9c07c:	f9401403 	ldr	x3, [x0, #40]
   9c080:	b50000a3 	cbnz	x3, 9c094 <CUSBSerialDevice::RegisterSetLinePropertiesHandler(bool (*)(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits, void*), void*)+0x24>
   9c084:	f9001401 	str	x1, [x0, #40]
   9c088:	b4000121 	cbz	x1, 9c0ac <CUSBSerialDevice::RegisterSetLinePropertiesHandler(bool (*)(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits, void*), void*)+0x3c>
   9c08c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9c090:	d65f03c0 	ret
   9c094:	900000c1 	adrp	x1, b4000 <_etext+0x3158>
   9c098:	900000c0 	adrp	x0, b4000 <_etext+0x3158>
   9c09c:	91270021 	add	x1, x1, #0x9c0
   9c0a0:	91294000 	add	x0, x0, #0xa50
   9c0a4:	528012c2 	mov	w2, #0x96                  	// #150
   9c0a8:	94000726 	bl	9dd40 <assertion_failed>
   9c0ac:	900000c1 	adrp	x1, b4000 <_etext+0x3158>
   9c0b0:	900000c0 	adrp	x0, b4000 <_etext+0x3158>
   9c0b4:	91270021 	add	x1, x1, #0x9c0
   9c0b8:	9129c000 	add	x0, x0, #0xa70
   9c0bc:	52801302 	mov	w2, #0x98                  	// #152
   9c0c0:	94000720 	bl	9dd40 <assertion_failed>
	...

000000000009c0d0 <_GLOBAL__sub_I__ZN16CUSBSerialDevice18s_DeviceNumberPoolE>:
   9c0d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9c0d4:	910003fd 	mov	x29, sp
   9c0d8:	528007e2 	mov	w2, #0x3f                  	// #63
   9c0dc:	52800021 	mov	w1, #0x1                   	// #1
   9c0e0:	f9000bf3 	str	x19, [sp, #16]
   9c0e4:	b0000113 	adrp	x19, bd000 <CNetDevice::s_SpeedString+0x18>
   9c0e8:	91046273 	add	x19, x19, #0x118
   9c0ec:	aa1303e0 	mov	x0, x19
   9c0f0:	940031ec 	bl	a88a0 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   9c0f4:	b0000102 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   9c0f8:	90000060 	adrp	x0, a8000 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x20>
   9c0fc:	aa1303e1 	mov	x1, x19
   9c100:	91074042 	add	x2, x2, #0x1d0
   9c104:	f9400bf3 	ldr	x19, [sp, #16]
   9c108:	91240000 	add	x0, x0, #0x900
   9c10c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9c110:	140027ac 	b	a5fc0 <__cxa_atexit>
	...

000000000009c120 <CKeyboardBehaviour::CKeyboardBehaviour()>:
   9c120:	aa0003e1 	mov	x1, x0
   9c124:	9100a000 	add	x0, x0, #0x28
   9c128:	a9007c3f 	stp	xzr, xzr, [x1]
   9c12c:	f900083f 	str	xzr, [x1, #16]
   9c130:	7900303f 	strh	wzr, [x1, #24]
   9c134:	f900103f 	str	xzr, [x1, #32]
   9c138:	140000ee 	b	9c4f0 <CKeyMap::CKeyMap()>
   9c13c:	d503201f 	nop

000000000009c140 <CKeyboardBehaviour::~CKeyboardBehaviour()>:
   9c140:	aa0003e1 	mov	x1, x0
   9c144:	9100a000 	add	x0, x0, #0x28
   9c148:	a9007c3f 	stp	xzr, xzr, [x1]
   9c14c:	f900083f 	str	xzr, [x1, #16]
   9c150:	14000124 	b	9c5e0 <CKeyMap::~CKeyMap()>
   9c154:	d503201f 	nop
   9c158:	d503201f 	nop
   9c15c:	d503201f 	nop

000000000009c160 <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>:
   9c160:	b4000061 	cbz	x1, 9c16c <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0xc>
   9c164:	f9000001 	str	x1, [x0]
   9c168:	d65f03c0 	ret
   9c16c:	900000c1 	adrp	x1, b4000 <_etext+0x3158>
   9c170:	900000c0 	adrp	x0, b4000 <_etext+0x3158>
   9c174:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9c178:	912a4021 	add	x1, x1, #0xa90
   9c17c:	910003fd 	mov	x29, sp
   9c180:	912aa000 	add	x0, x0, #0xaa8
   9c184:	528005e2 	mov	w2, #0x2f                  	// #47
   9c188:	940006ee 	bl	9dd40 <assertion_failed>
   9c18c:	d503201f 	nop

000000000009c190 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   9c190:	b4000061 	cbz	x1, 9c19c <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0xc>
   9c194:	f9000401 	str	x1, [x0, #8]
   9c198:	d65f03c0 	ret
   9c19c:	900000c1 	adrp	x1, b4000 <_etext+0x3158>
   9c1a0:	900000c0 	adrp	x0, b4000 <_etext+0x3158>
   9c1a4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9c1a8:	912a4021 	add	x1, x1, #0xa90
   9c1ac:	910003fd 	mov	x29, sp
   9c1b0:	912b0000 	add	x0, x0, #0xac0
   9c1b4:	528006a2 	mov	w2, #0x35                  	// #53
   9c1b8:	940006e2 	bl	9dd40 <assertion_failed>
   9c1bc:	d503201f 	nop

000000000009c1c0 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>:
   9c1c0:	b4000061 	cbz	x1, 9c1cc <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0xc>
   9c1c4:	f9000801 	str	x1, [x0, #16]
   9c1c8:	d65f03c0 	ret
   9c1cc:	900000c1 	adrp	x1, b4000 <_etext+0x3158>
   9c1d0:	900000c0 	adrp	x0, b4000 <_etext+0x3158>
   9c1d4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9c1d8:	912a4021 	add	x1, x1, #0xa90
   9c1dc:	910003fd 	mov	x29, sp
   9c1e0:	912b8000 	add	x0, x0, #0xae0
   9c1e4:	52800762 	mov	w2, #0x3b                  	// #59
   9c1e8:	940006d6 	bl	9dd40 <assertion_failed>
   9c1ec:	d503201f 	nop

000000000009c1f0 <CKeyboardBehaviour::GetLEDStatus() const>:
   9c1f0:	9100a000 	add	x0, x0, #0x28
   9c1f4:	140001b3 	b	9c8c0 <CKeyMap::GetLEDStatus() const>
   9c1f8:	d503201f 	nop
   9c1fc:	d503201f 	nop

000000000009c200 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>:
   9c200:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9c204:	910003fd 	mov	x29, sp
   9c208:	a90153f3 	stp	x19, x20, [sp, #16]
   9c20c:	9100a014 	add	x20, x0, #0x28
   9c210:	aa0003f3 	mov	x19, x0
   9c214:	f90013f5 	str	x21, [sp, #32]
   9c218:	39406015 	ldrb	w21, [x0, #24]
   9c21c:	aa1403e0 	mov	x0, x20
   9c220:	2a1503e2 	mov	w2, w21
   9c224:	9400011b 	bl	9c690 <CKeyMap::Translate(unsigned char, unsigned char)>
   9c228:	12003c02 	and	w2, w0, #0xffff
   9c22c:	7105245f 	cmp	w2, #0x149
   9c230:	54000168 	b.hi	9c25c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x5c>  // b.pmore
   9c234:	7104f45f 	cmp	w2, #0x13d
   9c238:	540003e8 	b.hi	9c2b4 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0xb4>  // b.pmore
   9c23c:	5104ec42 	sub	w2, w2, #0x13b
   9c240:	12003c42 	and	w2, w2, #0xffff
   9c244:	7100085f 	cmp	w2, #0x2
   9c248:	540001c8 	b.hi	9c280 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x80>  // b.pmore
   9c24c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9c250:	f94013f5 	ldr	x21, [sp, #32]
   9c254:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9c258:	d65f03c0 	ret
   9c25c:	7105285f 	cmp	w2, #0x14a
   9c260:	54000101 	b.ne	9c280 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x80>  // b.any
   9c264:	f9400a60 	ldr	x0, [x19, #16]
   9c268:	b4ffff20 	cbz	x0, 9c24c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x4c>
   9c26c:	aa0003f0 	mov	x16, x0
   9c270:	a94153f3 	ldp	x19, x20, [sp, #16]
   9c274:	f94013f5 	ldr	x21, [sp, #32]
   9c278:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9c27c:	d61f0200 	br	x16
   9c280:	2a0003e1 	mov	w1, w0
   9c284:	2a1503e2 	mov	w2, w21
   9c288:	aa1403e0 	mov	x0, x20
   9c28c:	9100e3e3 	add	x3, sp, #0x38
   9c290:	94000158 	bl	9c7f0 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>
   9c294:	b4fffdc0 	cbz	x0, 9c24c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x4c>
   9c298:	f9400261 	ldr	x1, [x19]
   9c29c:	b4fffd81 	cbz	x1, 9c24c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x4c>
   9c2a0:	d63f0020 	blr	x1
   9c2a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   9c2a8:	f94013f5 	ldr	x21, [sp, #32]
   9c2ac:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9c2b0:	d65f03c0 	ret
   9c2b4:	f9400661 	ldr	x1, [x19, #8]
   9c2b8:	b4fffca1 	cbz	x1, 9c24c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x4c>
   9c2bc:	5104f840 	sub	w0, w2, #0x13e
   9c2c0:	aa0103f0 	mov	x16, x1
   9c2c4:	a94153f3 	ldp	x19, x20, [sp, #16]
   9c2c8:	f94013f5 	ldr	x21, [sp, #32]
   9c2cc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9c2d0:	d61f0200 	br	x16
   9c2d4:	d503201f 	nop
   9c2d8:	d503201f 	nop
   9c2dc:	d503201f 	nop

000000000009c2e0 <CKeyboardBehaviour::TimerStub(unsigned long, void*, void*)>:
   9c2e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9c2e4:	910003fd 	mov	x29, sp
   9c2e8:	f9000bf3 	str	x19, [sp, #16]
   9c2ec:	b4000362 	cbz	x2, 9c358 <CKeyboardBehaviour::TimerStub(unsigned long, void*, void*)+0x78>
   9c2f0:	f9401041 	ldr	x1, [x2, #32]
   9c2f4:	aa0203f3 	mov	x19, x2
   9c2f8:	eb01001f 	cmp	x0, x1
   9c2fc:	540003a1 	b.ne	9c370 <CKeyboardBehaviour::TimerStub(unsigned long, void*, void*)+0x90>  // b.any
   9c300:	39406441 	ldrb	w1, [x2, #25]
   9c304:	35000081 	cbnz	w1, 9c314 <CKeyboardBehaviour::TimerStub(unsigned long, void*, void*)+0x34>
   9c308:	f9400bf3 	ldr	x19, [sp, #16]
   9c30c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9c310:	d65f03c0 	ret
   9c314:	aa0203e0 	mov	x0, x2
   9c318:	97ffffba 	bl	9c200 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   9c31c:	94002b75 	bl	a70f0 <CTimer::Get()>
   9c320:	90000002 	adrp	x2, 9c000 <CUSBSerialDevice::RegisterReadHandler(int (*)(void*, unsigned long, void*), void*)+0x50>
   9c324:	aa1303e4 	mov	x4, x19
   9c328:	910b8042 	add	x2, x2, #0x2e0
   9c32c:	d2800003 	mov	x3, #0x0                   	// #0
   9c330:	52800101 	mov	w1, #0x8                   	// #8
   9c334:	9400295b 	bl	a68a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)>
   9c338:	f9001260 	str	x0, [x19, #32]
   9c33c:	b5fffe60 	cbnz	x0, 9c308 <CKeyboardBehaviour::TimerStub(unsigned long, void*, void*)+0x28>
   9c340:	900000c1 	adrp	x1, b4000 <_etext+0x3158>
   9c344:	d00000a0 	adrp	x0, b2000 <_etext+0x1158>
   9c348:	912a4021 	add	x1, x1, #0xa90
   9c34c:	913ee000 	add	x0, x0, #0xfb8
   9c350:	528016e2 	mov	w2, #0xb7                  	// #183
   9c354:	9400067b 	bl	9dd40 <assertion_failed>
   9c358:	900000c1 	adrp	x1, b4000 <_etext+0x3158>
   9c35c:	b00000a0 	adrp	x0, b1000 <_etext+0x158>
   9c360:	912a4021 	add	x1, x1, #0xa90
   9c364:	910b6000 	add	x0, x0, #0x2d8
   9c368:	528017c2 	mov	w2, #0xbe                  	// #190
   9c36c:	94000675 	bl	9dd40 <assertion_failed>
   9c370:	900000c1 	adrp	x1, b4000 <_etext+0x3158>
   9c374:	900000c0 	adrp	x0, b4000 <_etext+0x3158>
   9c378:	912a4021 	add	x1, x1, #0xa90
   9c37c:	912be000 	add	x0, x0, #0xaf8
   9c380:	52801602 	mov	w2, #0xb0                  	// #176
   9c384:	9400066f 	bl	9dd40 <assertion_failed>
   9c388:	d503201f 	nop
   9c38c:	d503201f 	nop

000000000009c390 <CKeyboardBehaviour::KeyPressed(unsigned char)>:
   9c390:	12001c23 	and	w3, w1, #0xff
   9c394:	aa0003e2 	mov	x2, x0
   9c398:	51020061 	sub	w1, w3, #0x80
   9c39c:	12001c24 	and	w4, w1, #0xff
   9c3a0:	71001c9f 	cmp	w4, #0x7
   9c3a4:	540000e8 	b.hi	9c3c0 <CKeyboardBehaviour::KeyPressed(unsigned char)+0x30>  // b.pmore
   9c3a8:	39406003 	ldrb	w3, [x0, #24]
   9c3ac:	52800020 	mov	w0, #0x1                   	// #1
   9c3b0:	1ac12000 	lsl	w0, w0, w1
   9c3b4:	2a030000 	orr	w0, w0, w3
   9c3b8:	39006040 	strb	w0, [x2, #24]
   9c3bc:	d65f03c0 	ret
   9c3c0:	39406401 	ldrb	w1, [x0, #25]
   9c3c4:	6b03003f 	cmp	w1, w3
   9c3c8:	54ffffa0 	b.eq	9c3bc <CKeyboardBehaviour::KeyPressed(unsigned char)+0x2c>  // b.none
   9c3cc:	2a0303e1 	mov	w1, w3
   9c3d0:	39006403 	strb	w3, [x0, #25]
   9c3d4:	17ffff8b 	b	9c200 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   9c3d8:	d503201f 	nop
   9c3dc:	d503201f 	nop

000000000009c3e0 <CKeyboardBehaviour::KeyReleased(unsigned char)>:
   9c3e0:	12001c21 	and	w1, w1, #0xff
   9c3e4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9c3e8:	910003fd 	mov	x29, sp
   9c3ec:	51020022 	sub	w2, w1, #0x80
   9c3f0:	f9000bf3 	str	x19, [sp, #16]
   9c3f4:	aa0003f3 	mov	x19, x0
   9c3f8:	12001c40 	and	w0, w2, #0xff
   9c3fc:	71001c1f 	cmp	w0, #0x7
   9c400:	54000128 	b.hi	9c424 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x44>  // b.pmore
   9c404:	39406261 	ldrb	w1, [x19, #24]
   9c408:	52800020 	mov	w0, #0x1                   	// #1
   9c40c:	1ac22000 	lsl	w0, w0, w2
   9c410:	0a200020 	bic	w0, w1, w0
   9c414:	39006260 	strb	w0, [x19, #24]
   9c418:	f9400bf3 	ldr	x19, [sp, #16]
   9c41c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9c420:	d65f03c0 	ret
   9c424:	39406660 	ldrb	w0, [x19, #25]
   9c428:	6b01001f 	cmp	w0, w1
   9c42c:	54ffff61 	b.ne	9c418 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x38>  // b.any
   9c430:	f9401260 	ldr	x0, [x19, #32]
   9c434:	b50000a0 	cbnz	x0, 9c448 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x68>
   9c438:	3900667f 	strb	wzr, [x19, #25]
   9c43c:	f9400bf3 	ldr	x19, [sp, #16]
   9c440:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9c444:	d65f03c0 	ret
   9c448:	94002b2a 	bl	a70f0 <CTimer::Get()>
   9c44c:	f9401261 	ldr	x1, [x19, #32]
   9c450:	9400296c 	bl	a6a00 <CTimer::CancelKernelTimer(unsigned long)>
   9c454:	3900667f 	strb	wzr, [x19, #25]
   9c458:	f900127f 	str	xzr, [x19, #32]
   9c45c:	17fffff8 	b	9c43c <CKeyboardBehaviour::KeyReleased(unsigned char)+0x5c>

000000000009c460 <CKeyboardBehaviour::TimerHandler(unsigned long)>:
   9c460:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9c464:	910003fd 	mov	x29, sp
   9c468:	f9401002 	ldr	x2, [x0, #32]
   9c46c:	f9000bf3 	str	x19, [sp, #16]
   9c470:	eb01005f 	cmp	x2, x1
   9c474:	540002e1 	b.ne	9c4d0 <CKeyboardBehaviour::TimerHandler(unsigned long)+0x70>  // b.any
   9c478:	39406401 	ldrb	w1, [x0, #25]
   9c47c:	aa0003f3 	mov	x19, x0
   9c480:	35000081 	cbnz	w1, 9c490 <CKeyboardBehaviour::TimerHandler(unsigned long)+0x30>
   9c484:	f9400bf3 	ldr	x19, [sp, #16]
   9c488:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9c48c:	d65f03c0 	ret
   9c490:	97ffff5c 	bl	9c200 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   9c494:	94002b17 	bl	a70f0 <CTimer::Get()>
   9c498:	90000002 	adrp	x2, 9c000 <CUSBSerialDevice::RegisterReadHandler(int (*)(void*, unsigned long, void*), void*)+0x50>
   9c49c:	aa1303e4 	mov	x4, x19
   9c4a0:	910b8042 	add	x2, x2, #0x2e0
   9c4a4:	d2800003 	mov	x3, #0x0                   	// #0
   9c4a8:	52800101 	mov	w1, #0x8                   	// #8
   9c4ac:	940028fd 	bl	a68a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)>
   9c4b0:	f9001260 	str	x0, [x19, #32]
   9c4b4:	b5fffe80 	cbnz	x0, 9c484 <CKeyboardBehaviour::TimerHandler(unsigned long)+0x24>
   9c4b8:	900000c1 	adrp	x1, b4000 <_etext+0x3158>
   9c4bc:	d00000a0 	adrp	x0, b2000 <_etext+0x1158>
   9c4c0:	912a4021 	add	x1, x1, #0xa90
   9c4c4:	913ee000 	add	x0, x0, #0xfb8
   9c4c8:	528016e2 	mov	w2, #0xb7                  	// #183
   9c4cc:	9400061d 	bl	9dd40 <assertion_failed>
   9c4d0:	900000c1 	adrp	x1, b4000 <_etext+0x3158>
   9c4d4:	900000c0 	adrp	x0, b4000 <_etext+0x3158>
   9c4d8:	912a4021 	add	x1, x1, #0xa90
   9c4dc:	912be000 	add	x0, x0, #0xaf8
   9c4e0:	52801602 	mov	w2, #0xb0                  	// #176
   9c4e4:	94000617 	bl	9dd40 <assertion_failed>
	...

000000000009c4f0 <CKeyMap::CKeyMap()>:
   9c4f0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9c4f4:	910003fd 	mov	x29, sp
   9c4f8:	a90153f3 	stp	x19, x20, [sp, #16]
   9c4fc:	a9025bf5 	stp	x21, x22, [sp, #32]
   9c500:	aa0003f6 	mov	x22, x0
   9c504:	790a001f 	strh	wzr, [x0, #1280]
   9c508:	3914081f 	strb	wzr, [x0, #1282]
   9c50c:	94000b29 	bl	9f1b0 <CKernelOptions::Get()>
   9c510:	94000ad4 	bl	9f060 <CKernelOptions::GetKeyMap() const>
   9c514:	b40004a0 	cbz	x0, 9c5a8 <CKeyMap::CKeyMap()+0xb8>
   9c518:	90000114 	adrp	x20, bc000 <font_data+0x9a8>
   9c51c:	aa0003f5 	mov	x21, x0
   9c520:	f946ba80 	ldr	x0, [x20, #3440]
   9c524:	d2800013 	mov	x19, #0x0                   	// #0
   9c528:	9135c294 	add	x20, x20, #0xd70
   9c52c:	b50000a0 	cbnz	x0, 9c540 <CKeyMap::CKeyMap()+0x50>
   9c530:	14000024 	b	9c5c0 <CKeyMap::CKeyMap()+0xd0>
   9c534:	91000673 	add	x19, x19, #0x1
   9c538:	f8737a80 	ldr	x0, [x20, x19, lsl #3]
   9c53c:	b40001c0 	cbz	x0, 9c574 <CKeyMap::CKeyMap()+0x84>
   9c540:	aa1503e1 	mov	x1, x21
   9c544:	94002b27 	bl	a71e0 <strcmp>
   9c548:	35ffff60 	cbnz	w0, 9c534 <CKeyMap::CKeyMap()+0x44>
   9c54c:	8b130a73 	add	x19, x19, x19, lsl #2
   9c550:	f00000c0 	adrp	x0, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9c554:	912b0000 	add	x0, x0, #0xac0
   9c558:	d280a002 	mov	x2, #0x500                 	// #1280
   9c55c:	8b132001 	add	x1, x0, x19, lsl #8
   9c560:	aa1603e0 	mov	x0, x22
   9c564:	a94153f3 	ldp	x19, x20, [sp, #16]
   9c568:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9c56c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9c570:	14002cb6 	b	a7848 <memcpy>
   9c574:	f9400280 	ldr	x0, [x20]
   9c578:	b4000240 	cbz	x0, 9c5c0 <CKeyMap::CKeyMap()+0xd0>
   9c57c:	900000d5 	adrp	x21, b4000 <_etext+0x3158>
   9c580:	912cc2b5 	add	x21, x21, #0xb30
   9c584:	d2800013 	mov	x19, #0x0                   	// #0
   9c588:	14000004 	b	9c598 <CKeyMap::CKeyMap()+0xa8>
   9c58c:	91000673 	add	x19, x19, #0x1
   9c590:	f8737a80 	ldr	x0, [x20, x19, lsl #3]
   9c594:	b4000160 	cbz	x0, 9c5c0 <CKeyMap::CKeyMap()+0xd0>
   9c598:	aa1503e1 	mov	x1, x21
   9c59c:	94002b11 	bl	a71e0 <strcmp>
   9c5a0:	35ffff60 	cbnz	w0, 9c58c <CKeyMap::CKeyMap()+0x9c>
   9c5a4:	17ffffea 	b	9c54c <CKeyMap::CKeyMap()+0x5c>
   9c5a8:	900000c1 	adrp	x1, b4000 <_etext+0x3158>
   9c5ac:	900000c0 	adrp	x0, b4000 <_etext+0x3158>
   9c5b0:	912c4021 	add	x1, x1, #0xb10
   9c5b4:	912c8000 	add	x0, x0, #0xb20
   9c5b8:	52801142 	mov	w2, #0x8a                  	// #138
   9c5bc:	940005e1 	bl	9dd40 <assertion_failed>
   9c5c0:	900000c1 	adrp	x1, b4000 <_etext+0x3158>
   9c5c4:	900000c0 	adrp	x0, b4000 <_etext+0x3158>
   9c5c8:	912c4021 	add	x1, x1, #0xb10
   9c5cc:	912ce000 	add	x0, x0, #0xb38
   9c5d0:	52801202 	mov	w2, #0x90                  	// #144
   9c5d4:	940005db 	bl	9dd40 <assertion_failed>
   9c5d8:	d503201f 	nop
   9c5dc:	d503201f 	nop

000000000009c5e0 <CKeyMap::~CKeyMap()>:
   9c5e0:	d65f03c0 	ret
   9c5e4:	d503201f 	nop
   9c5e8:	d503201f 	nop
   9c5ec:	d503201f 	nop

000000000009c5f0 <CKeyMap::ClearTable(unsigned char)>:
   9c5f0:	12001c21 	and	w1, w1, #0xff
   9c5f4:	7100103f 	cmp	w1, #0x4
   9c5f8:	54000168 	b.hi	9c624 <CKeyMap::ClearTable(unsigned char)+0x34>  // b.pmore
   9c5fc:	d37f1c22 	ubfiz	x2, x1, #1, #8
   9c600:	91140001 	add	x1, x0, #0x500
   9c604:	8b020021 	add	x1, x1, x2
   9c608:	8b020000 	add	x0, x0, x2
   9c60c:	d503201f 	nop
   9c610:	7800a41f 	strh	wzr, [x0], #10
   9c614:	eb01001f 	cmp	x0, x1
   9c618:	54ffffc1 	b.ne	9c610 <CKeyMap::ClearTable(unsigned char)+0x20>  // b.any
   9c61c:	52800020 	mov	w0, #0x1                   	// #1
   9c620:	d65f03c0 	ret
   9c624:	52800000 	mov	w0, #0x0                   	// #0
   9c628:	d65f03c0 	ret
   9c62c:	d503201f 	nop

000000000009c630 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)>:
   9c630:	13001c45 	sxtb	w5, w2
   9c634:	12001c21 	and	w1, w1, #0xff
   9c638:	7100103f 	cmp	w1, #0x4
   9c63c:	1a9f97e4 	cset	w4, hi	// hi = pmore
   9c640:	12003c63 	and	w3, w3, #0xffff
   9c644:	710000bf 	cmp	w5, #0x0
   9c648:	1a9fc7e5 	cset	w5, le
   9c64c:	2a050084 	orr	w4, w4, w5
   9c650:	12001c42 	and	w2, w2, #0xff
   9c654:	35000144 	cbnz	w4, 9c67c <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x4c>
   9c658:	7104e87f 	cmp	w3, #0x13a
   9c65c:	540000c8 	b.hi	9c674 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x44>  // b.pmore
   9c660:	52800024 	mov	w4, #0x1                   	// #1
   9c664:	937e7c45 	sbfiz	x5, x2, #2, #32
   9c668:	8b22c0a2 	add	x2, x5, w2, sxtw
   9c66c:	8b21c041 	add	x1, x2, w1, sxtw
   9c670:	78217803 	strh	w3, [x0, x1, lsl #1]
   9c674:	2a0403e0 	mov	w0, w4
   9c678:	d65f03c0 	ret
   9c67c:	52800004 	mov	w4, #0x0                   	// #0
   9c680:	2a0403e0 	mov	w0, w4
   9c684:	d65f03c0 	ret
   9c688:	d503201f 	nop
   9c68c:	d503201f 	nop

000000000009c690 <CKeyMap::Translate(unsigned char, unsigned char)>:
   9c690:	13001c23 	sxtb	w3, w1
   9c694:	12001c42 	and	w2, w2, #0xff
   9c698:	7100007f 	cmp	w3, #0x0
   9c69c:	12001c21 	and	w1, w1, #0xff
   9c6a0:	aa0003e3 	mov	x3, x0
   9c6a4:	540004ed 	b.le	9c740 <CKeyMap::Translate(unsigned char, unsigned char)+0xb0>
   9c6a8:	93407c24 	sxtw	x4, w1
   9c6ac:	8b21c880 	add	x0, x4, w1, sxtw #2
   9c6b0:	78607860 	ldrh	w0, [x3, x0, lsl #1]
   9c6b4:	7104281f 	cmp	w0, #0x10a
   9c6b8:	54000380 	b.eq	9c728 <CKeyMap::Translate(unsigned char, unsigned char)+0x98>  // b.none
   9c6bc:	51045c05 	sub	w5, w0, #0x117
   9c6c0:	12003ca5 	and	w5, w5, #0xffff
   9c6c4:	71002cbf 	cmp	w5, #0xb
   9c6c8:	54000048 	b.hi	9c6d0 <CKeyMap::Translate(unsigned char, unsigned char)+0x40>  // b.pmore
   9c6cc:	371004e2 	tbnz	w2, #2, 9c768 <CKeyMap::Translate(unsigned char, unsigned char)+0xd8>
   9c6d0:	12800e65 	mov	w5, #0xffffff8c            	// #-116
   9c6d4:	6a05005f 	tst	w2, w5
   9c6d8:	54000341 	b.ne	9c740 <CKeyMap::Translate(unsigned char, unsigned char)+0xb0>  // b.any
   9c6dc:	51014c25 	sub	w5, w1, #0x53
   9c6e0:	12001ca5 	and	w5, w5, #0xff
   9c6e4:	710040bf 	cmp	w5, #0x10
   9c6e8:	54000308 	b.hi	9c748 <CKeyMap::Translate(unsigned char, unsigned char)+0xb8>  // b.pmore
   9c6ec:	39540460 	ldrb	w0, [x3, #1281]
   9c6f0:	8b040884 	add	x4, x4, x4, lsl #2
   9c6f4:	8b000084 	add	x4, x4, x0
   9c6f8:	78647860 	ldrh	w0, [x3, x4, lsl #1]
   9c6fc:	7104981f 	cmp	w0, #0x126
   9c700:	540005c0 	b.eq	9c7b8 <CKeyMap::Translate(unsigned char, unsigned char)+0x128>  // b.none
   9c704:	7104a01f 	cmp	w0, #0x128
   9c708:	540004e0 	b.eq	9c7a4 <CKeyMap::Translate(unsigned char, unsigned char)+0x114>  // b.none
   9c70c:	7104901f 	cmp	w0, #0x124
   9c710:	540000a1 	b.ne	9c724 <CKeyMap::Translate(unsigned char, unsigned char)+0x94>  // b.any
   9c714:	39540061 	ldrb	w1, [x3, #1280]
   9c718:	52802760 	mov	w0, #0x13b                 	// #315
   9c71c:	52000021 	eor	w1, w1, #0x1
   9c720:	39140061 	strb	w1, [x3, #1280]
   9c724:	d65f03c0 	ret
   9c728:	52800225 	mov	w5, #0x11                  	// #17
   9c72c:	6a05005f 	tst	w2, w5
   9c730:	54fffd00 	b.eq	9c6d0 <CKeyMap::Translate(unsigned char, unsigned char)+0x40>  // b.none
   9c734:	3617fce2 	tbz	w2, #2, 9c6d0 <CKeyMap::Translate(unsigned char, unsigned char)+0x40>
   9c738:	52802940 	mov	w0, #0x14a                 	// #330
   9c73c:	d65f03c0 	ret
   9c740:	52800000 	mov	w0, #0x0                   	// #0
   9c744:	d65f03c0 	ret
   9c748:	52800445 	mov	w5, #0x22                  	// #34
   9c74c:	0a050045 	and	w5, w2, w5
   9c750:	36300122 	tbz	w2, #6, 9c774 <CKeyMap::Translate(unsigned char, unsigned char)+0xe4>
   9c754:	8b040884 	add	x4, x4, x4, lsl #2
   9c758:	8b040464 	add	x4, x3, x4, lsl #1
   9c75c:	34000405 	cbz	w5, 9c7dc <CKeyMap::Translate(unsigned char, unsigned char)+0x14c>
   9c760:	79400c80 	ldrh	w0, [x4, #6]
   9c764:	17ffffe6 	b	9c6fc <CKeyMap::Translate(unsigned char, unsigned char)+0x6c>
   9c768:	11009c00 	add	w0, w0, #0x27
   9c76c:	12003c00 	and	w0, w0, #0xffff
   9c770:	d65f03c0 	ret
   9c774:	350002c5 	cbnz	w5, 9c7cc <CKeyMap::Translate(unsigned char, unsigned char)+0x13c>
   9c778:	52800225 	mov	w5, #0x11                  	// #17
   9c77c:	6a05005f 	tst	w2, w5
   9c780:	54fffbe0 	b.eq	9c6fc <CKeyMap::Translate(unsigned char, unsigned char)+0x6c>  // b.none
   9c784:	51001020 	sub	w0, w1, #0x4
   9c788:	8b040884 	add	x4, x4, x4, lsl #2
   9c78c:	12001c00 	and	w0, w0, #0xff
   9c790:	7100641f 	cmp	w0, #0x19
   9c794:	9a9f97e0 	cset	x0, hi	// hi = pmore
   9c798:	8b000880 	add	x0, x4, x0, lsl #2
   9c79c:	78607860 	ldrh	w0, [x3, x0, lsl #1]
   9c7a0:	17ffffd7 	b	9c6fc <CKeyMap::Translate(unsigned char, unsigned char)+0x6c>
   9c7a4:	39540461 	ldrb	w1, [x3, #1281]
   9c7a8:	52802780 	mov	w0, #0x13c                 	// #316
   9c7ac:	52000021 	eor	w1, w1, #0x1
   9c7b0:	39140461 	strb	w1, [x3, #1281]
   9c7b4:	d65f03c0 	ret
   9c7b8:	39540861 	ldrb	w1, [x3, #1282]
   9c7bc:	528027a0 	mov	w0, #0x13d                 	// #317
   9c7c0:	52000021 	eor	w1, w1, #0x1
   9c7c4:	39140861 	strb	w1, [x3, #1282]
   9c7c8:	d65f03c0 	ret
   9c7cc:	8b040884 	add	x4, x4, x4, lsl #2
   9c7d0:	8b040464 	add	x4, x3, x4, lsl #1
   9c7d4:	79400480 	ldrh	w0, [x4, #2]
   9c7d8:	17ffffc9 	b	9c6fc <CKeyMap::Translate(unsigned char, unsigned char)+0x6c>
   9c7dc:	79400880 	ldrh	w0, [x4, #4]
   9c7e0:	17ffffc7 	b	9c6fc <CKeyMap::Translate(unsigned char, unsigned char)+0x6c>
   9c7e4:	d503201f 	nop
   9c7e8:	d503201f 	nop
   9c7ec:	d503201f 	nop

000000000009c7f0 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>:
   9c7f0:	12003c21 	and	w1, w1, #0xffff
   9c7f4:	12001c42 	and	w2, w2, #0xff
   9c7f8:	51008424 	sub	w4, w1, #0x21
   9c7fc:	12003c84 	and	w4, w4, #0xffff
   9c800:	7104649f 	cmp	w4, #0x119
   9c804:	540004c8 	b.hi	9c89c <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xac>  // b.pmore
   9c808:	51040024 	sub	w4, w1, #0x100
   9c80c:	12003c85 	and	w5, w4, #0xffff
   9c810:	7100e8bf 	cmp	w5, #0x3a
   9c814:	540003a9 	b.ls	9c888 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x98>  // b.plast
   9c818:	52800224 	mov	w4, #0x11                  	// #17
   9c81c:	13001c25 	sxtb	w5, w1
   9c820:	6a04005f 	tst	w2, w4
   9c824:	54000180 	b.eq	9c854 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x64>  // b.none
   9c828:	12001c21 	and	w1, w1, #0xff
   9c82c:	d2800000 	mov	x0, #0x0                   	// #0
   9c830:	51018422 	sub	w2, w1, #0x61
   9c834:	12001c42 	and	w2, w2, #0xff
   9c838:	7100645f 	cmp	w2, #0x19
   9c83c:	540000a8 	b.hi	9c850 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x60>  // b.pmore
   9c840:	51018021 	sub	w1, w1, #0x60
   9c844:	aa0303e0 	mov	x0, x3
   9c848:	3900047f 	strb	wzr, [x3, #1]
   9c84c:	39000061 	strb	w1, [x3]
   9c850:	d65f03c0 	ret
   9c854:	39540000 	ldrb	w0, [x0, #1280]
   9c858:	34000100 	cbz	w0, 9c878 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x88>
   9c85c:	12001c21 	and	w1, w1, #0xff
   9c860:	51010420 	sub	w0, w1, #0x41
   9c864:	12001c00 	and	w0, w0, #0xff
   9c868:	7100641f 	cmp	w0, #0x19
   9c86c:	540001c8 	b.hi	9c8a4 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb4>  // b.pmore
   9c870:	11008021 	add	w1, w1, #0x20
   9c874:	13001c25 	sxtb	w5, w1
   9c878:	aa0303e0 	mov	x0, x3
   9c87c:	39000065 	strb	w5, [x3]
   9c880:	3900047f 	strb	wzr, [x3, #1]
   9c884:	d65f03c0 	ret
   9c888:	90000100 	adrp	x0, bc000 <font_data+0x9a8>
   9c88c:	9135c000 	add	x0, x0, #0xd70
   9c890:	91010000 	add	x0, x0, #0x40
   9c894:	f864d800 	ldr	x0, [x0, w4, sxtw #3]
   9c898:	d65f03c0 	ret
   9c89c:	d2800000 	mov	x0, #0x0                   	// #0
   9c8a0:	d65f03c0 	ret
   9c8a4:	51018420 	sub	w0, w1, #0x61
   9c8a8:	51008021 	sub	w1, w1, #0x20
   9c8ac:	12001c00 	and	w0, w0, #0xff
   9c8b0:	13001c21 	sxtb	w1, w1
   9c8b4:	7100681f 	cmp	w0, #0x1a
   9c8b8:	1a853025 	csel	w5, w1, w5, cc	// cc = lo, ul, last
   9c8bc:	17ffffef 	b	9c878 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x88>

000000000009c8c0 <CKeyMap::GetLEDStatus() const>:
   9c8c0:	39540001 	ldrb	w1, [x0, #1280]
   9c8c4:	39540403 	ldrb	w3, [x0, #1281]
   9c8c8:	39540802 	ldrb	w2, [x0, #1282]
   9c8cc:	531f1820 	ubfiz	w0, w1, #1, #7
   9c8d0:	32000001 	orr	w1, w0, #0x1
   9c8d4:	7100007f 	cmp	w3, #0x0
   9c8d8:	1a810000 	csel	w0, w0, w1, eq	// eq = none
   9c8dc:	321e0001 	orr	w1, w0, #0x4
   9c8e0:	7100005f 	cmp	w2, #0x0
   9c8e4:	1a801020 	csel	w0, w1, w0, ne	// ne = any
   9c8e8:	d65f03c0 	ret
   9c8ec:	d503201f 	nop

000000000009c8f0 <CKeyMap::LookupDefaultMap(char const*)>:
   9c8f0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9c8f4:	910003fd 	mov	x29, sp
   9c8f8:	f90013f5 	str	x21, [sp, #32]
   9c8fc:	90000115 	adrp	x21, bc000 <font_data+0x9a8>
   9c900:	a90153f3 	stp	x19, x20, [sp, #16]
   9c904:	aa0003f4 	mov	x20, x0
   9c908:	f946baa0 	ldr	x0, [x21, #3440]
   9c90c:	b4000320 	cbz	x0, 9c970 <CKeyMap::LookupDefaultMap(char const*)+0x80>
   9c910:	9135c2b5 	add	x21, x21, #0xd70
   9c914:	d2800013 	mov	x19, #0x0                   	// #0
   9c918:	b50000b4 	cbnz	x20, 9c92c <CKeyMap::LookupDefaultMap(char const*)+0x3c>
   9c91c:	1400000f 	b	9c958 <CKeyMap::LookupDefaultMap(char const*)+0x68>
   9c920:	91000673 	add	x19, x19, #0x1
   9c924:	f8737aa0 	ldr	x0, [x21, x19, lsl #3]
   9c928:	b4000240 	cbz	x0, 9c970 <CKeyMap::LookupDefaultMap(char const*)+0x80>
   9c92c:	aa1403e1 	mov	x1, x20
   9c930:	94002a2c 	bl	a71e0 <strcmp>
   9c934:	35ffff60 	cbnz	w0, 9c920 <CKeyMap::LookupDefaultMap(char const*)+0x30>
   9c938:	8b130a73 	add	x19, x19, x19, lsl #2
   9c93c:	f00000c0 	adrp	x0, b7000 <vtable for CUSBSerialCP210xDevice+0x38>
   9c940:	912b0000 	add	x0, x0, #0xac0
   9c944:	f94013f5 	ldr	x21, [sp, #32]
   9c948:	8b132000 	add	x0, x0, x19, lsl #8
   9c94c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9c950:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9c954:	d65f03c0 	ret
   9c958:	900000c1 	adrp	x1, b4000 <_etext+0x3158>
   9c95c:	900000c0 	adrp	x0, b4000 <_etext+0x3158>
   9c960:	912c4021 	add	x1, x1, #0xb10
   9c964:	912c8000 	add	x0, x0, #0xb20
   9c968:	52802b02 	mov	w2, #0x158                 	// #344
   9c96c:	940004f5 	bl	9dd40 <assertion_failed>
   9c970:	d2800000 	mov	x0, #0x0                   	// #0
   9c974:	a94153f3 	ldp	x19, x20, [sp, #16]
   9c978:	f94013f5 	ldr	x21, [sp, #32]
   9c97c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9c980:	d65f03c0 	ret
	...

000000000009c990 <proxy_handler(unsigned int, int, int, int, void*)>:
   9c990:	aa0403f0 	mov	x16, x4
   9c994:	d61f0200 	br	x16
   9c998:	d503201f 	nop
   9c99c:	d503201f 	nop

000000000009c9a0 <CMouseDevice::~CMouseDevice()>:
   9c9a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9c9a4:	b00000e1 	adrp	x1, b9000 <CKeyMap::s_DefaultMap+0x1540>
   9c9a8:	91374021 	add	x1, x1, #0xdd0
   9c9ac:	910003fd 	mov	x29, sp
   9c9b0:	f9000bf3 	str	x19, [sp, #16]
   9c9b4:	aa0003f3 	mov	x19, x0
   9c9b8:	f9000001 	str	x1, [x0]
   9c9bc:	a9037c1f 	stp	xzr, xzr, [x0, #48]
   9c9c0:	940008c4 	bl	9ecd0 <CDeviceNameService::Get()>
   9c9c4:	b00000e1 	adrp	x1, b9000 <CKeyMap::s_DefaultMap+0x1540>
   9c9c8:	b9404262 	ldr	w2, [x19, #64]
   9c9cc:	52800003 	mov	w3, #0x0                   	// #0
   9c9d0:	91384021 	add	x1, x1, #0xe10
   9c9d4:	940008eb 	bl	9ed80 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   9c9d8:	b9404261 	ldr	w1, [x19, #64]
   9c9dc:	b0000100 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   9c9e0:	9104a000 	add	x0, x0, #0x128
   9c9e4:	94002ffb 	bl	a89d0 <CNumberPool::FreeNumber(unsigned int)>
   9c9e8:	91004260 	add	x0, x19, #0x10
   9c9ec:	94000279 	bl	9d3d0 <CMouseBehaviour::~CMouseBehaviour()>
   9c9f0:	aa1303e0 	mov	x0, x19
   9c9f4:	f9400bf3 	ldr	x19, [sp, #16]
   9c9f8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9c9fc:	14000721 	b	9e680 <CDevice::~CDevice()>

000000000009ca00 <CMouseDevice::~CMouseDevice()>:
   9ca00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9ca04:	910003fd 	mov	x29, sp
   9ca08:	f9000bf3 	str	x19, [sp, #16]
   9ca0c:	aa0003f3 	mov	x19, x0
   9ca10:	97ffffe4 	bl	9c9a0 <CMouseDevice::~CMouseDevice()>
   9ca14:	aa1303e0 	mov	x0, x19
   9ca18:	d2800a01 	mov	x1, #0x50                  	// #80
   9ca1c:	f9400bf3 	ldr	x19, [sp, #16]
   9ca20:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9ca24:	14002e37 	b	a8300 <operator delete(void*, unsigned long)>
   9ca28:	d503201f 	nop
   9ca2c:	d503201f 	nop

000000000009ca30 <CMouseDevice::CMouseDevice(unsigned int, bool)>:
   9ca30:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9ca34:	910003fd 	mov	x29, sp
   9ca38:	a90153f3 	stp	x19, x20, [sp, #16]
   9ca3c:	aa0003f3 	mov	x19, x0
   9ca40:	b00000f4 	adrp	x20, b9000 <CKeyMap::s_DefaultMap+0x1540>
   9ca44:	91384294 	add	x20, x20, #0xe10
   9ca48:	a9025bf5 	stp	x21, x22, [sp, #32]
   9ca4c:	12001c56 	and	w22, w2, #0xff
   9ca50:	2a0103f5 	mov	w21, w1
   9ca54:	9400073f 	bl	9e750 <CDevice::CDevice()>
   9ca58:	aa1303e0 	mov	x0, x19
   9ca5c:	b00000e1 	adrp	x1, b9000 <CKeyMap::s_DefaultMap+0x1540>
   9ca60:	91374021 	add	x1, x1, #0xdd0
   9ca64:	f8010401 	str	x1, [x0], #16
   9ca68:	94000166 	bl	9d000 <CMouseBehaviour::CMouseBehaviour()>
   9ca6c:	b0000100 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   9ca70:	91002282 	add	x2, x20, #0x8
   9ca74:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   9ca78:	52800021 	mov	w1, #0x1                   	// #1
   9ca7c:	9104a000 	add	x0, x0, #0x128
   9ca80:	94002fa4 	bl	a8910 <CNumberPool::AllocateNumber(bool, char const*)>
   9ca84:	29085660 	stp	w0, w21, [x19, #64]
   9ca88:	39012276 	strb	w22, [x19, #72]
   9ca8c:	94000891 	bl	9ecd0 <CDeviceNameService::Get()>
   9ca90:	aa1303e3 	mov	x3, x19
   9ca94:	aa1403e1 	mov	x1, x20
   9ca98:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ca9c:	52800004 	mov	w4, #0x0                   	// #0
   9caa0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9caa4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9caa8:	b9404062 	ldr	w2, [x3, #64]
   9caac:	14000895 	b	9ed00 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>

000000000009cab0 <CMouseDevice::Setup(unsigned int, unsigned int)>:
   9cab0:	91004000 	add	x0, x0, #0x10
   9cab4:	1400015b 	b	9d020 <CMouseBehaviour::Setup(unsigned int, unsigned int)>
   9cab8:	d503201f 	nop
   9cabc:	d503201f 	nop

000000000009cac0 <CMouseDevice::Release()>:
   9cac0:	91004000 	add	x0, x0, #0x10
   9cac4:	1400024b 	b	9d3f0 <CMouseBehaviour::Release()>
   9cac8:	d503201f 	nop
   9cacc:	d503201f 	nop

000000000009cad0 <CMouseDevice::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))>:
   9cad0:	91004000 	add	x0, x0, #0x10
   9cad4:	1400019b 	b	9d140 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))>
   9cad8:	d503201f 	nop
   9cadc:	d503201f 	nop

000000000009cae0 <CMouseDevice::SetCursor(unsigned int, unsigned int)>:
   9cae0:	91004000 	add	x0, x0, #0x10
   9cae4:	1400025b 	b	9d450 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>
   9cae8:	d503201f 	nop
   9caec:	d503201f 	nop

000000000009caf0 <CMouseDevice::ShowCursor(bool)>:
   9caf0:	91004000 	add	x0, x0, #0x10
   9caf4:	1400027b 	b	9d4e0 <CMouseBehaviour::ShowCursor(bool)>
   9caf8:	d503201f 	nop
   9cafc:	d503201f 	nop

000000000009cb00 <CMouseDevice::UpdateCursor()>:
   9cb00:	f9401801 	ldr	x1, [x0, #48]
   9cb04:	b4000041 	cbz	x1, 9cb0c <CMouseDevice::UpdateCursor()+0xc>
   9cb08:	d65f03c0 	ret
   9cb0c:	91004000 	add	x0, x0, #0x10
   9cb10:	14000294 	b	9d560 <CMouseBehaviour::UpdateCursor()>
   9cb14:	d503201f 	nop
   9cb18:	d503201f 	nop
   9cb1c:	d503201f 	nop

000000000009cb20 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int, void*), void*)>:
   9cb20:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9cb24:	910003fd 	mov	x29, sp
   9cb28:	f9401803 	ldr	x3, [x0, #48]
   9cb2c:	b50000a3 	cbnz	x3, 9cb40 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int, void*), void*)+0x20>
   9cb30:	a9030801 	stp	x1, x2, [x0, #48]
   9cb34:	b4000121 	cbz	x1, 9cb58 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int, void*), void*)+0x38>
   9cb38:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9cb3c:	d65f03c0 	ret
   9cb40:	900000c1 	adrp	x1, b4000 <_etext+0x3158>
   9cb44:	900000c0 	adrp	x0, b4000 <_etext+0x3158>
   9cb48:	91338021 	add	x1, x1, #0xce0
   9cb4c:	911d8000 	add	x0, x0, #0x760
   9cb50:	52800a82 	mov	w2, #0x54                  	// #84
   9cb54:	9400047b 	bl	9dd40 <assertion_failed>
   9cb58:	900000c1 	adrp	x1, b4000 <_etext+0x3158>
   9cb5c:	900000c0 	adrp	x0, b4000 <_etext+0x3158>
   9cb60:	91338021 	add	x1, x1, #0xce0
   9cb64:	911de000 	add	x0, x0, #0x778
   9cb68:	52800ae2 	mov	w2, #0x57                  	// #87
   9cb6c:	94000475 	bl	9dd40 <assertion_failed>

000000000009cb70 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int))>:
   9cb70:	f9401802 	ldr	x2, [x0, #48]
   9cb74:	b50000a2 	cbnz	x2, 9cb88 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int))+0x18>
   9cb78:	90000002 	adrp	x2, 9c000 <CUSBSerialDevice::RegisterReadHandler(int (*)(void*, unsigned long, void*), void*)+0x50>
   9cb7c:	91264042 	add	x2, x2, #0x990
   9cb80:	a9030402 	stp	x2, x1, [x0, #48]
   9cb84:	d65f03c0 	ret
   9cb88:	900000c1 	adrp	x1, b4000 <_etext+0x3158>
   9cb8c:	900000c0 	adrp	x0, b4000 <_etext+0x3158>
   9cb90:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9cb94:	91338021 	add	x1, x1, #0xce0
   9cb98:	910003fd 	mov	x29, sp
   9cb9c:	911d8000 	add	x0, x0, #0x760
   9cba0:	52800a82 	mov	w2, #0x54                  	// #84
   9cba4:	94000467 	bl	9dd40 <assertion_failed>
   9cba8:	d503201f 	nop
   9cbac:	d503201f 	nop

000000000009cbb0 <CMouseDevice::ReportHandler(unsigned int, int, int, int)>:
   9cbb0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9cbb4:	910003fd 	mov	x29, sp
   9cbb8:	a90153f3 	stp	x19, x20, [sp, #16]
   9cbbc:	aa0003f3 	mov	x19, x0
   9cbc0:	91004000 	add	x0, x0, #0x10
   9cbc4:	2a0103f4 	mov	w20, w1
   9cbc8:	a9025bf5 	stp	x21, x22, [sp, #32]
   9cbcc:	2a0203f5 	mov	w21, w2
   9cbd0:	2a0303f6 	mov	w22, w3
   9cbd4:	f9001bf7 	str	x23, [sp, #48]
   9cbd8:	2a0403f7 	mov	w23, w4
   9cbdc:	9400016d 	bl	9d190 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)>
   9cbe0:	f9401a65 	ldr	x5, [x19, #48]
   9cbe4:	b4000185 	cbz	x5, 9cc14 <CMouseDevice::ReportHandler(unsigned int, int, int, int)+0x64>
   9cbe8:	2a1703e3 	mov	w3, w23
   9cbec:	2a1603e2 	mov	w2, w22
   9cbf0:	f9401bf7 	ldr	x23, [sp, #48]
   9cbf4:	2a1503e1 	mov	w1, w21
   9cbf8:	2a1403e0 	mov	w0, w20
   9cbfc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9cc00:	aa0503f0 	mov	x16, x5
   9cc04:	f9401e64 	ldr	x4, [x19, #56]
   9cc08:	a94153f3 	ldp	x19, x20, [sp, #16]
   9cc0c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9cc10:	d61f0200 	br	x16
   9cc14:	a94153f3 	ldp	x19, x20, [sp, #16]
   9cc18:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9cc1c:	f9401bf7 	ldr	x23, [sp, #48]
   9cc20:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9cc24:	d65f03c0 	ret
   9cc28:	d503201f 	nop
   9cc2c:	d503201f 	nop

000000000009cc30 <CMouseDevice::GetButtonCount() const>:
   9cc30:	b9404400 	ldr	w0, [x0, #68]
   9cc34:	d65f03c0 	ret
   9cc38:	d503201f 	nop
   9cc3c:	d503201f 	nop

000000000009cc40 <CMouseDevice::HasWheel() const>:
   9cc40:	39412000 	ldrb	w0, [x0, #72]
   9cc44:	d65f03c0 	ret
	...

000000000009cc50 <_GLOBAL__sub_I__ZN12CMouseDevice18s_DeviceNumberPoolE>:
   9cc50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9cc54:	910003fd 	mov	x29, sp
   9cc58:	528007e2 	mov	w2, #0x3f                  	// #63
   9cc5c:	52800021 	mov	w1, #0x1                   	// #1
   9cc60:	f9000bf3 	str	x19, [sp, #16]
   9cc64:	b0000113 	adrp	x19, bd000 <CNetDevice::s_SpeedString+0x18>
   9cc68:	9104a273 	add	x19, x19, #0x128
   9cc6c:	aa1303e0 	mov	x0, x19
   9cc70:	94002f0c 	bl	a88a0 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   9cc74:	b0000102 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   9cc78:	90000060 	adrp	x0, a8000 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x20>
   9cc7c:	aa1303e1 	mov	x1, x19
   9cc80:	91074042 	add	x2, x2, #0x1d0
   9cc84:	f9400bf3 	ldr	x19, [sp, #16]
   9cc88:	91240000 	add	x0, x0, #0x900
   9cc8c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9cc90:	140024cc 	b	a5fc0 <__cxa_atexit>
	...

000000000009cca0 <CTouchScreenDevice::~CTouchScreenDevice()>:
   9cca0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9cca4:	b00000e1 	adrp	x1, b9000 <CKeyMap::s_DefaultMap+0x1540>
   9cca8:	9138c021 	add	x1, x1, #0xe30
   9ccac:	910003fd 	mov	x29, sp
   9ccb0:	f9000bf3 	str	x19, [sp, #16]
   9ccb4:	aa0003f3 	mov	x19, x0
   9ccb8:	f9000001 	str	x1, [x0]
   9ccbc:	f900081f 	str	xzr, [x0, #16]
   9ccc0:	f900101f 	str	xzr, [x0, #32]
   9ccc4:	94000803 	bl	9ecd0 <CDeviceNameService::Get()>
   9ccc8:	b9404262 	ldr	w2, [x19, #64]
   9cccc:	b00000e1 	adrp	x1, b9000 <CKeyMap::s_DefaultMap+0x1540>
   9ccd0:	52800003 	mov	w3, #0x0                   	// #0
   9ccd4:	9139c021 	add	x1, x1, #0xe70
   9ccd8:	9400082a 	bl	9ed80 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   9ccdc:	b9404261 	ldr	w1, [x19, #64]
   9cce0:	b0000100 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   9cce4:	9104e000 	add	x0, x0, #0x138
   9cce8:	94002f3a 	bl	a89d0 <CNumberPool::FreeNumber(unsigned int)>
   9ccec:	aa1303e0 	mov	x0, x19
   9ccf0:	f9400bf3 	ldr	x19, [sp, #16]
   9ccf4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9ccf8:	14000662 	b	9e680 <CDevice::~CDevice()>
   9ccfc:	d503201f 	nop

000000000009cd00 <CTouchScreenDevice::~CTouchScreenDevice()>:
   9cd00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9cd04:	b00000e1 	adrp	x1, b9000 <CKeyMap::s_DefaultMap+0x1540>
   9cd08:	9138c021 	add	x1, x1, #0xe30
   9cd0c:	910003fd 	mov	x29, sp
   9cd10:	f9000bf3 	str	x19, [sp, #16]
   9cd14:	aa0003f3 	mov	x19, x0
   9cd18:	f9000001 	str	x1, [x0]
   9cd1c:	f900081f 	str	xzr, [x0, #16]
   9cd20:	f900101f 	str	xzr, [x0, #32]
   9cd24:	940007eb 	bl	9ecd0 <CDeviceNameService::Get()>
   9cd28:	b00000e1 	adrp	x1, b9000 <CKeyMap::s_DefaultMap+0x1540>
   9cd2c:	b9404262 	ldr	w2, [x19, #64]
   9cd30:	52800003 	mov	w3, #0x0                   	// #0
   9cd34:	9139c021 	add	x1, x1, #0xe70
   9cd38:	94000812 	bl	9ed80 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   9cd3c:	b9404261 	ldr	w1, [x19, #64]
   9cd40:	b0000100 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   9cd44:	9104e000 	add	x0, x0, #0x138
   9cd48:	94002f22 	bl	a89d0 <CNumberPool::FreeNumber(unsigned int)>
   9cd4c:	aa1303e0 	mov	x0, x19
   9cd50:	9400064c 	bl	9e680 <CDevice::~CDevice()>
   9cd54:	aa1303e0 	mov	x0, x19
   9cd58:	d2800901 	mov	x1, #0x48                  	// #72
   9cd5c:	f9400bf3 	ldr	x19, [sp, #16]
   9cd60:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9cd64:	14002d67 	b	a8300 <operator delete(void*, unsigned long)>
   9cd68:	d503201f 	nop
   9cd6c:	d503201f 	nop

000000000009cd70 <CTouchScreenDevice::CTouchScreenDevice(void (*)(void*), void*)>:
   9cd70:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9cd74:	910003fd 	mov	x29, sp
   9cd78:	a90153f3 	stp	x19, x20, [sp, #16]
   9cd7c:	aa0003f3 	mov	x19, x0
   9cd80:	aa0203f4 	mov	x20, x2
   9cd84:	f90013f5 	str	x21, [sp, #32]
   9cd88:	aa0103f5 	mov	x21, x1
   9cd8c:	94000671 	bl	9e750 <CDevice::CDevice()>
   9cd90:	b00000e0 	adrp	x0, b9000 <CKeyMap::s_DefaultMap+0x1540>
   9cd94:	9138c000 	add	x0, x0, #0xe30
   9cd98:	a9015275 	stp	x21, x20, [x19, #16]
   9cd9c:	d2807d04 	mov	x4, #0x3e8                 	// #1000
   9cda0:	d284e203 	mov	x3, #0x2710                	// #10000
   9cda4:	f2c07d04 	movk	x4, #0x3e8, lsl #32
   9cda8:	f2c4e203 	movk	x3, #0x2710, lsl #32
   9cdac:	b00000f4 	adrp	x20, b9000 <CKeyMap::s_DefaultMap+0x1540>
   9cdb0:	9139c294 	add	x20, x20, #0xe70
   9cdb4:	f9000260 	str	x0, [x19]
   9cdb8:	b0000100 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   9cdbc:	aa1403e2 	mov	x2, x20
   9cdc0:	a902127f 	stp	xzr, x4, [x19, #32]
   9cdc4:	52800021 	mov	w1, #0x1                   	// #1
   9cdc8:	9104e000 	add	x0, x0, #0x138
   9cdcc:	a9030e7f 	stp	xzr, x3, [x19, #48]
   9cdd0:	94002ed0 	bl	a8910 <CNumberPool::AllocateNumber(bool, char const*)>
   9cdd4:	b9004260 	str	w0, [x19, #64]
   9cdd8:	940007be 	bl	9ecd0 <CDeviceNameService::Get()>
   9cddc:	aa1303e3 	mov	x3, x19
   9cde0:	aa1403e1 	mov	x1, x20
   9cde4:	a94153f3 	ldp	x19, x20, [sp, #16]
   9cde8:	52800004 	mov	w4, #0x0                   	// #0
   9cdec:	b9404062 	ldr	w2, [x3, #64]
   9cdf0:	f94013f5 	ldr	x21, [sp, #32]
   9cdf4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9cdf8:	140007c2 	b	9ed00 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   9cdfc:	d503201f 	nop

000000000009ce00 <CTouchScreenDevice::Update()>:
   9ce00:	f9400801 	ldr	x1, [x0, #16]
   9ce04:	b4000081 	cbz	x1, 9ce14 <CTouchScreenDevice::Update()+0x14>
   9ce08:	aa0103f0 	mov	x16, x1
   9ce0c:	f9400c00 	ldr	x0, [x0, #24]
   9ce10:	d61f0200 	br	x16
   9ce14:	d65f03c0 	ret
   9ce18:	d503201f 	nop
   9ce1c:	d503201f 	nop

000000000009ce20 <CTouchScreenDevice::RegisterEventHandler(void (*)(TTouchScreenEvent, unsigned int, unsigned int, unsigned int))>:
   9ce20:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9ce24:	910003fd 	mov	x29, sp
   9ce28:	f9401002 	ldr	x2, [x0, #32]
   9ce2c:	b50000a2 	cbnz	x2, 9ce40 <CTouchScreenDevice::RegisterEventHandler(void (*)(TTouchScreenEvent, unsigned int, unsigned int, unsigned int))+0x20>
   9ce30:	f9001001 	str	x1, [x0, #32]
   9ce34:	b4000121 	cbz	x1, 9ce58 <CTouchScreenDevice::RegisterEventHandler(void (*)(TTouchScreenEvent, unsigned int, unsigned int, unsigned int))+0x38>
   9ce38:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9ce3c:	d65f03c0 	ret
   9ce40:	900000c1 	adrp	x1, b4000 <_etext+0x3158>
   9ce44:	900000c0 	adrp	x0, b4000 <_etext+0x3158>
   9ce48:	9133c021 	add	x1, x1, #0xcf0
   9ce4c:	91340000 	add	x0, x0, #0xd00
   9ce50:	528007e2 	mov	w2, #0x3f                  	// #63
   9ce54:	940003bb 	bl	9dd40 <assertion_failed>
   9ce58:	900000c1 	adrp	x1, b4000 <_etext+0x3158>
   9ce5c:	900000c0 	adrp	x0, b4000 <_etext+0x3158>
   9ce60:	9133c021 	add	x1, x1, #0xcf0
   9ce64:	91178000 	add	x0, x0, #0x5e0
   9ce68:	52800822 	mov	w2, #0x41                  	// #65
   9ce6c:	940003b5 	bl	9dd40 <assertion_failed>

000000000009ce70 <CTouchScreenDevice::SetCalibration(unsigned int const*, unsigned int, unsigned int)>:
   9ce70:	29401427 	ldp	w7, w5, [x1]
   9ce74:	aa0003e4 	mov	x4, x0
   9ce78:	6b0500ff 	cmp	w7, w5
   9ce7c:	540004c2 	b.cs	9cf14 <CTouchScreenDevice::SetCalibration(unsigned int const*, unsigned int, unsigned int)+0xa4>  // b.hs, b.nlast
   9ce80:	29411828 	ldp	w8, w6, [x1, #8]
   9ce84:	52800000 	mov	w0, #0x0                   	// #0
   9ce88:	6b06011f 	cmp	w8, w6
   9ce8c:	54000422 	b.cs	9cf10 <CTouchScreenDevice::SetCalibration(unsigned int const*, unsigned int, unsigned int)+0xa0>  // b.hs, b.nlast
   9ce90:	7100005f 	cmp	w2, #0x0
   9ce94:	1a9f17e0 	cset	w0, eq	// eq = none
   9ce98:	7100007f 	cmp	w3, #0x0
   9ce9c:	1a9f17e9 	cset	w9, eq	// eq = none
   9cea0:	2a090000 	orr	w0, w0, w9
   9cea4:	35000380 	cbnz	w0, 9cf14 <CTouchScreenDevice::SetCalibration(unsigned int const*, unsigned int, unsigned int)+0xa4>
   9cea8:	110004a5 	add	w5, w5, #0x1
   9ceac:	110004c6 	add	w6, w6, #0x1
   9ceb0:	6b0700a5 	subs	w5, w5, w7
   9ceb4:	4b0800c6 	sub	w6, w6, w8
   9ceb8:	7a4018c4 	ccmp	w6, #0x0, #0x4, ne	// ne = any
   9cebc:	540002a0 	b.eq	9cf10 <CTouchScreenDevice::SetCalibration(unsigned int const*, unsigned int, unsigned int)+0xa0>  // b.none
   9cec0:	52807d07 	mov	w7, #0x3e8                 	// #1000
   9cec4:	5289ba69 	mov	w9, #0x4dd3                	// #19923
   9cec8:	72a20c49 	movk	w9, #0x1062, lsl #16
   9cecc:	52800020 	mov	w0, #0x1                   	// #1
   9ced0:	1b077c48 	mul	w8, w2, w7
   9ced4:	1b077c67 	mul	w7, w3, w7
   9ced8:	1ac50908 	udiv	w8, w8, w5
   9cedc:	1ac608e5 	udiv	w5, w7, w6
   9cee0:	b9002888 	str	w8, [x4, #40]
   9cee4:	b9400026 	ldr	w6, [x1]
   9cee8:	1b067d08 	mul	w8, w8, w6
   9ceec:	9ba97d08 	umull	x8, w8, w9
   9cef0:	d366fd08 	lsr	x8, x8, #38
   9cef4:	2905a085 	stp	w5, w8, [x4, #44]
   9cef8:	b9400821 	ldr	w1, [x1, #8]
   9cefc:	b9003c83 	str	w3, [x4, #60]
   9cf00:	1b017ca5 	mul	w5, w5, w1
   9cf04:	9ba97ca5 	umull	x5, w5, w9
   9cf08:	d366fca5 	lsr	x5, x5, #38
   9cf0c:	29068885 	stp	w5, w2, [x4, #52]
   9cf10:	d65f03c0 	ret
   9cf14:	52800000 	mov	w0, #0x0                   	// #0
   9cf18:	d65f03c0 	ret
   9cf1c:	d503201f 	nop

000000000009cf20 <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)>:
   9cf20:	aa0003e6 	mov	x6, x0
   9cf24:	2a0103e0 	mov	w0, w1
   9cf28:	f94010c7 	ldr	x7, [x6, #32]
   9cf2c:	2a0203e1 	mov	w1, w2
   9cf30:	b4000347 	cbz	x7, 9cf98 <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)+0x78>
   9cf34:	7100041f 	cmp	w0, #0x1
   9cf38:	54000320 	b.eq	9cf9c <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)+0x7c>  // b.none
   9cf3c:	b94028c5 	ldr	w5, [x6, #40]
   9cf40:	5289ba62 	mov	w2, #0x4dd3                	// #19923
   9cf44:	72a20c42 	movk	w2, #0x1062, lsl #16
   9cf48:	b94030c9 	ldr	w9, [x6, #48]
   9cf4c:	b94038c8 	ldr	w8, [x6, #56]
   9cf50:	1b057c63 	mul	w3, w3, w5
   9cf54:	9ba27c65 	umull	x5, w3, w2
   9cf58:	d366fca5 	lsr	x5, x5, #38
   9cf5c:	4b0900a5 	sub	w5, w5, w9
   9cf60:	6b05011f 	cmp	w8, w5
   9cf64:	540001a9 	b.ls	9cf98 <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)+0x78>  // b.plast
   9cf68:	b9402cc3 	ldr	w3, [x6, #44]
   9cf6c:	b94034c8 	ldr	w8, [x6, #52]
   9cf70:	b9403cc6 	ldr	w6, [x6, #60]
   9cf74:	1b037c83 	mul	w3, w4, w3
   9cf78:	9ba27c63 	umull	x3, w3, w2
   9cf7c:	d366fc63 	lsr	x3, x3, #38
   9cf80:	4b080063 	sub	w3, w3, w8
   9cf84:	6b0300df 	cmp	w6, w3
   9cf88:	54000089 	b.ls	9cf98 <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)+0x78>  // b.plast
   9cf8c:	2a0503e2 	mov	w2, w5
   9cf90:	aa0703f0 	mov	x16, x7
   9cf94:	d61f0200 	br	x16
   9cf98:	d65f03c0 	ret
   9cf9c:	52800003 	mov	w3, #0x0                   	// #0
   9cfa0:	52800002 	mov	w2, #0x0                   	// #0
   9cfa4:	aa0703f0 	mov	x16, x7
   9cfa8:	d61f0200 	br	x16
   9cfac:	00000000 	udf	#0

000000000009cfb0 <_GLOBAL__sub_I__ZN18CTouchScreenDevice18s_DeviceNumberPoolE>:
   9cfb0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9cfb4:	910003fd 	mov	x29, sp
   9cfb8:	528007e2 	mov	w2, #0x3f                  	// #63
   9cfbc:	52800021 	mov	w1, #0x1                   	// #1
   9cfc0:	f9000bf3 	str	x19, [sp, #16]
   9cfc4:	b0000113 	adrp	x19, bd000 <CNetDevice::s_SpeedString+0x18>
   9cfc8:	9104e273 	add	x19, x19, #0x138
   9cfcc:	aa1303e0 	mov	x0, x19
   9cfd0:	94002e34 	bl	a88a0 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   9cfd4:	b0000102 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   9cfd8:	90000060 	adrp	x0, a8000 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x20>
   9cfdc:	aa1303e1 	mov	x1, x19
   9cfe0:	91074042 	add	x2, x2, #0x1d0
   9cfe4:	f9400bf3 	ldr	x19, [sp, #16]
   9cfe8:	91240000 	add	x0, x0, #0x900
   9cfec:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9cff0:	140023f4 	b	a5fc0 <__cxa_atexit>
	...

000000000009d000 <CMouseBehaviour::CMouseBehaviour()>:
   9d000:	a9007c1f 	stp	xzr, xzr, [x0]
   9d004:	7900201f 	strh	wzr, [x0, #16]
   9d008:	b900141f 	str	wzr, [x0, #20]
   9d00c:	f9000c1f 	str	xzr, [x0, #24]
   9d010:	d65f03c0 	ret
   9d014:	d503201f 	nop
   9d018:	d503201f 	nop
   9d01c:	d503201f 	nop

000000000009d020 <CMouseBehaviour::Setup(unsigned int, unsigned int)>:
   9d020:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   9d024:	910003fd 	mov	x29, sp
   9d028:	aa0003e4 	mov	x4, x0
   9d02c:	b9400000 	ldr	w0, [x0]
   9d030:	f9000bf3 	str	x19, [sp, #16]
   9d034:	35000520 	cbnz	w0, 9d0d8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xb8>
   9d038:	b9000081 	str	w1, [x4]
   9d03c:	340005a1 	cbz	w1, 9d0f0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xd0>
   9d040:	b9400480 	ldr	w0, [x4, #4]
   9d044:	35000620 	cbnz	w0, 9d108 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xe8>
   9d048:	b9000482 	str	w2, [x4, #4]
   9d04c:	340006a2 	cbz	w2, 9d120 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x100>
   9d050:	11000421 	add	w1, w1, #0x1
   9d054:	11000442 	add	w2, w2, #0x1
   9d058:	53017c23 	lsr	w3, w1, #1
   9d05c:	53017c42 	lsr	w2, w2, #1
   9d060:	52800001 	mov	w1, #0x0                   	// #0
   9d064:	910083e0 	add	x0, sp, #0x20
   9d068:	29010883 	stp	w3, w2, [x4, #8]
   9d06c:	94000359 	bl	9ddd0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   9d070:	52800201 	mov	w1, #0x10                  	// #16
   9d074:	900000e5 	adrp	x5, b9000 <CKeyMap::s_DefaultMap+0x1540>
   9d078:	9139e0a5 	add	x5, x5, #0xe78
   9d07c:	d2800206 	mov	x6, #0x10                  	// #16
   9d080:	f80443ff 	stur	xzr, [sp, #68]
   9d084:	320204a5 	orr	w5, w5, #0xc0000000
   9d088:	910083e0 	add	x0, sp, #0x20
   9d08c:	b90037e1 	str	w1, [sp, #52]
   9d090:	52800304 	mov	w4, #0x18                  	// #24
   9d094:	52800483 	mov	w3, #0x24                  	// #36
   9d098:	f9001fe6 	str	x6, [sp, #56]
   9d09c:	9100a3e2 	add	x2, sp, #0x28
   9d0a0:	52900201 	mov	w1, #0x8010                	// #32784
   9d0a4:	b90043e5 	str	w5, [sp, #64]
   9d0a8:	940003aa 	bl	9df50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   9d0ac:	72001c13 	ands	w19, w0, #0xff
   9d0b0:	54000080 	b.eq	9d0c0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xa0>  // b.none
   9d0b4:	b94037e0 	ldr	w0, [sp, #52]
   9d0b8:	7100001f 	cmp	w0, #0x0
   9d0bc:	1a9f17f3 	cset	w19, eq	// eq = none
   9d0c0:	910083e0 	add	x0, sp, #0x20
   9d0c4:	94000347 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   9d0c8:	2a1303e0 	mov	w0, w19
   9d0cc:	f9400bf3 	ldr	x19, [sp, #16]
   9d0d0:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9d0d4:	d65f03c0 	ret
   9d0d8:	f00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9d0dc:	f00000a0 	adrp	x0, b4000 <_etext+0x3158>
   9d0e0:	91346021 	add	x1, x1, #0xd18
   9d0e4:	9134c000 	add	x0, x0, #0xd30
   9d0e8:	52800aa2 	mov	w2, #0x55                  	// #85
   9d0ec:	94000315 	bl	9dd40 <assertion_failed>
   9d0f0:	f00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9d0f4:	f00000a0 	adrp	x0, b4000 <_etext+0x3158>
   9d0f8:	91346021 	add	x1, x1, #0xd18
   9d0fc:	91352000 	add	x0, x0, #0xd48
   9d100:	52800ae2 	mov	w2, #0x57                  	// #87
   9d104:	9400030f 	bl	9dd40 <assertion_failed>
   9d108:	f00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9d10c:	f00000a0 	adrp	x0, b4000 <_etext+0x3158>
   9d110:	91346021 	add	x1, x1, #0xd18
   9d114:	91358000 	add	x0, x0, #0xd60
   9d118:	52800b22 	mov	w2, #0x59                  	// #89
   9d11c:	94000309 	bl	9dd40 <assertion_failed>
   9d120:	f00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9d124:	f00000a0 	adrp	x0, b4000 <_etext+0x3158>
   9d128:	91346021 	add	x1, x1, #0xd18
   9d12c:	9135e000 	add	x0, x0, #0xd78
   9d130:	52800b62 	mov	w2, #0x5b                  	// #91
   9d134:	94000303 	bl	9dd40 <assertion_failed>
   9d138:	d503201f 	nop
   9d13c:	d503201f 	nop

000000000009d140 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))>:
   9d140:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9d144:	910003fd 	mov	x29, sp
   9d148:	f9400c02 	ldr	x2, [x0, #24]
   9d14c:	b50000a2 	cbnz	x2, 9d160 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))+0x20>
   9d150:	f9000c01 	str	x1, [x0, #24]
   9d154:	b4000121 	cbz	x1, 9d178 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))+0x38>
   9d158:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9d15c:	d65f03c0 	ret
   9d160:	f00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9d164:	f00000a0 	adrp	x0, b4000 <_etext+0x3158>
   9d168:	91346021 	add	x1, x1, #0xd18
   9d16c:	91340000 	add	x0, x0, #0xd00
   9d170:	528011e2 	mov	w2, #0x8f                  	// #143
   9d174:	940002f3 	bl	9dd40 <assertion_failed>
   9d178:	f00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9d17c:	f00000a0 	adrp	x0, b4000 <_etext+0x3158>
   9d180:	91346021 	add	x1, x1, #0xd18
   9d184:	91178000 	add	x0, x0, #0x5e0
   9d188:	52801222 	mov	w2, #0x91                  	// #145
   9d18c:	940002ed 	bl	9dd40 <assertion_failed>

000000000009d190 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)>:
   9d190:	b9400005 	ldr	w5, [x0]
   9d194:	34000b45 	cbz	w5, 9d2fc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x16c>
   9d198:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9d19c:	910003fd 	mov	x29, sp
   9d1a0:	a90153f3 	stp	x19, x20, [sp, #16]
   9d1a4:	aa0003f3 	mov	x19, x0
   9d1a8:	a9025bf5 	stp	x21, x22, [sp, #32]
   9d1ac:	2a0403f5 	mov	w21, w4
   9d1b0:	b9400404 	ldr	w4, [x0, #4]
   9d1b4:	340009c4 	cbz	w4, 9d2ec <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x15c>
   9d1b8:	0b020c42 	add	w2, w2, w2, lsl #3
   9d1bc:	2a0103f4 	mov	w20, w1
   9d1c0:	528ccce1 	mov	w1, #0x6667                	// #26215
   9d1c4:	72acccc1 	movk	w1, #0x6666, lsl #16
   9d1c8:	0b030c60 	add	w0, w3, w3, lsl #3
   9d1cc:	29410e67 	ldp	w7, w3, [x19, #8]
   9d1d0:	531f7842 	lsl	w2, w2, #1
   9d1d4:	531f7800 	lsl	w0, w0, #1
   9d1d8:	9b217c46 	smull	x6, w2, w1
   9d1dc:	9b217c01 	smull	x1, w0, w1
   9d1e0:	9362fcc6 	asr	x6, x6, #34
   9d1e4:	4b827cc2 	sub	w2, w6, w2, asr #31
   9d1e8:	9362fc21 	asr	x1, x1, #34
   9d1ec:	4b807c20 	sub	w0, w1, w0, asr #31
   9d1f0:	0b070042 	add	w2, w2, w7
   9d1f4:	6b0200bf 	cmp	w5, w2
   9d1f8:	0b000060 	add	w0, w3, w0
   9d1fc:	54000829 	b.ls	9d300 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x170>  // b.plast
   9d200:	6b00009f 	cmp	w4, w0
   9d204:	b9000a62 	str	w2, [x19, #8]
   9d208:	540008e8 	b.hi	9d324 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x194>  // b.pmore
   9d20c:	6b07005f 	cmp	w2, w7
   9d210:	b9000e63 	str	w3, [x19, #12]
   9d214:	54000120 	b.eq	9d238 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xa8>  // b.none
   9d218:	52800020 	mov	w0, #0x1                   	// #1
   9d21c:	f9400e65 	ldr	x5, [x19, #24]
   9d220:	39004260 	strb	w0, [x19, #16]
   9d224:	b40000a5 	cbz	x5, 9d238 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xa8>
   9d228:	2a1503e4 	mov	w4, w21
   9d22c:	2a1403e1 	mov	w1, w20
   9d230:	52800000 	mov	w0, #0x0                   	// #0
   9d234:	d63f00a0 	blr	x5
   9d238:	b9401660 	ldr	w0, [x19, #20]
   9d23c:	6b14001f 	cmp	w0, w20
   9d240:	54000440 	b.eq	9d2c8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x138>  // b.none
   9d244:	f9400e61 	ldr	x1, [x19, #24]
   9d248:	52800016 	mov	w22, #0x0                   	// #0
   9d24c:	f9001bf7 	str	x23, [sp, #48]
   9d250:	52800037 	mov	w23, #0x1                   	// #1
   9d254:	b4000761 	cbz	x1, 9d340 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x1b0>
   9d258:	1ad622e1 	lsl	w1, w23, w22
   9d25c:	2a1503e4 	mov	w4, w21
   9d260:	6a01001f 	tst	w0, w1
   9d264:	0a010280 	and	w0, w20, w1
   9d268:	540001e0 	b.eq	9d2a4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x114>  // b.none
   9d26c:	350000a0 	cbnz	w0, 9d280 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xf0>
   9d270:	29410e62 	ldp	w2, w3, [x19, #8]
   9d274:	52800040 	mov	w0, #0x2                   	// #2
   9d278:	f9400e65 	ldr	x5, [x19, #24]
   9d27c:	d63f00a0 	blr	x5
   9d280:	110006d6 	add	w22, w22, #0x1
   9d284:	710016df 	cmp	w22, #0x5
   9d288:	540001e0 	b.eq	9d2c4 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x134>  // b.none
   9d28c:	b9401660 	ldr	w0, [x19, #20]
   9d290:	1ad622e1 	lsl	w1, w23, w22
   9d294:	2a1503e4 	mov	w4, w21
   9d298:	6a01001f 	tst	w0, w1
   9d29c:	0a010280 	and	w0, w20, w1
   9d2a0:	54fffe61 	b.ne	9d26c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xdc>  // b.any
   9d2a4:	34fffee0 	cbz	w0, 9d280 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xf0>
   9d2a8:	29410e62 	ldp	w2, w3, [x19, #8]
   9d2ac:	52800020 	mov	w0, #0x1                   	// #1
   9d2b0:	110006d6 	add	w22, w22, #0x1
   9d2b4:	f9400e65 	ldr	x5, [x19, #24]
   9d2b8:	d63f00a0 	blr	x5
   9d2bc:	710016df 	cmp	w22, #0x5
   9d2c0:	54fffe61 	b.ne	9d28c <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xfc>  // b.any
   9d2c4:	f9401bf7 	ldr	x23, [sp, #48]
   9d2c8:	34000115 	cbz	w21, 9d2e8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x158>
   9d2cc:	f9400e65 	ldr	x5, [x19, #24]
   9d2d0:	b40000c5 	cbz	x5, 9d2e8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x158>
   9d2d4:	29410e62 	ldp	w2, w3, [x19, #8]
   9d2d8:	2a1503e4 	mov	w4, w21
   9d2dc:	2a1403e1 	mov	w1, w20
   9d2e0:	52800060 	mov	w0, #0x3                   	// #3
   9d2e4:	d63f00a0 	blr	x5
   9d2e8:	b9001674 	str	w20, [x19, #20]
   9d2ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d2f0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9d2f4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9d2f8:	d65f03c0 	ret
   9d2fc:	d65f03c0 	ret
   9d300:	6b00009f 	cmp	w4, w0
   9d304:	b9000a67 	str	w7, [x19, #8]
   9d308:	54000189 	b.ls	9d338 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x1a8>  // b.plast
   9d30c:	2a0703e2 	mov	w2, w7
   9d310:	b9000e60 	str	w0, [x19, #12]
   9d314:	6b00007f 	cmp	w3, w0
   9d318:	54fff900 	b.eq	9d238 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xa8>  // b.none
   9d31c:	2a0003e3 	mov	w3, w0
   9d320:	17ffffbe 	b	9d218 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x88>
   9d324:	6b07005f 	cmp	w2, w7
   9d328:	b9000e60 	str	w0, [x19, #12]
   9d32c:	54ffff40 	b.eq	9d314 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x184>  // b.none
   9d330:	2a0003e3 	mov	w3, w0
   9d334:	17ffffb9 	b	9d218 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x88>
   9d338:	b9000e63 	str	w3, [x19, #12]
   9d33c:	17ffffbf 	b	9d238 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xa8>
   9d340:	f9401bf7 	ldr	x23, [sp, #48]
   9d344:	b9001674 	str	w20, [x19, #20]
   9d348:	17ffffe9 	b	9d2ec <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x15c>
   9d34c:	d503201f 	nop

000000000009d350 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>:
   9d350:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   9d354:	910003fd 	mov	x29, sp
   9d358:	a90153f3 	stp	x19, x20, [sp, #16]
   9d35c:	2a0103f3 	mov	w19, w1
   9d360:	2a0003f4 	mov	w20, w0
   9d364:	52800001 	mov	w1, #0x0                   	// #0
   9d368:	9100e3e0 	add	x0, sp, #0x38
   9d36c:	f90013f5 	str	x21, [sp, #32]
   9d370:	12001c55 	and	w21, w2, #0xff
   9d374:	94000297 	bl	9ddd0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   9d378:	52800025 	mov	w5, #0x1                   	// #1
   9d37c:	9100e3e0 	add	x0, sp, #0x38
   9d380:	2909d3f5 	stp	w21, w20, [sp, #76]
   9d384:	52800204 	mov	w4, #0x10                  	// #16
   9d388:	52800383 	mov	w3, #0x1c                  	// #28
   9d38c:	910103e2 	add	x2, sp, #0x40
   9d390:	52900221 	mov	w1, #0x8011                	// #32785
   9d394:	290a97f3 	stp	w19, w5, [sp, #84]
   9d398:	940002ee 	bl	9df50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   9d39c:	72001c13 	ands	w19, w0, #0xff
   9d3a0:	54000080 	b.eq	9d3b0 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)+0x60>  // b.none
   9d3a4:	b9404fe0 	ldr	w0, [sp, #76]
   9d3a8:	7100001f 	cmp	w0, #0x0
   9d3ac:	1a9f17f3 	cset	w19, eq	// eq = none
   9d3b0:	9100e3e0 	add	x0, sp, #0x38
   9d3b4:	9400028b 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   9d3b8:	2a1303e0 	mov	w0, w19
   9d3bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d3c0:	f94013f5 	ldr	x21, [sp, #32]
   9d3c4:	a8c67bfd 	ldp	x29, x30, [sp], #96
   9d3c8:	d65f03c0 	ret
   9d3cc:	d503201f 	nop

000000000009d3d0 <CMouseBehaviour::~CMouseBehaviour()>:
   9d3d0:	39404401 	ldrb	w1, [x0, #17]
   9d3d4:	f9000c1f 	str	xzr, [x0, #24]
   9d3d8:	35000041 	cbnz	w1, 9d3e0 <CMouseBehaviour::~CMouseBehaviour()+0x10>
   9d3dc:	d65f03c0 	ret
   9d3e0:	52800002 	mov	w2, #0x0                   	// #0
   9d3e4:	52800001 	mov	w1, #0x0                   	// #0
   9d3e8:	52800000 	mov	w0, #0x0                   	// #0
   9d3ec:	17ffffd9 	b	9d350 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>

000000000009d3f0 <CMouseBehaviour::Release()>:
   9d3f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9d3f4:	910003fd 	mov	x29, sp
   9d3f8:	f9000bf3 	str	x19, [sp, #16]
   9d3fc:	aa0003f3 	mov	x19, x0
   9d400:	b9400000 	ldr	w0, [x0]
   9d404:	34000100 	cbz	w0, 9d424 <CMouseBehaviour::Release()+0x34>
   9d408:	b9400660 	ldr	w0, [x19, #4]
   9d40c:	340000c0 	cbz	w0, 9d424 <CMouseBehaviour::Release()+0x34>
   9d410:	39404660 	ldrb	w0, [x19, #17]
   9d414:	350000e0 	cbnz	w0, 9d430 <CMouseBehaviour::Release()+0x40>
   9d418:	a9007e7f 	stp	xzr, xzr, [x19]
   9d41c:	7900227f 	strh	wzr, [x19, #16]
   9d420:	b900167f 	str	wzr, [x19, #20]
   9d424:	f9400bf3 	ldr	x19, [sp, #16]
   9d428:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9d42c:	d65f03c0 	ret
   9d430:	52800002 	mov	w2, #0x0                   	// #0
   9d434:	52800001 	mov	w1, #0x0                   	// #0
   9d438:	52800000 	mov	w0, #0x0                   	// #0
   9d43c:	97ffffc5 	bl	9d350 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   9d440:	17fffff6 	b	9d418 <CMouseBehaviour::Release()+0x28>
   9d444:	d503201f 	nop
   9d448:	d503201f 	nop
   9d44c:	d503201f 	nop

000000000009d450 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>:
   9d450:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9d454:	910003fd 	mov	x29, sp
   9d458:	b9400005 	ldr	w5, [x0]
   9d45c:	34000285 	cbz	w5, 9d4ac <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x5c>
   9d460:	aa0003e3 	mov	x3, x0
   9d464:	b9400400 	ldr	w0, [x0, #4]
   9d468:	340002e0 	cbz	w0, 9d4c4 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x74>
   9d46c:	2a0103e4 	mov	w4, w1
   9d470:	6b02001f 	cmp	w0, w2
   9d474:	7a4480a0 	ccmp	w5, w4, #0x0, hi	// hi = pmore
   9d478:	2a0203e1 	mov	w1, w2
   9d47c:	52800000 	mov	w0, #0x0                   	// #0
   9d480:	54000068 	b.hi	9d48c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x3c>  // b.pmore
   9d484:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9d488:	d65f03c0 	ret
   9d48c:	39404462 	ldrb	w2, [x3, #17]
   9d490:	52800020 	mov	w0, #0x1                   	// #1
   9d494:	29010464 	stp	w4, w1, [x3, #8]
   9d498:	34ffff62 	cbz	w2, 9d484 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x34>
   9d49c:	2a0003e2 	mov	w2, w0
   9d4a0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9d4a4:	2a0403e0 	mov	w0, w4
   9d4a8:	17ffffaa 	b	9d350 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   9d4ac:	f00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9d4b0:	f00000a0 	adrp	x0, b4000 <_etext+0x3158>
   9d4b4:	91346021 	add	x1, x1, #0xd18
   9d4b8:	91352000 	add	x0, x0, #0xd48
   9d4bc:	528012c2 	mov	w2, #0x96                  	// #150
   9d4c0:	94000220 	bl	9dd40 <assertion_failed>
   9d4c4:	f00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9d4c8:	f00000a0 	adrp	x0, b4000 <_etext+0x3158>
   9d4cc:	91346021 	add	x1, x1, #0xd18
   9d4d0:	9135e000 	add	x0, x0, #0xd78
   9d4d4:	528012e2 	mov	w2, #0x97                  	// #151
   9d4d8:	9400021a 	bl	9dd40 <assertion_failed>
   9d4dc:	d503201f 	nop

000000000009d4e0 <CMouseBehaviour::ShowCursor(bool)>:
   9d4e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9d4e4:	aa0003e3 	mov	x3, x0
   9d4e8:	12001c22 	and	w2, w1, #0xff
   9d4ec:	910003fd 	mov	x29, sp
   9d4f0:	b9400001 	ldr	w1, [x0]
   9d4f4:	b9400800 	ldr	w0, [x0, #8]
   9d4f8:	f9000bf3 	str	x19, [sp, #16]
   9d4fc:	39404473 	ldrb	w19, [x3, #17]
   9d500:	39004462 	strb	w2, [x3, #17]
   9d504:	6b01001f 	cmp	w0, w1
   9d508:	54000142 	b.cs	9d530 <CMouseBehaviour::ShowCursor(bool)+0x50>  // b.hs, b.nlast
   9d50c:	b9400464 	ldr	w4, [x3, #4]
   9d510:	b9400c61 	ldr	w1, [x3, #12]
   9d514:	6b04003f 	cmp	w1, w4
   9d518:	54000182 	b.cs	9d548 <CMouseBehaviour::ShowCursor(bool)+0x68>  // b.hs, b.nlast
   9d51c:	97ffff8d 	bl	9d350 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   9d520:	2a1303e0 	mov	w0, w19
   9d524:	f9400bf3 	ldr	x19, [sp, #16]
   9d528:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9d52c:	d65f03c0 	ret
   9d530:	f00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9d534:	f00000a0 	adrp	x0, b4000 <_etext+0x3158>
   9d538:	91346021 	add	x1, x1, #0xd18
   9d53c:	91364000 	add	x0, x0, #0xd90
   9d540:	528015c2 	mov	w2, #0xae                  	// #174
   9d544:	940001ff 	bl	9dd40 <assertion_failed>
   9d548:	f00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9d54c:	f00000a0 	adrp	x0, b4000 <_etext+0x3158>
   9d550:	91346021 	add	x1, x1, #0xd18
   9d554:	9136c000 	add	x0, x0, #0xdb0
   9d558:	528015e2 	mov	w2, #0xaf                  	// #175
   9d55c:	940001f9 	bl	9dd40 <assertion_failed>

000000000009d560 <CMouseBehaviour::UpdateCursor()>:
   9d560:	aa0003e1 	mov	x1, x0
   9d564:	39404400 	ldrb	w0, [x0, #17]
   9d568:	34000060 	cbz	w0, 9d574 <CMouseBehaviour::UpdateCursor()+0x14>
   9d56c:	39404020 	ldrb	w0, [x1, #16]
   9d570:	35000040 	cbnz	w0, 9d578 <CMouseBehaviour::UpdateCursor()+0x18>
   9d574:	d65f03c0 	ret
   9d578:	52800022 	mov	w2, #0x1                   	// #1
   9d57c:	3900403f 	strb	wzr, [x1, #16]
   9d580:	29410420 	ldp	w0, w1, [x1, #8]
   9d584:	17ffff73 	b	9d350 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
	...

000000000009d590 <CPartitionManager::CPartitionManager(CDevice*, char const*)>:
   9d590:	aa0103e3 	mov	x3, x1
   9d594:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9d598:	910003fd 	mov	x29, sp
   9d59c:	aa0203e1 	mov	x1, x2
   9d5a0:	f9000bf3 	str	x19, [sp, #16]
   9d5a4:	aa0003f3 	mov	x19, x0
   9d5a8:	f8008403 	str	x3, [x0], #8
   9d5ac:	94001c31 	bl	a4670 <CString::CString(char const*)>
   9d5b0:	a902fe7f 	stp	xzr, xzr, [x19, #40]
   9d5b4:	a903fe7f 	stp	xzr, xzr, [x19, #56]
   9d5b8:	f9400bf3 	ldr	x19, [sp, #16]
   9d5bc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9d5c0:	d65f03c0 	ret
   9d5c4:	d503201f 	nop
   9d5c8:	d503201f 	nop
   9d5cc:	d503201f 	nop

000000000009d5d0 <CPartitionManager::~CPartitionManager()>:
   9d5d0:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   9d5d4:	910003fd 	mov	x29, sp
   9d5d8:	a90153f3 	stp	x19, x20, [sp, #16]
   9d5dc:	9100a013 	add	x19, x0, #0x28
   9d5e0:	a9025bf5 	stp	x21, x22, [sp, #32]
   9d5e4:	aa0003f6 	mov	x22, x0
   9d5e8:	52800015 	mov	w21, #0x0                   	// #0
   9d5ec:	a90363f7 	stp	x23, x24, [sp, #48]
   9d5f0:	f00000b7 	adrp	x23, b4000 <_etext+0x3158>
   9d5f4:	913742f7 	add	x23, x23, #0xdd0
   9d5f8:	91012018 	add	x24, x0, #0x48
   9d5fc:	f90023f9 	str	x25, [sp, #64]
   9d600:	91002019 	add	x25, x0, #0x8
   9d604:	f9400262 	ldr	x2, [x19]
   9d608:	910143e0 	add	x0, sp, #0x50
   9d60c:	b4000342 	cbz	x2, 9d674 <CPartitionManager::~CPartitionManager()+0xa4>
   9d610:	94001c10 	bl	a4650 <CString::CString()>
   9d614:	aa1903e0 	mov	x0, x25
   9d618:	110006b5 	add	w21, w21, #0x1
   9d61c:	94001c51 	bl	a4760 <CString::operator char const*() const>
   9d620:	aa0003e2 	mov	x2, x0
   9d624:	2a1503e3 	mov	w3, w21
   9d628:	aa1703e1 	mov	x1, x23
   9d62c:	910143e0 	add	x0, sp, #0x50
   9d630:	94002240 	bl	a5f30 <CString::Format(char const*, ...)>
   9d634:	940005a7 	bl	9ecd0 <CDeviceNameService::Get()>
   9d638:	aa0003f4 	mov	x20, x0
   9d63c:	910143e0 	add	x0, sp, #0x50
   9d640:	94001c48 	bl	a4760 <CString::operator char const*() const>
   9d644:	aa0003e1 	mov	x1, x0
   9d648:	52800022 	mov	w2, #0x1                   	// #1
   9d64c:	aa1403e0 	mov	x0, x20
   9d650:	940004ec 	bl	9ea00 <CDeviceNameService::RemoveDevice(char const*, bool)>
   9d654:	f9400260 	ldr	x0, [x19]
   9d658:	b4000080 	cbz	x0, 9d668 <CPartitionManager::~CPartitionManager()+0x98>
   9d65c:	f9400001 	ldr	x1, [x0]
   9d660:	f9400421 	ldr	x1, [x1, #8]
   9d664:	d63f0020 	blr	x1
   9d668:	910143e0 	add	x0, sp, #0x50
   9d66c:	f900027f 	str	xzr, [x19]
   9d670:	94001bbc 	bl	a4560 <CString::~CString()>
   9d674:	91002273 	add	x19, x19, #0x8
   9d678:	eb18027f 	cmp	x19, x24
   9d67c:	54fffc41 	b.ne	9d604 <CPartitionManager::~CPartitionManager()+0x34>  // b.any
   9d680:	aa1903e0 	mov	x0, x25
   9d684:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d688:	a94363f7 	ldp	x23, x24, [sp, #48]
   9d68c:	f94023f9 	ldr	x25, [sp, #64]
   9d690:	f90002df 	str	xzr, [x22]
   9d694:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9d698:	a8c77bfd 	ldp	x29, x30, [sp], #112
   9d69c:	14001bb1 	b	a4560 <CString::~CString()>

000000000009d6a0 <CPartitionManager::Initialize()>:
   9d6a0:	d10a03ff 	sub	sp, sp, #0x280
   9d6a4:	d2800001 	mov	x1, #0x0                   	// #0
   9d6a8:	a9007bfd 	stp	x29, x30, [sp]
   9d6ac:	910003fd 	mov	x29, sp
   9d6b0:	a90153f3 	stp	x19, x20, [sp, #16]
   9d6b4:	aa0003f3 	mov	x19, x0
   9d6b8:	f9400000 	ldr	x0, [x0]
   9d6bc:	f9400002 	ldr	x2, [x0]
   9d6c0:	f9401042 	ldr	x2, [x2, #32]
   9d6c4:	d63f0040 	blr	x2
   9d6c8:	b50005c0 	cbnz	x0, 9d780 <CPartitionManager::Initialize()+0xe0>
   9d6cc:	f9400260 	ldr	x0, [x19]
   9d6d0:	d2804002 	mov	x2, #0x200                 	// #512
   9d6d4:	910203e1 	add	x1, sp, #0x80
   9d6d8:	f9400003 	ldr	x3, [x0]
   9d6dc:	f9400863 	ldr	x3, [x3, #16]
   9d6e0:	d63f0060 	blr	x3
   9d6e4:	7108001f 	cmp	w0, #0x200
   9d6e8:	540004c1 	b.ne	9d780 <CPartitionManager::Initialize()+0xe0>  // b.any
   9d6ec:	7944ffe1 	ldrh	w1, [sp, #638]
   9d6f0:	52954aa0 	mov	w0, #0xaa55                	// #43605
   9d6f4:	6b00003f 	cmp	w1, w0
   9d6f8:	54000c01 	b.ne	9d878 <CPartitionManager::Initialize()+0x1d8>  // b.any
   9d6fc:	91090bf4 	add	x20, sp, #0x242
   9d700:	a9025bf5 	stp	x21, x22, [sp, #32]
   9d704:	9100a275 	add	x21, x19, #0x28
   9d708:	92900436 	mov	x22, #0xffffffffffff7fde    	// #-32802
   9d70c:	a90363f7 	stp	x23, x24, [sp, #48]
   9d710:	f00000b7 	adrp	x23, b4000 <_etext+0x3158>
   9d714:	913742f7 	add	x23, x23, #0xdd0
   9d718:	91012278 	add	x24, x19, #0x48
   9d71c:	a9046bf9 	stp	x25, x26, [sp, #64]
   9d720:	52800019 	mov	w25, #0x0                   	// #0
   9d724:	39400280 	ldrb	w0, [x20]
   9d728:	9ac02ac1 	asr	x1, x22, x0
   9d72c:	7100401f 	cmp	w0, #0x10
   9d730:	12000021 	and	w1, w1, #0x1
   9d734:	52000021 	eor	w1, w1, #0x1
   9d738:	1a9f3021 	csel	w1, w1, wzr, cc	// cc = lo, ul, last
   9d73c:	7103bc1f 	cmp	w0, #0xef
   9d740:	7a401820 	ccmp	w1, #0x0, #0x0, ne	// ne = any
   9d744:	54000380 	b.eq	9d7b4 <CPartitionManager::Initialize()+0x114>  // b.none
   9d748:	910022b5 	add	x21, x21, #0x8
   9d74c:	91004294 	add	x20, x20, #0x10
   9d750:	eb1802bf 	cmp	x21, x24
   9d754:	54fffe81 	b.ne	9d724 <CPartitionManager::Initialize()+0x84>  // b.any
   9d758:	52800033 	mov	w19, #0x1                   	// #1
   9d75c:	34000799 	cbz	w25, 9d84c <CPartitionManager::Initialize()+0x1ac>
   9d760:	2a1303e0 	mov	w0, w19
   9d764:	a9407bfd 	ldp	x29, x30, [sp]
   9d768:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d76c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9d770:	a94363f7 	ldp	x23, x24, [sp, #48]
   9d774:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9d778:	910a03ff 	add	sp, sp, #0x280
   9d77c:	d65f03c0 	ret
   9d780:	940008a4 	bl	9fa10 <CLogger::Get()>
   9d784:	f00000a3 	adrp	x3, b4000 <_etext+0x3158>
   9d788:	b00000e1 	adrp	x1, ba000 <CursorSymbol+0x188>
   9d78c:	91376063 	add	x3, x3, #0xdd8
   9d790:	9109e021 	add	x1, x1, #0x278
   9d794:	52800022 	mov	w2, #0x1                   	// #1
   9d798:	52800013 	mov	w19, #0x0                   	// #0
   9d79c:	94000a89 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9d7a0:	2a1303e0 	mov	w0, w19
   9d7a4:	a9407bfd 	ldp	x29, x30, [sp]
   9d7a8:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d7ac:	910a03ff 	add	sp, sp, #0x280
   9d7b0:	d65f03c0 	ret
   9d7b4:	b9400680 	ldr	w0, [x20, #4]
   9d7b8:	34fffc80 	cbz	w0, 9d748 <CPartitionManager::Initialize()+0xa8>
   9d7bc:	b9400a80 	ldr	w0, [x20, #8]
   9d7c0:	34fffc40 	cbz	w0, 9d748 <CPartitionManager::Initialize()+0xa8>
   9d7c4:	f94002a0 	ldr	x0, [x21]
   9d7c8:	f9002bfb 	str	x27, [sp, #80]
   9d7cc:	b5000700 	cbnz	x0, 9d8ac <CPartitionManager::Initialize()+0x20c>
   9d7d0:	d2800600 	mov	x0, #0x30                  	// #48
   9d7d4:	aa1303fa 	mov	x26, x19
   9d7d8:	94002aa2 	bl	a8260 <operator new(unsigned long)>
   9d7dc:	29408e82 	ldp	w2, w3, [x20, #4]
   9d7e0:	aa0003fb 	mov	x27, x0
   9d7e4:	11000739 	add	w25, w25, #0x1
   9d7e8:	f8408741 	ldr	x1, [x26], #8
   9d7ec:	940000ad 	bl	9daa0 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   9d7f0:	910183e0 	add	x0, sp, #0x60
   9d7f4:	f90002bb 	str	x27, [x21]
   9d7f8:	94001b96 	bl	a4650 <CString::CString()>
   9d7fc:	aa1a03e0 	mov	x0, x26
   9d800:	94001bd8 	bl	a4760 <CString::operator char const*() const>
   9d804:	aa0003e2 	mov	x2, x0
   9d808:	2a1903e3 	mov	w3, w25
   9d80c:	aa1703e1 	mov	x1, x23
   9d810:	910183e0 	add	x0, sp, #0x60
   9d814:	940021c7 	bl	a5f30 <CString::Format(char const*, ...)>
   9d818:	9400052e 	bl	9ecd0 <CDeviceNameService::Get()>
   9d81c:	aa0003fa 	mov	x26, x0
   9d820:	910183e0 	add	x0, sp, #0x60
   9d824:	94001bcf 	bl	a4760 <CString::operator char const*() const>
   9d828:	f94002a2 	ldr	x2, [x21]
   9d82c:	aa0003e1 	mov	x1, x0
   9d830:	52800023 	mov	w3, #0x1                   	// #1
   9d834:	aa1a03e0 	mov	x0, x26
   9d838:	94000436 	bl	9e910 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   9d83c:	910183e0 	add	x0, sp, #0x60
   9d840:	94001b48 	bl	a4560 <CString::~CString()>
   9d844:	f9402bfb 	ldr	x27, [sp, #80]
   9d848:	17ffffc0 	b	9d748 <CPartitionManager::Initialize()+0xa8>
   9d84c:	94000871 	bl	9fa10 <CLogger::Get()>
   9d850:	f00000a3 	adrp	x3, b4000 <_etext+0x3158>
   9d854:	b00000e1 	adrp	x1, ba000 <CursorSymbol+0x188>
   9d858:	9138c063 	add	x3, x3, #0xe30
   9d85c:	9109e021 	add	x1, x1, #0x278
   9d860:	52800042 	mov	w2, #0x2                   	// #2
   9d864:	94000a57 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9d868:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9d86c:	a94363f7 	ldp	x23, x24, [sp, #48]
   9d870:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9d874:	17ffffcb 	b	9d7a0 <CPartitionManager::Initialize()+0x100>
   9d878:	94000866 	bl	9fa10 <CLogger::Get()>
   9d87c:	f00000a3 	adrp	x3, b4000 <_etext+0x3158>
   9d880:	b00000e1 	adrp	x1, ba000 <CursorSymbol+0x188>
   9d884:	9137a063 	add	x3, x3, #0xde8
   9d888:	9109e021 	add	x1, x1, #0x278
   9d88c:	52800042 	mov	w2, #0x2                   	// #2
   9d890:	52800033 	mov	w19, #0x1                   	// #1
   9d894:	94000a4b 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9d898:	2a1303e0 	mov	w0, w19
   9d89c:	a9407bfd 	ldp	x29, x30, [sp]
   9d8a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   9d8a4:	910a03ff 	add	sp, sp, #0x280
   9d8a8:	d65f03c0 	ret
   9d8ac:	f00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9d8b0:	f00000a0 	adrp	x0, b4000 <_etext+0x3158>
   9d8b4:	91380021 	add	x1, x1, #0xe00
   9d8b8:	91386000 	add	x0, x0, #0xe18
   9d8bc:	52800f02 	mov	w2, #0x78                  	// #120
   9d8c0:	94000120 	bl	9dd40 <assertion_failed>
	...

000000000009d8d0 <CPartition::Read(void*, unsigned long)>:
   9d8d0:	3940a004 	ldrb	w4, [x0, #40]
   9d8d4:	350002a4 	cbnz	w4, 9d928 <CPartition::Read(void*, unsigned long)+0x58>
   9d8d8:	f9401005 	ldr	x5, [x0, #32]
   9d8dc:	9107fc43 	add	x3, x2, #0x1ff
   9d8e0:	b9401c04 	ldr	w4, [x0, #28]
   9d8e4:	8b050063 	add	x3, x3, x5
   9d8e8:	eb43249f 	cmp	x4, x3, lsr #9
   9d8ec:	540001e3 	b.cc	9d928 <CPartition::Read(void*, unsigned long)+0x58>  // b.lo, b.ul, b.last
   9d8f0:	f9400800 	ldr	x0, [x0, #16]
   9d8f4:	b40000a0 	cbz	x0, 9d908 <CPartition::Read(void*, unsigned long)+0x38>
   9d8f8:	f9400003 	ldr	x3, [x0]
   9d8fc:	f9400863 	ldr	x3, [x3, #16]
   9d900:	aa0303f0 	mov	x16, x3
   9d904:	d61f0200 	br	x16
   9d908:	f00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9d90c:	900000a0 	adrp	x0, b1000 <_etext+0x158>
   9d910:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9d914:	91396021 	add	x1, x1, #0xe58
   9d918:	910003fd 	mov	x29, sp
   9d91c:	91210000 	add	x0, x0, #0x840
   9d920:	528006a2 	mov	w2, #0x35                  	// #53
   9d924:	94000107 	bl	9dd40 <assertion_failed>
   9d928:	12800000 	mov	w0, #0xffffffff            	// #-1
   9d92c:	d65f03c0 	ret

000000000009d930 <CPartition::Write(void const*, unsigned long)>:
   9d930:	3940a004 	ldrb	w4, [x0, #40]
   9d934:	350002a4 	cbnz	w4, 9d988 <CPartition::Write(void const*, unsigned long)+0x58>
   9d938:	f9401005 	ldr	x5, [x0, #32]
   9d93c:	9107fc43 	add	x3, x2, #0x1ff
   9d940:	b9401c04 	ldr	w4, [x0, #28]
   9d944:	8b050063 	add	x3, x3, x5
   9d948:	eb43249f 	cmp	x4, x3, lsr #9
   9d94c:	540001e3 	b.cc	9d988 <CPartition::Write(void const*, unsigned long)+0x58>  // b.lo, b.ul, b.last
   9d950:	f9400800 	ldr	x0, [x0, #16]
   9d954:	b40000a0 	cbz	x0, 9d968 <CPartition::Write(void const*, unsigned long)+0x38>
   9d958:	f9400003 	ldr	x3, [x0]
   9d95c:	f9400c63 	ldr	x3, [x3, #24]
   9d960:	aa0303f0 	mov	x16, x3
   9d964:	d61f0200 	br	x16
   9d968:	f00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9d96c:	900000a0 	adrp	x0, b1000 <_etext+0x158>
   9d970:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9d974:	91396021 	add	x1, x1, #0xe58
   9d978:	910003fd 	mov	x29, sp
   9d97c:	91210000 	add	x0, x0, #0x840
   9d980:	528008e2 	mov	w2, #0x47                  	// #71
   9d984:	940000ef 	bl	9dd40 <assertion_failed>
   9d988:	12800000 	mov	w0, #0xffffffff            	// #-1
   9d98c:	d65f03c0 	ret

000000000009d990 <CPartition::~CPartition()>:
   9d990:	b00000e2 	adrp	x2, ba000 <CursorSymbol+0x188>
   9d994:	910a4042 	add	x2, x2, #0x290
   9d998:	f900081f 	str	xzr, [x0, #16]
   9d99c:	f9000002 	str	x2, [x0]
   9d9a0:	14000338 	b	9e680 <CDevice::~CDevice()>
   9d9a4:	d503201f 	nop
   9d9a8:	d503201f 	nop
   9d9ac:	d503201f 	nop

000000000009d9b0 <CPartition::~CPartition()>:
   9d9b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9d9b4:	b00000e1 	adrp	x1, ba000 <CursorSymbol+0x188>
   9d9b8:	910a4021 	add	x1, x1, #0x290
   9d9bc:	910003fd 	mov	x29, sp
   9d9c0:	f9000bf3 	str	x19, [sp, #16]
   9d9c4:	aa0003f3 	mov	x19, x0
   9d9c8:	f9000001 	str	x1, [x0]
   9d9cc:	f900081f 	str	xzr, [x0, #16]
   9d9d0:	9400032c 	bl	9e680 <CDevice::~CDevice()>
   9d9d4:	aa1303e0 	mov	x0, x19
   9d9d8:	d2800601 	mov	x1, #0x30                  	// #48
   9d9dc:	f9400bf3 	ldr	x19, [sp, #16]
   9d9e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9d9e4:	14002a47 	b	a8300 <operator delete(void*, unsigned long)>
   9d9e8:	d503201f 	nop
   9d9ec:	d503201f 	nop

000000000009d9f0 <CPartition::Seek(unsigned long)>:
   9d9f0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9d9f4:	910003fd 	mov	x29, sp
   9d9f8:	f240203f 	tst	x1, #0x1ff
   9d9fc:	a90153f3 	stp	x19, x20, [sp, #16]
   9da00:	aa0003f3 	mov	x19, x0
   9da04:	52800020 	mov	w0, #0x1                   	// #1
   9da08:	3900a260 	strb	w0, [x19, #40]
   9da0c:	54000301 	b.ne	9da6c <CPartition::Seek(unsigned long)+0x7c>  // b.any
   9da10:	b9401e60 	ldr	w0, [x19, #28]
   9da14:	aa0103f4 	mov	x20, x1
   9da18:	eb41241f 	cmp	x0, x1, lsr #9
   9da1c:	54000289 	b.ls	9da6c <CPartition::Seek(unsigned long)+0x7c>  // b.plast
   9da20:	f9400a60 	ldr	x0, [x19, #16]
   9da24:	f90013f5 	str	x21, [sp, #32]
   9da28:	b9401a75 	ldr	w21, [x19, #24]
   9da2c:	8b152435 	add	x21, x1, x21, lsl #9
   9da30:	b4000260 	cbz	x0, 9da7c <CPartition::Seek(unsigned long)+0x8c>
   9da34:	f9400002 	ldr	x2, [x0]
   9da38:	aa1503e1 	mov	x1, x21
   9da3c:	f9401042 	ldr	x2, [x2, #32]
   9da40:	d63f0040 	blr	x2
   9da44:	eb0002bf 	cmp	x21, x0
   9da48:	54000101 	b.ne	9da68 <CPartition::Seek(unsigned long)+0x78>  // b.any
   9da4c:	aa1403e0 	mov	x0, x20
   9da50:	3900a27f 	strb	wzr, [x19, #40]
   9da54:	f94013f5 	ldr	x21, [sp, #32]
   9da58:	f9001274 	str	x20, [x19, #32]
   9da5c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9da60:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9da64:	d65f03c0 	ret
   9da68:	f94013f5 	ldr	x21, [sp, #32]
   9da6c:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   9da70:	a94153f3 	ldp	x19, x20, [sp, #16]
   9da74:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9da78:	d65f03c0 	ret
   9da7c:	f00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9da80:	900000a0 	adrp	x0, b1000 <_etext+0x158>
   9da84:	91396021 	add	x1, x1, #0xe58
   9da88:	91210000 	add	x0, x0, #0x840
   9da8c:	52800b22 	mov	w2, #0x59                  	// #89
   9da90:	940000ac 	bl	9dd40 <assertion_failed>
   9da94:	d503201f 	nop
   9da98:	d503201f 	nop
   9da9c:	d503201f 	nop

000000000009daa0 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>:
   9daa0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9daa4:	910003fd 	mov	x29, sp
   9daa8:	a90153f3 	stp	x19, x20, [sp, #16]
   9daac:	aa0003f3 	mov	x19, x0
   9dab0:	aa0103f4 	mov	x20, x1
   9dab4:	a9025bf5 	stp	x21, x22, [sp, #32]
   9dab8:	2a0203f6 	mov	w22, w2
   9dabc:	2a0303f5 	mov	w21, w3
   9dac0:	94000324 	bl	9e750 <CDevice::CDevice()>
   9dac4:	b00000e0 	adrp	x0, ba000 <CursorSymbol+0x188>
   9dac8:	910a4000 	add	x0, x0, #0x290
   9dacc:	f9000a74 	str	x20, [x19, #16]
   9dad0:	52800021 	mov	w1, #0x1                   	// #1
   9dad4:	29035676 	stp	w22, w21, [x19, #24]
   9dad8:	f9000260 	str	x0, [x19]
   9dadc:	f900127f 	str	xzr, [x19, #32]
   9dae0:	3900a261 	strb	w1, [x19, #40]
   9dae4:	b40000b4 	cbz	x20, 9daf8 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x58>
   9dae8:	a94153f3 	ldp	x19, x20, [sp, #16]
   9daec:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9daf0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9daf4:	d65f03c0 	ret
   9daf8:	f00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9dafc:	900000a0 	adrp	x0, b1000 <_etext+0x158>
   9db00:	91396021 	add	x1, x1, #0xe58
   9db04:	91210000 	add	x0, x0, #0x840
   9db08:	528003e2 	mov	w2, #0x1f                  	// #31
   9db0c:	9400008d 	bl	9dd40 <assertion_failed>

000000000009db10 <CActLED::CActLED(bool)>:
   9db10:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9db14:	910003fd 	mov	x29, sp
   9db18:	90000102 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   9db1c:	a90153f3 	stp	x19, x20, [sp, #16]
   9db20:	aa0003f4 	mov	x20, x0
   9db24:	a9025bf5 	stp	x21, x22, [sp, #32]
   9db28:	12001c35 	and	w21, w1, #0xff
   9db2c:	a9007c1f 	stp	xzr, xzr, [x0]
   9db30:	f900a440 	str	x0, [x2, #328]
   9db34:	94000d3b 	bl	a1020 <CMachineInfo::Get()>
   9db38:	94000a4e 	bl	a0470 <CMachineInfo::GetActLEDInfo() const>
   9db3c:	2a0003f3 	mov	w19, w0
   9db40:	363802b3 	tbz	w19, #7, 9db94 <CActLED::CActLED(bool)+0x84>
   9db44:	d2800300 	mov	x0, #0x18                  	// #24
   9db48:	940029c6 	bl	a8260 <operator new(unsigned long)>
   9db4c:	aa0003f6 	mov	x22, x0
   9db50:	2a1503e2 	mov	w2, w21
   9db54:	12001661 	and	w1, w19, #0x3f
   9db58:	940027aa 	bl	a7a00 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
   9db5c:	721a0273 	ands	w19, w19, #0x40
   9db60:	1a9f17e0 	cset	w0, eq	// eq = none
   9db64:	f9000696 	str	x22, [x20, #8]
   9db68:	39004280 	strb	w0, [x20, #16]
   9db6c:	f9400295 	ldr	x21, [x20]
   9db70:	b5000295 	cbnz	x21, 9dbc0 <CActLED::CActLED(bool)+0xb0>
   9db74:	b4000356 	cbz	x22, 9dbdc <CActLED::CActLED(bool)+0xcc>
   9db78:	7100027f 	cmp	w19, #0x0
   9db7c:	aa1603e0 	mov	x0, x22
   9db80:	a94153f3 	ldp	x19, x20, [sp, #16]
   9db84:	1a9f07e1 	cset	w1, ne	// ne = any
   9db88:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9db8c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9db90:	14002750 	b	a78d0 <CVirtualGPIOPin::Write(unsigned int)>
   9db94:	d2800900 	mov	x0, #0x48                  	// #72
   9db98:	940029b2 	bl	a8260 <operator new(unsigned long)>
   9db9c:	aa0003f5 	mov	x21, x0
   9dba0:	12001661 	and	w1, w19, #0x3f
   9dba4:	d2800003 	mov	x3, #0x0                   	// #0
   9dba8:	52800042 	mov	w2, #0x2                   	// #2
   9dbac:	94003c29 	bl	acc50 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   9dbb0:	721a0273 	ands	w19, w19, #0x40
   9dbb4:	1a9f17e0 	cset	w0, eq	// eq = none
   9dbb8:	f9000295 	str	x21, [x20]
   9dbbc:	39004280 	strb	w0, [x20, #16]
   9dbc0:	7100027f 	cmp	w19, #0x0
   9dbc4:	aa1503e0 	mov	x0, x21
   9dbc8:	a94153f3 	ldp	x19, x20, [sp, #16]
   9dbcc:	1a9f07e1 	cset	w1, ne	// ne = any
   9dbd0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9dbd4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9dbd8:	140038de 	b	abf50 <CGPIOPin::Write(unsigned int)>
   9dbdc:	a94153f3 	ldp	x19, x20, [sp, #16]
   9dbe0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9dbe4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9dbe8:	d65f03c0 	ret
   9dbec:	d503201f 	nop

000000000009dbf0 <CActLED::~CActLED()>:
   9dbf0:	90000100 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   9dbf4:	f900a41f 	str	xzr, [x0, #328]
   9dbf8:	d65f03c0 	ret
   9dbfc:	d503201f 	nop

000000000009dc00 <CActLED::On()>:
   9dc00:	aa0003e1 	mov	x1, x0
   9dc04:	f9400000 	ldr	x0, [x0]
   9dc08:	b4000060 	cbz	x0, 9dc14 <CActLED::On()+0x14>
   9dc0c:	39404021 	ldrb	w1, [x1, #16]
   9dc10:	140038d0 	b	abf50 <CGPIOPin::Write(unsigned int)>
   9dc14:	f9400420 	ldr	x0, [x1, #8]
   9dc18:	b4000060 	cbz	x0, 9dc24 <CActLED::On()+0x24>
   9dc1c:	39404021 	ldrb	w1, [x1, #16]
   9dc20:	1400272c 	b	a78d0 <CVirtualGPIOPin::Write(unsigned int)>
   9dc24:	d65f03c0 	ret
   9dc28:	d503201f 	nop
   9dc2c:	d503201f 	nop

000000000009dc30 <CActLED::Off()>:
   9dc30:	aa0003e1 	mov	x1, x0
   9dc34:	f9400000 	ldr	x0, [x0]
   9dc38:	b4000080 	cbz	x0, 9dc48 <CActLED::Off()+0x18>
   9dc3c:	39404021 	ldrb	w1, [x1, #16]
   9dc40:	52000021 	eor	w1, w1, #0x1
   9dc44:	140038c3 	b	abf50 <CGPIOPin::Write(unsigned int)>
   9dc48:	f9400420 	ldr	x0, [x1, #8]
   9dc4c:	b4000080 	cbz	x0, 9dc5c <CActLED::Off()+0x2c>
   9dc50:	39404021 	ldrb	w1, [x1, #16]
   9dc54:	52000021 	eor	w1, w1, #0x1
   9dc58:	1400271e 	b	a78d0 <CVirtualGPIOPin::Write(unsigned int)>
   9dc5c:	d65f03c0 	ret

000000000009dc60 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
   9dc60:	34000661 	cbz	w1, 9dd2c <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0xcc>
   9dc64:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9dc68:	910003fd 	mov	x29, sp
   9dc6c:	a90153f3 	stp	x19, x20, [sp, #16]
   9dc70:	aa0003f3 	mov	x19, x0
   9dc74:	52800034 	mov	w20, #0x1                   	// #1
   9dc78:	a9025bf5 	stp	x21, x22, [sp, #32]
   9dc7c:	2a0103f5 	mov	w21, w1
   9dc80:	2a0203f6 	mov	w22, w2
   9dc84:	f9001bf7 	str	x23, [sp, #48]
   9dc88:	2a0303f7 	mov	w23, w3
   9dc8c:	1400000f 	b	9dcc8 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x68>
   9dc90:	39404261 	ldrb	w1, [x19, #16]
   9dc94:	940038af 	bl	abf50 <CGPIOPin::Write(unsigned int)>
   9dc98:	2a1603e0 	mov	w0, w22
   9dc9c:	940024b9 	bl	a6f80 <CTimer::SimpleMsDelay(unsigned int)>
   9dca0:	f9400260 	ldr	x0, [x19]
   9dca4:	b4000260 	cbz	x0, 9dcf0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x90>
   9dca8:	39404261 	ldrb	w1, [x19, #16]
   9dcac:	52000021 	eor	w1, w1, #0x1
   9dcb0:	940038a8 	bl	abf50 <CGPIOPin::Write(unsigned int)>
   9dcb4:	2a1703e0 	mov	w0, w23
   9dcb8:	11000694 	add	w20, w20, #0x1
   9dcbc:	940024b1 	bl	a6f80 <CTimer::SimpleMsDelay(unsigned int)>
   9dcc0:	6b1402bf 	cmp	w21, w20
   9dcc4:	540002a3 	b.cc	9dd18 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0xb8>  // b.lo, b.ul, b.last
   9dcc8:	f9400260 	ldr	x0, [x19]
   9dccc:	b5fffe20 	cbnz	x0, 9dc90 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x30>
   9dcd0:	f9400660 	ldr	x0, [x19, #8]
   9dcd4:	b4fffe20 	cbz	x0, 9dc98 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x38>
   9dcd8:	39404261 	ldrb	w1, [x19, #16]
   9dcdc:	940026fd 	bl	a78d0 <CVirtualGPIOPin::Write(unsigned int)>
   9dce0:	2a1603e0 	mov	w0, w22
   9dce4:	940024a7 	bl	a6f80 <CTimer::SimpleMsDelay(unsigned int)>
   9dce8:	f9400260 	ldr	x0, [x19]
   9dcec:	b5fffde0 	cbnz	x0, 9dca8 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x48>
   9dcf0:	f9400660 	ldr	x0, [x19, #8]
   9dcf4:	b4fffe00 	cbz	x0, 9dcb4 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x54>
   9dcf8:	39404261 	ldrb	w1, [x19, #16]
   9dcfc:	11000694 	add	w20, w20, #0x1
   9dd00:	52000021 	eor	w1, w1, #0x1
   9dd04:	940026f3 	bl	a78d0 <CVirtualGPIOPin::Write(unsigned int)>
   9dd08:	2a1703e0 	mov	w0, w23
   9dd0c:	9400249d 	bl	a6f80 <CTimer::SimpleMsDelay(unsigned int)>
   9dd10:	6b1402bf 	cmp	w21, w20
   9dd14:	54fffda2 	b.cs	9dcc8 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x68>  // b.hs, b.nlast
   9dd18:	a94153f3 	ldp	x19, x20, [sp, #16]
   9dd1c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9dd20:	f9401bf7 	ldr	x23, [sp, #48]
   9dd24:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9dd28:	d65f03c0 	ret
   9dd2c:	d65f03c0 	ret

000000000009dd30 <CActLED::Get()>:
   9dd30:	90000100 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   9dd34:	f940a400 	ldr	x0, [x0, #328]
   9dd38:	d65f03c0 	ret
   9dd3c:	00000000 	udf	#0

000000000009dd40 <assertion_failed>:
   9dd40:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   9dd44:	910003fd 	mov	x29, sp
   9dd48:	a90153f3 	stp	x19, x20, [sp, #16]
   9dd4c:	aa0003f4 	mov	x20, x0
   9dd50:	aa0103f3 	mov	x19, x1
   9dd54:	a9025bf5 	stp	x21, x22, [sp, #32]
   9dd58:	2a0203f5 	mov	w21, w2
   9dd5c:	910003f6 	mov	x22, sp
   9dd60:	9400353c 	bl	ab250 <CInterruptSystem::DisableFIQ()>
   9dd64:	d50341ff 	msr	daifclr, #0x1
   9dd68:	9100c3e0 	add	x0, sp, #0x30
   9dd6c:	94001a39 	bl	a4650 <CString::CString()>
   9dd70:	f00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9dd74:	aa1303e2 	mov	x2, x19
   9dd78:	2a1503e3 	mov	w3, w21
   9dd7c:	9139a021 	add	x1, x1, #0xe68
   9dd80:	9100c3e0 	add	x0, sp, #0x30
   9dd84:	9400206b 	bl	a5f30 <CString::Format(char const*, ...)>
   9dd88:	9100c3e0 	add	x0, sp, #0x30
   9dd8c:	94001a75 	bl	a4760 <CString::operator char const*() const>
   9dd90:	aa0003e1 	mov	x1, x0
   9dd94:	aa1603e0 	mov	x0, x22
   9dd98:	940001fa 	bl	9e580 <debug_stacktrace(unsigned long const*, char const*)>
   9dd9c:	9400071d 	bl	9fa10 <CLogger::Get()>
   9dda0:	aa0003f3 	mov	x19, x0
   9dda4:	9100c3e0 	add	x0, sp, #0x30
   9dda8:	94001a6e 	bl	a4760 <CString::operator char const*() const>
   9ddac:	f00000a3 	adrp	x3, b4000 <_etext+0x3158>
   9ddb0:	aa0003e1 	mov	x1, x0
   9ddb4:	aa1403e4 	mov	x4, x20
   9ddb8:	aa1303e0 	mov	x0, x19
   9ddbc:	9139c063 	add	x3, x3, #0xe70
   9ddc0:	52800002 	mov	w2, #0x0                   	// #0
   9ddc4:	940008ff 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9ddc8:	14000000 	b	9ddc8 <assertion_failed+0x88>
   9ddcc:	00000000 	udf	#0

000000000009ddd0 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   9ddd0:	2a0103e2 	mov	w2, w1
   9ddd4:	52800101 	mov	w1, #0x8                   	// #8
   9ddd8:	14003e5a 	b	ad740 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   9dddc:	d503201f 	nop

000000000009dde0 <CBcmPropertyTags::~CBcmPropertyTags()>:
   9dde0:	14003e5c 	b	ad750 <CBcmMailBox::~CBcmMailBox()>
   9dde4:	d503201f 	nop
   9dde8:	d503201f 	nop
   9ddec:	d503201f 	nop

000000000009ddf0 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   9ddf0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   9ddf4:	910003fd 	mov	x29, sp
   9ddf8:	a90153f3 	stp	x19, x20, [sp, #16]
   9ddfc:	a9025bf5 	stp	x21, x22, [sp, #32]
   9de00:	a90363f7 	stp	x23, x24, [sp, #48]
   9de04:	f90023f9 	str	x25, [sp, #64]
   9de08:	b4000841 	cbz	x1, 9df10 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x120>
   9de0c:	71003c5f 	cmp	w2, #0xf
   9de10:	2a0203f4 	mov	w20, w2
   9de14:	54000889 	b.ls	9df24 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x134>  // b.plast
   9de18:	f240069f 	tst	x20, #0x3
   9de1c:	11003057 	add	w23, w2, #0xc
   9de20:	540008c1 	b.ne	9df38 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x148>  // b.any
   9de24:	aa0003f6 	mov	x22, x0
   9de28:	52800000 	mov	w0, #0x0                   	// #0
   9de2c:	aa0103f5 	mov	x21, x1
   9de30:	2a0203f9 	mov	w25, w2
   9de34:	94002cb7 	bl	a9110 <CMemorySystem::GetCoherentPage(unsigned int)>
   9de38:	aa0003f3 	mov	x19, x0
   9de3c:	d3483ee5 	ubfx	x5, x23, #8, #8
   9de40:	d3505ee4 	ubfx	x4, x23, #16, #8
   9de44:	53187ee3 	lsr	w3, w23, #24
   9de48:	91002018 	add	x24, x0, #0x8
   9de4c:	aa1903e2 	mov	x2, x25
   9de50:	39000277 	strb	w23, [x19]
   9de54:	aa1803e0 	mov	x0, x24
   9de58:	aa1503e1 	mov	x1, x21
   9de5c:	39000665 	strb	w5, [x19, #1]
   9de60:	39000a64 	strb	w4, [x19, #2]
   9de64:	39000e63 	strb	w3, [x19, #3]
   9de68:	3900127f 	strb	wzr, [x19, #4]
   9de6c:	3900167f 	strb	wzr, [x19, #5]
   9de70:	39001a7f 	strb	wzr, [x19, #6]
   9de74:	39001e7f 	strb	wzr, [x19, #7]
   9de78:	94002674 	bl	a7848 <memcpy>
   9de7c:	b8344b1f 	str	wzr, [x24, w20, uxtw]
   9de80:	d5033f9f 	dsb	sy
   9de84:	32020674 	orr	w20, w19, #0xc0000000
   9de88:	aa1603e0 	mov	x0, x22
   9de8c:	2a1403e1 	mov	w1, w20
   9de90:	94003e34 	bl	ad760 <CBcmMailBox::WriteRead(unsigned int)>
   9de94:	6b14001f 	cmp	w0, w20
   9de98:	54000100 	b.eq	9deb8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xc8>  // b.none
   9de9c:	52800000 	mov	w0, #0x0                   	// #0
   9dea0:	a94153f3 	ldp	x19, x20, [sp, #16]
   9dea4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9dea8:	a94363f7 	ldp	x23, x24, [sp, #48]
   9deac:	f94023f9 	ldr	x25, [sp, #64]
   9deb0:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9deb4:	d65f03c0 	ret
   9deb8:	d5033fbf 	dmb	sy
   9debc:	39401264 	ldrb	w4, [x19, #4]
   9dec0:	52b00003 	mov	w3, #0x80000000            	// #-2147483648
   9dec4:	39401662 	ldrb	w2, [x19, #5]
   9dec8:	39401a61 	ldrb	w1, [x19, #6]
   9decc:	39401e60 	ldrb	w0, [x19, #7]
   9ded0:	aa022082 	orr	x2, x4, x2, lsl #8
   9ded4:	aa014041 	orr	x1, x2, x1, lsl #16
   9ded8:	aa006020 	orr	x0, x1, x0, lsl #24
   9dedc:	6b03001f 	cmp	w0, w3
   9dee0:	54fffde1 	b.ne	9de9c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xac>  // b.any
   9dee4:	aa1903e2 	mov	x2, x25
   9dee8:	aa1803e1 	mov	x1, x24
   9deec:	aa1503e0 	mov	x0, x21
   9def0:	94002656 	bl	a7848 <memcpy>
   9def4:	52800020 	mov	w0, #0x1                   	// #1
   9def8:	a94153f3 	ldp	x19, x20, [sp, #16]
   9defc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9df00:	a94363f7 	ldp	x23, x24, [sp, #48]
   9df04:	f94023f9 	ldr	x25, [sp, #64]
   9df08:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9df0c:	d65f03c0 	ret
   9df10:	b00000e1 	adrp	x1, ba000 <CursorSymbol+0x188>
   9df14:	910b4021 	add	x1, x1, #0x2d0
   9df18:	91006020 	add	x0, x1, #0x18
   9df1c:	52800962 	mov	w2, #0x4b                  	// #75
   9df20:	97ffff88 	bl	9dd40 <assertion_failed>
   9df24:	b00000e1 	adrp	x1, ba000 <CursorSymbol+0x188>
   9df28:	910b4021 	add	x1, x1, #0x2d0
   9df2c:	9100a020 	add	x0, x1, #0x28
   9df30:	52800982 	mov	w2, #0x4c                  	// #76
   9df34:	97ffff83 	bl	9dd40 <assertion_failed>
   9df38:	b00000e1 	adrp	x1, ba000 <CursorSymbol+0x188>
   9df3c:	910b4021 	add	x1, x1, #0x2d0
   9df40:	91016020 	add	x0, x1, #0x58
   9df44:	528009c2 	mov	w2, #0x4e                  	// #78
   9df48:	97ffff7e 	bl	9dd40 <assertion_failed>
   9df4c:	d503201f 	nop

000000000009df50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   9df50:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9df54:	910003fd 	mov	x29, sp
   9df58:	f9000bf3 	str	x19, [sp, #16]
   9df5c:	aa0203f3 	mov	x19, x2
   9df60:	b4000642 	cbz	x2, 9e028 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xd8>
   9df64:	71003c7f 	cmp	w3, #0xf
   9df68:	2a0303e2 	mov	w2, w3
   9df6c:	54000689 	b.ls	9e03c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xec>  // b.plast
   9df70:	51003063 	sub	w3, w3, #0xc
   9df74:	d3483c26 	ubfx	x6, x1, #8, #8
   9df78:	39000261 	strb	w1, [x19]
   9df7c:	d3483c65 	ubfx	x5, x3, #8, #8
   9df80:	d3505c67 	ubfx	x7, x3, #16, #8
   9df84:	39002264 	strb	w4, [x19, #8]
   9df88:	d3505c29 	ubfx	x9, x1, #16, #8
   9df8c:	53187c63 	lsr	w3, w3, #24
   9df90:	39000666 	strb	w6, [x19, #1]
   9df94:	53187c21 	lsr	w1, w1, #24
   9df98:	d3483c86 	ubfx	x6, x4, #8, #8
   9df9c:	39001665 	strb	w5, [x19, #5]
   9dfa0:	51003048 	sub	w8, w2, #0xc
   9dfa4:	d3505c85 	ubfx	x5, x4, #16, #8
   9dfa8:	39000a69 	strb	w9, [x19, #2]
   9dfac:	d3587884 	ubfx	x4, x4, #24, #7
   9dfb0:	39000e61 	strb	w1, [x19, #3]
   9dfb4:	aa1303e1 	mov	x1, x19
   9dfb8:	39001268 	strb	w8, [x19, #4]
   9dfbc:	39001a67 	strb	w7, [x19, #6]
   9dfc0:	39001e63 	strb	w3, [x19, #7]
   9dfc4:	39002666 	strb	w6, [x19, #9]
   9dfc8:	39002a65 	strb	w5, [x19, #10]
   9dfcc:	39002e64 	strb	w4, [x19, #11]
   9dfd0:	97ffff88 	bl	9ddf0 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   9dfd4:	72001c00 	ands	w0, w0, #0xff
   9dfd8:	54000220 	b.eq	9e01c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xcc>  // b.none
   9dfdc:	39402263 	ldrb	w3, [x19, #8]
   9dfe0:	39402662 	ldrb	w2, [x19, #9]
   9dfe4:	39402a60 	ldrb	w0, [x19, #10]
   9dfe8:	39402e61 	ldrb	w1, [x19, #11]
   9dfec:	aa022062 	orr	x2, x3, x2, lsl #8
   9dff0:	aa004040 	orr	x0, x2, x0, lsl #16
   9dff4:	aa016001 	orr	x1, x0, x1, lsl #24
   9dff8:	53083c24 	ubfx	w4, w1, #8, #8
   9dffc:	53105c23 	ubfx	w3, w1, #16, #8
   9e000:	f240783f 	tst	x1, #0x7fffffff
   9e004:	53187822 	ubfx	w2, w1, #24, #7
   9e008:	1a9f07e0 	cset	w0, ne	// ne = any
   9e00c:	39002261 	strb	w1, [x19, #8]
   9e010:	39002664 	strb	w4, [x19, #9]
   9e014:	39002a63 	strb	w3, [x19, #10]
   9e018:	39002e62 	strb	w2, [x19, #11]
   9e01c:	f9400bf3 	ldr	x19, [sp, #16]
   9e020:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9e024:	d65f03c0 	ret
   9e028:	900000e1 	adrp	x1, ba000 <CursorSymbol+0x188>
   9e02c:	910b4021 	add	x1, x1, #0x2d0
   9e030:	9101c020 	add	x0, x1, #0x70
   9e034:	52800662 	mov	w2, #0x33                  	// #51
   9e038:	97ffff42 	bl	9dd40 <assertion_failed>
   9e03c:	900000e1 	adrp	x1, ba000 <CursorSymbol+0x188>
   9e040:	910b4021 	add	x1, x1, #0x2d0
   9e044:	91020020 	add	x0, x1, #0x80
   9e048:	52800682 	mov	w2, #0x34                  	// #52
   9e04c:	97ffff3d 	bl	9dd40 <assertion_failed>

000000000009e050 <CClassAllocator::~CClassAllocator()>:
   9e050:	aa0003e1 	mov	x1, x0
   9e054:	f9400c00 	ldr	x0, [x0, #24]
   9e058:	f900103f 	str	xzr, [x1, #32]
   9e05c:	b4000040 	cbz	x0, 9e064 <CClassAllocator::~CClassAllocator()+0x14>
   9e060:	14003b94 	b	aceb0 <free>
   9e064:	d65f03c0 	ret
   9e068:	d503201f 	nop
   9e06c:	d503201f 	nop

000000000009e070 <CClassAllocator::Init(unsigned long, unsigned int)>:
   9e070:	f100003f 	cmp	x1, #0x0
   9e074:	9a9f1421 	csinc	x1, x1, xzr, ne	// ne = any
   9e078:	91007c21 	add	x1, x1, #0x1f
   9e07c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9e080:	927c6c21 	and	x1, x1, #0xfffffff0
   9e084:	910003fd 	mov	x29, sp
   9e088:	f9000bf3 	str	x19, [sp, #16]
   9e08c:	f9000001 	str	x1, [x0]
   9e090:	34000482 	cbz	w2, 9e120 <CClassAllocator::Init(unsigned long, unsigned int)+0xb0>
   9e094:	aa0003f3 	mov	x19, x0
   9e098:	2a0203e0 	mov	w0, w2
   9e09c:	9b017c00 	mul	x0, x0, x1
   9e0a0:	b9000a62 	str	w2, [x19, #8]
   9e0a4:	94003b6b 	bl	ace50 <malloc>
   9e0a8:	f9000e60 	str	x0, [x19, #24]
   9e0ac:	b4000320 	cbz	x0, 9e110 <CClassAllocator::Init(unsigned long, unsigned int)+0xa0>
   9e0b0:	f2400c1f 	tst	x0, #0xf
   9e0b4:	54000421 	b.ne	9e138 <CClassAllocator::Init(unsigned long, unsigned int)+0xc8>  // b.any
   9e0b8:	b9400a61 	ldr	w1, [x19, #8]
   9e0bc:	34000241 	cbz	w1, 9e104 <CClassAllocator::Init(unsigned long, unsigned int)+0x94>
   9e0c0:	f9400266 	ldr	x6, [x19]
   9e0c4:	528a6a05 	mov	w5, #0x5350                	// #21328
   9e0c8:	72a9e845 	movk	w5, #0x4f42, lsl #16
   9e0cc:	52800002 	mov	w2, #0x0                   	// #0
   9e0d0:	f9401263 	ldr	x3, [x19, #32]
   9e0d4:	d503201f 	nop
   9e0d8:	2a0203e1 	mov	w1, w2
   9e0dc:	aa0303e4 	mov	x4, x3
   9e0e0:	11000442 	add	w2, w2, #0x1
   9e0e4:	9b067c21 	mul	x1, x1, x6
   9e0e8:	8b010003 	add	x3, x0, x1
   9e0ec:	b8216805 	str	w5, [x0, x1]
   9e0f0:	b9400a61 	ldr	w1, [x19, #8]
   9e0f4:	f9000464 	str	x4, [x3, #8]
   9e0f8:	6b02003f 	cmp	w1, w2
   9e0fc:	54fffee8 	b.hi	9e0d8 <CClassAllocator::Init(unsigned long, unsigned int)+0x68>  // b.pmore
   9e100:	f9001263 	str	x3, [x19, #32]
   9e104:	f9400bf3 	ldr	x19, [sp, #16]
   9e108:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9e10c:	d65f03c0 	ret
   9e110:	b9000a7f 	str	wzr, [x19, #8]
   9e114:	f9400bf3 	ldr	x19, [sp, #16]
   9e118:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9e11c:	d65f03c0 	ret
   9e120:	d00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9e124:	d00000a0 	adrp	x0, b4000 <_etext+0x3158>
   9e128:	913a2021 	add	x1, x1, #0xe88
   9e12c:	913a8000 	add	x0, x0, #0xea0
   9e130:	52800ae2 	mov	w2, #0x57                  	// #87
   9e134:	97ffff03 	bl	9dd40 <assertion_failed>
   9e138:	d00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9e13c:	d00000a0 	adrp	x0, b4000 <_etext+0x3158>
   9e140:	913a2021 	add	x1, x1, #0xe88
   9e144:	913ae000 	add	x0, x0, #0xeb8
   9e148:	52800c22 	mov	w2, #0x61                  	// #97
   9e14c:	97fffefd 	bl	9dd40 <assertion_failed>

000000000009e150 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, char const*)>:
   9e150:	52800025 	mov	w5, #0x1                   	// #1
   9e154:	a9017c03 	stp	x3, xzr, [x0, #16]
   9e158:	f900101f 	str	xzr, [x0, #32]
   9e15c:	3900a01f 	strb	wzr, [x0, #40]
   9e160:	b9003005 	str	w5, [x0, #48]
   9e164:	17ffffc3 	b	9e070 <CClassAllocator::Init(unsigned long, unsigned int)>
   9e168:	d503201f 	nop
   9e16c:	d503201f 	nop

000000000009e170 <CClassAllocator::CClassAllocator(unsigned long, unsigned int, unsigned int, char const*)>:
   9e170:	52800026 	mov	w6, #0x1                   	// #1
   9e174:	a9017c04 	stp	x4, xzr, [x0, #16]
   9e178:	f900101f 	str	xzr, [x0, #32]
   9e17c:	3900a006 	strb	w6, [x0, #40]
   9e180:	29058c03 	stp	w3, w3, [x0, #44]
   9e184:	17ffffbb 	b	9e070 <CClassAllocator::Init(unsigned long, unsigned int)>
   9e188:	d503201f 	nop
   9e18c:	d503201f 	nop

000000000009e190 <CClassAllocator::Extend(unsigned int, unsigned int)>:
   9e190:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9e194:	910003fd 	mov	x29, sp
   9e198:	a90153f3 	stp	x19, x20, [sp, #16]
   9e19c:	f90013f5 	str	x21, [sp, #32]
   9e1a0:	aa0003f5 	mov	x21, x0
   9e1a4:	3940a000 	ldrb	w0, [x0, #40]
   9e1a8:	340005c0 	cbz	w0, 9e260 <CClassAllocator::Extend(unsigned int, unsigned int)+0xd0>
   9e1ac:	b9402ea0 	ldr	w0, [x21, #44]
   9e1b0:	6b02001f 	cmp	w0, w2
   9e1b4:	54000621 	b.ne	9e278 <CClassAllocator::Extend(unsigned int, unsigned int)+0xe8>  // b.any
   9e1b8:	2a0103f4 	mov	w20, w1
   9e1bc:	340006a1 	cbz	w1, 9e290 <CClassAllocator::Extend(unsigned int, unsigned int)+0x100>
   9e1c0:	f94002a0 	ldr	x0, [x21]
   9e1c4:	2a0103e1 	mov	w1, w1
   9e1c8:	9b007c20 	mul	x0, x1, x0
   9e1cc:	94003b21 	bl	ace50 <malloc>
   9e1d0:	aa0003f3 	mov	x19, x0
   9e1d4:	b4000320 	cbz	x0, 9e238 <CClassAllocator::Extend(unsigned int, unsigned int)+0xa8>
   9e1d8:	f2400c1f 	tst	x0, #0xf
   9e1dc:	54000661 	b.ne	9e2a8 <CClassAllocator::Extend(unsigned int, unsigned int)+0x118>  // b.any
   9e1e0:	b94032a0 	ldr	w0, [x21, #48]
   9e1e4:	350003a0 	cbnz	w0, 9e258 <CClassAllocator::Extend(unsigned int, unsigned int)+0xc8>
   9e1e8:	f94002a4 	ldr	x4, [x21]
   9e1ec:	528a6a01 	mov	w1, #0x5350                	// #21328
   9e1f0:	72a9e841 	movk	w1, #0x4f42, lsl #16
   9e1f4:	52800002 	mov	w2, #0x0                   	// #0
   9e1f8:	f94012a3 	ldr	x3, [x21, #32]
   9e1fc:	d503201f 	nop
   9e200:	aa0303e0 	mov	x0, x3
   9e204:	11000442 	add	w2, w2, #0x1
   9e208:	b9000261 	str	w1, [x19]
   9e20c:	6b02029f 	cmp	w20, w2
   9e210:	aa1303e3 	mov	x3, x19
   9e214:	f9000660 	str	x0, [x19, #8]
   9e218:	8b040273 	add	x19, x19, x4
   9e21c:	54ffff21 	b.ne	9e200 <CClassAllocator::Extend(unsigned int, unsigned int)+0x70>  // b.any
   9e220:	b9400aa0 	ldr	w0, [x21, #8]
   9e224:	f90012a3 	str	x3, [x21, #32]
   9e228:	b94032a1 	ldr	w1, [x21, #48]
   9e22c:	0b140000 	add	w0, w0, w20
   9e230:	b9000aa0 	str	w0, [x21, #8]
   9e234:	350000a1 	cbnz	w1, 9e248 <CClassAllocator::Extend(unsigned int, unsigned int)+0xb8>
   9e238:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e23c:	f94013f5 	ldr	x21, [sp, #32]
   9e240:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9e244:	d65f03c0 	ret
   9e248:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e24c:	f94013f5 	ldr	x21, [sp, #32]
   9e250:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9e254:	14002beb 	b	a9200 <LeaveCritical>
   9e258:	94002bba 	bl	a9140 <EnterCritical>
   9e25c:	17ffffe3 	b	9e1e8 <CClassAllocator::Extend(unsigned int, unsigned int)+0x58>
   9e260:	d00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9e264:	d00000a0 	adrp	x0, b4000 <_etext+0x3158>
   9e268:	913a2021 	add	x1, x1, #0xe88
   9e26c:	913be000 	add	x0, x0, #0xef8
   9e270:	52800e02 	mov	w2, #0x70                  	// #112
   9e274:	97fffeb3 	bl	9dd40 <assertion_failed>
   9e278:	d00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9e27c:	d00000a0 	adrp	x0, b4000 <_etext+0x3158>
   9e280:	913a2021 	add	x1, x1, #0xe88
   9e284:	913c2000 	add	x0, x0, #0xf08
   9e288:	52800e22 	mov	w2, #0x71                  	// #113
   9e28c:	97fffead 	bl	9dd40 <assertion_failed>
   9e290:	d00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9e294:	d00000a0 	adrp	x0, b4000 <_etext+0x3158>
   9e298:	913a2021 	add	x1, x1, #0xe88
   9e29c:	913a8000 	add	x0, x0, #0xea0
   9e2a0:	52800e42 	mov	w2, #0x72                  	// #114
   9e2a4:	97fffea7 	bl	9dd40 <assertion_failed>
   9e2a8:	d00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9e2ac:	d00000a0 	adrp	x0, b4000 <_etext+0x3158>
   9e2b0:	913a2021 	add	x1, x1, #0xe88
   9e2b4:	913ca000 	add	x0, x0, #0xf28
   9e2b8:	52800f42 	mov	w2, #0x7a                  	// #122
   9e2bc:	97fffea1 	bl	9dd40 <assertion_failed>

000000000009e2c0 <CClassAllocator::Allocate()>:
   9e2c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9e2c4:	910003fd 	mov	x29, sp
   9e2c8:	a90153f3 	stp	x19, x20, [sp, #16]
   9e2cc:	aa0003f3 	mov	x19, x0
   9e2d0:	3940a000 	ldrb	w0, [x0, #40]
   9e2d4:	34000060 	cbz	w0, 9e2e0 <CClassAllocator::Allocate()+0x20>
   9e2d8:	b9403260 	ldr	w0, [x19, #48]
   9e2dc:	350002a0 	cbnz	w0, 9e330 <CClassAllocator::Allocate()+0x70>
   9e2e0:	f9401274 	ldr	x20, [x19, #32]
   9e2e4:	b4000374 	cbz	x20, 9e350 <CClassAllocator::Allocate()+0x90>
   9e2e8:	b9400281 	ldr	w1, [x20]
   9e2ec:	528a6a00 	mov	w0, #0x5350                	// #21328
   9e2f0:	72a9e840 	movk	w0, #0x4f42, lsl #16
   9e2f4:	6b00003f 	cmp	w1, w0
   9e2f8:	540003e1 	b.ne	9e374 <CClassAllocator::Allocate()+0xb4>  // b.any
   9e2fc:	f9400681 	ldr	x1, [x20, #8]
   9e300:	3940a260 	ldrb	w0, [x19, #40]
   9e304:	f9001261 	str	x1, [x19, #32]
   9e308:	f900069f 	str	xzr, [x20, #8]
   9e30c:	350000a0 	cbnz	w0, 9e320 <CClassAllocator::Allocate()+0x60>
   9e310:	91004280 	add	x0, x20, #0x10
   9e314:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e318:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9e31c:	d65f03c0 	ret
   9e320:	b9403260 	ldr	w0, [x19, #48]
   9e324:	34ffff60 	cbz	w0, 9e310 <CClassAllocator::Allocate()+0x50>
   9e328:	94002bb6 	bl	a9200 <LeaveCritical>
   9e32c:	17fffff9 	b	9e310 <CClassAllocator::Allocate()+0x50>
   9e330:	94002b84 	bl	a9140 <EnterCritical>
   9e334:	f9401274 	ldr	x20, [x19, #32]
   9e338:	b5fffd94 	cbnz	x20, 9e2e8 <CClassAllocator::Allocate()+0x28>
   9e33c:	3940a260 	ldrb	w0, [x19, #40]
   9e340:	34000080 	cbz	w0, 9e350 <CClassAllocator::Allocate()+0x90>
   9e344:	b9403260 	ldr	w0, [x19, #48]
   9e348:	34000040 	cbz	w0, 9e350 <CClassAllocator::Allocate()+0x90>
   9e34c:	94002bad 	bl	a9200 <LeaveCritical>
   9e350:	940005b0 	bl	9fa10 <CLogger::Get()>
   9e354:	d00000a3 	adrp	x3, b4000 <_etext+0x3158>
   9e358:	b9400a64 	ldr	w4, [x19, #8]
   9e35c:	52800002 	mov	w2, #0x0                   	// #0
   9e360:	913da063 	add	x3, x3, #0xf68
   9e364:	f9400a61 	ldr	x1, [x19, #16]
   9e368:	94000796 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9e36c:	d2800000 	mov	x0, #0x0                   	// #0
   9e370:	17ffffe9 	b	9e314 <CClassAllocator::Allocate()+0x54>
   9e374:	d00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9e378:	d00000a0 	adrp	x0, b4000 <_etext+0x3158>
   9e37c:	913a2021 	add	x1, x1, #0xe88
   9e380:	913e6000 	add	x0, x0, #0xf98
   9e384:	52801462 	mov	w2, #0xa3                  	// #163
   9e388:	97fffe6e 	bl	9dd40 <assertion_failed>
   9e38c:	d503201f 	nop

000000000009e390 <CClassAllocator::Free(void*)>:
   9e390:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9e394:	910003fd 	mov	x29, sp
   9e398:	a90153f3 	stp	x19, x20, [sp, #16]
   9e39c:	b40003e1 	cbz	x1, 9e418 <CClassAllocator::Free(void*)+0x88>
   9e3a0:	aa0003f4 	mov	x20, x0
   9e3a4:	528a6a00 	mov	w0, #0x5350                	// #21328
   9e3a8:	72a9e840 	movk	w0, #0x4f42, lsl #16
   9e3ac:	b85f0022 	ldur	w2, [x1, #-16]
   9e3b0:	d1004033 	sub	x19, x1, #0x10
   9e3b4:	6b00005f 	cmp	w2, w0
   9e3b8:	540003c1 	b.ne	9e430 <CClassAllocator::Free(void*)+0xa0>  // b.any
   9e3bc:	f9400660 	ldr	x0, [x19, #8]
   9e3c0:	b5000440 	cbnz	x0, 9e448 <CClassAllocator::Free(void*)+0xb8>
   9e3c4:	3940a280 	ldrb	w0, [x20, #40]
   9e3c8:	350000e0 	cbnz	w0, 9e3e4 <CClassAllocator::Free(void*)+0x54>
   9e3cc:	f9401280 	ldr	x0, [x20, #32]
   9e3d0:	f9000660 	str	x0, [x19, #8]
   9e3d4:	f9001293 	str	x19, [x20, #32]
   9e3d8:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e3dc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9e3e0:	d65f03c0 	ret
   9e3e4:	b9403280 	ldr	w0, [x20, #48]
   9e3e8:	34ffff20 	cbz	w0, 9e3cc <CClassAllocator::Free(void*)+0x3c>
   9e3ec:	94002b55 	bl	a9140 <EnterCritical>
   9e3f0:	f9401281 	ldr	x1, [x20, #32]
   9e3f4:	3940a280 	ldrb	w0, [x20, #40]
   9e3f8:	f9000661 	str	x1, [x19, #8]
   9e3fc:	f9001293 	str	x19, [x20, #32]
   9e400:	34fffec0 	cbz	w0, 9e3d8 <CClassAllocator::Free(void*)+0x48>
   9e404:	b9403280 	ldr	w0, [x20, #48]
   9e408:	34fffe80 	cbz	w0, 9e3d8 <CClassAllocator::Free(void*)+0x48>
   9e40c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e410:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9e414:	14002b7b 	b	a9200 <LeaveCritical>
   9e418:	d00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9e41c:	900000a0 	adrp	x0, b2000 <_etext+0x1158>
   9e420:	913a2021 	add	x1, x1, #0xe88
   9e424:	91002000 	add	x0, x0, #0x8
   9e428:	52801622 	mov	w2, #0xb1                  	// #177
   9e42c:	97fffe45 	bl	9dd40 <assertion_failed>
   9e430:	d00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9e434:	d00000a0 	adrp	x0, b4000 <_etext+0x3158>
   9e438:	913a2021 	add	x1, x1, #0xe88
   9e43c:	913ee000 	add	x0, x0, #0xfb8
   9e440:	528016a2 	mov	w2, #0xb5                  	// #181
   9e444:	97fffe3f 	bl	9dd40 <assertion_failed>
   9e448:	d00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9e44c:	d00000a0 	adrp	x0, b4000 <_etext+0x3158>
   9e450:	913a2021 	add	x1, x1, #0xe88
   9e454:	913f6000 	add	x0, x0, #0xfd8
   9e458:	528016c2 	mov	w2, #0xb6                  	// #182
   9e45c:	97fffe39 	bl	9dd40 <assertion_failed>

000000000009e460 <debug_hexdump(void const*, unsigned int, char const*)>:
   9e460:	d102c3ff 	sub	sp, sp, #0xb0
   9e464:	f100005f 	cmp	x2, #0x0
   9e468:	a9077bfd 	stp	x29, x30, [sp, #112]
   9e46c:	9101c3fd 	add	x29, sp, #0x70
   9e470:	a90853f3 	stp	x19, x20, [sp, #128]
   9e474:	aa0003f3 	mov	x19, x0
   9e478:	900000e0 	adrp	x0, ba000 <CursorSymbol+0x188>
   9e47c:	910de000 	add	x0, x0, #0x378
   9e480:	2a0103f4 	mov	w20, w1
   9e484:	a9095bf5 	stp	x21, x22, [sp, #144]
   9e488:	9a820015 	csel	x21, x0, x2, eq	// eq = none
   9e48c:	94000561 	bl	9fa10 <CLogger::Get()>
   9e490:	d00000a3 	adrp	x3, b4000 <_etext+0x3158>
   9e494:	aa1503e1 	mov	x1, x21
   9e498:	aa1303e5 	mov	x5, x19
   9e49c:	2a1403e4 	mov	w4, w20
   9e4a0:	913fc063 	add	x3, x3, #0xff0
   9e4a4:	52800082 	mov	w2, #0x4                   	// #4
   9e4a8:	94000746 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9e4ac:	340005f4 	cbz	w20, 9e568 <debug_hexdump(void const*, unsigned int, char const*)+0x108>
   9e4b0:	f00000b6 	adrp	x22, b5000 <_etext+0x4158>
   9e4b4:	910062d6 	add	x22, x22, #0x18
   9e4b8:	f90053f7 	str	x23, [sp, #160]
   9e4bc:	12000e97 	and	w23, w20, #0xf
   9e4c0:	14000003 	b	9e4cc <debug_hexdump(void const*, unsigned int, char const*)+0x6c>
   9e4c4:	71004294 	subs	w20, w20, #0x10
   9e4c8:	540004e0 	b.eq	9e564 <debug_hexdump(void const*, unsigned int, char const*)+0x104>  // b.none
   9e4cc:	94000551 	bl	9fa10 <CLogger::Get()>
   9e4d0:	39401665 	ldrb	w5, [x19, #5]
   9e4d4:	12003e64 	and	w4, w19, #0xffff
   9e4d8:	aa1603e3 	mov	x3, x22
   9e4dc:	52800082 	mov	w2, #0x4                   	// #4
   9e4e0:	aa1503e1 	mov	x1, x21
   9e4e4:	39401267 	ldrb	w7, [x19, #4]
   9e4e8:	91004273 	add	x19, x19, #0x10
   9e4ec:	385f3266 	ldurb	w6, [x19, #-13]
   9e4f0:	b90013e5 	str	w5, [sp, #16]
   9e4f4:	385ff265 	ldurb	w5, [x19, #-1]
   9e4f8:	b9000be7 	str	w7, [sp, #8]
   9e4fc:	385fe267 	ldurb	w7, [x19, #-2]
   9e500:	b90003e6 	str	w6, [sp]
   9e504:	385fd266 	ldurb	w6, [x19, #-3]
   9e508:	b90063e5 	str	w5, [sp, #96]
   9e50c:	385fc265 	ldurb	w5, [x19, #-4]
   9e510:	b9005be7 	str	w7, [sp, #88]
   9e514:	385fb267 	ldurb	w7, [x19, #-5]
   9e518:	b90053e6 	str	w6, [sp, #80]
   9e51c:	385fa266 	ldurb	w6, [x19, #-6]
   9e520:	b9004be5 	str	w5, [sp, #72]
   9e524:	385f9265 	ldurb	w5, [x19, #-7]
   9e528:	b90043e7 	str	w7, [sp, #64]
   9e52c:	385f8267 	ldurb	w7, [x19, #-8]
   9e530:	b9003be6 	str	w6, [sp, #56]
   9e534:	385f7266 	ldurb	w6, [x19, #-9]
   9e538:	b90033e5 	str	w5, [sp, #48]
   9e53c:	385f6265 	ldurb	w5, [x19, #-10]
   9e540:	b9002be7 	str	w7, [sp, #40]
   9e544:	385f2267 	ldurb	w7, [x19, #-14]
   9e548:	b90023e6 	str	w6, [sp, #32]
   9e54c:	385f1266 	ldurb	w6, [x19, #-15]
   9e550:	b9001be5 	str	w5, [sp, #24]
   9e554:	385f0265 	ldurb	w5, [x19, #-16]
   9e558:	9400071a 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9e55c:	6b1402ff 	cmp	w23, w20
   9e560:	54fffb21 	b.ne	9e4c4 <debug_hexdump(void const*, unsigned int, char const*)+0x64>  // b.any
   9e564:	f94053f7 	ldr	x23, [sp, #160]
   9e568:	a9477bfd 	ldp	x29, x30, [sp, #112]
   9e56c:	a94853f3 	ldp	x19, x20, [sp, #128]
   9e570:	a9495bf5 	ldp	x21, x22, [sp, #144]
   9e574:	9102c3ff 	add	sp, sp, #0xb0
   9e578:	d65f03c0 	ret
   9e57c:	d503201f 	nop

000000000009e580 <debug_stacktrace(unsigned long const*, char const*)>:
   9e580:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9e584:	910003fd 	mov	x29, sp
   9e588:	f100003f 	cmp	x1, #0x0
   9e58c:	a90153f3 	stp	x19, x20, [sp, #16]
   9e590:	aa0003f4 	mov	x20, x0
   9e594:	d2800013 	mov	x19, #0x0                   	// #0
   9e598:	900000e0 	adrp	x0, ba000 <CursorSymbol+0x188>
   9e59c:	910de000 	add	x0, x0, #0x378
   9e5a0:	a9025bf5 	stp	x21, x22, [sp, #32]
   9e5a4:	d0000096 	adrp	x22, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   9e5a8:	913aa2d6 	add	x22, x22, #0xea8
   9e5ac:	b2404bf5 	mov	x21, #0x7ffff               	// #524287
   9e5b0:	a90363f7 	stp	x23, x24, [sp, #48]
   9e5b4:	f00000b8 	adrp	x24, b5000 <_etext+0x4158>
   9e5b8:	9101c318 	add	x24, x24, #0x70
   9e5bc:	9a810017 	csel	x23, x0, x1, eq	// eq = none
   9e5c0:	14000004 	b	9e5d0 <debug_stacktrace(unsigned long const*, char const*)+0x50>
   9e5c4:	91000673 	add	x19, x19, #0x1
   9e5c8:	f101027f 	cmp	x19, #0x40
   9e5cc:	54000240 	b.eq	9e614 <debug_stacktrace(unsigned long const*, char const*)+0x94>  // b.none
   9e5d0:	f8737a82 	ldr	x2, [x20, x19, lsl #3]
   9e5d4:	eb15005f 	cmp	x2, x21
   9e5d8:	54ffff69 	b.ls	9e5c4 <debug_stacktrace(unsigned long const*, char const*)+0x44>  // b.plast
   9e5dc:	eb16005f 	cmp	x2, x22
   9e5e0:	54ffff22 	b.cs	9e5c4 <debug_stacktrace(unsigned long const*, char const*)+0x44>  // b.hs, b.nlast
   9e5e4:	f240045f 	tst	x2, #0x3
   9e5e8:	54fffee1 	b.ne	9e5c4 <debug_stacktrace(unsigned long const*, char const*)+0x44>  // b.any
   9e5ec:	94000509 	bl	9fa10 <CLogger::Get()>
   9e5f0:	2a1303e4 	mov	w4, w19
   9e5f4:	aa1803e3 	mov	x3, x24
   9e5f8:	f8737a85 	ldr	x5, [x20, x19, lsl #3]
   9e5fc:	52800082 	mov	w2, #0x4                   	// #4
   9e600:	aa1703e1 	mov	x1, x23
   9e604:	91000673 	add	x19, x19, #0x1
   9e608:	940006ee 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   9e60c:	f101027f 	cmp	x19, #0x40
   9e610:	54fffe01 	b.ne	9e5d0 <debug_stacktrace(unsigned long const*, char const*)+0x50>  // b.any
   9e614:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e618:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9e61c:	a94363f7 	ldp	x23, x24, [sp, #48]
   9e620:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9e624:	d65f03c0 	ret
	...

000000000009e630 <CDevice::Read(void*, unsigned long)>:
   9e630:	12800000 	mov	w0, #0xffffffff            	// #-1
   9e634:	d65f03c0 	ret
   9e638:	d503201f 	nop
   9e63c:	d503201f 	nop

000000000009e640 <CDevice::Seek(unsigned long)>:
   9e640:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   9e644:	d65f03c0 	ret
   9e648:	d503201f 	nop
   9e64c:	d503201f 	nop

000000000009e650 <CDevice::GetSize() const>:
   9e650:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   9e654:	d65f03c0 	ret
   9e658:	d503201f 	nop
   9e65c:	d503201f 	nop

000000000009e660 <CDevice::IOCtl(unsigned long, void*)>:
   9e660:	12800000 	mov	w0, #0xffffffff            	// #-1
   9e664:	d65f03c0 	ret
   9e668:	d503201f 	nop
   9e66c:	d503201f 	nop

000000000009e670 <CDevice::RemoveDevice()>:
   9e670:	52800000 	mov	w0, #0x0                   	// #0
   9e674:	d65f03c0 	ret
   9e678:	d503201f 	nop
   9e67c:	d503201f 	nop

000000000009e680 <CDevice::~CDevice()>:
   9e680:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9e684:	910003fd 	mov	x29, sp
   9e688:	900000e1 	adrp	x1, ba000 <CursorSymbol+0x188>
   9e68c:	910e4021 	add	x1, x1, #0x390
   9e690:	a9025bf5 	stp	x21, x22, [sp, #32]
   9e694:	aa0003f5 	mov	x21, x0
   9e698:	aa0003f6 	mov	x22, x0
   9e69c:	a90153f3 	stp	x19, x20, [sp, #16]
   9e6a0:	f80086a1 	str	x1, [x21], #8
   9e6a4:	1400000a 	b	9e6cc <CDevice::~CDevice()+0x4c>
   9e6a8:	f9400661 	ldr	x1, [x19, #8]
   9e6ac:	aa1603e0 	mov	x0, x22
   9e6b0:	d63f0040 	blr	x2
   9e6b4:	aa1503e0 	mov	x0, x21
   9e6b8:	aa1403e1 	mov	x1, x20
   9e6bc:	94000b29 	bl	a1360 <CPtrList::Remove(TPtrListElement*)>
   9e6c0:	aa1303e0 	mov	x0, x19
   9e6c4:	d2800201 	mov	x1, #0x10                  	// #16
   9e6c8:	9400270e 	bl	a8300 <operator delete(void*, unsigned long)>
   9e6cc:	aa1503e0 	mov	x0, x21
   9e6d0:	94000a70 	bl	a1090 <CPtrList::GetFirst() const>
   9e6d4:	aa0003f4 	mov	x20, x0
   9e6d8:	b4000160 	cbz	x0, 9e704 <CDevice::~CDevice()+0x84>
   9e6dc:	94000a89 	bl	a1100 <CPtrList::GetPtr(TPtrListElement*)>
   9e6e0:	f9400002 	ldr	x2, [x0]
   9e6e4:	aa0003f3 	mov	x19, x0
   9e6e8:	b5fffe02 	cbnz	x2, 9e6a8 <CDevice::~CDevice()+0x28>
   9e6ec:	f00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9e6f0:	f00000a0 	adrp	x0, b5000 <_etext+0x4158>
   9e6f4:	91022021 	add	x1, x1, #0x88
   9e6f8:	91026000 	add	x0, x0, #0x98
   9e6fc:	52800502 	mov	w2, #0x28                  	// #40
   9e700:	97fffd90 	bl	9dd40 <assertion_failed>
   9e704:	aa1503e0 	mov	x0, x21
   9e708:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e70c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9e710:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9e714:	14000a53 	b	a1060 <CPtrList::~CPtrList()>
   9e718:	d503201f 	nop
   9e71c:	d503201f 	nop

000000000009e720 <CDevice::~CDevice()>:
   9e720:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9e724:	910003fd 	mov	x29, sp
   9e728:	f9000bf3 	str	x19, [sp, #16]
   9e72c:	aa0003f3 	mov	x19, x0
   9e730:	97ffffd4 	bl	9e680 <CDevice::~CDevice()>
   9e734:	aa1303e0 	mov	x0, x19
   9e738:	d2800201 	mov	x1, #0x10                  	// #16
   9e73c:	f9400bf3 	ldr	x19, [sp, #16]
   9e740:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9e744:	140026ef 	b	a8300 <operator delete(void*, unsigned long)>
   9e748:	d503201f 	nop
   9e74c:	d503201f 	nop

000000000009e750 <CDevice::CDevice()>:
   9e750:	900000e1 	adrp	x1, ba000 <CursorSymbol+0x188>
   9e754:	910e4021 	add	x1, x1, #0x390
   9e758:	f8008401 	str	x1, [x0], #8
   9e75c:	14000a3d 	b	a1050 <CPtrList::CPtrList()>

000000000009e760 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)>:
   9e760:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9e764:	910003fd 	mov	x29, sp
   9e768:	a90153f3 	stp	x19, x20, [sp, #16]
   9e76c:	a9025bf5 	stp	x21, x22, [sp, #32]
   9e770:	b4000361 	cbz	x1, 9e7dc <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)+0x7c>
   9e774:	aa0003f3 	mov	x19, x0
   9e778:	d2800200 	mov	x0, #0x10                  	// #16
   9e77c:	aa0103f5 	mov	x21, x1
   9e780:	aa0203f6 	mov	x22, x2
   9e784:	940026b7 	bl	a8260 <operator new(unsigned long)>
   9e788:	aa0003f4 	mov	x20, x0
   9e78c:	91002273 	add	x19, x19, #0x8
   9e790:	aa1303e0 	mov	x0, x19
   9e794:	a9005a95 	stp	x21, x22, [x20]
   9e798:	94000a3e 	bl	a1090 <CPtrList::GetFirst() const>
   9e79c:	aa0003e1 	mov	x1, x0
   9e7a0:	aa1403e2 	mov	x2, x20
   9e7a4:	aa1303e0 	mov	x0, x19
   9e7a8:	b40000e1 	cbz	x1, 9e7c4 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)+0x64>
   9e7ac:	94000a6d 	bl	a1160 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   9e7b0:	aa1403e0 	mov	x0, x20
   9e7b4:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e7b8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9e7bc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9e7c0:	d65f03c0 	ret
   9e7c4:	94000aa7 	bl	a1260 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   9e7c8:	aa1403e0 	mov	x0, x20
   9e7cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e7d0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9e7d4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9e7d8:	d65f03c0 	ret
   9e7dc:	f00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9e7e0:	f00000a0 	adrp	x0, b5000 <_etext+0x4158>
   9e7e4:	91022021 	add	x1, x1, #0x88
   9e7e8:	91290000 	add	x0, x0, #0xa40
   9e7ec:	52800a42 	mov	w2, #0x52                  	// #82
   9e7f0:	97fffd54 	bl	9dd40 <assertion_failed>
   9e7f4:	d503201f 	nop
   9e7f8:	d503201f 	nop
   9e7fc:	d503201f 	nop

000000000009e800 <CDevice::UnregisterRemovedHandler(void*)>:
   9e800:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9e804:	910003fd 	mov	x29, sp
   9e808:	a90153f3 	stp	x19, x20, [sp, #16]
   9e80c:	b40001c1 	cbz	x1, 9e844 <CDevice::UnregisterRemovedHandler(void*)+0x44>
   9e810:	91002013 	add	x19, x0, #0x8
   9e814:	aa0103f4 	mov	x20, x1
   9e818:	aa1303e0 	mov	x0, x19
   9e81c:	94000b1d 	bl	a1490 <CPtrList::Find(void*) const>
   9e820:	aa0003e1 	mov	x1, x0
   9e824:	b40001c0 	cbz	x0, 9e85c <CDevice::UnregisterRemovedHandler(void*)+0x5c>
   9e828:	aa1303e0 	mov	x0, x19
   9e82c:	94000acd 	bl	a1360 <CPtrList::Remove(TPtrListElement*)>
   9e830:	aa1403e0 	mov	x0, x20
   9e834:	d2800201 	mov	x1, #0x10                  	// #16
   9e838:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e83c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9e840:	140026b0 	b	a8300 <operator delete(void*, unsigned long)>
   9e844:	f00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9e848:	f00000a0 	adrp	x0, b5000 <_etext+0x4158>
   9e84c:	91022021 	add	x1, x1, #0x88
   9e850:	9102c000 	add	x0, x0, #0xb0
   9e854:	52800d22 	mov	w2, #0x69                  	// #105
   9e858:	97fffd3a 	bl	9dd40 <assertion_failed>
   9e85c:	f00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9e860:	f00000a0 	adrp	x0, b5000 <_etext+0x4158>
   9e864:	91022021 	add	x1, x1, #0x88
   9e868:	91030000 	add	x0, x0, #0xc0
   9e86c:	52800d82 	mov	w2, #0x6c                  	// #108
   9e870:	97fffd34 	bl	9dd40 <assertion_failed>
	...

000000000009e880 <CDeviceNameService::CDeviceNameService()>:
   9e880:	f00000e1 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   9e884:	f900001f 	str	xzr, [x0]
   9e888:	f940a822 	ldr	x2, [x1, #336]
   9e88c:	b900081f 	str	wzr, [x0, #8]
   9e890:	b5000062 	cbnz	x2, 9e89c <CDeviceNameService::CDeviceNameService()+0x1c>
   9e894:	f900a820 	str	x0, [x1, #336]
   9e898:	d65f03c0 	ret
   9e89c:	f00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9e8a0:	f00000a0 	adrp	x0, b5000 <_etext+0x4158>
   9e8a4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9e8a8:	91034021 	add	x1, x1, #0xd0
   9e8ac:	910003fd 	mov	x29, sp
   9e8b0:	9103a000 	add	x0, x0, #0xe8
   9e8b4:	528003e2 	mov	w2, #0x1f                  	// #31
   9e8b8:	97fffd22 	bl	9dd40 <assertion_failed>
   9e8bc:	d503201f 	nop

000000000009e8c0 <CDeviceNameService::~CDeviceNameService()>:
   9e8c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9e8c4:	910003fd 	mov	x29, sp
   9e8c8:	a90153f3 	stp	x19, x20, [sp, #16]
   9e8cc:	f9400013 	ldr	x19, [x0]
   9e8d0:	b4000173 	cbz	x19, 9e8fc <CDeviceNameService::~CDeviceNameService()+0x3c>
   9e8d4:	aa0003f4 	mov	x20, x0
   9e8d8:	f9400660 	ldr	x0, [x19, #8]
   9e8dc:	f9400273 	ldr	x19, [x19]
   9e8e0:	b4000040 	cbz	x0, 9e8e8 <CDeviceNameService::~CDeviceNameService()+0x28>
   9e8e4:	9400267b 	bl	a82d0 <operator delete[](void*)>
   9e8e8:	d2800401 	mov	x1, #0x20                  	// #32
   9e8ec:	f9400280 	ldr	x0, [x20]
   9e8f0:	94002684 	bl	a8300 <operator delete(void*, unsigned long)>
   9e8f4:	f9000293 	str	x19, [x20]
   9e8f8:	b5ffff13 	cbnz	x19, 9e8d8 <CDeviceNameService::~CDeviceNameService()+0x18>
   9e8fc:	f00000e0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   9e900:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e904:	f900a81f 	str	xzr, [x0, #336]
   9e908:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9e90c:	d65f03c0 	ret

000000000009e910 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
   9e910:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9e914:	910003fd 	mov	x29, sp
   9e918:	a90153f3 	stp	x19, x20, [sp, #16]
   9e91c:	aa0003f4 	mov	x20, x0
   9e920:	b9400800 	ldr	w0, [x0, #8]
   9e924:	a9025bf5 	stp	x21, x22, [sp, #32]
   9e928:	aa0103f5 	mov	x21, x1
   9e92c:	aa0203f6 	mov	x22, x2
   9e930:	f9001bf7 	str	x23, [sp, #48]
   9e934:	12001c77 	and	w23, w3, #0xff
   9e938:	35000320 	cbnz	w0, 9e99c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x8c>
   9e93c:	d2800400 	mov	x0, #0x20                  	// #32
   9e940:	94002648 	bl	a8260 <operator new(unsigned long)>
   9e944:	aa0003f3 	mov	x19, x0
   9e948:	b4000355 	cbz	x21, 9e9b0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa0>
   9e94c:	aa1503e0 	mov	x0, x21
   9e950:	94002218 	bl	a71b0 <strlen>
   9e954:	91000400 	add	x0, x0, #0x1
   9e958:	9400264a 	bl	a8280 <operator new[](unsigned long)>
   9e95c:	aa1503e1 	mov	x1, x21
   9e960:	f9000660 	str	x0, [x19, #8]
   9e964:	940022a3 	bl	a73f0 <strcpy>
   9e968:	b40003b6 	cbz	x22, 9e9dc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xcc>
   9e96c:	f9400281 	ldr	x1, [x20]
   9e970:	f9000293 	str	x19, [x20]
   9e974:	b9400a80 	ldr	w0, [x20, #8]
   9e978:	f9000a76 	str	x22, [x19, #16]
   9e97c:	39006277 	strb	w23, [x19, #24]
   9e980:	f9000261 	str	x1, [x19]
   9e984:	35000220 	cbnz	w0, 9e9c8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb8>
   9e988:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e98c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9e990:	f9401bf7 	ldr	x23, [sp, #48]
   9e994:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9e998:	d65f03c0 	ret
   9e99c:	940029e9 	bl	a9140 <EnterCritical>
   9e9a0:	d2800400 	mov	x0, #0x20                  	// #32
   9e9a4:	9400262f 	bl	a8260 <operator new(unsigned long)>
   9e9a8:	aa0003f3 	mov	x19, x0
   9e9ac:	b5fffd15 	cbnz	x21, 9e94c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x3c>
   9e9b0:	f00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9e9b4:	900000a0 	adrp	x0, b2000 <_etext+0x1158>
   9e9b8:	91034021 	add	x1, x1, #0xd0
   9e9bc:	910dc000 	add	x0, x0, #0x370
   9e9c0:	52800762 	mov	w2, #0x3b                  	// #59
   9e9c4:	97fffcdf 	bl	9dd40 <assertion_failed>
   9e9c8:	a94153f3 	ldp	x19, x20, [sp, #16]
   9e9cc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9e9d0:	f9401bf7 	ldr	x23, [sp, #48]
   9e9d4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9e9d8:	14002a0a 	b	a9200 <LeaveCritical>
   9e9dc:	f00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9e9e0:	f00000a0 	adrp	x0, b5000 <_etext+0x4158>
   9e9e4:	91034021 	add	x1, x1, #0xd0
   9e9e8:	9103e000 	add	x0, x0, #0xf8
   9e9ec:	52800802 	mov	w2, #0x40                  	// #64
   9e9f0:	97fffcd4 	bl	9dd40 <assertion_failed>
   9e9f4:	d503201f 	nop
   9e9f8:	d503201f 	nop
   9e9fc:	d503201f 	nop

000000000009ea00 <CDeviceNameService::RemoveDevice(char const*, bool)>:
   9ea00:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9ea04:	910003fd 	mov	x29, sp
   9ea08:	a90153f3 	stp	x19, x20, [sp, #16]
   9ea0c:	a9025bf5 	stp	x21, x22, [sp, #32]
   9ea10:	f9001bf7 	str	x23, [sp, #48]
   9ea14:	b40006e1 	cbz	x1, 9eaf0 <CDeviceNameService::RemoveDevice(char const*, bool)+0xf0>
   9ea18:	aa0003f6 	mov	x22, x0
   9ea1c:	b9400800 	ldr	w0, [x0, #8]
   9ea20:	aa0103f4 	mov	x20, x1
   9ea24:	12001c57 	and	w23, w2, #0xff
   9ea28:	350002e0 	cbnz	w0, 9ea84 <CDeviceNameService::RemoveDevice(char const*, bool)+0x84>
   9ea2c:	f94002d3 	ldr	x19, [x22]
   9ea30:	b4000713 	cbz	x19, 9eb10 <CDeviceNameService::RemoveDevice(char const*, bool)+0x110>
   9ea34:	d2800015 	mov	x21, #0x0                   	// #0
   9ea38:	1400000b 	b	9ea64 <CDeviceNameService::RemoveDevice(char const*, bool)+0x64>
   9ea3c:	aa1403e0 	mov	x0, x20
   9ea40:	940021e8 	bl	a71e0 <strcmp>
   9ea44:	35000080 	cbnz	w0, 9ea54 <CDeviceNameService::RemoveDevice(char const*, bool)+0x54>
   9ea48:	39406260 	ldrb	w0, [x19, #24]
   9ea4c:	6b17001f 	cmp	w0, w23
   9ea50:	540002e0 	b.eq	9eaac <CDeviceNameService::RemoveDevice(char const*, bool)+0xac>  // b.none
   9ea54:	f9400262 	ldr	x2, [x19]
   9ea58:	aa1303f5 	mov	x21, x19
   9ea5c:	b40001a2 	cbz	x2, 9ea90 <CDeviceNameService::RemoveDevice(char const*, bool)+0x90>
   9ea60:	aa0203f3 	mov	x19, x2
   9ea64:	f9400661 	ldr	x1, [x19, #8]
   9ea68:	b5fffea1 	cbnz	x1, 9ea3c <CDeviceNameService::RemoveDevice(char const*, bool)+0x3c>
   9ea6c:	f00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9ea70:	f00000a0 	adrp	x0, b5000 <_etext+0x4158>
   9ea74:	91034021 	add	x1, x1, #0xd0
   9ea78:	91042000 	add	x0, x0, #0x108
   9ea7c:	52800bc2 	mov	w2, #0x5e                  	// #94
   9ea80:	97fffcb0 	bl	9dd40 <assertion_failed>
   9ea84:	940029af 	bl	a9140 <EnterCritical>
   9ea88:	f94002d3 	ldr	x19, [x22]
   9ea8c:	b5fffd53 	cbnz	x19, 9ea34 <CDeviceNameService::RemoveDevice(char const*, bool)+0x34>
   9ea90:	b9400ac0 	ldr	w0, [x22, #8]
   9ea94:	340003e0 	cbz	w0, 9eb10 <CDeviceNameService::RemoveDevice(char const*, bool)+0x110>
   9ea98:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ea9c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9eaa0:	f9401bf7 	ldr	x23, [sp, #48]
   9eaa4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9eaa8:	140029d6 	b	a9200 <LeaveCritical>
   9eaac:	f9400260 	ldr	x0, [x19]
   9eab0:	b40001d5 	cbz	x21, 9eae8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe8>
   9eab4:	f90002a0 	str	x0, [x21]
   9eab8:	b9400ac0 	ldr	w0, [x22, #8]
   9eabc:	35000260 	cbnz	w0, 9eb08 <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
   9eac0:	f9400660 	ldr	x0, [x19, #8]
   9eac4:	b4000040 	cbz	x0, 9eacc <CDeviceNameService::RemoveDevice(char const*, bool)+0xcc>
   9eac8:	94002602 	bl	a82d0 <operator delete[](void*)>
   9eacc:	aa1303e0 	mov	x0, x19
   9ead0:	d2800401 	mov	x1, #0x20                  	// #32
   9ead4:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ead8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9eadc:	f9401bf7 	ldr	x23, [sp, #48]
   9eae0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9eae4:	14002607 	b	a8300 <operator delete(void*, unsigned long)>
   9eae8:	f90002c0 	str	x0, [x22]
   9eaec:	17fffff3 	b	9eab8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb8>
   9eaf0:	f00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9eaf4:	900000a0 	adrp	x0, b2000 <_etext+0x1158>
   9eaf8:	91034021 	add	x1, x1, #0xd0
   9eafc:	910dc000 	add	x0, x0, #0x370
   9eb00:	52800ac2 	mov	w2, #0x56                  	// #86
   9eb04:	97fffc8f 	bl	9dd40 <assertion_failed>
   9eb08:	940029be 	bl	a9200 <LeaveCritical>
   9eb0c:	17ffffed 	b	9eac0 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc0>
   9eb10:	a94153f3 	ldp	x19, x20, [sp, #16]
   9eb14:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9eb18:	f9401bf7 	ldr	x23, [sp, #48]
   9eb1c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9eb20:	d65f03c0 	ret
   9eb24:	d503201f 	nop
   9eb28:	d503201f 	nop
   9eb2c:	d503201f 	nop

000000000009eb30 <CDeviceNameService::GetDevice(char const*, bool)>:
   9eb30:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9eb34:	910003fd 	mov	x29, sp
   9eb38:	a90153f3 	stp	x19, x20, [sp, #16]
   9eb3c:	a9025bf5 	stp	x21, x22, [sp, #32]
   9eb40:	b4000481 	cbz	x1, 9ebd0 <CDeviceNameService::GetDevice(char const*, bool)+0xa0>
   9eb44:	aa0003f5 	mov	x21, x0
   9eb48:	aa0103f4 	mov	x20, x1
   9eb4c:	b9400800 	ldr	w0, [x0, #8]
   9eb50:	12001c56 	and	w22, w2, #0xff
   9eb54:	35000280 	cbnz	w0, 9eba4 <CDeviceNameService::GetDevice(char const*, bool)+0x74>
   9eb58:	f94002b3 	ldr	x19, [x21]
   9eb5c:	b5000153 	cbnz	x19, 9eb84 <CDeviceNameService::GetDevice(char const*, bool)+0x54>
   9eb60:	14000017 	b	9ebbc <CDeviceNameService::GetDevice(char const*, bool)+0x8c>
   9eb64:	aa1403e0 	mov	x0, x20
   9eb68:	9400219e 	bl	a71e0 <strcmp>
   9eb6c:	35000080 	cbnz	w0, 9eb7c <CDeviceNameService::GetDevice(char const*, bool)+0x4c>
   9eb70:	39406261 	ldrb	w1, [x19, #24]
   9eb74:	6b16003f 	cmp	w1, w22
   9eb78:	54000380 	b.eq	9ebe8 <CDeviceNameService::GetDevice(char const*, bool)+0xb8>  // b.none
   9eb7c:	f9400273 	ldr	x19, [x19]
   9eb80:	b4000193 	cbz	x19, 9ebb0 <CDeviceNameService::GetDevice(char const*, bool)+0x80>
   9eb84:	f9400661 	ldr	x1, [x19, #8]
   9eb88:	b5fffee1 	cbnz	x1, 9eb64 <CDeviceNameService::GetDevice(char const*, bool)+0x34>
   9eb8c:	f00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9eb90:	f00000a0 	adrp	x0, b5000 <_etext+0x4158>
   9eb94:	91034021 	add	x1, x1, #0xd0
   9eb98:	91042000 	add	x0, x0, #0x108
   9eb9c:	52801242 	mov	w2, #0x92                  	// #146
   9eba0:	97fffc68 	bl	9dd40 <assertion_failed>
   9eba4:	94002967 	bl	a9140 <EnterCritical>
   9eba8:	f94002b3 	ldr	x19, [x21]
   9ebac:	b5fffed3 	cbnz	x19, 9eb84 <CDeviceNameService::GetDevice(char const*, bool)+0x54>
   9ebb0:	b9400aa0 	ldr	w0, [x21, #8]
   9ebb4:	34000040 	cbz	w0, 9ebbc <CDeviceNameService::GetDevice(char const*, bool)+0x8c>
   9ebb8:	94002992 	bl	a9200 <LeaveCritical>
   9ebbc:	d2800000 	mov	x0, #0x0                   	// #0
   9ebc0:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ebc4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9ebc8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9ebcc:	d65f03c0 	ret
   9ebd0:	f00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9ebd4:	900000a0 	adrp	x0, b2000 <_etext+0x1158>
   9ebd8:	91034021 	add	x1, x1, #0xd0
   9ebdc:	910dc000 	add	x0, x0, #0x370
   9ebe0:	52801162 	mov	w2, #0x8b                  	// #139
   9ebe4:	97fffc57 	bl	9dd40 <assertion_failed>
   9ebe8:	b9400aa1 	ldr	w1, [x21, #8]
   9ebec:	f9400a60 	ldr	x0, [x19, #16]
   9ebf0:	35000101 	cbnz	w1, 9ec10 <CDeviceNameService::GetDevice(char const*, bool)+0xe0>
   9ebf4:	b5fffe60 	cbnz	x0, 9ebc0 <CDeviceNameService::GetDevice(char const*, bool)+0x90>
   9ebf8:	f00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9ebfc:	f00000a0 	adrp	x0, b5000 <_etext+0x4158>
   9ec00:	91034021 	add	x1, x1, #0xd0
   9ec04:	91048000 	add	x0, x0, #0x120
   9ec08:	52801342 	mov	w2, #0x9a                  	// #154
   9ec0c:	97fffc4d 	bl	9dd40 <assertion_failed>
   9ec10:	f9001fe0 	str	x0, [sp, #56]
   9ec14:	9400297b 	bl	a9200 <LeaveCritical>
   9ec18:	f9401fe0 	ldr	x0, [sp, #56]
   9ec1c:	b5fffd20 	cbnz	x0, 9ebc0 <CDeviceNameService::GetDevice(char const*, bool)+0x90>
   9ec20:	17fffff6 	b	9ebf8 <CDeviceNameService::GetDevice(char const*, bool)+0xc8>
   9ec24:	d503201f 	nop
   9ec28:	d503201f 	nop
   9ec2c:	d503201f 	nop

000000000009ec30 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)>:
   9ec30:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9ec34:	910003fd 	mov	x29, sp
   9ec38:	a90153f3 	stp	x19, x20, [sp, #16]
   9ec3c:	a9025bf5 	stp	x21, x22, [sp, #32]
   9ec40:	aa0103f5 	mov	x21, x1
   9ec44:	aa0203f6 	mov	x22, x2
   9ec48:	f9001bf7 	str	x23, [sp, #48]
   9ec4c:	aa0003f7 	mov	x23, x0
   9ec50:	b9400800 	ldr	w0, [x0, #8]
   9ec54:	350002a0 	cbnz	w0, 9eca8 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x78>
   9ec58:	f94002f3 	ldr	x19, [x23]
   9ec5c:	b5000093 	cbnz	x19, 9ec6c <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x3c>
   9ec60:	14000018 	b	9ecc0 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x90>
   9ec64:	f9400273 	ldr	x19, [x19]
   9ec68:	b4000293 	cbz	x19, 9ecb8 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x88>
   9ec6c:	39406262 	ldrb	w2, [x19, #24]
   9ec70:	aa1603e3 	mov	x3, x22
   9ec74:	a9408261 	ldp	x1, x0, [x19, #8]
   9ec78:	d63f02a0 	blr	x21
   9ec7c:	72001c14 	ands	w20, w0, #0xff
   9ec80:	54ffff21 	b.ne	9ec64 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x34>  // b.any
   9ec84:	b9400ae0 	ldr	w0, [x23, #8]
   9ec88:	34000040 	cbz	w0, 9ec90 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x60>
   9ec8c:	9400295d 	bl	a9200 <LeaveCritical>
   9ec90:	2a1403e0 	mov	w0, w20
   9ec94:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ec98:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9ec9c:	f9401bf7 	ldr	x23, [sp, #48]
   9eca0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9eca4:	d65f03c0 	ret
   9eca8:	94002926 	bl	a9140 <EnterCritical>
   9ecac:	f94002f3 	ldr	x19, [x23]
   9ecb0:	b5fffdf3 	cbnz	x19, 9ec6c <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x3c>
   9ecb4:	d503201f 	nop
   9ecb8:	52800034 	mov	w20, #0x1                   	// #1
   9ecbc:	17fffff2 	b	9ec84 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x54>
   9ecc0:	52800034 	mov	w20, #0x1                   	// #1
   9ecc4:	17fffff3 	b	9ec90 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x60>
   9ecc8:	d503201f 	nop
   9eccc:	d503201f 	nop

000000000009ecd0 <CDeviceNameService::Get()>:
   9ecd0:	f00000e0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   9ecd4:	f940a800 	ldr	x0, [x0, #336]
   9ecd8:	b4000040 	cbz	x0, 9ece0 <CDeviceNameService::Get()+0x10>
   9ecdc:	d65f03c0 	ret
   9ece0:	f00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9ece4:	f00000a0 	adrp	x0, b5000 <_etext+0x4158>
   9ece8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9ecec:	91034021 	add	x1, x1, #0xd0
   9ecf0:	910003fd 	mov	x29, sp
   9ecf4:	9104c000 	add	x0, x0, #0x130
   9ecf8:	52801ca2 	mov	w2, #0xe5                  	// #229
   9ecfc:	97fffc11 	bl	9dd40 <assertion_failed>

000000000009ed00 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
   9ed00:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   9ed04:	910003fd 	mov	x29, sp
   9ed08:	a90153f3 	stp	x19, x20, [sp, #16]
   9ed0c:	aa0003f3 	mov	x19, x0
   9ed10:	910103e0 	add	x0, sp, #0x40
   9ed14:	aa0303f4 	mov	x20, x3
   9ed18:	a9025bf5 	stp	x21, x22, [sp, #32]
   9ed1c:	aa0103f5 	mov	x21, x1
   9ed20:	2a0203f6 	mov	w22, w2
   9ed24:	f9001bf7 	str	x23, [sp, #48]
   9ed28:	12001c97 	and	w23, w4, #0xff
   9ed2c:	94001649 	bl	a4650 <CString::CString()>
   9ed30:	900000a1 	adrp	x1, b2000 <_etext+0x1158>
   9ed34:	2a1603e3 	mov	w3, w22
   9ed38:	aa1503e2 	mov	x2, x21
   9ed3c:	910103e0 	add	x0, sp, #0x40
   9ed40:	91102021 	add	x1, x1, #0x408
   9ed44:	94001c7b 	bl	a5f30 <CString::Format(char const*, ...)>
   9ed48:	910103e0 	add	x0, sp, #0x40
   9ed4c:	94001685 	bl	a4760 <CString::operator char const*() const>
   9ed50:	2a1703e3 	mov	w3, w23
   9ed54:	aa1403e2 	mov	x2, x20
   9ed58:	aa0003e1 	mov	x1, x0
   9ed5c:	aa1303e0 	mov	x0, x19
   9ed60:	97fffeec 	bl	9e910 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   9ed64:	910103e0 	add	x0, sp, #0x40
   9ed68:	940015fe 	bl	a4560 <CString::~CString()>
   9ed6c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ed70:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9ed74:	f9401bf7 	ldr	x23, [sp, #48]
   9ed78:	a8c67bfd 	ldp	x29, x30, [sp], #96
   9ed7c:	d65f03c0 	ret

000000000009ed80 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
   9ed80:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   9ed84:	910003fd 	mov	x29, sp
   9ed88:	a90153f3 	stp	x19, x20, [sp, #16]
   9ed8c:	aa0003f3 	mov	x19, x0
   9ed90:	9100c3e0 	add	x0, sp, #0x30
   9ed94:	aa0103f4 	mov	x20, x1
   9ed98:	a9025bf5 	stp	x21, x22, [sp, #32]
   9ed9c:	2a0203f5 	mov	w21, w2
   9eda0:	12001c76 	and	w22, w3, #0xff
   9eda4:	9400162b 	bl	a4650 <CString::CString()>
   9eda8:	900000a1 	adrp	x1, b2000 <_etext+0x1158>
   9edac:	2a1503e3 	mov	w3, w21
   9edb0:	aa1403e2 	mov	x2, x20
   9edb4:	9100c3e0 	add	x0, sp, #0x30
   9edb8:	91102021 	add	x1, x1, #0x408
   9edbc:	94001c5d 	bl	a5f30 <CString::Format(char const*, ...)>
   9edc0:	9100c3e0 	add	x0, sp, #0x30
   9edc4:	94001667 	bl	a4760 <CString::operator char const*() const>
   9edc8:	2a1603e2 	mov	w2, w22
   9edcc:	aa0003e1 	mov	x1, x0
   9edd0:	aa1303e0 	mov	x0, x19
   9edd4:	97ffff0b 	bl	9ea00 <CDeviceNameService::RemoveDevice(char const*, bool)>
   9edd8:	9100c3e0 	add	x0, sp, #0x30
   9eddc:	940015e1 	bl	a4560 <CString::~CString()>
   9ede0:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ede4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9ede8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9edec:	d65f03c0 	ret

000000000009edf0 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
   9edf0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   9edf4:	910003fd 	mov	x29, sp
   9edf8:	a90153f3 	stp	x19, x20, [sp, #16]
   9edfc:	aa0003f3 	mov	x19, x0
   9ee00:	9100c3e0 	add	x0, sp, #0x30
   9ee04:	aa0103f4 	mov	x20, x1
   9ee08:	a9025bf5 	stp	x21, x22, [sp, #32]
   9ee0c:	2a0203f5 	mov	w21, w2
   9ee10:	12001c76 	and	w22, w3, #0xff
   9ee14:	9400160f 	bl	a4650 <CString::CString()>
   9ee18:	900000a1 	adrp	x1, b2000 <_etext+0x1158>
   9ee1c:	2a1503e3 	mov	w3, w21
   9ee20:	aa1403e2 	mov	x2, x20
   9ee24:	9100c3e0 	add	x0, sp, #0x30
   9ee28:	91102021 	add	x1, x1, #0x408
   9ee2c:	94001c41 	bl	a5f30 <CString::Format(char const*, ...)>
   9ee30:	9100c3e0 	add	x0, sp, #0x30
   9ee34:	9400164b 	bl	a4760 <CString::operator char const*() const>
   9ee38:	2a1603e2 	mov	w2, w22
   9ee3c:	aa0003e1 	mov	x1, x0
   9ee40:	aa1303e0 	mov	x0, x19
   9ee44:	97ffff3b 	bl	9eb30 <CDeviceNameService::GetDevice(char const*, bool)>
   9ee48:	aa0003f3 	mov	x19, x0
   9ee4c:	9100c3e0 	add	x0, sp, #0x30
   9ee50:	940015c4 	bl	a4560 <CString::~CString()>
   9ee54:	aa1303e0 	mov	x0, x19
   9ee58:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ee5c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9ee60:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9ee64:	d65f03c0 	ret
   9ee68:	d503201f 	nop
   9ee6c:	d503201f 	nop

000000000009ee70 <CDeviceNameService::ListDevices(CDevice*)>:
   9ee70:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
   9ee74:	910003fd 	mov	x29, sp
   9ee78:	a90153f3 	stp	x19, x20, [sp, #16]
   9ee7c:	b40008c1 	cbz	x1, 9ef94 <CDeviceNameService::ListDevices(CDevice*)+0x124>
   9ee80:	52800014 	mov	w20, #0x0                   	// #0
   9ee84:	f9400013 	ldr	x19, [x0]
   9ee88:	b4000813 	cbz	x19, 9ef88 <CDeviceNameService::ListDevices(CDevice*)+0x118>
   9ee8c:	a9025bf5 	stp	x21, x22, [sp, #32]
   9ee90:	aa0103f6 	mov	x22, x1
   9ee94:	a90363f7 	stp	x23, x24, [sp, #48]
   9ee98:	f00000b7 	adrp	x23, b5000 <_etext+0x4158>
   9ee9c:	910542f7 	add	x23, x23, #0x150
   9eea0:	52800418 	mov	w24, #0x20                  	// #32
   9eea4:	a9046bf9 	stp	x25, x26, [sp, #64]
   9eea8:	52800c7a 	mov	w26, #0x63                  	// #99
   9eeac:	52800159 	mov	w25, #0xa                   	// #10
   9eeb0:	a90573fb 	stp	x27, x28, [sp, #80]
   9eeb4:	14000018 	b	9ef14 <CDeviceNameService::ListDevices(CDevice*)+0xa4>
   9eeb8:	39406262 	ldrb	w2, [x19, #24]
   9eebc:	11000694 	add	w20, w20, #0x1
   9eec0:	aa1703e1 	mov	x1, x23
   9eec4:	7200069b 	ands	w27, w20, #0x3
   9eec8:	910183e0 	add	x0, sp, #0x60
   9eecc:	1a980324 	csel	w4, w25, w24, eq	// eq = none
   9eed0:	4b020342 	sub	w2, w26, w2
   9eed4:	94001c17 	bl	a5f30 <CString::Format(char const*, ...)>
   9eed8:	f94002c1 	ldr	x1, [x22]
   9eedc:	910183e0 	add	x0, sp, #0x60
   9eee0:	f9400c3c 	ldr	x28, [x1, #24]
   9eee4:	9400161f 	bl	a4760 <CString::operator char const*() const>
   9eee8:	aa0003f5 	mov	x21, x0
   9eeec:	910183e0 	add	x0, sp, #0x60
   9eef0:	94001670 	bl	a48b0 <CString::GetLength() const>
   9eef4:	aa0003e2 	mov	x2, x0
   9eef8:	aa1503e1 	mov	x1, x21
   9eefc:	aa1603e0 	mov	x0, x22
   9ef00:	d63f0380 	blr	x28
   9ef04:	910183e0 	add	x0, sp, #0x60
   9ef08:	f9400273 	ldr	x19, [x19]
   9ef0c:	94001595 	bl	a4560 <CString::~CString()>
   9ef10:	b4000173 	cbz	x19, 9ef3c <CDeviceNameService::ListDevices(CDevice*)+0xcc>
   9ef14:	910183e0 	add	x0, sp, #0x60
   9ef18:	940015ce 	bl	a4650 <CString::CString()>
   9ef1c:	f9400663 	ldr	x3, [x19, #8]
   9ef20:	b5fffcc3 	cbnz	x3, 9eeb8 <CDeviceNameService::ListDevices(CDevice*)+0x48>
   9ef24:	f00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9ef28:	f00000a0 	adrp	x0, b5000 <_etext+0x4158>
   9ef2c:	91034021 	add	x1, x1, #0xd0
   9ef30:	91042000 	add	x0, x0, #0x108
   9ef34:	52801a42 	mov	w2, #0xd2                  	// #210
   9ef38:	97fffb82 	bl	9dd40 <assertion_failed>
   9ef3c:	340001fb 	cbz	w27, 9ef78 <CDeviceNameService::ListDevices(CDevice*)+0x108>
   9ef40:	f94002c3 	ldr	x3, [x22]
   9ef44:	d00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9ef48:	aa1603e0 	mov	x0, x22
   9ef4c:	912e6021 	add	x1, x1, #0xb98
   9ef50:	d2800022 	mov	x2, #0x1                   	// #1
   9ef54:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ef58:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9ef5c:	a94363f7 	ldp	x23, x24, [sp, #48]
   9ef60:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9ef64:	a94573fb 	ldp	x27, x28, [sp, #80]
   9ef68:	f9400c63 	ldr	x3, [x3, #24]
   9ef6c:	a8c87bfd 	ldp	x29, x30, [sp], #128
   9ef70:	aa0303f0 	mov	x16, x3
   9ef74:	d61f0200 	br	x16
   9ef78:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9ef7c:	a94363f7 	ldp	x23, x24, [sp, #48]
   9ef80:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9ef84:	a94573fb 	ldp	x27, x28, [sp, #80]
   9ef88:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ef8c:	a8c87bfd 	ldp	x29, x30, [sp], #128
   9ef90:	d65f03c0 	ret
   9ef94:	f00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9ef98:	f00000a0 	adrp	x0, b5000 <_etext+0x4158>
   9ef9c:	a9025bf5 	stp	x21, x22, [sp, #32]
   9efa0:	91034021 	add	x1, x1, #0xd0
   9efa4:	91050000 	add	x0, x0, #0x140
   9efa8:	52801922 	mov	w2, #0xc9                  	// #201
   9efac:	a90363f7 	stp	x23, x24, [sp, #48]
   9efb0:	a9046bf9 	stp	x25, x26, [sp, #64]
   9efb4:	a90573fb 	stp	x27, x28, [sp, #80]
   9efb8:	97fffb62 	bl	9dd40 <assertion_failed>
   9efbc:	00000000 	udf	#0

000000000009efc0 <CKernelOptions::~CKernelOptions()>:
   9efc0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9efc4:	910003fd 	mov	x29, sp
   9efc8:	a90153f3 	stp	x19, x20, [sp, #16]
   9efcc:	f9444c13 	ldr	x19, [x0, #2200]
   9efd0:	b40001f3 	cbz	x19, 9f00c <CKernelOptions::~CKernelOptions()+0x4c>
   9efd4:	aa0003f4 	mov	x20, x0
   9efd8:	f9400261 	ldr	x1, [x19]
   9efdc:	f9400a60 	ldr	x0, [x19, #16]
   9efe0:	f9044e81 	str	x1, [x20, #2200]
   9efe4:	b4000040 	cbz	x0, 9efec <CKernelOptions::~CKernelOptions()+0x2c>
   9efe8:	940024ba 	bl	a82d0 <operator delete[](void*)>
   9efec:	f9400660 	ldr	x0, [x19, #8]
   9eff0:	b4000040 	cbz	x0, 9eff8 <CKernelOptions::~CKernelOptions()+0x38>
   9eff4:	940024b7 	bl	a82d0 <operator delete[](void*)>
   9eff8:	aa1303e0 	mov	x0, x19
   9effc:	d2800301 	mov	x1, #0x18                  	// #24
   9f000:	940024c0 	bl	a8300 <operator delete(void*, unsigned long)>
   9f004:	f9444e93 	ldr	x19, [x20, #2200]
   9f008:	b5fffe93 	cbnz	x19, 9efd8 <CKernelOptions::~CKernelOptions()+0x18>
   9f00c:	d00000e0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   9f010:	a94153f3 	ldp	x19, x20, [sp, #16]
   9f014:	f900ac1f 	str	xzr, [x0, #344]
   9f018:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9f01c:	d65f03c0 	ret

000000000009f020 <CKernelOptions::GetWidth() const>:
   9f020:	b9481800 	ldr	w0, [x0, #2072]
   9f024:	d65f03c0 	ret
   9f028:	d503201f 	nop
   9f02c:	d503201f 	nop

000000000009f030 <CKernelOptions::GetHeight() const>:
   9f030:	b9481c00 	ldr	w0, [x0, #2076]
   9f034:	d65f03c0 	ret
   9f038:	d503201f 	nop
   9f03c:	d503201f 	nop

000000000009f040 <CKernelOptions::GetLogDevice() const>:
   9f040:	91208000 	add	x0, x0, #0x820
   9f044:	d65f03c0 	ret
   9f048:	d503201f 	nop
   9f04c:	d503201f 	nop

000000000009f050 <CKernelOptions::GetLogLevel() const>:
   9f050:	b9483400 	ldr	w0, [x0, #2100]
   9f054:	d65f03c0 	ret
   9f058:	d503201f 	nop
   9f05c:	d503201f 	nop

000000000009f060 <CKernelOptions::GetKeyMap() const>:
   9f060:	9120e000 	add	x0, x0, #0x838
   9f064:	d65f03c0 	ret
   9f068:	d503201f 	nop
   9f06c:	d503201f 	nop

000000000009f070 <CKernelOptions::GetUSBPowerDelay() const>:
   9f070:	b9483c00 	ldr	w0, [x0, #2108]
   9f074:	d65f03c0 	ret
   9f078:	d503201f 	nop
   9f07c:	d503201f 	nop

000000000009f080 <CKernelOptions::GetUSBFullSpeed() const>:
   9f080:	39610000 	ldrb	w0, [x0, #2112]
   9f084:	d65f03c0 	ret
   9f088:	d503201f 	nop
   9f08c:	d503201f 	nop

000000000009f090 <CKernelOptions::GetUSBBoost() const>:
   9f090:	39610400 	ldrb	w0, [x0, #2113]
   9f094:	d65f03c0 	ret
   9f098:	d503201f 	nop
   9f09c:	d503201f 	nop

000000000009f0a0 <CKernelOptions::GetUSBIgnore() const>:
   9f0a0:	91210800 	add	x0, x0, #0x842
   9f0a4:	d65f03c0 	ret
   9f0a8:	d503201f 	nop
   9f0ac:	d503201f 	nop

000000000009f0b0 <CKernelOptions::GetUSBSoundChannels() const>:
   9f0b0:	91216000 	add	x0, x0, #0x858
   9f0b4:	d65f03c0 	ret
   9f0b8:	d503201f 	nop
   9f0bc:	d503201f 	nop

000000000009f0c0 <CKernelOptions::GetSoundDevice() const>:
   9f0c0:	91218000 	add	x0, x0, #0x860
   9f0c4:	d65f03c0 	ret
   9f0c8:	d503201f 	nop
   9f0cc:	d503201f 	nop

000000000009f0d0 <CKernelOptions::GetSoundOption() const>:
   9f0d0:	b9487400 	ldr	w0, [x0, #2164]
   9f0d4:	d65f03c0 	ret
   9f0d8:	d503201f 	nop
   9f0dc:	d503201f 	nop

000000000009f0e0 <CKernelOptions::GetCPUSpeed() const>:
   9f0e0:	b9487800 	ldr	w0, [x0, #2168]
   9f0e4:	d65f03c0 	ret
   9f0e8:	d503201f 	nop
   9f0ec:	d503201f 	nop

000000000009f0f0 <CKernelOptions::GetSoCMaxTemp() const>:
   9f0f0:	b9487c00 	ldr	w0, [x0, #2172]
   9f0f4:	d65f03c0 	ret
   9f0f8:	d503201f 	nop
   9f0fc:	d503201f 	nop

000000000009f100 <CKernelOptions::GetGPIOFanPin() const>:
   9f100:	b9488000 	ldr	w0, [x0, #2176]
   9f104:	d65f03c0 	ret
   9f108:	d503201f 	nop
   9f10c:	d503201f 	nop

000000000009f110 <CKernelOptions::GetTouchScreen() const>:
   9f110:	39621001 	ldrb	w1, [x0, #2180]
   9f114:	91222000 	add	x0, x0, #0x888
   9f118:	7100003f 	cmp	w1, #0x0
   9f11c:	9a9f1000 	csel	x0, x0, xzr, ne	// ne = any
   9f120:	d65f03c0 	ret
   9f124:	d503201f 	nop
   9f128:	d503201f 	nop
   9f12c:	d503201f 	nop

000000000009f130 <CKernelOptions::GetBacklight() const>:
   9f130:	b948a000 	ldr	w0, [x0, #2208]
   9f134:	d65f03c0 	ret
   9f138:	d503201f 	nop
   9f13c:	d503201f 	nop

000000000009f140 <CKernelOptions::GetAppOptionString(char const*, char const*) const>:
   9f140:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9f144:	910003fd 	mov	x29, sp
   9f148:	a90153f3 	stp	x19, x20, [sp, #16]
   9f14c:	f9444c13 	ldr	x19, [x0, #2200]
   9f150:	f90013f5 	str	x21, [sp, #32]
   9f154:	aa0203f5 	mov	x21, x2
   9f158:	b40001d3 	cbz	x19, 9f190 <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x50>
   9f15c:	aa0103f4 	mov	x20, x1
   9f160:	14000003 	b	9f16c <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x2c>
   9f164:	f9400273 	ldr	x19, [x19]
   9f168:	b4000153 	cbz	x19, 9f190 <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x50>
   9f16c:	aa1403e1 	mov	x1, x20
   9f170:	f9400660 	ldr	x0, [x19, #8]
   9f174:	9400201b 	bl	a71e0 <strcmp>
   9f178:	35ffff60 	cbnz	w0, 9f164 <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x24>
   9f17c:	f9400a60 	ldr	x0, [x19, #16]
   9f180:	a94153f3 	ldp	x19, x20, [sp, #16]
   9f184:	f94013f5 	ldr	x21, [sp, #32]
   9f188:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9f18c:	d65f03c0 	ret
   9f190:	aa1503e0 	mov	x0, x21
   9f194:	a94153f3 	ldp	x19, x20, [sp, #16]
   9f198:	f94013f5 	ldr	x21, [sp, #32]
   9f19c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9f1a0:	d65f03c0 	ret
   9f1a4:	d503201f 	nop
   9f1a8:	d503201f 	nop
   9f1ac:	d503201f 	nop

000000000009f1b0 <CKernelOptions::Get()>:
   9f1b0:	d00000e0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   9f1b4:	f940ac00 	ldr	x0, [x0, #344]
   9f1b8:	d65f03c0 	ret
   9f1bc:	d503201f 	nop

000000000009f1c0 <CKernelOptions::GetToken()>:
   9f1c0:	aa0003e3 	mov	x3, x0
   9f1c4:	f9440800 	ldr	x0, [x0, #2064]
   9f1c8:	39c00001 	ldrsb	w1, [x0]
   9f1cc:	350000c1 	cbnz	w1, 9f1e4 <CKernelOptions::GetToken()+0x24>
   9f1d0:	14000014 	b	9f220 <CKernelOptions::GetToken()+0x60>
   9f1d4:	91000400 	add	x0, x0, #0x1
   9f1d8:	f9040860 	str	x0, [x3, #2064]
   9f1dc:	39c00001 	ldrsb	w1, [x0]
   9f1e0:	34000201 	cbz	w1, 9f220 <CKernelOptions::GetToken()+0x60>
   9f1e4:	7100803f 	cmp	w1, #0x20
   9f1e8:	54ffff60 	b.eq	9f1d4 <CKernelOptions::GetToken()+0x14>  // b.none
   9f1ec:	f9440861 	ldr	x1, [x3, #2064]
   9f1f0:	39c00022 	ldrsb	w2, [x1]
   9f1f4:	35000082 	cbnz	w2, 9f204 <CKernelOptions::GetToken()+0x44>
   9f1f8:	14000009 	b	9f21c <CKernelOptions::GetToken()+0x5c>
   9f1fc:	39c00022 	ldrsb	w2, [x1]
   9f200:	340000e2 	cbz	w2, 9f21c <CKernelOptions::GetToken()+0x5c>
   9f204:	7100805f 	cmp	w2, #0x20
   9f208:	aa0103e2 	mov	x2, x1
   9f20c:	91000421 	add	x1, x1, #0x1
   9f210:	f9040861 	str	x1, [x3, #2064]
   9f214:	54ffff41 	b.ne	9f1fc <CKernelOptions::GetToken()+0x3c>  // b.any
   9f218:	3900005f 	strb	wzr, [x2]
   9f21c:	d65f03c0 	ret
   9f220:	d2800000 	mov	x0, #0x0                   	// #0
   9f224:	d65f03c0 	ret
   9f228:	d503201f 	nop
   9f22c:	d503201f 	nop

000000000009f230 <CKernelOptions::GetOptionValue(char*)>:
   9f230:	39c00001 	ldrsb	w1, [x0]
   9f234:	340000e1 	cbz	w1, 9f250 <CKernelOptions::GetOptionValue(char*)+0x20>
   9f238:	7100f43f 	cmp	w1, #0x3d
   9f23c:	aa0003e1 	mov	x1, x0
   9f240:	91000400 	add	x0, x0, #0x1
   9f244:	54ffff61 	b.ne	9f230 <CKernelOptions::GetOptionValue(char*)>  // b.any
   9f248:	3900003f 	strb	wzr, [x1]
   9f24c:	d65f03c0 	ret
   9f250:	d2800000 	mov	x0, #0x0                   	// #0
   9f254:	d65f03c0 	ret
   9f258:	d503201f 	nop
   9f25c:	d503201f 	nop

000000000009f260 <CKernelOptions::GetDecimal(char const*)>:
   9f260:	aa0003e4 	mov	x4, x0
   9f264:	b40002a0 	cbz	x0, 9f2b8 <CKernelOptions::GetDecimal(char const*)+0x58>
   9f268:	39c00001 	ldrsb	w1, [x0]
   9f26c:	91000484 	add	x4, x4, #0x1
   9f270:	12800000 	mov	w0, #0xffffffff            	// #-1
   9f274:	52800002 	mov	w2, #0x0                   	// #0
   9f278:	340001e1 	cbz	w1, 9f2b4 <CKernelOptions::GetDecimal(char const*)+0x54>
   9f27c:	d503201f 	nop
   9f280:	5100c023 	sub	w3, w1, #0x30
   9f284:	0b020840 	add	w0, w2, w2, lsl #2
   9f288:	12001c63 	and	w3, w3, #0xff
   9f28c:	7100247f 	cmp	w3, #0x9
   9f290:	0b000420 	add	w0, w1, w0, lsl #1
   9f294:	54000128 	b.hi	9f2b8 <CKernelOptions::GetDecimal(char const*)+0x58>  // b.pmore
   9f298:	5100c000 	sub	w0, w0, #0x30
   9f29c:	6b02001f 	cmp	w0, w2
   9f2a0:	2a0003e2 	mov	w2, w0
   9f2a4:	3a412804 	ccmn	w0, #0x1, #0x4, cs	// cs = hs, nlast
   9f2a8:	54000080 	b.eq	9f2b8 <CKernelOptions::GetDecimal(char const*)+0x58>  // b.none
   9f2ac:	38c01481 	ldrsb	w1, [x4], #1
   9f2b0:	35fffe81 	cbnz	w1, 9f280 <CKernelOptions::GetDecimal(char const*)+0x20>
   9f2b4:	d65f03c0 	ret
   9f2b8:	12800000 	mov	w0, #0xffffffff            	// #-1
   9f2bc:	d65f03c0 	ret

000000000009f2c0 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const>:
   9f2c0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9f2c4:	910003fd 	mov	x29, sp
   9f2c8:	a90153f3 	stp	x19, x20, [sp, #16]
   9f2cc:	aa0103f4 	mov	x20, x1
   9f2d0:	f9444c13 	ldr	x19, [x0, #2200]
   9f2d4:	f90013f5 	str	x21, [sp, #32]
   9f2d8:	2a0203f5 	mov	w21, w2
   9f2dc:	b5000093 	cbnz	x19, 9f2ec <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x2c>
   9f2e0:	14000010 	b	9f320 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x60>
   9f2e4:	f9400273 	ldr	x19, [x19]
   9f2e8:	b40001d3 	cbz	x19, 9f320 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x60>
   9f2ec:	aa1403e1 	mov	x1, x20
   9f2f0:	f9400660 	ldr	x0, [x19, #8]
   9f2f4:	94001fbb 	bl	a71e0 <strcmp>
   9f2f8:	35ffff60 	cbnz	w0, 9f2e4 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x24>
   9f2fc:	f9400a60 	ldr	x0, [x19, #16]
   9f300:	b4000100 	cbz	x0, 9f320 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x60>
   9f304:	97ffffd7 	bl	9f260 <CKernelOptions::GetDecimal(char const*)>
   9f308:	3100041f 	cmn	w0, #0x1
   9f30c:	540000a0 	b.eq	9f320 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x60>  // b.none
   9f310:	a94153f3 	ldp	x19, x20, [sp, #16]
   9f314:	f94013f5 	ldr	x21, [sp, #32]
   9f318:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9f31c:	d65f03c0 	ret
   9f320:	2a1503e0 	mov	w0, w21
   9f324:	a94153f3 	ldp	x19, x20, [sp, #16]
   9f328:	f94013f5 	ldr	x21, [sp, #32]
   9f32c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9f330:	d65f03c0 	ret
   9f334:	d503201f 	nop
   9f338:	d503201f 	nop
   9f33c:	d503201f 	nop

000000000009f340 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>:
   9f340:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   9f344:	910003fd 	mov	x29, sp
   9f348:	a90153f3 	stp	x19, x20, [sp, #16]
   9f34c:	f00000d4 	adrp	x20, ba000 <CursorSymbol+0x188>
   9f350:	910f4294 	add	x20, x20, #0x3d0
   9f354:	a9025bf5 	stp	x21, x22, [sp, #32]
   9f358:	9100e3f5 	add	x21, sp, #0x38
   9f35c:	34000402 	cbz	w2, 9f3dc <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x9c>
   9f360:	f00000d4 	adrp	x20, ba000 <CursorSymbol+0x188>
   9f364:	910f4294 	add	x20, x20, #0x3d0
   9f368:	8b224833 	add	x19, x1, w2, uxtw #2
   9f36c:	aa0103f6 	mov	x22, x1
   9f370:	9100e3f5 	add	x21, sp, #0x38
   9f374:	d503201f 	nop
   9f378:	aa1503e2 	mov	x2, x21
   9f37c:	aa1403e1 	mov	x1, x20
   9f380:	9400207c 	bl	a7570 <strtok_r>
   9f384:	b4000400 	cbz	x0, 9f404 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc4>
   9f388:	39c00003 	ldrsb	w3, [x0]
   9f38c:	340003c3 	cbz	w3, 9f404 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc4>
   9f390:	91000402 	add	x2, x0, #0x1
   9f394:	52800004 	mov	w4, #0x0                   	// #0
   9f398:	5100c065 	sub	w5, w3, #0x30
   9f39c:	0b040880 	add	w0, w4, w4, lsl #2
   9f3a0:	12001ca5 	and	w5, w5, #0xff
   9f3a4:	710024bf 	cmp	w5, #0x9
   9f3a8:	0b000460 	add	w0, w3, w0, lsl #1
   9f3ac:	540002c8 	b.hi	9f404 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc4>  // b.pmore
   9f3b0:	5100c000 	sub	w0, w0, #0x30
   9f3b4:	6b04001f 	cmp	w0, w4
   9f3b8:	2a0003e4 	mov	w4, w0
   9f3bc:	3a412804 	ccmn	w0, #0x1, #0x4, cs	// cs = hs, nlast
   9f3c0:	54000220 	b.eq	9f404 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc4>  // b.none
   9f3c4:	38c01443 	ldrsb	w3, [x2], #1
   9f3c8:	35fffe83 	cbnz	w3, 9f398 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x58>
   9f3cc:	b80046c0 	str	w0, [x22], #4
   9f3d0:	eb1302df 	cmp	x22, x19
   9f3d4:	d2800000 	mov	x0, #0x0                   	// #0
   9f3d8:	54fffd01 	b.ne	9f378 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x38>  // b.any
   9f3dc:	aa1503e2 	mov	x2, x21
   9f3e0:	aa1403e1 	mov	x1, x20
   9f3e4:	d2800000 	mov	x0, #0x0                   	// #0
   9f3e8:	94002062 	bl	a7570 <strtok_r>
   9f3ec:	f100001f 	cmp	x0, #0x0
   9f3f0:	1a9f17e0 	cset	w0, eq	// eq = none
   9f3f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   9f3f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9f3fc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9f400:	d65f03c0 	ret
   9f404:	52800000 	mov	w0, #0x0                   	// #0
   9f408:	a94153f3 	ldp	x19, x20, [sp, #16]
   9f40c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9f410:	a8c47bfd 	ldp	x29, x30, [sp], #64
   9f414:	d65f03c0 	ret
   9f418:	d503201f 	nop
   9f41c:	d503201f 	nop

000000000009f420 <CKernelOptions::CKernelOptions()>:
   9f420:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   9f424:	910003fd 	mov	x29, sp
   9f428:	52800083 	mov	w3, #0x4                   	// #4
   9f42c:	d2c00782 	mov	x2, #0x3c00000000          	// #257698037760
   9f430:	d00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9f434:	91058021 	add	x1, x1, #0x160
   9f438:	a9025bf5 	stp	x21, x22, [sp, #32]
   9f43c:	aa0003f5 	mov	x21, x0
   9f440:	a90363f7 	stp	x23, x24, [sp, #48]
   9f444:	91208018 	add	x24, x0, #0x820
   9f448:	aa1803e0 	mov	x0, x24
   9f44c:	a9046bf9 	stp	x25, x26, [sp, #64]
   9f450:	9120e2b9 	add	x25, x21, #0x838
   9f454:	f9040ebf 	str	xzr, [x21, #2072]
   9f458:	b90836a3 	str	w3, [x21, #2100]
   9f45c:	b9083ebf 	str	wzr, [x21, #2108]
   9f460:	791082bf 	strh	wzr, [x21, #2112]
   9f464:	f9042ebf 	str	xzr, [x21, #2136]
   9f468:	b90876bf 	str	wzr, [x21, #2164]
   9f46c:	f9043ea2 	str	x2, [x21, #2168]
   9f470:	b90882bf 	str	wzr, [x21, #2176]
   9f474:	392212bf 	strb	wzr, [x21, #2180]
   9f478:	f9044ebf 	str	xzr, [x21, #2200]
   9f47c:	b908a2bf 	str	wzr, [x21, #2208]
   9f480:	94001fdc 	bl	a73f0 <strcpy>
   9f484:	aa1903e0 	mov	x0, x25
   9f488:	b00000a1 	adrp	x1, b4000 <_etext+0x3158>
   9f48c:	912cc021 	add	x1, x1, #0xb30
   9f490:	94001fd8 	bl	a73f0 <strcpy>
   9f494:	d00000e2 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   9f498:	9101a3e0 	add	x0, sp, #0x68
   9f49c:	39210abf 	strb	wzr, [x21, #2114]
   9f4a0:	52800001 	mov	w1, #0x0                   	// #0
   9f4a4:	392182bf 	strb	wzr, [x21, #2144]
   9f4a8:	f900ac55 	str	x21, [x2, #344]
   9f4ac:	97fffa49 	bl	9ddd0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   9f4b0:	aa1503e2 	mov	x2, x21
   9f4b4:	9101a3e0 	add	x0, sp, #0x68
   9f4b8:	52800021 	mov	w1, #0x1                   	// #1
   9f4bc:	72a000a1 	movk	w1, #0x5, lsl #16
   9f4c0:	52800004 	mov	w4, #0x0                   	// #0
   9f4c4:	52810183 	mov	w3, #0x80c                 	// #2060
   9f4c8:	97fffaa2 	bl	9df50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   9f4cc:	72001c1f 	tst	w0, #0xff
   9f4d0:	540005a0 	b.eq	9f584 <CKernelOptions::CKernelOptions()+0x164>  // b.none
   9f4d4:	b9400aa0 	ldr	w0, [x21, #8]
   9f4d8:	711ffc1f 	cmp	w0, #0x7ff
   9f4dc:	54000548 	b.hi	9f584 <CKernelOptions::CKernelOptions()+0x164>  // b.pmore
   9f4e0:	910032a1 	add	x1, x21, #0xc
   9f4e4:	d00000b6 	adrp	x22, b5000 <_etext+0x4158>
   9f4e8:	9105a2d6 	add	x22, x22, #0x168
   9f4ec:	d00000b7 	adrp	x23, b5000 <_etext+0x4158>
   9f4f0:	9105c2f7 	add	x23, x23, #0x170
   9f4f4:	d28000fa 	mov	x26, #0x7                   	// #7
   9f4f8:	f2a0203a 	movk	x26, #0x101, lsl #16
   9f4fc:	a90153f3 	stp	x19, x20, [sp, #16]
   9f500:	8b2042a0 	add	x0, x21, w0, uxtw
   9f504:	3900301f 	strb	wzr, [x0, #12]
   9f508:	f9040aa1 	str	x1, [x21, #2064]
   9f50c:	d503201f 	nop
   9f510:	aa1503e0 	mov	x0, x21
   9f514:	97ffff2b 	bl	9f1c0 <CKernelOptions::GetToken()>
   9f518:	aa0003f4 	mov	x20, x0
   9f51c:	b4000320 	cbz	x0, 9f580 <CKernelOptions::CKernelOptions()+0x160>
   9f520:	39c00001 	ldrsb	w1, [x0]
   9f524:	aa0003f3 	mov	x19, x0
   9f528:	35000081 	cbnz	w1, 9f538 <CKernelOptions::CKernelOptions()+0x118>
   9f52c:	1400001d 	b	9f5a0 <CKernelOptions::CKernelOptions()+0x180>
   9f530:	39c00261 	ldrsb	w1, [x19]
   9f534:	34000361 	cbz	w1, 9f5a0 <CKernelOptions::CKernelOptions()+0x180>
   9f538:	7100f43f 	cmp	w1, #0x3d
   9f53c:	aa1303e1 	mov	x1, x19
   9f540:	91000673 	add	x19, x19, #0x1
   9f544:	54ffff61 	b.ne	9f530 <CKernelOptions::CKernelOptions()+0x110>  // b.any
   9f548:	aa1403e0 	mov	x0, x20
   9f54c:	3900003f 	strb	wzr, [x1]
   9f550:	aa1603e1 	mov	x1, x22
   9f554:	94001f23 	bl	a71e0 <strcmp>
   9f558:	350002e0 	cbnz	w0, 9f5b4 <CKernelOptions::CKernelOptions()+0x194>
   9f55c:	aa1303e0 	mov	x0, x19
   9f560:	97ffff40 	bl	9f260 <CKernelOptions::GetDecimal(char const*)>
   9f564:	3100041f 	cmn	w0, #0x1
   9f568:	54fffd40 	b.eq	9f510 <CKernelOptions::CKernelOptions()+0xf0>  // b.none
   9f56c:	b9081aa0 	str	w0, [x21, #2072]
   9f570:	aa1503e0 	mov	x0, x21
   9f574:	97ffff13 	bl	9f1c0 <CKernelOptions::GetToken()>
   9f578:	aa0003f4 	mov	x20, x0
   9f57c:	b5fffd20 	cbnz	x0, 9f520 <CKernelOptions::CKernelOptions()+0x100>
   9f580:	a94153f3 	ldp	x19, x20, [sp, #16]
   9f584:	9101a3e0 	add	x0, sp, #0x68
   9f588:	97fffa16 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   9f58c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9f590:	a94363f7 	ldp	x23, x24, [sp, #48]
   9f594:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9f598:	a8c77bfd 	ldp	x29, x30, [sp], #112
   9f59c:	d65f03c0 	ret
   9f5a0:	aa1603e1 	mov	x1, x22
   9f5a4:	aa1403e0 	mov	x0, x20
   9f5a8:	d2800013 	mov	x19, #0x0                   	// #0
   9f5ac:	94001f0d 	bl	a71e0 <strcmp>
   9f5b0:	34fffd60 	cbz	w0, 9f55c <CKernelOptions::CKernelOptions()+0x13c>
   9f5b4:	aa1703e1 	mov	x1, x23
   9f5b8:	aa1403e0 	mov	x0, x20
   9f5bc:	94001f09 	bl	a71e0 <strcmp>
   9f5c0:	350000e0 	cbnz	w0, 9f5dc <CKernelOptions::CKernelOptions()+0x1bc>
   9f5c4:	aa1303e0 	mov	x0, x19
   9f5c8:	97ffff26 	bl	9f260 <CKernelOptions::GetDecimal(char const*)>
   9f5cc:	3100041f 	cmn	w0, #0x1
   9f5d0:	54fffa00 	b.eq	9f510 <CKernelOptions::CKernelOptions()+0xf0>  // b.none
   9f5d4:	b9081ea0 	str	w0, [x21, #2076]
   9f5d8:	17ffffce 	b	9f510 <CKernelOptions::CKernelOptions()+0xf0>
   9f5dc:	d00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9f5e0:	9105e021 	add	x1, x1, #0x178
   9f5e4:	aa1403e0 	mov	x0, x20
   9f5e8:	94001efe 	bl	a71e0 <strcmp>
   9f5ec:	34000180 	cbz	w0, 9f61c <CKernelOptions::CKernelOptions()+0x1fc>
   9f5f0:	d00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9f5f4:	91060021 	add	x1, x1, #0x180
   9f5f8:	aa1403e0 	mov	x0, x20
   9f5fc:	94001ef9 	bl	a71e0 <strcmp>
   9f600:	350001a0 	cbnz	w0, 9f634 <CKernelOptions::CKernelOptions()+0x214>
   9f604:	aa1303e0 	mov	x0, x19
   9f608:	97ffff16 	bl	9f260 <CKernelOptions::GetDecimal(char const*)>
   9f60c:	7100101f 	cmp	w0, #0x4
   9f610:	54fff808 	b.hi	9f510 <CKernelOptions::CKernelOptions()+0xf0>  // b.pmore
   9f614:	b90836a0 	str	w0, [x21, #2100]
   9f618:	17ffffbe 	b	9f510 <CKernelOptions::CKernelOptions()+0xf0>
   9f61c:	aa1303e1 	mov	x1, x19
   9f620:	d2800262 	mov	x2, #0x13                  	// #19
   9f624:	aa1803e0 	mov	x0, x24
   9f628:	94001f7e 	bl	a7420 <strncpy>
   9f62c:	3920cebf 	strb	wzr, [x21, #2099]
   9f630:	17ffffb8 	b	9f510 <CKernelOptions::CKernelOptions()+0xf0>
   9f634:	d00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9f638:	91064021 	add	x1, x1, #0x190
   9f63c:	aa1403e0 	mov	x0, x20
   9f640:	94001ee8 	bl	a71e0 <strcmp>
   9f644:	340001c0 	cbz	w0, 9f67c <CKernelOptions::CKernelOptions()+0x25c>
   9f648:	d00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9f64c:	91066021 	add	x1, x1, #0x198
   9f650:	aa1403e0 	mov	x0, x20
   9f654:	94001ee3 	bl	a71e0 <strcmp>
   9f658:	350001e0 	cbnz	w0, 9f694 <CKernelOptions::CKernelOptions()+0x274>
   9f65c:	aa1303e0 	mov	x0, x19
   9f660:	97ffff00 	bl	9f260 <CKernelOptions::GetDecimal(char const*)>
   9f664:	5283cf01 	mov	w1, #0x1e78                	// #7800
   9f668:	51032002 	sub	w2, w0, #0xc8
   9f66c:	6b01005f 	cmp	w2, w1
   9f670:	54fff508 	b.hi	9f510 <CKernelOptions::CKernelOptions()+0xf0>  // b.pmore
   9f674:	b9083ea0 	str	w0, [x21, #2108]
   9f678:	17ffffa6 	b	9f510 <CKernelOptions::CKernelOptions()+0xf0>
   9f67c:	aa1303e1 	mov	x1, x19
   9f680:	d2800042 	mov	x2, #0x2                   	// #2
   9f684:	aa1903e0 	mov	x0, x25
   9f688:	94001f66 	bl	a7420 <strncpy>
   9f68c:	3920eabf 	strb	wzr, [x21, #2106]
   9f690:	17ffffa0 	b	9f510 <CKernelOptions::CKernelOptions()+0xf0>
   9f694:	d00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9f698:	9106a021 	add	x1, x1, #0x1a8
   9f69c:	aa1403e0 	mov	x0, x20
   9f6a0:	94001ed0 	bl	a71e0 <strcmp>
   9f6a4:	35000120 	cbnz	w0, 9f6c8 <CKernelOptions::CKernelOptions()+0x2a8>
   9f6a8:	d00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9f6ac:	9106e021 	add	x1, x1, #0x1b8
   9f6b0:	aa1303e0 	mov	x0, x19
   9f6b4:	94001ecb 	bl	a71e0 <strcmp>
   9f6b8:	35fff2c0 	cbnz	w0, 9f510 <CKernelOptions::CKernelOptions()+0xf0>
   9f6bc:	52800020 	mov	w0, #0x1                   	// #1
   9f6c0:	392102a0 	strb	w0, [x21, #2112]
   9f6c4:	17ffff93 	b	9f510 <CKernelOptions::CKernelOptions()+0xf0>
   9f6c8:	d00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9f6cc:	91070021 	add	x1, x1, #0x1c0
   9f6d0:	aa1403e0 	mov	x0, x20
   9f6d4:	94001ec3 	bl	a71e0 <strcmp>
   9f6d8:	35000120 	cbnz	w0, 9f6fc <CKernelOptions::CKernelOptions()+0x2dc>
   9f6dc:	d00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9f6e0:	91074021 	add	x1, x1, #0x1d0
   9f6e4:	aa1303e0 	mov	x0, x19
   9f6e8:	94001ebe 	bl	a71e0 <strcmp>
   9f6ec:	35fff120 	cbnz	w0, 9f510 <CKernelOptions::CKernelOptions()+0xf0>
   9f6f0:	52800020 	mov	w0, #0x1                   	// #1
   9f6f4:	392106a0 	strb	w0, [x21, #2113]
   9f6f8:	17ffff86 	b	9f510 <CKernelOptions::CKernelOptions()+0xf0>
   9f6fc:	d00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9f700:	91076021 	add	x1, x1, #0x1d8
   9f704:	aa1403e0 	mov	x0, x20
   9f708:	94001eb6 	bl	a71e0 <strcmp>
   9f70c:	350000e0 	cbnz	w0, 9f728 <CKernelOptions::CKernelOptions()+0x308>
   9f710:	aa1303e1 	mov	x1, x19
   9f714:	d2800262 	mov	x2, #0x13                  	// #19
   9f718:	91210aa0 	add	x0, x21, #0x842
   9f71c:	94001f41 	bl	a7420 <strncpy>
   9f720:	392156bf 	strb	wzr, [x21, #2133]
   9f724:	17ffff7b 	b	9f510 <CKernelOptions::CKernelOptions()+0xf0>
   9f728:	d00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9f72c:	9107a021 	add	x1, x1, #0x1e8
   9f730:	aa1403e0 	mov	x0, x20
   9f734:	94001eab 	bl	a71e0 <strcmp>
   9f738:	35000120 	cbnz	w0, 9f75c <CKernelOptions::CKernelOptions()+0x33c>
   9f73c:	aa1303e0 	mov	x0, x19
   9f740:	52800042 	mov	w2, #0x2                   	// #2
   9f744:	912162a1 	add	x1, x21, #0x858
   9f748:	97fffefe 	bl	9f340 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>
   9f74c:	72001c1f 	tst	w0, #0xff
   9f750:	54ffee01 	b.ne	9f510 <CKernelOptions::CKernelOptions()+0xf0>  // b.any
   9f754:	f9042ebf 	str	xzr, [x21, #2136]
   9f758:	17ffff6e 	b	9f510 <CKernelOptions::CKernelOptions()+0xf0>
   9f75c:	d00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9f760:	91080021 	add	x1, x1, #0x200
   9f764:	aa1403e0 	mov	x0, x20
   9f768:	94001e9e 	bl	a71e0 <strcmp>
   9f76c:	350000e0 	cbnz	w0, 9f788 <CKernelOptions::CKernelOptions()+0x368>
   9f770:	aa1303e1 	mov	x1, x19
   9f774:	d2800262 	mov	x2, #0x13                  	// #19
   9f778:	912182a0 	add	x0, x21, #0x860
   9f77c:	94001f29 	bl	a7420 <strncpy>
   9f780:	3921cebf 	strb	wzr, [x21, #2163]
   9f784:	17ffff63 	b	9f510 <CKernelOptions::CKernelOptions()+0xf0>
   9f788:	d00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9f78c:	91084021 	add	x1, x1, #0x210
   9f790:	aa1403e0 	mov	x0, x20
   9f794:	94001e93 	bl	a71e0 <strcmp>
   9f798:	35000160 	cbnz	w0, 9f7c4 <CKernelOptions::CKernelOptions()+0x3a4>
   9f79c:	aa1303e0 	mov	x0, x19
   9f7a0:	97fffeb0 	bl	9f260 <CKernelOptions::GetDecimal(char const*)>
   9f7a4:	3100041f 	cmn	w0, #0x1
   9f7a8:	54ffeb40 	b.eq	9f510 <CKernelOptions::CKernelOptions()+0xf0>  // b.none
   9f7ac:	7100601f 	cmp	w0, #0x18
   9f7b0:	54ffeb08 	b.hi	9f510 <CKernelOptions::CKernelOptions()+0xf0>  // b.pmore
   9f7b4:	9ac02741 	lsr	x1, x26, x0
   9f7b8:	3607eac1 	tbz	w1, #0, 9f510 <CKernelOptions::CKernelOptions()+0xf0>
   9f7bc:	b90876a0 	str	w0, [x21, #2164]
   9f7c0:	17ffff54 	b	9f510 <CKernelOptions::CKernelOptions()+0xf0>
   9f7c4:	d00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9f7c8:	91088021 	add	x1, x1, #0x220
   9f7cc:	aa1403e0 	mov	x0, x20
   9f7d0:	94001e84 	bl	a71e0 <strcmp>
   9f7d4:	35000120 	cbnz	w0, 9f7f8 <CKernelOptions::CKernelOptions()+0x3d8>
   9f7d8:	d00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9f7dc:	91074021 	add	x1, x1, #0x1d0
   9f7e0:	aa1303e0 	mov	x0, x19
   9f7e4:	94001e7f 	bl	a71e0 <strcmp>
   9f7e8:	35ffe940 	cbnz	w0, 9f510 <CKernelOptions::CKernelOptions()+0xf0>
   9f7ec:	52800020 	mov	w0, #0x1                   	// #1
   9f7f0:	b9087aa0 	str	w0, [x21, #2168]
   9f7f4:	17ffff47 	b	9f510 <CKernelOptions::CKernelOptions()+0xf0>
   9f7f8:	d00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9f7fc:	9108a021 	add	x1, x1, #0x228
   9f800:	aa1403e0 	mov	x0, x20
   9f804:	94001e77 	bl	a71e0 <strcmp>
   9f808:	35000100 	cbnz	w0, 9f828 <CKernelOptions::CKernelOptions()+0x408>
   9f80c:	aa1303e0 	mov	x0, x19
   9f810:	97fffe94 	bl	9f260 <CKernelOptions::GetDecimal(char const*)>
   9f814:	5100a001 	sub	w1, w0, #0x28
   9f818:	7100983f 	cmp	w1, #0x26
   9f81c:	54ffe7a8 	b.hi	9f510 <CKernelOptions::CKernelOptions()+0xf0>  // b.pmore
   9f820:	b9087ea0 	str	w0, [x21, #2172]
   9f824:	17ffff3b 	b	9f510 <CKernelOptions::CKernelOptions()+0xf0>
   9f828:	d00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9f82c:	9108e021 	add	x1, x1, #0x238
   9f830:	aa1403e0 	mov	x0, x20
   9f834:	94001e6b 	bl	a71e0 <strcmp>
   9f838:	35000100 	cbnz	w0, 9f858 <CKernelOptions::CKernelOptions()+0x438>
   9f83c:	aa1303e0 	mov	x0, x19
   9f840:	97fffe88 	bl	9f260 <CKernelOptions::GetDecimal(char const*)>
   9f844:	51000801 	sub	w1, w0, #0x2
   9f848:	7100cc3f 	cmp	w1, #0x33
   9f84c:	54ffe628 	b.hi	9f510 <CKernelOptions::CKernelOptions()+0xf0>  // b.pmore
   9f850:	b90882a0 	str	w0, [x21, #2176]
   9f854:	17ffff2f 	b	9f510 <CKernelOptions::CKernelOptions()+0xf0>
   9f858:	d00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9f85c:	91092021 	add	x1, x1, #0x248
   9f860:	aa1403e0 	mov	x0, x20
   9f864:	94001e5f 	bl	a71e0 <strcmp>
   9f868:	350000e0 	cbnz	w0, 9f884 <CKernelOptions::CKernelOptions()+0x464>
   9f86c:	aa1303e0 	mov	x0, x19
   9f870:	52800082 	mov	w2, #0x4                   	// #4
   9f874:	912222a1 	add	x1, x21, #0x888
   9f878:	97fffeb2 	bl	9f340 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>
   9f87c:	392212a0 	strb	w0, [x21, #2180]
   9f880:	17ffff24 	b	9f510 <CKernelOptions::CKernelOptions()+0xf0>
   9f884:	d00000a1 	adrp	x1, b5000 <_etext+0x4158>
   9f888:	91096021 	add	x1, x1, #0x258
   9f88c:	aa1403e0 	mov	x0, x20
   9f890:	94001e54 	bl	a71e0 <strcmp>
   9f894:	35000100 	cbnz	w0, 9f8b4 <CKernelOptions::CKernelOptions()+0x494>
   9f898:	aa1303e0 	mov	x0, x19
   9f89c:	97fffe71 	bl	9f260 <CKernelOptions::GetDecimal(char const*)>
   9f8a0:	51000401 	sub	w1, w0, #0x1
   9f8a4:	7103f83f 	cmp	w1, #0xfe
   9f8a8:	54ffe348 	b.hi	9f510 <CKernelOptions::CKernelOptions()+0xf0>  // b.pmore
   9f8ac:	b908a2a0 	str	w0, [x21, #2208]
   9f8b0:	17ffff18 	b	9f510 <CKernelOptions::CKernelOptions()+0xf0>
   9f8b4:	d2800300 	mov	x0, #0x18                  	// #24
   9f8b8:	f9002bfb 	str	x27, [sp, #80]
   9f8bc:	94002269 	bl	a8260 <operator new(unsigned long)>
   9f8c0:	aa0003fb 	mov	x27, x0
   9f8c4:	aa1403e0 	mov	x0, x20
   9f8c8:	94001e3a 	bl	a71b0 <strlen>
   9f8cc:	91000400 	add	x0, x0, #0x1
   9f8d0:	9400226c 	bl	a8280 <operator new[](unsigned long)>
   9f8d4:	aa1403e1 	mov	x1, x20
   9f8d8:	f9000760 	str	x0, [x27, #8]
   9f8dc:	94001ec5 	bl	a73f0 <strcpy>
   9f8e0:	aa1303e0 	mov	x0, x19
   9f8e4:	94001e33 	bl	a71b0 <strlen>
   9f8e8:	91000400 	add	x0, x0, #0x1
   9f8ec:	94002265 	bl	a8280 <operator new[](unsigned long)>
   9f8f0:	aa1303e1 	mov	x1, x19
   9f8f4:	f9000b60 	str	x0, [x27, #16]
   9f8f8:	94001ebe 	bl	a73f0 <strcpy>
   9f8fc:	f9444ea0 	ldr	x0, [x21, #2200]
   9f900:	f9044ebb 	str	x27, [x21, #2200]
   9f904:	f9000360 	str	x0, [x27]
   9f908:	f9402bfb 	ldr	x27, [sp, #80]
   9f90c:	17ffff01 	b	9f510 <CKernelOptions::CKernelOptions()+0xf0>

000000000009f910 <CLogger::CLogger(unsigned int, CTimer*, bool)>:
   9f910:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9f914:	910003fd 	mov	x29, sp
   9f918:	52800024 	mov	w4, #0x1                   	// #1
   9f91c:	f9000bf3 	str	x19, [sp, #16]
   9f920:	aa0003f3 	mov	x19, x0
   9f924:	d2880000 	mov	x0, #0x4000                	// #16384
   9f928:	b9000261 	str	w1, [x19]
   9f92c:	f9000662 	str	x2, [x19, #8]
   9f930:	39004263 	strb	w3, [x19, #16]
   9f934:	a901fe7f 	stp	xzr, xzr, [x19, #24]
   9f938:	f900167f 	str	xzr, [x19, #40]
   9f93c:	b9003264 	str	w4, [x19, #48]
   9f940:	f900e67f 	str	xzr, [x19, #456]
   9f944:	b901d264 	str	w4, [x19, #464]
   9f948:	a91dfe7f 	stp	xzr, xzr, [x19, #472]
   9f94c:	9400224d 	bl	a8280 <operator new[](unsigned long)>
   9f950:	d00000e1 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   9f954:	f9001260 	str	x0, [x19, #32]
   9f958:	f900b033 	str	x19, [x1, #352]
   9f95c:	f9400bf3 	ldr	x19, [sp, #16]
   9f960:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9f964:	d65f03c0 	ret
   9f968:	d503201f 	nop
   9f96c:	d503201f 	nop

000000000009f970 <CLogger::~CLogger()>:
   9f970:	d00000e1 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   9f974:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9f978:	910003fd 	mov	x29, sp
   9f97c:	f900b03f 	str	xzr, [x1, #352]
   9f980:	b941c803 	ldr	w3, [x0, #456]
   9f984:	b941cc02 	ldr	w2, [x0, #460]
   9f988:	f9000bf3 	str	x19, [sp, #16]
   9f98c:	aa0003f3 	mov	x19, x0
   9f990:	1400000a 	b	9f9b8 <CLogger::~CLogger()+0x48>
   9f994:	f9401c00 	ldr	x0, [x0, #56]
   9f998:	b4000080 	cbz	x0, 9f9a8 <CLogger::~CLogger()+0x38>
   9f99c:	94002259 	bl	a8300 <operator delete(void*, unsigned long)>
   9f9a0:	b941ca63 	ldr	w3, [x19, #456]
   9f9a4:	b941ce62 	ldr	w2, [x19, #460]
   9f9a8:	11000442 	add	w2, w2, #0x1
   9f9ac:	7100c85f 	cmp	w2, #0x32
   9f9b0:	b901ce62 	str	w2, [x19, #460]
   9f9b4:	54000140 	b.eq	9f9dc <CLogger::~CLogger()+0x6c>  // b.none
   9f9b8:	6b03005f 	cmp	w2, w3
   9f9bc:	d2802201 	mov	x1, #0x110                 	// #272
   9f9c0:	8b224e60 	add	x0, x19, w2, uxtw #3
   9f9c4:	54fffe81 	b.ne	9f994 <CLogger::~CLogger()+0x24>  // b.any
   9f9c8:	f9401260 	ldr	x0, [x19, #32]
   9f9cc:	b40000e0 	cbz	x0, 9f9e8 <CLogger::~CLogger()+0x78>
   9f9d0:	f9400bf3 	ldr	x19, [sp, #16]
   9f9d4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9f9d8:	1400223e 	b	a82d0 <operator delete[](void*)>
   9f9dc:	52800002 	mov	w2, #0x0                   	// #0
   9f9e0:	b901ce7f 	str	wzr, [x19, #460]
   9f9e4:	17fffff5 	b	9f9b8 <CLogger::~CLogger()+0x48>
   9f9e8:	f9400bf3 	ldr	x19, [sp, #16]
   9f9ec:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9f9f0:	d65f03c0 	ret
   9f9f4:	d503201f 	nop
   9f9f8:	d503201f 	nop
   9f9fc:	d503201f 	nop

000000000009fa00 <CLogger::SetNewTarget(CDevice*)>:
   9fa00:	f9000c01 	str	x1, [x0, #24]
   9fa04:	d65f03c0 	ret
   9fa08:	d503201f 	nop
   9fa0c:	d503201f 	nop

000000000009fa10 <CLogger::Get()>:
   9fa10:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   9fa14:	910003fd 	mov	x29, sp
   9fa18:	a90153f3 	stp	x19, x20, [sp, #16]
   9fa1c:	d00000f4 	adrp	x20, bd000 <CNetDevice::s_SpeedString+0x18>
   9fa20:	f940b293 	ldr	x19, [x20, #352]
   9fa24:	b40000b3 	cbz	x19, 9fa38 <CLogger::Get()+0x28>
   9fa28:	aa1303e0 	mov	x0, x19
   9fa2c:	a94153f3 	ldp	x19, x20, [sp, #16]
   9fa30:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9fa34:	d65f03c0 	ret
   9fa38:	d2803d00 	mov	x0, #0x1e8                 	// #488
   9fa3c:	94002209 	bl	a8260 <operator new(unsigned long)>
   9fa40:	aa0003f3 	mov	x19, x0
   9fa44:	52800021 	mov	w1, #0x1                   	// #1
   9fa48:	52800022 	mov	w2, #0x1                   	// #1
   9fa4c:	d2880000 	mov	x0, #0x4000                	// #16384
   9fa50:	b900027f 	str	wzr, [x19]
   9fa54:	f900067f 	str	xzr, [x19, #8]
   9fa58:	39004262 	strb	w2, [x19, #16]
   9fa5c:	a901fe7f 	stp	xzr, xzr, [x19, #24]
   9fa60:	f900167f 	str	xzr, [x19, #40]
   9fa64:	b9003261 	str	w1, [x19, #48]
   9fa68:	f900e67f 	str	xzr, [x19, #456]
   9fa6c:	b901d261 	str	w1, [x19, #464]
   9fa70:	a91dfe7f 	stp	xzr, xzr, [x19, #472]
   9fa74:	94002203 	bl	a8280 <operator new[](unsigned long)>
   9fa78:	f900b293 	str	x19, [x20, #352]
   9fa7c:	f9001260 	str	x0, [x19, #32]
   9fa80:	aa1303e0 	mov	x0, x19
   9fa84:	a94153f3 	ldp	x19, x20, [sp, #16]
   9fa88:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9fa8c:	d65f03c0 	ret

000000000009fa90 <CLogger::Write(char const*)>:
   9fa90:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9fa94:	910003fd 	mov	x29, sp
   9fa98:	a90153f3 	stp	x19, x20, [sp, #16]
   9fa9c:	aa0003f3 	mov	x19, x0
   9faa0:	aa0103e0 	mov	x0, x1
   9faa4:	aa0103f4 	mov	x20, x1
   9faa8:	f90013f5 	str	x21, [sp, #32]
   9faac:	94001dc1 	bl	a71b0 <strlen>
   9fab0:	aa0003f5 	mov	x21, x0
   9fab4:	f9400e60 	ldr	x0, [x19, #24]
   9fab8:	b40000c0 	cbz	x0, 9fad0 <CLogger::Write(char const*)+0x40>
   9fabc:	f9400003 	ldr	x3, [x0]
   9fac0:	aa1503e2 	mov	x2, x21
   9fac4:	aa1403e1 	mov	x1, x20
   9fac8:	f9400c63 	ldr	x3, [x3, #24]
   9facc:	d63f0060 	blr	x3
   9fad0:	b9403260 	ldr	w0, [x19, #48]
   9fad4:	350004a0 	cbnz	w0, 9fb68 <CLogger::Write(char const*)+0xd8>
   9fad8:	b4000395 	cbz	x21, 9fb48 <CLogger::Write(char const*)+0xb8>
   9fadc:	aa1403e4 	mov	x4, x20
   9fae0:	14000004 	b	9faf0 <CLogger::Write(char const*)+0x60>
   9fae4:	cb040283 	sub	x3, x20, x4
   9fae8:	ab15007f 	cmn	x3, x21
   9faec:	540002a0 	b.eq	9fb40 <CLogger::Write(char const*)+0xb0>  // b.none
   9faf0:	38c01483 	ldrsb	w3, [x4], #1
   9faf4:	7100347f 	cmp	w3, #0xd
   9faf8:	54ffff60 	b.eq	9fae4 <CLogger::Write(char const*)+0x54>  // b.none
   9fafc:	b9402a65 	ldr	w5, [x19, #40]
   9fb00:	f9401266 	ldr	x6, [x19, #32]
   9fb04:	382568c3 	strb	w3, [x6, x5]
   9fb08:	29451663 	ldp	w3, w5, [x19, #40]
   9fb0c:	11000463 	add	w3, w3, #0x1
   9fb10:	12003463 	and	w3, w3, #0x3fff
   9fb14:	6b05007f 	cmp	w3, w5
   9fb18:	b9002a63 	str	w3, [x19, #40]
   9fb1c:	54fffe41 	b.ne	9fae4 <CLogger::Write(char const*)+0x54>  // b.any
   9fb20:	11000465 	add	w5, w3, #0x1
   9fb24:	39404260 	ldrb	w0, [x19, #16]
   9fb28:	120034a5 	and	w5, w5, #0x3fff
   9fb2c:	34000240 	cbz	w0, 9fb74 <CLogger::Write(char const*)+0xe4>
   9fb30:	cb040283 	sub	x3, x20, x4
   9fb34:	b9002e65 	str	w5, [x19, #44]
   9fb38:	ab15007f 	cmn	x3, x21
   9fb3c:	54fffda1 	b.ne	9faf0 <CLogger::Write(char const*)+0x60>  // b.any
   9fb40:	b9403260 	ldr	w0, [x19, #48]
   9fb44:	350000a0 	cbnz	w0, 9fb58 <CLogger::Write(char const*)+0xc8>
   9fb48:	a94153f3 	ldp	x19, x20, [sp, #16]
   9fb4c:	f94013f5 	ldr	x21, [sp, #32]
   9fb50:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9fb54:	d65f03c0 	ret
   9fb58:	a94153f3 	ldp	x19, x20, [sp, #16]
   9fb5c:	f94013f5 	ldr	x21, [sp, #32]
   9fb60:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9fb64:	140025a7 	b	a9200 <LeaveCritical>
   9fb68:	94002576 	bl	a9140 <EnterCritical>
   9fb6c:	b5fffb95 	cbnz	x21, 9fadc <CLogger::Write(char const*)+0x4c>
   9fb70:	17fffff4 	b	9fb40 <CLogger::Write(char const*)+0xb0>
   9fb74:	51000461 	sub	w1, w3, #0x1
   9fb78:	b9403260 	ldr	w0, [x19, #48]
   9fb7c:	12003421 	and	w1, w1, #0x3fff
   9fb80:	b9002a61 	str	w1, [x19, #40]
   9fb84:	34fffe20 	cbz	w0, 9fb48 <CLogger::Write(char const*)+0xb8>
   9fb88:	17fffff4 	b	9fb58 <CLogger::Write(char const*)+0xc8>
   9fb8c:	d503201f 	nop

000000000009fb90 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   9fb90:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
   9fb94:	910003fd 	mov	x29, sp
   9fb98:	a90153f3 	stp	x19, x20, [sp, #16]
   9fb9c:	aa0003f3 	mov	x19, x0
   9fba0:	b9400000 	ldr	w0, [x0]
   9fba4:	6b02001f 	cmp	w0, w2
   9fba8:	540002c3 	b.cc	9fc00 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x70>  // b.lo, b.ul, b.last
   9fbac:	a9025bf5 	stp	x21, x22, [sp, #32]
   9fbb0:	aa0303f4 	mov	x20, x3
   9fbb4:	3900e3ff 	strb	wzr, [sp, #56]
   9fbb8:	340002a2 	cbz	w2, 9fc0c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x7c>
   9fbbc:	9100e3e0 	add	x0, sp, #0x38
   9fbc0:	f00000d5 	adrp	x21, ba000 <CursorSymbol+0x188>
   9fbc4:	910f62b5 	add	x21, x21, #0x3d8
   9fbc8:	94001e22 	bl	a7450 <strcat>
   9fbcc:	910022a1 	add	x1, x21, #0x8
   9fbd0:	9100e3e0 	add	x0, sp, #0x38
   9fbd4:	94001e1f 	bl	a7450 <strcat>
   9fbd8:	aa1403e1 	mov	x1, x20
   9fbdc:	9100e3e0 	add	x0, sp, #0x38
   9fbe0:	94001e1c 	bl	a7450 <strcat>
   9fbe4:	910062a1 	add	x1, x21, #0x18
   9fbe8:	9100e3e0 	add	x0, sp, #0x38
   9fbec:	94001e19 	bl	a7450 <strcat>
   9fbf0:	9100e3e1 	add	x1, sp, #0x38
   9fbf4:	aa1303e0 	mov	x0, x19
   9fbf8:	97ffffa6 	bl	9fa90 <CLogger::Write(char const*)>
   9fbfc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9fc00:	a94153f3 	ldp	x19, x20, [sp, #16]
   9fc04:	a8d07bfd 	ldp	x29, x30, [sp], #256
   9fc08:	d65f03c0 	ret
   9fc0c:	f00000d6 	adrp	x22, ba000 <CursorSymbol+0x188>
   9fc10:	910f62d6 	add	x22, x22, #0x3d8
   9fc14:	aa0103f5 	mov	x21, x1
   9fc18:	9100e3e0 	add	x0, sp, #0x38
   9fc1c:	aa1603e1 	mov	x1, x22
   9fc20:	94001df4 	bl	a73f0 <strcpy>
   9fc24:	aa1503e1 	mov	x1, x21
   9fc28:	9100e3e0 	add	x0, sp, #0x38
   9fc2c:	94001e09 	bl	a7450 <strcat>
   9fc30:	910022c1 	add	x1, x22, #0x8
   9fc34:	9100e3e0 	add	x0, sp, #0x38
   9fc38:	94001e06 	bl	a7450 <strcat>
   9fc3c:	aa1403e1 	mov	x1, x20
   9fc40:	9100e3e0 	add	x0, sp, #0x38
   9fc44:	94001e03 	bl	a7450 <strcat>
   9fc48:	910042c1 	add	x1, x22, #0x10
   9fc4c:	9100e3e0 	add	x0, sp, #0x38
   9fc50:	94001e00 	bl	a7450 <strcat>
   9fc54:	910062c1 	add	x1, x22, #0x18
   9fc58:	9100e3e0 	add	x0, sp, #0x38
   9fc5c:	94001dfd 	bl	a7450 <strcat>
   9fc60:	9100e3e1 	add	x1, sp, #0x38
   9fc64:	aa1303e0 	mov	x0, x19
   9fc68:	97ffff8a 	bl	9fa90 <CLogger::Write(char const*)>
   9fc6c:	52801fe0 	mov	w0, #0xff                  	// #255
   9fc70:	940018dc 	bl	a5fe0 <set_qemu_exit_status>
   9fc74:	940018df 	bl	a5ff0 <halt>
   9fc78:	d503201f 	nop
   9fc7c:	d503201f 	nop

000000000009fc80 <CLogger::Read(void*, unsigned int, bool)>:
   9fc80:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   9fc84:	910003fd 	mov	x29, sp
   9fc88:	a90153f3 	stp	x19, x20, [sp, #16]
   9fc8c:	aa0003f3 	mov	x19, x0
   9fc90:	2a0203f4 	mov	w20, w2
   9fc94:	b9403000 	ldr	w0, [x0, #48]
   9fc98:	a9025bf5 	stp	x21, x22, [sp, #32]
   9fc9c:	aa0103f5 	mov	x21, x1
   9fca0:	12001c76 	and	w22, w3, #0xff
   9fca4:	350004a0 	cbnz	w0, 9fd38 <CLogger::Read(void*, unsigned int, bool)+0xb8>
   9fca8:	29451260 	ldp	w0, w4, [x19, #40]
   9fcac:	6b04001f 	cmp	w0, w4
   9fcb0:	54000520 	b.eq	9fd54 <CLogger::Read(void*, unsigned int, bool)+0xd4>  // b.none
   9fcb4:	2a1403e6 	mov	w6, w20
   9fcb8:	d2800002 	mov	x2, #0x0                   	// #0
   9fcbc:	1400000a 	b	9fce4 <CLogger::Read(void*, unsigned int, bool)+0x64>
   9fcc0:	f9401265 	ldr	x5, [x19, #32]
   9fcc4:	11000454 	add	w20, w2, #0x1
   9fcc8:	38e448a5 	ldrsb	w5, [x5, w4, uxtw]
   9fccc:	12003404 	and	w4, w0, #0x3fff
   9fcd0:	38226aa5 	strb	w5, [x21, x2]
   9fcd4:	91000442 	add	x2, x2, #0x1
   9fcd8:	b9402a60 	ldr	w0, [x19, #40]
   9fcdc:	6b04001f 	cmp	w0, w4
   9fce0:	540000a0 	b.eq	9fcf4 <CLogger::Read(void*, unsigned int, bool)+0x74>  // b.none
   9fce4:	eb06005f 	cmp	x2, x6
   9fce8:	11000480 	add	w0, w4, #0x1
   9fcec:	2a0203f4 	mov	w20, w2
   9fcf0:	54fffe81 	b.ne	9fcc0 <CLogger::Read(void*, unsigned int, bool)+0x40>  // b.any
   9fcf4:	35000116 	cbnz	w22, 9fd14 <CLogger::Read(void*, unsigned int, bool)+0x94>
   9fcf8:	b9403260 	ldr	w0, [x19, #48]
   9fcfc:	35000120 	cbnz	w0, 9fd20 <CLogger::Read(void*, unsigned int, bool)+0xa0>
   9fd00:	2a1403e0 	mov	w0, w20
   9fd04:	a94153f3 	ldp	x19, x20, [sp, #16]
   9fd08:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9fd0c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9fd10:	d65f03c0 	ret
   9fd14:	b9403260 	ldr	w0, [x19, #48]
   9fd18:	b9002e64 	str	w4, [x19, #44]
   9fd1c:	34ffff20 	cbz	w0, 9fd00 <CLogger::Read(void*, unsigned int, bool)+0x80>
   9fd20:	94002538 	bl	a9200 <LeaveCritical>
   9fd24:	2a1403e0 	mov	w0, w20
   9fd28:	a94153f3 	ldp	x19, x20, [sp, #16]
   9fd2c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9fd30:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9fd34:	d65f03c0 	ret
   9fd38:	94002502 	bl	a9140 <EnterCritical>
   9fd3c:	29451260 	ldp	w0, w4, [x19, #40]
   9fd40:	6b04001f 	cmp	w0, w4
   9fd44:	54fffb81 	b.ne	9fcb4 <CLogger::Read(void*, unsigned int, bool)+0x34>  // b.any
   9fd48:	b9403260 	ldr	w0, [x19, #48]
   9fd4c:	34000040 	cbz	w0, 9fd54 <CLogger::Read(void*, unsigned int, bool)+0xd4>
   9fd50:	9400252c 	bl	a9200 <LeaveCritical>
   9fd54:	12800014 	mov	w20, #0xffffffff            	// #-1
   9fd58:	17ffffea 	b	9fd00 <CLogger::Read(void*, unsigned int, bool)+0x80>
   9fd5c:	d503201f 	nop

000000000009fd60 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   9fd60:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   9fd64:	910003fd 	mov	x29, sp
   9fd68:	a90153f3 	stp	x19, x20, [sp, #16]
   9fd6c:	aa0003f3 	mov	x19, x0
   9fd70:	d2802200 	mov	x0, #0x110                 	// #272
   9fd74:	aa0103f4 	mov	x20, x1
   9fd78:	a9025bf5 	stp	x21, x22, [sp, #32]
   9fd7c:	2a0203f6 	mov	w22, w2
   9fd80:	aa0303f5 	mov	x21, x3
   9fd84:	94002137 	bl	a8260 <operator new(unsigned long)>
   9fd88:	aa1403e1 	mov	x1, x20
   9fd8c:	d2800642 	mov	x2, #0x32                  	// #50
   9fd90:	aa0003f4 	mov	x20, x0
   9fd94:	b8004416 	str	w22, [x0], #4
   9fd98:	94001da2 	bl	a7420 <strncpy>
   9fd9c:	aa1503e1 	mov	x1, x21
   9fda0:	9100da80 	add	x0, x20, #0x36
   9fda4:	3900d69f 	strb	wzr, [x20, #53]
   9fda8:	d2801902 	mov	x2, #0xc8                  	// #200
   9fdac:	94001d9d 	bl	a7420 <strncpy>
   9fdb0:	3903f69f 	strb	wzr, [x20, #253]
   9fdb4:	f9400660 	ldr	x0, [x19, #8]
   9fdb8:	b40000c0 	cbz	x0, 9fdd0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
   9fdbc:	910133e2 	add	x2, sp, #0x4c
   9fdc0:	910123e1 	add	x1, sp, #0x48
   9fdc4:	940019b7 	bl	a64a0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   9fdc8:	72001c1f 	tst	w0, #0xff
   9fdcc:	540006a1 	b.ne	9fea0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x140>  // b.any
   9fdd0:	52800000 	mov	w0, #0x0                   	// #0
   9fdd4:	f900829f 	str	xzr, [x20, #256]
   9fdd8:	b9010a9f 	str	wzr, [x20, #264]
   9fddc:	b941d262 	ldr	w2, [x19, #464]
   9fde0:	b9010e80 	str	w0, [x20, #268]
   9fde4:	35000562 	cbnz	w2, 9fe90 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x130>
   9fde8:	b941ca61 	ldr	w1, [x19, #456]
   9fdec:	8b214e60 	add	x0, x19, w1, uxtw #3
   9fdf0:	b941ce63 	ldr	w3, [x19, #460]
   9fdf4:	f9001c14 	str	x20, [x0, #56]
   9fdf8:	7100c43f 	cmp	w1, #0x31
   9fdfc:	11000420 	add	w0, w1, #0x1
   9fe00:	54000340 	b.eq	9fe68 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x108>  // b.none
   9fe04:	6b03001f 	cmp	w0, w3
   9fe08:	b901ca60 	str	w0, [x19, #456]
   9fe0c:	54000120 	b.eq	9fe30 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd0>  // b.none
   9fe10:	35000282 	cbnz	w2, 9fe60 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x100>
   9fe14:	f940ee60 	ldr	x0, [x19, #472]
   9fe18:	b4000040 	cbz	x0, 9fe20 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc0>
   9fe1c:	d63f0000 	blr	x0
   9fe20:	a94153f3 	ldp	x19, x20, [sp, #16]
   9fe24:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9fe28:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9fe2c:	d65f03c0 	ret
   9fe30:	11000821 	add	w1, w1, #0x2
   9fe34:	8b204e60 	add	x0, x19, w0, uxtw #3
   9fe38:	f9401c00 	ldr	x0, [x0, #56]
   9fe3c:	7100c83f 	cmp	w1, #0x32
   9fe40:	b901ce61 	str	w1, [x19, #460]
   9fe44:	1a9f1021 	csel	w1, w1, wzr, ne	// ne = any
   9fe48:	b901ce61 	str	w1, [x19, #460]
   9fe4c:	350001a2 	cbnz	w2, 9fe80 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x120>
   9fe50:	b4fffe20 	cbz	x0, 9fe14 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb4>
   9fe54:	d2802201 	mov	x1, #0x110                 	// #272
   9fe58:	9400212a 	bl	a8300 <operator delete(void*, unsigned long)>
   9fe5c:	17ffffee 	b	9fe14 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb4>
   9fe60:	940024e8 	bl	a9200 <LeaveCritical>
   9fe64:	17ffffec 	b	9fe14 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb4>
   9fe68:	b901ca7f 	str	wzr, [x19, #456]
   9fe6c:	35fffd23 	cbnz	w3, 9fe10 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb0>
   9fe70:	52800021 	mov	w1, #0x1                   	// #1
   9fe74:	f9401e60 	ldr	x0, [x19, #56]
   9fe78:	b901ce61 	str	w1, [x19, #460]
   9fe7c:	34fffea2 	cbz	w2, 9fe50 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf0>
   9fe80:	f9001fe0 	str	x0, [sp, #56]
   9fe84:	940024df 	bl	a9200 <LeaveCritical>
   9fe88:	f9401fe0 	ldr	x0, [sp, #56]
   9fe8c:	17fffff1 	b	9fe50 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf0>
   9fe90:	2a0203e0 	mov	w0, w2
   9fe94:	940024ab 	bl	a9140 <EnterCritical>
   9fe98:	b941d262 	ldr	w2, [x19, #464]
   9fe9c:	17ffffd3 	b	9fde8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x88>
   9fea0:	294907e2 	ldp	w2, w1, [sp, #72]
   9fea4:	5282eb23 	mov	w3, #0x1759                	// #5977
   9fea8:	72ba36e3 	movk	w3, #0xd1b7, lsl #16
   9feac:	f9400660 	ldr	x0, [x19, #8]
   9feb0:	9ba37c21 	umull	x1, w1, w3
   9feb4:	f9008282 	str	x2, [x20, #256]
   9feb8:	d36dfc21 	lsr	x1, x1, #45
   9febc:	b9010a81 	str	w1, [x20, #264]
   9fec0:	94001928 	bl	a6360 <CTimer::GetTimeZone() const>
   9fec4:	17ffffc6 	b	9fddc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x7c>
   9fec8:	d503201f 	nop
   9fecc:	d503201f 	nop

000000000009fed0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   9fed0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   9fed4:	910003fd 	mov	x29, sp
   9fed8:	a90153f3 	stp	x19, x20, [sp, #16]
   9fedc:	aa0003f3 	mov	x19, x0
   9fee0:	b941d000 	ldr	w0, [x0, #464]
   9fee4:	a9025bf5 	stp	x21, x22, [sp, #32]
   9fee8:	aa0103f5 	mov	x21, x1
   9feec:	aa0203f6 	mov	x22, x2
   9fef0:	a90363f7 	stp	x23, x24, [sp, #48]
   9fef4:	aa0303f7 	mov	x23, x3
   9fef8:	aa0403f8 	mov	x24, x4
   9fefc:	a9046bf9 	stp	x25, x26, [sp, #64]
   9ff00:	aa0503f9 	mov	x25, x5
   9ff04:	aa0603fa 	mov	x26, x6
   9ff08:	35000440 	cbnz	w0, 9ff90 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xc0>
   9ff0c:	b941ca60 	ldr	w0, [x19, #456]
   9ff10:	b941ce67 	ldr	w7, [x19, #460]
   9ff14:	6b07001f 	cmp	w0, w7
   9ff18:	540005e0 	b.eq	9ffd4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x104>  // b.none
   9ff1c:	8b274e60 	add	x0, x19, w7, uxtw #3
   9ff20:	7100c4ff 	cmp	w7, #0x31
   9ff24:	1a8707e7 	csinc	w7, wzr, w7, eq	// eq = none
   9ff28:	f9401c14 	ldr	x20, [x0, #56]
   9ff2c:	b901ce67 	str	w7, [x19, #460]
   9ff30:	aa1403e1 	mov	x1, x20
   9ff34:	aa1603e0 	mov	x0, x22
   9ff38:	b8404422 	ldr	w2, [x1], #4
   9ff3c:	b90002a2 	str	w2, [x21]
   9ff40:	94001d2c 	bl	a73f0 <strcpy>
   9ff44:	9100da81 	add	x1, x20, #0x36
   9ff48:	aa1703e0 	mov	x0, x23
   9ff4c:	94001d29 	bl	a73f0 <strcpy>
   9ff50:	f9408283 	ldr	x3, [x20, #256]
   9ff54:	aa1403e0 	mov	x0, x20
   9ff58:	d2802201 	mov	x1, #0x110                 	// #272
   9ff5c:	b9410a82 	ldr	w2, [x20, #264]
   9ff60:	f9000303 	str	x3, [x24]
   9ff64:	b9000322 	str	w2, [x25]
   9ff68:	b9410e82 	ldr	w2, [x20, #268]
   9ff6c:	b9000342 	str	w2, [x26]
   9ff70:	940020e4 	bl	a8300 <operator delete(void*, unsigned long)>
   9ff74:	52800020 	mov	w0, #0x1                   	// #1
   9ff78:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ff7c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9ff80:	a94363f7 	ldp	x23, x24, [sp, #48]
   9ff84:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9ff88:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9ff8c:	d65f03c0 	ret
   9ff90:	9400246c 	bl	a9140 <EnterCritical>
   9ff94:	b941ca61 	ldr	w1, [x19, #456]
   9ff98:	b941ce60 	ldr	w0, [x19, #460]
   9ff9c:	6b00003f 	cmp	w1, w0
   9ffa0:	54000140 	b.eq	9ffc8 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xf8>  // b.none
   9ffa4:	8b204e61 	add	x1, x19, w0, uxtw #3
   9ffa8:	7100c41f 	cmp	w0, #0x31
   9ffac:	1a8007e0 	csinc	w0, wzr, w0, eq	// eq = none
   9ffb0:	f9401c34 	ldr	x20, [x1, #56]
   9ffb4:	b901ce60 	str	w0, [x19, #460]
   9ffb8:	b941d260 	ldr	w0, [x19, #464]
   9ffbc:	34fffba0 	cbz	w0, 9ff30 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x60>
   9ffc0:	94002490 	bl	a9200 <LeaveCritical>
   9ffc4:	17ffffdb 	b	9ff30 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x60>
   9ffc8:	b941d260 	ldr	w0, [x19, #464]
   9ffcc:	34000040 	cbz	w0, 9ffd4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x104>
   9ffd0:	9400248c 	bl	a9200 <LeaveCritical>
   9ffd4:	52800000 	mov	w0, #0x0                   	// #0
   9ffd8:	a94153f3 	ldp	x19, x20, [sp, #16]
   9ffdc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   9ffe0:	a94363f7 	ldp	x23, x24, [sp, #48]
   9ffe4:	a9446bf9 	ldp	x25, x26, [sp, #64]
   9ffe8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   9ffec:	d65f03c0 	ret

000000000009fff0 <CLogger::RegisterEventNotificationHandler(void (*)())>:
   9fff0:	f900ec01 	str	x1, [x0, #472]
   9fff4:	d65f03c0 	ret
   9fff8:	d503201f 	nop
   9fffc:	d503201f 	nop

00000000000a0000 <CLogger::RegisterPanicHandler(void (*)())>:
   a0000:	f900f001 	str	x1, [x0, #480]
   a0004:	d65f03c0 	ret
   a0008:	d503201f 	nop
   a000c:	d503201f 	nop

00000000000a0010 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   a0010:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   a0014:	910003fd 	mov	x29, sp
   a0018:	a90153f3 	stp	x19, x20, [sp, #16]
   a001c:	aa0003f4 	mov	x20, x0
   a0020:	910183e0 	add	x0, sp, #0x60
   a0024:	aa0403f3 	mov	x19, x4
   a0028:	a9025bf5 	stp	x21, x22, [sp, #32]
   a002c:	2a0203f5 	mov	w21, w2
   a0030:	aa0103f6 	mov	x22, x1
   a0034:	f9001bf7 	str	x23, [sp, #48]
   a0038:	aa0303f7 	mov	x23, x3
   a003c:	94001185 	bl	a4650 <CString::CString()>
   a0040:	a9401663 	ldp	x3, x5, [x19]
   a0044:	aa1703e1 	mov	x1, x23
   a0048:	910103e2 	add	x2, sp, #0x40
   a004c:	910183e0 	add	x0, sp, #0x60
   a0050:	f9400a64 	ldr	x4, [x19, #16]
   a0054:	f90023e3 	str	x3, [sp, #64]
   a0058:	f9400e63 	ldr	x3, [x19, #24]
   a005c:	a90493e5 	stp	x5, x4, [sp, #72]
   a0060:	f9002fe3 	str	x3, [sp, #88]
   a0064:	94001443 	bl	a5170 <CString::FormatV(char const*, std::__va_list)>
   a0068:	910183e0 	add	x0, sp, #0x60
   a006c:	940011bd 	bl	a4760 <CString::operator char const*() const>
   a0070:	aa0003e3 	mov	x3, x0
   a0074:	2a1503e2 	mov	w2, w21
   a0078:	aa1403e0 	mov	x0, x20
   a007c:	aa1603e1 	mov	x1, x22
   a0080:	97ffff38 	bl	9fd60 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   a0084:	b9400280 	ldr	w0, [x20]
   a0088:	6b15001f 	cmp	w0, w21
   a008c:	54000583 	b.cc	a013c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x12c>  // b.lo, b.ul, b.last
   a0090:	910203e0 	add	x0, sp, #0x80
   a0094:	d00000d3 	adrp	x19, ba000 <CursorSymbol+0x188>
   a0098:	910f6273 	add	x19, x19, #0x3d8
   a009c:	9400116d 	bl	a4650 <CString::CString()>
   a00a0:	340005d5 	cbz	w21, a0158 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x148>
   a00a4:	f9400680 	ldr	x0, [x20, #8]
   a00a8:	b40001e0 	cbz	x0, a00e4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd4>
   a00ac:	94001979 	bl	a6690 <CTimer::GetTimeString()>
   a00b0:	aa0003f7 	mov	x23, x0
   a00b4:	b4000180 	cbz	x0, a00e4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd4>
   a00b8:	940011aa 	bl	a4760 <CString::operator char const*() const>
   a00bc:	aa0003e1 	mov	x1, x0
   a00c0:	910203e0 	add	x0, sp, #0x80
   a00c4:	94001203 	bl	a48d0 <CString::Append(char const*)>
   a00c8:	91008261 	add	x1, x19, #0x20
   a00cc:	910203e0 	add	x0, sp, #0x80
   a00d0:	94001200 	bl	a48d0 <CString::Append(char const*)>
   a00d4:	f94002e1 	ldr	x1, [x23]
   a00d8:	aa1703e0 	mov	x0, x23
   a00dc:	f9400421 	ldr	x1, [x1, #8]
   a00e0:	d63f0020 	blr	x1
   a00e4:	aa1603e1 	mov	x1, x22
   a00e8:	910203e0 	add	x0, sp, #0x80
   a00ec:	940011f9 	bl	a48d0 <CString::Append(char const*)>
   a00f0:	91002261 	add	x1, x19, #0x8
   a00f4:	910203e0 	add	x0, sp, #0x80
   a00f8:	940011f6 	bl	a48d0 <CString::Append(char const*)>
   a00fc:	910183e0 	add	x0, sp, #0x60
   a0100:	94001198 	bl	a4760 <CString::operator char const*() const>
   a0104:	aa0003e1 	mov	x1, x0
   a0108:	910203e0 	add	x0, sp, #0x80
   a010c:	940011f1 	bl	a48d0 <CString::Append(char const*)>
   a0110:	34000315 	cbz	w21, a0170 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x160>
   a0114:	91006261 	add	x1, x19, #0x18
   a0118:	910203e0 	add	x0, sp, #0x80
   a011c:	940011ed 	bl	a48d0 <CString::Append(char const*)>
   a0120:	910203e0 	add	x0, sp, #0x80
   a0124:	9400118f 	bl	a4760 <CString::operator char const*() const>
   a0128:	aa0003e1 	mov	x1, x0
   a012c:	aa1403e0 	mov	x0, x20
   a0130:	97fffe58 	bl	9fa90 <CLogger::Write(char const*)>
   a0134:	910203e0 	add	x0, sp, #0x80
   a0138:	9400110a 	bl	a4560 <CString::~CString()>
   a013c:	910183e0 	add	x0, sp, #0x60
   a0140:	94001108 	bl	a4560 <CString::~CString()>
   a0144:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0148:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a014c:	f9401bf7 	ldr	x23, [sp, #48]
   a0150:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   a0154:	d65f03c0 	ret
   a0158:	aa1303e1 	mov	x1, x19
   a015c:	910203e0 	add	x0, sp, #0x80
   a0160:	94001188 	bl	a4780 <CString::operator=(char const*)>
   a0164:	f9400680 	ldr	x0, [x20, #8]
   a0168:	b5fffa20 	cbnz	x0, a00ac <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x9c>
   a016c:	17ffffde 	b	a00e4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd4>
   a0170:	91004261 	add	x1, x19, #0x10
   a0174:	910203e0 	add	x0, sp, #0x80
   a0178:	940011d6 	bl	a48d0 <CString::Append(char const*)>
   a017c:	91006261 	add	x1, x19, #0x18
   a0180:	910203e0 	add	x0, sp, #0x80
   a0184:	940011d3 	bl	a48d0 <CString::Append(char const*)>
   a0188:	910203e0 	add	x0, sp, #0x80
   a018c:	94001175 	bl	a4760 <CString::operator char const*() const>
   a0190:	aa0003e1 	mov	x1, x0
   a0194:	aa1403e0 	mov	x0, x20
   a0198:	97fffe3e 	bl	9fa90 <CLogger::Write(char const*)>
   a019c:	f940f280 	ldr	x0, [x20, #480]
   a01a0:	b4000040 	cbz	x0, a01a8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x198>
   a01a4:	d63f0000 	blr	x0
   a01a8:	52801fe0 	mov	w0, #0xff                  	// #255
   a01ac:	9400178d 	bl	a5fe0 <set_qemu_exit_status>
   a01b0:	94001790 	bl	a5ff0 <halt>
   a01b4:	d503201f 	nop
   a01b8:	d503201f 	nop
   a01bc:	d503201f 	nop

00000000000a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   a01c0:	a9b17bfd 	stp	x29, x30, [sp, #-240]!
   a01c4:	9103c3e8 	add	x8, sp, #0xf0
   a01c8:	9103c3eb 	add	x11, sp, #0xf0
   a01cc:	910003fd 	mov	x29, sp
   a01d0:	910343ea 	add	x10, sp, #0xd0
   a01d4:	128003e9 	mov	w9, #0xffffffe0            	// #-32
   a01d8:	a9032fe8 	stp	x8, x11, [sp, #48]
   a01dc:	12800fe8 	mov	w8, #0xffffff80            	// #-128
   a01e0:	f90023ea 	str	x10, [sp, #64]
   a01e4:	b9004be9 	str	w9, [sp, #72]
   a01e8:	b9004fe8 	str	w8, [sp, #76]
   a01ec:	a9432fea 	ldp	x10, x11, [sp, #48]
   a01f0:	a94427e8 	ldp	x8, x9, [sp, #64]
   a01f4:	a90d17e4 	stp	x4, x5, [sp, #208]
   a01f8:	910043e4 	add	x4, sp, #0x10
   a01fc:	a9012fea 	stp	x10, x11, [sp, #16]
   a0200:	a90227e8 	stp	x8, x9, [sp, #32]
   a0204:	3d8017e0 	str	q0, [sp, #80]
   a0208:	3d801be1 	str	q1, [sp, #96]
   a020c:	3d801fe2 	str	q2, [sp, #112]
   a0210:	3d8023e3 	str	q3, [sp, #128]
   a0214:	3d8027e4 	str	q4, [sp, #144]
   a0218:	3d802be5 	str	q5, [sp, #160]
   a021c:	3d802fe6 	str	q6, [sp, #176]
   a0220:	3d8033e7 	str	q7, [sp, #192]
   a0224:	a90e1fe6 	stp	x6, x7, [sp, #224]
   a0228:	97ffff7a 	bl	a0010 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   a022c:	a8cf7bfd 	ldp	x29, x30, [sp], #240
   a0230:	d65f03c0 	ret
   a0234:	d503201f 	nop
   a0238:	d503201f 	nop
   a023c:	d503201f 	nop

00000000000a0240 <CLogger::Initialize(CDevice*)>:
   a0240:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   a0244:	910003fd 	mov	x29, sp
   a0248:	a90153f3 	stp	x19, x20, [sp, #16]
   a024c:	aa0003f4 	mov	x20, x0
   a0250:	d00000d3 	adrp	x19, ba000 <CursorSymbol+0x188>
   a0254:	910f6273 	add	x19, x19, #0x3d8
   a0258:	a9025bf5 	stp	x21, x22, [sp, #32]
   a025c:	f9000c01 	str	x1, [x0, #24]
   a0260:	94000370 	bl	a1020 <CMachineInfo::Get()>
   a0264:	94000073 	bl	a0430 <CMachineInfo::GetRAMSize() const>
   a0268:	2a0003f5 	mov	w21, w0
   a026c:	9100c3e0 	add	x0, sp, #0x30
   a0270:	940010f8 	bl	a4650 <CString::CString()>
   a0274:	710ffebf 	cmp	w21, #0x3ff
   a0278:	54000648 	b.hi	a0340 <CLogger::Initialize(CDevice*)+0x100>  // b.pmore
   a027c:	2a1503e2 	mov	w2, w21
   a0280:	9100a261 	add	x1, x19, #0x28
   a0284:	9100c3e0 	add	x0, sp, #0x30
   a0288:	9400172a 	bl	a5f30 <CString::Format(char const*, ...)>
   a028c:	9100e261 	add	x1, x19, #0x38
   a0290:	910143e0 	add	x0, sp, #0x50
   a0294:	940010f7 	bl	a4670 <CString::CString(char const*)>
   a0298:	91010261 	add	x1, x19, #0x40
   a029c:	52800024 	mov	w4, #0x1                   	// #1
   a02a0:	52800063 	mov	w3, #0x3                   	// #3
   a02a4:	52800162 	mov	w2, #0xb                   	// #11
   a02a8:	910143e0 	add	x0, sp, #0x50
   a02ac:	9101e276 	add	x22, x19, #0x78
   a02b0:	94001720 	bl	a5f30 <CString::Format(char const*, ...)>
   a02b4:	9400035b 	bl	a1020 <CMachineInfo::Get()>
   a02b8:	94000046 	bl	a03d0 <CMachineInfo::GetMachineName() const>
   a02bc:	aa0003f5 	mov	x21, x0
   a02c0:	9100c3e0 	add	x0, sp, #0x30
   a02c4:	94001127 	bl	a4760 <CString::operator char const*() const>
   a02c8:	b00000e4 	adrp	x4, bd000 <CNetDevice::s_SpeedString+0x18>
   a02cc:	aa0003e6 	mov	x6, x0
   a02d0:	aa1503e5 	mov	x5, x21
   a02d4:	aa1603e1 	mov	x1, x22
   a02d8:	91014263 	add	x3, x19, #0x50
   a02dc:	91070084 	add	x4, x4, #0x1c0
   a02e0:	52800062 	mov	w2, #0x3                   	// #3
   a02e4:	aa1403e0 	mov	x0, x20
   a02e8:	97ffffb6 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a02ec:	9400034d 	bl	a1020 <CMachineInfo::Get()>
   a02f0:	9400005c 	bl	a0460 <CMachineInfo::GetRevisionRaw() const>
   a02f4:	2a0003f5 	mov	w21, w0
   a02f8:	910143e0 	add	x0, sp, #0x50
   a02fc:	94001119 	bl	a4760 <CString::operator char const*() const>
   a0300:	aa0003e5 	mov	x5, x0
   a0304:	2a1503e4 	mov	w4, w21
   a0308:	aa1603e1 	mov	x1, x22
   a030c:	91020263 	add	x3, x19, #0x80
   a0310:	52800082 	mov	w2, #0x4                   	// #4
   a0314:	aa1403e0 	mov	x0, x20
   a0318:	97ffffaa 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a031c:	910143e0 	add	x0, sp, #0x50
   a0320:	94001090 	bl	a4560 <CString::~CString()>
   a0324:	9100c3e0 	add	x0, sp, #0x30
   a0328:	9400108e 	bl	a4560 <CString::~CString()>
   a032c:	52800020 	mov	w0, #0x1                   	// #1
   a0330:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0334:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a0338:	a8c77bfd 	ldp	x29, x30, [sp], #112
   a033c:	d65f03c0 	ret
   a0340:	530a7ea2 	lsr	w2, w21, #10
   a0344:	9100c261 	add	x1, x19, #0x30
   a0348:	9100c3e0 	add	x0, sp, #0x30
   a034c:	940016f9 	bl	a5f30 <CString::Format(char const*, ...)>
   a0350:	17ffffcf 	b	a028c <CLogger::Initialize(CDevice*)+0x4c>
	...

00000000000a0360 <CMachineInfo::~CMachineInfo()>:
   a0360:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a0364:	910003fd 	mov	x29, sp
   a0368:	528002a2 	mov	w2, #0x15                  	// #21
   a036c:	a90153f3 	stp	x19, x20, [sp, #16]
   a0370:	b00000f3 	adrp	x19, bd000 <CNetDevice::s_SpeedString+0x18>
   a0374:	f940b661 	ldr	x1, [x19, #360]
   a0378:	b9001002 	str	w2, [x0, #16]
   a037c:	eb00003f 	cmp	x1, x0
   a0380:	54000080 	b.eq	a0390 <CMachineInfo::~CMachineInfo()+0x30>  // b.none
   a0384:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0388:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a038c:	d65f03c0 	ret
   a0390:	f9404034 	ldr	x20, [x1, #128]
   a0394:	b40000d4 	cbz	x20, a03ac <CMachineInfo::~CMachineInfo()+0x4c>
   a0398:	aa1403e0 	mov	x0, x20
   a039c:	94002ce5 	bl	ab730 <CDeviceTreeBlob::~CDeviceTreeBlob()>
   a03a0:	aa1403e0 	mov	x0, x20
   a03a4:	d2800101 	mov	x1, #0x8                   	// #8
   a03a8:	94001fd6 	bl	a8300 <operator delete(void*, unsigned long)>
   a03ac:	f900b67f 	str	xzr, [x19, #360]
   a03b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a03b4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a03b8:	d65f03c0 	ret
   a03bc:	d503201f 	nop

00000000000a03c0 <CMachineInfo::GetMachineModel() const>:
   a03c0:	b9401000 	ldr	w0, [x0, #16]
   a03c4:	d65f03c0 	ret
   a03c8:	d503201f 	nop
   a03cc:	d503201f 	nop

00000000000a03d0 <CMachineInfo::GetMachineName() const>:
   a03d0:	b9801000 	ldrsw	x0, [x0, #16]
   a03d4:	d00000c1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a03d8:	911a6021 	add	x1, x1, #0x698
   a03dc:	f8607820 	ldr	x0, [x1, x0, lsl #3]
   a03e0:	d65f03c0 	ret
   a03e4:	d503201f 	nop
   a03e8:	d503201f 	nop
   a03ec:	d503201f 	nop

00000000000a03f0 <CMachineInfo::GetModelMajor() const>:
   a03f0:	b9402000 	ldr	w0, [x0, #32]
   a03f4:	d65f03c0 	ret
   a03f8:	d503201f 	nop
   a03fc:	d503201f 	nop

00000000000a0400 <CMachineInfo::GetModelRevision() const>:
   a0400:	b9403000 	ldr	w0, [x0, #48]
   a0404:	d65f03c0 	ret
   a0408:	d503201f 	nop
   a040c:	d503201f 	nop

00000000000a0410 <CMachineInfo::GetSoCType() const>:
   a0410:	b9404000 	ldr	w0, [x0, #64]
   a0414:	d65f03c0 	ret
   a0418:	d503201f 	nop
   a041c:	d503201f 	nop

00000000000a0420 <CMachineInfo::GetSoCStepping() const>:
   a0420:	39414000 	ldrb	w0, [x0, #80]
   a0424:	d65f03c0 	ret
   a0428:	d503201f 	nop
   a042c:	d503201f 	nop

00000000000a0430 <CMachineInfo::GetRAMSize() const>:
   a0430:	b9406000 	ldr	w0, [x0, #96]
   a0434:	d65f03c0 	ret
   a0438:	d503201f 	nop
   a043c:	d503201f 	nop

00000000000a0440 <CMachineInfo::GetSoCName() const>:
   a0440:	b9804000 	ldrsw	x0, [x0, #64]
   a0444:	d00000c1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a0448:	911a6021 	add	x1, x1, #0x698
   a044c:	9102c021 	add	x1, x1, #0xb0
   a0450:	f8607820 	ldr	x0, [x1, x0, lsl #3]
   a0454:	d65f03c0 	ret
   a0458:	d503201f 	nop
   a045c:	d503201f 	nop

00000000000a0460 <CMachineInfo::GetRevisionRaw() const>:
   a0460:	b9400000 	ldr	w0, [x0]
   a0464:	d65f03c0 	ret
   a0468:	d503201f 	nop
   a046c:	d503201f 	nop

00000000000a0470 <CMachineInfo::GetActLEDInfo() const>:
   a0470:	b9801000 	ldrsw	x0, [x0, #16]
   a0474:	d00000c1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a0478:	911a6021 	add	x1, x1, #0x698
   a047c:	91038021 	add	x1, x1, #0xe0
   a0480:	b8607820 	ldr	w0, [x1, x0, lsl #2]
   a0484:	d65f03c0 	ret
   a0488:	d503201f 	nop
   a048c:	d503201f 	nop

00000000000a0490 <CMachineInfo::GetClockRate(unsigned int) const>:
   a0490:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   a0494:	910003fd 	mov	x29, sp
   a0498:	a90153f3 	stp	x19, x20, [sp, #16]
   a049c:	2a0103f3 	mov	w19, w1
   a04a0:	52800001 	mov	w1, #0x0                   	// #0
   a04a4:	f90013f5 	str	x21, [sp, #32]
   a04a8:	aa0003f5 	mov	x21, x0
   a04ac:	9100c3e0 	add	x0, sp, #0x30
   a04b0:	97fff648 	bl	9ddd0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   a04b4:	9100c3e0 	add	x0, sp, #0x30
   a04b8:	9100e3e2 	add	x2, sp, #0x38
   a04bc:	b90047f3 	str	w19, [sp, #68]
   a04c0:	52800041 	mov	w1, #0x2                   	// #2
   a04c4:	72a00061 	movk	w1, #0x3, lsl #16
   a04c8:	52800084 	mov	w4, #0x4                   	// #4
   a04cc:	52800283 	mov	w3, #0x14                  	// #20
   a04d0:	97fff6a0 	bl	9df50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a04d4:	72001c1f 	tst	w0, #0xff
   a04d8:	54000060 	b.eq	a04e4 <CMachineInfo::GetClockRate(unsigned int) const+0x54>  // b.none
   a04dc:	b9404bf4 	ldr	w20, [sp, #72]
   a04e0:	35000474 	cbnz	w20, a056c <CMachineInfo::GetClockRate(unsigned int) const+0xdc>
   a04e4:	9100e3e2 	add	x2, sp, #0x38
   a04e8:	528008e1 	mov	w1, #0x47                  	// #71
   a04ec:	72a00061 	movk	w1, #0x3, lsl #16
   a04f0:	52800084 	mov	w4, #0x4                   	// #4
   a04f4:	b90047f3 	str	w19, [sp, #68]
   a04f8:	52800283 	mov	w3, #0x14                  	// #20
   a04fc:	9100c3e0 	add	x0, sp, #0x30
   a0500:	97fff694 	bl	9df50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a0504:	72001c1f 	tst	w0, #0xff
   a0508:	54000060 	b.eq	a0514 <CMachineInfo::GetClockRate(unsigned int) const+0x84>  // b.none
   a050c:	b9404bf4 	ldr	w20, [sp, #72]
   a0510:	350002f4 	cbnz	w20, a056c <CMachineInfo::GetClockRate(unsigned int) const+0xdc>
   a0514:	7100127f 	cmp	w19, #0x4
   a0518:	540004a0 	b.eq	a05ac <CMachineInfo::GetClockRate(unsigned int) const+0x11c>  // b.none
   a051c:	540001c8 	b.hi	a0554 <CMachineInfo::GetClockRate(unsigned int) const+0xc4>  // b.pmore
   a0520:	7100067f 	cmp	w19, #0x1
   a0524:	54000320 	b.eq	a0588 <CMachineInfo::GetClockRate(unsigned int) const+0xf8>  // b.none
   a0528:	71000a7f 	cmp	w19, #0x2
   a052c:	54000501 	b.ne	a05cc <CMachineInfo::GetClockRate(unsigned int) const+0x13c>  // b.any
   a0530:	9100c3e0 	add	x0, sp, #0x30
   a0534:	528d8014 	mov	w20, #0x6c00                	// #27648
   a0538:	72a05b94 	movk	w20, #0x2dc, lsl #16
   a053c:	97fff629 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   a0540:	2a1403e0 	mov	w0, w20
   a0544:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0548:	f94013f5 	ldr	x21, [sp, #32]
   a054c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a0550:	d65f03c0 	ret
   a0554:	7100327f 	cmp	w19, #0xc
   a0558:	54000180 	b.eq	a0588 <CMachineInfo::GetClockRate(unsigned int) const+0xf8>  // b.none
   a055c:	71003a7f 	cmp	w19, #0xe
   a0560:	54000361 	b.ne	a05cc <CMachineInfo::GetClockRate(unsigned int) const+0x13c>  // b.any
   a0564:	528d1814 	mov	w20, #0x68c0                	// #26816
   a0568:	72a08f14 	movk	w20, #0x478, lsl #16
   a056c:	9100c3e0 	add	x0, sp, #0x30
   a0570:	97fff61c 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   a0574:	2a1403e0 	mov	w0, w20
   a0578:	a94153f3 	ldp	x19, x20, [sp, #16]
   a057c:	f94013f5 	ldr	x21, [sp, #32]
   a0580:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a0584:	d65f03c0 	ret
   a0588:	9100c3e0 	add	x0, sp, #0x30
   a058c:	529c2014 	mov	w20, #0xe100                	// #57600
   a0590:	72a0beb4 	movk	w20, #0x5f5, lsl #16
   a0594:	97fff613 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   a0598:	2a1403e0 	mov	w0, w20
   a059c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a05a0:	f94013f5 	ldr	x21, [sp, #32]
   a05a4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a05a8:	d65f03c0 	ret
   a05ac:	b94022a1 	ldr	w1, [x21, #32]
   a05b0:	52965014 	mov	w20, #0xb280                	// #45696
   a05b4:	72a1dcd4 	movk	w20, #0xee6, lsl #16
   a05b8:	52946000 	mov	w0, #0xa300                	// #41728
   a05bc:	72a23c20 	movk	w0, #0x11e1, lsl #16
   a05c0:	71000c3f 	cmp	w1, #0x3
   a05c4:	1a803294 	csel	w20, w20, w0, cc	// cc = lo, ul, last
   a05c8:	17ffffe9 	b	a056c <CMachineInfo::GetClockRate(unsigned int) const+0xdc>
   a05cc:	d00000c0 	adrp	x0, ba000 <CursorSymbol+0x188>
   a05d0:	911a6000 	add	x0, x0, #0x698
   a05d4:	9104e001 	add	x1, x0, #0x138
   a05d8:	52803582 	mov	w2, #0x1ac                 	// #428
   a05dc:	91052000 	add	x0, x0, #0x148
   a05e0:	97fff5d8 	bl	9dd40 <assertion_failed>
   a05e4:	d503201f 	nop
   a05e8:	d503201f 	nop
   a05ec:	d503201f 	nop

00000000000a05f0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   a05f0:	7100d83f 	cmp	w1, #0x36
   a05f4:	aa0003e2 	mov	x2, x0
   a05f8:	54000120 	b.eq	a061c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x2c>  // b.none
   a05fc:	7100dc3f 	cmp	w1, #0x37
   a0600:	54000241 	b.ne	a0648 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x58>  // b.any
   a0604:	b9401042 	ldr	w2, [x2, #16]
   a0608:	528005a1 	mov	w1, #0x2d                  	// #45
   a060c:	52800500 	mov	w0, #0x28                  	// #40
   a0610:	71000c5f 	cmp	w2, #0x3
   a0614:	1a81c000 	csel	w0, w0, w1, gt
   a0618:	d65f03c0 	ret
   a061c:	b9401041 	ldr	w1, [x2, #16]
   a0620:	52800500 	mov	w0, #0x28                  	// #40
   a0624:	71000c3f 	cmp	w1, #0x3
   a0628:	540000ed 	b.le	a0644 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x54>
   a062c:	b9402042 	ldr	w2, [x2, #32]
   a0630:	52800521 	mov	w1, #0x29                  	// #41
   a0634:	528005a0 	mov	w0, #0x2d                  	// #45
   a0638:	71000c5f 	cmp	w2, #0x3
   a063c:	1a813000 	csel	w0, w0, w1, cc	// cc = lo, ul, last
   a0640:	d65f03c0 	ret
   a0644:	d65f03c0 	ret
   a0648:	d00000c0 	adrp	x0, ba000 <CursorSymbol+0x188>
   a064c:	911a6000 	add	x0, x0, #0x698
   a0650:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a0654:	9104e001 	add	x1, x0, #0x138
   a0658:	910003fd 	mov	x29, sp
   a065c:	91052000 	add	x0, x0, #0x148
   a0660:	52803e22 	mov	w2, #0x1f1                 	// #497
   a0664:	97fff5b7 	bl	9dd40 <assertion_failed>
   a0668:	d503201f 	nop
   a066c:	d503201f 	nop

00000000000a0670 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
   a0670:	b9402000 	ldr	w0, [x0, #32]
   a0674:	71000c1f 	cmp	w0, #0x3
   a0678:	54000108 	b.hi	a0698 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x28>  // b.pmore
   a067c:	7100043f 	cmp	w1, #0x1
   a0680:	540001a0 	b.eq	a06b4 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>  // b.none
   a0684:	7100183f 	cmp	w1, #0x6
   a0688:	528ca000 	mov	w0, #0x6500                	// #25856
   a068c:	72a3b9a0 	movk	w0, #0x1dcd, lsl #16
   a0690:	1a8013e0 	csel	w0, wzr, w0, ne	// ne = any
   a0694:	d65f03c0 	ret
   a0698:	7100043f 	cmp	w1, #0x1
   a069c:	54000120 	b.eq	a06c0 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>  // b.none
   a06a0:	7100183f 	cmp	w1, #0x6
   a06a4:	5282f000 	mov	w0, #0x1780                	// #6016
   a06a8:	72a59680 	movk	w0, #0x2cb4, lsl #16
   a06ac:	1a8013e0 	csel	w0, wzr, w0, ne	// ne = any
   a06b0:	d65f03c0 	ret
   a06b4:	529f0000 	mov	w0, #0xf800                	// #63488
   a06b8:	72a02480 	movk	w0, #0x124, lsl #16
   a06bc:	d65f03c0 	ret
   a06c0:	529f3000 	mov	w0, #0xf980                	// #63872
   a06c4:	72a066e0 	movk	w0, #0x337, lsl #16
   a06c8:	d65f03c0 	ret
   a06cc:	d503201f 	nop

00000000000a06d0 <CMachineInfo::GetDevice(TDeviceId) const>:
   a06d0:	350000a1 	cbnz	w1, a06e4 <CMachineInfo::GetDevice(TDeviceId) const+0x14>
   a06d4:	b9401000 	ldr	w0, [x0, #16]
   a06d8:	7100041f 	cmp	w0, #0x1
   a06dc:	1a9f07e0 	cset	w0, ne	// ne = any
   a06e0:	d65f03c0 	ret
   a06e4:	d00000c0 	adrp	x0, ba000 <CursorSymbol+0x188>
   a06e8:	911a6000 	add	x0, x0, #0x698
   a06ec:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a06f0:	9104e001 	add	x1, x0, #0x138
   a06f4:	910003fd 	mov	x29, sp
   a06f8:	91052000 	add	x0, x0, #0x148
   a06fc:	52804782 	mov	w2, #0x23c                 	// #572
   a0700:	97fff590 	bl	9dd40 <assertion_failed>
   a0704:	d503201f 	nop
   a0708:	d503201f 	nop
   a070c:	d503201f 	nop

00000000000a0710 <CMachineInfo::ArePWMChannelsSwapped() const>:
   a0710:	b9401000 	ldr	w0, [x0, #16]
   a0714:	529fff62 	mov	w2, #0xfffb                	// #65531
   a0718:	72afffe2 	movk	w2, #0x7fff, lsl #16
   a071c:	51001003 	sub	w3, w0, #0x4
   a0720:	51001801 	sub	w1, w0, #0x6
   a0724:	6b02007f 	cmp	w3, w2
   a0728:	7a429820 	ccmp	w1, #0x2, #0x0, ls	// ls = plast
   a072c:	7a548804 	ccmp	w0, #0x14, #0x4, hi	// hi = pmore
   a0730:	1a9f07e0 	cset	w0, ne	// ne = any
   a0734:	d65f03c0 	ret
   a0738:	d503201f 	nop
   a073c:	d503201f 	nop

00000000000a0740 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
   a0740:	b00000e2 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   a0744:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a0748:	910003fd 	mov	x29, sp
   a074c:	aa0003e3 	mov	x3, x0
   a0750:	f940b442 	ldr	x2, [x2, #360]
   a0754:	b40000a2 	cbz	x2, a0768 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x28>
   a0758:	eb03005f 	cmp	x2, x3
   a075c:	54000120 	b.eq	a0780 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x40>  // b.none
   a0760:	aa0203e3 	mov	x3, x2
   a0764:	b5ffffa2 	cbnz	x2, a0758 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x18>
   a0768:	d00000c0 	adrp	x0, ba000 <CursorSymbol+0x188>
   a076c:	911a6000 	add	x0, x0, #0x698
   a0770:	9104e001 	add	x1, x0, #0x138
   a0774:	528049c2 	mov	w2, #0x24e                 	// #590
   a0778:	91054000 	add	x0, x0, #0x150
   a077c:	97fff571 	bl	9dd40 <assertion_failed>
   a0780:	721c6c3f 	tst	w1, #0xfffffff0
   a0784:	54000280 	b.eq	a07d4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x94>  // b.none
   a0788:	7102043f 	cmp	w1, #0x81
   a078c:	540004a0 	b.eq	a0820 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xe0>  // b.none
   a0790:	71020c3f 	cmp	w1, #0x83
   a0794:	528001c0 	mov	w0, #0xe                   	// #14
   a0798:	528000e1 	mov	w1, #0x7                   	// #7
   a079c:	52800162 	mov	w2, #0xb                   	// #11
   a07a0:	1a801021 	csel	w1, w1, w0, ne	// ne = any
   a07a4:	1a8213e2 	csel	w2, wzr, w2, ne	// ne = any
   a07a8:	7940e064 	ldrh	w4, [x3, #112]
   a07ac:	1ac12880 	asr	w0, w4, w1
   a07b0:	36000080 	tbz	w0, #0, a07c0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x80>
   a07b4:	14000015 	b	a0808 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc8>
   a07b8:	1ac12880 	asr	w0, w4, w1
   a07bc:	37000260 	tbnz	w0, #0, a0808 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc8>
   a07c0:	51000421 	sub	w1, w1, #0x1
   a07c4:	6b01005f 	cmp	w2, w1
   a07c8:	54ffff8d 	b.le	a07b8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x78>
   a07cc:	52801000 	mov	w0, #0x80                  	// #128
   a07d0:	1400000c 	b	a0800 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
   a07d4:	71003c3f 	cmp	w1, #0xf
   a07d8:	540002a0 	b.eq	a082c <CMachineInfo::AllocateDMAChannel(unsigned int)+0xec>  // b.none
   a07dc:	7940e044 	ldrh	w4, [x2, #112]
   a07e0:	52801000 	mov	w0, #0x80                  	// #128
   a07e4:	1ac12883 	asr	w3, w4, w1
   a07e8:	360000c3 	tbz	w3, #0, a0800 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
   a07ec:	52800023 	mov	w3, #0x1                   	// #1
   a07f0:	2a0103e0 	mov	w0, w1
   a07f4:	1ac12061 	lsl	w1, w3, w1
   a07f8:	0a210081 	bic	w1, w4, w1
   a07fc:	7900e041 	strh	w1, [x2, #112]
   a0800:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a0804:	d65f03c0 	ret
   a0808:	52800022 	mov	w2, #0x1                   	// #1
   a080c:	2a0103e0 	mov	w0, w1
   a0810:	1ac12041 	lsl	w1, w2, w1
   a0814:	0a210081 	bic	w1, w4, w1
   a0818:	7900e061 	strh	w1, [x3, #112]
   a081c:	17fffff9 	b	a0800 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
   a0820:	52800002 	mov	w2, #0x0                   	// #0
   a0824:	528000c1 	mov	w1, #0x6                   	// #6
   a0828:	17ffffe0 	b	a07a8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x68>
   a082c:	d00000c0 	adrp	x0, ba000 <CursorSymbol+0x188>
   a0830:	911a6000 	add	x0, x0, #0x698
   a0834:	9104e001 	add	x1, x0, #0x138
   a0838:	52804b42 	mov	w2, #0x25a                 	// #602
   a083c:	91058000 	add	x0, x0, #0x160
   a0840:	97fff540 	bl	9dd40 <assertion_failed>
   a0844:	d503201f 	nop
   a0848:	d503201f 	nop
   a084c:	d503201f 	nop

00000000000a0850 <CMachineInfo::FreeDMAChannel(unsigned int)>:
   a0850:	b00000e2 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   a0854:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a0858:	910003fd 	mov	x29, sp
   a085c:	f940b442 	ldr	x2, [x2, #360]
   a0860:	b40000c2 	cbz	x2, a0878 <CMachineInfo::FreeDMAChannel(unsigned int)+0x28>
   a0864:	d503201f 	nop
   a0868:	eb00005f 	cmp	x2, x0
   a086c:	54000120 	b.eq	a0890 <CMachineInfo::FreeDMAChannel(unsigned int)+0x40>  // b.none
   a0870:	aa0203e0 	mov	x0, x2
   a0874:	b5ffffa2 	cbnz	x2, a0868 <CMachineInfo::FreeDMAChannel(unsigned int)+0x18>
   a0878:	d00000c0 	adrp	x0, ba000 <CursorSymbol+0x188>
   a087c:	911a6000 	add	x0, x0, #0x698
   a0880:	9104e001 	add	x1, x0, #0x138
   a0884:	52805062 	mov	w2, #0x283                 	// #643
   a0888:	91054000 	add	x0, x0, #0x150
   a088c:	97fff52d 	bl	9dd40 <assertion_failed>
   a0890:	7100383f 	cmp	w1, #0xe
   a0894:	54000148 	b.hi	a08bc <CMachineInfo::FreeDMAChannel(unsigned int)+0x6c>  // b.pmore
   a0898:	7940e040 	ldrh	w0, [x2, #112]
   a089c:	1ac12803 	asr	w3, w0, w1
   a08a0:	370001a3 	tbnz	w3, #0, a08d4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x84>
   a08a4:	52800023 	mov	w3, #0x1                   	// #1
   a08a8:	1ac12061 	lsl	w1, w3, w1
   a08ac:	2a010000 	orr	w0, w0, w1
   a08b0:	7900e040 	strh	w0, [x2, #112]
   a08b4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a08b8:	d65f03c0 	ret
   a08bc:	d00000c0 	adrp	x0, ba000 <CursorSymbol+0x188>
   a08c0:	911a6000 	add	x0, x0, #0x698
   a08c4:	9104e001 	add	x1, x0, #0x138
   a08c8:	528051c2 	mov	w2, #0x28e                 	// #654
   a08cc:	91058000 	add	x0, x0, #0x160
   a08d0:	97fff51c 	bl	9dd40 <assertion_failed>
   a08d4:	d00000c0 	adrp	x0, ba000 <CursorSymbol+0x188>
   a08d8:	911a6000 	add	x0, x0, #0x698
   a08dc:	9104e001 	add	x1, x0, #0x138
   a08e0:	52805202 	mov	w2, #0x290                 	// #656
   a08e4:	91060000 	add	x0, x0, #0x180
   a08e8:	97fff516 	bl	9dd40 <assertion_failed>
   a08ec:	d503201f 	nop

00000000000a08f0 <CMachineInfo::FetchDTB()>:
   a08f0:	d2801f01 	mov	x1, #0xf8                  	// #248
   a08f4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a08f8:	910003fd 	mov	x29, sp
   a08fc:	a90153f3 	stp	x19, x20, [sp, #16]
   a0900:	aa0003f3 	mov	x19, x0
   a0904:	f90017e1 	str	x1, [sp, #40]
   a0908:	f94017e0 	ldr	x0, [sp, #40]
   a090c:	b9400014 	ldr	w20, [x0]
   a0910:	34000174 	cbz	w20, a093c <CMachineInfo::FetchDTB()+0x4c>
   a0914:	f9404260 	ldr	x0, [x19, #128]
   a0918:	b5000180 	cbnz	x0, a0948 <CMachineInfo::FetchDTB()+0x58>
   a091c:	d2800100 	mov	x0, #0x8                   	// #8
   a0920:	94001e50 	bl	a8260 <operator new(unsigned long)>
   a0924:	2a1403e1 	mov	w1, w20
   a0928:	aa0003f4 	mov	x20, x0
   a092c:	94002b49 	bl	ab650 <CDeviceTreeBlob::CDeviceTreeBlob(void const*)>
   a0930:	f94017e0 	ldr	x0, [sp, #40]
   a0934:	f9004274 	str	x20, [x19, #128]
   a0938:	b900001f 	str	wzr, [x0]
   a093c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0940:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a0944:	d65f03c0 	ret
   a0948:	d00000c0 	adrp	x0, ba000 <CursorSymbol+0x188>
   a094c:	911a6000 	add	x0, x0, #0x698
   a0950:	9104e001 	add	x1, x0, #0x138
   a0954:	528053a2 	mov	w2, #0x29d                 	// #669
   a0958:	9106a000 	add	x0, x0, #0x1a8
   a095c:	97fff4f9 	bl	9dd40 <assertion_failed>

00000000000a0960 <CMachineInfo::CMachineInfo()>:
   a0960:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
   a0964:	910003fd 	mov	x29, sp
   a0968:	f9000bf3 	str	x19, [sp, #16]
   a096c:	f90017e0 	str	x0, [sp, #40]
   a0970:	f94017e0 	ldr	x0, [sp, #40]
   a0974:	b900001f 	str	wzr, [x0]
   a0978:	f94017e0 	ldr	x0, [sp, #40]
   a097c:	528002a1 	mov	w1, #0x15                  	// #21
   a0980:	b9001001 	str	w1, [x0, #16]
   a0984:	f94017e0 	ldr	x0, [sp, #40]
   a0988:	b900201f 	str	wzr, [x0, #32]
   a098c:	f94017e0 	ldr	x0, [sp, #40]
   a0990:	b900301f 	str	wzr, [x0, #48]
   a0994:	f94017e0 	ldr	x0, [sp, #40]
   a0998:	528000a1 	mov	w1, #0x5                   	// #5
   a099c:	b9004001 	str	w1, [x0, #64]
   a09a0:	f94017e0 	ldr	x0, [sp, #40]
   a09a4:	12800001 	mov	w1, #0xffffffff            	// #-1
   a09a8:	39014001 	strb	w1, [x0, #80]
   a09ac:	f94017e0 	ldr	x0, [sp, #40]
   a09b0:	b900601f 	str	wzr, [x0, #96]
   a09b4:	f94017e0 	ldr	x0, [sp, #40]
   a09b8:	528e3ea1 	mov	w1, #0x71f5                	// #29173
   a09bc:	7900e001 	strh	w1, [x0, #112]
   a09c0:	f94017e0 	ldr	x0, [sp, #40]
   a09c4:	f900401f 	str	xzr, [x0, #128]
   a09c8:	b00000e0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a09cc:	9105a000 	add	x0, x0, #0x168
   a09d0:	f9400000 	ldr	x0, [x0]
   a09d4:	f100001f 	cmp	x0, #0x0
   a09d8:	54000640 	b.eq	a0aa0 <CMachineInfo::CMachineInfo()+0x140>  // b.none
   a09dc:	b00000e0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a09e0:	9105a000 	add	x0, x0, #0x168
   a09e4:	f9400000 	ldr	x0, [x0]
   a09e8:	b9400001 	ldr	w1, [x0]
   a09ec:	f94017e0 	ldr	x0, [sp, #40]
   a09f0:	b9000001 	str	w1, [x0]
   a09f4:	b00000e0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a09f8:	9105a000 	add	x0, x0, #0x168
   a09fc:	f9400000 	ldr	x0, [x0]
   a0a00:	b9401001 	ldr	w1, [x0, #16]
   a0a04:	f94017e0 	ldr	x0, [sp, #40]
   a0a08:	b9001001 	str	w1, [x0, #16]
   a0a0c:	b00000e0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a0a10:	9105a000 	add	x0, x0, #0x168
   a0a14:	f9400000 	ldr	x0, [x0]
   a0a18:	b9402001 	ldr	w1, [x0, #32]
   a0a1c:	f94017e0 	ldr	x0, [sp, #40]
   a0a20:	b9002001 	str	w1, [x0, #32]
   a0a24:	b00000e0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a0a28:	9105a000 	add	x0, x0, #0x168
   a0a2c:	f9400000 	ldr	x0, [x0]
   a0a30:	b9403001 	ldr	w1, [x0, #48]
   a0a34:	f94017e0 	ldr	x0, [sp, #40]
   a0a38:	b9003001 	str	w1, [x0, #48]
   a0a3c:	b00000e0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a0a40:	9105a000 	add	x0, x0, #0x168
   a0a44:	f9400000 	ldr	x0, [x0]
   a0a48:	b9404001 	ldr	w1, [x0, #64]
   a0a4c:	f94017e0 	ldr	x0, [sp, #40]
   a0a50:	b9004001 	str	w1, [x0, #64]
   a0a54:	b00000e0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a0a58:	9105a000 	add	x0, x0, #0x168
   a0a5c:	f9400000 	ldr	x0, [x0]
   a0a60:	39414001 	ldrb	w1, [x0, #80]
   a0a64:	f94017e0 	ldr	x0, [sp, #40]
   a0a68:	39014001 	strb	w1, [x0, #80]
   a0a6c:	b00000e0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a0a70:	9105a000 	add	x0, x0, #0x168
   a0a74:	f9400000 	ldr	x0, [x0]
   a0a78:	b9406001 	ldr	w1, [x0, #96]
   a0a7c:	f94017e0 	ldr	x0, [sp, #40]
   a0a80:	b9006001 	str	w1, [x0, #96]
   a0a84:	b00000e0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a0a88:	9105a000 	add	x0, x0, #0x168
   a0a8c:	f9400000 	ldr	x0, [x0]
   a0a90:	f9404001 	ldr	x1, [x0, #128]
   a0a94:	f94017e0 	ldr	x0, [sp, #40]
   a0a98:	f9004001 	str	x1, [x0, #128]
   a0a9c:	140000f3 	b	a0e68 <CMachineInfo::CMachineInfo()+0x508>
   a0aa0:	b00000e0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a0aa4:	9105a000 	add	x0, x0, #0x168
   a0aa8:	f94017e1 	ldr	x1, [sp, #40]
   a0aac:	f9000001 	str	x1, [x0]
   a0ab0:	f94017e0 	ldr	x0, [sp, #40]
   a0ab4:	97ffff8f 	bl	a08f0 <CMachineInfo::FetchDTB()>
   a0ab8:	910163e0 	add	x0, sp, #0x58
   a0abc:	52800001 	mov	w1, #0x0                   	// #0
   a0ac0:	97fff4c4 	bl	9ddd0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   a0ac4:	910123e1 	add	x1, sp, #0x48
   a0ac8:	910163e0 	add	x0, sp, #0x58
   a0acc:	52800004 	mov	w4, #0x0                   	// #0
   a0ad0:	52800203 	mov	w3, #0x10                  	// #16
   a0ad4:	aa0103e2 	mov	x2, x1
   a0ad8:	52800021 	mov	w1, #0x1                   	// #1
   a0adc:	72a000c1 	movk	w1, #0x6, lsl #16
   a0ae0:	97fff51c 	bl	9df50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a0ae4:	12001c00 	and	w0, w0, #0xff
   a0ae8:	7100001f 	cmp	w0, #0x0
   a0aec:	540000a0 	b.eq	a0b00 <CMachineInfo::CMachineInfo()+0x1a0>  // b.none
   a0af0:	b94057e0 	ldr	w0, [sp, #84]
   a0af4:	12003c01 	and	w1, w0, #0xffff
   a0af8:	f94017e0 	ldr	x0, [sp, #40]
   a0afc:	7900e001 	strh	w1, [x0, #112]
   a0b00:	9100e3e1 	add	x1, sp, #0x38
   a0b04:	910163e0 	add	x0, sp, #0x58
   a0b08:	52800004 	mov	w4, #0x0                   	// #0
   a0b0c:	52800203 	mov	w3, #0x10                  	// #16
   a0b10:	aa0103e2 	mov	x2, x1
   a0b14:	52800041 	mov	w1, #0x2                   	// #2
   a0b18:	72a00021 	movk	w1, #0x1, lsl #16
   a0b1c:	97fff50d 	bl	9df50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a0b20:	12001c00 	and	w0, w0, #0xff
   a0b24:	52000000 	eor	w0, w0, #0x1
   a0b28:	12001c00 	and	w0, w0, #0xff
   a0b2c:	7100001f 	cmp	w0, #0x0
   a0b30:	54000500 	b.eq	a0bd0 <CMachineInfo::CMachineInfo()+0x270>  // b.none
   a0b34:	f94017e0 	ldr	x0, [sp, #40]
   a0b38:	f9404000 	ldr	x0, [x0, #128]
   a0b3c:	f100001f 	cmp	x0, #0x0
   a0b40:	540002e0 	b.eq	a0b9c <CMachineInfo::CMachineInfo()+0x23c>  // b.none
   a0b44:	f94017e0 	ldr	x0, [sp, #40]
   a0b48:	f9404003 	ldr	x3, [x0, #128]
   a0b4c:	d2800002 	mov	x2, #0x0                   	// #0
   a0b50:	d00000c0 	adrp	x0, ba000 <CursorSymbol+0x188>
   a0b54:	91122001 	add	x1, x0, #0x488
   a0b58:	aa0303e0 	mov	x0, x3
   a0b5c:	94002bd9 	bl	abac0 <CDeviceTreeBlob::FindNode(char const*, TDeviceTreeNode const*) const>
   a0b60:	f90037e0 	str	x0, [sp, #104]
   a0b64:	f94037e0 	ldr	x0, [sp, #104]
   a0b68:	f100001f 	cmp	x0, #0x0
   a0b6c:	54000180 	b.eq	a0b9c <CMachineInfo::CMachineInfo()+0x23c>  // b.none
   a0b70:	f94017e0 	ldr	x0, [sp, #40]
   a0b74:	f9404003 	ldr	x3, [x0, #128]
   a0b78:	d00000c0 	adrp	x0, ba000 <CursorSymbol+0x188>
   a0b7c:	91124002 	add	x2, x0, #0x490
   a0b80:	f94037e1 	ldr	x1, [sp, #104]
   a0b84:	aa0303e0 	mov	x0, x3
   a0b88:	94002bd2 	bl	abad0 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const>
   a0b8c:	f9003fe0 	str	x0, [sp, #120]
   a0b90:	f9403fe0 	ldr	x0, [sp, #120]
   a0b94:	f100001f 	cmp	x0, #0x0
   a0b98:	54000061 	b.ne	a0ba4 <CMachineInfo::CMachineInfo()+0x244>  // b.any
   a0b9c:	52800020 	mov	w0, #0x1                   	// #1
   a0ba0:	14000002 	b	a0ba8 <CMachineInfo::CMachineInfo()+0x248>
   a0ba4:	52800000 	mov	w0, #0x0                   	// #0
   a0ba8:	7100001f 	cmp	w0, #0x0
   a0bac:	54000060 	b.eq	a0bb8 <CMachineInfo::CMachineInfo()+0x258>  // b.none
   a0bb0:	52800013 	mov	w19, #0x0                   	// #0
   a0bb4:	140000aa 	b	a0e5c <CMachineInfo::CMachineInfo()+0x4fc>
   a0bb8:	f94017e0 	ldr	x0, [sp, #40]
   a0bbc:	f9404000 	ldr	x0, [x0, #128]
   a0bc0:	52800002 	mov	w2, #0x0                   	// #0
   a0bc4:	f9403fe1 	ldr	x1, [sp, #120]
   a0bc8:	94002c72 	bl	abd90 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
   a0bcc:	b90047e0 	str	w0, [sp, #68]
   a0bd0:	b94047e1 	ldr	w1, [sp, #68]
   a0bd4:	f94017e0 	ldr	x0, [sp, #40]
   a0bd8:	b9000001 	str	w1, [x0]
   a0bdc:	f94017e0 	ldr	x0, [sp, #40]
   a0be0:	b9400000 	ldr	w0, [x0]
   a0be4:	12090000 	and	w0, w0, #0x800000
   a0be8:	7100001f 	cmp	w0, #0x0
   a0bec:	54000ca0 	b.eq	a0d80 <CMachineInfo::CMachineInfo()+0x420>  // b.none
   a0bf0:	f94017e0 	ldr	x0, [sp, #40]
   a0bf4:	b9400000 	ldr	w0, [x0]
   a0bf8:	53047c00 	lsr	w0, w0, #4
   a0bfc:	12001c00 	and	w0, w0, #0xff
   a0c00:	b90067e0 	str	w0, [sp, #100]
   a0c04:	b90077ff 	str	wzr, [sp, #116]
   a0c08:	14000010 	b	a0c48 <CMachineInfo::CMachineInfo()+0x2e8>
   a0c0c:	d00000c0 	adrp	x0, ba000 <CursorSymbol+0x188>
   a0c10:	91128002 	add	x2, x0, #0x4a0
   a0c14:	b94077e1 	ldr	w1, [sp, #116]
   a0c18:	aa0103e0 	mov	x0, x1
   a0c1c:	d37ff800 	lsl	x0, x0, #1
   a0c20:	8b010000 	add	x0, x0, x1
   a0c24:	d37ef400 	lsl	x0, x0, #2
   a0c28:	8b000040 	add	x0, x2, x0
   a0c2c:	b9400000 	ldr	w0, [x0]
   a0c30:	b94067e1 	ldr	w1, [sp, #100]
   a0c34:	6b00003f 	cmp	w1, w0
   a0c38:	54000100 	b.eq	a0c58 <CMachineInfo::CMachineInfo()+0x2f8>  // b.none
   a0c3c:	b94077e0 	ldr	w0, [sp, #116]
   a0c40:	11000400 	add	w0, w0, #0x1
   a0c44:	b90077e0 	str	w0, [sp, #116]
   a0c48:	b94077e0 	ldr	w0, [sp, #116]
   a0c4c:	7100481f 	cmp	w0, #0x12
   a0c50:	54fffde9 	b.ls	a0c0c <CMachineInfo::CMachineInfo()+0x2ac>  // b.plast
   a0c54:	14000002 	b	a0c5c <CMachineInfo::CMachineInfo()+0x2fc>
   a0c58:	d503201f 	nop
   a0c5c:	b94077e0 	ldr	w0, [sp, #116]
   a0c60:	7100481f 	cmp	w0, #0x12
   a0c64:	54000069 	b.ls	a0c70 <CMachineInfo::CMachineInfo()+0x310>  // b.plast
   a0c68:	52800013 	mov	w19, #0x0                   	// #0
   a0c6c:	1400007c 	b	a0e5c <CMachineInfo::CMachineInfo()+0x4fc>
   a0c70:	d00000c0 	adrp	x0, ba000 <CursorSymbol+0x188>
   a0c74:	91128002 	add	x2, x0, #0x4a0
   a0c78:	b94077e1 	ldr	w1, [sp, #116]
   a0c7c:	aa0103e0 	mov	x0, x1
   a0c80:	d37ff800 	lsl	x0, x0, #1
   a0c84:	8b010000 	add	x0, x0, x1
   a0c88:	d37ef400 	lsl	x0, x0, #2
   a0c8c:	8b000040 	add	x0, x2, x0
   a0c90:	b9400401 	ldr	w1, [x0, #4]
   a0c94:	f94017e0 	ldr	x0, [sp, #40]
   a0c98:	b9001001 	str	w1, [x0, #16]
   a0c9c:	d00000c0 	adrp	x0, ba000 <CursorSymbol+0x188>
   a0ca0:	91128002 	add	x2, x0, #0x4a0
   a0ca4:	b94077e1 	ldr	w1, [sp, #116]
   a0ca8:	aa0103e0 	mov	x0, x1
   a0cac:	d37ff800 	lsl	x0, x0, #1
   a0cb0:	8b010000 	add	x0, x0, x1
   a0cb4:	d37ef400 	lsl	x0, x0, #2
   a0cb8:	8b000040 	add	x0, x2, x0
   a0cbc:	b9400801 	ldr	w1, [x0, #8]
   a0cc0:	f94017e0 	ldr	x0, [sp, #40]
   a0cc4:	b9002001 	str	w1, [x0, #32]
   a0cc8:	f94017e0 	ldr	x0, [sp, #40]
   a0ccc:	b9400000 	ldr	w0, [x0]
   a0cd0:	12000c00 	and	w0, w0, #0xf
   a0cd4:	11000401 	add	w1, w0, #0x1
   a0cd8:	f94017e0 	ldr	x0, [sp, #40]
   a0cdc:	b9003001 	str	w1, [x0, #48]
   a0ce0:	f94017e0 	ldr	x0, [sp, #40]
   a0ce4:	b9400000 	ldr	w0, [x0]
   a0ce8:	530c7c00 	lsr	w0, w0, #12
   a0cec:	12000c01 	and	w1, w0, #0xf
   a0cf0:	f94017e0 	ldr	x0, [sp, #40]
   a0cf4:	b9004001 	str	w1, [x0, #64]
   a0cf8:	f94017e0 	ldr	x0, [sp, #40]
   a0cfc:	b9400000 	ldr	w0, [x0]
   a0d00:	53147c00 	lsr	w0, w0, #20
   a0d04:	12000800 	and	w0, w0, #0x7
   a0d08:	52802001 	mov	w1, #0x100                 	// #256
   a0d0c:	1ac02020 	lsl	w0, w1, w0
   a0d10:	2a0003e1 	mov	w1, w0
   a0d14:	f94017e0 	ldr	x0, [sp, #40]
   a0d18:	b9006001 	str	w1, [x0, #96]
   a0d1c:	f94017e0 	ldr	x0, [sp, #40]
   a0d20:	b9404000 	ldr	w0, [x0, #64]
   a0d24:	7100101f 	cmp	w0, #0x4
   a0d28:	5400008d 	b.le	a0d38 <CMachineInfo::CMachineInfo()+0x3d8>
   a0d2c:	f94017e0 	ldr	x0, [sp, #40]
   a0d30:	528000a1 	mov	w1, #0x5                   	// #5
   a0d34:	b9004001 	str	w1, [x0, #64]
   a0d38:	f94017e0 	ldr	x0, [sp, #40]
   a0d3c:	b9401000 	ldr	w0, [x0, #16]
   a0d40:	71000c1f 	cmp	w0, #0x3
   a0d44:	540008a1 	b.ne	a0e58 <CMachineInfo::CMachineInfo()+0x4f8>  // b.any
   a0d48:	f94017e0 	ldr	x0, [sp, #40]
   a0d4c:	b9406000 	ldr	w0, [x0, #96]
   a0d50:	7104001f 	cmp	w0, #0x100
   a0d54:	54000821 	b.ne	a0e58 <CMachineInfo::CMachineInfo()+0x4f8>  // b.any
   a0d58:	f94017e0 	ldr	x0, [sp, #40]
   a0d5c:	b9403000 	ldr	w0, [x0, #48]
   a0d60:	7100041f 	cmp	w0, #0x1
   a0d64:	54000061 	b.ne	a0d70 <CMachineInfo::CMachineInfo()+0x410>  // b.any
   a0d68:	52800020 	mov	w0, #0x1                   	// #1
   a0d6c:	14000002 	b	a0d74 <CMachineInfo::CMachineInfo()+0x414>
   a0d70:	52800040 	mov	w0, #0x2                   	// #2
   a0d74:	f94017e1 	ldr	x1, [sp, #40]
   a0d78:	b9001020 	str	w0, [x1, #16]
   a0d7c:	14000037 	b	a0e58 <CMachineInfo::CMachineInfo()+0x4f8>
   a0d80:	b90073ff 	str	wzr, [sp, #112]
   a0d84:	1400000e 	b	a0dbc <CMachineInfo::CMachineInfo()+0x45c>
   a0d88:	d00000c0 	adrp	x0, ba000 <CursorSymbol+0x188>
   a0d8c:	91162001 	add	x1, x0, #0x588
   a0d90:	b94073e0 	ldr	w0, [sp, #112]
   a0d94:	d37cec00 	lsl	x0, x0, #4
   a0d98:	8b000020 	add	x0, x1, x0
   a0d9c:	b9400001 	ldr	w1, [x0]
   a0da0:	f94017e0 	ldr	x0, [sp, #40]
   a0da4:	b9400000 	ldr	w0, [x0]
   a0da8:	6b00003f 	cmp	w1, w0
   a0dac:	54000100 	b.eq	a0dcc <CMachineInfo::CMachineInfo()+0x46c>  // b.none
   a0db0:	b94073e0 	ldr	w0, [sp, #112]
   a0db4:	11000400 	add	w0, w0, #0x1
   a0db8:	b90073e0 	str	w0, [sp, #112]
   a0dbc:	b94073e0 	ldr	w0, [sp, #112]
   a0dc0:	7100401f 	cmp	w0, #0x10
   a0dc4:	54fffe29 	b.ls	a0d88 <CMachineInfo::CMachineInfo()+0x428>  // b.plast
   a0dc8:	14000002 	b	a0dd0 <CMachineInfo::CMachineInfo()+0x470>
   a0dcc:	d503201f 	nop
   a0dd0:	b94073e0 	ldr	w0, [sp, #112]
   a0dd4:	7100401f 	cmp	w0, #0x10
   a0dd8:	54000069 	b.ls	a0de4 <CMachineInfo::CMachineInfo()+0x484>  // b.plast
   a0ddc:	52800013 	mov	w19, #0x0                   	// #0
   a0de0:	1400001f 	b	a0e5c <CMachineInfo::CMachineInfo()+0x4fc>
   a0de4:	d00000c0 	adrp	x0, ba000 <CursorSymbol+0x188>
   a0de8:	91162001 	add	x1, x0, #0x588
   a0dec:	b94073e0 	ldr	w0, [sp, #112]
   a0df0:	d37cec00 	lsl	x0, x0, #4
   a0df4:	8b000020 	add	x0, x1, x0
   a0df8:	b9400401 	ldr	w1, [x0, #4]
   a0dfc:	f94017e0 	ldr	x0, [sp, #40]
   a0e00:	b9001001 	str	w1, [x0, #16]
   a0e04:	f94017e0 	ldr	x0, [sp, #40]
   a0e08:	52800021 	mov	w1, #0x1                   	// #1
   a0e0c:	b9002001 	str	w1, [x0, #32]
   a0e10:	d00000c0 	adrp	x0, ba000 <CursorSymbol+0x188>
   a0e14:	91162001 	add	x1, x0, #0x588
   a0e18:	b94073e0 	ldr	w0, [sp, #112]
   a0e1c:	d37cec00 	lsl	x0, x0, #4
   a0e20:	8b000020 	add	x0, x1, x0
   a0e24:	b9400801 	ldr	w1, [x0, #8]
   a0e28:	f94017e0 	ldr	x0, [sp, #40]
   a0e2c:	b9003001 	str	w1, [x0, #48]
   a0e30:	f94017e0 	ldr	x0, [sp, #40]
   a0e34:	b900401f 	str	wzr, [x0, #64]
   a0e38:	d00000c0 	adrp	x0, ba000 <CursorSymbol+0x188>
   a0e3c:	91162001 	add	x1, x0, #0x588
   a0e40:	b94073e0 	ldr	w0, [sp, #112]
   a0e44:	d37cec00 	lsl	x0, x0, #4
   a0e48:	8b000020 	add	x0, x1, x0
   a0e4c:	b9400c01 	ldr	w1, [x0, #12]
   a0e50:	f94017e0 	ldr	x0, [sp, #40]
   a0e54:	b9006001 	str	w1, [x0, #96]
   a0e58:	52800033 	mov	w19, #0x1                   	// #1
   a0e5c:	910163e0 	add	x0, sp, #0x58
   a0e60:	97fff3e0 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   a0e64:	7100067f 	cmp	w19, #0x1
   a0e68:	f9400bf3 	ldr	x19, [sp, #16]
   a0e6c:	a8c87bfd 	ldp	x29, x30, [sp], #128
   a0e70:	d65f03c0 	ret
   a0e74:	d503201f 	nop
   a0e78:	d503201f 	nop
   a0e7c:	d503201f 	nop

00000000000a0e80 <CMachineInfo::GetDTB() const>:
   a0e80:	f9404000 	ldr	x0, [x0, #128]
   a0e84:	d65f03c0 	ret
   a0e88:	d503201f 	nop
   a0e8c:	d503201f 	nop

00000000000a0e90 <CMachineInfo::GetPCIeDMAMemory() const>:
   a0e90:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a0e94:	b00000e1 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   a0e98:	910003fd 	mov	x29, sp
   a0e9c:	a90153f3 	stp	x19, x20, [sp, #16]
   a0ea0:	aa0003f4 	mov	x20, x0
   a0ea4:	f940b433 	ldr	x19, [x1, #360]
   a0ea8:	a9025bf5 	stp	x21, x22, [sp, #32]
   a0eac:	aa0803f5 	mov	x21, x8
   a0eb0:	b40000d3 	cbz	x19, a0ec8 <CMachineInfo::GetPCIeDMAMemory() const+0x38>
   a0eb4:	d503201f 	nop
   a0eb8:	eb14027f 	cmp	x19, x20
   a0ebc:	54000140 	b.eq	a0ee4 <CMachineInfo::GetPCIeDMAMemory() const+0x54>  // b.none
   a0ec0:	aa1303f4 	mov	x20, x19
   a0ec4:	b5ffffb3 	cbnz	x19, a0eb8 <CMachineInfo::GetPCIeDMAMemory() const+0x28>
   a0ec8:	d00000c0 	adrp	x0, ba000 <CursorSymbol+0x188>
   a0ecc:	911a6000 	add	x0, x0, #0x698
   a0ed0:	f9001bf7 	str	x23, [sp, #48]
   a0ed4:	9104e001 	add	x1, x0, #0x138
   a0ed8:	52805582 	mov	w2, #0x2ac                 	// #684
   a0edc:	91054000 	add	x0, x0, #0x150
   a0ee0:	97fff398 	bl	9dd40 <assertion_failed>
   a0ee4:	f9404260 	ldr	x0, [x19, #128]
   a0ee8:	b4000280 	cbz	x0, a0f38 <CMachineInfo::GetPCIeDMAMemory() const+0xa8>
   a0eec:	d00000d6 	adrp	x22, ba000 <CursorSymbol+0x188>
   a0ef0:	911a62d6 	add	x22, x22, #0x698
   a0ef4:	9106e2c1 	add	x1, x22, #0x1b8
   a0ef8:	d2800002 	mov	x2, #0x0                   	// #0
   a0efc:	94002af1 	bl	abac0 <CDeviceTreeBlob::FindNode(char const*, TDeviceTreeNode const*) const>
   a0f00:	aa0003e1 	mov	x1, x0
   a0f04:	b40001a0 	cbz	x0, a0f38 <CMachineInfo::GetPCIeDMAMemory() const+0xa8>
   a0f08:	910742c2 	add	x2, x22, #0x1d0
   a0f0c:	f9404260 	ldr	x0, [x19, #128]
   a0f10:	f9001bf7 	str	x23, [sp, #48]
   a0f14:	94002aef 	bl	abad0 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const>
   a0f18:	aa0003f7 	mov	x23, x0
   a0f1c:	b40000c0 	cbz	x0, a0f34 <CMachineInfo::GetPCIeDMAMemory() const+0xa4>
   a0f20:	aa0003e1 	mov	x1, x0
   a0f24:	f9404260 	ldr	x0, [x19, #128]
   a0f28:	94002b72 	bl	abcf0 <CDeviceTreeBlob::GetPropertyValueLength(TDeviceTreeProperty const*) const>
   a0f2c:	f100701f 	cmp	x0, #0x1c
   a0f30:	540002c0 	b.eq	a0f88 <CMachineInfo::GetPCIeDMAMemory() const+0xf8>  // b.none
   a0f34:	f9401bf7 	ldr	x23, [sp, #48]
   a0f38:	b9401281 	ldr	w1, [x20, #16]
   a0f3c:	b9406280 	ldr	w0, [x20, #96]
   a0f40:	7100403f 	cmp	w1, #0x10
   a0f44:	d36c7c01 	ubfiz	x1, x0, #20, #32
   a0f48:	54000160 	b.eq	a0f74 <CMachineInfo::GetPCIeDMAMemory() const+0xe4>  // b.none
   a0f4c:	713ffc1f 	cmp	w0, #0xfff
   a0f50:	9a9f97f4 	cset	x20, hi	// hi = pmore
   a0f54:	d35e7694 	lsl	x20, x20, #34
   a0f58:	d2800016 	mov	x22, #0x0                   	// #0
   a0f5c:	a9005ab4 	stp	x20, x22, [x21]
   a0f60:	f9000aa1 	str	x1, [x21, #16]
   a0f64:	a94153f3 	ldp	x19, x20, [sp, #16]
   a0f68:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a0f6c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a0f70:	d65f03c0 	ret
   a0f74:	b9403282 	ldr	w2, [x20, #48]
   a0f78:	d2800014 	mov	x20, #0x0                   	// #0
   a0f7c:	7100105f 	cmp	w2, #0x4
   a0f80:	54fffec9 	b.ls	a0f58 <CMachineInfo::GetPCIeDMAMemory() const+0xc8>  // b.plast
   a0f84:	17fffff2 	b	a0f4c <CMachineInfo::GetPCIeDMAMemory() const+0xbc>
   a0f88:	aa1703e1 	mov	x1, x23
   a0f8c:	52800022 	mov	w2, #0x1                   	// #1
   a0f90:	f9404260 	ldr	x0, [x19, #128]
   a0f94:	94002b7f 	bl	abd90 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
   a0f98:	aa1703e1 	mov	x1, x23
   a0f9c:	2a0003f4 	mov	w20, w0
   a0fa0:	f9404260 	ldr	x0, [x19, #128]
   a0fa4:	52800042 	mov	w2, #0x2                   	// #2
   a0fa8:	94002b7a 	bl	abd90 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
   a0fac:	2a0003e3 	mov	w3, w0
   a0fb0:	aa1703e1 	mov	x1, x23
   a0fb4:	f9404260 	ldr	x0, [x19, #128]
   a0fb8:	52800062 	mov	w2, #0x3                   	// #3
   a0fbc:	aa148074 	orr	x20, x3, x20, lsl #32
   a0fc0:	94002b74 	bl	abd90 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
   a0fc4:	aa1703e1 	mov	x1, x23
   a0fc8:	2a0003f6 	mov	w22, w0
   a0fcc:	f9404260 	ldr	x0, [x19, #128]
   a0fd0:	52800082 	mov	w2, #0x4                   	// #4
   a0fd4:	94002b6f 	bl	abd90 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
   a0fd8:	2a0003e3 	mov	w3, w0
   a0fdc:	aa1703e1 	mov	x1, x23
   a0fe0:	f9404260 	ldr	x0, [x19, #128]
   a0fe4:	528000a2 	mov	w2, #0x5                   	// #5
   a0fe8:	aa168076 	orr	x22, x3, x22, lsl #32
   a0fec:	94002b69 	bl	abd90 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
   a0ff0:	2a0003e3 	mov	w3, w0
   a0ff4:	aa1703e1 	mov	x1, x23
   a0ff8:	f9404260 	ldr	x0, [x19, #128]
   a0ffc:	528000c2 	mov	w2, #0x6                   	// #6
   a1000:	2a0303f3 	mov	w19, w3
   a1004:	94002b63 	bl	abd90 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
   a1008:	2a0003e0 	mov	w0, w0
   a100c:	f9401bf7 	ldr	x23, [sp, #48]
   a1010:	aa138001 	orr	x1, x0, x19, lsl #32
   a1014:	17ffffd2 	b	a0f5c <CMachineInfo::GetPCIeDMAMemory() const+0xcc>
   a1018:	d503201f 	nop
   a101c:	d503201f 	nop

00000000000a1020 <CMachineInfo::Get()>:
   a1020:	900000e0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a1024:	f940b400 	ldr	x0, [x0, #360]
   a1028:	b4000040 	cbz	x0, a1030 <CMachineInfo::Get()+0x10>
   a102c:	d65f03c0 	ret
   a1030:	b00000c0 	adrp	x0, ba000 <CursorSymbol+0x188>
   a1034:	911a6000 	add	x0, x0, #0x698
   a1038:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a103c:	9104e001 	add	x1, x0, #0x138
   a1040:	910003fd 	mov	x29, sp
   a1044:	91054000 	add	x0, x0, #0x150
   a1048:	52805d62 	mov	w2, #0x2eb                 	// #747
   a104c:	97fff33d 	bl	9dd40 <assertion_failed>

00000000000a1050 <CPtrList::CPtrList()>:
   a1050:	f900001f 	str	xzr, [x0]
   a1054:	d65f03c0 	ret
   a1058:	d503201f 	nop
   a105c:	d503201f 	nop

00000000000a1060 <CPtrList::~CPtrList()>:
   a1060:	f9400000 	ldr	x0, [x0]
   a1064:	b5000040 	cbnz	x0, a106c <CPtrList::~CPtrList()+0xc>
   a1068:	d65f03c0 	ret
   a106c:	900000a1 	adrp	x1, b5000 <_etext+0x4158>
   a1070:	900000a0 	adrp	x0, b5000 <_etext+0x4158>
   a1074:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a1078:	9109a021 	add	x1, x1, #0x268
   a107c:	910003fd 	mov	x29, sp
   a1080:	9109e000 	add	x0, x0, #0x278
   a1084:	52800542 	mov	w2, #0x2a                  	// #42
   a1088:	97fff32e 	bl	9dd40 <assertion_failed>
   a108c:	d503201f 	nop

00000000000a1090 <CPtrList::GetFirst() const>:
   a1090:	f9400000 	ldr	x0, [x0]
   a1094:	d65f03c0 	ret
   a1098:	d503201f 	nop
   a109c:	d503201f 	nop

00000000000a10a0 <CPtrList::GetNext(TPtrListElement*) const>:
   a10a0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a10a4:	910003fd 	mov	x29, sp
   a10a8:	b4000121 	cbz	x1, a10cc <CPtrList::GetNext(TPtrListElement*) const+0x2c>
   a10ac:	5289a860 	mov	w0, #0x4d43                	// #19779
   a10b0:	72aa0980 	movk	w0, #0x504c, lsl #16
   a10b4:	b9400022 	ldr	w2, [x1]
   a10b8:	6b00005f 	cmp	w2, w0
   a10bc:	54000141 	b.ne	a10e4 <CPtrList::GetNext(TPtrListElement*) const+0x44>  // b.any
   a10c0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a10c4:	f9400820 	ldr	x0, [x1, #16]
   a10c8:	d65f03c0 	ret
   a10cc:	900000a1 	adrp	x1, b5000 <_etext+0x4158>
   a10d0:	900000a0 	adrp	x0, b5000 <_etext+0x4158>
   a10d4:	9109a021 	add	x1, x1, #0x268
   a10d8:	91030000 	add	x0, x0, #0xc0
   a10dc:	52800682 	mov	w2, #0x34                  	// #52
   a10e0:	97fff318 	bl	9dd40 <assertion_failed>
   a10e4:	900000a1 	adrp	x1, b5000 <_etext+0x4158>
   a10e8:	900000a0 	adrp	x0, b5000 <_etext+0x4158>
   a10ec:	9109a021 	add	x1, x1, #0x268
   a10f0:	910a2000 	add	x0, x0, #0x288
   a10f4:	528006a2 	mov	w2, #0x35                  	// #53
   a10f8:	97fff312 	bl	9dd40 <assertion_failed>
   a10fc:	d503201f 	nop

00000000000a1100 <CPtrList::GetPtr(TPtrListElement*)>:
   a1100:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a1104:	910003fd 	mov	x29, sp
   a1108:	b4000120 	cbz	x0, a112c <CPtrList::GetPtr(TPtrListElement*)+0x2c>
   a110c:	5289a861 	mov	w1, #0x4d43                	// #19779
   a1110:	72aa0981 	movk	w1, #0x504c, lsl #16
   a1114:	b9400002 	ldr	w2, [x0]
   a1118:	6b01005f 	cmp	w2, w1
   a111c:	54000141 	b.ne	a1144 <CPtrList::GetPtr(TPtrListElement*)+0x44>  // b.any
   a1120:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a1124:	f9400c00 	ldr	x0, [x0, #24]
   a1128:	d65f03c0 	ret
   a112c:	900000a1 	adrp	x1, b5000 <_etext+0x4158>
   a1130:	900000a0 	adrp	x0, b5000 <_etext+0x4158>
   a1134:	9109a021 	add	x1, x1, #0x268
   a1138:	91030000 	add	x0, x0, #0xc0
   a113c:	52800782 	mov	w2, #0x3c                  	// #60
   a1140:	97fff300 	bl	9dd40 <assertion_failed>
   a1144:	900000a1 	adrp	x1, b5000 <_etext+0x4158>
   a1148:	900000a0 	adrp	x0, b5000 <_etext+0x4158>
   a114c:	9109a021 	add	x1, x1, #0x268
   a1150:	910a2000 	add	x0, x0, #0x288
   a1154:	528007a2 	mov	w2, #0x3d                  	// #61
   a1158:	97fff2fa 	bl	9dd40 <assertion_failed>
   a115c:	d503201f 	nop

00000000000a1160 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   a1160:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a1164:	910003fd 	mov	x29, sp
   a1168:	a90153f3 	stp	x19, x20, [sp, #16]
   a116c:	aa0003f4 	mov	x20, x0
   a1170:	d2800400 	mov	x0, #0x20                  	// #32
   a1174:	aa0103f3 	mov	x19, x1
   a1178:	f90013f5 	str	x21, [sp, #32]
   a117c:	aa0203f5 	mov	x21, x2
   a1180:	94001c38 	bl	a8260 <operator new(unsigned long)>
   a1184:	5289a862 	mov	w2, #0x4d43                	// #19779
   a1188:	72aa0982 	movk	w2, #0x504c, lsl #16
   a118c:	f9000c15 	str	x21, [x0, #24]
   a1190:	f9400281 	ldr	x1, [x20]
   a1194:	b9000002 	str	w2, [x0]
   a1198:	b4000341 	cbz	x1, a1200 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
   a119c:	b40003f3 	cbz	x19, a1218 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xb8>
   a11a0:	b9400263 	ldr	w3, [x19]
   a11a4:	6b02007f 	cmp	w3, w2
   a11a8:	54000441 	b.ne	a1230 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>  // b.any
   a11ac:	eb13003f 	cmp	x1, x19
   a11b0:	540001a0 	b.eq	a11e4 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x84>  // b.none
   a11b4:	f9400661 	ldr	x1, [x19, #8]
   a11b8:	a900cc01 	stp	x1, x19, [x0, #8]
   a11bc:	b40000a1 	cbz	x1, a11d0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   a11c0:	b9400022 	ldr	w2, [x1]
   a11c4:	6b03005f 	cmp	w2, w3
   a11c8:	54000401 	b.ne	a1248 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe8>  // b.any
   a11cc:	f9000820 	str	x0, [x1, #16]
   a11d0:	f9000660 	str	x0, [x19, #8]
   a11d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a11d8:	f94013f5 	ldr	x21, [sp, #32]
   a11dc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a11e0:	d65f03c0 	ret
   a11e4:	f9000420 	str	x0, [x1, #8]
   a11e8:	f9000280 	str	x0, [x20]
   a11ec:	a900841f 	stp	xzr, x1, [x0, #8]
   a11f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a11f4:	f94013f5 	ldr	x21, [sp, #32]
   a11f8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a11fc:	d65f03c0 	ret
   a1200:	900000a1 	adrp	x1, b5000 <_etext+0x4158>
   a1204:	900000a0 	adrp	x0, b5000 <_etext+0x4158>
   a1208:	9109a021 	add	x1, x1, #0x268
   a120c:	910ac000 	add	x0, x0, #0x2b0
   a1210:	52800982 	mov	w2, #0x4c                  	// #76
   a1214:	97fff2cb 	bl	9dd40 <assertion_failed>
   a1218:	900000a1 	adrp	x1, b5000 <_etext+0x4158>
   a121c:	900000a0 	adrp	x0, b5000 <_etext+0x4158>
   a1220:	9109a021 	add	x1, x1, #0x268
   a1224:	910b0000 	add	x0, x0, #0x2c0
   a1228:	528009a2 	mov	w2, #0x4d                  	// #77
   a122c:	97fff2c5 	bl	9dd40 <assertion_failed>
   a1230:	900000a1 	adrp	x1, b5000 <_etext+0x4158>
   a1234:	900000a0 	adrp	x0, b5000 <_etext+0x4158>
   a1238:	9109a021 	add	x1, x1, #0x268
   a123c:	910b4000 	add	x0, x0, #0x2d0
   a1240:	528009c2 	mov	w2, #0x4e                  	// #78
   a1244:	97fff2bf 	bl	9dd40 <assertion_failed>
   a1248:	900000a1 	adrp	x1, b5000 <_etext+0x4158>
   a124c:	900000a0 	adrp	x0, b5000 <_etext+0x4158>
   a1250:	9109a021 	add	x1, x1, #0x268
   a1254:	910be000 	add	x0, x0, #0x2f8
   a1258:	52800c02 	mov	w2, #0x60                  	// #96
   a125c:	97fff2b9 	bl	9dd40 <assertion_failed>

00000000000a1260 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   a1260:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a1264:	910003fd 	mov	x29, sp
   a1268:	a90153f3 	stp	x19, x20, [sp, #16]
   a126c:	aa0003f4 	mov	x20, x0
   a1270:	d2800400 	mov	x0, #0x20                  	// #32
   a1274:	aa0103f3 	mov	x19, x1
   a1278:	f90013f5 	str	x21, [sp, #32]
   a127c:	aa0203f5 	mov	x21, x2
   a1280:	94001bf8 	bl	a8260 <operator new(unsigned long)>
   a1284:	5289a861 	mov	w1, #0x4d43                	// #19779
   a1288:	72aa0981 	movk	w1, #0x504c, lsl #16
   a128c:	f9000c15 	str	x21, [x0, #24]
   a1290:	b9000001 	str	w1, [x0]
   a1294:	b4000253 	cbz	x19, a12dc <CPtrList::InsertAfter(TPtrListElement*, void*)+0x7c>
   a1298:	f9400282 	ldr	x2, [x20]
   a129c:	b4000302 	cbz	x2, a12fc <CPtrList::InsertAfter(TPtrListElement*, void*)+0x9c>
   a12a0:	b9400262 	ldr	w2, [x19]
   a12a4:	6b01005f 	cmp	w2, w1
   a12a8:	54000361 	b.ne	a1314 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb4>  // b.any
   a12ac:	f9400a61 	ldr	x1, [x19, #16]
   a12b0:	a9008413 	stp	x19, x1, [x0, #8]
   a12b4:	b40000a1 	cbz	x1, a12c8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x68>
   a12b8:	b9400023 	ldr	w3, [x1]
   a12bc:	6b02007f 	cmp	w3, w2
   a12c0:	54000361 	b.ne	a132c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>  // b.any
   a12c4:	f9000420 	str	x0, [x1, #8]
   a12c8:	f9000a60 	str	x0, [x19, #16]
   a12cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   a12d0:	f94013f5 	ldr	x21, [sp, #32]
   a12d4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a12d8:	d65f03c0 	ret
   a12dc:	f9400281 	ldr	x1, [x20]
   a12e0:	b5000321 	cbnz	x1, a1344 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   a12e4:	f9000280 	str	x0, [x20]
   a12e8:	a900fc1f 	stp	xzr, xzr, [x0, #8]
   a12ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   a12f0:	f94013f5 	ldr	x21, [sp, #32]
   a12f4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a12f8:	d65f03c0 	ret
   a12fc:	900000a1 	adrp	x1, b5000 <_etext+0x4158>
   a1300:	900000a0 	adrp	x0, b5000 <_etext+0x4158>
   a1304:	9109a021 	add	x1, x1, #0x268
   a1308:	910ac000 	add	x0, x0, #0x2b0
   a130c:	52800fa2 	mov	w2, #0x7d                  	// #125
   a1310:	97fff28c 	bl	9dd40 <assertion_failed>
   a1314:	900000a1 	adrp	x1, b5000 <_etext+0x4158>
   a1318:	900000a0 	adrp	x0, b5000 <_etext+0x4158>
   a131c:	9109a021 	add	x1, x1, #0x268
   a1320:	910c8000 	add	x0, x0, #0x320
   a1324:	52800fc2 	mov	w2, #0x7e                  	// #126
   a1328:	97fff286 	bl	9dd40 <assertion_failed>
   a132c:	900000a1 	adrp	x1, b5000 <_etext+0x4158>
   a1330:	900000a0 	adrp	x0, b5000 <_etext+0x4158>
   a1334:	9109a021 	add	x1, x1, #0x268
   a1338:	910d2000 	add	x0, x0, #0x348
   a133c:	528010a2 	mov	w2, #0x85                  	// #133
   a1340:	97fff280 	bl	9dd40 <assertion_failed>
   a1344:	900000a1 	adrp	x1, b5000 <_etext+0x4158>
   a1348:	900000a0 	adrp	x0, b5000 <_etext+0x4158>
   a134c:	9109a021 	add	x1, x1, #0x268
   a1350:	9109e000 	add	x0, x0, #0x278
   a1354:	52800e82 	mov	w2, #0x74                  	// #116
   a1358:	97fff27a 	bl	9dd40 <assertion_failed>
   a135c:	d503201f 	nop

00000000000a1360 <CPtrList::Remove(TPtrListElement*)>:
   a1360:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a1364:	910003fd 	mov	x29, sp
   a1368:	b4000541 	cbz	x1, a1410 <CPtrList::Remove(TPtrListElement*)+0xb0>
   a136c:	5289a863 	mov	w3, #0x4d43                	// #19779
   a1370:	72aa0983 	movk	w3, #0x504c, lsl #16
   a1374:	b9400022 	ldr	w2, [x1]
   a1378:	6b03005f 	cmp	w2, w3
   a137c:	54000561 	b.ne	a1428 <CPtrList::Remove(TPtrListElement*)+0xc8>  // b.any
   a1380:	f9400003 	ldr	x3, [x0]
   a1384:	eb01007f 	cmp	x3, x1
   a1388:	54000220 	b.eq	a13cc <CPtrList::Remove(TPtrListElement*)+0x6c>  // b.none
   a138c:	f9400420 	ldr	x0, [x1, #8]
   a1390:	b4000580 	cbz	x0, a1440 <CPtrList::Remove(TPtrListElement*)+0xe0>
   a1394:	b9400003 	ldr	w3, [x0]
   a1398:	6b02007f 	cmp	w3, w2
   a139c:	540002e1 	b.ne	a13f8 <CPtrList::Remove(TPtrListElement*)+0x98>  // b.any
   a13a0:	f9400822 	ldr	x2, [x1, #16]
   a13a4:	f9000802 	str	x2, [x0, #16]
   a13a8:	b40000a2 	cbz	x2, a13bc <CPtrList::Remove(TPtrListElement*)+0x5c>
   a13ac:	b9400044 	ldr	w4, [x2]
   a13b0:	6b03009f 	cmp	w4, w3
   a13b4:	54000521 	b.ne	a1458 <CPtrList::Remove(TPtrListElement*)+0xf8>  // b.any
   a13b8:	f9000440 	str	x0, [x2, #8]
   a13bc:	aa0103e0 	mov	x0, x1
   a13c0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a13c4:	d2800401 	mov	x1, #0x20                  	// #32
   a13c8:	14001bce 	b	a8300 <operator delete(void*, unsigned long)>
   a13cc:	f9400863 	ldr	x3, [x3, #16]
   a13d0:	f9000003 	str	x3, [x0]
   a13d4:	b4ffff43 	cbz	x3, a13bc <CPtrList::Remove(TPtrListElement*)+0x5c>
   a13d8:	b9400060 	ldr	w0, [x3]
   a13dc:	6b02001f 	cmp	w0, w2
   a13e0:	54000481 	b.ne	a1470 <CPtrList::Remove(TPtrListElement*)+0x110>  // b.any
   a13e4:	aa0103e0 	mov	x0, x1
   a13e8:	d2800401 	mov	x1, #0x20                  	// #32
   a13ec:	f900047f 	str	xzr, [x3, #8]
   a13f0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a13f4:	14001bc3 	b	a8300 <operator delete(void*, unsigned long)>
   a13f8:	900000a1 	adrp	x1, b5000 <_etext+0x4158>
   a13fc:	900000a0 	adrp	x0, b5000 <_etext+0x4158>
   a1400:	9109a021 	add	x1, x1, #0x268
   a1404:	910f0000 	add	x0, x0, #0x3c0
   a1408:	528013e2 	mov	w2, #0x9f                  	// #159
   a140c:	97fff24d 	bl	9dd40 <assertion_failed>
   a1410:	900000a1 	adrp	x1, b5000 <_etext+0x4158>
   a1414:	900000a0 	adrp	x0, b5000 <_etext+0x4158>
   a1418:	9109a021 	add	x1, x1, #0x268
   a141c:	91030000 	add	x0, x0, #0xc0
   a1420:	528011e2 	mov	w2, #0x8f                  	// #143
   a1424:	97fff247 	bl	9dd40 <assertion_failed>
   a1428:	900000a1 	adrp	x1, b5000 <_etext+0x4158>
   a142c:	900000a0 	adrp	x0, b5000 <_etext+0x4158>
   a1430:	9109a021 	add	x1, x1, #0x268
   a1434:	910a2000 	add	x0, x0, #0x288
   a1438:	52801202 	mov	w2, #0x90                  	// #144
   a143c:	97fff241 	bl	9dd40 <assertion_failed>
   a1440:	900000a1 	adrp	x1, b5000 <_etext+0x4158>
   a1444:	900000a0 	adrp	x0, b5000 <_etext+0x4158>
   a1448:	9109a021 	add	x1, x1, #0x268
   a144c:	910ea000 	add	x0, x0, #0x3a8
   a1450:	528013c2 	mov	w2, #0x9e                  	// #158
   a1454:	97fff23b 	bl	9dd40 <assertion_failed>
   a1458:	900000a1 	adrp	x1, b5000 <_etext+0x4158>
   a145c:	900000a0 	adrp	x0, b5000 <_etext+0x4158>
   a1460:	9109a021 	add	x1, x1, #0x268
   a1464:	910de000 	add	x0, x0, #0x378
   a1468:	52801482 	mov	w2, #0xa4                  	// #164
   a146c:	97fff235 	bl	9dd40 <assertion_failed>
   a1470:	900000a1 	adrp	x1, b5000 <_etext+0x4158>
   a1474:	900000a0 	adrp	x0, b5000 <_etext+0x4158>
   a1478:	9109a021 	add	x1, x1, #0x268
   a147c:	910de000 	add	x0, x0, #0x378
   a1480:	52801302 	mov	w2, #0x98                  	// #152
   a1484:	97fff22f 	bl	9dd40 <assertion_failed>
   a1488:	d503201f 	nop
   a148c:	d503201f 	nop

00000000000a1490 <CPtrList::Find(void*) const>:
   a1490:	f9400000 	ldr	x0, [x0]
   a1494:	b4000280 	cbz	x0, a14e4 <CPtrList::Find(void*) const+0x54>
   a1498:	5289a863 	mov	w3, #0x4d43                	// #19779
   a149c:	72aa0983 	movk	w3, #0x504c, lsl #16
   a14a0:	14000006 	b	a14b8 <CPtrList::Find(void*) const+0x28>
   a14a4:	f9400c02 	ldr	x2, [x0, #24]
   a14a8:	eb01005f 	cmp	x2, x1
   a14ac:	540001c0 	b.eq	a14e4 <CPtrList::Find(void*) const+0x54>  // b.none
   a14b0:	f9400800 	ldr	x0, [x0, #16]
   a14b4:	b4000180 	cbz	x0, a14e4 <CPtrList::Find(void*) const+0x54>
   a14b8:	b9400002 	ldr	w2, [x0]
   a14bc:	6b03005f 	cmp	w2, w3
   a14c0:	54ffff20 	b.eq	a14a4 <CPtrList::Find(void*) const+0x14>  // b.none
   a14c4:	900000a1 	adrp	x1, b5000 <_etext+0x4158>
   a14c8:	900000a0 	adrp	x0, b5000 <_etext+0x4158>
   a14cc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a14d0:	9109a021 	add	x1, x1, #0x268
   a14d4:	910003fd 	mov	x29, sp
   a14d8:	910a2000 	add	x0, x0, #0x288
   a14dc:	52801662 	mov	w2, #0xb3                  	// #179
   a14e0:	97fff218 	bl	9dd40 <assertion_failed>
   a14e4:	d65f03c0 	ret
	...

00000000000a14f0 <CScreenDevice::~CScreenDevice()>:
   a14f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a14f4:	b00000c1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a14f8:	912c2021 	add	x1, x1, #0xb08
   a14fc:	910003fd 	mov	x29, sp
   a1500:	a90153f3 	stp	x19, x20, [sp, #16]
   a1504:	aa0003f3 	mov	x19, x0
   a1508:	f9000001 	str	x1, [x0]
   a150c:	97fff5f1 	bl	9ecd0 <CDeviceNameService::Get()>
   a1510:	b9401e62 	ldr	w2, [x19, #28]
   a1514:	b00000c1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a1518:	52800003 	mov	w3, #0x0                   	// #0
   a151c:	912ba021 	add	x1, x1, #0xae8
   a1520:	11000442 	add	w2, w2, #0x1
   a1524:	97fff617 	bl	9ed80 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   a1528:	39406260 	ldrb	w0, [x19, #24]
   a152c:	34000080 	cbz	w0, a153c <CScreenDevice::~CScreenDevice()+0x4c>
   a1530:	f9401e60 	ldr	x0, [x19, #56]
   a1534:	b4000040 	cbz	x0, a153c <CScreenDevice::~CScreenDevice()+0x4c>
   a1538:	94001b66 	bl	a82d0 <operator delete[](void*)>
   a153c:	f9001e7f 	str	xzr, [x19, #56]
   a1540:	f9401274 	ldr	x20, [x19, #32]
   a1544:	b40000d4 	cbz	x20, a155c <CScreenDevice::~CScreenDevice()+0x6c>
   a1548:	aa1403e0 	mov	x0, x20
   a154c:	94002f61 	bl	ad2d0 <CBcmFrameBuffer::~CBcmFrameBuffer()>
   a1550:	aa1403e0 	mov	x0, x20
   a1554:	d2801401 	mov	x1, #0xa0                  	// #160
   a1558:	94001b6a 	bl	a8300 <operator delete(void*, unsigned long)>
   a155c:	f900127f 	str	xzr, [x19, #32]
   a1560:	f9401a60 	ldr	x0, [x19, #48]
   a1564:	b4000040 	cbz	x0, a156c <CScreenDevice::~CScreenDevice()+0x7c>
   a1568:	94001b5a 	bl	a82d0 <operator delete[](void*)>
   a156c:	91020260 	add	x0, x19, #0x80
   a1570:	f9001a7f 	str	xzr, [x19, #48]
   a1574:	94003197 	bl	adbd0 <CDMAChannel::~CDMAChannel()>
   a1578:	9100a260 	add	x0, x19, #0x28
   a157c:	94003101 	bl	ad980 <CCharGenerator::~CCharGenerator()>
   a1580:	aa1303e0 	mov	x0, x19
   a1584:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1588:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a158c:	17fff43d 	b	9e680 <CDevice::~CDevice()>

00000000000a1590 <CScreenDevice::~CScreenDevice()>:
   a1590:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a1594:	910003fd 	mov	x29, sp
   a1598:	f9000bf3 	str	x19, [sp, #16]
   a159c:	aa0003f3 	mov	x19, x0
   a15a0:	97ffffd4 	bl	a14f0 <CScreenDevice::~CScreenDevice()>
   a15a4:	aa1303e0 	mov	x0, x19
   a15a8:	d2802301 	mov	x1, #0x118                 	// #280
   a15ac:	f9400bf3 	ldr	x19, [sp, #16]
   a15b0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a15b4:	14001b53 	b	a8300 <operator delete(void*, unsigned long)>
   a15b8:	d503201f 	nop
   a15bc:	d503201f 	nop

00000000000a15c0 <CScreenDevice::InvertCursor() [clone .part.0]>:
   a15c0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a15c4:	910003fd 	mov	x29, sp
   a15c8:	a90153f3 	stp	x19, x20, [sp, #16]
   a15cc:	aa0003f3 	mov	x19, x0
   a15d0:	9100a014 	add	x20, x0, #0x28
   a15d4:	a9025bf5 	stp	x21, x22, [sp, #32]
   a15d8:	a90363f7 	stp	x23, x24, [sp, #48]
   a15dc:	f9401818 	ldr	x24, [x0, #48]
   a15e0:	3941a400 	ldrb	w0, [x0, #105]
   a15e4:	34000840 	cbz	w0, a16ec <CScreenDevice::InvertCursor() [clone .part.0]+0x12c>
   a15e8:	aa1803f7 	mov	x23, x24
   a15ec:	aa1403e0 	mov	x0, x20
   a15f0:	52800035 	mov	w21, #0x1                   	// #1
   a15f4:	940030eb 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a15f8:	6b0002bf 	cmp	w21, w0
   a15fc:	540003e2 	b.cs	a1678 <CScreenDevice::InvertCursor() [clone .part.0]+0xb8>  // b.hs, b.nlast
   a1600:	aa1403e0 	mov	x0, x20
   a1604:	52800016 	mov	w22, #0x0                   	// #0
   a1608:	940030e2 	bl	ad990 <CCharGenerator::GetCharWidth() const>
   a160c:	6b0002df 	cmp	w22, w0
   a1610:	540002a2 	b.cs	a1664 <CScreenDevice::InvertCursor() [clone .part.0]+0xa4>  // b.hs, b.nlast
   a1614:	d503201f 	nop
   a1618:	294c0261 	ldp	w1, w0, [x19, #96]
   a161c:	91000af7 	add	x23, x23, #0x2
   a1620:	b9404a62 	ldr	w2, [x19, #72]
   a1624:	3941aa63 	ldrb	w3, [x19, #106]
   a1628:	0b0102c1 	add	w1, w22, w1
   a162c:	0b0002a0 	add	w0, w21, w0
   a1630:	6b02003f 	cmp	w1, w2
   a1634:	35000323 	cbnz	w3, a1698 <CScreenDevice::InvertCursor() [clone .part.0]+0xd8>
   a1638:	54000082 	b.cs	a1648 <CScreenDevice::InvertCursor() [clone .part.0]+0x88>  // b.hs, b.nlast
   a163c:	b9404e62 	ldr	w2, [x19, #76]
   a1640:	6b00005f 	cmp	w2, w0
   a1644:	54000408 	b.hi	a16c4 <CScreenDevice::InvertCursor() [clone .part.0]+0x104>  // b.pmore
   a1648:	7940de60 	ldrh	w0, [x19, #110]
   a164c:	781fe2e0 	sturh	w0, [x23, #-2]
   a1650:	110006d6 	add	w22, w22, #0x1
   a1654:	aa1403e0 	mov	x0, x20
   a1658:	940030ce 	bl	ad990 <CCharGenerator::GetCharWidth() const>
   a165c:	6b0002df 	cmp	w22, w0
   a1660:	54fffdc3 	b.cc	a1618 <CScreenDevice::InvertCursor() [clone .part.0]+0x58>  // b.lo, b.ul, b.last
   a1664:	aa1403e0 	mov	x0, x20
   a1668:	110006b5 	add	w21, w21, #0x1
   a166c:	940030cd 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a1670:	6b0002bf 	cmp	w21, w0
   a1674:	54fffc63 	b.cc	a1600 <CScreenDevice::InvertCursor() [clone .part.0]+0x40>  // b.lo, b.ul, b.last
   a1678:	3941aa60 	ldrb	w0, [x19, #106]
   a167c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a1680:	a94363f7 	ldp	x23, x24, [sp, #48]
   a1684:	52000000 	eor	w0, w0, #0x1
   a1688:	3901aa60 	strb	w0, [x19, #106]
   a168c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1690:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a1694:	d65f03c0 	ret
   a1698:	54fffdc2 	b.cs	a1650 <CScreenDevice::InvertCursor() [clone .part.0]+0x90>  // b.hs, b.nlast
   a169c:	b9404e62 	ldr	w2, [x19, #76]
   a16a0:	6b00005f 	cmp	w2, w0
   a16a4:	54fffd69 	b.ls	a1650 <CScreenDevice::InvertCursor() [clone .part.0]+0x90>  // b.plast
   a16a8:	b9404664 	ldr	w4, [x19, #68]
   a16ac:	110006d6 	add	w22, w22, #0x1
   a16b0:	785fe2e3 	ldurh	w3, [x23, #-2]
   a16b4:	f9401e62 	ldr	x2, [x19, #56]
   a16b8:	1b040400 	madd	w0, w0, w4, w1
   a16bc:	78207843 	strh	w3, [x2, x0, lsl #1]
   a16c0:	17ffffe5 	b	a1654 <CScreenDevice::InvertCursor() [clone .part.0]+0x94>
   a16c4:	b9404663 	ldr	w3, [x19, #68]
   a16c8:	110006d6 	add	w22, w22, #0x1
   a16cc:	f9401e62 	ldr	x2, [x19, #56]
   a16d0:	1b030400 	madd	w0, w0, w3, w1
   a16d4:	d37ff800 	lsl	x0, x0, #1
   a16d8:	78606841 	ldrh	w1, [x2, x0]
   a16dc:	781fe2e1 	sturh	w1, [x23, #-2]
   a16e0:	7940da61 	ldrh	w1, [x19, #108]
   a16e4:	78206841 	strh	w1, [x2, x0]
   a16e8:	17ffffdb 	b	a1654 <CScreenDevice::InvertCursor() [clone .part.0]+0x94>
   a16ec:	aa1403e0 	mov	x0, x20
   a16f0:	940030b0 	bl	ad9b0 <CCharGenerator::GetUnderline() const>
   a16f4:	2a0003f6 	mov	w22, w0
   a16f8:	aa1403e0 	mov	x0, x20
   a16fc:	940030a9 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a1700:	6b0002df 	cmp	w22, w0
   a1704:	540003e2 	b.cs	a1780 <CScreenDevice::InvertCursor() [clone .part.0]+0x1c0>  // b.hs, b.nlast
   a1708:	aa1403e0 	mov	x0, x20
   a170c:	52800015 	mov	w21, #0x0                   	// #0
   a1710:	940030a0 	bl	ad990 <CCharGenerator::GetCharWidth() const>
   a1714:	6b0002bf 	cmp	w21, w0
   a1718:	540002a2 	b.cs	a176c <CScreenDevice::InvertCursor() [clone .part.0]+0x1ac>  // b.hs, b.nlast
   a171c:	d503201f 	nop
   a1720:	294c0662 	ldp	w2, w1, [x19, #96]
   a1724:	91000b18 	add	x24, x24, #0x2
   a1728:	b9404a63 	ldr	w3, [x19, #72]
   a172c:	3941aa60 	ldrb	w0, [x19, #106]
   a1730:	0b0202a2 	add	w2, w21, w2
   a1734:	0b0102c1 	add	w1, w22, w1
   a1738:	6b03005f 	cmp	w2, w3
   a173c:	350002a0 	cbnz	w0, a1790 <CScreenDevice::InvertCursor() [clone .part.0]+0x1d0>
   a1740:	54000082 	b.cs	a1750 <CScreenDevice::InvertCursor() [clone .part.0]+0x190>  // b.hs, b.nlast
   a1744:	b9404e60 	ldr	w0, [x19, #76]
   a1748:	6b01001f 	cmp	w0, w1
   a174c:	54000388 	b.hi	a17bc <CScreenDevice::InvertCursor() [clone .part.0]+0x1fc>  // b.pmore
   a1750:	7940de60 	ldrh	w0, [x19, #110]
   a1754:	781fe300 	sturh	w0, [x24, #-2]
   a1758:	110006b5 	add	w21, w21, #0x1
   a175c:	aa1403e0 	mov	x0, x20
   a1760:	9400308c 	bl	ad990 <CCharGenerator::GetCharWidth() const>
   a1764:	6b0002bf 	cmp	w21, w0
   a1768:	54fffdc3 	b.cc	a1720 <CScreenDevice::InvertCursor() [clone .part.0]+0x160>  // b.lo, b.ul, b.last
   a176c:	aa1403e0 	mov	x0, x20
   a1770:	110006d6 	add	w22, w22, #0x1
   a1774:	9400308b 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a1778:	6b0002df 	cmp	w22, w0
   a177c:	54fffc63 	b.cc	a1708 <CScreenDevice::InvertCursor() [clone .part.0]+0x148>  // b.lo, b.ul, b.last
   a1780:	3941a660 	ldrb	w0, [x19, #105]
   a1784:	34fff7a0 	cbz	w0, a1678 <CScreenDevice::InvertCursor() [clone .part.0]+0xb8>
   a1788:	f9401a77 	ldr	x23, [x19, #48]
   a178c:	17ffff98 	b	a15ec <CScreenDevice::InvertCursor() [clone .part.0]+0x2c>
   a1790:	54fffe42 	b.cs	a1758 <CScreenDevice::InvertCursor() [clone .part.0]+0x198>  // b.hs, b.nlast
   a1794:	b9404e60 	ldr	w0, [x19, #76]
   a1798:	6b01001f 	cmp	w0, w1
   a179c:	54fffde9 	b.ls	a1758 <CScreenDevice::InvertCursor() [clone .part.0]+0x198>  // b.plast
   a17a0:	b9404664 	ldr	w4, [x19, #68]
   a17a4:	110006b5 	add	w21, w21, #0x1
   a17a8:	785fe303 	ldurh	w3, [x24, #-2]
   a17ac:	f9401e60 	ldr	x0, [x19, #56]
   a17b0:	1b040821 	madd	w1, w1, w4, w2
   a17b4:	78217803 	strh	w3, [x0, x1, lsl #1]
   a17b8:	17ffffe9 	b	a175c <CScreenDevice::InvertCursor() [clone .part.0]+0x19c>
   a17bc:	b9404663 	ldr	w3, [x19, #68]
   a17c0:	110006b5 	add	w21, w21, #0x1
   a17c4:	f9401e60 	ldr	x0, [x19, #56]
   a17c8:	1b030821 	madd	w1, w1, w3, w2
   a17cc:	d37ff821 	lsl	x1, x1, #1
   a17d0:	78616802 	ldrh	w2, [x0, x1]
   a17d4:	781fe302 	sturh	w2, [x24, #-2]
   a17d8:	7940da62 	ldrh	w2, [x19, #108]
   a17dc:	78216802 	strh	w2, [x0, x1]
   a17e0:	17ffffdf 	b	a175c <CScreenDevice::InvertCursor() [clone .part.0]+0x19c>
   a17e4:	d503201f 	nop
   a17e8:	d503201f 	nop
   a17ec:	d503201f 	nop

00000000000a17f0 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>:
   a17f0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a17f4:	910003fd 	mov	x29, sp
   a17f8:	a90153f3 	stp	x19, x20, [sp, #16]
   a17fc:	aa0003f3 	mov	x19, x0
   a1800:	2a0403f4 	mov	w20, w4
   a1804:	a9025bf5 	stp	x21, x22, [sp, #32]
   a1808:	2a0103f6 	mov	w22, w1
   a180c:	2a0203f5 	mov	w21, w2
   a1810:	f9001bf7 	str	x23, [sp, #48]
   a1814:	12001c77 	and	w23, w3, #0xff
   a1818:	97fff3ce 	bl	9e750 <CDevice::CDevice()>
   a181c:	b00000c4 	adrp	x4, ba000 <CursorSymbol+0x188>
   a1820:	912c2084 	add	x4, x4, #0xb08
   a1824:	29025676 	stp	w22, w21, [x19, #16]
   a1828:	9100a260 	add	x0, x19, #0x28
   a182c:	39006277 	strb	w23, [x19, #24]
   a1830:	f9000264 	str	x4, [x19]
   a1834:	b9001e74 	str	w20, [x19, #28]
   a1838:	f900127f 	str	xzr, [x19, #32]
   a183c:	9400304d 	bl	ad970 <CCharGenerator::CCharGenerator()>
   a1840:	52800024 	mov	w4, #0x1                   	// #1
   a1844:	529ffbe3 	mov	w3, #0xffdf                	// #65503
   a1848:	a9037e7f 	stp	xzr, xzr, [x19, #48]
   a184c:	91020260 	add	x0, x19, #0x80
   a1850:	d2800002 	mov	x2, #0x0                   	// #0
   a1854:	52801021 	mov	w1, #0x81                  	// #129
   a1858:	290afe7f 	stp	wzr, wzr, [x19, #84]
   a185c:	f900327f 	str	xzr, [x19, #96]
   a1860:	7900d264 	strh	w4, [x19, #104]
   a1864:	3901aa7f 	strb	wzr, [x19, #106]
   a1868:	b9006e63 	str	w3, [x19, #108]
   a186c:	7900e27f 	strh	wzr, [x19, #112]
   a1870:	3901f27f 	strb	wzr, [x19, #124]
   a1874:	9400307b 	bl	ada60 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>
   a1878:	52800020 	mov	w0, #0x1                   	// #1
   a187c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a1880:	f9401bf7 	ldr	x23, [sp, #48]
   a1884:	b9011260 	str	w0, [x19, #272]
   a1888:	a94153f3 	ldp	x19, x20, [sp, #16]
   a188c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a1890:	d65f03c0 	ret
   a1894:	d503201f 	nop
   a1898:	d503201f 	nop
   a189c:	d503201f 	nop

00000000000a18a0 <CScreenDevice::GetWidth() const>:
   a18a0:	b9404800 	ldr	w0, [x0, #72]
   a18a4:	d65f03c0 	ret
   a18a8:	d503201f 	nop
   a18ac:	d503201f 	nop

00000000000a18b0 <CScreenDevice::GetHeight() const>:
   a18b0:	b9404c00 	ldr	w0, [x0, #76]
   a18b4:	d65f03c0 	ret
   a18b8:	d503201f 	nop
   a18bc:	d503201f 	nop

00000000000a18c0 <CScreenDevice::GetColumns() const>:
   a18c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a18c4:	910003fd 	mov	x29, sp
   a18c8:	9100a000 	add	x0, x0, #0x28
   a18cc:	f9000bf3 	str	x19, [sp, #16]
   a18d0:	b9402013 	ldr	w19, [x0, #32]
   a18d4:	9400302f 	bl	ad990 <CCharGenerator::GetCharWidth() const>
   a18d8:	1ac00a60 	udiv	w0, w19, w0
   a18dc:	f9400bf3 	ldr	x19, [sp, #16]
   a18e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a18e4:	d65f03c0 	ret
   a18e8:	d503201f 	nop
   a18ec:	d503201f 	nop

00000000000a18f0 <CScreenDevice::GetRows() const>:
   a18f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a18f4:	910003fd 	mov	x29, sp
   a18f8:	9100a000 	add	x0, x0, #0x28
   a18fc:	f9000bf3 	str	x19, [sp, #16]
   a1900:	b9402813 	ldr	w19, [x0, #40]
   a1904:	94003027 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a1908:	1ac00a60 	udiv	w0, w19, w0
   a190c:	f9400bf3 	ldr	x19, [sp, #16]
   a1910:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a1914:	d65f03c0 	ret
   a1918:	d503201f 	nop
   a191c:	d503201f 	nop

00000000000a1920 <CScreenDevice::GetFrameBuffer()>:
   a1920:	f9401000 	ldr	x0, [x0, #32]
   a1924:	d65f03c0 	ret
   a1928:	d503201f 	nop
   a192c:	d503201f 	nop

00000000000a1930 <CScreenDevice::GetStatus()>:
   a1930:	7940dc02 	ldrh	w2, [x0, #110]
   a1934:	b9404003 	ldr	w3, [x0, #64]
   a1938:	f9401c01 	ldr	x1, [x0, #56]
   a193c:	79004902 	strh	w2, [x8, #36]
   a1940:	b9405402 	ldr	w2, [x0, #84]
   a1944:	f9000101 	str	x1, [x8]
   a1948:	29010903 	stp	w3, w2, [x8, #8]
   a194c:	a9458c01 	ldp	x1, x3, [x0, #88]
   a1950:	7940d002 	ldrh	w2, [x0, #104]
   a1954:	a9010d01 	stp	x1, x3, [x8, #16]
   a1958:	7940d801 	ldrh	w1, [x0, #108]
   a195c:	79004102 	strh	w2, [x8, #32]
   a1960:	7940e003 	ldrh	w3, [x0, #112]
   a1964:	b9407402 	ldr	w2, [x0, #116]
   a1968:	79004501 	strh	w1, [x8, #34]
   a196c:	b9407801 	ldr	w1, [x0, #120]
   a1970:	79004d03 	strh	w3, [x8, #38]
   a1974:	3941f000 	ldrb	w0, [x0, #124]
   a1978:	b9002902 	str	w2, [x8, #40]
   a197c:	b9002d01 	str	w1, [x8, #44]
   a1980:	3900c100 	strb	w0, [x8, #48]
   a1984:	d65f03c0 	ret
   a1988:	d503201f 	nop
   a198c:	d503201f 	nop

00000000000a1990 <CScreenDevice::SetStatus(TScreenStatus const&)>:
   a1990:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a1994:	910003fd 	mov	x29, sp
   a1998:	a90153f3 	stp	x19, x20, [sp, #16]
   a199c:	aa0003f3 	mov	x19, x0
   a19a0:	aa0103f4 	mov	x20, x1
   a19a4:	b9400820 	ldr	w0, [x1, #8]
   a19a8:	b9404261 	ldr	w1, [x19, #64]
   a19ac:	6b00003f 	cmp	w1, w0
   a19b0:	54000081 	b.ne	a19c0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x30>  // b.any
   a19b4:	29488261 	ldp	w1, w0, [x19, #68]
   a19b8:	6b00003f 	cmp	w1, w0
   a19bc:	540000a0 	b.eq	a19d0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x40>  // b.none
   a19c0:	52800000 	mov	w0, #0x0                   	// #0
   a19c4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a19c8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a19cc:	d65f03c0 	ret
   a19d0:	b9411260 	ldr	w0, [x19, #272]
   a19d4:	350004c0 	cbnz	w0, a1a6c <CScreenDevice::SetStatus(TScreenStatus const&)+0xdc>
   a19d8:	3941f260 	ldrb	w0, [x19, #124]
   a19dc:	35ffff20 	cbnz	w0, a19c0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x30>
   a19e0:	3940c280 	ldrb	w0, [x20, #48]
   a19e4:	35fffee0 	cbnz	w0, a19c0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x30>
   a19e8:	b9404262 	ldr	w2, [x19, #64]
   a19ec:	f9400281 	ldr	x1, [x20]
   a19f0:	f9401e60 	ldr	x0, [x19, #56]
   a19f4:	94001795 	bl	a7848 <memcpy>
   a19f8:	29418281 	ldp	w1, w0, [x20, #12]
   a19fc:	b9401682 	ldr	w2, [x20, #20]
   a1a00:	b9005661 	str	w1, [x19, #84]
   a1a04:	b9401a81 	ldr	w1, [x20, #24]
   a1a08:	b9005a60 	str	w0, [x19, #88]
   a1a0c:	b9401e80 	ldr	w0, [x20, #28]
   a1a10:	b9005e62 	str	w2, [x19, #92]
   a1a14:	39408282 	ldrb	w2, [x20, #32]
   a1a18:	b9006261 	str	w1, [x19, #96]
   a1a1c:	39408681 	ldrb	w1, [x20, #33]
   a1a20:	b9006660 	str	w0, [x19, #100]
   a1a24:	79404680 	ldrh	w0, [x20, #34]
   a1a28:	3901a262 	strb	w2, [x19, #104]
   a1a2c:	79404a82 	ldrh	w2, [x20, #36]
   a1a30:	3901a661 	strb	w1, [x19, #105]
   a1a34:	39409a81 	ldrb	w1, [x20, #38]
   a1a38:	7900da60 	strh	w0, [x19, #108]
   a1a3c:	39409e80 	ldrb	w0, [x20, #39]
   a1a40:	7900de62 	strh	w2, [x19, #110]
   a1a44:	b9402a82 	ldr	w2, [x20, #40]
   a1a48:	3901c261 	strb	w1, [x19, #112]
   a1a4c:	b9402e81 	ldr	w1, [x20, #44]
   a1a50:	3901c660 	strb	w0, [x19, #113]
   a1a54:	b9411260 	ldr	w0, [x19, #272]
   a1a58:	290e8662 	stp	w2, w1, [x19, #116]
   a1a5c:	350001a0 	cbnz	w0, a1a90 <CScreenDevice::SetStatus(TScreenStatus const&)+0x100>
   a1a60:	d5033fbf 	dmb	sy
   a1a64:	52800020 	mov	w0, #0x1                   	// #1
   a1a68:	17ffffd7 	b	a19c4 <CScreenDevice::SetStatus(TScreenStatus const&)+0x34>
   a1a6c:	94001db5 	bl	a9140 <EnterCritical>
   a1a70:	3941f260 	ldrb	w0, [x19, #124]
   a1a74:	35000060 	cbnz	w0, a1a80 <CScreenDevice::SetStatus(TScreenStatus const&)+0xf0>
   a1a78:	3940c280 	ldrb	w0, [x20, #48]
   a1a7c:	34fffb60 	cbz	w0, a19e8 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
   a1a80:	b9411260 	ldr	w0, [x19, #272]
   a1a84:	34fff9e0 	cbz	w0, a19c0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x30>
   a1a88:	94001dde 	bl	a9200 <LeaveCritical>
   a1a8c:	17ffffcd 	b	a19c0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x30>
   a1a90:	94001ddc 	bl	a9200 <LeaveCritical>
   a1a94:	17fffff3 	b	a1a60 <CScreenDevice::SetStatus(TScreenStatus const&)+0xd0>
   a1a98:	d503201f 	nop
   a1a9c:	d503201f 	nop

00000000000a1aa0 <CScreenDevice::CarriageReturn()>:
   a1aa0:	b900601f 	str	wzr, [x0, #96]
   a1aa4:	d65f03c0 	ret
   a1aa8:	d503201f 	nop
   a1aac:	d503201f 	nop

00000000000a1ab0 <CScreenDevice::CursorHome()>:
   a1ab0:	b9405801 	ldr	w1, [x0, #88]
   a1ab4:	290c041f 	stp	wzr, w1, [x0, #96]
   a1ab8:	d65f03c0 	ret
   a1abc:	d503201f 	nop

00000000000a1ac0 <CScreenDevice::CursorLeft()>:
   a1ac0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a1ac4:	910003fd 	mov	x29, sp
   a1ac8:	a90153f3 	stp	x19, x20, [sp, #16]
   a1acc:	aa0003f3 	mov	x19, x0
   a1ad0:	b9406000 	ldr	w0, [x0, #96]
   a1ad4:	35000320 	cbnz	w0, a1b38 <CScreenDevice::CursorLeft()+0x78>
   a1ad8:	b9405a60 	ldr	w0, [x19, #88]
   a1adc:	b9406661 	ldr	w1, [x19, #100]
   a1ae0:	6b00003f 	cmp	w1, w0
   a1ae4:	54000088 	b.hi	a1af4 <CScreenDevice::CursorLeft()+0x34>  // b.pmore
   a1ae8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1aec:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a1af0:	d65f03c0 	ret
   a1af4:	b9404a74 	ldr	w20, [x19, #72]
   a1af8:	f90013f5 	str	x21, [sp, #32]
   a1afc:	9100a275 	add	x21, x19, #0x28
   a1b00:	aa1503e0 	mov	x0, x21
   a1b04:	94002fa3 	bl	ad990 <CCharGenerator::GetCharWidth() const>
   a1b08:	2a0003e1 	mov	w1, w0
   a1b0c:	aa1503e0 	mov	x0, x21
   a1b10:	4b010294 	sub	w20, w20, w1
   a1b14:	b9006274 	str	w20, [x19, #96]
   a1b18:	94002fa2 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a1b1c:	b9406661 	ldr	w1, [x19, #100]
   a1b20:	f94013f5 	ldr	x21, [sp, #32]
   a1b24:	4b000021 	sub	w1, w1, w0
   a1b28:	b9006661 	str	w1, [x19, #100]
   a1b2c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1b30:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a1b34:	d65f03c0 	ret
   a1b38:	9100a260 	add	x0, x19, #0x28
   a1b3c:	94002f95 	bl	ad990 <CCharGenerator::GetCharWidth() const>
   a1b40:	b9406261 	ldr	w1, [x19, #96]
   a1b44:	4b000021 	sub	w1, w1, w0
   a1b48:	b9006261 	str	w1, [x19, #96]
   a1b4c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1b50:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a1b54:	d65f03c0 	ret
   a1b58:	d503201f 	nop
   a1b5c:	d503201f 	nop

00000000000a1b60 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
   a1b60:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a1b64:	910003fd 	mov	x29, sp
   a1b68:	a9025bf5 	stp	x21, x22, [sp, #32]
   a1b6c:	9100a016 	add	x22, x0, #0x28
   a1b70:	2a0103f5 	mov	w21, w1
   a1b74:	a90153f3 	stp	x19, x20, [sp, #16]
   a1b78:	aa0003f4 	mov	x20, x0
   a1b7c:	aa1603e0 	mov	x0, x22
   a1b80:	2a0203f3 	mov	w19, w2
   a1b84:	51000673 	sub	w19, w19, #0x1
   a1b88:	94002f82 	bl	ad990 <CCharGenerator::GetCharWidth() const>
   a1b8c:	2a0003e1 	mov	w1, w0
   a1b90:	aa1603e0 	mov	x0, x22
   a1b94:	1b017e73 	mul	w19, w19, w1
   a1b98:	94002f82 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a1b9c:	b9404a81 	ldr	w1, [x20, #72]
   a1ba0:	6b13003f 	cmp	w1, w19
   a1ba4:	54000149 	b.ls	a1bcc <CScreenDevice::CursorMove(unsigned int, unsigned int)+0x6c>  // b.plast
   a1ba8:	b9405a82 	ldr	w2, [x20, #88]
   a1bac:	510006a1 	sub	w1, w21, #0x1
   a1bb0:	1b007c20 	mul	w0, w1, w0
   a1bb4:	6b00005f 	cmp	w2, w0
   a1bb8:	540000a8 	b.hi	a1bcc <CScreenDevice::CursorMove(unsigned int, unsigned int)+0x6c>  // b.pmore
   a1bbc:	b9405e81 	ldr	w1, [x20, #92]
   a1bc0:	6b00003f 	cmp	w1, w0
   a1bc4:	54000049 	b.ls	a1bcc <CScreenDevice::CursorMove(unsigned int, unsigned int)+0x6c>  // b.plast
   a1bc8:	290c0293 	stp	w19, w0, [x20, #96]
   a1bcc:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1bd0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a1bd4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a1bd8:	d65f03c0 	ret
   a1bdc:	d503201f 	nop

00000000000a1be0 <CScreenDevice::CursorUp()>:
   a1be0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a1be4:	910003fd 	mov	x29, sp
   a1be8:	f9000bf3 	str	x19, [sp, #16]
   a1bec:	aa0003f3 	mov	x19, x0
   a1bf0:	b9406661 	ldr	w1, [x19, #100]
   a1bf4:	b9405800 	ldr	w0, [x0, #88]
   a1bf8:	6b00003f 	cmp	w1, w0
   a1bfc:	54000088 	b.hi	a1c0c <CScreenDevice::CursorUp()+0x2c>  // b.pmore
   a1c00:	f9400bf3 	ldr	x19, [sp, #16]
   a1c04:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a1c08:	d65f03c0 	ret
   a1c0c:	9100a260 	add	x0, x19, #0x28
   a1c10:	94002f64 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a1c14:	b9406661 	ldr	w1, [x19, #100]
   a1c18:	4b000021 	sub	w1, w1, w0
   a1c1c:	b9006661 	str	w1, [x19, #100]
   a1c20:	f9400bf3 	ldr	x19, [sp, #16]
   a1c24:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a1c28:	d65f03c0 	ret
   a1c2c:	d503201f 	nop

00000000000a1c30 <CScreenDevice::DeleteChars(unsigned int)>:
   a1c30:	d65f03c0 	ret
   a1c34:	d503201f 	nop
   a1c38:	d503201f 	nop
   a1c3c:	d503201f 	nop

00000000000a1c40 <CScreenDevice::DeleteLines(unsigned int)>:
   a1c40:	d65f03c0 	ret
   a1c44:	d503201f 	nop
   a1c48:	d503201f 	nop
   a1c4c:	d503201f 	nop

00000000000a1c50 <CScreenDevice::GetTextBackgroundColor()>:
   a1c50:	3941c002 	ldrb	w2, [x0, #112]
   a1c54:	7940d801 	ldrh	w1, [x0, #108]
   a1c58:	7940dc00 	ldrh	w0, [x0, #110]
   a1c5c:	7100005f 	cmp	w2, #0x0
   a1c60:	1a801020 	csel	w0, w1, w0, ne	// ne = any
   a1c64:	d65f03c0 	ret
   a1c68:	d503201f 	nop
   a1c6c:	d503201f 	nop

00000000000a1c70 <CScreenDevice::GetTextColor()>:
   a1c70:	3941c002 	ldrb	w2, [x0, #112]
   a1c74:	7940d801 	ldrh	w1, [x0, #108]
   a1c78:	7940dc00 	ldrh	w0, [x0, #110]
   a1c7c:	7100005f 	cmp	w2, #0x0
   a1c80:	1a811000 	csel	w0, w0, w1, ne	// ne = any
   a1c84:	d65f03c0 	ret
   a1c88:	d503201f 	nop
   a1c8c:	d503201f 	nop

00000000000a1c90 <CScreenDevice::InsertLines(unsigned int)>:
   a1c90:	d65f03c0 	ret
   a1c94:	d503201f 	nop
   a1c98:	d503201f 	nop
   a1c9c:	d503201f 	nop

00000000000a1ca0 <CScreenDevice::InsertMode(bool)>:
   a1ca0:	3901c401 	strb	w1, [x0, #113]
   a1ca4:	d65f03c0 	ret
   a1ca8:	d503201f 	nop
   a1cac:	d503201f 	nop

00000000000a1cb0 <CScreenDevice::ReverseScroll()>:
   a1cb0:	d65f03c0 	ret
   a1cb4:	d503201f 	nop
   a1cb8:	d503201f 	nop
   a1cbc:	d503201f 	nop

00000000000a1cc0 <CScreenDevice::SetCursorMode(bool)>:
   a1cc0:	3901a001 	strb	w1, [x0, #104]
   a1cc4:	d65f03c0 	ret
   a1cc8:	d503201f 	nop
   a1ccc:	d503201f 	nop

00000000000a1cd0 <CScreenDevice::SetCursorBlock(bool)>:
   a1cd0:	3901a401 	strb	w1, [x0, #105]
   a1cd4:	d65f03c0 	ret
   a1cd8:	d503201f 	nop
   a1cdc:	d503201f 	nop

00000000000a1ce0 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
   a1ce0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a1ce4:	910003fd 	mov	x29, sp
   a1ce8:	a9025bf5 	stp	x21, x22, [sp, #32]
   a1cec:	9100a016 	add	x22, x0, #0x28
   a1cf0:	2a0203f5 	mov	w21, w2
   a1cf4:	a90153f3 	stp	x19, x20, [sp, #16]
   a1cf8:	aa0003f4 	mov	x20, x0
   a1cfc:	aa1603e0 	mov	x0, x22
   a1d00:	2a0103f3 	mov	w19, w1
   a1d04:	51000673 	sub	w19, w19, #0x1
   a1d08:	94002f26 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a1d0c:	2a0003e1 	mov	w1, w0
   a1d10:	aa1603e0 	mov	x0, x22
   a1d14:	1b017e73 	mul	w19, w19, w1
   a1d18:	94002f22 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a1d1c:	b9405281 	ldr	w1, [x20, #80]
   a1d20:	1b157c02 	mul	w2, w0, w21
   a1d24:	6b02003f 	cmp	w1, w2
   a1d28:	1a829020 	csel	w0, w1, w2, ls	// ls = plast
   a1d2c:	6b00027f 	cmp	w19, w0
   a1d30:	7a423020 	ccmp	w1, w2, #0x0, cc	// cc = lo, ul, last
   a1d34:	540000e2 	b.cs	a1d50 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)+0x70>  // b.hs, b.nlast
   a1d38:	b9405a93 	ldr	w19, [x20, #88]
   a1d3c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a1d40:	290c4e9f 	stp	wzr, w19, [x20, #96]
   a1d44:	a94153f3 	ldp	x19, x20, [sp, #16]
   a1d48:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a1d4c:	d65f03c0 	ret
   a1d50:	290b0a93 	stp	w19, w2, [x20, #88]
   a1d54:	17fffffa 	b	a1d3c <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)+0x5c>
   a1d58:	d503201f 	nop
   a1d5c:	d503201f 	nop

00000000000a1d60 <CScreenDevice::SetStandoutMode(unsigned int)>:
   a1d60:	7101ac3f 	cmp	w1, #0x6b
   a1d64:	54000128 	b.hi	a1d88 <CScreenDevice::SetStandoutMode(unsigned int)+0x28>  // b.pmore
   a1d68:	b00000c2 	adrp	x2, ba000 <CursorSymbol+0x188>
   a1d6c:	9129e042 	add	x2, x2, #0xa78
   a1d70:	38614842 	ldrb	w2, [x2, w1, uxtw]
   a1d74:	10000061 	adr	x1, a1d80 <CScreenDevice::SetStandoutMode(unsigned int)+0x20>
   a1d78:	8b228822 	add	x2, x1, w2, sxtb #2
   a1d7c:	d61f0040 	br	x2
   a1d80:	528002a1 	mov	w1, #0x15                  	// #21
   a1d84:	7900d801 	strh	w1, [x0, #108]
   a1d88:	d65f03c0 	ret
   a1d8c:	1280aea1 	mov	w1, #0xfffffa8a            	// #-1398
   a1d90:	7900d801 	strh	w1, [x0, #108]
   a1d94:	d65f03c0 	ret
   a1d98:	12800401 	mov	w1, #0xffffffdf            	// #-33
   a1d9c:	3901c01f 	strb	wzr, [x0, #112]
   a1da0:	7900d801 	strh	w1, [x0, #108]
   a1da4:	d65f03c0 	ret
   a1da8:	528af941 	mov	w1, #0x57ca                	// #22474
   a1dac:	7900d801 	strh	w1, [x0, #108]
   a1db0:	d65f03c0 	ret
   a1db4:	128a5541 	mov	w1, #0xffffad55            	// #-21163
   a1db8:	7900dc01 	strh	w1, [x0, #110]
   a1dbc:	d65f03c0 	ret
   a1dc0:	5280aaa1 	mov	w1, #0x555                 	// #1365
   a1dc4:	7900dc01 	strh	w1, [x0, #110]
   a1dc8:	d65f03c0 	ret
   a1dcc:	128afd41 	mov	w1, #0xffffa815            	// #-22507
   a1dd0:	7900dc01 	strh	w1, [x0, #110]
   a1dd4:	d65f03c0 	ret
   a1dd8:	528002a1 	mov	w1, #0x15                  	// #21
   a1ddc:	7900dc01 	strh	w1, [x0, #110]
   a1de0:	d65f03c0 	ret
   a1de4:	128aafe1 	mov	w1, #0xffffaa80            	// #-21888
   a1de8:	7900dc01 	strh	w1, [x0, #110]
   a1dec:	d65f03c0 	ret
   a1df0:	5280a801 	mov	w1, #0x540                 	// #1344
   a1df4:	7900dc01 	strh	w1, [x0, #110]
   a1df8:	d65f03c0 	ret
   a1dfc:	128affe1 	mov	w1, #0xffffa800            	// #-22528
   a1e00:	7900dc01 	strh	w1, [x0, #110]
   a1e04:	d65f03c0 	ret
   a1e08:	7900dc1f 	strh	wzr, [x0, #110]
   a1e0c:	d65f03c0 	ret
   a1e10:	128a5541 	mov	w1, #0xffffad55            	// #-21163
   a1e14:	7900d801 	strh	w1, [x0, #108]
   a1e18:	d65f03c0 	ret
   a1e1c:	5280aaa1 	mov	w1, #0x555                 	// #1365
   a1e20:	7900d801 	strh	w1, [x0, #108]
   a1e24:	d65f03c0 	ret
   a1e28:	128afd41 	mov	w1, #0xffffa815            	// #-22507
   a1e2c:	7900d801 	strh	w1, [x0, #108]
   a1e30:	d65f03c0 	ret
   a1e34:	128aafe1 	mov	w1, #0xffffaa80            	// #-21888
   a1e38:	7900d801 	strh	w1, [x0, #108]
   a1e3c:	d65f03c0 	ret
   a1e40:	5280a801 	mov	w1, #0x540                 	// #1344
   a1e44:	7900d801 	strh	w1, [x0, #108]
   a1e48:	d65f03c0 	ret
   a1e4c:	128affe1 	mov	w1, #0xffffa800            	// #-22528
   a1e50:	7900d801 	strh	w1, [x0, #108]
   a1e54:	d65f03c0 	ret
   a1e58:	7900d81f 	strh	wzr, [x0, #108]
   a1e5c:	d65f03c0 	ret
   a1e60:	528af941 	mov	w1, #0x57ca                	// #22474
   a1e64:	7900dc01 	strh	w1, [x0, #110]
   a1e68:	d65f03c0 	ret
   a1e6c:	1280aea1 	mov	w1, #0xfffffa8a            	// #-1398
   a1e70:	7900dc01 	strh	w1, [x0, #110]
   a1e74:	d65f03c0 	ret
   a1e78:	528a5141 	mov	w1, #0x528a                	// #21130
   a1e7c:	7900dc01 	strh	w1, [x0, #110]
   a1e80:	d65f03c0 	ret
   a1e84:	12800401 	mov	w1, #0xffffffdf            	// #-33
   a1e88:	7900d801 	strh	w1, [x0, #108]
   a1e8c:	d65f03c0 	ret
   a1e90:	528afbe1 	mov	w1, #0x57df                	// #22495
   a1e94:	7900d801 	strh	w1, [x0, #108]
   a1e98:	d65f03c0 	ret
   a1e9c:	1280ac01 	mov	w1, #0xfffffa9f            	// #-1377
   a1ea0:	7900d801 	strh	w1, [x0, #108]
   a1ea4:	d65f03c0 	ret
   a1ea8:	528a53e1 	mov	w1, #0x529f                	// #21151
   a1eac:	7900d801 	strh	w1, [x0, #108]
   a1eb0:	d65f03c0 	ret
   a1eb4:	128006a1 	mov	w1, #0xffffffca            	// #-54
   a1eb8:	7900d801 	strh	w1, [x0, #108]
   a1ebc:	d65f03c0 	ret
   a1ec0:	12800401 	mov	w1, #0xffffffdf            	// #-33
   a1ec4:	7900dc01 	strh	w1, [x0, #110]
   a1ec8:	d65f03c0 	ret
   a1ecc:	1280ac01 	mov	w1, #0xfffffa9f            	// #-1377
   a1ed0:	7900dc01 	strh	w1, [x0, #110]
   a1ed4:	d65f03c0 	ret
   a1ed8:	528a53e1 	mov	w1, #0x529f                	// #21151
   a1edc:	7900dc01 	strh	w1, [x0, #110]
   a1ee0:	d65f03c0 	ret
   a1ee4:	128006a1 	mov	w1, #0xffffffca            	// #-54
   a1ee8:	7900dc01 	strh	w1, [x0, #110]
   a1eec:	d65f03c0 	ret
   a1ef0:	528afbe1 	mov	w1, #0x57df                	// #22495
   a1ef4:	7900dc01 	strh	w1, [x0, #110]
   a1ef8:	d65f03c0 	ret
   a1efc:	528a5141 	mov	w1, #0x528a                	// #21130
   a1f00:	7900d801 	strh	w1, [x0, #108]
   a1f04:	d65f03c0 	ret
   a1f08:	52800021 	mov	w1, #0x1                   	// #1
   a1f0c:	3901c001 	strb	w1, [x0, #112]
   a1f10:	d65f03c0 	ret
   a1f14:	d503201f 	nop
   a1f18:	d503201f 	nop
   a1f1c:	d503201f 	nop

00000000000a1f20 <CScreenDevice::Scroll()>:
   a1f20:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a1f24:	910003fd 	mov	x29, sp
   a1f28:	a9025bf5 	stp	x21, x22, [sp, #32]
   a1f2c:	aa0003f6 	mov	x22, x0
   a1f30:	9100a000 	add	x0, x0, #0x28
   a1f34:	a90153f3 	stp	x19, x20, [sp, #16]
   a1f38:	94002e9a 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a1f3c:	294b0ec4 	ldp	w4, w3, [x22, #88]
   a1f40:	2a0003f3 	mov	w19, w0
   a1f44:	b94046c1 	ldr	w1, [x22, #68]
   a1f48:	f9401ec6 	ldr	x6, [x22, #56]
   a1f4c:	4b040063 	sub	w3, w3, w4
   a1f50:	4b000063 	sub	w3, w3, w0
   a1f54:	1b017c94 	mul	w20, w4, w1
   a1f58:	1b017c63 	mul	w3, w3, w1
   a1f5c:	8b1404d4 	add	x20, x6, x20, lsl #1
   a1f60:	531f7863 	lsl	w3, w3, #1
   a1f64:	35000ba3 	cbnz	w3, a20d8 <CScreenDevice::Scroll()+0x1b8>
   a1f68:	1b017e62 	mul	w2, w19, w1
   a1f6c:	d341fc42 	lsr	x2, x2, #1
   a1f70:	51000444 	sub	w4, w2, #0x1
   a1f74:	b4000aa2 	cbz	x2, a20c8 <CScreenDevice::Scroll()+0x1a8>
   a1f78:	cb540be0 	neg	x0, x20, lsr #2
   a1f7c:	71003c9f 	cmp	w4, #0xf
   a1f80:	7d40dec0 	ldr	h0, [x22, #110]
   a1f84:	12000400 	and	w0, w0, #0x3
   a1f88:	54000469 	b.ls	a2014 <CScreenDevice::Scroll()+0xf4>  // b.plast
   a1f8c:	aa1403e6 	mov	x6, x20
   a1f90:	340001a0 	cbz	w0, a1fc4 <CScreenDevice::Scroll()+0xa4>
   a1f94:	7100041f 	cmp	w0, #0x1
   a1f98:	bc0044c0 	str	s0, [x6], #4
   a1f9c:	51000844 	sub	w4, w2, #0x2
   a1fa0:	54000120 	b.eq	a1fc4 <CScreenDevice::Scroll()+0xa4>  // b.none
   a1fa4:	71000c1f 	cmp	w0, #0x3
   a1fa8:	bd000680 	str	s0, [x20, #4]
   a1fac:	91002286 	add	x6, x20, #0x8
   a1fb0:	51000c44 	sub	w4, w2, #0x3
   a1fb4:	54000081 	b.ne	a1fc4 <CScreenDevice::Scroll()+0xa4>  // b.any
   a1fb8:	91003286 	add	x6, x20, #0xc
   a1fbc:	51001044 	sub	w4, w2, #0x4
   a1fc0:	bd000a80 	str	s0, [x20, #8]
   a1fc4:	4b000042 	sub	w2, w2, w0
   a1fc8:	4e040401 	dup	v1.4s, v0.s[0]
   a1fcc:	d37e0400 	ubfiz	x0, x0, #2, #2
   a1fd0:	51001043 	sub	w3, w2, #0x4
   a1fd4:	8b000281 	add	x1, x20, x0
   a1fd8:	53027c63 	lsr	w3, w3, #2
   a1fdc:	d2800000 	mov	x0, #0x0                   	// #0
   a1fe0:	11000463 	add	w3, w3, #0x1
   a1fe4:	d503201f 	nop
   a1fe8:	d37cec05 	lsl	x5, x0, #4
   a1fec:	91000400 	add	x0, x0, #0x1
   a1ff0:	6b00007f 	cmp	w3, w0
   a1ff4:	3ca56821 	str	q1, [x1, x5]
   a1ff8:	54ffff88 	b.hi	a1fe8 <CScreenDevice::Scroll()+0xc8>  // b.pmore
   a1ffc:	531e7460 	lsl	w0, w3, #2
   a2000:	d37c7463 	ubfiz	x3, x3, #4, #30
   a2004:	6b00005f 	cmp	w2, w0
   a2008:	4b000084 	sub	w4, w4, w0
   a200c:	8b0300d4 	add	x20, x6, x3
   a2010:	540005c0 	b.eq	a20c8 <CScreenDevice::Scroll()+0x1a8>  // b.none
   a2014:	bd000280 	str	s0, [x20]
   a2018:	34000584 	cbz	w4, a20c8 <CScreenDevice::Scroll()+0x1a8>
   a201c:	7100049f 	cmp	w4, #0x1
   a2020:	bd000680 	str	s0, [x20, #4]
   a2024:	54000520 	b.eq	a20c8 <CScreenDevice::Scroll()+0x1a8>  // b.none
   a2028:	7100089f 	cmp	w4, #0x2
   a202c:	bd000a80 	str	s0, [x20, #8]
   a2030:	540004c0 	b.eq	a20c8 <CScreenDevice::Scroll()+0x1a8>  // b.none
   a2034:	71000c9f 	cmp	w4, #0x3
   a2038:	bd000e80 	str	s0, [x20, #12]
   a203c:	54000460 	b.eq	a20c8 <CScreenDevice::Scroll()+0x1a8>  // b.none
   a2040:	7100109f 	cmp	w4, #0x4
   a2044:	bd001280 	str	s0, [x20, #16]
   a2048:	54000400 	b.eq	a20c8 <CScreenDevice::Scroll()+0x1a8>  // b.none
   a204c:	7100149f 	cmp	w4, #0x5
   a2050:	bd001680 	str	s0, [x20, #20]
   a2054:	540003a0 	b.eq	a20c8 <CScreenDevice::Scroll()+0x1a8>  // b.none
   a2058:	7100189f 	cmp	w4, #0x6
   a205c:	bd001a80 	str	s0, [x20, #24]
   a2060:	54000340 	b.eq	a20c8 <CScreenDevice::Scroll()+0x1a8>  // b.none
   a2064:	71001c9f 	cmp	w4, #0x7
   a2068:	bd001e80 	str	s0, [x20, #28]
   a206c:	540002e0 	b.eq	a20c8 <CScreenDevice::Scroll()+0x1a8>  // b.none
   a2070:	7100209f 	cmp	w4, #0x8
   a2074:	bd002280 	str	s0, [x20, #32]
   a2078:	54000280 	b.eq	a20c8 <CScreenDevice::Scroll()+0x1a8>  // b.none
   a207c:	7100249f 	cmp	w4, #0x9
   a2080:	bd002680 	str	s0, [x20, #36]
   a2084:	54000220 	b.eq	a20c8 <CScreenDevice::Scroll()+0x1a8>  // b.none
   a2088:	7100289f 	cmp	w4, #0xa
   a208c:	bd002a80 	str	s0, [x20, #40]
   a2090:	540001c0 	b.eq	a20c8 <CScreenDevice::Scroll()+0x1a8>  // b.none
   a2094:	71002c9f 	cmp	w4, #0xb
   a2098:	bd002e80 	str	s0, [x20, #44]
   a209c:	54000160 	b.eq	a20c8 <CScreenDevice::Scroll()+0x1a8>  // b.none
   a20a0:	7100309f 	cmp	w4, #0xc
   a20a4:	bd003280 	str	s0, [x20, #48]
   a20a8:	54000100 	b.eq	a20c8 <CScreenDevice::Scroll()+0x1a8>  // b.none
   a20ac:	7100349f 	cmp	w4, #0xd
   a20b0:	bd003680 	str	s0, [x20, #52]
   a20b4:	540000a0 	b.eq	a20c8 <CScreenDevice::Scroll()+0x1a8>  // b.none
   a20b8:	7100389f 	cmp	w4, #0xe
   a20bc:	bd003a80 	str	s0, [x20, #56]
   a20c0:	54000040 	b.eq	a20c8 <CScreenDevice::Scroll()+0x1a8>  // b.none
   a20c4:	bd003e80 	str	s0, [x20, #60]
   a20c8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a20cc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a20d0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a20d4:	d65f03c0 	ret
   a20d8:	0b000084 	add	w4, w4, w0
   a20dc:	2a0303f5 	mov	w21, w3
   a20e0:	f9001bf7 	str	x23, [sp, #48]
   a20e4:	910202d7 	add	x23, x22, #0x80
   a20e8:	aa1503e3 	mov	x3, x21
   a20ec:	1b017c82 	mul	w2, w4, w1
   a20f0:	52800005 	mov	w5, #0x0                   	// #0
   a20f4:	aa1403e1 	mov	x1, x20
   a20f8:	52800044 	mov	w4, #0x2                   	// #2
   a20fc:	aa1703e0 	mov	x0, x23
   a2100:	8b0204c2 	add	x2, x6, x2, lsl #1
   a2104:	94002f07 	bl	add20 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)>
   a2108:	aa1703e0 	mov	x0, x23
   a210c:	940031d1 	bl	ae850 <CDMAChannel::Start()>
   a2110:	aa1703e0 	mov	x0, x23
   a2114:	9400323b 	bl	aea00 <CDMAChannel::Wait()>
   a2118:	927ef6a3 	and	x3, x21, #0xfffffffffffffffc
   a211c:	b94046c1 	ldr	w1, [x22, #68]
   a2120:	8b030294 	add	x20, x20, x3
   a2124:	f9401bf7 	ldr	x23, [sp, #48]
   a2128:	17ffff90 	b	a1f68 <CScreenDevice::Scroll()+0x48>
   a212c:	d503201f 	nop

00000000000a2130 <CScreenDevice::CursorDown()>:
   a2130:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a2134:	910003fd 	mov	x29, sp
   a2138:	a90153f3 	stp	x19, x20, [sp, #16]
   a213c:	9100a014 	add	x20, x0, #0x28
   a2140:	aa0003f3 	mov	x19, x0
   a2144:	aa1403e0 	mov	x0, x20
   a2148:	94002e16 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a214c:	b9406662 	ldr	w2, [x19, #100]
   a2150:	b9405e61 	ldr	w1, [x19, #92]
   a2154:	0b020000 	add	w0, w0, w2
   a2158:	6b01001f 	cmp	w0, w1
   a215c:	b9006660 	str	w0, [x19, #100]
   a2160:	54000082 	b.cs	a2170 <CScreenDevice::CursorDown()+0x40>  // b.hs, b.nlast
   a2164:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2168:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a216c:	d65f03c0 	ret
   a2170:	aa1303e0 	mov	x0, x19
   a2174:	97ffff6b 	bl	a1f20 <CScreenDevice::Scroll()>
   a2178:	aa1403e0 	mov	x0, x20
   a217c:	94002e09 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a2180:	b9406661 	ldr	w1, [x19, #100]
   a2184:	4b000021 	sub	w1, w1, w0
   a2188:	b9006661 	str	w1, [x19, #100]
   a218c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2190:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a2194:	d65f03c0 	ret
   a2198:	d503201f 	nop
   a219c:	d503201f 	nop

00000000000a21a0 <CScreenDevice::NewLine()>:
   a21a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a21a4:	910003fd 	mov	x29, sp
   a21a8:	a90153f3 	stp	x19, x20, [sp, #16]
   a21ac:	aa0003f3 	mov	x19, x0
   a21b0:	9100a014 	add	x20, x0, #0x28
   a21b4:	aa1403e0 	mov	x0, x20
   a21b8:	b900627f 	str	wzr, [x19, #96]
   a21bc:	94002df9 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a21c0:	b9406662 	ldr	w2, [x19, #100]
   a21c4:	b9405e61 	ldr	w1, [x19, #92]
   a21c8:	0b020000 	add	w0, w0, w2
   a21cc:	6b01001f 	cmp	w0, w1
   a21d0:	b9006660 	str	w0, [x19, #100]
   a21d4:	54000082 	b.cs	a21e4 <CScreenDevice::NewLine()+0x44>  // b.hs, b.nlast
   a21d8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a21dc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a21e0:	d65f03c0 	ret
   a21e4:	aa1303e0 	mov	x0, x19
   a21e8:	97ffff4e 	bl	a1f20 <CScreenDevice::Scroll()>
   a21ec:	aa1403e0 	mov	x0, x20
   a21f0:	94002dec 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a21f4:	b9406661 	ldr	w1, [x19, #100]
   a21f8:	4b000021 	sub	w1, w1, w0
   a21fc:	b9006661 	str	w1, [x19, #100]
   a2200:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2204:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a2208:	d65f03c0 	ret
   a220c:	d503201f 	nop

00000000000a2210 <CScreenDevice::CursorRight()>:
   a2210:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a2214:	910003fd 	mov	x29, sp
   a2218:	a90153f3 	stp	x19, x20, [sp, #16]
   a221c:	9100a014 	add	x20, x0, #0x28
   a2220:	aa0003f3 	mov	x19, x0
   a2224:	aa1403e0 	mov	x0, x20
   a2228:	94002dda 	bl	ad990 <CCharGenerator::GetCharWidth() const>
   a222c:	b9406262 	ldr	w2, [x19, #96]
   a2230:	b9404a61 	ldr	w1, [x19, #72]
   a2234:	0b020000 	add	w0, w0, w2
   a2238:	6b01001f 	cmp	w0, w1
   a223c:	b9006260 	str	w0, [x19, #96]
   a2240:	54000082 	b.cs	a2250 <CScreenDevice::CursorRight()+0x40>  // b.hs, b.nlast
   a2244:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2248:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a224c:	d65f03c0 	ret
   a2250:	aa1403e0 	mov	x0, x20
   a2254:	b900627f 	str	wzr, [x19, #96]
   a2258:	94002dd2 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a225c:	b9406662 	ldr	w2, [x19, #100]
   a2260:	b9405e61 	ldr	w1, [x19, #92]
   a2264:	0b020000 	add	w0, w0, w2
   a2268:	6b01001f 	cmp	w0, w1
   a226c:	b9006660 	str	w0, [x19, #100]
   a2270:	54fffea3 	b.cc	a2244 <CScreenDevice::CursorRight()+0x34>  // b.lo, b.ul, b.last
   a2274:	aa1303e0 	mov	x0, x19
   a2278:	97ffff2a 	bl	a1f20 <CScreenDevice::Scroll()>
   a227c:	aa1403e0 	mov	x0, x20
   a2280:	94002dc8 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a2284:	b9406661 	ldr	w1, [x19, #100]
   a2288:	4b000021 	sub	w1, w1, w0
   a228c:	b9006661 	str	w1, [x19, #100]
   a2290:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2294:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a2298:	d65f03c0 	ret
   a229c:	d503201f 	nop

00000000000a22a0 <CScreenDevice::Tabulator()>:
   a22a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a22a4:	910003fd 	mov	x29, sp
   a22a8:	a90153f3 	stp	x19, x20, [sp, #16]
   a22ac:	9100a014 	add	x20, x0, #0x28
   a22b0:	aa0003f3 	mov	x19, x0
   a22b4:	aa1403e0 	mov	x0, x20
   a22b8:	94002db6 	bl	ad990 <CCharGenerator::GetCharWidth() const>
   a22bc:	b9406261 	ldr	w1, [x19, #96]
   a22c0:	531d7000 	lsl	w0, w0, #3
   a22c4:	b9404a62 	ldr	w2, [x19, #72]
   a22c8:	0b010001 	add	w1, w0, w1
   a22cc:	1ac00821 	udiv	w1, w1, w0
   a22d0:	1b007c21 	mul	w1, w1, w0
   a22d4:	6b02003f 	cmp	w1, w2
   a22d8:	b9006261 	str	w1, [x19, #96]
   a22dc:	54000082 	b.cs	a22ec <CScreenDevice::Tabulator()+0x4c>  // b.hs, b.nlast
   a22e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a22e4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a22e8:	d65f03c0 	ret
   a22ec:	aa1403e0 	mov	x0, x20
   a22f0:	b900627f 	str	wzr, [x19, #96]
   a22f4:	94002dab 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a22f8:	b9406662 	ldr	w2, [x19, #100]
   a22fc:	b9405e61 	ldr	w1, [x19, #92]
   a2300:	0b020000 	add	w0, w0, w2
   a2304:	6b01001f 	cmp	w0, w1
   a2308:	b9006660 	str	w0, [x19, #100]
   a230c:	54fffea3 	b.cc	a22e0 <CScreenDevice::Tabulator()+0x40>  // b.lo, b.ul, b.last
   a2310:	aa1303e0 	mov	x0, x19
   a2314:	97ffff03 	bl	a1f20 <CScreenDevice::Scroll()>
   a2318:	aa1403e0 	mov	x0, x20
   a231c:	94002da1 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a2320:	b9406661 	ldr	w1, [x19, #100]
   a2324:	4b000021 	sub	w1, w1, w0
   a2328:	b9006661 	str	w1, [x19, #100]
   a232c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2330:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a2334:	d65f03c0 	ret
   a2338:	d503201f 	nop
   a233c:	d503201f 	nop

00000000000a2340 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
   a2340:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   a2344:	910003fd 	mov	x29, sp
   a2348:	a9025bf5 	stp	x21, x22, [sp, #32]
   a234c:	9100a016 	add	x22, x0, #0x28
   a2350:	aa0003f5 	mov	x21, x0
   a2354:	aa1603e0 	mov	x0, x22
   a2358:	a90153f3 	stp	x19, x20, [sp, #16]
   a235c:	a90363f7 	stp	x23, x24, [sp, #48]
   a2360:	13001c38 	sxtb	w24, w1
   a2364:	52800017 	mov	w23, #0x0                   	// #0
   a2368:	a9046bf9 	stp	x25, x26, [sp, #64]
   a236c:	2a0303f9 	mov	w25, w3
   a2370:	12003c9a 	and	w26, w4, #0xffff
   a2374:	f9002bfb 	str	x27, [sp, #80]
   a2378:	2a0203fb 	mov	w27, w2
   a237c:	94002d89 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a2380:	6b17001f 	cmp	w0, w23
   a2384:	54000509 	b.ls	a2424 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xe4>  // b.plast
   a2388:	2a1b03f4 	mov	w20, w27
   a238c:	52800013 	mov	w19, #0x0                   	// #0
   a2390:	aa1603e0 	mov	x0, x22
   a2394:	94002d7f 	bl	ad990 <CCharGenerator::GetCharWidth() const>
   a2398:	2a0003e4 	mov	w4, w0
   a239c:	2a1303e2 	mov	w2, w19
   a23a0:	6b13009f 	cmp	w4, w19
   a23a4:	2a1703e3 	mov	w3, w23
   a23a8:	2a1803e1 	mov	w1, w24
   a23ac:	aa1603e0 	mov	x0, x22
   a23b0:	540002e9 	b.ls	a240c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xcc>  // b.plast
   a23b4:	94002d83 	bl	ad9c0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
   a23b8:	72001c1f 	tst	w0, #0xff
   a23bc:	2a1a03e1 	mov	w1, w26
   a23c0:	54000081 	b.ne	a23d0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x90>  // b.any
   a23c4:	3941c2a0 	ldrb	w0, [x21, #112]
   a23c8:	340001e0 	cbz	w0, a2404 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xc4>
   a23cc:	7940daa1 	ldrh	w1, [x21, #108]
   a23d0:	11000673 	add	w19, w19, #0x1
   a23d4:	b9404aa0 	ldr	w0, [x21, #72]
   a23d8:	6b14001f 	cmp	w0, w20
   a23dc:	54000109 	b.ls	a23fc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xbc>  // b.plast
   a23e0:	b9404ea0 	ldr	w0, [x21, #76]
   a23e4:	6b00033f 	cmp	w25, w0
   a23e8:	540000a2 	b.cs	a23fc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xbc>  // b.hs, b.nlast
   a23ec:	b94046a0 	ldr	w0, [x21, #68]
   a23f0:	f9401ea2 	ldr	x2, [x21, #56]
   a23f4:	1b005320 	madd	w0, w25, w0, w20
   a23f8:	78207841 	strh	w1, [x2, x0, lsl #1]
   a23fc:	11000694 	add	w20, w20, #0x1
   a2400:	17ffffe4 	b	a2390 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x50>
   a2404:	7940dea1 	ldrh	w1, [x21, #110]
   a2408:	17fffff2 	b	a23d0 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x90>
   a240c:	aa1603e0 	mov	x0, x22
   a2410:	110006f7 	add	w23, w23, #0x1
   a2414:	94002d63 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a2418:	6b17001f 	cmp	w0, w23
   a241c:	11000739 	add	w25, w25, #0x1
   a2420:	54fffb48 	b.hi	a2388 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>  // b.pmore
   a2424:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2428:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a242c:	a94363f7 	ldp	x23, x24, [sp, #48]
   a2430:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a2434:	f9402bfb 	ldr	x27, [sp, #80]
   a2438:	a8c67bfd 	ldp	x29, x30, [sp], #96
   a243c:	d65f03c0 	ret

00000000000a2440 <CScreenDevice::DisplayChar(char)>:
   a2440:	12001c22 	and	w2, w1, #0xff
   a2444:	71007c5f 	cmp	w2, #0x1f
   a2448:	54000329 	b.ls	a24ac <CScreenDevice::DisplayChar(char)+0x6c>  // b.plast
   a244c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a2450:	910003fd 	mov	x29, sp
   a2454:	13001c21 	sxtb	w1, w1
   a2458:	3941c004 	ldrb	w4, [x0, #112]
   a245c:	a90153f3 	stp	x19, x20, [sp, #16]
   a2460:	aa0003f3 	mov	x19, x0
   a2464:	9100a014 	add	x20, x0, #0x28
   a2468:	7940dc05 	ldrh	w5, [x0, #110]
   a246c:	7100009f 	cmp	w4, #0x0
   a2470:	294c0c02 	ldp	w2, w3, [x0, #96]
   a2474:	7940d804 	ldrh	w4, [x0, #108]
   a2478:	1a8410a4 	csel	w4, w5, w4, ne	// ne = any
   a247c:	97ffffb1 	bl	a2340 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   a2480:	aa1403e0 	mov	x0, x20
   a2484:	94002d43 	bl	ad990 <CCharGenerator::GetCharWidth() const>
   a2488:	b9406262 	ldr	w2, [x19, #96]
   a248c:	b9404a61 	ldr	w1, [x19, #72]
   a2490:	0b020000 	add	w0, w0, w2
   a2494:	6b01001f 	cmp	w0, w1
   a2498:	b9006260 	str	w0, [x19, #96]
   a249c:	540000a2 	b.cs	a24b0 <CScreenDevice::DisplayChar(char)+0x70>  // b.hs, b.nlast
   a24a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a24a4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a24a8:	d65f03c0 	ret
   a24ac:	d65f03c0 	ret
   a24b0:	aa1403e0 	mov	x0, x20
   a24b4:	b900627f 	str	wzr, [x19, #96]
   a24b8:	94002d3a 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a24bc:	b9406662 	ldr	w2, [x19, #100]
   a24c0:	b9405e61 	ldr	w1, [x19, #92]
   a24c4:	0b020000 	add	w0, w0, w2
   a24c8:	6b01001f 	cmp	w0, w1
   a24cc:	b9006660 	str	w0, [x19, #100]
   a24d0:	54fffe83 	b.cc	a24a0 <CScreenDevice::DisplayChar(char)+0x60>  // b.lo, b.ul, b.last
   a24d4:	aa1303e0 	mov	x0, x19
   a24d8:	97fffe92 	bl	a1f20 <CScreenDevice::Scroll()>
   a24dc:	aa1403e0 	mov	x0, x20
   a24e0:	94002d30 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a24e4:	b9406661 	ldr	w1, [x19, #100]
   a24e8:	4b000021 	sub	w1, w1, w0
   a24ec:	b9006661 	str	w1, [x19, #100]
   a24f0:	17ffffec 	b	a24a0 <CScreenDevice::DisplayChar(char)+0x60>
   a24f4:	d503201f 	nop
   a24f8:	d503201f 	nop
   a24fc:	d503201f 	nop

00000000000a2500 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
   a2500:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   a2504:	910003fd 	mov	x29, sp
   a2508:	a9025bf5 	stp	x21, x22, [sp, #32]
   a250c:	9100a016 	add	x22, x0, #0x28
   a2510:	aa0003f5 	mov	x21, x0
   a2514:	aa1603e0 	mov	x0, x22
   a2518:	a90153f3 	stp	x19, x20, [sp, #16]
   a251c:	a90363f7 	stp	x23, x24, [sp, #48]
   a2520:	2a0203f7 	mov	w23, w2
   a2524:	52800018 	mov	w24, #0x0                   	// #0
   a2528:	f90023f9 	str	x25, [sp, #64]
   a252c:	2a0103f9 	mov	w25, w1
   a2530:	94002d1c 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a2534:	6b18001f 	cmp	w0, w24
   a2538:	54000429 	b.ls	a25bc <CScreenDevice::EraseChar(unsigned int, unsigned int)+0xbc>  // b.plast
   a253c:	d503201f 	nop
   a2540:	aa1603e0 	mov	x0, x22
   a2544:	52800013 	mov	w19, #0x0                   	// #0
   a2548:	94002d12 	bl	ad990 <CCharGenerator::GetCharWidth() const>
   a254c:	6b13001f 	cmp	w0, w19
   a2550:	2a1903f4 	mov	w20, w25
   a2554:	11000673 	add	w19, w19, #0x1
   a2558:	54000269 	b.ls	a25a4 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0xa4>  // b.plast
   a255c:	d503201f 	nop
   a2560:	b9404aa0 	ldr	w0, [x21, #72]
   a2564:	6b14001f 	cmp	w0, w20
   a2568:	54000129 	b.ls	a258c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x8c>  // b.plast
   a256c:	b9404ea0 	ldr	w0, [x21, #76]
   a2570:	6b0002ff 	cmp	w23, w0
   a2574:	540000c2 	b.cs	a258c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x8c>  // b.hs, b.nlast
   a2578:	b94046a0 	ldr	w0, [x21, #68]
   a257c:	7940dea2 	ldrh	w2, [x21, #110]
   a2580:	f9401ea1 	ldr	x1, [x21, #56]
   a2584:	1b0052e0 	madd	w0, w23, w0, w20
   a2588:	78207822 	strh	w2, [x1, x0, lsl #1]
   a258c:	aa1603e0 	mov	x0, x22
   a2590:	11000694 	add	w20, w20, #0x1
   a2594:	94002cff 	bl	ad990 <CCharGenerator::GetCharWidth() const>
   a2598:	6b13001f 	cmp	w0, w19
   a259c:	11000673 	add	w19, w19, #0x1
   a25a0:	54fffe08 	b.hi	a2560 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x60>  // b.pmore
   a25a4:	aa1603e0 	mov	x0, x22
   a25a8:	11000718 	add	w24, w24, #0x1
   a25ac:	94002cfd 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a25b0:	6b18001f 	cmp	w0, w24
   a25b4:	110006f7 	add	w23, w23, #0x1
   a25b8:	54fffc48 	b.hi	a2540 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x40>  // b.pmore
   a25bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   a25c0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a25c4:	a94363f7 	ldp	x23, x24, [sp, #48]
   a25c8:	f94023f9 	ldr	x25, [sp, #64]
   a25cc:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a25d0:	d65f03c0 	ret
   a25d4:	d503201f 	nop
   a25d8:	d503201f 	nop
   a25dc:	d503201f 	nop

00000000000a25e0 <CScreenDevice::ClearLineEnd()>:
   a25e0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a25e4:	910003fd 	mov	x29, sp
   a25e8:	a90153f3 	stp	x19, x20, [sp, #16]
   a25ec:	aa0003f4 	mov	x20, x0
   a25f0:	b9406293 	ldr	w19, [x20, #96]
   a25f4:	b9404800 	ldr	w0, [x0, #72]
   a25f8:	6b00027f 	cmp	w19, w0
   a25fc:	540001c2 	b.cs	a2634 <CScreenDevice::ClearLineEnd()+0x54>  // b.hs, b.nlast
   a2600:	f90013f5 	str	x21, [sp, #32]
   a2604:	9100a295 	add	x21, x20, #0x28
   a2608:	b9406682 	ldr	w2, [x20, #100]
   a260c:	2a1303e1 	mov	w1, w19
   a2610:	aa1403e0 	mov	x0, x20
   a2614:	97ffffbb 	bl	a2500 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   a2618:	aa1503e0 	mov	x0, x21
   a261c:	94002cdd 	bl	ad990 <CCharGenerator::GetCharWidth() const>
   a2620:	b9404a81 	ldr	w1, [x20, #72]
   a2624:	0b000273 	add	w19, w19, w0
   a2628:	6b13003f 	cmp	w1, w19
   a262c:	54fffee8 	b.hi	a2608 <CScreenDevice::ClearLineEnd()+0x28>  // b.pmore
   a2630:	f94013f5 	ldr	x21, [sp, #32]
   a2634:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2638:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a263c:	d65f03c0 	ret

00000000000a2640 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>:
   a2640:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a2644:	910003fd 	mov	x29, sp
   a2648:	a9025bf5 	stp	x21, x22, [sp, #32]
   a264c:	9100a016 	add	x22, x0, #0x28
   a2650:	2a0103f5 	mov	w21, w1
   a2654:	f9001bf7 	str	x23, [sp, #48]
   a2658:	b9406017 	ldr	w23, [x0, #96]
   a265c:	a90153f3 	stp	x19, x20, [sp, #16]
   a2660:	aa0003f4 	mov	x20, x0
   a2664:	aa1603e0 	mov	x0, x22
   a2668:	94002cca 	bl	ad990 <CCharGenerator::GetCharWidth() const>
   a266c:	b9404a81 	ldr	w1, [x20, #72]
   a2670:	1b155c15 	madd	w21, w0, w21, w23
   a2674:	b9406293 	ldr	w19, [x20, #96]
   a2678:	6b0102bf 	cmp	w21, w1
   a267c:	1a8192b5 	csel	w21, w21, w1, ls	// ls = plast
   a2680:	6b1302bf 	cmp	w21, w19
   a2684:	54000149 	b.ls	a26ac <CScreenDevice::EraseChars(unsigned int) [clone .part.0]+0x6c>  // b.plast
   a2688:	b9406682 	ldr	w2, [x20, #100]
   a268c:	2a1303e1 	mov	w1, w19
   a2690:	aa1403e0 	mov	x0, x20
   a2694:	97ffff9b 	bl	a2500 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   a2698:	aa1603e0 	mov	x0, x22
   a269c:	94002cbd 	bl	ad990 <CCharGenerator::GetCharWidth() const>
   a26a0:	0b000273 	add	w19, w19, w0
   a26a4:	6b1302bf 	cmp	w21, w19
   a26a8:	54ffff08 	b.hi	a2688 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]+0x48>  // b.pmore
   a26ac:	a94153f3 	ldp	x19, x20, [sp, #16]
   a26b0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a26b4:	f9401bf7 	ldr	x23, [sp, #48]
   a26b8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a26bc:	d65f03c0 	ret

00000000000a26c0 <CScreenDevice::EraseChars(unsigned int)>:
   a26c0:	35000041 	cbnz	w1, a26c8 <CScreenDevice::EraseChars(unsigned int)+0x8>
   a26c4:	d65f03c0 	ret
   a26c8:	17ffffde 	b	a2640 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>
   a26cc:	d503201f 	nop

00000000000a26d0 <CScreenDevice::ClearDisplayEnd()>:
   a26d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a26d4:	910003fd 	mov	x29, sp
   a26d8:	a90153f3 	stp	x19, x20, [sp, #16]
   a26dc:	aa0003f3 	mov	x19, x0
   a26e0:	b9406274 	ldr	w20, [x19, #96]
   a26e4:	b9404800 	ldr	w0, [x0, #72]
   a26e8:	f90013f5 	str	x21, [sp, #32]
   a26ec:	9100a275 	add	x21, x19, #0x28
   a26f0:	6b00029f 	cmp	w20, w0
   a26f4:	54000162 	b.cs	a2720 <CScreenDevice::ClearDisplayEnd()+0x50>  // b.hs, b.nlast
   a26f8:	b9406662 	ldr	w2, [x19, #100]
   a26fc:	2a1403e1 	mov	w1, w20
   a2700:	aa1303e0 	mov	x0, x19
   a2704:	97ffff7f 	bl	a2500 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   a2708:	aa1503e0 	mov	x0, x21
   a270c:	94002ca1 	bl	ad990 <CCharGenerator::GetCharWidth() const>
   a2710:	b9404a61 	ldr	w1, [x19, #72]
   a2714:	0b000294 	add	w20, w20, w0
   a2718:	6b01029f 	cmp	w20, w1
   a271c:	54fffee3 	b.cc	a26f8 <CScreenDevice::ClearDisplayEnd()+0x28>  // b.lo, b.ul, b.last
   a2720:	b9406674 	ldr	w20, [x19, #100]
   a2724:	aa1503e0 	mov	x0, x21
   a2728:	94002c9e 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a272c:	29480a61 	ldp	w1, w2, [x19, #64]
   a2730:	f9401e66 	ldr	x6, [x19, #56]
   a2734:	0b000280 	add	w0, w20, w0
   a2738:	1b027c03 	mul	w3, w0, w2
   a273c:	53017c21 	lsr	w1, w1, #1
   a2740:	d37f7c69 	ubfiz	x9, x3, #1, #32
   a2744:	4b030021 	sub	w1, w1, w3
   a2748:	51000424 	sub	w4, w1, #0x1
   a274c:	8b0900c2 	add	x2, x6, x9
   a2750:	34000ba1 	cbz	w1, a28c4 <CScreenDevice::ClearDisplayEnd()+0x1f4>
   a2754:	2a0103e0 	mov	w0, w1
   a2758:	9101ba67 	add	x7, x19, #0x6e
   a275c:	8b030008 	add	x8, x0, x3
   a2760:	9101c265 	add	x5, x19, #0x70
   a2764:	8b0804c8 	add	x8, x6, x8, lsl #1
   a2768:	eb07011f 	cmp	x8, x7
   a276c:	fa458042 	ccmp	x2, x5, #0x2, hi	// hi = pmore
   a2770:	7a4d2880 	ccmp	w4, #0xd, #0x0, cs	// cs = hs, nlast
   a2774:	54000b09 	b.ls	a28d4 <CScreenDevice::ClearDisplayEnd()+0x204>  // b.plast
   a2778:	cb4207e0 	neg	x0, x2, lsr #1
   a277c:	72000800 	ands	w0, w0, #0x7
   a2780:	54000bc0 	b.eq	a28f8 <CScreenDevice::ClearDisplayEnd()+0x228>  // b.none
   a2784:	7940de67 	ldrh	w7, [x19, #110]
   a2788:	7100041f 	cmp	w0, #0x1
   a278c:	91000845 	add	x5, x2, #0x2
   a2790:	51000824 	sub	w4, w1, #0x2
   a2794:	782968c7 	strh	w7, [x6, x9]
   a2798:	54000400 	b.eq	a2818 <CScreenDevice::ClearDisplayEnd()+0x148>  // b.none
   a279c:	7100081f 	cmp	w0, #0x2
   a27a0:	79000447 	strh	w7, [x2, #2]
   a27a4:	91001045 	add	x5, x2, #0x4
   a27a8:	51000c24 	sub	w4, w1, #0x3
   a27ac:	54000360 	b.eq	a2818 <CScreenDevice::ClearDisplayEnd()+0x148>  // b.none
   a27b0:	7940de67 	ldrh	w7, [x19, #110]
   a27b4:	71000c1f 	cmp	w0, #0x3
   a27b8:	91001845 	add	x5, x2, #0x6
   a27bc:	51001024 	sub	w4, w1, #0x4
   a27c0:	79000847 	strh	w7, [x2, #4]
   a27c4:	540002a0 	b.eq	a2818 <CScreenDevice::ClearDisplayEnd()+0x148>  // b.none
   a27c8:	7100101f 	cmp	w0, #0x4
   a27cc:	79000c47 	strh	w7, [x2, #6]
   a27d0:	91002045 	add	x5, x2, #0x8
   a27d4:	51001424 	sub	w4, w1, #0x5
   a27d8:	54000200 	b.eq	a2818 <CScreenDevice::ClearDisplayEnd()+0x148>  // b.none
   a27dc:	7940de67 	ldrh	w7, [x19, #110]
   a27e0:	7100141f 	cmp	w0, #0x5
   a27e4:	91002845 	add	x5, x2, #0xa
   a27e8:	51001824 	sub	w4, w1, #0x6
   a27ec:	79001047 	strh	w7, [x2, #8]
   a27f0:	54000140 	b.eq	a2818 <CScreenDevice::ClearDisplayEnd()+0x148>  // b.none
   a27f4:	71001c1f 	cmp	w0, #0x7
   a27f8:	79001447 	strh	w7, [x2, #10]
   a27fc:	91003045 	add	x5, x2, #0xc
   a2800:	51001c24 	sub	w4, w1, #0x7
   a2804:	540000a1 	b.ne	a2818 <CScreenDevice::ClearDisplayEnd()+0x148>  // b.any
   a2808:	7940de67 	ldrh	w7, [x19, #110]
   a280c:	91003845 	add	x5, x2, #0xe
   a2810:	51002024 	sub	w4, w1, #0x8
   a2814:	79001847 	strh	w7, [x2, #12]
   a2818:	7d40de60 	ldr	h0, [x19, #110]
   a281c:	4b000022 	sub	w2, w1, w0
   a2820:	2a0003e0 	mov	w0, w0
   a2824:	8b030000 	add	x0, x0, x3
   a2828:	53037c43 	lsr	w3, w2, #3
   a282c:	8b0004c0 	add	x0, x6, x0, lsl #1
   a2830:	51000463 	sub	w3, w3, #0x1
   a2834:	8b235003 	add	x3, x0, w3, uxtw #4
   a2838:	4e020400 	dup	v0.8h, v0.h[0]
   a283c:	d503201f 	nop
   a2840:	eb03001f 	cmp	x0, x3
   a2844:	3d800000 	str	q0, [x0]
   a2848:	91004000 	add	x0, x0, #0x10
   a284c:	54ffffa1 	b.ne	a2840 <CScreenDevice::ClearDisplayEnd()+0x170>  // b.any
   a2850:	121d7043 	and	w3, w2, #0xfffffff8
   a2854:	927d7040 	and	x0, x2, #0xfffffff8
   a2858:	d37ff800 	lsl	x0, x0, #1
   a285c:	6b03005f 	cmp	w2, w3
   a2860:	8b0000a1 	add	x1, x5, x0
   a2864:	4b030084 	sub	w4, w4, w3
   a2868:	540002e0 	b.eq	a28c4 <CScreenDevice::ClearDisplayEnd()+0x1f4>  // b.none
   a286c:	7940de62 	ldrh	w2, [x19, #110]
   a2870:	782068a2 	strh	w2, [x5, x0]
   a2874:	34000284 	cbz	w4, a28c4 <CScreenDevice::ClearDisplayEnd()+0x1f4>
   a2878:	7100049f 	cmp	w4, #0x1
   a287c:	79000422 	strh	w2, [x1, #2]
   a2880:	54000220 	b.eq	a28c4 <CScreenDevice::ClearDisplayEnd()+0x1f4>  // b.none
   a2884:	7940de60 	ldrh	w0, [x19, #110]
   a2888:	7100089f 	cmp	w4, #0x2
   a288c:	79000820 	strh	w0, [x1, #4]
   a2890:	540001a0 	b.eq	a28c4 <CScreenDevice::ClearDisplayEnd()+0x1f4>  // b.none
   a2894:	71000c9f 	cmp	w4, #0x3
   a2898:	79000c20 	strh	w0, [x1, #6]
   a289c:	54000140 	b.eq	a28c4 <CScreenDevice::ClearDisplayEnd()+0x1f4>  // b.none
   a28a0:	7940de60 	ldrh	w0, [x19, #110]
   a28a4:	7100109f 	cmp	w4, #0x4
   a28a8:	79001020 	strh	w0, [x1, #8]
   a28ac:	540000c0 	b.eq	a28c4 <CScreenDevice::ClearDisplayEnd()+0x1f4>  // b.none
   a28b0:	7100149f 	cmp	w4, #0x5
   a28b4:	79001420 	strh	w0, [x1, #10]
   a28b8:	54000060 	b.eq	a28c4 <CScreenDevice::ClearDisplayEnd()+0x1f4>  // b.none
   a28bc:	7940de60 	ldrh	w0, [x19, #110]
   a28c0:	79001820 	strh	w0, [x1, #12]
   a28c4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a28c8:	f94013f5 	ldr	x21, [sp, #32]
   a28cc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a28d0:	d65f03c0 	ret
   a28d4:	8b000440 	add	x0, x2, x0, lsl #1
   a28d8:	7940de61 	ldrh	w1, [x19, #110]
   a28dc:	78002441 	strh	w1, [x2], #2
   a28e0:	eb02001f 	cmp	x0, x2
   a28e4:	54ffffa1 	b.ne	a28d8 <CScreenDevice::ClearDisplayEnd()+0x208>  // b.any
   a28e8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a28ec:	f94013f5 	ldr	x21, [sp, #32]
   a28f0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a28f4:	d65f03c0 	ret
   a28f8:	aa0203e5 	mov	x5, x2
   a28fc:	17ffffc7 	b	a2818 <CScreenDevice::ClearDisplayEnd()+0x148>

00000000000a2900 <CScreenDevice::Initialize()>:
   a2900:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a2904:	910003fd 	mov	x29, sp
   a2908:	a90153f3 	stp	x19, x20, [sp, #16]
   a290c:	aa0003f3 	mov	x19, x0
   a2910:	39406014 	ldrb	w20, [x0, #24]
   a2914:	a9025bf5 	stp	x21, x22, [sp, #32]
   a2918:	350007b4 	cbnz	w20, a2a0c <CScreenDevice::Initialize()+0x10c>
   a291c:	d2801400 	mov	x0, #0xa0                  	// #160
   a2920:	94001650 	bl	a8260 <operator new(unsigned long)>
   a2924:	29420a61 	ldp	w1, w2, [x19, #16]
   a2928:	aa0003f5 	mov	x21, x0
   a292c:	52800007 	mov	w7, #0x0                   	// #0
   a2930:	52800005 	mov	w5, #0x0                   	// #0
   a2934:	52800004 	mov	w4, #0x0                   	// #0
   a2938:	b9401e66 	ldr	w6, [x19, #28]
   a293c:	52800203 	mov	w3, #0x10                  	// #16
   a2940:	94002a08 	bl	ad160 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>
   a2944:	aa1503e0 	mov	x0, x21
   a2948:	f9001275 	str	x21, [x19, #32]
   a294c:	94002b21 	bl	ad5d0 <CBcmFrameBuffer::Initialize()>
   a2950:	72001c1f 	tst	w0, #0xff
   a2954:	540000c1 	b.ne	a296c <CScreenDevice::Initialize()+0x6c>  // b.any
   a2958:	2a1403e0 	mov	w0, w20
   a295c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2960:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a2964:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a2968:	d65f03c0 	ret
   a296c:	f9401260 	ldr	x0, [x19, #32]
   a2970:	94002a9c 	bl	ad3e0 <CBcmFrameBuffer::GetDepth() const>
   a2974:	7100401f 	cmp	w0, #0x10
   a2978:	54ffff01 	b.ne	a2958 <CScreenDevice::Initialize()+0x58>  // b.any
   a297c:	f9401260 	ldr	x0, [x19, #32]
   a2980:	9100a275 	add	x21, x19, #0x28
   a2984:	94002a9b 	bl	ad3f0 <CBcmFrameBuffer::GetBuffer() const>
   a2988:	2a0003e1 	mov	w1, w0
   a298c:	f9401260 	ldr	x0, [x19, #32]
   a2990:	f9001e61 	str	x1, [x19, #56]
   a2994:	94002a9b 	bl	ad400 <CBcmFrameBuffer::GetSize() const>
   a2998:	2a0003e1 	mov	w1, w0
   a299c:	f9401260 	ldr	x0, [x19, #32]
   a29a0:	b9004261 	str	w1, [x19, #64]
   a29a4:	94002a8b 	bl	ad3d0 <CBcmFrameBuffer::GetPitch() const>
   a29a8:	2a0003e1 	mov	w1, w0
   a29ac:	f9401260 	ldr	x0, [x19, #32]
   a29b0:	b9004661 	str	w1, [x19, #68]
   a29b4:	94002a77 	bl	ad390 <CBcmFrameBuffer::GetWidth() const>
   a29b8:	2a0003e1 	mov	w1, w0
   a29bc:	f9401260 	ldr	x0, [x19, #32]
   a29c0:	b9004a61 	str	w1, [x19, #72]
   a29c4:	94002a77 	bl	ad3a0 <CBcmFrameBuffer::GetHeight() const>
   a29c8:	2a0003e1 	mov	w1, w0
   a29cc:	aa1503e0 	mov	x0, x21
   a29d0:	b9004e61 	str	w1, [x19, #76]
   a29d4:	94002bef 	bl	ad990 <CCharGenerator::GetCharWidth() const>
   a29d8:	2a0003f6 	mov	w22, w0
   a29dc:	aa1503e0 	mov	x0, x21
   a29e0:	94002bf0 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a29e4:	1b007ec0 	mul	w0, w22, w0
   a29e8:	d37ff800 	lsl	x0, x0, #1
   a29ec:	94001625 	bl	a8280 <operator new[](unsigned long)>
   a29f0:	b9404661 	ldr	w1, [x19, #68]
   a29f4:	f9001a60 	str	x0, [x19, #48]
   a29f8:	f240043f 	tst	x1, #0x3
   a29fc:	54fffae1 	b.ne	a2958 <CScreenDevice::Initialize()+0x58>  // b.any
   a2a00:	53017c21 	lsr	w1, w1, #1
   a2a04:	b9004661 	str	w1, [x19, #68]
   a2a08:	1400000b 	b	a2a34 <CScreenDevice::Initialize()+0x134>
   a2a0c:	9100a015 	add	x21, x0, #0x28
   a2a10:	29420400 	ldp	w0, w1, [x0, #16]
   a2a14:	29088260 	stp	w0, w0, [x19, #68]
   a2a18:	1b017c00 	mul	w0, w0, w1
   a2a1c:	b9004e61 	str	w1, [x19, #76]
   a2a20:	531f7801 	lsl	w1, w0, #1
   a2a24:	d37f7c00 	ubfiz	x0, x0, #1, #32
   a2a28:	b9004261 	str	w1, [x19, #64]
   a2a2c:	94001615 	bl	a8280 <operator new[](unsigned long)>
   a2a30:	f9001e60 	str	x0, [x19, #56]
   a2a34:	b9404e74 	ldr	w20, [x19, #76]
   a2a38:	aa1503e0 	mov	x0, x21
   a2a3c:	94002bd9 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a2a40:	2a0003e1 	mov	w1, w0
   a2a44:	aa1503e0 	mov	x0, x21
   a2a48:	1ac10a94 	udiv	w20, w20, w1
   a2a4c:	94002bd5 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a2a50:	b9405a62 	ldr	w2, [x19, #88]
   a2a54:	2a0003e1 	mov	w1, w0
   a2a58:	aa1303e0 	mov	x0, x19
   a2a5c:	1b017e81 	mul	w1, w20, w1
   a2a60:	b9006662 	str	w2, [x19, #100]
   a2a64:	b9005261 	str	w1, [x19, #80]
   a2a68:	290bfe61 	stp	w1, wzr, [x19, #92]
   a2a6c:	97ffff19 	bl	a26d0 <CScreenDevice::ClearDisplayEnd()>
   a2a70:	3941a260 	ldrb	w0, [x19, #104]
   a2a74:	34000060 	cbz	w0, a2a80 <CScreenDevice::Initialize()+0x180>
   a2a78:	aa1303e0 	mov	x0, x19
   a2a7c:	97fffad1 	bl	a15c0 <CScreenDevice::InvertCursor() [clone .part.0]>
   a2a80:	97fff094 	bl	9ecd0 <CDeviceNameService::Get()>
   a2a84:	b9401e62 	ldr	w2, [x19, #28]
   a2a88:	900000d5 	adrp	x21, ba000 <CursorSymbol+0x188>
   a2a8c:	912ba2b5 	add	x21, x21, #0xae8
   a2a90:	52800034 	mov	w20, #0x1                   	// #1
   a2a94:	aa1503e1 	mov	x1, x21
   a2a98:	52800003 	mov	w3, #0x0                   	// #0
   a2a9c:	0b140042 	add	w2, w2, w20
   a2aa0:	97fff0d4 	bl	9edf0 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>
   a2aa4:	b5fff5a0 	cbnz	x0, a2958 <CScreenDevice::Initialize()+0x58>
   a2aa8:	97fff08a 	bl	9ecd0 <CDeviceNameService::Get()>
   a2aac:	b9401e62 	ldr	w2, [x19, #28]
   a2ab0:	aa1503e1 	mov	x1, x21
   a2ab4:	aa1303e3 	mov	x3, x19
   a2ab8:	52800004 	mov	w4, #0x0                   	// #0
   a2abc:	0b140042 	add	w2, w2, w20
   a2ac0:	97fff090 	bl	9ed00 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   a2ac4:	17ffffa5 	b	a2958 <CScreenDevice::Initialize()+0x58>
   a2ac8:	d503201f 	nop
   a2acc:	d503201f 	nop

00000000000a2ad0 <CScreenDevice::Resize(unsigned int, unsigned int)>:
   a2ad0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a2ad4:	910003fd 	mov	x29, sp
   a2ad8:	a90153f3 	stp	x19, x20, [sp, #16]
   a2adc:	aa0003f3 	mov	x19, x0
   a2ae0:	2a0203f4 	mov	w20, w2
   a2ae4:	39406000 	ldrb	w0, [x0, #24]
   a2ae8:	a9025bf5 	stp	x21, x22, [sp, #32]
   a2aec:	2a0103f5 	mov	w21, w1
   a2af0:	34000080 	cbz	w0, a2b00 <CScreenDevice::Resize(unsigned int, unsigned int)+0x30>
   a2af4:	f9401e60 	ldr	x0, [x19, #56]
   a2af8:	b4000040 	cbz	x0, a2b00 <CScreenDevice::Resize(unsigned int, unsigned int)+0x30>
   a2afc:	940015f5 	bl	a82d0 <operator delete[](void*)>
   a2b00:	f9001e7f 	str	xzr, [x19, #56]
   a2b04:	f9401276 	ldr	x22, [x19, #32]
   a2b08:	b40000d6 	cbz	x22, a2b20 <CScreenDevice::Resize(unsigned int, unsigned int)+0x50>
   a2b0c:	aa1603e0 	mov	x0, x22
   a2b10:	940029f0 	bl	ad2d0 <CBcmFrameBuffer::~CBcmFrameBuffer()>
   a2b14:	aa1603e0 	mov	x0, x22
   a2b18:	d2801401 	mov	x1, #0xa0                  	// #160
   a2b1c:	940015f9 	bl	a8300 <operator delete(void*, unsigned long)>
   a2b20:	f900127f 	str	xzr, [x19, #32]
   a2b24:	f9401a60 	ldr	x0, [x19, #48]
   a2b28:	b4000040 	cbz	x0, a2b30 <CScreenDevice::Resize(unsigned int, unsigned int)+0x60>
   a2b2c:	940015e9 	bl	a82d0 <operator delete[](void*)>
   a2b30:	52800022 	mov	w2, #0x1                   	// #1
   a2b34:	529ffbe1 	mov	w1, #0xffdf                	// #65503
   a2b38:	29025275 	stp	w21, w20, [x19, #16]
   a2b3c:	aa1303e0 	mov	x0, x19
   a2b40:	f9001a7f 	str	xzr, [x19, #48]
   a2b44:	290afe7f 	stp	wzr, wzr, [x19, #84]
   a2b48:	f900327f 	str	xzr, [x19, #96]
   a2b4c:	3901a262 	strb	w2, [x19, #104]
   a2b50:	3901aa7f 	strb	wzr, [x19, #106]
   a2b54:	b9006e61 	str	w1, [x19, #108]
   a2b58:	7900e27f 	strh	wzr, [x19, #112]
   a2b5c:	3901f27f 	strb	wzr, [x19, #124]
   a2b60:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2b64:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a2b68:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a2b6c:	17ffff65 	b	a2900 <CScreenDevice::Initialize()>

00000000000a2b70 <CScreenDevice::Write(char)>:
   a2b70:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a2b74:	910003fd 	mov	x29, sp
   a2b78:	13001c21 	sxtb	w1, w1
   a2b7c:	b9405402 	ldr	w2, [x0, #84]
   a2b80:	a90153f3 	stp	x19, x20, [sp, #16]
   a2b84:	aa0003f3 	mov	x19, x0
   a2b88:	7100105f 	cmp	w2, #0x4
   a2b8c:	54000be0 	b.eq	a2d08 <CScreenDevice::Write(char)+0x198>  // b.none
   a2b90:	54000348 	b.hi	a2bf8 <CScreenDevice::Write(char)+0x88>  // b.pmore
   a2b94:	7100085f 	cmp	w2, #0x2
   a2b98:	54000ca0 	b.eq	a2d2c <CScreenDevice::Write(char)+0x1bc>  // b.none
   a2b9c:	71000c5f 	cmp	w2, #0x3
   a2ba0:	540001a1 	b.ne	a2bd4 <CScreenDevice::Write(char)+0x64>  // b.any
   a2ba4:	7101403f 	cmp	w1, #0x50
   a2ba8:	54000200 	b.eq	a2be8 <CScreenDevice::Write(char)+0x78>  // b.none
   a2bac:	540007ad 	b.le	a2ca0 <CScreenDevice::Write(char)+0x130>
   a2bb0:	7101b03f 	cmp	w1, #0x6c
   a2bb4:	540009c0 	b.eq	a2cec <CScreenDevice::Write(char)+0x17c>  // b.none
   a2bb8:	5400068d 	b.le	a2c88 <CScreenDevice::Write(char)+0x118>
   a2bbc:	7101b43f 	cmp	w1, #0x6d
   a2bc0:	54000141 	b.ne	a2be8 <CScreenDevice::Write(char)+0x78>  // b.any
   a2bc4:	b9407401 	ldr	w1, [x0, #116]
   a2bc8:	97fffc66 	bl	a1d60 <CScreenDevice::SetStandoutMode(unsigned int)>
   a2bcc:	b900541f 	str	wzr, [x0, #84]
   a2bd0:	14000007 	b	a2bec <CScreenDevice::Write(char)+0x7c>
   a2bd4:	34000e42 	cbz	w2, a2d9c <CScreenDevice::Write(char)+0x22c>
   a2bd8:	7100045f 	cmp	w2, #0x1
   a2bdc:	54000061 	b.ne	a2be8 <CScreenDevice::Write(char)+0x78>  // b.any
   a2be0:	71016c3f 	cmp	w1, #0x5b
   a2be4:	54001500 	b.eq	a2e84 <CScreenDevice::Write(char)+0x314>  // b.none
   a2be8:	b900567f 	str	wzr, [x19, #84]
   a2bec:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2bf0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a2bf4:	d65f03c0 	ret
   a2bf8:	7100185f 	cmp	w2, #0x6
   a2bfc:	54000b20 	b.eq	a2d60 <CScreenDevice::Write(char)+0x1f0>  // b.none
   a2c00:	71001c5f 	cmp	w2, #0x7
   a2c04:	540001e1 	b.ne	a2c40 <CScreenDevice::Write(char)+0xd0>  // b.any
   a2c08:	121d7820 	and	w0, w1, #0xfffffffb
   a2c0c:	7101a01f 	cmp	w0, #0x68
   a2c10:	540002e0 	b.eq	a2c6c <CScreenDevice::Write(char)+0xfc>  // b.none
   a2c14:	5100c021 	sub	w1, w1, #0x30
   a2c18:	12001c20 	and	w0, w1, #0xff
   a2c1c:	7100241f 	cmp	w0, #0x9
   a2c20:	54fffe48 	b.hi	a2be8 <CScreenDevice::Write(char)+0x78>  // b.pmore
   a2c24:	b9407660 	ldr	w0, [x19, #116]
   a2c28:	0b000800 	add	w0, w0, w0, lsl #2
   a2c2c:	0b000420 	add	w0, w1, w0, lsl #1
   a2c30:	71018c1f 	cmp	w0, #0x63
   a2c34:	b9007660 	str	w0, [x19, #116]
   a2c38:	54fffd88 	b.hi	a2be8 <CScreenDevice::Write(char)+0x78>  // b.pmore
   a2c3c:	17ffffec 	b	a2bec <CScreenDevice::Write(char)+0x7c>
   a2c40:	7100145f 	cmp	w2, #0x5
   a2c44:	54fffd21 	b.ne	a2be8 <CScreenDevice::Write(char)+0x78>  // b.any
   a2c48:	5100c021 	sub	w1, w1, #0x30
   a2c4c:	12001c20 	and	w0, w1, #0xff
   a2c50:	7100241f 	cmp	w0, #0x9
   a2c54:	54fffca8 	b.hi	a2be8 <CScreenDevice::Write(char)+0x78>  // b.pmore
   a2c58:	13001c21 	sxtb	w1, w1
   a2c5c:	528000c0 	mov	w0, #0x6                   	// #6
   a2c60:	b9005660 	str	w0, [x19, #84]
   a2c64:	b9007a61 	str	w1, [x19, #120]
   a2c68:	17ffffe1 	b	a2bec <CScreenDevice::Write(char)+0x7c>
   a2c6c:	b9407660 	ldr	w0, [x19, #116]
   a2c70:	7100641f 	cmp	w0, #0x19
   a2c74:	54fffba1 	b.ne	a2be8 <CScreenDevice::Write(char)+0x78>  // b.any
   a2c78:	7101a03f 	cmp	w1, #0x68
   a2c7c:	1a9f17e0 	cset	w0, eq	// eq = none
   a2c80:	3901a260 	strb	w0, [x19, #104]
   a2c84:	17ffffd9 	b	a2be8 <CScreenDevice::Write(char)+0x78>
   a2c88:	7101603f 	cmp	w1, #0x58
   a2c8c:	540002c1 	b.ne	a2ce4 <CScreenDevice::Write(char)+0x174>  // b.any
   a2c90:	b9407401 	ldr	w1, [x0, #116]
   a2c94:	34fffaa1 	cbz	w1, a2be8 <CScreenDevice::Write(char)+0x78>
   a2c98:	97fffe6a 	bl	a2640 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>
   a2c9c:	17ffffd3 	b	a2be8 <CScreenDevice::Write(char)+0x78>
   a2ca0:	7100ec3f 	cmp	w1, #0x3b
   a2ca4:	54001600 	b.eq	a2f64 <CScreenDevice::Write(char)+0x3f4>  // b.none
   a2ca8:	51013020 	sub	w0, w1, #0x4c
   a2cac:	12001c00 	and	w0, w0, #0xff
   a2cb0:	7100041f 	cmp	w0, #0x1
   a2cb4:	54fff9a9 	b.ls	a2be8 <CScreenDevice::Write(char)+0x78>  // b.plast
   a2cb8:	5100c021 	sub	w1, w1, #0x30
   a2cbc:	12001c20 	and	w0, w1, #0xff
   a2cc0:	7100241f 	cmp	w0, #0x9
   a2cc4:	54fff928 	b.hi	a2be8 <CScreenDevice::Write(char)+0x78>  // b.pmore
   a2cc8:	b9407660 	ldr	w0, [x19, #116]
   a2ccc:	0b000800 	add	w0, w0, w0, lsl #2
   a2cd0:	0b000420 	add	w0, w1, w0, lsl #1
   a2cd4:	71031c1f 	cmp	w0, #0xc7
   a2cd8:	b9007660 	str	w0, [x19, #116]
   a2cdc:	54fff868 	b.hi	a2be8 <CScreenDevice::Write(char)+0x78>  // b.pmore
   a2ce0:	17ffffc3 	b	a2bec <CScreenDevice::Write(char)+0x7c>
   a2ce4:	7101a03f 	cmp	w1, #0x68
   a2ce8:	54fff801 	b.ne	a2be8 <CScreenDevice::Write(char)+0x78>  // b.any
   a2cec:	b9407660 	ldr	w0, [x19, #116]
   a2cf0:	7100101f 	cmp	w0, #0x4
   a2cf4:	54fff7a1 	b.ne	a2be8 <CScreenDevice::Write(char)+0x78>  // b.any
   a2cf8:	7101a03f 	cmp	w1, #0x68
   a2cfc:	1a9f17e0 	cset	w0, eq	// eq = none
   a2d00:	3901c660 	strb	w0, [x19, #113]
   a2d04:	17ffffb9 	b	a2be8 <CScreenDevice::Write(char)+0x78>
   a2d08:	5100c021 	sub	w1, w1, #0x30
   a2d0c:	12001c20 	and	w0, w1, #0xff
   a2d10:	7100241f 	cmp	w0, #0x9
   a2d14:	54fff6a8 	b.hi	a2be8 <CScreenDevice::Write(char)+0x78>  // b.pmore
   a2d18:	13001c21 	sxtb	w1, w1
   a2d1c:	528000e0 	mov	w0, #0x7                   	// #7
   a2d20:	b9005660 	str	w0, [x19, #84]
   a2d24:	b9007661 	str	w1, [x19, #116]
   a2d28:	17ffffb1 	b	a2bec <CScreenDevice::Write(char)+0x7c>
   a2d2c:	7101203f 	cmp	w1, #0x48
   a2d30:	540012c0 	b.eq	a2f88 <CScreenDevice::Write(char)+0x418>  // b.none
   a2d34:	5400064c 	b.gt	a2dfc <CScreenDevice::Write(char)+0x28c>
   a2d38:	7101083f 	cmp	w1, #0x42
   a2d3c:	54001340 	b.eq	a2fa4 <CScreenDevice::Write(char)+0x434>  // b.none
   a2d40:	5400042d 	b.le	a2dc4 <CScreenDevice::Write(char)+0x254>
   a2d44:	71010c3f 	cmp	w1, #0x43
   a2d48:	54001280 	b.eq	a2f98 <CScreenDevice::Write(char)+0x428>  // b.none
   a2d4c:	7101103f 	cmp	w1, #0x44
   a2d50:	54fff4c1 	b.ne	a2be8 <CScreenDevice::Write(char)+0x78>  // b.any
   a2d54:	97fffb5b 	bl	a1ac0 <CScreenDevice::CursorLeft()>
   a2d58:	b900567f 	str	wzr, [x19, #84]
   a2d5c:	17ffffa4 	b	a2bec <CScreenDevice::Write(char)+0x7c>
   a2d60:	7101203f 	cmp	w1, #0x48
   a2d64:	54000960 	b.eq	a2e90 <CScreenDevice::Write(char)+0x320>  // b.none
   a2d68:	7101c83f 	cmp	w1, #0x72
   a2d6c:	540009a0 	b.eq	a2ea0 <CScreenDevice::Write(char)+0x330>  // b.none
   a2d70:	5100c021 	sub	w1, w1, #0x30
   a2d74:	12001c20 	and	w0, w1, #0xff
   a2d78:	7100241f 	cmp	w0, #0x9
   a2d7c:	54fff368 	b.hi	a2be8 <CScreenDevice::Write(char)+0x78>  // b.pmore
   a2d80:	b9407a60 	ldr	w0, [x19, #120]
   a2d84:	0b000800 	add	w0, w0, w0, lsl #2
   a2d88:	0b000420 	add	w0, w1, w0, lsl #1
   a2d8c:	71031c1f 	cmp	w0, #0xc7
   a2d90:	b9007a60 	str	w0, [x19, #120]
   a2d94:	54fff2a8 	b.hi	a2be8 <CScreenDevice::Write(char)+0x78>  // b.pmore
   a2d98:	17ffff95 	b	a2bec <CScreenDevice::Write(char)+0x7c>
   a2d9c:	7100283f 	cmp	w1, #0xa
   a2da0:	54000900 	b.eq	a2ec0 <CScreenDevice::Write(char)+0x350>  // b.none
   a2da4:	5400062c 	b.gt	a2e68 <CScreenDevice::Write(char)+0x2f8>
   a2da8:	7100203f 	cmp	w1, #0x8
   a2dac:	54000840 	b.eq	a2eb4 <CScreenDevice::Write(char)+0x344>  // b.none
   a2db0:	7100243f 	cmp	w1, #0x9
   a2db4:	54000aa1 	b.ne	a2f08 <CScreenDevice::Write(char)+0x398>  // b.any
   a2db8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2dbc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a2dc0:	17fffd38 	b	a22a0 <CScreenDevice::Tabulator()>
   a2dc4:	7100fc3f 	cmp	w1, #0x3f
   a2dc8:	54000d40 	b.eq	a2f70 <CScreenDevice::Write(char)+0x400>  // b.none
   a2dcc:	7101043f 	cmp	w1, #0x41
   a2dd0:	540010c1 	b.ne	a2fe8 <CScreenDevice::Write(char)+0x478>  // b.any
   a2dd4:	b9405800 	ldr	w0, [x0, #88]
   a2dd8:	b9406661 	ldr	w1, [x19, #100]
   a2ddc:	6b00003f 	cmp	w1, w0
   a2de0:	54fff049 	b.ls	a2be8 <CScreenDevice::Write(char)+0x78>  // b.plast
   a2de4:	9100a260 	add	x0, x19, #0x28
   a2de8:	94002aee 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a2dec:	b9406661 	ldr	w1, [x19, #100]
   a2df0:	4b000021 	sub	w1, w1, w0
   a2df4:	b9006661 	str	w1, [x19, #100]
   a2df8:	17ffff7c 	b	a2be8 <CScreenDevice::Write(char)+0x78>
   a2dfc:	7101343f 	cmp	w1, #0x4d
   a2e00:	54ffef4c 	b.gt	a2be8 <CScreenDevice::Write(char)+0x78>
   a2e04:	71012c3f 	cmp	w1, #0x4b
   a2e08:	54ffef0c 	b.gt	a2be8 <CScreenDevice::Write(char)+0x78>
   a2e0c:	7101283f 	cmp	w1, #0x4a
   a2e10:	54000b60 	b.eq	a2f7c <CScreenDevice::Write(char)+0x40c>  // b.none
   a2e14:	71012c3f 	cmp	w1, #0x4b
   a2e18:	54ffee81 	b.ne	a2be8 <CScreenDevice::Write(char)+0x78>  // b.any
   a2e1c:	b9404800 	ldr	w0, [x0, #72]
   a2e20:	b9406274 	ldr	w20, [x19, #96]
   a2e24:	6b14001f 	cmp	w0, w20
   a2e28:	54ffee09 	b.ls	a2be8 <CScreenDevice::Write(char)+0x78>  // b.plast
   a2e2c:	f90013f5 	str	x21, [sp, #32]
   a2e30:	9100a275 	add	x21, x19, #0x28
   a2e34:	d503201f 	nop
   a2e38:	b9406662 	ldr	w2, [x19, #100]
   a2e3c:	2a1403e1 	mov	w1, w20
   a2e40:	aa1303e0 	mov	x0, x19
   a2e44:	97fffdaf 	bl	a2500 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   a2e48:	aa1503e0 	mov	x0, x21
   a2e4c:	94002ad1 	bl	ad990 <CCharGenerator::GetCharWidth() const>
   a2e50:	b9404a61 	ldr	w1, [x19, #72]
   a2e54:	0b000294 	add	w20, w20, w0
   a2e58:	6b01029f 	cmp	w20, w1
   a2e5c:	54fffee3 	b.cc	a2e38 <CScreenDevice::Write(char)+0x2c8>  // b.lo, b.ul, b.last
   a2e60:	f94013f5 	ldr	x21, [sp, #32]
   a2e64:	17ffff61 	b	a2be8 <CScreenDevice::Write(char)+0x78>
   a2e68:	7100343f 	cmp	w1, #0xd
   a2e6c:	54000200 	b.eq	a2eac <CScreenDevice::Write(char)+0x33c>  // b.none
   a2e70:	71006c3f 	cmp	w1, #0x1b
   a2e74:	540004a1 	b.ne	a2f08 <CScreenDevice::Write(char)+0x398>  // b.any
   a2e78:	52800020 	mov	w0, #0x1                   	// #1
   a2e7c:	b9005660 	str	w0, [x19, #84]
   a2e80:	17ffff5b 	b	a2bec <CScreenDevice::Write(char)+0x7c>
   a2e84:	52800040 	mov	w0, #0x2                   	// #2
   a2e88:	b9005660 	str	w0, [x19, #84]
   a2e8c:	17ffff58 	b	a2bec <CScreenDevice::Write(char)+0x7c>
   a2e90:	294e8801 	ldp	w1, w2, [x0, #116]
   a2e94:	97fffb33 	bl	a1b60 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
   a2e98:	b900567f 	str	wzr, [x19, #84]
   a2e9c:	17ffff54 	b	a2bec <CScreenDevice::Write(char)+0x7c>
   a2ea0:	294e8801 	ldp	w1, w2, [x0, #116]
   a2ea4:	97fffb8f 	bl	a1ce0 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
   a2ea8:	17ffff50 	b	a2be8 <CScreenDevice::Write(char)+0x78>
   a2eac:	b900601f 	str	wzr, [x0, #96]
   a2eb0:	17ffff4f 	b	a2bec <CScreenDevice::Write(char)+0x7c>
   a2eb4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a2eb8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a2ebc:	17fffb01 	b	a1ac0 <CScreenDevice::CursorLeft()>
   a2ec0:	9100a014 	add	x20, x0, #0x28
   a2ec4:	b900627f 	str	wzr, [x19, #96]
   a2ec8:	aa1403e0 	mov	x0, x20
   a2ecc:	94002ab5 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a2ed0:	b9406662 	ldr	w2, [x19, #100]
   a2ed4:	b9405e61 	ldr	w1, [x19, #92]
   a2ed8:	0b020000 	add	w0, w0, w2
   a2edc:	6b01001f 	cmp	w0, w1
   a2ee0:	b9006660 	str	w0, [x19, #100]
   a2ee4:	54ffe843 	b.cc	a2bec <CScreenDevice::Write(char)+0x7c>  // b.lo, b.ul, b.last
   a2ee8:	aa1303e0 	mov	x0, x19
   a2eec:	97fffc0d 	bl	a1f20 <CScreenDevice::Scroll()>
   a2ef0:	aa1403e0 	mov	x0, x20
   a2ef4:	94002aab 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a2ef8:	b9406661 	ldr	w1, [x19, #100]
   a2efc:	4b000021 	sub	w1, w1, w0
   a2f00:	b9006661 	str	w1, [x19, #100]
   a2f04:	17ffff3a 	b	a2bec <CScreenDevice::Write(char)+0x7c>
   a2f08:	12001c20 	and	w0, w1, #0xff
   a2f0c:	71007c1f 	cmp	w0, #0x1f
   a2f10:	54ffe6e9 	b.ls	a2bec <CScreenDevice::Write(char)+0x7c>  // b.plast
   a2f14:	3941c264 	ldrb	w4, [x19, #112]
   a2f18:	aa1303e0 	mov	x0, x19
   a2f1c:	9100a274 	add	x20, x19, #0x28
   a2f20:	7940de65 	ldrh	w5, [x19, #110]
   a2f24:	294c0e62 	ldp	w2, w3, [x19, #96]
   a2f28:	7100009f 	cmp	w4, #0x0
   a2f2c:	7940da64 	ldrh	w4, [x19, #108]
   a2f30:	1a8410a4 	csel	w4, w5, w4, ne	// ne = any
   a2f34:	97fffd03 	bl	a2340 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   a2f38:	aa1403e0 	mov	x0, x20
   a2f3c:	94002a95 	bl	ad990 <CCharGenerator::GetCharWidth() const>
   a2f40:	b9406262 	ldr	w2, [x19, #96]
   a2f44:	b9404a61 	ldr	w1, [x19, #72]
   a2f48:	0b020000 	add	w0, w0, w2
   a2f4c:	6b01001f 	cmp	w0, w1
   a2f50:	b9006260 	str	w0, [x19, #96]
   a2f54:	54ffe4c3 	b.cc	a2bec <CScreenDevice::Write(char)+0x7c>  // b.lo, b.ul, b.last
   a2f58:	aa1403e0 	mov	x0, x20
   a2f5c:	b900627f 	str	wzr, [x19, #96]
   a2f60:	17ffffdb 	b	a2ecc <CScreenDevice::Write(char)+0x35c>
   a2f64:	528000a0 	mov	w0, #0x5                   	// #5
   a2f68:	b9005660 	str	w0, [x19, #84]
   a2f6c:	17ffff20 	b	a2bec <CScreenDevice::Write(char)+0x7c>
   a2f70:	52800080 	mov	w0, #0x4                   	// #4
   a2f74:	b9005660 	str	w0, [x19, #84]
   a2f78:	17ffff1d 	b	a2bec <CScreenDevice::Write(char)+0x7c>
   a2f7c:	97fffdd5 	bl	a26d0 <CScreenDevice::ClearDisplayEnd()>
   a2f80:	b900567f 	str	wzr, [x19, #84]
   a2f84:	17ffff1a 	b	a2bec <CScreenDevice::Write(char)+0x7c>
   a2f88:	b9405800 	ldr	w0, [x0, #88]
   a2f8c:	b900567f 	str	wzr, [x19, #84]
   a2f90:	290c027f 	stp	wzr, w0, [x19, #96]
   a2f94:	17ffff16 	b	a2bec <CScreenDevice::Write(char)+0x7c>
   a2f98:	97fffc9e 	bl	a2210 <CScreenDevice::CursorRight()>
   a2f9c:	b900567f 	str	wzr, [x19, #84]
   a2fa0:	17ffff13 	b	a2bec <CScreenDevice::Write(char)+0x7c>
   a2fa4:	9100a014 	add	x20, x0, #0x28
   a2fa8:	aa1403e0 	mov	x0, x20
   a2fac:	94002a7d 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a2fb0:	b9406662 	ldr	w2, [x19, #100]
   a2fb4:	b9405e61 	ldr	w1, [x19, #92]
   a2fb8:	0b020000 	add	w0, w0, w2
   a2fbc:	6b01001f 	cmp	w0, w1
   a2fc0:	b9006660 	str	w0, [x19, #100]
   a2fc4:	54ffe123 	b.cc	a2be8 <CScreenDevice::Write(char)+0x78>  // b.lo, b.ul, b.last
   a2fc8:	aa1303e0 	mov	x0, x19
   a2fcc:	97fffbd5 	bl	a1f20 <CScreenDevice::Scroll()>
   a2fd0:	aa1403e0 	mov	x0, x20
   a2fd4:	94002a73 	bl	ad9a0 <CCharGenerator::GetCharHeight() const>
   a2fd8:	b9406661 	ldr	w1, [x19, #100]
   a2fdc:	4b000021 	sub	w1, w1, w0
   a2fe0:	b9006661 	str	w1, [x19, #100]
   a2fe4:	17ffff01 	b	a2be8 <CScreenDevice::Write(char)+0x78>
   a2fe8:	5100c021 	sub	w1, w1, #0x30
   a2fec:	12001c20 	and	w0, w1, #0xff
   a2ff0:	7100241f 	cmp	w0, #0x9
   a2ff4:	54ffdfa8 	b.hi	a2be8 <CScreenDevice::Write(char)+0x78>  // b.pmore
   a2ff8:	13001c21 	sxtb	w1, w1
   a2ffc:	52800060 	mov	w0, #0x3                   	// #3
   a3000:	b9005660 	str	w0, [x19, #84]
   a3004:	b9007661 	str	w1, [x19, #116]
   a3008:	17fffef9 	b	a2bec <CScreenDevice::Write(char)+0x7c>
   a300c:	d503201f 	nop

00000000000a3010 <CScreenDevice::Write(void const*, unsigned long)>:
   a3010:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a3014:	910003fd 	mov	x29, sp
   a3018:	a90153f3 	stp	x19, x20, [sp, #16]
   a301c:	aa0003f4 	mov	x20, x0
   a3020:	b9411000 	ldr	w0, [x0, #272]
   a3024:	a9025bf5 	stp	x21, x22, [sp, #32]
   a3028:	aa0103f6 	mov	x22, x1
   a302c:	aa0203f5 	mov	x21, x2
   a3030:	f9001bf7 	str	x23, [sp, #48]
   a3034:	35000460 	cbnz	w0, a30c0 <CScreenDevice::Write(void const*, unsigned long)+0xb0>
   a3038:	52800021 	mov	w1, #0x1                   	// #1
   a303c:	3941a280 	ldrb	w0, [x20, #104]
   a3040:	d10006b7 	sub	x23, x21, #0x1
   a3044:	3901f281 	strb	w1, [x20, #124]
   a3048:	34000360 	cbz	w0, a30b4 <CScreenDevice::Write(void const*, unsigned long)+0xa4>
   a304c:	aa1403e0 	mov	x0, x20
   a3050:	97fff95c 	bl	a15c0 <CScreenDevice::InvertCursor() [clone .part.0]>
   a3054:	b40004b5 	cbz	x21, a30e8 <CScreenDevice::Write(void const*, unsigned long)+0xd8>
   a3058:	aa1603f3 	mov	x19, x22
   a305c:	d503201f 	nop
   a3060:	38401661 	ldrb	w1, [x19], #1
   a3064:	aa1403e0 	mov	x0, x20
   a3068:	97fffec2 	bl	a2b70 <CScreenDevice::Write(char)>
   a306c:	cb1302a3 	sub	x3, x21, x19
   a3070:	ab0302df 	cmn	x22, x3
   a3074:	54ffff61 	b.ne	a3060 <CScreenDevice::Write(void const*, unsigned long)+0x50>  // b.any
   a3078:	110006f7 	add	w23, w23, #0x1
   a307c:	3941a280 	ldrb	w0, [x20, #104]
   a3080:	34000060 	cbz	w0, a308c <CScreenDevice::Write(void const*, unsigned long)+0x7c>
   a3084:	aa1403e0 	mov	x0, x20
   a3088:	97fff94e 	bl	a15c0 <CScreenDevice::InvertCursor() [clone .part.0]>
   a308c:	b9411280 	ldr	w0, [x20, #272]
   a3090:	3901f29f 	strb	wzr, [x20, #124]
   a3094:	350001a0 	cbnz	w0, a30c8 <CScreenDevice::Write(void const*, unsigned long)+0xb8>
   a3098:	d5033fbf 	dmb	sy
   a309c:	2a1703e0 	mov	w0, w23
   a30a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a30a4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a30a8:	f9401bf7 	ldr	x23, [sp, #48]
   a30ac:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a30b0:	d65f03c0 	ret
   a30b4:	b5fffd35 	cbnz	x21, a3058 <CScreenDevice::Write(void const*, unsigned long)+0x48>
   a30b8:	52800017 	mov	w23, #0x0                   	// #0
   a30bc:	17fffff4 	b	a308c <CScreenDevice::Write(void const*, unsigned long)+0x7c>
   a30c0:	94001820 	bl	a9140 <EnterCritical>
   a30c4:	17ffffdd 	b	a3038 <CScreenDevice::Write(void const*, unsigned long)+0x28>
   a30c8:	9400184e 	bl	a9200 <LeaveCritical>
   a30cc:	d5033fbf 	dmb	sy
   a30d0:	2a1703e0 	mov	w0, w23
   a30d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a30d8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a30dc:	f9401bf7 	ldr	x23, [sp, #48]
   a30e0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a30e4:	d65f03c0 	ret
   a30e8:	52800017 	mov	w23, #0x0                   	// #0
   a30ec:	17ffffe4 	b	a307c <CScreenDevice::Write(void const*, unsigned long)+0x6c>

00000000000a30f0 <CScreenDevice::InvertCursor()>:
   a30f0:	3941a001 	ldrb	w1, [x0, #104]
   a30f4:	34000041 	cbz	w1, a30fc <CScreenDevice::InvertCursor()+0xc>
   a30f8:	17fff932 	b	a15c0 <CScreenDevice::InvertCursor() [clone .part.0]>
   a30fc:	d65f03c0 	ret

00000000000a3100 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
   a3100:	b9404804 	ldr	w4, [x0, #72]
   a3104:	12003c63 	and	w3, w3, #0xffff
   a3108:	6b01009f 	cmp	w4, w1
   a310c:	54000109 	b.ls	a312c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)+0x2c>  // b.plast
   a3110:	b9404c04 	ldr	w4, [x0, #76]
   a3114:	6b02009f 	cmp	w4, w2
   a3118:	540000a9 	b.ls	a312c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)+0x2c>  // b.plast
   a311c:	b9404404 	ldr	w4, [x0, #68]
   a3120:	f9401c00 	ldr	x0, [x0, #56]
   a3124:	1b040442 	madd	w2, w2, w4, w1
   a3128:	78227803 	strh	w3, [x0, x2, lsl #1]
   a312c:	d65f03c0 	ret

00000000000a3130 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
   a3130:	b9404803 	ldr	w3, [x0, #72]
   a3134:	6b01007f 	cmp	w3, w1
   a3138:	54000089 	b.ls	a3148 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x18>  // b.plast
   a313c:	b9404c03 	ldr	w3, [x0, #76]
   a3140:	6b02007f 	cmp	w3, w2
   a3144:	54000068 	b.hi	a3150 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x20>  // b.pmore
   a3148:	7940dc00 	ldrh	w0, [x0, #110]
   a314c:	d65f03c0 	ret
   a3150:	b9404403 	ldr	w3, [x0, #68]
   a3154:	f9401c00 	ldr	x0, [x0, #56]
   a3158:	1b030442 	madd	w2, w2, w3, w1
   a315c:	78627800 	ldrh	w0, [x0, x2, lsl #1]
   a3160:	d65f03c0 	ret
   a3164:	d503201f 	nop
   a3168:	d503201f 	nop
   a316c:	d503201f 	nop

00000000000a3170 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
   a3170:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a3174:	910003fd 	mov	x29, sp
   a3178:	a90153f3 	stp	x19, x20, [sp, #16]
   a317c:	aa0003f4 	mov	x20, x0
   a3180:	9100a000 	add	x0, x0, #0x28
   a3184:	2a0203f3 	mov	w19, w2
   a3188:	92400673 	and	x19, x19, #0x3
   a318c:	a9025bf5 	stp	x21, x22, [sp, #32]
   a3190:	12000435 	and	w21, w1, #0x3
   a3194:	b9404a96 	ldr	w22, [x20, #72]
   a3198:	940029fe 	bl	ad990 <CCharGenerator::GetCharWidth() const>
   a319c:	1b0002a2 	madd	w2, w21, w0, w0
   a31a0:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a31a4:	912ba021 	add	x1, x1, #0xae8
   a31a8:	91002021 	add	x1, x1, #0x8
   a31ac:	aa1403e0 	mov	x0, x20
   a31b0:	38616a61 	ldrb	w1, [x19, x1]
   a31b4:	1280aea4 	mov	w4, #0xfffffa8a            	// #-1398
   a31b8:	52800003 	mov	w3, #0x0                   	// #0
   a31bc:	4b0202c2 	sub	w2, w22, w2
   a31c0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a31c4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a31c8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a31cc:	17fffc5d 	b	a2340 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>

00000000000a31d0 <CSerialDevice::Read(void*, unsigned long)>:
   a31d0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a31d4:	910003fd 	mov	x29, sp
   a31d8:	a90153f3 	stp	x19, x20, [sp, #16]
   a31dc:	aa0003f3 	mov	x19, x0
   a31e0:	3940a000 	ldrb	w0, [x0, #40]
   a31e4:	f90013f5 	str	x21, [sp, #32]
   a31e8:	340008a0 	cbz	w0, a32fc <CSerialDevice::Read(void*, unsigned long)+0x12c>
   a31ec:	aa0103f4 	mov	x20, x1
   a31f0:	b4000901 	cbz	x1, a3310 <CSerialDevice::Read(void*, unsigned long)+0x140>
   a31f4:	f9400a60 	ldr	x0, [x19, #16]
   a31f8:	aa0203f5 	mov	x21, x2
   a31fc:	b4000540 	cbz	x0, a32a4 <CSerialDevice::Read(void*, unsigned long)+0xd4>
   a3200:	b9519260 	ldr	w0, [x19, #4496]
   a3204:	35000740 	cbnz	w0, a32ec <CSerialDevice::Read(void*, unsigned long)+0x11c>
   a3208:	b9495a60 	ldr	w0, [x19, #2392]
   a320c:	37f803c0 	tbnz	w0, #31, a3284 <CSerialDevice::Read(void*, unsigned long)+0xb4>
   a3210:	8b150283 	add	x3, x20, x21
   a3214:	52800000 	mov	w0, #0x0                   	// #0
   a3218:	b50001d5 	cbnz	x21, a3250 <CSerialDevice::Read(void*, unsigned long)+0x80>
   a321c:	1400001c 	b	a328c <CSerialDevice::Read(void*, unsigned long)+0xbc>
   a3220:	b9495661 	ldr	w1, [x19, #2388]
   a3224:	8b214262 	add	x2, x19, w1, uxtw
   a3228:	11000400 	add	w0, w0, #0x1
   a322c:	11000421 	add	w1, w1, #0x1
   a3230:	b9095661 	str	w1, [x19, #2388]
   a3234:	39454041 	ldrb	w1, [x2, #336]
   a3238:	38001681 	strb	w1, [x20], #1
   a323c:	eb14007f 	cmp	x3, x20
   a3240:	b9495661 	ldr	w1, [x19, #2388]
   a3244:	12002821 	and	w1, w1, #0x7ff
   a3248:	b9095661 	str	w1, [x19, #2388]
   a324c:	54000200 	b.eq	a328c <CSerialDevice::Read(void*, unsigned long)+0xbc>  // b.none
   a3250:	b9495262 	ldr	w2, [x19, #2384]
   a3254:	b9495661 	ldr	w1, [x19, #2388]
   a3258:	6b01005f 	cmp	w2, w1
   a325c:	54fffe21 	b.ne	a3220 <CSerialDevice::Read(void*, unsigned long)+0x50>  // b.any
   a3260:	b9519261 	ldr	w1, [x19, #4496]
   a3264:	34000181 	cbz	w1, a3294 <CSerialDevice::Read(void*, unsigned long)+0xc4>
   a3268:	b9003fe0 	str	w0, [sp, #60]
   a326c:	940017e5 	bl	a9200 <LeaveCritical>
   a3270:	b9403fe0 	ldr	w0, [sp, #60]
   a3274:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3278:	f94013f5 	ldr	x21, [sp, #32]
   a327c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a3280:	d65f03c0 	ret
   a3284:	b9495a60 	ldr	w0, [x19, #2392]
   a3288:	b9095a7f 	str	wzr, [x19, #2392]
   a328c:	b9519261 	ldr	w1, [x19, #4496]
   a3290:	35fffec1 	cbnz	w1, a3268 <CSerialDevice::Read(void*, unsigned long)+0x98>
   a3294:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3298:	f94013f5 	ldr	x21, [sp, #32]
   a329c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a32a0:	d65f03c0 	ret
   a32a4:	b4ffff82 	cbz	x2, a3294 <CSerialDevice::Read(void*, unsigned long)+0xc4>
   a32a8:	8b020035 	add	x21, x1, x2
   a32ac:	52800000 	mov	w0, #0x0                   	// #0
   a32b0:	14000008 	b	a32d0 <CSerialDevice::Read(void*, unsigned long)+0x100>
   a32b4:	37580381 	tbnz	w1, #11, a3324 <CSerialDevice::Read(void*, unsigned long)+0x154>
   a32b8:	374003a1 	tbnz	w1, #8, a332c <CSerialDevice::Read(void*, unsigned long)+0x15c>
   a32bc:	374803c1 	tbnz	w1, #9, a3334 <CSerialDevice::Read(void*, unsigned long)+0x164>
   a32c0:	38001681 	strb	w1, [x20], #1
   a32c4:	eb1402bf 	cmp	x21, x20
   a32c8:	11000400 	add	w0, w0, #0x1
   a32cc:	54fffe40 	b.eq	a3294 <CSerialDevice::Read(void*, unsigned long)+0xc4>  // b.none
   a32d0:	f9401261 	ldr	x1, [x19, #32]
   a32d4:	b9401822 	ldr	w2, [x1, #24]
   a32d8:	3727fde2 	tbnz	w2, #4, a3294 <CSerialDevice::Read(void*, unsigned long)+0xc4>
   a32dc:	b9400021 	ldr	w1, [x1]
   a32e0:	3657fea1 	tbz	w1, #10, a32b4 <CSerialDevice::Read(void*, unsigned long)+0xe4>
   a32e4:	12800000 	mov	w0, #0xffffffff            	// #-1
   a32e8:	17ffffeb 	b	a3294 <CSerialDevice::Read(void*, unsigned long)+0xc4>
   a32ec:	94001795 	bl	a9140 <EnterCritical>
   a32f0:	b9495a60 	ldr	w0, [x19, #2392]
   a32f4:	36fff8e0 	tbz	w0, #31, a3210 <CSerialDevice::Read(void*, unsigned long)+0x40>
   a32f8:	17ffffe3 	b	a3284 <CSerialDevice::Read(void*, unsigned long)+0xb4>
   a32fc:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a3300:	912e6021 	add	x1, x1, #0xb98
   a3304:	91004020 	add	x0, x1, #0x10
   a3308:	528048a2 	mov	w2, #0x245                 	// #581
   a330c:	97ffea8d 	bl	9dd40 <assertion_failed>
   a3310:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a3314:	912e6021 	add	x1, x1, #0xb98
   a3318:	91008020 	add	x0, x1, #0x20
   a331c:	52804902 	mov	w2, #0x248                 	// #584
   a3320:	97ffea88 	bl	9dd40 <assertion_failed>
   a3324:	12800020 	mov	w0, #0xfffffffe            	// #-2
   a3328:	17ffffdb 	b	a3294 <CSerialDevice::Read(void*, unsigned long)+0xc4>
   a332c:	12800040 	mov	w0, #0xfffffffd            	// #-3
   a3330:	17ffffd9 	b	a3294 <CSerialDevice::Read(void*, unsigned long)+0xc4>
   a3334:	12800060 	mov	w0, #0xfffffffc            	// #-4
   a3338:	17ffffd7 	b	a3294 <CSerialDevice::Read(void*, unsigned long)+0xc4>
   a333c:	d503201f 	nop

00000000000a3340 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>:
   a3340:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   a3344:	910003fd 	mov	x29, sp
   a3348:	a90153f3 	stp	x19, x20, [sp, #16]
   a334c:	aa0003f3 	mov	x19, x0
   a3350:	2a0303f4 	mov	w20, w3
   a3354:	a9025bf5 	stp	x21, x22, [sp, #32]
   a3358:	aa0103f6 	mov	x22, x1
   a335c:	12001c55 	and	w21, w2, #0xff
   a3360:	a90363f7 	stp	x23, x24, [sp, #48]
   a3364:	9101e277 	add	x23, x19, #0x78
   a3368:	91030278 	add	x24, x19, #0xc0
   a336c:	a9046bf9 	stp	x25, x26, [sp, #64]
   a3370:	52800039 	mov	w25, #0x1                   	// #1
   a3374:	a90573fb 	stp	x27, x28, [sp, #80]
   a3378:	9100c27b 	add	x27, x19, #0x30
   a337c:	97ffecf5 	bl	9e750 <CDevice::CDevice()>
   a3380:	f00000a2 	adrp	x2, ba000 <CursorSymbol+0x188>
   a3384:	912d6042 	add	x2, x2, #0xb58
   a3388:	f9000a76 	str	x22, [x19, #16]
   a338c:	aa1b03e0 	mov	x0, x27
   a3390:	39006275 	strb	w21, [x19, #24]
   a3394:	91042276 	add	x22, x19, #0x108
   a3398:	f9000262 	str	x2, [x19]
   a339c:	0b1902b5 	add	w21, w21, w25
   a33a0:	b9001e74 	str	w20, [x19, #28]
   a33a4:	f900127f 	str	xzr, [x19, #32]
   a33a8:	3900a27f 	strb	wzr, [x19, #40]
   a33ac:	940022b9 	bl	abe90 <CGPIOPin::CGPIOPin()>
   a33b0:	aa1703e0 	mov	x0, x23
   a33b4:	940022b7 	bl	abe90 <CGPIOPin::CGPIOPin()>
   a33b8:	aa1803e0 	mov	x0, x24
   a33bc:	940022b5 	bl	abe90 <CGPIOPin::CGPIOPin()>
   a33c0:	aa1603e0 	mov	x0, x22
   a33c4:	940022b3 	bl	abe90 <CGPIOPin::CGPIOPin()>
   a33c8:	b9401e60 	ldr	w0, [x19, #28]
   a33cc:	b909527f 	str	wzr, [x19, #2384]
   a33d0:	b909567f 	str	wzr, [x19, #2388]
   a33d4:	b9095a7f 	str	wzr, [x19, #2392]
   a33d8:	b9115e7f 	str	wzr, [x19, #4444]
   a33dc:	7100141f 	cmp	w0, #0x5
   a33e0:	b911627f 	str	wzr, [x19, #4448]
   a33e4:	b9116679 	str	w25, [x19, #4452]
   a33e8:	f908b67f 	str	xzr, [x19, #4456]
   a33ec:	f908be7f 	str	xzr, [x19, #4472]
   a33f0:	b9119275 	str	w21, [x19, #4496]
   a33f4:	b9119679 	str	w25, [x19, #4500]
   a33f8:	54000428 	b.hi	a347c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x13c>  // b.pmore
   a33fc:	f00000b5 	adrp	x21, ba000 <CursorSymbol+0x188>
   a3400:	912e62b5 	add	x21, x21, #0xb98
   a3404:	9100c2a2 	add	x2, x21, #0x30
   a3408:	d37c7e81 	ubfiz	x1, x20, #4, #32
   a340c:	b861685c 	ldr	w28, [x2, x1]
   a3410:	2a1403fa 	mov	w26, w20
   a3414:	7100db9f 	cmp	w28, #0x36
   a3418:	54000328 	b.hi	a347c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x13c>  // b.pmore
   a341c:	2a0003e0 	mov	w0, w0
   a3420:	d00000c1 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   a3424:	9105c021 	add	x1, x1, #0x170
   a3428:	f8607822 	ldr	x2, [x1, x0, lsl #3]
   a342c:	b50008c2 	cbnz	x2, a3544 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x204>
   a3430:	9102a2a2 	add	x2, x21, #0xa8
   a3434:	f8207833 	str	x19, [x1, x0, lsl #3]
   a3438:	f87a7840 	ldr	x0, [x2, x26, lsl #3]
   a343c:	f9001260 	str	x0, [x19, #32]
   a3440:	b40008a0 	cbz	x0, a3554 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x214>
   a3444:	340002b4 	cbz	w20, a3498 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x158>
   a3448:	8b1a12a0 	add	x0, x21, x26, lsl #4
   a344c:	b9403414 	ldr	w20, [x0, #52]
   a3450:	11001694 	add	w20, w20, #0x5
   a3454:	71002a9f 	cmp	w20, #0xa
   a3458:	5400046d 	b.le	a34e4 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1a4>
   a345c:	9100c2b5 	add	x21, x21, #0x30
   a3460:	8b1a12ba 	add	x26, x21, x26, lsl #4
   a3464:	b9400f54 	ldr	w20, [x26, #12]
   a3468:	11001694 	add	w20, w20, #0x5
   a346c:	71002a9f 	cmp	w20, #0xa
   a3470:	5400054d 	b.le	a3518 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1d8>
   a3474:	52800020 	mov	w0, #0x1                   	// #1
   a3478:	3900a260 	strb	w0, [x19, #40]
   a347c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3480:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a3484:	a94363f7 	ldp	x23, x24, [sp, #48]
   a3488:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a348c:	a94573fb 	ldp	x27, x28, [sp, #80]
   a3490:	a8c67bfd 	ldp	x29, x30, [sp], #96
   a3494:	d65f03c0 	ret
   a3498:	52800401 	mov	w1, #0x20                  	// #32
   a349c:	aa1b03e0 	mov	x0, x27
   a34a0:	94002288 	bl	abec0 <CGPIOPin::AssignPin(unsigned int)>
   a34a4:	2a1903e2 	mov	w2, w25
   a34a8:	2a1903e1 	mov	w1, w25
   a34ac:	aa1b03e0 	mov	x0, x27
   a34b0:	94002570 	bl	aca70 <CGPIOPin::SetMode(TGPIOMode, bool)>
   a34b4:	52800421 	mov	w1, #0x21                  	// #33
   a34b8:	aa1703e0 	mov	x0, x23
   a34bc:	94002281 	bl	abec0 <CGPIOPin::AssignPin(unsigned int)>
   a34c0:	aa1703e0 	mov	x0, x23
   a34c4:	2a1903e2 	mov	w2, w25
   a34c8:	2a1903e1 	mov	w1, w25
   a34cc:	94002569 	bl	aca70 <CGPIOPin::SetMode(TGPIOMode, bool)>
   a34d0:	8b1a12a0 	add	x0, x21, x26, lsl #4
   a34d4:	b9403414 	ldr	w20, [x0, #52]
   a34d8:	11001694 	add	w20, w20, #0x5
   a34dc:	71002a9f 	cmp	w20, #0xa
   a34e0:	54fffbec 	b.gt	a345c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x11c>
   a34e4:	2a1c03e1 	mov	w1, w28
   a34e8:	aa1803e0 	mov	x0, x24
   a34ec:	9100c2b5 	add	x21, x21, #0x30
   a34f0:	94002274 	bl	abec0 <CGPIOPin::AssignPin(unsigned int)>
   a34f4:	8b1a12ba 	add	x26, x21, x26, lsl #4
   a34f8:	2a1403e1 	mov	w1, w20
   a34fc:	aa1803e0 	mov	x0, x24
   a3500:	52800022 	mov	w2, #0x1                   	// #1
   a3504:	9400255b 	bl	aca70 <CGPIOPin::SetMode(TGPIOMode, bool)>
   a3508:	b9400f54 	ldr	w20, [x26, #12]
   a350c:	11001694 	add	w20, w20, #0x5
   a3510:	71002a9f 	cmp	w20, #0xa
   a3514:	54fffb0c 	b.gt	a3474 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x134>
   a3518:	b9400b41 	ldr	w1, [x26, #8]
   a351c:	aa1603e0 	mov	x0, x22
   a3520:	94002268 	bl	abec0 <CGPIOPin::AssignPin(unsigned int)>
   a3524:	aa1603e0 	mov	x0, x22
   a3528:	52800022 	mov	w2, #0x1                   	// #1
   a352c:	2a1403e1 	mov	w1, w20
   a3530:	94002550 	bl	aca70 <CGPIOPin::SetMode(TGPIOMode, bool)>
   a3534:	aa1603e0 	mov	x0, x22
   a3538:	52800041 	mov	w1, #0x2                   	// #2
   a353c:	940024dd 	bl	ac8b0 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   a3540:	17ffffcd 	b	a3474 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x134>
   a3544:	52801e22 	mov	w2, #0xf1                  	// #241
   a3548:	aa1503e1 	mov	x1, x21
   a354c:	910242a0 	add	x0, x21, #0x90
   a3550:	97ffe9fc 	bl	9dd40 <assertion_failed>
   a3554:	52801ea2 	mov	w2, #0xf5                  	// #245
   a3558:	aa1503e1 	mov	x1, x21
   a355c:	910362a0 	add	x0, x21, #0xd8
   a3560:	97ffe9f8 	bl	9dd40 <assertion_failed>
   a3564:	d503201f 	nop
   a3568:	d503201f 	nop
   a356c:	d503201f 	nop

00000000000a3570 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)>:
   a3570:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   a3574:	910003fd 	mov	x29, sp
   a3578:	a90363f7 	stp	x23, x24, [sp, #48]
   a357c:	3940a018 	ldrb	w24, [x0, #40]
   a3580:	350000b8 	cbnz	w24, a3594 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x24>
   a3584:	2a1803e0 	mov	w0, w24
   a3588:	a94363f7 	ldp	x23, x24, [sp, #48]
   a358c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a3590:	d65f03c0 	ret
   a3594:	2a0303f7 	mov	w23, w3
   a3598:	a90153f3 	stp	x19, x20, [sp, #16]
   a359c:	2a0103f4 	mov	w20, w1
   a35a0:	aa0003f3 	mov	x19, x0
   a35a4:	a9025bf5 	stp	x21, x22, [sp, #32]
   a35a8:	2a0203f5 	mov	w21, w2
   a35ac:	2a0403f6 	mov	w22, w4
   a35b0:	a9046bf9 	stp	x25, x26, [sp, #64]
   a35b4:	97fff69b 	bl	a1020 <CMachineInfo::Get()>
   a35b8:	52800041 	mov	w1, #0x2                   	// #2
   a35bc:	97fff3b5 	bl	a0490 <CMachineInfo::GetClockRate(unsigned int) const>
   a35c0:	340010e0 	cbz	w0, a37dc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x26c>
   a35c4:	5104b282 	sub	w2, w20, #0x12c
   a35c8:	5280fa81 	mov	w1, #0x7d4                 	// #2004
   a35cc:	72a007a1 	movk	w1, #0x3d, lsl #16
   a35d0:	6b01005f 	cmp	w2, w1
   a35d4:	540010e8 	b.hi	a37f0 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x280>  // b.pmore
   a35d8:	531c6e85 	lsl	w5, w20, #4
   a35dc:	529fffc1 	mov	w1, #0xfffe                	// #65534
   a35e0:	1ac5081a 	udiv	w26, w0, w5
   a35e4:	51000742 	sub	w2, w26, #0x1
   a35e8:	6b01005f 	cmp	w2, w1
   a35ec:	540010c8 	b.hi	a3804 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x294>  // b.pmore
   a35f0:	1b058345 	msub	w5, w26, w5, w0
   a35f4:	531d70a5 	lsl	w5, w5, #3
   a35f8:	1ad408a1 	udiv	w1, w5, w20
   a35fc:	12000020 	and	w0, w1, #0x1
   a3600:	0b410414 	add	w20, w0, w1, lsr #1
   a3604:	7100fe9f 	cmp	w20, #0x3f
   a3608:	540010c8 	b.hi	a3820 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2b0>  // b.pmore
   a360c:	f9400a60 	ldr	x0, [x19, #16]
   a3610:	b4000260 	cbz	x0, a365c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xec>
   a3614:	d00000d9 	adrp	x25, bd000 <CNetDevice::s_SpeedString+0x18>
   a3618:	9105c339 	add	x25, x25, #0x170
   a361c:	b9403321 	ldr	w1, [x25, #48]
   a3620:	35000941 	cbnz	w1, a3748 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1d8>
   a3624:	39406261 	ldrb	w1, [x19, #24]
   a3628:	b0000002 	adrp	x2, a4000 <CSerialDevice::Write(void const*, unsigned long)+0x200>
   a362c:	9109c042 	add	x2, x2, #0x270
   a3630:	f9001f20 	str	x0, [x25, #56]
   a3634:	d2800003 	mov	x3, #0x0                   	// #0
   a3638:	39010321 	strb	w1, [x25, #64]
   a363c:	35000b41 	cbnz	w1, a37a4 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x234>
   a3640:	52801321 	mov	w1, #0x99                  	// #153
   a3644:	94001db7 	bl	aad20 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   a3648:	b9403321 	ldr	w1, [x25, #48]
   a364c:	7100143f 	cmp	w1, #0x5
   a3650:	54000f28 	b.hi	a3834 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2c4>  // b.pmore
   a3654:	11000421 	add	w1, w1, #0x1
   a3658:	b9003321 	str	w1, [x25, #48]
   a365c:	f9401260 	ldr	x0, [x19, #32]
   a3660:	5280ffe1 	mov	w1, #0x7ff                 	// #2047
   a3664:	510016a2 	sub	w2, w21, #0x5
   a3668:	71000c5f 	cmp	w2, #0x3
   a366c:	b900381f 	str	wzr, [x0, #56]
   a3670:	9100e004 	add	x4, x0, #0x38
   a3674:	b9004401 	str	w1, [x0, #68]
   a3678:	b900241a 	str	w26, [x0, #36]
   a367c:	b9002814 	str	w20, [x0, #40]
   a3680:	54000e48 	b.hi	a3848 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2d8>  // b.pmore
   a3684:	510006e1 	sub	w1, w23, #0x1
   a3688:	531b6aa2 	lsl	w2, w21, #5
   a368c:	7100043f 	cmp	w1, #0x1
   a3690:	51024042 	sub	w2, w2, #0x90
   a3694:	540009a8 	b.hi	a37c8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x258>  // b.pmore
   a3698:	71000aff 	cmp	w23, #0x2
   a369c:	321d0041 	orr	w1, w2, #0x8
   a36a0:	1a820022 	csel	w2, w1, w2, eq	// eq = none
   a36a4:	71000adf 	cmp	w22, #0x2
   a36a8:	54000b80 	b.eq	a3818 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2a8>  // b.none
   a36ac:	54000648 	b.hi	a3774 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x204>  // b.pmore
   a36b0:	710002df 	cmp	w22, #0x0
   a36b4:	321f0041 	orr	w1, w2, #0x2
   a36b8:	1a821022 	csel	w2, w1, w2, ne	// ne = any
   a36bc:	f9400a61 	ldr	x1, [x19, #16]
   a36c0:	b40006e1 	cbz	x1, a379c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x22c>
   a36c4:	52800121 	mov	w1, #0x9                   	// #9
   a36c8:	52808a05 	mov	w5, #0x450                 	// #1104
   a36cc:	d00000c3 	adrp	x3, bd000 <CNetDevice::s_SpeedString+0x18>
   a36d0:	9105c063 	add	x3, x3, #0x170
   a36d4:	b9003401 	str	w1, [x0, #52]
   a36d8:	52800021 	mov	w1, #0x1                   	// #1
   a36dc:	b9002c02 	str	w2, [x0, #44]
   a36e0:	b9000085 	str	w5, [x4]
   a36e4:	b9401e60 	ldr	w0, [x19, #28]
   a36e8:	b9404462 	ldr	w2, [x3, #68]
   a36ec:	1ac02020 	lsl	w0, w1, w0
   a36f0:	2a020000 	orr	w0, w0, w2
   a36f4:	b9004460 	str	w0, [x3, #68]
   a36f8:	d5033f9f 	dsb	sy
   a36fc:	f9401260 	ldr	x0, [x19, #32]
   a3700:	52806021 	mov	w1, #0x301                 	// #769
   a3704:	b9003001 	str	w1, [x0, #48]
   a3708:	97ffed72 	bl	9ecd0 <CDeviceNameService::Get()>
   a370c:	b9401e62 	ldr	w2, [x19, #28]
   a3710:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a3714:	912e6021 	add	x1, x1, #0xb98
   a3718:	aa1303e3 	mov	x3, x19
   a371c:	91072021 	add	x1, x1, #0x1c8
   a3720:	52800004 	mov	w4, #0x0                   	// #0
   a3724:	11000442 	add	w2, w2, #0x1
   a3728:	97ffed76 	bl	9ed00 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   a372c:	2a1803e0 	mov	w0, w24
   a3730:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3734:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a3738:	a94363f7 	ldp	x23, x24, [sp, #48]
   a373c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a3740:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a3744:	d65f03c0 	ret
   a3748:	f9401f22 	ldr	x2, [x25, #56]
   a374c:	eb02001f 	cmp	x0, x2
   a3750:	54000320 	b.eq	a37b4 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x244>  // b.none
   a3754:	b9401e60 	ldr	w0, [x19, #28]
   a3758:	52800018 	mov	w24, #0x0                   	// #0
   a375c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a3760:	f8207b3f 	str	xzr, [x25, x0, lsl #3]
   a3764:	3900a27f 	strb	wzr, [x19, #40]
   a3768:	a94153f3 	ldp	x19, x20, [sp, #16]
   a376c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a3770:	17ffff85 	b	a3584 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x14>
   a3774:	71000edf 	cmp	w22, #0x3
   a3778:	54000081 	b.ne	a3788 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x218>  // b.any
   a377c:	528010c1 	mov	w1, #0x86                  	// #134
   a3780:	2a010042 	orr	w2, w2, w1
   a3784:	17ffffce 	b	a36bc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x14c>
   a3788:	710012df 	cmp	w22, #0x4
   a378c:	54000681 	b.ne	a385c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2ec>  // b.any
   a3790:	52801041 	mov	w1, #0x82                  	// #130
   a3794:	2a010042 	orr	w2, w2, w1
   a3798:	17ffffc9 	b	a36bc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x14c>
   a379c:	b9002c02 	str	w2, [x0, #44]
   a37a0:	17ffffd8 	b	a3700 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x190>
   a37a4:	52801321 	mov	w1, #0x99                  	// #153
   a37a8:	94001e56 	bl	ab100 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
   a37ac:	b9403321 	ldr	w1, [x25, #48]
   a37b0:	17ffffa7 	b	a364c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xdc>
   a37b4:	39406262 	ldrb	w2, [x19, #24]
   a37b8:	39410320 	ldrb	w0, [x25, #64]
   a37bc:	6b00005f 	cmp	w2, w0
   a37c0:	54fff460 	b.eq	a364c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xdc>  // b.none
   a37c4:	17ffffe4 	b	a3754 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1e4>
   a37c8:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a37cc:	912e6021 	add	x1, x1, #0xb98
   a37d0:	91068020 	add	x0, x1, #0x1a0
   a37d4:	52803802 	mov	w2, #0x1c0                 	// #448
   a37d8:	97ffe95a 	bl	9dd40 <assertion_failed>
   a37dc:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a37e0:	912e6021 	add	x1, x1, #0xb98
   a37e4:	9103c020 	add	x0, x1, #0xf0
   a37e8:	52802d02 	mov	w2, #0x168                 	// #360
   a37ec:	97ffe955 	bl	9dd40 <assertion_failed>
   a37f0:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a37f4:	912e6021 	add	x1, x1, #0xb98
   a37f8:	91040020 	add	x0, x1, #0x100
   a37fc:	52802d42 	mov	w2, #0x16a                 	// #362
   a3800:	97ffe950 	bl	9dd40 <assertion_failed>
   a3804:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a3808:	912e6021 	add	x1, x1, #0xb98
   a380c:	9104c020 	add	x0, x1, #0x130
   a3810:	52802da2 	mov	w2, #0x16d                 	// #365
   a3814:	97ffe94b 	bl	9dd40 <assertion_failed>
   a3818:	321f0442 	orr	w2, w2, #0x6
   a381c:	17ffffa8 	b	a36bc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x14c>
   a3820:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a3824:	912e6021 	add	x1, x1, #0xb98
   a3828:	91056020 	add	x0, x1, #0x158
   a382c:	52802e02 	mov	w2, #0x170                 	// #368
   a3830:	97ffe944 	bl	9dd40 <assertion_failed>
   a3834:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a3838:	912e6021 	add	x1, x1, #0xb98
   a383c:	9105c020 	add	x0, x1, #0x170
   a3840:	528034e2 	mov	w2, #0x1a7                 	// #423
   a3844:	97ffe93f 	bl	9dd40 <assertion_failed>
   a3848:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a384c:	912e6021 	add	x1, x1, #0xb98
   a3850:	91066020 	add	x0, x1, #0x198
   a3854:	52803782 	mov	w2, #0x1bc                 	// #444
   a3858:	97ffe93a 	bl	9dd40 <assertion_failed>
   a385c:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a3860:	912e6021 	add	x1, x1, #0xb98
   a3864:	91066020 	add	x0, x1, #0x198
   a3868:	52803b82 	mov	w2, #0x1dc                 	// #476
   a386c:	97ffe935 	bl	9dd40 <assertion_failed>

00000000000a3870 <CSerialDevice::GetOptions() const>:
   a3870:	b9516400 	ldr	w0, [x0, #4452]
   a3874:	d65f03c0 	ret
   a3878:	d503201f 	nop
   a387c:	d503201f 	nop

00000000000a3880 <CSerialDevice::SetOptions(unsigned int)>:
   a3880:	b9116401 	str	w1, [x0, #4452]
   a3884:	d65f03c0 	ret
   a3888:	d503201f 	nop
   a388c:	d503201f 	nop

00000000000a3890 <CSerialDevice::SetParity(CSerialDevice::TParity)>:
   a3890:	f9401006 	ldr	x6, [x0, #32]
   a3894:	f9400802 	ldr	x2, [x0, #16]
   a3898:	910060c3 	add	x3, x6, #0x18
   a389c:	d503201f 	nop
   a38a0:	b40000a2 	cbz	x2, a38b4 <CSerialDevice::SetParity(CSerialDevice::TParity)+0x24>
   a38a4:	b9515c05 	ldr	w5, [x0, #4444]
   a38a8:	b9516004 	ldr	w4, [x0, #4448]
   a38ac:	6b0400bf 	cmp	w5, w4
   a38b0:	54ffff81 	b.ne	a38a0 <CSerialDevice::SetParity(CSerialDevice::TParity)+0x10>  // b.any
   a38b4:	b9400064 	ldr	w4, [x3]
   a38b8:	371fff44 	tbnz	w4, #3, a38a0 <CSerialDevice::SetParity(CSerialDevice::TParity)+0x10>
   a38bc:	b94030c4 	ldr	w4, [x6, #48]
   a38c0:	121f7884 	and	w4, w4, #0xfffffffe
   a38c4:	b90030c4 	str	w4, [x6, #48]
   a38c8:	b40000a2 	cbz	x2, a38dc <CSerialDevice::SetParity(CSerialDevice::TParity)+0x4c>
   a38cc:	b9515c05 	ldr	w5, [x0, #4444]
   a38d0:	b9516004 	ldr	w4, [x0, #4448]
   a38d4:	6b0400bf 	cmp	w5, w4
   a38d8:	54ffff81 	b.ne	a38c8 <CSerialDevice::SetParity(CSerialDevice::TParity)+0x38>  // b.any
   a38dc:	b9400064 	ldr	w4, [x3]
   a38e0:	371fff44 	tbnz	w4, #3, a38c8 <CSerialDevice::SetParity(CSerialDevice::TParity)+0x38>
   a38e4:	b9402cc0 	ldr	w0, [x6, #44]
   a38e8:	128010c2 	mov	w2, #0xffffff79            	// #-135
   a38ec:	7100083f 	cmp	w1, #0x2
   a38f0:	0a020000 	and	w0, w0, w2
   a38f4:	540002a0 	b.eq	a3948 <CSerialDevice::SetParity(CSerialDevice::TParity)+0xb8>  // b.none
   a38f8:	54000128 	b.hi	a391c <CSerialDevice::SetParity(CSerialDevice::TParity)+0x8c>  // b.pmore
   a38fc:	7100003f 	cmp	w1, #0x0
   a3900:	321f0001 	orr	w1, w0, #0x2
   a3904:	1a801020 	csel	w0, w1, w0, ne	// ne = any
   a3908:	b9002cc0 	str	w0, [x6, #44]
   a390c:	b94030c0 	ldr	w0, [x6, #48]
   a3910:	32000000 	orr	w0, w0, #0x1
   a3914:	b90030c0 	str	w0, [x6, #48]
   a3918:	d65f03c0 	ret
   a391c:	71000c3f 	cmp	w1, #0x3
   a3920:	54000200 	b.eq	a3960 <CSerialDevice::SetParity(CSerialDevice::TParity)+0xd0>  // b.none
   a3924:	7100103f 	cmp	w1, #0x4
   a3928:	540002a1 	b.ne	a397c <CSerialDevice::SetParity(CSerialDevice::TParity)+0xec>  // b.any
   a392c:	52801041 	mov	w1, #0x82                  	// #130
   a3930:	2a010000 	orr	w0, w0, w1
   a3934:	b9002cc0 	str	w0, [x6, #44]
   a3938:	b94030c0 	ldr	w0, [x6, #48]
   a393c:	32000000 	orr	w0, w0, #0x1
   a3940:	b90030c0 	str	w0, [x6, #48]
   a3944:	d65f03c0 	ret
   a3948:	321f0400 	orr	w0, w0, #0x6
   a394c:	b9002cc0 	str	w0, [x6, #44]
   a3950:	b94030c0 	ldr	w0, [x6, #48]
   a3954:	32000000 	orr	w0, w0, #0x1
   a3958:	b90030c0 	str	w0, [x6, #48]
   a395c:	d65f03c0 	ret
   a3960:	528010c1 	mov	w1, #0x86                  	// #134
   a3964:	2a010000 	orr	w0, w0, w1
   a3968:	b9002cc0 	str	w0, [x6, #44]
   a396c:	b94030c0 	ldr	w0, [x6, #48]
   a3970:	32000000 	orr	w0, w0, #0x1
   a3974:	b90030c0 	str	w0, [x6, #48]
   a3978:	d65f03c0 	ret
   a397c:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a3980:	912e6021 	add	x1, x1, #0xb98
   a3984:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a3988:	91066020 	add	x0, x1, #0x198
   a398c:	910003fd 	mov	x29, sp
   a3990:	52805982 	mov	w2, #0x2cc                 	// #716
   a3994:	97ffe8eb 	bl	9dd40 <assertion_failed>
   a3998:	d503201f 	nop
   a399c:	d503201f 	nop

00000000000a39a0 <CSerialDevice::IsTransmitting() const>:
   a39a0:	aa0003e1 	mov	x1, x0
   a39a4:	f9400800 	ldr	x0, [x0, #16]
   a39a8:	b40000e0 	cbz	x0, a39c4 <CSerialDevice::IsTransmitting() const+0x24>
   a39ac:	b9515c23 	ldr	w3, [x1, #4444]
   a39b0:	52800020 	mov	w0, #0x1                   	// #1
   a39b4:	b9516022 	ldr	w2, [x1, #4448]
   a39b8:	6b02007f 	cmp	w3, w2
   a39bc:	54000040 	b.eq	a39c4 <CSerialDevice::IsTransmitting() const+0x24>  // b.none
   a39c0:	d65f03c0 	ret
   a39c4:	f9401020 	ldr	x0, [x1, #32]
   a39c8:	b9401800 	ldr	w0, [x0, #24]
   a39cc:	d3430c00 	ubfx	x0, x0, #3, #1
   a39d0:	d65f03c0 	ret
   a39d4:	d503201f 	nop
   a39d8:	d503201f 	nop
   a39dc:	d503201f 	nop

00000000000a39e0 <CSerialDevice::RegisterCharReceivedHandler(void (*)(unsigned char, int, void*), void*)>:
   a39e0:	f9400803 	ldr	x3, [x0, #16]
   a39e4:	b4000083 	cbz	x3, a39f4 <CSerialDevice::RegisterCharReceivedHandler(void (*)(unsigned char, int, void*), void*)+0x14>
   a39e8:	f908b401 	str	x1, [x0, #4456]
   a39ec:	f908b802 	str	x2, [x0, #4464]
   a39f0:	d65f03c0 	ret
   a39f4:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a39f8:	912e6021 	add	x1, x1, #0xb98
   a39fc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a3a00:	91074020 	add	x0, x1, #0x1d0
   a3a04:	910003fd 	mov	x29, sp
   a3a08:	52805d42 	mov	w2, #0x2ea                 	// #746
   a3a0c:	97ffe8cd 	bl	9dd40 <assertion_failed>

00000000000a3a10 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
   a3a10:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a3a14:	910003fd 	mov	x29, sp
   a3a18:	f9400803 	ldr	x3, [x0, #16]
   a3a1c:	b4000183 	cbz	x3, a3a4c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x3c>
   a3a20:	f948bc03 	ldr	x3, [x0, #4472]
   a3a24:	b50001e3 	cbnz	x3, a3a60 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x50>
   a3a28:	b4000261 	cbz	x1, a3a74 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x64>
   a3a2c:	39c00023 	ldrsb	w3, [x1]
   a3a30:	340002c3 	cbz	w3, a3a88 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x78>
   a3a34:	b4000342 	cbz	x2, a3a9c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x8c>
   a3a38:	f908bc01 	str	x1, [x0, #4472]
   a3a3c:	f908c001 	str	x1, [x0, #4480]
   a3a40:	f908c402 	str	x2, [x0, #4488]
   a3a44:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a3a48:	d65f03c0 	ret
   a3a4c:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a3a50:	912e6021 	add	x1, x1, #0xb98
   a3a54:	91074020 	add	x0, x1, #0x1d0
   a3a58:	52805e42 	mov	w2, #0x2f2                 	// #754
   a3a5c:	97ffe8b9 	bl	9dd40 <assertion_failed>
   a3a60:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a3a64:	912e6021 	add	x1, x1, #0xb98
   a3a68:	9107a020 	add	x0, x1, #0x1e8
   a3a6c:	52805e62 	mov	w2, #0x2f3                 	// #755
   a3a70:	97ffe8b4 	bl	9dd40 <assertion_failed>
   a3a74:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a3a78:	912e6021 	add	x1, x1, #0xb98
   a3a7c:	9107e020 	add	x0, x1, #0x1f8
   a3a80:	52805ea2 	mov	w2, #0x2f5                 	// #757
   a3a84:	97ffe8af 	bl	9dd40 <assertion_failed>
   a3a88:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a3a8c:	912e6021 	add	x1, x1, #0xb98
   a3a90:	91082020 	add	x0, x1, #0x208
   a3a94:	52805ec2 	mov	w2, #0x2f6                 	// #758
   a3a98:	97ffe8aa 	bl	9dd40 <assertion_failed>
   a3a9c:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a3aa0:	912e6021 	add	x1, x1, #0xb98
   a3aa4:	91086020 	add	x0, x1, #0x218
   a3aa8:	52805ee2 	mov	w2, #0x2f7                 	// #759
   a3aac:	97ffe8a5 	bl	9dd40 <assertion_failed>

00000000000a3ab0 <CSerialDevice::AvailableForWrite()>:
   a3ab0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a3ab4:	910003fd 	mov	x29, sp
   a3ab8:	f9000bf3 	str	x19, [sp, #16]
   a3abc:	aa0003f3 	mov	x19, x0
   a3ac0:	3940a000 	ldrb	w0, [x0, #40]
   a3ac4:	340003a0 	cbz	w0, a3b38 <CSerialDevice::AvailableForWrite()+0x88>
   a3ac8:	f9400a60 	ldr	x0, [x19, #16]
   a3acc:	b4000400 	cbz	x0, a3b4c <CSerialDevice::AvailableForWrite()+0x9c>
   a3ad0:	b9519260 	ldr	w0, [x19, #4496]
   a3ad4:	350002c0 	cbnz	w0, a3b2c <CSerialDevice::AvailableForWrite()+0x7c>
   a3ad8:	b9516262 	ldr	w2, [x19, #4448]
   a3adc:	b9515e61 	ldr	w1, [x19, #4444]
   a3ae0:	6b01005f 	cmp	w2, w1
   a3ae4:	b9516261 	ldr	w1, [x19, #4448]
   a3ae8:	b9515e62 	ldr	w2, [x19, #4444]
   a3aec:	54000108 	b.hi	a3b0c <CSerialDevice::AvailableForWrite()+0x5c>  // b.pmore
   a3af0:	111ffc33 	add	w19, w1, #0x7ff
   a3af4:	4b020273 	sub	w19, w19, w2
   a3af8:	35000100 	cbnz	w0, a3b18 <CSerialDevice::AvailableForWrite()+0x68>
   a3afc:	2a1303e0 	mov	w0, w19
   a3b00:	f9400bf3 	ldr	x19, [sp, #16]
   a3b04:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a3b08:	d65f03c0 	ret
   a3b0c:	51000433 	sub	w19, w1, #0x1
   a3b10:	4b020273 	sub	w19, w19, w2
   a3b14:	34ffff40 	cbz	w0, a3afc <CSerialDevice::AvailableForWrite()+0x4c>
   a3b18:	940015ba 	bl	a9200 <LeaveCritical>
   a3b1c:	2a1303e0 	mov	w0, w19
   a3b20:	f9400bf3 	ldr	x19, [sp, #16]
   a3b24:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a3b28:	d65f03c0 	ret
   a3b2c:	94001585 	bl	a9140 <EnterCritical>
   a3b30:	b9519260 	ldr	w0, [x19, #4496]
   a3b34:	17ffffe9 	b	a3ad8 <CSerialDevice::AvailableForWrite()+0x28>
   a3b38:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a3b3c:	912e6021 	add	x1, x1, #0xb98
   a3b40:	91004020 	add	x0, x1, #0x10
   a3b44:	52806022 	mov	w2, #0x301                 	// #769
   a3b48:	97ffe87e 	bl	9dd40 <assertion_failed>
   a3b4c:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a3b50:	912e6021 	add	x1, x1, #0xb98
   a3b54:	91074020 	add	x0, x1, #0x1d0
   a3b58:	52806042 	mov	w2, #0x302                 	// #770
   a3b5c:	97ffe879 	bl	9dd40 <assertion_failed>

00000000000a3b60 <CSerialDevice::AvailableForRead()>:
   a3b60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a3b64:	910003fd 	mov	x29, sp
   a3b68:	f9000bf3 	str	x19, [sp, #16]
   a3b6c:	aa0003f3 	mov	x19, x0
   a3b70:	3940a000 	ldrb	w0, [x0, #40]
   a3b74:	34000380 	cbz	w0, a3be4 <CSerialDevice::AvailableForRead()+0x84>
   a3b78:	f9400a60 	ldr	x0, [x19, #16]
   a3b7c:	b40003e0 	cbz	x0, a3bf8 <CSerialDevice::AvailableForRead()+0x98>
   a3b80:	b9519260 	ldr	w0, [x19, #4496]
   a3b84:	350002a0 	cbnz	w0, a3bd8 <CSerialDevice::AvailableForRead()+0x78>
   a3b88:	b9495262 	ldr	w2, [x19, #2384]
   a3b8c:	b9495661 	ldr	w1, [x19, #2388]
   a3b90:	6b01005f 	cmp	w2, w1
   a3b94:	b9495261 	ldr	w1, [x19, #2384]
   a3b98:	b9495662 	ldr	w2, [x19, #2388]
   a3b9c:	4b020033 	sub	w19, w1, w2
   a3ba0:	540000c3 	b.cc	a3bb8 <CSerialDevice::AvailableForRead()+0x58>  // b.lo, b.ul, b.last
   a3ba4:	35000100 	cbnz	w0, a3bc4 <CSerialDevice::AvailableForRead()+0x64>
   a3ba8:	2a1303e0 	mov	w0, w19
   a3bac:	f9400bf3 	ldr	x19, [sp, #16]
   a3bb0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a3bb4:	d65f03c0 	ret
   a3bb8:	11200033 	add	w19, w1, #0x800
   a3bbc:	4b020273 	sub	w19, w19, w2
   a3bc0:	34ffff40 	cbz	w0, a3ba8 <CSerialDevice::AvailableForRead()+0x48>
   a3bc4:	9400158f 	bl	a9200 <LeaveCritical>
   a3bc8:	2a1303e0 	mov	w0, w19
   a3bcc:	f9400bf3 	ldr	x19, [sp, #16]
   a3bd0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a3bd4:	d65f03c0 	ret
   a3bd8:	9400155a 	bl	a9140 <EnterCritical>
   a3bdc:	b9519260 	ldr	w0, [x19, #4496]
   a3be0:	17ffffea 	b	a3b88 <CSerialDevice::AvailableForRead()+0x28>
   a3be4:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a3be8:	912e6021 	add	x1, x1, #0xb98
   a3bec:	91004020 	add	x0, x1, #0x10
   a3bf0:	528062e2 	mov	w2, #0x317                 	// #791
   a3bf4:	97ffe853 	bl	9dd40 <assertion_failed>
   a3bf8:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a3bfc:	912e6021 	add	x1, x1, #0xb98
   a3c00:	91074020 	add	x0, x1, #0x1d0
   a3c04:	52806302 	mov	w2, #0x318                 	// #792
   a3c08:	97ffe84e 	bl	9dd40 <assertion_failed>
   a3c0c:	d503201f 	nop

00000000000a3c10 <CSerialDevice::Peek()>:
   a3c10:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a3c14:	910003fd 	mov	x29, sp
   a3c18:	a90153f3 	stp	x19, x20, [sp, #16]
   a3c1c:	aa0003f3 	mov	x19, x0
   a3c20:	3940a000 	ldrb	w0, [x0, #40]
   a3c24:	340003e0 	cbz	w0, a3ca0 <CSerialDevice::Peek()+0x90>
   a3c28:	f9400a60 	ldr	x0, [x19, #16]
   a3c2c:	b4000440 	cbz	x0, a3cb4 <CSerialDevice::Peek()+0xa4>
   a3c30:	b9519260 	ldr	w0, [x19, #4496]
   a3c34:	35000180 	cbnz	w0, a3c64 <CSerialDevice::Peek()+0x54>
   a3c38:	b9495260 	ldr	w0, [x19, #2384]
   a3c3c:	b9495661 	ldr	w1, [x19, #2388]
   a3c40:	6b00003f 	cmp	w1, w0
   a3c44:	54000420 	b.eq	a3cc8 <CSerialDevice::Peek()+0xb8>  // b.none
   a3c48:	b9495660 	ldr	w0, [x19, #2388]
   a3c4c:	8b204260 	add	x0, x19, w0, uxtw
   a3c50:	39454014 	ldrb	w20, [x0, #336]
   a3c54:	2a1403e0 	mov	w0, w20
   a3c58:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3c5c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a3c60:	d65f03c0 	ret
   a3c64:	94001537 	bl	a9140 <EnterCritical>
   a3c68:	b9495261 	ldr	w1, [x19, #2384]
   a3c6c:	b9495660 	ldr	w0, [x19, #2388]
   a3c70:	6b00003f 	cmp	w1, w0
   a3c74:	540002e0 	b.eq	a3cd0 <CSerialDevice::Peek()+0xc0>  // b.none
   a3c78:	b9495660 	ldr	w0, [x19, #2388]
   a3c7c:	8b204260 	add	x0, x19, w0, uxtw
   a3c80:	39454014 	ldrb	w20, [x0, #336]
   a3c84:	b9519260 	ldr	w0, [x19, #4496]
   a3c88:	34fffe60 	cbz	w0, a3c54 <CSerialDevice::Peek()+0x44>
   a3c8c:	9400155d 	bl	a9200 <LeaveCritical>
   a3c90:	2a1403e0 	mov	w0, w20
   a3c94:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3c98:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a3c9c:	d65f03c0 	ret
   a3ca0:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a3ca4:	912e6021 	add	x1, x1, #0xb98
   a3ca8:	91004020 	add	x0, x1, #0x10
   a3cac:	528065a2 	mov	w2, #0x32d                 	// #813
   a3cb0:	97ffe824 	bl	9dd40 <assertion_failed>
   a3cb4:	f00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a3cb8:	912e6021 	add	x1, x1, #0xb98
   a3cbc:	91074020 	add	x0, x1, #0x1d0
   a3cc0:	528065c2 	mov	w2, #0x32e                 	// #814
   a3cc4:	97ffe81f 	bl	9dd40 <assertion_failed>
   a3cc8:	12800014 	mov	w20, #0xffffffff            	// #-1
   a3ccc:	17ffffe2 	b	a3c54 <CSerialDevice::Peek()+0x44>
   a3cd0:	b9519260 	ldr	w0, [x19, #4496]
   a3cd4:	12800014 	mov	w20, #0xffffffff            	// #-1
   a3cd8:	35fffda0 	cbnz	w0, a3c8c <CSerialDevice::Peek()+0x7c>
   a3cdc:	17ffffde 	b	a3c54 <CSerialDevice::Peek()+0x44>

00000000000a3ce0 <CSerialDevice::Flush()>:
   a3ce0:	f9401001 	ldr	x1, [x0, #32]
   a3ce4:	91006021 	add	x1, x1, #0x18
   a3ce8:	b9400020 	ldr	w0, [x1]
   a3cec:	371fffe0 	tbnz	w0, #3, a3ce8 <CSerialDevice::Flush()+0x8>
   a3cf0:	d65f03c0 	ret
   a3cf4:	d503201f 	nop
   a3cf8:	d503201f 	nop
   a3cfc:	d503201f 	nop

00000000000a3d00 <CSerialDevice::Write(unsigned char)>:
   a3d00:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a3d04:	910003fd 	mov	x29, sp
   a3d08:	a90153f3 	stp	x19, x20, [sp, #16]
   a3d0c:	aa0003f3 	mov	x19, x0
   a3d10:	f9400800 	ldr	x0, [x0, #16]
   a3d14:	f90013f5 	str	x21, [sp, #32]
   a3d18:	12001c35 	and	w21, w1, #0xff
   a3d1c:	b4000460 	cbz	x0, a3da8 <CSerialDevice::Write(unsigned char)+0xa8>
   a3d20:	b9519263 	ldr	w3, [x19, #4496]
   a3d24:	350002e3 	cbnz	w3, a3d80 <CSerialDevice::Write(unsigned char)+0x80>
   a3d28:	b9515e62 	ldr	w2, [x19, #4444]
   a3d2c:	b9516260 	ldr	w0, [x19, #4448]
   a3d30:	11000442 	add	w2, w2, #0x1
   a3d34:	12002842 	and	w2, w2, #0x7ff
   a3d38:	6b00005f 	cmp	w2, w0
   a3d3c:	54000520 	b.eq	a3de0 <CSerialDevice::Write(unsigned char)+0xe0>  // b.none
   a3d40:	b9515e62 	ldr	w2, [x19, #4444]
   a3d44:	52800034 	mov	w20, #0x1                   	// #1
   a3d48:	8b224260 	add	x0, x19, w2, uxtw
   a3d4c:	0b140042 	add	w2, w2, w20
   a3d50:	b9115e62 	str	w2, [x19, #4444]
   a3d54:	39257015 	strb	w21, [x0, #2396]
   a3d58:	b9515e60 	ldr	w0, [x19, #4444]
   a3d5c:	12002800 	and	w0, w0, #0x7ff
   a3d60:	b9115e60 	str	w0, [x19, #4444]
   a3d64:	34000043 	cbz	w3, a3d6c <CSerialDevice::Write(unsigned char)+0x6c>
   a3d68:	94001526 	bl	a9200 <LeaveCritical>
   a3d6c:	2a1403e0 	mov	w0, w20
   a3d70:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3d74:	f94013f5 	ldr	x21, [sp, #32]
   a3d78:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a3d7c:	d65f03c0 	ret
   a3d80:	2a0303e0 	mov	w0, w3
   a3d84:	940014ef 	bl	a9140 <EnterCritical>
   a3d88:	b9515e60 	ldr	w0, [x19, #4444]
   a3d8c:	b9516261 	ldr	w1, [x19, #4448]
   a3d90:	11000400 	add	w0, w0, #0x1
   a3d94:	12002800 	and	w0, w0, #0x7ff
   a3d98:	6b01001f 	cmp	w0, w1
   a3d9c:	540001c0 	b.eq	a3dd4 <CSerialDevice::Write(unsigned char)+0xd4>  // b.none
   a3da0:	b9519263 	ldr	w3, [x19, #4496]
   a3da4:	17ffffe7 	b	a3d40 <CSerialDevice::Write(unsigned char)+0x40>
   a3da8:	f9401261 	ldr	x1, [x19, #32]
   a3dac:	91006022 	add	x2, x1, #0x18
   a3db0:	b9400040 	ldr	w0, [x2]
   a3db4:	372fffe0 	tbnz	w0, #5, a3db0 <CSerialDevice::Write(unsigned char)+0xb0>
   a3db8:	52800034 	mov	w20, #0x1                   	// #1
   a3dbc:	b9000035 	str	w21, [x1]
   a3dc0:	2a1403e0 	mov	w0, w20
   a3dc4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3dc8:	f94013f5 	ldr	x21, [sp, #32]
   a3dcc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a3dd0:	d65f03c0 	ret
   a3dd4:	b9519263 	ldr	w3, [x19, #4496]
   a3dd8:	52800014 	mov	w20, #0x0                   	// #0
   a3ddc:	17ffffe2 	b	a3d64 <CSerialDevice::Write(unsigned char)+0x64>
   a3de0:	52800014 	mov	w20, #0x0                   	// #0
   a3de4:	f94013f5 	ldr	x21, [sp, #32]
   a3de8:	2a1403e0 	mov	w0, w20
   a3dec:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3df0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a3df4:	d65f03c0 	ret
   a3df8:	d503201f 	nop
   a3dfc:	d503201f 	nop

00000000000a3e00 <CSerialDevice::Write(void const*, unsigned long)>:
   a3e00:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a3e04:	910003fd 	mov	x29, sp
   a3e08:	a90153f3 	stp	x19, x20, [sp, #16]
   a3e0c:	aa0003f3 	mov	x19, x0
   a3e10:	3940a000 	ldrb	w0, [x0, #40]
   a3e14:	a9025bf5 	stp	x21, x22, [sp, #32]
   a3e18:	f9001bf7 	str	x23, [sp, #48]
   a3e1c:	340010a0 	cbz	w0, a4030 <CSerialDevice::Write(void const*, unsigned long)+0x230>
   a3e20:	b9519660 	ldr	w0, [x19, #4500]
   a3e24:	aa0103f4 	mov	x20, x1
   a3e28:	aa0203f6 	mov	x22, x2
   a3e2c:	35000e40 	cbnz	w0, a3ff4 <CSerialDevice::Write(void const*, unsigned long)+0x1f4>
   a3e30:	b40010b4 	cbz	x20, a4044 <CSerialDevice::Write(void const*, unsigned long)+0x244>
   a3e34:	8b160297 	add	x23, x20, x22
   a3e38:	52800015 	mov	w21, #0x0                   	// #0
   a3e3c:	b50000b6 	cbnz	x22, a3e50 <CSerialDevice::Write(void const*, unsigned long)+0x50>
   a3e40:	14000022 	b	a3ec8 <CSerialDevice::Write(void const*, unsigned long)+0xc8>
   a3e44:	eb1402ff 	cmp	x23, x20
   a3e48:	110006b5 	add	w21, w21, #0x1
   a3e4c:	540003e0 	b.eq	a3ec8 <CSerialDevice::Write(void const*, unsigned long)+0xc8>  // b.none
   a3e50:	f9400a60 	ldr	x0, [x19, #16]
   a3e54:	39400296 	ldrb	w22, [x20]
   a3e58:	b40008e0 	cbz	x0, a3f74 <CSerialDevice::Write(void const*, unsigned long)+0x174>
   a3e5c:	b9519260 	ldr	w0, [x19, #4496]
   a3e60:	35000980 	cbnz	w0, a3f90 <CSerialDevice::Write(void const*, unsigned long)+0x190>
   a3e64:	b9515e60 	ldr	w0, [x19, #4444]
   a3e68:	b9516261 	ldr	w1, [x19, #4448]
   a3e6c:	11000400 	add	w0, w0, #0x1
   a3e70:	12002800 	and	w0, w0, #0x7ff
   a3e74:	6b00003f 	cmp	w1, w0
   a3e78:	54000280 	b.eq	a3ec8 <CSerialDevice::Write(void const*, unsigned long)+0xc8>  // b.none
   a3e7c:	b9515e60 	ldr	w0, [x19, #4444]
   a3e80:	8b204261 	add	x1, x19, w0, uxtw
   a3e84:	11000400 	add	w0, w0, #0x1
   a3e88:	b9115e60 	str	w0, [x19, #4444]
   a3e8c:	39257036 	strb	w22, [x1, #2396]
   a3e90:	b9515e60 	ldr	w0, [x19, #4444]
   a3e94:	12002800 	and	w0, w0, #0x7ff
   a3e98:	b9115e60 	str	w0, [x19, #4444]
   a3e9c:	38401680 	ldrb	w0, [x20], #1
   a3ea0:	7100281f 	cmp	w0, #0xa
   a3ea4:	54fffd01 	b.ne	a3e44 <CSerialDevice::Write(void const*, unsigned long)+0x44>  // b.any
   a3ea8:	b9516660 	ldr	w0, [x19, #4452]
   a3eac:	3607fcc0 	tbz	w0, #0, a3e44 <CSerialDevice::Write(void const*, unsigned long)+0x44>
   a3eb0:	528001a1 	mov	w1, #0xd                   	// #13
   a3eb4:	aa1303e0 	mov	x0, x19
   a3eb8:	97ffff92 	bl	a3d00 <CSerialDevice::Write(unsigned char)>
   a3ebc:	72001c1f 	tst	w0, #0xff
   a3ec0:	54fffc21 	b.ne	a3e44 <CSerialDevice::Write(void const*, unsigned long)+0x44>  // b.any
   a3ec4:	d503201f 	nop
   a3ec8:	b9519660 	ldr	w0, [x19, #4500]
   a3ecc:	35000900 	cbnz	w0, a3fec <CSerialDevice::Write(void const*, unsigned long)+0x1ec>
   a3ed0:	f9400a60 	ldr	x0, [x19, #16]
   a3ed4:	b4000440 	cbz	x0, a3f5c <CSerialDevice::Write(void const*, unsigned long)+0x15c>
   a3ed8:	b9519260 	ldr	w0, [x19, #4496]
   a3edc:	350009e0 	cbnz	w0, a4018 <CSerialDevice::Write(void const*, unsigned long)+0x218>
   a3ee0:	b9515e60 	ldr	w0, [x19, #4444]
   a3ee4:	b9516261 	ldr	w1, [x19, #4448]
   a3ee8:	6b00003f 	cmp	w1, w0
   a3eec:	54000380 	b.eq	a3f5c <CSerialDevice::Write(void const*, unsigned long)+0x15c>  // b.none
   a3ef0:	b9515e61 	ldr	w1, [x19, #4444]
   a3ef4:	b9516260 	ldr	w0, [x19, #4448]
   a3ef8:	6b00003f 	cmp	w1, w0
   a3efc:	540002c0 	b.eq	a3f54 <CSerialDevice::Write(void const*, unsigned long)+0x154>  // b.none
   a3f00:	f9401262 	ldr	x2, [x19, #32]
   a3f04:	91006043 	add	x3, x2, #0x18
   a3f08:	1400000e 	b	a3f40 <CSerialDevice::Write(void const*, unsigned long)+0x140>
   a3f0c:	b9516260 	ldr	w0, [x19, #4448]
   a3f10:	8b204261 	add	x1, x19, w0, uxtw
   a3f14:	11000400 	add	w0, w0, #0x1
   a3f18:	b9116260 	str	w0, [x19, #4448]
   a3f1c:	39657020 	ldrb	w0, [x1, #2396]
   a3f20:	b9000040 	str	w0, [x2]
   a3f24:	b9516260 	ldr	w0, [x19, #4448]
   a3f28:	12002800 	and	w0, w0, #0x7ff
   a3f2c:	b9116260 	str	w0, [x19, #4448]
   a3f30:	b9515e61 	ldr	w1, [x19, #4444]
   a3f34:	b9516260 	ldr	w0, [x19, #4448]
   a3f38:	6b00003f 	cmp	w1, w0
   a3f3c:	540000c0 	b.eq	a3f54 <CSerialDevice::Write(void const*, unsigned long)+0x154>  // b.none
   a3f40:	b9400060 	ldr	w0, [x3]
   a3f44:	362ffe40 	tbz	w0, #5, a3f0c <CSerialDevice::Write(void const*, unsigned long)+0x10c>
   a3f48:	b9403840 	ldr	w0, [x2, #56]
   a3f4c:	321b0000 	orr	w0, w0, #0x20
   a3f50:	b9003840 	str	w0, [x2, #56]
   a3f54:	b9519260 	ldr	w0, [x19, #4496]
   a3f58:	35000520 	cbnz	w0, a3ffc <CSerialDevice::Write(void const*, unsigned long)+0x1fc>
   a3f5c:	2a1503e0 	mov	w0, w21
   a3f60:	a94153f3 	ldp	x19, x20, [sp, #16]
   a3f64:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a3f68:	f9401bf7 	ldr	x23, [sp, #48]
   a3f6c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a3f70:	d65f03c0 	ret
   a3f74:	f9401262 	ldr	x2, [x19, #32]
   a3f78:	91006041 	add	x1, x2, #0x18
   a3f7c:	d503201f 	nop
   a3f80:	b9400020 	ldr	w0, [x1]
   a3f84:	372fffe0 	tbnz	w0, #5, a3f80 <CSerialDevice::Write(void const*, unsigned long)+0x180>
   a3f88:	b9000056 	str	w22, [x2]
   a3f8c:	17ffffc4 	b	a3e9c <CSerialDevice::Write(void const*, unsigned long)+0x9c>
   a3f90:	9400146c 	bl	a9140 <EnterCritical>
   a3f94:	b9515e60 	ldr	w0, [x19, #4444]
   a3f98:	b9516261 	ldr	w1, [x19, #4448]
   a3f9c:	b9519262 	ldr	w2, [x19, #4496]
   a3fa0:	11000400 	add	w0, w0, #0x1
   a3fa4:	12002800 	and	w0, w0, #0x7ff
   a3fa8:	6b01001f 	cmp	w0, w1
   a3fac:	54000180 	b.eq	a3fdc <CSerialDevice::Write(void const*, unsigned long)+0x1dc>  // b.none
   a3fb0:	b9515e60 	ldr	w0, [x19, #4444]
   a3fb4:	8b204261 	add	x1, x19, w0, uxtw
   a3fb8:	11000400 	add	w0, w0, #0x1
   a3fbc:	b9115e60 	str	w0, [x19, #4444]
   a3fc0:	39257036 	strb	w22, [x1, #2396]
   a3fc4:	b9515e60 	ldr	w0, [x19, #4444]
   a3fc8:	12002800 	and	w0, w0, #0x7ff
   a3fcc:	b9115e60 	str	w0, [x19, #4444]
   a3fd0:	34fff662 	cbz	w2, a3e9c <CSerialDevice::Write(void const*, unsigned long)+0x9c>
   a3fd4:	9400148b 	bl	a9200 <LeaveCritical>
   a3fd8:	17ffffb1 	b	a3e9c <CSerialDevice::Write(void const*, unsigned long)+0x9c>
   a3fdc:	34fff762 	cbz	w2, a3ec8 <CSerialDevice::Write(void const*, unsigned long)+0xc8>
   a3fe0:	94001488 	bl	a9200 <LeaveCritical>
   a3fe4:	b9519660 	ldr	w0, [x19, #4500]
   a3fe8:	34fff740 	cbz	w0, a3ed0 <CSerialDevice::Write(void const*, unsigned long)+0xd0>
   a3fec:	94001485 	bl	a9200 <LeaveCritical>
   a3ff0:	17ffffb8 	b	a3ed0 <CSerialDevice::Write(void const*, unsigned long)+0xd0>
   a3ff4:	94001453 	bl	a9140 <EnterCritical>
   a3ff8:	17ffff8e 	b	a3e30 <CSerialDevice::Write(void const*, unsigned long)+0x30>
   a3ffc:	94001481 	bl	a9200 <LeaveCritical>
   a4000:	2a1503e0 	mov	w0, w21
   a4004:	a94153f3 	ldp	x19, x20, [sp, #16]
   a4008:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a400c:	f9401bf7 	ldr	x23, [sp, #48]
   a4010:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a4014:	d65f03c0 	ret
   a4018:	9400144a 	bl	a9140 <EnterCritical>
   a401c:	b9515e61 	ldr	w1, [x19, #4444]
   a4020:	b9516260 	ldr	w0, [x19, #4448]
   a4024:	6b00003f 	cmp	w1, w0
   a4028:	54fff641 	b.ne	a3ef0 <CSerialDevice::Write(void const*, unsigned long)+0xf0>  // b.any
   a402c:	17ffffca 	b	a3f54 <CSerialDevice::Write(void const*, unsigned long)+0x154>
   a4030:	d00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a4034:	912e6021 	add	x1, x1, #0xb98
   a4038:	91004020 	add	x0, x1, #0x10
   a403c:	52803f62 	mov	w2, #0x1fb                 	// #507
   a4040:	97ffe740 	bl	9dd40 <assertion_failed>
   a4044:	d00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a4048:	912e6021 	add	x1, x1, #0xb98
   a404c:	91008020 	add	x0, x1, #0x20
   a4050:	52804102 	mov	w2, #0x208                 	// #520
   a4054:	97ffe73b 	bl	9dd40 <assertion_failed>
   a4058:	d503201f 	nop
   a405c:	d503201f 	nop

00000000000a4060 <CSerialDevice::InterruptHandler()>:
   a4060:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a4064:	910003fd 	mov	x29, sp
   a4068:	a90153f3 	stp	x19, x20, [sp, #16]
   a406c:	aa0003f3 	mov	x19, x0
   a4070:	52800014 	mov	w20, #0x0                   	// #0
   a4074:	b9519000 	ldr	w0, [x0, #4496]
   a4078:	a9025bf5 	stp	x21, x22, [sp, #32]
   a407c:	f9001bf7 	str	x23, [sp, #48]
   a4080:	35000ee0 	cbnz	w0, a425c <CSerialDevice::InterruptHandler()+0x1fc>
   a4084:	f9401262 	ldr	x2, [x19, #32]
   a4088:	b9404040 	ldr	w0, [x2, #64]
   a408c:	91006043 	add	x3, x2, #0x18
   a4090:	b9004440 	str	w0, [x2, #68]
   a4094:	b9401840 	ldr	w0, [x2, #24]
   a4098:	37200e60 	tbnz	w0, #4, a4264 <CSerialDevice::InterruptHandler()+0x204>
   a409c:	f948b666 	ldr	x6, [x19, #4456]
   a40a0:	52800016 	mov	w22, #0x0                   	// #0
   a40a4:	1280006b 	mov	w11, #0xfffffffc            	// #-4
   a40a8:	1280004a 	mov	w10, #0xfffffffd            	// #-3
   a40ac:	12800027 	mov	w7, #0xfffffffe            	// #-2
   a40b0:	f948be65 	ldr	x5, [x19, #4472]
   a40b4:	12800008 	mov	w8, #0xffffffff            	// #-1
   a40b8:	52800029 	mov	w9, #0x1                   	// #1
   a40bc:	d503201f 	nop
   a40c0:	b9400041 	ldr	w1, [x2]
   a40c4:	36500821 	tbz	w1, #10, a41c8 <CSerialDevice::InterruptHandler()+0x168>
   a40c8:	b9495a60 	ldr	w0, [x19, #2392]
   a40cc:	35000040 	cbnz	w0, a40d4 <CSerialDevice::InterruptHandler()+0x74>
   a40d0:	b9095a68 	str	w8, [x19, #2392]
   a40d4:	b40000c5 	cbz	x5, a40ec <CSerialDevice::InterruptHandler()+0x8c>
   a40d8:	f948c260 	ldr	x0, [x19, #4480]
   a40dc:	39c00004 	ldrsb	w4, [x0]
   a40e0:	6b21809f 	cmp	w4, w1, sxtb
   a40e4:	540008e0 	b.eq	a4200 <CSerialDevice::InterruptHandler()+0x1a0>  // b.none
   a40e8:	f908c265 	str	x5, [x19, #4480]
   a40ec:	b5000966 	cbnz	x6, a4218 <CSerialDevice::InterruptHandler()+0x1b8>
   a40f0:	b9495260 	ldr	w0, [x19, #2384]
   a40f4:	b9495664 	ldr	w4, [x19, #2388]
   a40f8:	11000400 	add	w0, w0, #0x1
   a40fc:	12002800 	and	w0, w0, #0x7ff
   a4100:	6b04001f 	cmp	w0, w4
   a4104:	540006c0 	b.eq	a41dc <CSerialDevice::InterruptHandler()+0x17c>  // b.none
   a4108:	b9495260 	ldr	w0, [x19, #2384]
   a410c:	8b204264 	add	x4, x19, w0, uxtw
   a4110:	11000400 	add	w0, w0, #0x1
   a4114:	b9095260 	str	w0, [x19, #2384]
   a4118:	39054081 	strb	w1, [x4, #336]
   a411c:	b9495260 	ldr	w0, [x19, #2384]
   a4120:	12002800 	and	w0, w0, #0x7ff
   a4124:	b9095260 	str	w0, [x19, #2384]
   a4128:	b9400060 	ldr	w0, [x3]
   a412c:	3627fca0 	tbz	w0, #4, a40c0 <CSerialDevice::InterruptHandler()+0x60>
   a4130:	52800017 	mov	w23, #0x0                   	// #0
   a4134:	b9401840 	ldr	w0, [x2, #24]
   a4138:	362801a0 	tbz	w0, #5, a416c <CSerialDevice::InterruptHandler()+0x10c>
   a413c:	14000013 	b	a4188 <CSerialDevice::InterruptHandler()+0x128>
   a4140:	b9516260 	ldr	w0, [x19, #4448]
   a4144:	8b204261 	add	x1, x19, w0, uxtw
   a4148:	11000400 	add	w0, w0, #0x1
   a414c:	b9116260 	str	w0, [x19, #4448]
   a4150:	39657020 	ldrb	w0, [x1, #2396]
   a4154:	b9000040 	str	w0, [x2]
   a4158:	b9516260 	ldr	w0, [x19, #4448]
   a415c:	12002800 	and	w0, w0, #0x7ff
   a4160:	b9116260 	str	w0, [x19, #4448]
   a4164:	b9400060 	ldr	w0, [x3]
   a4168:	37280100 	tbnz	w0, #5, a4188 <CSerialDevice::InterruptHandler()+0x128>
   a416c:	b9515e61 	ldr	w1, [x19, #4444]
   a4170:	b9516260 	ldr	w0, [x19, #4448]
   a4174:	6b00003f 	cmp	w1, w0
   a4178:	54fffe41 	b.ne	a4140 <CSerialDevice::InterruptHandler()+0xe0>  // b.any
   a417c:	b9403840 	ldr	w0, [x2, #56]
   a4180:	121a7800 	and	w0, w0, #0xffffffdf
   a4184:	b9003840 	str	w0, [x2, #56]
   a4188:	b9519260 	ldr	w0, [x19, #4496]
   a418c:	350005a0 	cbnz	w0, a4240 <CSerialDevice::InterruptHandler()+0x1e0>
   a4190:	34000076 	cbz	w22, a419c <CSerialDevice::InterruptHandler()+0x13c>
   a4194:	f948c660 	ldr	x0, [x19, #4488]
   a4198:	d63f0000 	blr	x0
   a419c:	34000577 	cbz	w23, a4248 <CSerialDevice::InterruptHandler()+0x1e8>
   a41a0:	f948b663 	ldr	x3, [x19, #4456]
   a41a4:	2a1503e1 	mov	w1, w21
   a41a8:	2a1403e0 	mov	w0, w20
   a41ac:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a41b0:	aa0303f0 	mov	x16, x3
   a41b4:	f9401bf7 	ldr	x23, [sp, #48]
   a41b8:	f948ba62 	ldr	x2, [x19, #4464]
   a41bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   a41c0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a41c4:	d61f0200 	br	x16
   a41c8:	36580121 	tbz	w1, #11, a41ec <CSerialDevice::InterruptHandler()+0x18c>
   a41cc:	b9495a60 	ldr	w0, [x19, #2392]
   a41d0:	35fff820 	cbnz	w0, a40d4 <CSerialDevice::InterruptHandler()+0x74>
   a41d4:	b9095a67 	str	w7, [x19, #2392]
   a41d8:	17ffffbf 	b	a40d4 <CSerialDevice::InterruptHandler()+0x74>
   a41dc:	b9495a60 	ldr	w0, [x19, #2392]
   a41e0:	35fffa40 	cbnz	w0, a4128 <CSerialDevice::InterruptHandler()+0xc8>
   a41e4:	b9095a67 	str	w7, [x19, #2392]
   a41e8:	17ffffd0 	b	a4128 <CSerialDevice::InterruptHandler()+0xc8>
   a41ec:	36400201 	tbz	w1, #8, a422c <CSerialDevice::InterruptHandler()+0x1cc>
   a41f0:	b9495a60 	ldr	w0, [x19, #2392]
   a41f4:	35fff700 	cbnz	w0, a40d4 <CSerialDevice::InterruptHandler()+0x74>
   a41f8:	b9095a6a 	str	w10, [x19, #2392]
   a41fc:	17ffffb6 	b	a40d4 <CSerialDevice::InterruptHandler()+0x74>
   a4200:	91000404 	add	x4, x0, #0x1
   a4204:	f908c264 	str	x4, [x19, #4480]
   a4208:	39c00400 	ldrsb	w0, [x0, #1]
   a420c:	7100001f 	cmp	w0, #0x0
   a4210:	1a8912d6 	csel	w22, w22, w9, ne	// ne = any
   a4214:	b4fff6e6 	cbz	x6, a40f0 <CSerialDevice::InterruptHandler()+0x90>
   a4218:	b9495a75 	ldr	w21, [x19, #2392]
   a421c:	12001c34 	and	w20, w1, #0xff
   a4220:	52800037 	mov	w23, #0x1                   	// #1
   a4224:	b9095a7f 	str	wzr, [x19, #2392]
   a4228:	17ffffc3 	b	a4134 <CSerialDevice::InterruptHandler()+0xd4>
   a422c:	364ff541 	tbz	w1, #9, a40d4 <CSerialDevice::InterruptHandler()+0x74>
   a4230:	b9495a60 	ldr	w0, [x19, #2392]
   a4234:	35fff500 	cbnz	w0, a40d4 <CSerialDevice::InterruptHandler()+0x74>
   a4238:	b9095a6b 	str	w11, [x19, #2392]
   a423c:	17ffffa6 	b	a40d4 <CSerialDevice::InterruptHandler()+0x74>
   a4240:	940013f0 	bl	a9200 <LeaveCritical>
   a4244:	17ffffd3 	b	a4190 <CSerialDevice::InterruptHandler()+0x130>
   a4248:	a94153f3 	ldp	x19, x20, [sp, #16]
   a424c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a4250:	f9401bf7 	ldr	x23, [sp, #48]
   a4254:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a4258:	d65f03c0 	ret
   a425c:	940013b9 	bl	a9140 <EnterCritical>
   a4260:	17ffff89 	b	a4084 <CSerialDevice::InterruptHandler()+0x24>
   a4264:	52800017 	mov	w23, #0x0                   	// #0
   a4268:	52800016 	mov	w22, #0x0                   	// #0
   a426c:	17ffffb2 	b	a4134 <CSerialDevice::InterruptHandler()+0xd4>

00000000000a4270 <CSerialDevice::InterruptStub(void*)>:
   a4270:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a4274:	910003fd 	mov	x29, sp
   a4278:	a90153f3 	stp	x19, x20, [sp, #16]
   a427c:	f9001bf7 	str	x23, [sp, #48]
   a4280:	d5033fbf 	dmb	sy
   a4284:	b00000d7 	adrp	x23, bd000 <CNetDevice::s_SpeedString+0x18>
   a4288:	9105c2f7 	add	x23, x23, #0x170
   a428c:	b94046f4 	ldr	w20, [x23, #68]
   a4290:	340001f4 	cbz	w20, a42cc <CSerialDevice::InterruptStub(void*)+0x5c>
   a4294:	52800013 	mov	w19, #0x0                   	// #0
   a4298:	a9025bf5 	stp	x21, x22, [sp, #32]
   a429c:	52800036 	mov	w22, #0x1                   	// #1
   a42a0:	1ad322d5 	lsl	w21, w22, w19
   a42a4:	6a1402bf 	tst	w21, w20
   a42a8:	54000080 	b.eq	a42b8 <CSerialDevice::InterruptStub(void*)+0x48>  // b.none
   a42ac:	f8735ae0 	ldr	x0, [x23, w19, uxtw #3]
   a42b0:	b4000160 	cbz	x0, a42dc <CSerialDevice::InterruptStub(void*)+0x6c>
   a42b4:	97ffff6b 	bl	a4060 <CSerialDevice::InterruptHandler()>
   a42b8:	11000673 	add	w19, w19, #0x1
   a42bc:	6a350294 	bics	w20, w20, w21
   a42c0:	7a451a62 	ccmp	w19, #0x5, #0x2, ne	// ne = any
   a42c4:	54fffee9 	b.ls	a42a0 <CSerialDevice::InterruptStub(void*)+0x30>  // b.plast
   a42c8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a42cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   a42d0:	f9401bf7 	ldr	x23, [sp, #48]
   a42d4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a42d8:	d65f03c0 	ret
   a42dc:	d00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a42e0:	912e6021 	add	x1, x1, #0xb98
   a42e4:	9108a020 	add	x0, x1, #0x228
   a42e8:	52807d82 	mov	w2, #0x3ec                 	// #1004
   a42ec:	97ffe695 	bl	9dd40 <assertion_failed>

00000000000a42f0 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]>:
   a42f0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a42f4:	910003fd 	mov	x29, sp
   a42f8:	a90153f3 	stp	x19, x20, [sp, #16]
   a42fc:	aa0003f3 	mov	x19, x0
   a4300:	b00000d4 	adrp	x20, bd000 <CNetDevice::s_SpeedString+0x18>
   a4304:	9105c294 	add	x20, x20, #0x170
   a4308:	a9025bf5 	stp	x21, x22, [sp, #32]
   a430c:	d00000b5 	adrp	x21, ba000 <CursorSymbol+0x188>
   a4310:	912e62b5 	add	x21, x21, #0xb98
   a4314:	f9001bf7 	str	x23, [sp, #48]
   a4318:	97ffea6e 	bl	9ecd0 <CDeviceNameService::Get()>
   a431c:	b9401e62 	ldr	w2, [x19, #28]
   a4320:	910722a1 	add	x1, x21, #0x1c8
   a4324:	52800003 	mov	w3, #0x0                   	// #0
   a4328:	11000442 	add	w2, w2, #0x1
   a432c:	97ffea95 	bl	9ed80 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   a4330:	b9401e62 	ldr	w2, [x19, #28]
   a4334:	52800020 	mov	w0, #0x1                   	// #1
   a4338:	b9404681 	ldr	w1, [x20, #68]
   a433c:	1ac22000 	lsl	w0, w0, w2
   a4340:	0a200020 	bic	w0, w1, w0
   a4344:	b9004680 	str	w0, [x20, #68]
   a4348:	d5033f9f 	dsb	sy
   a434c:	f9401260 	ldr	x0, [x19, #32]
   a4350:	f9400a61 	ldr	x1, [x19, #16]
   a4354:	b900381f 	str	wzr, [x0, #56]
   a4358:	b900301f 	str	wzr, [x0, #48]
   a435c:	b40000a1 	cbz	x1, a4370 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0x80>
   a4360:	b9403280 	ldr	w0, [x20, #48]
   a4364:	51000400 	sub	w0, w0, #0x1
   a4368:	b9003280 	str	w0, [x20, #48]
   a436c:	340003c0 	cbz	w0, a43e4 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0xf4>
   a4370:	b9401e61 	ldr	w1, [x19, #28]
   a4374:	91030276 	add	x22, x19, #0xc0
   a4378:	8b0112a0 	add	x0, x21, x1, lsl #4
   a437c:	b9403400 	ldr	w0, [x0, #52]
   a4380:	11001400 	add	w0, w0, #0x5
   a4384:	7100281f 	cmp	w0, #0xa
   a4388:	540004ad 	b.le	a441c <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0x12c>
   a438c:	8b0112b5 	add	x21, x21, x1, lsl #4
   a4390:	91042277 	add	x23, x19, #0x108
   a4394:	b9403ea2 	ldr	w2, [x21, #60]
   a4398:	11001442 	add	w2, w2, #0x5
   a439c:	7100285f 	cmp	w2, #0xa
   a43a0:	5400054d 	b.le	a4448 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0x158>
   a43a4:	f8217a9f 	str	xzr, [x20, x1, lsl #3]
   a43a8:	aa1703e0 	mov	x0, x23
   a43ac:	3900a27f 	strb	wzr, [x19, #40]
   a43b0:	94001eb0 	bl	abe70 <CGPIOPin::~CGPIOPin()>
   a43b4:	aa1603e0 	mov	x0, x22
   a43b8:	94001eae 	bl	abe70 <CGPIOPin::~CGPIOPin()>
   a43bc:	9101e260 	add	x0, x19, #0x78
   a43c0:	94001eac 	bl	abe70 <CGPIOPin::~CGPIOPin()>
   a43c4:	9100c260 	add	x0, x19, #0x30
   a43c8:	94001eaa 	bl	abe70 <CGPIOPin::~CGPIOPin()>
   a43cc:	aa1303e0 	mov	x0, x19
   a43d0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a43d4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a43d8:	f9401bf7 	ldr	x23, [sp, #48]
   a43dc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a43e0:	17ffe8a8 	b	9e680 <CDevice::~CDevice()>
   a43e4:	f9401e80 	ldr	x0, [x20, #56]
   a43e8:	b4000420 	cbz	x0, a446c <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0x17c>
   a43ec:	39410281 	ldrb	w1, [x20, #64]
   a43f0:	34000381 	cbz	w1, a4460 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0x170>
   a43f4:	94001a9b 	bl	aae60 <CInterruptSystem::DisconnectFIQ()>
   a43f8:	b9401e61 	ldr	w1, [x19, #28]
   a43fc:	91030276 	add	x22, x19, #0xc0
   a4400:	f9001e9f 	str	xzr, [x20, #56]
   a4404:	3901029f 	strb	wzr, [x20, #64]
   a4408:	8b0112a0 	add	x0, x21, x1, lsl #4
   a440c:	b9403400 	ldr	w0, [x0, #52]
   a4410:	11001400 	add	w0, w0, #0x5
   a4414:	7100281f 	cmp	w0, #0xa
   a4418:	54fffbac 	b.gt	a438c <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0x9c>
   a441c:	52800022 	mov	w2, #0x1                   	// #1
   a4420:	52800021 	mov	w1, #0x1                   	// #1
   a4424:	aa1603e0 	mov	x0, x22
   a4428:	91042277 	add	x23, x19, #0x108
   a442c:	94002191 	bl	aca70 <CGPIOPin::SetMode(TGPIOMode, bool)>
   a4430:	b9401e61 	ldr	w1, [x19, #28]
   a4434:	8b0112b5 	add	x21, x21, x1, lsl #4
   a4438:	b9403ea2 	ldr	w2, [x21, #60]
   a443c:	11001442 	add	w2, w2, #0x5
   a4440:	7100285f 	cmp	w2, #0xa
   a4444:	54fffb0c 	b.gt	a43a4 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0xb4>
   a4448:	52800021 	mov	w1, #0x1                   	// #1
   a444c:	52800022 	mov	w2, #0x1                   	// #1
   a4450:	aa1703e0 	mov	x0, x23
   a4454:	94002187 	bl	aca70 <CGPIOPin::SetMode(TGPIOMode, bool)>
   a4458:	b9401e61 	ldr	w1, [x19, #28]
   a445c:	17ffffd2 	b	a43a4 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0xb4>
   a4460:	52801321 	mov	w1, #0x99                  	// #153
   a4464:	94001a57 	bl	aadc0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   a4468:	17ffffe4 	b	a43f8 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]+0x108>
   a446c:	52802582 	mov	w2, #0x12c                 	// #300
   a4470:	aa1503e1 	mov	x1, x21
   a4474:	9108e2a0 	add	x0, x21, #0x238
   a4478:	97ffe632 	bl	9dd40 <assertion_failed>
   a447c:	d503201f 	nop

00000000000a4480 <CSerialDevice::~CSerialDevice()>:
   a4480:	d00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a4484:	912d6021 	add	x1, x1, #0xb58
   a4488:	3940a002 	ldrb	w2, [x0, #40]
   a448c:	f9000001 	str	x1, [x0]
   a4490:	34000042 	cbz	w2, a4498 <CSerialDevice::~CSerialDevice()+0x18>
   a4494:	17ffff97 	b	a42f0 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]>
   a4498:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a449c:	910003fd 	mov	x29, sp
   a44a0:	f9000bf3 	str	x19, [sp, #16]
   a44a4:	aa0003f3 	mov	x19, x0
   a44a8:	91042000 	add	x0, x0, #0x108
   a44ac:	94001e71 	bl	abe70 <CGPIOPin::~CGPIOPin()>
   a44b0:	91030260 	add	x0, x19, #0xc0
   a44b4:	94001e6f 	bl	abe70 <CGPIOPin::~CGPIOPin()>
   a44b8:	9101e260 	add	x0, x19, #0x78
   a44bc:	94001e6d 	bl	abe70 <CGPIOPin::~CGPIOPin()>
   a44c0:	9100c260 	add	x0, x19, #0x30
   a44c4:	94001e6b 	bl	abe70 <CGPIOPin::~CGPIOPin()>
   a44c8:	aa1303e0 	mov	x0, x19
   a44cc:	f9400bf3 	ldr	x19, [sp, #16]
   a44d0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a44d4:	17ffe86b 	b	9e680 <CDevice::~CDevice()>
   a44d8:	d503201f 	nop
   a44dc:	d503201f 	nop

00000000000a44e0 <CSerialDevice::~CSerialDevice()>:
   a44e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a44e4:	d00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a44e8:	912d6021 	add	x1, x1, #0xb58
   a44ec:	910003fd 	mov	x29, sp
   a44f0:	3940a002 	ldrb	w2, [x0, #40]
   a44f4:	f9000bf3 	str	x19, [sp, #16]
   a44f8:	aa0003f3 	mov	x19, x0
   a44fc:	f9000001 	str	x1, [x0]
   a4500:	340000e2 	cbz	w2, a451c <CSerialDevice::~CSerialDevice()+0x3c>
   a4504:	97ffff7b 	bl	a42f0 <CSerialDevice::~CSerialDevice() [clone .part.0] [clone .constprop.0]>
   a4508:	aa1303e0 	mov	x0, x19
   a450c:	d2823301 	mov	x1, #0x1198                	// #4504
   a4510:	f9400bf3 	ldr	x19, [sp, #16]
   a4514:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a4518:	14000f7a 	b	a8300 <operator delete(void*, unsigned long)>
   a451c:	91042000 	add	x0, x0, #0x108
   a4520:	94001e54 	bl	abe70 <CGPIOPin::~CGPIOPin()>
   a4524:	91030260 	add	x0, x19, #0xc0
   a4528:	94001e52 	bl	abe70 <CGPIOPin::~CGPIOPin()>
   a452c:	9101e260 	add	x0, x19, #0x78
   a4530:	94001e50 	bl	abe70 <CGPIOPin::~CGPIOPin()>
   a4534:	9100c260 	add	x0, x19, #0x30
   a4538:	94001e4e 	bl	abe70 <CGPIOPin::~CGPIOPin()>
   a453c:	aa1303e0 	mov	x0, x19
   a4540:	97ffe850 	bl	9e680 <CDevice::~CDevice()>
   a4544:	aa1303e0 	mov	x0, x19
   a4548:	d2823301 	mov	x1, #0x1198                	// #4504
   a454c:	f9400bf3 	ldr	x19, [sp, #16]
   a4550:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a4554:	14000f6b 	b	a8300 <operator delete(void*, unsigned long)>
	...

00000000000a4560 <CString::~CString()>:
   a4560:	aa0003e1 	mov	x1, x0
   a4564:	d00000a2 	adrp	x2, ba000 <CursorSymbol+0x188>
   a4568:	9137e042 	add	x2, x2, #0xdf8
   a456c:	f9400400 	ldr	x0, [x0, #8]
   a4570:	f9000022 	str	x2, [x1]
   a4574:	b4000040 	cbz	x0, a457c <CString::~CString()+0x1c>
   a4578:	14000f56 	b	a82d0 <operator delete[](void*)>
   a457c:	d65f03c0 	ret

00000000000a4580 <CString::~CString()>:
   a4580:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a4584:	910003fd 	mov	x29, sp
   a4588:	d00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a458c:	9137e021 	add	x1, x1, #0xdf8
   a4590:	f9000bf3 	str	x19, [sp, #16]
   a4594:	aa0003f3 	mov	x19, x0
   a4598:	f9400400 	ldr	x0, [x0, #8]
   a459c:	f9000261 	str	x1, [x19]
   a45a0:	b4000040 	cbz	x0, a45a8 <CString::~CString()+0x28>
   a45a4:	94000f4b 	bl	a82d0 <operator delete[](void*)>
   a45a8:	aa1303e0 	mov	x0, x19
   a45ac:	d2800401 	mov	x1, #0x20                  	// #32
   a45b0:	f9400bf3 	ldr	x19, [sp, #16]
   a45b4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a45b8:	14000f52 	b	a8300 <operator delete(void*, unsigned long)>
   a45bc:	d503201f 	nop

00000000000a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>:
   a45c0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a45c4:	910003fd 	mov	x29, sp
   a45c8:	a9025bf5 	stp	x21, x22, [sp, #32]
   a45cc:	f9400402 	ldr	x2, [x0, #8]
   a45d0:	a90153f3 	stp	x19, x20, [sp, #16]
   a45d4:	aa0003f3 	mov	x19, x0
   a45d8:	f9400c15 	ldr	x21, [x0, #24]
   a45dc:	b9401000 	ldr	w0, [x0, #16]
   a45e0:	cb0202b5 	sub	x21, x21, x2
   a45e4:	8b0102a1 	add	x1, x21, x1
   a45e8:	91000422 	add	x2, x1, #0x1
   a45ec:	eb00005f 	cmp	x2, x0
   a45f0:	540000a8 	b.hi	a4604 <CString::ReserveSpace(unsigned long) [clone .part.0]+0x44>  // b.pmore
   a45f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a45f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a45fc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a4600:	d65f03c0 	ret
   a4604:	91010434 	add	x20, x1, #0x41
   a4608:	aa1403e0 	mov	x0, x20
   a460c:	94000f1d 	bl	a8280 <operator new[](unsigned long)>
   a4610:	f9400e61 	ldr	x1, [x19, #24]
   a4614:	aa0003f6 	mov	x22, x0
   a4618:	3900003f 	strb	wzr, [x1]
   a461c:	f9400661 	ldr	x1, [x19, #8]
   a4620:	94000b74 	bl	a73f0 <strcpy>
   a4624:	f9400660 	ldr	x0, [x19, #8]
   a4628:	b4000040 	cbz	x0, a4630 <CString::ReserveSpace(unsigned long) [clone .part.0]+0x70>
   a462c:	94000f29 	bl	a82d0 <operator delete[](void*)>
   a4630:	8b1502d5 	add	x21, x22, x21
   a4634:	f9000676 	str	x22, [x19, #8]
   a4638:	b9001274 	str	w20, [x19, #16]
   a463c:	f9000e75 	str	x21, [x19, #24]
   a4640:	a94153f3 	ldp	x19, x20, [sp, #16]
   a4644:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a4648:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a464c:	d65f03c0 	ret

00000000000a4650 <CString::CString()>:
   a4650:	d00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a4654:	9137e021 	add	x1, x1, #0xdf8
   a4658:	b900101f 	str	wzr, [x0, #16]
   a465c:	a9007c01 	stp	x1, xzr, [x0]
   a4660:	d65f03c0 	ret
   a4664:	d503201f 	nop
   a4668:	d503201f 	nop
   a466c:	d503201f 	nop

00000000000a4670 <CString::CString(char const*)>:
   a4670:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a4674:	910003fd 	mov	x29, sp
   a4678:	d00000a2 	adrp	x2, ba000 <CursorSymbol+0x188>
   a467c:	9137e042 	add	x2, x2, #0xdf8
   a4680:	a90153f3 	stp	x19, x20, [sp, #16]
   a4684:	aa0003f3 	mov	x19, x0
   a4688:	aa0103e0 	mov	x0, x1
   a468c:	aa0103f4 	mov	x20, x1
   a4690:	f9000262 	str	x2, [x19]
   a4694:	94000ac7 	bl	a71b0 <strlen>
   a4698:	11000400 	add	w0, w0, #0x1
   a469c:	b9001260 	str	w0, [x19, #16]
   a46a0:	94000ef8 	bl	a8280 <operator new[](unsigned long)>
   a46a4:	aa1403e1 	mov	x1, x20
   a46a8:	f9000660 	str	x0, [x19, #8]
   a46ac:	a94153f3 	ldp	x19, x20, [sp, #16]
   a46b0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a46b4:	14000b4f 	b	a73f0 <strcpy>
   a46b8:	d503201f 	nop
   a46bc:	d503201f 	nop

00000000000a46c0 <CString::CString(CString const&)>:
   a46c0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a46c4:	910003fd 	mov	x29, sp
   a46c8:	f90013f5 	str	x21, [sp, #32]
   a46cc:	aa0103f5 	mov	x21, x1
   a46d0:	d00000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a46d4:	9137e021 	add	x1, x1, #0xdf8
   a46d8:	a90153f3 	stp	x19, x20, [sp, #16]
   a46dc:	aa0003f3 	mov	x19, x0
   a46e0:	d0000074 	adrp	x20, b2000 <_etext+0x1158>
   a46e4:	91374294 	add	x20, x20, #0xdd0
   a46e8:	f94006a0 	ldr	x0, [x21, #8]
   a46ec:	f9000261 	str	x1, [x19]
   a46f0:	f100001f 	cmp	x0, #0x0
   a46f4:	9a800280 	csel	x0, x20, x0, eq	// eq = none
   a46f8:	94000aae 	bl	a71b0 <strlen>
   a46fc:	11000400 	add	w0, w0, #0x1
   a4700:	b9001260 	str	w0, [x19, #16]
   a4704:	94000edf 	bl	a8280 <operator new[](unsigned long)>
   a4708:	f94006a1 	ldr	x1, [x21, #8]
   a470c:	f94013f5 	ldr	x21, [sp, #32]
   a4710:	f9000660 	str	x0, [x19, #8]
   a4714:	f100003f 	cmp	x1, #0x0
   a4718:	9a810281 	csel	x1, x20, x1, eq	// eq = none
   a471c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a4720:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a4724:	14000b33 	b	a73f0 <strcpy>
   a4728:	d503201f 	nop
   a472c:	d503201f 	nop

00000000000a4730 <CString::CString(CString&&)>:
   a4730:	b9401023 	ldr	w3, [x1, #16]
   a4734:	d00000a2 	adrp	x2, ba000 <CursorSymbol+0x188>
   a4738:	9137e042 	add	x2, x2, #0xdf8
   a473c:	b900103f 	str	wzr, [x1, #16]
   a4740:	f9400424 	ldr	x4, [x1, #8]
   a4744:	f900043f 	str	xzr, [x1, #8]
   a4748:	b9001003 	str	w3, [x0, #16]
   a474c:	a9001002 	stp	x2, x4, [x0]
   a4750:	d65f03c0 	ret
   a4754:	d503201f 	nop
   a4758:	d503201f 	nop
   a475c:	d503201f 	nop

00000000000a4760 <CString::operator char const*() const>:
   a4760:	f9400400 	ldr	x0, [x0, #8]
   a4764:	d0000061 	adrp	x1, b2000 <_etext+0x1158>
   a4768:	91374021 	add	x1, x1, #0xdd0
   a476c:	f100001f 	cmp	x0, #0x0
   a4770:	9a800020 	csel	x0, x1, x0, eq	// eq = none
   a4774:	d65f03c0 	ret
   a4778:	d503201f 	nop
   a477c:	d503201f 	nop

00000000000a4780 <CString::operator=(char const*)>:
   a4780:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a4784:	910003fd 	mov	x29, sp
   a4788:	a90153f3 	stp	x19, x20, [sp, #16]
   a478c:	aa0003f3 	mov	x19, x0
   a4790:	aa0103f4 	mov	x20, x1
   a4794:	f9400400 	ldr	x0, [x0, #8]
   a4798:	b4000040 	cbz	x0, a47a0 <CString::operator=(char const*)+0x20>
   a479c:	94000ecd 	bl	a82d0 <operator delete[](void*)>
   a47a0:	aa1403e0 	mov	x0, x20
   a47a4:	94000a83 	bl	a71b0 <strlen>
   a47a8:	11000400 	add	w0, w0, #0x1
   a47ac:	b9001260 	str	w0, [x19, #16]
   a47b0:	94000eb4 	bl	a8280 <operator new[](unsigned long)>
   a47b4:	aa1403e1 	mov	x1, x20
   a47b8:	f9000660 	str	x0, [x19, #8]
   a47bc:	94000b0d 	bl	a73f0 <strcpy>
   a47c0:	f9400660 	ldr	x0, [x19, #8]
   a47c4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a47c8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a47cc:	d65f03c0 	ret

00000000000a47d0 <CString::operator=(CString const&)>:
   a47d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a47d4:	910003fd 	mov	x29, sp
   a47d8:	a90153f3 	stp	x19, x20, [sp, #16]
   a47dc:	aa0003f3 	mov	x19, x0
   a47e0:	f9400400 	ldr	x0, [x0, #8]
   a47e4:	f90013f5 	str	x21, [sp, #32]
   a47e8:	aa0103f5 	mov	x21, x1
   a47ec:	b4000040 	cbz	x0, a47f4 <CString::operator=(CString const&)+0x24>
   a47f0:	94000eb8 	bl	a82d0 <operator delete[](void*)>
   a47f4:	f94006a0 	ldr	x0, [x21, #8]
   a47f8:	d0000074 	adrp	x20, b2000 <_etext+0x1158>
   a47fc:	91374294 	add	x20, x20, #0xdd0
   a4800:	f100001f 	cmp	x0, #0x0
   a4804:	9a800280 	csel	x0, x20, x0, eq	// eq = none
   a4808:	94000a6a 	bl	a71b0 <strlen>
   a480c:	11000400 	add	w0, w0, #0x1
   a4810:	b9001260 	str	w0, [x19, #16]
   a4814:	94000e9b 	bl	a8280 <operator new[](unsigned long)>
   a4818:	f9000660 	str	x0, [x19, #8]
   a481c:	f94006a1 	ldr	x1, [x21, #8]
   a4820:	f100003f 	cmp	x1, #0x0
   a4824:	9a810281 	csel	x1, x20, x1, eq	// eq = none
   a4828:	94000af2 	bl	a73f0 <strcpy>
   a482c:	aa1303e0 	mov	x0, x19
   a4830:	a94153f3 	ldp	x19, x20, [sp, #16]
   a4834:	f94013f5 	ldr	x21, [sp, #32]
   a4838:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a483c:	d65f03c0 	ret

00000000000a4840 <CString::operator=(CString&&)>:
   a4840:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a4844:	910003fd 	mov	x29, sp
   a4848:	a90153f3 	stp	x19, x20, [sp, #16]
   a484c:	aa0003f4 	mov	x20, x0
   a4850:	aa0103f3 	mov	x19, x1
   a4854:	f9400400 	ldr	x0, [x0, #8]
   a4858:	b4000040 	cbz	x0, a4860 <CString::operator=(CString&&)+0x20>
   a485c:	94000e9d 	bl	a82d0 <operator delete[](void*)>
   a4860:	b9401261 	ldr	w1, [x19, #16]
   a4864:	aa1403e0 	mov	x0, x20
   a4868:	f9400662 	ldr	x2, [x19, #8]
   a486c:	b9001281 	str	w1, [x20, #16]
   a4870:	f9000682 	str	x2, [x20, #8]
   a4874:	f900067f 	str	xzr, [x19, #8]
   a4878:	b900127f 	str	wzr, [x19, #16]
   a487c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a4880:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a4884:	d65f03c0 	ret
   a4888:	d503201f 	nop
   a488c:	d503201f 	nop

00000000000a4890 <CString::c_str() const>:
   a4890:	f9400400 	ldr	x0, [x0, #8]
   a4894:	d0000061 	adrp	x1, b2000 <_etext+0x1158>
   a4898:	91374021 	add	x1, x1, #0xdd0
   a489c:	f100001f 	cmp	x0, #0x0
   a48a0:	9a800020 	csel	x0, x1, x0, eq	// eq = none
   a48a4:	d65f03c0 	ret
   a48a8:	d503201f 	nop
   a48ac:	d503201f 	nop

00000000000a48b0 <CString::GetLength() const>:
   a48b0:	f9400400 	ldr	x0, [x0, #8]
   a48b4:	b4000040 	cbz	x0, a48bc <CString::GetLength() const+0xc>
   a48b8:	14000a3e 	b	a71b0 <strlen>
   a48bc:	d2800000 	mov	x0, #0x0                   	// #0
   a48c0:	d65f03c0 	ret
   a48c4:	d503201f 	nop
   a48c8:	d503201f 	nop
   a48cc:	d503201f 	nop

00000000000a48d0 <CString::Append(char const*)>:
   a48d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a48d4:	910003fd 	mov	x29, sp
   a48d8:	52800022 	mov	w2, #0x1                   	// #1
   a48dc:	a90153f3 	stp	x19, x20, [sp, #16]
   a48e0:	aa0003f3 	mov	x19, x0
   a48e4:	f9400400 	ldr	x0, [x0, #8]
   a48e8:	f90013f5 	str	x21, [sp, #32]
   a48ec:	aa0103f5 	mov	x21, x1
   a48f0:	b9001262 	str	w2, [x19, #16]
   a48f4:	b40000a0 	cbz	x0, a4908 <CString::Append(char const*)+0x38>
   a48f8:	94000a2e 	bl	a71b0 <strlen>
   a48fc:	b9401261 	ldr	w1, [x19, #16]
   a4900:	0b000021 	add	w1, w1, w0
   a4904:	b9001261 	str	w1, [x19, #16]
   a4908:	aa1503e0 	mov	x0, x21
   a490c:	94000a29 	bl	a71b0 <strlen>
   a4910:	b9401261 	ldr	w1, [x19, #16]
   a4914:	0b000020 	add	w0, w1, w0
   a4918:	b9001260 	str	w0, [x19, #16]
   a491c:	94000e59 	bl	a8280 <operator new[](unsigned long)>
   a4920:	f9400661 	ldr	x1, [x19, #8]
   a4924:	aa0003f4 	mov	x20, x0
   a4928:	b40001a1 	cbz	x1, a495c <CString::Append(char const*)+0x8c>
   a492c:	94000ab1 	bl	a73f0 <strcpy>
   a4930:	f9400660 	ldr	x0, [x19, #8]
   a4934:	b4000040 	cbz	x0, a493c <CString::Append(char const*)+0x6c>
   a4938:	94000e66 	bl	a82d0 <operator delete[](void*)>
   a493c:	aa1503e1 	mov	x1, x21
   a4940:	aa1403e0 	mov	x0, x20
   a4944:	94000ac3 	bl	a7450 <strcat>
   a4948:	f94013f5 	ldr	x21, [sp, #32]
   a494c:	f9000674 	str	x20, [x19, #8]
   a4950:	a94153f3 	ldp	x19, x20, [sp, #16]
   a4954:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a4958:	d65f03c0 	ret
   a495c:	aa1503e1 	mov	x1, x21
   a4960:	3900001f 	strb	wzr, [x0]
   a4964:	aa1403e0 	mov	x0, x20
   a4968:	94000aba 	bl	a7450 <strcat>
   a496c:	f94013f5 	ldr	x21, [sp, #32]
   a4970:	f9000674 	str	x20, [x19, #8]
   a4974:	a94153f3 	ldp	x19, x20, [sp, #16]
   a4978:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a497c:	d65f03c0 	ret

00000000000a4980 <CString::operator+=(char const*)>:
   a4980:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a4984:	910003fd 	mov	x29, sp
   a4988:	f9000bf3 	str	x19, [sp, #16]
   a498c:	aa0003f3 	mov	x19, x0
   a4990:	97ffffd0 	bl	a48d0 <CString::Append(char const*)>
   a4994:	aa1303e0 	mov	x0, x19
   a4998:	f9400bf3 	ldr	x19, [sp, #16]
   a499c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a49a0:	d65f03c0 	ret
   a49a4:	d503201f 	nop
   a49a8:	d503201f 	nop
   a49ac:	d503201f 	nop

00000000000a49b0 <CString::operator+=(CString const&)>:
   a49b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a49b4:	910003fd 	mov	x29, sp
   a49b8:	f9400422 	ldr	x2, [x1, #8]
   a49bc:	d0000061 	adrp	x1, b2000 <_etext+0x1158>
   a49c0:	91374021 	add	x1, x1, #0xdd0
   a49c4:	f9000bf3 	str	x19, [sp, #16]
   a49c8:	aa0003f3 	mov	x19, x0
   a49cc:	f100005f 	cmp	x2, #0x0
   a49d0:	9a820021 	csel	x1, x1, x2, eq	// eq = none
   a49d4:	97ffffbf 	bl	a48d0 <CString::Append(char const*)>
   a49d8:	aa1303e0 	mov	x0, x19
   a49dc:	f9400bf3 	ldr	x19, [sp, #16]
   a49e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a49e4:	d65f03c0 	ret
   a49e8:	d503201f 	nop
   a49ec:	d503201f 	nop

00000000000a49f0 <CString::Append(char)>:
   a49f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a49f4:	910003fd 	mov	x29, sp
   a49f8:	390063e1 	strb	w1, [sp, #24]
   a49fc:	910063e1 	add	x1, sp, #0x18
   a4a00:	390067ff 	strb	wzr, [sp, #25]
   a4a04:	97ffffb3 	bl	a48d0 <CString::Append(char const*)>
   a4a08:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a4a0c:	d65f03c0 	ret

00000000000a4a10 <CString::operator+=(char)>:
   a4a10:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a4a14:	910003fd 	mov	x29, sp
   a4a18:	3900a3e1 	strb	w1, [sp, #40]
   a4a1c:	9100a3e1 	add	x1, sp, #0x28
   a4a20:	f9000bf3 	str	x19, [sp, #16]
   a4a24:	aa0003f3 	mov	x19, x0
   a4a28:	3900a7ff 	strb	wzr, [sp, #41]
   a4a2c:	97ffffa9 	bl	a48d0 <CString::Append(char const*)>
   a4a30:	aa1303e0 	mov	x0, x19
   a4a34:	f9400bf3 	ldr	x19, [sp, #16]
   a4a38:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a4a3c:	d65f03c0 	ret

00000000000a4a40 <CString::Compare(char const*) const>:
   a4a40:	f9400400 	ldr	x0, [x0, #8]
   a4a44:	140009e7 	b	a71e0 <strcmp>
   a4a48:	d503201f 	nop
   a4a4c:	d503201f 	nop

00000000000a4a50 <CString::Find(char) const>:
   a4a50:	f9400403 	ldr	x3, [x0, #8]
   a4a54:	13001c21 	sxtb	w1, w1
   a4a58:	39c00060 	ldrsb	w0, [x3]
   a4a5c:	34000140 	cbz	w0, a4a84 <CString::Find(char) const+0x34>
   a4a60:	d2800002 	mov	x2, #0x0                   	// #0
   a4a64:	14000003 	b	a4a70 <CString::Find(char) const+0x20>
   a4a68:	38e26860 	ldrsb	w0, [x3, x2]
   a4a6c:	340000c0 	cbz	w0, a4a84 <CString::Find(char) const+0x34>
   a4a70:	6b00003f 	cmp	w1, w0
   a4a74:	2a0203e0 	mov	w0, w2
   a4a78:	91000442 	add	x2, x2, #0x1
   a4a7c:	54ffff61 	b.ne	a4a68 <CString::Find(char) const+0x18>  // b.any
   a4a80:	d65f03c0 	ret
   a4a84:	12800000 	mov	w0, #0xffffffff            	// #-1
   a4a88:	d65f03c0 	ret
   a4a8c:	d503201f 	nop

00000000000a4a90 <CString::Replace(char const*, char const*)>:
   a4a90:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   a4a94:	910003fd 	mov	x29, sp
   a4a98:	a9025bf5 	stp	x21, x22, [sp, #32]
   a4a9c:	aa0103f5 	mov	x21, x1
   a4aa0:	a90363f7 	stp	x23, x24, [sp, #48]
   a4aa4:	52800017 	mov	w23, #0x0                   	// #0
   a4aa8:	39c00021 	ldrsb	w1, [x1]
   a4aac:	350000c1 	cbnz	w1, a4ac4 <CString::Replace(char const*, char const*)+0x34>
   a4ab0:	2a1703e0 	mov	w0, w23
   a4ab4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a4ab8:	a94363f7 	ldp	x23, x24, [sp, #48]
   a4abc:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a4ac0:	d65f03c0 	ret
   a4ac4:	a90153f3 	stp	x19, x20, [sp, #16]
   a4ac8:	aa0003f4 	mov	x20, x0
   a4acc:	aa0203f6 	mov	x22, x2
   a4ad0:	f9400413 	ldr	x19, [x0, #8]
   a4ad4:	a9046bf9 	stp	x25, x26, [sp, #64]
   a4ad8:	aa1303e0 	mov	x0, x19
   a4adc:	940009b5 	bl	a71b0 <strlen>
   a4ae0:	11000400 	add	w0, w0, #0x1
   a4ae4:	94000de7 	bl	a8280 <operator new[](unsigned long)>
   a4ae8:	aa1303e1 	mov	x1, x19
   a4aec:	aa0003f8 	mov	x24, x0
   a4af0:	94000a40 	bl	a73f0 <strcpy>
   a4af4:	f9400680 	ldr	x0, [x20, #8]
   a4af8:	b4000040 	cbz	x0, a4b00 <CString::Replace(char const*, char const*)+0x70>
   a4afc:	94000df5 	bl	a82d0 <operator delete[](void*)>
   a4b00:	52800801 	mov	w1, #0x40                  	// #64
   a4b04:	d2800800 	mov	x0, #0x40                  	// #64
   a4b08:	aa1803f3 	mov	x19, x24
   a4b0c:	52800017 	mov	w23, #0x0                   	// #0
   a4b10:	b9001281 	str	w1, [x20, #16]
   a4b14:	94000ddb 	bl	a8280 <operator new[](unsigned long)>
   a4b18:	f9000680 	str	x0, [x20, #8]
   a4b1c:	f9000e80 	str	x0, [x20, #24]
   a4b20:	39c002a1 	ldrsb	w1, [x21]
   a4b24:	aa1303e0 	mov	x0, x19
   a4b28:	94000a6e 	bl	a74e0 <strchr>
   a4b2c:	aa0003fa 	mov	x26, x0
   a4b30:	b4000500 	cbz	x0, a4bd0 <CString::Replace(char const*, char const*)+0x140>
   a4b34:	eb00027f 	cmp	x19, x0
   a4b38:	aa1303e3 	mov	x3, x19
   a4b3c:	54000182 	b.cs	a4b6c <CString::Replace(char const*, char const*)+0xdc>  // b.hs, b.nlast
   a4b40:	d2800021 	mov	x1, #0x1                   	// #1
   a4b44:	aa1403e0 	mov	x0, x20
   a4b48:	38c01679 	ldrsb	w25, [x19], #1
   a4b4c:	97fffe9d 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a4b50:	f9400e81 	ldr	x1, [x20, #24]
   a4b54:	eb13035f 	cmp	x26, x19
   a4b58:	91000420 	add	x0, x1, #0x1
   a4b5c:	f9000e80 	str	x0, [x20, #24]
   a4b60:	39000039 	strb	w25, [x1]
   a4b64:	54fffee1 	b.ne	a4b40 <CString::Replace(char const*, char const*)+0xb0>  // b.any
   a4b68:	aa1a03e3 	mov	x3, x26
   a4b6c:	39c006a1 	ldrsb	w1, [x21, #1]
   a4b70:	91000753 	add	x19, x26, #0x1
   a4b74:	910006a2 	add	x2, x21, #0x1
   a4b78:	35000081 	cbnz	w1, a4b88 <CString::Replace(char const*, char const*)+0xf8>
   a4b7c:	1400002c 	b	a4c2c <CString::Replace(char const*, char const*)+0x19c>
   a4b80:	38c01c41 	ldrsb	w1, [x2, #1]!
   a4b84:	34000541 	cbz	w1, a4c2c <CString::Replace(char const*, char const*)+0x19c>
   a4b88:	39c00260 	ldrsb	w0, [x19]
   a4b8c:	91000673 	add	x19, x19, #0x1
   a4b90:	6b01001f 	cmp	w0, w1
   a4b94:	54ffff60 	b.eq	a4b80 <CString::Replace(char const*, char const*)+0xf0>  // b.none
   a4b98:	aa0303f3 	mov	x19, x3
   a4b9c:	d2800021 	mov	x1, #0x1                   	// #1
   a4ba0:	aa1403e0 	mov	x0, x20
   a4ba4:	38c01679 	ldrsb	w25, [x19], #1
   a4ba8:	97fffe86 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a4bac:	f9400e80 	ldr	x0, [x20, #24]
   a4bb0:	91000401 	add	x1, x0, #0x1
   a4bb4:	f9000e81 	str	x1, [x20, #24]
   a4bb8:	39000019 	strb	w25, [x0]
   a4bbc:	aa1303e0 	mov	x0, x19
   a4bc0:	39c002a1 	ldrsb	w1, [x21]
   a4bc4:	94000a47 	bl	a74e0 <strchr>
   a4bc8:	aa0003fa 	mov	x26, x0
   a4bcc:	b5fffb40 	cbnz	x0, a4b34 <CString::Replace(char const*, char const*)+0xa4>
   a4bd0:	aa1303e0 	mov	x0, x19
   a4bd4:	94000977 	bl	a71b0 <strlen>
   a4bd8:	aa0003f5 	mov	x21, x0
   a4bdc:	b4000080 	cbz	x0, a4bec <CString::Replace(char const*, char const*)+0x15c>
   a4be0:	aa0003e1 	mov	x1, x0
   a4be4:	aa1403e0 	mov	x0, x20
   a4be8:	97fffe76 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a4bec:	aa1303e1 	mov	x1, x19
   a4bf0:	f9400e80 	ldr	x0, [x20, #24]
   a4bf4:	940009ff 	bl	a73f0 <strcpy>
   a4bf8:	f9400e81 	ldr	x1, [x20, #24]
   a4bfc:	aa1803e0 	mov	x0, x24
   a4c00:	8b150022 	add	x2, x1, x21
   a4c04:	f9000e82 	str	x2, [x20, #24]
   a4c08:	3835683f 	strb	wzr, [x1, x21]
   a4c0c:	94000db1 	bl	a82d0 <operator delete[](void*)>
   a4c10:	2a1703e0 	mov	w0, w23
   a4c14:	a94153f3 	ldp	x19, x20, [sp, #16]
   a4c18:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a4c1c:	a94363f7 	ldp	x23, x24, [sp, #48]
   a4c20:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a4c24:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a4c28:	d65f03c0 	ret
   a4c2c:	aa1603e0 	mov	x0, x22
   a4c30:	94000960 	bl	a71b0 <strlen>
   a4c34:	aa0003f9 	mov	x25, x0
   a4c38:	b4000080 	cbz	x0, a4c48 <CString::Replace(char const*, char const*)+0x1b8>
   a4c3c:	aa1903e1 	mov	x1, x25
   a4c40:	aa1403e0 	mov	x0, x20
   a4c44:	97fffe5f 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a4c48:	aa1603e1 	mov	x1, x22
   a4c4c:	f9400e80 	ldr	x0, [x20, #24]
   a4c50:	110006f7 	add	w23, w23, #0x1
   a4c54:	940009e7 	bl	a73f0 <strcpy>
   a4c58:	f9400e80 	ldr	x0, [x20, #24]
   a4c5c:	8b190000 	add	x0, x0, x25
   a4c60:	f9000e80 	str	x0, [x20, #24]
   a4c64:	17ffffaf 	b	a4b20 <CString::Replace(char const*, char const*)+0x90>
   a4c68:	d503201f 	nop
   a4c6c:	d503201f 	nop

00000000000a4c70 <CString::PutChar(char, unsigned long)>:
   a4c70:	b40002e2 	cbz	x2, a4ccc <CString::PutChar(char, unsigned long)+0x5c>
   a4c74:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a4c78:	910003fd 	mov	x29, sp
   a4c7c:	f90013f5 	str	x21, [sp, #32]
   a4c80:	13001c35 	sxtb	w21, w1
   a4c84:	aa0203e1 	mov	x1, x2
   a4c88:	a90153f3 	stp	x19, x20, [sp, #16]
   a4c8c:	aa0203f3 	mov	x19, x2
   a4c90:	aa0003f4 	mov	x20, x0
   a4c94:	97fffe4b 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a4c98:	d1000661 	sub	x1, x19, #0x1
   a4c9c:	d503201f 	nop
   a4ca0:	f9400e82 	ldr	x2, [x20, #24]
   a4ca4:	d1000421 	sub	x1, x1, #0x1
   a4ca8:	b100043f 	cmn	x1, #0x1
   a4cac:	91000440 	add	x0, x2, #0x1
   a4cb0:	f9000e80 	str	x0, [x20, #24]
   a4cb4:	39000055 	strb	w21, [x2]
   a4cb8:	54ffff41 	b.ne	a4ca0 <CString::PutChar(char, unsigned long)+0x30>  // b.any
   a4cbc:	a94153f3 	ldp	x19, x20, [sp, #16]
   a4cc0:	f94013f5 	ldr	x21, [sp, #32]
   a4cc4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a4cc8:	d65f03c0 	ret
   a4ccc:	d65f03c0 	ret

00000000000a4cd0 <CString::PutString(char const*)>:
   a4cd0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a4cd4:	910003fd 	mov	x29, sp
   a4cd8:	a90153f3 	stp	x19, x20, [sp, #16]
   a4cdc:	aa0003f3 	mov	x19, x0
   a4ce0:	aa0103e0 	mov	x0, x1
   a4ce4:	f90013f5 	str	x21, [sp, #32]
   a4ce8:	aa0103f5 	mov	x21, x1
   a4cec:	94000931 	bl	a71b0 <strlen>
   a4cf0:	aa0003f4 	mov	x20, x0
   a4cf4:	b4000080 	cbz	x0, a4d04 <CString::PutString(char const*)+0x34>
   a4cf8:	aa0003e1 	mov	x1, x0
   a4cfc:	aa1303e0 	mov	x0, x19
   a4d00:	97fffe30 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a4d04:	aa1503e1 	mov	x1, x21
   a4d08:	f9400e60 	ldr	x0, [x19, #24]
   a4d0c:	940009b9 	bl	a73f0 <strcpy>
   a4d10:	f9400e60 	ldr	x0, [x19, #24]
   a4d14:	f94013f5 	ldr	x21, [sp, #32]
   a4d18:	8b140000 	add	x0, x0, x20
   a4d1c:	f9000e60 	str	x0, [x19, #24]
   a4d20:	a94153f3 	ldp	x19, x20, [sp, #16]
   a4d24:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a4d28:	d65f03c0 	ret
   a4d2c:	d503201f 	nop

00000000000a4d30 <CString::ReserveSpace(unsigned long)>:
   a4d30:	b40004a1 	cbz	x1, a4dc4 <CString::ReserveSpace(unsigned long)+0x94>
   a4d34:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a4d38:	910003fd 	mov	x29, sp
   a4d3c:	a90153f3 	stp	x19, x20, [sp, #16]
   a4d40:	aa0003f4 	mov	x20, x0
   a4d44:	a9025bf5 	stp	x21, x22, [sp, #32]
   a4d48:	f9400682 	ldr	x2, [x20, #8]
   a4d4c:	f9400e95 	ldr	x21, [x20, #24]
   a4d50:	b9401000 	ldr	w0, [x0, #16]
   a4d54:	cb0202b5 	sub	x21, x21, x2
   a4d58:	8b150021 	add	x1, x1, x21
   a4d5c:	91000422 	add	x2, x1, #0x1
   a4d60:	eb00005f 	cmp	x2, x0
   a4d64:	540000a8 	b.hi	a4d78 <CString::ReserveSpace(unsigned long)+0x48>  // b.pmore
   a4d68:	a94153f3 	ldp	x19, x20, [sp, #16]
   a4d6c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a4d70:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a4d74:	d65f03c0 	ret
   a4d78:	91010433 	add	x19, x1, #0x41
   a4d7c:	aa1303e0 	mov	x0, x19
   a4d80:	94000d40 	bl	a8280 <operator new[](unsigned long)>
   a4d84:	f9400e81 	ldr	x1, [x20, #24]
   a4d88:	aa0003f6 	mov	x22, x0
   a4d8c:	3900003f 	strb	wzr, [x1]
   a4d90:	f9400681 	ldr	x1, [x20, #8]
   a4d94:	94000997 	bl	a73f0 <strcpy>
   a4d98:	f9400680 	ldr	x0, [x20, #8]
   a4d9c:	b4000040 	cbz	x0, a4da4 <CString::ReserveSpace(unsigned long)+0x74>
   a4da0:	94000d4c 	bl	a82d0 <operator delete[](void*)>
   a4da4:	8b1502d5 	add	x21, x22, x21
   a4da8:	f9000696 	str	x22, [x20, #8]
   a4dac:	b9001293 	str	w19, [x20, #16]
   a4db0:	f9000e95 	str	x21, [x20, #24]
   a4db4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a4db8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a4dbc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a4dc0:	d65f03c0 	ret
   a4dc4:	d65f03c0 	ret
   a4dc8:	d503201f 	nop
   a4dcc:	d503201f 	nop

00000000000a4dd0 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   a4dd0:	2a0203e2 	mov	w2, w2
   a4dd4:	12001c63 	and	w3, w3, #0xff
   a4dd8:	eb02003f 	cmp	x1, x2
   a4ddc:	d2800024 	mov	x4, #0x1                   	// #1
   a4de0:	540003c3 	b.cc	a4e58 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x88>  // b.lo, b.ul, b.last
   a4de4:	d503201f 	nop
   a4de8:	9b027c84 	mul	x4, x4, x2
   a4dec:	9ac40826 	udiv	x6, x1, x4
   a4df0:	eb0200df 	cmp	x6, x2
   a4df4:	aa0603e5 	mov	x5, x6
   a4df8:	54ffff82 	b.cs	a4de8 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x18>  // b.hs, b.nlast
   a4dfc:	52000068 	eor	w8, w3, #0x1
   a4e00:	aa0003e7 	mov	x7, x0
   a4e04:	531b0908 	ubfiz	w8, w8, #5, #3
   a4e08:	1100dd08 	add	w8, w8, #0x37
   a4e0c:	12001d08 	and	w8, w8, #0xff
   a4e10:	14000004 	b	a4e20 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x50>
   a4e14:	9ac60825 	udiv	x5, x1, x6
   a4e18:	aa0603e4 	mov	x4, x6
   a4e1c:	aa0503e6 	mov	x6, x5
   a4e20:	12001ca3 	and	w3, w5, #0xff
   a4e24:	f10024bf 	cmp	x5, #0x9
   a4e28:	9b0484c1 	msub	x1, x6, x4, x1
   a4e2c:	1100c065 	add	w5, w3, #0x30
   a4e30:	0b080063 	add	w3, w3, w8
   a4e34:	9ac20886 	udiv	x6, x4, x2
   a4e38:	13001ca5 	sxtb	w5, w5
   a4e3c:	13001c63 	sxtb	w3, w3
   a4e40:	1a858063 	csel	w3, w3, w5, hi	// hi = pmore
   a4e44:	eb02009f 	cmp	x4, x2
   a4e48:	380014e3 	strb	w3, [x7], #1
   a4e4c:	54fffe42 	b.cs	a4e14 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x44>  // b.hs, b.nlast
   a4e50:	390000ff 	strb	wzr, [x7]
   a4e54:	d65f03c0 	ret
   a4e58:	aa0103e5 	mov	x5, x1
   a4e5c:	aa0103e6 	mov	x6, x1
   a4e60:	17ffffe7 	b	a4dfc <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x2c>
   a4e64:	d503201f 	nop
   a4e68:	d503201f 	nop
   a4e6c:	d503201f 	nop

00000000000a4e70 <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
   a4e70:	2a0203e2 	mov	w2, w2
   a4e74:	12001c63 	and	w3, w3, #0xff
   a4e78:	eb02003f 	cmp	x1, x2
   a4e7c:	d2800024 	mov	x4, #0x1                   	// #1
   a4e80:	540003c3 	b.cc	a4ef8 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x88>  // b.lo, b.ul, b.last
   a4e84:	d503201f 	nop
   a4e88:	9b027c84 	mul	x4, x4, x2
   a4e8c:	9ac40826 	udiv	x6, x1, x4
   a4e90:	eb0200df 	cmp	x6, x2
   a4e94:	aa0603e5 	mov	x5, x6
   a4e98:	54ffff82 	b.cs	a4e88 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x18>  // b.hs, b.nlast
   a4e9c:	52000068 	eor	w8, w3, #0x1
   a4ea0:	aa0003e7 	mov	x7, x0
   a4ea4:	531b0908 	ubfiz	w8, w8, #5, #3
   a4ea8:	1100dd08 	add	w8, w8, #0x37
   a4eac:	12001d08 	and	w8, w8, #0xff
   a4eb0:	14000004 	b	a4ec0 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x50>
   a4eb4:	9ac60825 	udiv	x5, x1, x6
   a4eb8:	aa0603e4 	mov	x4, x6
   a4ebc:	aa0503e6 	mov	x6, x5
   a4ec0:	12001ca3 	and	w3, w5, #0xff
   a4ec4:	f10024bf 	cmp	x5, #0x9
   a4ec8:	9b0484c1 	msub	x1, x6, x4, x1
   a4ecc:	1100c065 	add	w5, w3, #0x30
   a4ed0:	0b080063 	add	w3, w3, w8
   a4ed4:	9ac20886 	udiv	x6, x4, x2
   a4ed8:	13001ca5 	sxtb	w5, w5
   a4edc:	13001c63 	sxtb	w3, w3
   a4ee0:	1a858063 	csel	w3, w3, w5, hi	// hi = pmore
   a4ee4:	eb02009f 	cmp	x4, x2
   a4ee8:	380014e3 	strb	w3, [x7], #1
   a4eec:	54fffe42 	b.cs	a4eb4 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x44>  // b.hs, b.nlast
   a4ef0:	390000ff 	strb	wzr, [x7]
   a4ef4:	d65f03c0 	ret
   a4ef8:	aa0103e5 	mov	x5, x1
   a4efc:	aa0103e6 	mov	x6, x1
   a4f00:	17ffffe7 	b	a4e9c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x2c>
   a4f04:	d503201f 	nop
   a4f08:	d503201f 	nop
   a4f0c:	d503201f 	nop

00000000000a4f10 <CString::ftoa(char*, double, unsigned int)>:
   a4f10:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   a4f14:	910003fd 	mov	x29, sp
   a4f18:	1e602018 	fcmpe	d0, #0.0
   a4f1c:	a90153f3 	stp	x19, x20, [sp, #16]
   a4f20:	aa0003f3 	mov	x19, x0
   a4f24:	a9025bf5 	stp	x21, x22, [sp, #32]
   a4f28:	2a0103f5 	mov	w21, w1
   a4f2c:	a90363f7 	stp	x23, x24, [sp, #48]
   a4f30:	fd0023e8 	str	d8, [sp, #64]
   a4f34:	1e604008 	fmov	d8, d0
   a4f38:	54000ec4 	b.mi	a5110 <CString::ftoa(char*, double, unsigned int)+0x200>  // b.first
   a4f3c:	aa0003f8 	mov	x24, x0
   a4f40:	d2e87e00 	mov	x0, #0x43f0000000000000    	// #4895412794951729152
   a4f44:	9e670000 	fmov	d0, x0
   a4f48:	1e602110 	fcmpe	d8, d0
   a4f4c:	54000ecc 	b.gt	a5124 <CString::ftoa(char*, double, unsigned int)+0x214>
   a4f50:	9e790114 	fcvtzu	x20, d8
   a4f54:	d2800022 	mov	x2, #0x1                   	// #1
   a4f58:	f100269f 	cmp	x20, #0x9
   a4f5c:	54000fa9 	b.ls	a5150 <CString::ftoa(char*, double, unsigned int)+0x240>  // b.plast
   a4f60:	8b020842 	add	x2, x2, x2, lsl #2
   a4f64:	d37ff842 	lsl	x2, x2, #1
   a4f68:	9ac20a83 	udiv	x3, x20, x2
   a4f6c:	f100247f 	cmp	x3, #0x9
   a4f70:	54ffff88 	b.hi	a4f60 <CString::ftoa(char*, double, unsigned int)+0x50>  // b.pmore
   a4f74:	b202e7e7 	mov	x7, #0xcccccccccccccccc    	// #-3689348814741910324
   a4f78:	aa1803e0 	mov	x0, x24
   a4f7c:	aa1403e5 	mov	x5, x20
   a4f80:	f29999a7 	movk	x7, #0xcccd
   a4f84:	14000003 	b	a4f90 <CString::ftoa(char*, double, unsigned int)+0x80>
   a4f88:	aa0303e2 	mov	x2, x3
   a4f8c:	9ac308a3 	udiv	x3, x5, x3
   a4f90:	12001c64 	and	w4, w3, #0xff
   a4f94:	f100247f 	cmp	x3, #0x9
   a4f98:	1100c083 	add	w3, w4, #0x30
   a4f9c:	11015c84 	add	w4, w4, #0x57
   a4fa0:	13001c63 	sxtb	w3, w3
   a4fa4:	13001c84 	sxtb	w4, w4
   a4fa8:	1a838084 	csel	w4, w4, w3, hi	// hi = pmore
   a4fac:	9ac208a6 	udiv	x6, x5, x2
   a4fb0:	f100245f 	cmp	x2, #0x9
   a4fb4:	38001404 	strb	w4, [x0], #1
   a4fb8:	9bc77c43 	umulh	x3, x2, x7
   a4fbc:	d343fc63 	lsr	x3, x3, #3
   a4fc0:	9b0294c5 	msub	x5, x6, x2, x5
   a4fc4:	54fffe28 	b.hi	a4f88 <CString::ftoa(char*, double, unsigned int)+0x78>  // b.pmore
   a4fc8:	3900001f 	strb	wzr, [x0]
   a4fcc:	35000115 	cbnz	w21, a4fec <CString::ftoa(char*, double, unsigned int)+0xdc>
   a4fd0:	aa1303e0 	mov	x0, x19
   a4fd4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a4fd8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a4fdc:	a94363f7 	ldp	x23, x24, [sp, #48]
   a4fe0:	fd4023e8 	ldr	d8, [sp, #64]
   a4fe4:	a8c77bfd 	ldp	x29, x30, [sp], #112
   a4fe8:	d65f03c0 	ret
   a4fec:	aa1803e0 	mov	x0, x24
   a4ff0:	52800276 	mov	w22, #0x13                  	// #19
   a4ff4:	9400086f 	bl	a71b0 <strlen>
   a4ff8:	528005c1 	mov	w1, #0x2e                  	// #46
   a4ffc:	71004ebf 	cmp	w21, #0x13
   a5000:	1a9692b6 	csel	w22, w21, w22, ls	// ls = plast
   a5004:	8b000317 	add	x23, x24, x0
   a5008:	710006bf 	cmp	w21, #0x1
   a500c:	38206b01 	strb	w1, [x24, x0]
   a5010:	910006f5 	add	x21, x23, #0x1
   a5014:	54000a60 	b.eq	a5160 <CString::ftoa(char*, double, unsigned int)+0x250>  // b.none
   a5018:	52800040 	mov	w0, #0x2                   	// #2
   a501c:	d2800141 	mov	x1, #0xa                   	// #10
   a5020:	8b010821 	add	x1, x1, x1, lsl #2
   a5024:	11000400 	add	w0, w0, #0x1
   a5028:	6b0002df 	cmp	w22, w0
   a502c:	d37ff821 	lsl	x1, x1, #1
   a5030:	54ffff82 	b.cs	a5020 <CString::ftoa(char*, double, unsigned int)+0x110>  // b.hs, b.nlast
   a5034:	9e630020 	ucvtf	d0, x1
   a5038:	9e630281 	ucvtf	d1, x20
   a503c:	d2800021 	mov	x1, #0x1                   	// #1
   a5040:	1e613908 	fsub	d8, d8, d1
   a5044:	1e600908 	fmul	d8, d8, d0
   a5048:	9e790104 	fcvtzu	x4, d8
   a504c:	f100249f 	cmp	x4, #0x9
   a5050:	540008c9 	b.ls	a5168 <CString::ftoa(char*, double, unsigned int)+0x258>  // b.plast
   a5054:	d503201f 	nop
   a5058:	8b010821 	add	x1, x1, x1, lsl #2
   a505c:	d37ff821 	lsl	x1, x1, #1
   a5060:	9ac10882 	udiv	x2, x4, x1
   a5064:	f100245f 	cmp	x2, #0x9
   a5068:	54ffff88 	b.hi	a5058 <CString::ftoa(char*, double, unsigned int)+0x148>  // b.pmore
   a506c:	b202e7e7 	mov	x7, #0xcccccccccccccccc    	// #-3689348814741910324
   a5070:	910163e5 	add	x5, sp, #0x58
   a5074:	f29999a7 	movk	x7, #0xcccd
   a5078:	14000003 	b	a5084 <CString::ftoa(char*, double, unsigned int)+0x174>
   a507c:	aa0203e1 	mov	x1, x2
   a5080:	9ac20882 	udiv	x2, x4, x2
   a5084:	12001c43 	and	w3, w2, #0xff
   a5088:	f100245f 	cmp	x2, #0x9
   a508c:	1100c060 	add	w0, w3, #0x30
   a5090:	11015c63 	add	w3, w3, #0x57
   a5094:	13001c00 	sxtb	w0, w0
   a5098:	13001c63 	sxtb	w3, w3
   a509c:	1a808063 	csel	w3, w3, w0, hi	// hi = pmore
   a50a0:	9ac10886 	udiv	x6, x4, x1
   a50a4:	f100243f 	cmp	x1, #0x9
   a50a8:	380014a3 	strb	w3, [x5], #1
   a50ac:	9bc77c22 	umulh	x2, x1, x7
   a50b0:	d343fc42 	lsr	x2, x2, #3
   a50b4:	9b0190c4 	msub	x4, x6, x1, x4
   a50b8:	54fffe28 	b.hi	a507c <CString::ftoa(char*, double, unsigned int)+0x16c>  // b.pmore
   a50bc:	910163e0 	add	x0, sp, #0x58
   a50c0:	390000bf 	strb	wzr, [x5]
   a50c4:	9400083b 	bl	a71b0 <strlen>
   a50c8:	4b0002d6 	sub	w22, w22, w0
   a50cc:	510006c0 	sub	w0, w22, #0x1
   a50d0:	34000456 	cbz	w22, a5158 <CString::ftoa(char*, double, unsigned int)+0x248>
   a50d4:	91000800 	add	x0, x0, #0x2
   a50d8:	52800601 	mov	w1, #0x30                  	// #48
   a50dc:	8b0002e0 	add	x0, x23, x0
   a50e0:	380016a1 	strb	w1, [x21], #1
   a50e4:	eb15001f 	cmp	x0, x21
   a50e8:	54ffffc1 	b.ne	a50e0 <CString::ftoa(char*, double, unsigned int)+0x1d0>  // b.any
   a50ec:	910163e1 	add	x1, sp, #0x58
   a50f0:	940008c0 	bl	a73f0 <strcpy>
   a50f4:	aa1303e0 	mov	x0, x19
   a50f8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a50fc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a5100:	a94363f7 	ldp	x23, x24, [sp, #48]
   a5104:	fd4023e8 	ldr	d8, [sp, #64]
   a5108:	a8c77bfd 	ldp	x29, x30, [sp], #112
   a510c:	d65f03c0 	ret
   a5110:	aa0003f8 	mov	x24, x0
   a5114:	528005a0 	mov	w0, #0x2d                  	// #45
   a5118:	1e614008 	fneg	d8, d0
   a511c:	38001700 	strb	w0, [x24], #1
   a5120:	17ffff88 	b	a4f40 <CString::ftoa(char*, double, unsigned int)+0x30>
   a5124:	aa1803e0 	mov	x0, x24
   a5128:	90000081 	adrp	x1, b5000 <_etext+0x4158>
   a512c:	910fc021 	add	x1, x1, #0x3f0
   a5130:	940008b0 	bl	a73f0 <strcpy>
   a5134:	aa1303e0 	mov	x0, x19
   a5138:	a94153f3 	ldp	x19, x20, [sp, #16]
   a513c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a5140:	a94363f7 	ldp	x23, x24, [sp, #48]
   a5144:	fd4023e8 	ldr	d8, [sp, #64]
   a5148:	a8c77bfd 	ldp	x29, x30, [sp], #112
   a514c:	d65f03c0 	ret
   a5150:	aa1403e3 	mov	x3, x20
   a5154:	17ffff88 	b	a4f74 <CString::ftoa(char*, double, unsigned int)+0x64>
   a5158:	aa1503e0 	mov	x0, x21
   a515c:	17ffffe4 	b	a50ec <CString::ftoa(char*, double, unsigned int)+0x1dc>
   a5160:	1e649000 	fmov	d0, #1.000000000000000000e+01
   a5164:	17ffffb5 	b	a5038 <CString::ftoa(char*, double, unsigned int)+0x128>
   a5168:	aa0403e2 	mov	x2, x4
   a516c:	17ffffc0 	b	a506c <CString::ftoa(char*, double, unsigned int)+0x15c>

00000000000a5170 <CString::FormatV(char const*, std::__va_list)>:
   a5170:	a9b47bfd 	stp	x29, x30, [sp, #-192]!
   a5174:	910003fd 	mov	x29, sp
   a5178:	a9025bf5 	stp	x21, x22, [sp, #32]
   a517c:	a9046bf9 	stp	x25, x26, [sp, #64]
   a5180:	aa0103fa 	mov	x26, x1
   a5184:	a9400455 	ldp	x21, x1, [x2]
   a5188:	a90153f3 	stp	x19, x20, [sp, #16]
   a518c:	aa0203f4 	mov	x20, x2
   a5190:	f90037e1 	str	x1, [sp, #104]
   a5194:	b9401c41 	ldr	w1, [x2, #28]
   a5198:	a90573fb 	stp	x27, x28, [sp, #80]
   a519c:	aa0003fb 	mov	x27, x0
   a51a0:	f9400400 	ldr	x0, [x0, #8]
   a51a4:	b90067e1 	str	w1, [sp, #100]
   a51a8:	b9401856 	ldr	w22, [x2, #24]
   a51ac:	b4000040 	cbz	x0, a51b4 <CString::FormatV(char const*, std::__va_list)+0x44>
   a51b0:	94000c48 	bl	a82d0 <operator delete[](void*)>
   a51b4:	52800801 	mov	w1, #0x40                  	// #64
   a51b8:	d2800800 	mov	x0, #0x40                  	// #64
   a51bc:	b9001361 	str	w1, [x27, #16]
   a51c0:	94000c30 	bl	a8280 <operator new[](unsigned long)>
   a51c4:	f9000760 	str	x0, [x27, #8]
   a51c8:	f9000f60 	str	x0, [x27, #24]
   a51cc:	39c00353 	ldrsb	w19, [x26]
   a51d0:	34000b93 	cbz	w19, a5340 <CString::FormatV(char const*, std::__va_list)+0x1d0>
   a51d4:	a90363f7 	stp	x23, x24, [sp, #48]
   a51d8:	90000098 	adrp	x24, b5000 <_etext+0x4158>
   a51dc:	91100300 	add	x0, x24, #0x400
   a51e0:	f9003be0 	str	x0, [sp, #112]
   a51e4:	90000099 	adrp	x25, b5000 <_etext+0x4158>
   a51e8:	91102320 	add	x0, x25, #0x408
   a51ec:	f9003fe0 	str	x0, [sp, #120]
   a51f0:	7100967f 	cmp	w19, #0x25
   a51f4:	54000b41 	b.ne	a535c <CString::FormatV(char const*, std::__va_list)+0x1ec>  // b.any
   a51f8:	39c00742 	ldrsb	w2, [x26, #1]
   a51fc:	7100945f 	cmp	w2, #0x25
   a5200:	54002f80 	b.eq	a57f0 <CString::FormatV(char const*, std::__va_list)+0x680>  // b.none
   a5204:	71008c5f 	cmp	w2, #0x23
   a5208:	54002ec0 	b.eq	a57e0 <CString::FormatV(char const*, std::__va_list)+0x670>  // b.none
   a520c:	9100075a 	add	x26, x26, #0x1
   a5210:	52800009 	mov	w9, #0x0                   	// #0
   a5214:	7100b45f 	cmp	w2, #0x2d
   a5218:	52800017 	mov	w23, #0x0                   	// #0
   a521c:	54000081 	b.ne	a522c <CString::FormatV(char const*, std::__va_list)+0xbc>  // b.any
   a5220:	39c00742 	ldrsb	w2, [x26, #1]
   a5224:	52800037 	mov	w23, #0x1                   	// #1
   a5228:	9100075a 	add	x26, x26, #0x1
   a522c:	7100c05f 	cmp	w2, #0x30
   a5230:	5280001c 	mov	w28, #0x0                   	// #0
   a5234:	54000081 	b.ne	a5244 <CString::FormatV(char const*, std::__va_list)+0xd4>  // b.any
   a5238:	39c00742 	ldrsb	w2, [x26, #1]
   a523c:	5280003c 	mov	w28, #0x1                   	// #1
   a5240:	9100075a 	add	x26, x26, #0x1
   a5244:	5100c043 	sub	w3, w2, #0x30
   a5248:	d2800013 	mov	x19, #0x0                   	// #0
   a524c:	12001c60 	and	w0, w3, #0xff
   a5250:	7100241f 	cmp	w0, #0x9
   a5254:	54000128 	b.hi	a5278 <CString::FormatV(char const*, std::__va_list)+0x108>  // b.pmore
   a5258:	38c01f42 	ldrsb	w2, [x26, #1]!
   a525c:	8b130a73 	add	x19, x19, x19, lsl #2
   a5260:	93401c63 	sxtb	x3, w3
   a5264:	8b130473 	add	x19, x3, x19, lsl #1
   a5268:	5100c043 	sub	w3, w2, #0x30
   a526c:	12001c64 	and	w4, w3, #0xff
   a5270:	7100249f 	cmp	w4, #0x9
   a5274:	54ffff29 	b.ls	a5258 <CString::FormatV(char const*, std::__va_list)+0xe8>  // b.plast
   a5278:	7100b85f 	cmp	w2, #0x2e
   a527c:	54003100 	b.eq	a589c <CString::FormatV(char const*, std::__va_list)+0x72c>  // b.none
   a5280:	39c00342 	ldrsb	w2, [x26]
   a5284:	528000c1 	mov	w1, #0x6                   	// #6
   a5288:	7101b05f 	cmp	w2, #0x6c
   a528c:	52800018 	mov	w24, #0x0                   	// #0
   a5290:	52800019 	mov	w25, #0x0                   	// #0
   a5294:	54001ea0 	b.eq	a5668 <CString::FormatV(char const*, std::__va_list)+0x4f8>  // b.none
   a5298:	7101bc5f 	cmp	w2, #0x6f
   a529c:	54001f40 	b.eq	a5684 <CString::FormatV(char const*, std::__va_list)+0x514>  // b.none
   a52a0:	540012ac 	b.gt	a54f4 <CString::FormatV(char const*, std::__va_list)+0x384>
   a52a4:	7101905f 	cmp	w2, #0x64
   a52a8:	540006e0 	b.eq	a5384 <CString::FormatV(char const*, std::__va_list)+0x214>  // b.none
   a52ac:	54000fcd 	b.le	a54a4 <CString::FormatV(char const*, std::__va_list)+0x334>
   a52b0:	7101985f 	cmp	w2, #0x66
   a52b4:	54000641 	b.ne	a537c <CString::FormatV(char const*, std::__va_list)+0x20c>  // b.any
   a52b8:	b94067e0 	ldr	w0, [sp, #100]
   a52bc:	37f83d20 	tbnz	w0, #31, a5a60 <CString::FormatV(char const*, std::__va_list)+0x8f0>
   a52c0:	91003ea2 	add	x2, x21, #0xf
   a52c4:	aa1503e0 	mov	x0, x21
   a52c8:	927df055 	and	x21, x2, #0xfffffffffffffff8
   a52cc:	fd400000 	ldr	d0, [x0]
   a52d0:	910243f9 	add	x25, sp, #0x90
   a52d4:	aa1903e0 	mov	x0, x25
   a52d8:	97ffff0e 	bl	a4f10 <CString::ftoa(char*, double, unsigned int)>
   a52dc:	aa1903e0 	mov	x0, x25
   a52e0:	940007b4 	bl	a71b0 <strlen>
   a52e4:	aa0003fc 	mov	x28, x0
   a52e8:	35004a57 	cbnz	w23, a5c30 <CString::FormatV(char const*, std::__va_list)+0xac0>
   a52ec:	eb00027f 	cmp	x19, x0
   a52f0:	540043c8 	b.hi	a5b68 <CString::FormatV(char const*, std::__va_list)+0x9f8>  // b.pmore
   a52f4:	d503201f 	nop
   a52f8:	aa1903e0 	mov	x0, x25
   a52fc:	940007ad 	bl	a71b0 <strlen>
   a5300:	aa0003f3 	mov	x19, x0
   a5304:	b4000080 	cbz	x0, a5314 <CString::FormatV(char const*, std::__va_list)+0x1a4>
   a5308:	aa0003e1 	mov	x1, x0
   a530c:	aa1b03e0 	mov	x0, x27
   a5310:	97fffcac 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a5314:	aa1903e1 	mov	x1, x25
   a5318:	f9400f60 	ldr	x0, [x27, #24]
   a531c:	94000835 	bl	a73f0 <strcpy>
   a5320:	f9400f60 	ldr	x0, [x27, #24]
   a5324:	8b130000 	add	x0, x0, x19
   a5328:	f9000f60 	str	x0, [x27, #24]
   a532c:	9100075a 	add	x26, x26, #0x1
   a5330:	39c00353 	ldrsb	w19, [x26]
   a5334:	35fff5f3 	cbnz	w19, a51f0 <CString::FormatV(char const*, std::__va_list)+0x80>
   a5338:	f9400f60 	ldr	x0, [x27, #24]
   a533c:	a94363f7 	ldp	x23, x24, [sp, #48]
   a5340:	3900001f 	strb	wzr, [x0]
   a5344:	a94153f3 	ldp	x19, x20, [sp, #16]
   a5348:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a534c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a5350:	a94573fb 	ldp	x27, x28, [sp, #80]
   a5354:	a8cc7bfd 	ldp	x29, x30, [sp], #192
   a5358:	d65f03c0 	ret
   a535c:	d2800021 	mov	x1, #0x1                   	// #1
   a5360:	aa1b03e0 	mov	x0, x27
   a5364:	97fffc97 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a5368:	f9400f60 	ldr	x0, [x27, #24]
   a536c:	91000401 	add	x1, x0, #0x1
   a5370:	f9000f61 	str	x1, [x27, #24]
   a5374:	39000013 	strb	w19, [x0]
   a5378:	17ffffed 	b	a532c <CString::FormatV(char const*, std::__va_list)+0x1bc>
   a537c:	7101a45f 	cmp	w2, #0x69
   a5380:	540024e1 	b.ne	a581c <CString::FormatV(char const*, std::__va_list)+0x6ac>  // b.any
   a5384:	34002af8 	cbz	w24, a58e0 <CString::FormatV(char const*, std::__va_list)+0x770>
   a5388:	37f84d56 	tbnz	w22, #31, a5d30 <CString::FormatV(char const*, std::__va_list)+0xbc0>
   a538c:	91003ea1 	add	x1, x21, #0xf
   a5390:	aa1503e0 	mov	x0, x21
   a5394:	927df035 	and	x21, x1, #0xfffffffffffffff8
   a5398:	f9400002 	ldr	x2, [x0]
   a539c:	b6f85a22 	tbz	x2, #63, a5ee0 <CString::FormatV(char const*, std::__va_list)+0xd70>
   a53a0:	cb0203e2 	neg	x2, x2
   a53a4:	f100245f 	cmp	x2, #0x9
   a53a8:	aa0203e8 	mov	x8, x2
   a53ac:	540058ed 	b.le	a5ec8 <CString::FormatV(char const*, std::__va_list)+0xd58>
   a53b0:	d2800020 	mov	x0, #0x1                   	// #1
   a53b4:	d503201f 	nop
   a53b8:	8b000800 	add	x0, x0, x0, lsl #2
   a53bc:	d37ff800 	lsl	x0, x0, #1
   a53c0:	9ac00841 	udiv	x1, x2, x0
   a53c4:	f100243f 	cmp	x1, #0x9
   a53c8:	54ffff88 	b.hi	a53b8 <CString::FormatV(char const*, std::__va_list)+0x248>  // b.pmore
   a53cc:	910243f9 	add	x25, sp, #0x90
   a53d0:	aa1903ea 	mov	x10, x25
   a53d4:	14000003 	b	a53e0 <CString::FormatV(char const*, std::__va_list)+0x270>
   a53d8:	aa0103e0 	mov	x0, x1
   a53dc:	9ac10901 	udiv	x1, x8, x1
   a53e0:	12001c23 	and	w3, w1, #0xff
   a53e4:	f100243f 	cmp	x1, #0x9
   a53e8:	1100c069 	add	w9, w3, #0x30
   a53ec:	11015c61 	add	w1, w3, #0x57
   a53f0:	13001c21 	sxtb	w1, w1
   a53f4:	13001d23 	sxtb	w3, w9
   a53f8:	1a838021 	csel	w1, w1, w3, hi	// hi = pmore
   a53fc:	9ac0090b 	udiv	x11, x8, x0
   a5400:	38001541 	strb	w1, [x10], #1
   a5404:	b202e7e1 	mov	x1, #0xcccccccccccccccc    	// #-3689348814741910324
   a5408:	f29999a1 	movk	x1, #0xcccd
   a540c:	f100241f 	cmp	x0, #0x9
   a5410:	9bc17c01 	umulh	x1, x0, x1
   a5414:	d343fc21 	lsr	x1, x1, #3
   a5418:	9b00a168 	msub	x8, x11, x0, x8
   a541c:	54fffde8 	b.hi	a53d8 <CString::FormatV(char const*, std::__va_list)+0x268>  // b.pmore
   a5420:	aa1903e0 	mov	x0, x25
   a5424:	3900015f 	strb	wzr, [x10]
   a5428:	94000762 	bl	a71b0 <strlen>
   a542c:	aa0003e2 	mov	x2, x0
   a5430:	34002b38 	cbz	w24, a5994 <CString::FormatV(char const*, std::__va_list)+0x824>
   a5434:	91000402 	add	x2, x0, #0x1
   a5438:	35004c97 	cbnz	w23, a5dc8 <CString::FormatV(char const*, std::__va_list)+0xc58>
   a543c:	3500531c 	cbnz	w28, a5e9c <CString::FormatV(char const*, std::__va_list)+0xd2c>
   a5440:	eb02027f 	cmp	x19, x2
   a5444:	540001e9 	b.ls	a5480 <CString::FormatV(char const*, std::__va_list)+0x310>  // b.plast
   a5448:	cb020273 	sub	x19, x19, x2
   a544c:	aa1b03e0 	mov	x0, x27
   a5450:	aa1303e1 	mov	x1, x19
   a5454:	97fffc5b 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a5458:	d1000660 	sub	x0, x19, #0x1
   a545c:	52800407 	mov	w7, #0x20                  	// #32
   a5460:	f9400f61 	ldr	x1, [x27, #24]
   a5464:	d1000400 	sub	x0, x0, #0x1
   a5468:	b100041f 	cmn	x0, #0x1
   a546c:	91000423 	add	x3, x1, #0x1
   a5470:	f9000f63 	str	x3, [x27, #24]
   a5474:	39000027 	strb	w7, [x1]
   a5478:	54ffff41 	b.ne	a5460 <CString::FormatV(char const*, std::__va_list)+0x2f0>  // b.any
   a547c:	34fff3f8 	cbz	w24, a52f8 <CString::FormatV(char const*, std::__va_list)+0x188>
   a5480:	d2800021 	mov	x1, #0x1                   	// #1
   a5484:	aa1b03e0 	mov	x0, x27
   a5488:	97fffc4e 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a548c:	f9400f60 	ldr	x0, [x27, #24]
   a5490:	528005a1 	mov	w1, #0x2d                  	// #45
   a5494:	91000403 	add	x3, x0, #0x1
   a5498:	f9000f63 	str	x3, [x27, #24]
   a549c:	39000001 	strb	w1, [x0]
   a54a0:	17ffff96 	b	a52f8 <CString::FormatV(char const*, std::__va_list)+0x188>
   a54a4:	7101605f 	cmp	w2, #0x58
   a54a8:	540053a0 	b.eq	a5f1c <CString::FormatV(char const*, std::__va_list)+0xdac>  // b.none
   a54ac:	71018c5f 	cmp	w2, #0x63
   a54b0:	54001b61 	b.ne	a581c <CString::FormatV(char const*, std::__va_list)+0x6ac>  // b.any
   a54b4:	37f82b76 	tbnz	w22, #31, a5a20 <CString::FormatV(char const*, std::__va_list)+0x8b0>
   a54b8:	91002ea1 	add	x1, x21, #0xb
   a54bc:	aa1503e0 	mov	x0, x21
   a54c0:	927df035 	and	x21, x1, #0xfffffffffffffff8
   a54c4:	39c0001c 	ldrsb	w28, [x0]
   a54c8:	35003897 	cbnz	w23, a5bd8 <CString::FormatV(char const*, std::__va_list)+0xa68>
   a54cc:	f100067f 	cmp	x19, #0x1
   a54d0:	540032a8 	b.hi	a5b24 <CString::FormatV(char const*, std::__va_list)+0x9b4>  // b.pmore
   a54d4:	d2800021 	mov	x1, #0x1                   	// #1
   a54d8:	aa1b03e0 	mov	x0, x27
   a54dc:	97fffc39 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a54e0:	f9400f60 	ldr	x0, [x27, #24]
   a54e4:	91000401 	add	x1, x0, #0x1
   a54e8:	f9000f61 	str	x1, [x27, #24]
   a54ec:	3900001c 	strb	w28, [x0]
   a54f0:	17ffff8f 	b	a532c <CString::FormatV(char const*, std::__va_list)+0x1bc>
   a54f4:	7101d45f 	cmp	w2, #0x75
   a54f8:	540018e0 	b.eq	a5814 <CString::FormatV(char const*, std::__va_list)+0x6a4>  // b.none
   a54fc:	5400086d 	b.le	a5608 <CString::FormatV(char const*, std::__va_list)+0x498>
   a5500:	7101e05f 	cmp	w2, #0x78
   a5504:	540018c1 	b.ne	a581c <CString::FormatV(char const*, std::__va_list)+0x6ac>  // b.any
   a5508:	35002be9 	cbnz	w9, a5a84 <CString::FormatV(char const*, std::__va_list)+0x914>
   a550c:	d2800203 	mov	x3, #0x10                  	// #16
   a5510:	34000d98 	cbz	w24, a56c0 <CString::FormatV(char const*, std::__va_list)+0x550>
   a5514:	37f81b56 	tbnz	w22, #31, a587c <CString::FormatV(char const*, std::__va_list)+0x70c>
   a5518:	91003ea1 	add	x1, x21, #0xf
   a551c:	aa1503e0 	mov	x0, x21
   a5520:	927df035 	and	x21, x1, #0xfffffffffffffff8
   a5524:	f9400009 	ldr	x9, [x0]
   a5528:	eb03013f 	cmp	x9, x3
   a552c:	54004643 	b.cc	a5df4 <CString::FormatV(char const*, std::__va_list)+0xc84>  // b.lo, b.ul, b.last
   a5530:	d2800021 	mov	x1, #0x1                   	// #1
   a5534:	d503201f 	nop
   a5538:	9b037c21 	mul	x1, x1, x3
   a553c:	9ac10928 	udiv	x8, x9, x1
   a5540:	eb03011f 	cmp	x8, x3
   a5544:	aa0803e4 	mov	x4, x8
   a5548:	54ffff82 	b.cs	a5538 <CString::FormatV(char const*, std::__va_list)+0x3c8>  // b.hs, b.nlast
   a554c:	7101605f 	cmp	w2, #0x58
   a5550:	910243f9 	add	x25, sp, #0x90
   a5554:	1a9f07eb 	cset	w11, ne	// ne = any
   a5558:	531b696b 	lsl	w11, w11, #5
   a555c:	aa1903ea 	mov	x10, x25
   a5560:	1100dd6b 	add	w11, w11, #0x37
   a5564:	14000004 	b	a5574 <CString::FormatV(char const*, std::__va_list)+0x404>
   a5568:	9ac80924 	udiv	x4, x9, x8
   a556c:	aa0803e1 	mov	x1, x8
   a5570:	aa0403e8 	mov	x8, x4
   a5574:	12001c80 	and	w0, w4, #0xff
   a5578:	f100249f 	cmp	x4, #0x9
   a557c:	9b01a509 	msub	x9, x8, x1, x9
   a5580:	1100c004 	add	w4, w0, #0x30
   a5584:	0b0b0000 	add	w0, w0, w11
   a5588:	9ac30828 	udiv	x8, x1, x3
   a558c:	13001c84 	sxtb	w4, w4
   a5590:	13001c00 	sxtb	w0, w0
   a5594:	1a848000 	csel	w0, w0, w4, hi	// hi = pmore
   a5598:	eb03003f 	cmp	x1, x3
   a559c:	38001540 	strb	w0, [x10], #1
   a55a0:	54fffe42 	b.cs	a5568 <CString::FormatV(char const*, std::__va_list)+0x3f8>  // b.hs, b.nlast
   a55a4:	aa1903e0 	mov	x0, x25
   a55a8:	3900015f 	strb	wzr, [x10]
   a55ac:	94000701 	bl	a71b0 <strlen>
   a55b0:	aa0003f8 	mov	x24, x0
   a55b4:	35000db7 	cbnz	w23, a5768 <CString::FormatV(char const*, std::__va_list)+0x5f8>
   a55b8:	eb00027f 	cmp	x19, x0
   a55bc:	54ffe9e9 	b.ls	a52f8 <CString::FormatV(char const*, std::__va_list)+0x188>  // b.plast
   a55c0:	cb000273 	sub	x19, x19, x0
   a55c4:	7100039f 	cmp	w28, #0x0
   a55c8:	aa1b03e0 	mov	x0, x27
   a55cc:	52800403 	mov	w3, #0x20                  	// #32
   a55d0:	aa1303e1 	mov	x1, x19
   a55d4:	5280061c 	mov	w28, #0x30                  	// #48
   a55d8:	1a83139c 	csel	w28, w28, w3, ne	// ne = any
   a55dc:	97fffbf9 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a55e0:	d1000660 	sub	x0, x19, #0x1
   a55e4:	d503201f 	nop
   a55e8:	f9400f61 	ldr	x1, [x27, #24]
   a55ec:	d1000400 	sub	x0, x0, #0x1
   a55f0:	b100041f 	cmn	x0, #0x1
   a55f4:	91000423 	add	x3, x1, #0x1
   a55f8:	f9000f63 	str	x3, [x27, #24]
   a55fc:	3900003c 	strb	w28, [x1]
   a5600:	54ffff41 	b.ne	a55e8 <CString::FormatV(char const*, std::__va_list)+0x478>  // b.any
   a5604:	17ffff3d 	b	a52f8 <CString::FormatV(char const*, std::__va_list)+0x188>
   a5608:	7101c05f 	cmp	w2, #0x70
   a560c:	54fff7e0 	b.eq	a5508 <CString::FormatV(char const*, std::__va_list)+0x398>  // b.none
   a5610:	7101cc5f 	cmp	w2, #0x73
   a5614:	54001041 	b.ne	a581c <CString::FormatV(char const*, std::__va_list)+0x6ac>  // b.any
   a5618:	37f82156 	tbnz	w22, #31, a5a40 <CString::FormatV(char const*, std::__va_list)+0x8d0>
   a561c:	91003ea1 	add	x1, x21, #0xf
   a5620:	aa1503e0 	mov	x0, x21
   a5624:	927df035 	and	x21, x1, #0xfffffffffffffff8
   a5628:	f9400018 	ldr	x24, [x0]
   a562c:	aa1803e0 	mov	x0, x24
   a5630:	940006e0 	bl	a71b0 <strlen>
   a5634:	aa0003fc 	mov	x28, x0
   a5638:	35003377 	cbnz	w23, a5ca4 <CString::FormatV(char const*, std::__va_list)+0xb34>
   a563c:	eb13001f 	cmp	x0, x19
   a5640:	54002b03 	b.cc	a5ba0 <CString::FormatV(char const*, std::__va_list)+0xa30>  // b.lo, b.ul, b.last
   a5644:	aa1803e0 	mov	x0, x24
   a5648:	940006da 	bl	a71b0 <strlen>
   a564c:	aa0003f3 	mov	x19, x0
   a5650:	b4000080 	cbz	x0, a5660 <CString::FormatV(char const*, std::__va_list)+0x4f0>
   a5654:	aa0003e1 	mov	x1, x0
   a5658:	aa1b03e0 	mov	x0, x27
   a565c:	97fffbd9 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a5660:	aa1803e1 	mov	x1, x24
   a5664:	17ffff2d 	b	a5318 <CString::FormatV(char const*, std::__va_list)+0x1a8>
   a5668:	39c00742 	ldrsb	w2, [x26, #1]
   a566c:	52800039 	mov	w25, #0x1                   	// #1
   a5670:	7101b05f 	cmp	w2, #0x6c
   a5674:	54000ec0 	b.eq	a584c <CString::FormatV(char const*, std::__va_list)+0x6dc>  // b.none
   a5678:	9100075a 	add	x26, x26, #0x1
   a567c:	7101bc5f 	cmp	w2, #0x6f
   a5680:	54ffe101 	b.ne	a52a0 <CString::FormatV(char const*, std::__va_list)+0x130>  // b.any
   a5684:	d2800103 	mov	x3, #0x8                   	// #8
   a5688:	34fff449 	cbz	w9, a5510 <CString::FormatV(char const*, std::__va_list)+0x3a0>
   a568c:	d2800021 	mov	x1, #0x1                   	// #1
   a5690:	aa1b03e0 	mov	x0, x27
   a5694:	f90043e3 	str	x3, [sp, #128]
   a5698:	97fffbca 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a569c:	f9400f60 	ldr	x0, [x27, #24]
   a56a0:	52800601 	mov	w1, #0x30                  	// #48
   a56a4:	f94043e3 	ldr	x3, [sp, #128]
   a56a8:	91000402 	add	x2, x0, #0x1
   a56ac:	f9000f62 	str	x2, [x27, #24]
   a56b0:	39000001 	strb	w1, [x0]
   a56b4:	39c00342 	ldrsb	w2, [x26]
   a56b8:	35fff2f8 	cbnz	w24, a5514 <CString::FormatV(char const*, std::__va_list)+0x3a4>
   a56bc:	d503201f 	nop
   a56c0:	34000d39 	cbz	w25, a5864 <CString::FormatV(char const*, std::__va_list)+0x6f4>
   a56c4:	37f82216 	tbnz	w22, #31, a5b04 <CString::FormatV(char const*, std::__va_list)+0x994>
   a56c8:	91003ea1 	add	x1, x21, #0xf
   a56cc:	aa1503e0 	mov	x0, x21
   a56d0:	927df035 	and	x21, x1, #0xfffffffffffffff8
   a56d4:	f9400009 	ldr	x9, [x0]
   a56d8:	eb03013f 	cmp	x9, x3
   a56dc:	540036e3 	b.cc	a5db8 <CString::FormatV(char const*, std::__va_list)+0xc48>  // b.lo, b.ul, b.last
   a56e0:	d2800021 	mov	x1, #0x1                   	// #1
   a56e4:	d503201f 	nop
   a56e8:	9b037c21 	mul	x1, x1, x3
   a56ec:	9ac10928 	udiv	x8, x9, x1
   a56f0:	eb03011f 	cmp	x8, x3
   a56f4:	aa0803e4 	mov	x4, x8
   a56f8:	54ffff82 	b.cs	a56e8 <CString::FormatV(char const*, std::__va_list)+0x578>  // b.hs, b.nlast
   a56fc:	7101605f 	cmp	w2, #0x58
   a5700:	910243f9 	add	x25, sp, #0x90
   a5704:	1a9f07eb 	cset	w11, ne	// ne = any
   a5708:	531b696b 	lsl	w11, w11, #5
   a570c:	aa1903ea 	mov	x10, x25
   a5710:	1100dd6b 	add	w11, w11, #0x37
   a5714:	14000004 	b	a5724 <CString::FormatV(char const*, std::__va_list)+0x5b4>
   a5718:	9ac80924 	udiv	x4, x9, x8
   a571c:	aa0803e1 	mov	x1, x8
   a5720:	aa0403e8 	mov	x8, x4
   a5724:	12001c80 	and	w0, w4, #0xff
   a5728:	f100249f 	cmp	x4, #0x9
   a572c:	9b01a509 	msub	x9, x8, x1, x9
   a5730:	1100c004 	add	w4, w0, #0x30
   a5734:	0b0b0000 	add	w0, w0, w11
   a5738:	9ac30828 	udiv	x8, x1, x3
   a573c:	13001c84 	sxtb	w4, w4
   a5740:	13001c00 	sxtb	w0, w0
   a5744:	1a848000 	csel	w0, w0, w4, hi	// hi = pmore
   a5748:	eb03003f 	cmp	x1, x3
   a574c:	38001540 	strb	w0, [x10], #1
   a5750:	54fffe42 	b.cs	a5718 <CString::FormatV(char const*, std::__va_list)+0x5a8>  // b.hs, b.nlast
   a5754:	aa1903e0 	mov	x0, x25
   a5758:	3900015f 	strb	wzr, [x10]
   a575c:	94000695 	bl	a71b0 <strlen>
   a5760:	aa0003f8 	mov	x24, x0
   a5764:	34fff2b7 	cbz	w23, a55b8 <CString::FormatV(char const*, std::__va_list)+0x448>
   a5768:	aa1903e0 	mov	x0, x25
   a576c:	94000691 	bl	a71b0 <strlen>
   a5770:	aa0003fc 	mov	x28, x0
   a5774:	b4000080 	cbz	x0, a5784 <CString::FormatV(char const*, std::__va_list)+0x614>
   a5778:	aa0003e1 	mov	x1, x0
   a577c:	aa1b03e0 	mov	x0, x27
   a5780:	97fffb90 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a5784:	aa1903e1 	mov	x1, x25
   a5788:	f9400f60 	ldr	x0, [x27, #24]
   a578c:	94000719 	bl	a73f0 <strcpy>
   a5790:	f9400f60 	ldr	x0, [x27, #24]
   a5794:	eb18027f 	cmp	x19, x24
   a5798:	8b1c0000 	add	x0, x0, x28
   a579c:	f9000f60 	str	x0, [x27, #24]
   a57a0:	54ffdc69 	b.ls	a532c <CString::FormatV(char const*, std::__va_list)+0x1bc>  // b.plast
   a57a4:	cb180273 	sub	x19, x19, x24
   a57a8:	aa1b03e0 	mov	x0, x27
   a57ac:	aa1303e1 	mov	x1, x19
   a57b0:	97fffb84 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a57b4:	d1000660 	sub	x0, x19, #0x1
   a57b8:	52800403 	mov	w3, #0x20                  	// #32
   a57bc:	d503201f 	nop
   a57c0:	f9400f61 	ldr	x1, [x27, #24]
   a57c4:	d1000400 	sub	x0, x0, #0x1
   a57c8:	b100041f 	cmn	x0, #0x1
   a57cc:	91000422 	add	x2, x1, #0x1
   a57d0:	f9000f62 	str	x2, [x27, #24]
   a57d4:	39000023 	strb	w3, [x1]
   a57d8:	54ffff41 	b.ne	a57c0 <CString::FormatV(char const*, std::__va_list)+0x650>  // b.any
   a57dc:	17fffed4 	b	a532c <CString::FormatV(char const*, std::__va_list)+0x1bc>
   a57e0:	39c00b42 	ldrsb	w2, [x26, #2]
   a57e4:	52800029 	mov	w9, #0x1                   	// #1
   a57e8:	91000b5a 	add	x26, x26, #0x2
   a57ec:	17fffe8a 	b	a5214 <CString::FormatV(char const*, std::__va_list)+0xa4>
   a57f0:	d2800021 	mov	x1, #0x1                   	// #1
   a57f4:	aa1b03e0 	mov	x0, x27
   a57f8:	97fffb72 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a57fc:	f9400f60 	ldr	x0, [x27, #24]
   a5800:	91000b5a 	add	x26, x26, #0x2
   a5804:	91000401 	add	x1, x0, #0x1
   a5808:	f9000f61 	str	x1, [x27, #24]
   a580c:	39000013 	strb	w19, [x0]
   a5810:	17fffec8 	b	a5330 <CString::FormatV(char const*, std::__va_list)+0x1c0>
   a5814:	d2800143 	mov	x3, #0xa                   	// #10
   a5818:	17ffff3e 	b	a5510 <CString::FormatV(char const*, std::__va_list)+0x3a0>
   a581c:	d2800021 	mov	x1, #0x1                   	// #1
   a5820:	aa1b03e0 	mov	x0, x27
   a5824:	97fffb67 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a5828:	f9400f62 	ldr	x2, [x27, #24]
   a582c:	d2800021 	mov	x1, #0x1                   	// #1
   a5830:	528004a3 	mov	w3, #0x25                  	// #37
   a5834:	aa1b03e0 	mov	x0, x27
   a5838:	8b010044 	add	x4, x2, x1
   a583c:	f9000f64 	str	x4, [x27, #24]
   a5840:	39000043 	strb	w3, [x2]
   a5844:	39c00353 	ldrsb	w19, [x26]
   a5848:	17fffec7 	b	a5364 <CString::FormatV(char const*, std::__va_list)+0x1f4>
   a584c:	39c00b42 	ldrsb	w2, [x26, #2]
   a5850:	9100075a 	add	x26, x26, #0x1
   a5854:	2a1903f8 	mov	w24, w25
   a5858:	9100075a 	add	x26, x26, #0x1
   a585c:	52800019 	mov	w25, #0x0                   	// #0
   a5860:	17ffff87 	b	a567c <CString::FormatV(char const*, std::__va_list)+0x50c>
   a5864:	37f813f6 	tbnz	w22, #31, a5ae0 <CString::FormatV(char const*, std::__va_list)+0x970>
   a5868:	aa1503e0 	mov	x0, x21
   a586c:	91002ea1 	add	x1, x21, #0xb
   a5870:	b9400009 	ldr	w9, [x0]
   a5874:	927df035 	and	x21, x1, #0xfffffffffffffff8
   a5878:	17ffff98 	b	a56d8 <CString::FormatV(char const*, std::__va_list)+0x568>
   a587c:	110022c1 	add	w1, w22, #0x8
   a5880:	7100003f 	cmp	w1, #0x0
   a5884:	540016ad 	b.le	a5b58 <CString::FormatV(char const*, std::__va_list)+0x9e8>
   a5888:	91003ea4 	add	x4, x21, #0xf
   a588c:	aa1503e0 	mov	x0, x21
   a5890:	2a0103f6 	mov	w22, w1
   a5894:	927df095 	and	x21, x4, #0xfffffffffffffff8
   a5898:	17ffff23 	b	a5524 <CString::FormatV(char const*, std::__va_list)+0x3b4>
   a589c:	39c00742 	ldrsb	w2, [x26, #1]
   a58a0:	91000745 	add	x5, x26, #0x1
   a58a4:	5100c040 	sub	w0, w2, #0x30
   a58a8:	12001c00 	and	w0, w0, #0xff
   a58ac:	7100241f 	cmp	w0, #0x9
   a58b0:	54002b28 	b.hi	a5e14 <CString::FormatV(char const*, std::__va_list)+0xca4>  // b.pmore
   a58b4:	52800001 	mov	w1, #0x0                   	// #0
   a58b8:	0b010821 	add	w1, w1, w1, lsl #2
   a58bc:	0b010441 	add	w1, w2, w1, lsl #1
   a58c0:	38c01ca2 	ldrsb	w2, [x5, #1]!
   a58c4:	5100c021 	sub	w1, w1, #0x30
   a58c8:	5100c040 	sub	w0, w2, #0x30
   a58cc:	12001c00 	and	w0, w0, #0xff
   a58d0:	7100241f 	cmp	w0, #0x9
   a58d4:	54ffff29 	b.ls	a58b8 <CString::FormatV(char const*, std::__va_list)+0x748>  // b.plast
   a58d8:	aa0503fa 	mov	x26, x5
   a58dc:	17fffe6b 	b	a5288 <CString::FormatV(char const*, std::__va_list)+0x118>
   a58e0:	340021d9 	cbz	w25, a5d18 <CString::FormatV(char const*, std::__va_list)+0xba8>
   a58e4:	37f82cb6 	tbnz	w22, #31, a5e78 <CString::FormatV(char const*, std::__va_list)+0xd08>
   a58e8:	aa1503e0 	mov	x0, x21
   a58ec:	91003ea1 	add	x1, x21, #0xf
   a58f0:	f9400002 	ldr	x2, [x0]
   a58f4:	927df035 	and	x21, x1, #0xfffffffffffffff8
   a58f8:	b6f80062 	tbz	x2, #63, a5904 <CString::FormatV(char const*, std::__va_list)+0x794>
   a58fc:	cb0203e2 	neg	x2, x2
   a5900:	52800038 	mov	w24, #0x1                   	// #1
   a5904:	f100245f 	cmp	x2, #0x9
   a5908:	aa0203e8 	mov	x8, x2
   a590c:	54002e4d 	b.le	a5ed4 <CString::FormatV(char const*, std::__va_list)+0xd64>
   a5910:	d2800020 	mov	x0, #0x1                   	// #1
   a5914:	d503201f 	nop
   a5918:	8b000800 	add	x0, x0, x0, lsl #2
   a591c:	d37ff800 	lsl	x0, x0, #1
   a5920:	9ac00841 	udiv	x1, x2, x0
   a5924:	f100243f 	cmp	x1, #0x9
   a5928:	54ffff88 	b.hi	a5918 <CString::FormatV(char const*, std::__va_list)+0x7a8>  // b.pmore
   a592c:	910243f9 	add	x25, sp, #0x90
   a5930:	aa1903ea 	mov	x10, x25
   a5934:	14000003 	b	a5940 <CString::FormatV(char const*, std::__va_list)+0x7d0>
   a5938:	aa0103e0 	mov	x0, x1
   a593c:	9ac10901 	udiv	x1, x8, x1
   a5940:	12001c23 	and	w3, w1, #0xff
   a5944:	f100243f 	cmp	x1, #0x9
   a5948:	1100c069 	add	w9, w3, #0x30
   a594c:	11015c61 	add	w1, w3, #0x57
   a5950:	13001c21 	sxtb	w1, w1
   a5954:	13001d23 	sxtb	w3, w9
   a5958:	1a838021 	csel	w1, w1, w3, hi	// hi = pmore
   a595c:	9ac0090b 	udiv	x11, x8, x0
   a5960:	38001541 	strb	w1, [x10], #1
   a5964:	b202e7e1 	mov	x1, #0xcccccccccccccccc    	// #-3689348814741910324
   a5968:	f29999a1 	movk	x1, #0xcccd
   a596c:	f100241f 	cmp	x0, #0x9
   a5970:	9bc17c01 	umulh	x1, x0, x1
   a5974:	d343fc21 	lsr	x1, x1, #3
   a5978:	9b00a168 	msub	x8, x11, x0, x8
   a597c:	54fffde8 	b.hi	a5938 <CString::FormatV(char const*, std::__va_list)+0x7c8>  // b.pmore
   a5980:	aa1903e0 	mov	x0, x25
   a5984:	3900015f 	strb	wzr, [x10]
   a5988:	9400060a 	bl	a71b0 <strlen>
   a598c:	aa0003e2 	mov	x2, x0
   a5990:	35ffd538 	cbnz	w24, a5434 <CString::FormatV(char const*, std::__va_list)+0x2c4>
   a5994:	34001df7 	cbz	w23, a5d50 <CString::FormatV(char const*, std::__va_list)+0xbe0>
   a5998:	aa1903e0 	mov	x0, x25
   a599c:	f90043e2 	str	x2, [sp, #128]
   a59a0:	94000604 	bl	a71b0 <strlen>
   a59a4:	aa0003fc 	mov	x28, x0
   a59a8:	f94043e2 	ldr	x2, [sp, #128]
   a59ac:	b40000a0 	cbz	x0, a59c0 <CString::FormatV(char const*, std::__va_list)+0x850>
   a59b0:	aa0003e1 	mov	x1, x0
   a59b4:	aa1b03e0 	mov	x0, x27
   a59b8:	97fffb02 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a59bc:	f94043e2 	ldr	x2, [sp, #128]
   a59c0:	aa1903e1 	mov	x1, x25
   a59c4:	f90043e2 	str	x2, [sp, #128]
   a59c8:	f9400f60 	ldr	x0, [x27, #24]
   a59cc:	94000689 	bl	a73f0 <strcpy>
   a59d0:	f9400f60 	ldr	x0, [x27, #24]
   a59d4:	f94043e2 	ldr	x2, [sp, #128]
   a59d8:	8b1c0000 	add	x0, x0, x28
   a59dc:	eb02027f 	cmp	x19, x2
   a59e0:	f9000f60 	str	x0, [x27, #24]
   a59e4:	54ffca49 	b.ls	a532c <CString::FormatV(char const*, std::__va_list)+0x1bc>  // b.plast
   a59e8:	cb020273 	sub	x19, x19, x2
   a59ec:	aa1b03e0 	mov	x0, x27
   a59f0:	aa1303e1 	mov	x1, x19
   a59f4:	97fffaf3 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a59f8:	d1000660 	sub	x0, x19, #0x1
   a59fc:	52800403 	mov	w3, #0x20                  	// #32
   a5a00:	f9400f61 	ldr	x1, [x27, #24]
   a5a04:	d1000400 	sub	x0, x0, #0x1
   a5a08:	b100041f 	cmn	x0, #0x1
   a5a0c:	91000422 	add	x2, x1, #0x1
   a5a10:	f9000f62 	str	x2, [x27, #24]
   a5a14:	39000023 	strb	w3, [x1]
   a5a18:	54ffff41 	b.ne	a5a00 <CString::FormatV(char const*, std::__va_list)+0x890>  // b.any
   a5a1c:	17fffe44 	b	a532c <CString::FormatV(char const*, std::__va_list)+0x1bc>
   a5a20:	110022c1 	add	w1, w22, #0x8
   a5a24:	7100003f 	cmp	w1, #0x0
   a5a28:	54001eed 	b.le	a5e04 <CString::FormatV(char const*, std::__va_list)+0xc94>
   a5a2c:	91002ea2 	add	x2, x21, #0xb
   a5a30:	aa1503e0 	mov	x0, x21
   a5a34:	2a0103f6 	mov	w22, w1
   a5a38:	927df055 	and	x21, x2, #0xfffffffffffffff8
   a5a3c:	17fffea2 	b	a54c4 <CString::FormatV(char const*, std::__va_list)+0x354>
   a5a40:	110022c1 	add	w1, w22, #0x8
   a5a44:	7100003f 	cmp	w1, #0x0
   a5a48:	54001b0d 	b.le	a5da8 <CString::FormatV(char const*, std::__va_list)+0xc38>
   a5a4c:	91003ea2 	add	x2, x21, #0xf
   a5a50:	aa1503e0 	mov	x0, x21
   a5a54:	2a0103f6 	mov	w22, w1
   a5a58:	927df055 	and	x21, x2, #0xfffffffffffffff8
   a5a5c:	17fffef3 	b	a5628 <CString::FormatV(char const*, std::__va_list)+0x4b8>
   a5a60:	b94067e0 	ldr	w0, [sp, #100]
   a5a64:	11004002 	add	w2, w0, #0x10
   a5a68:	7100005f 	cmp	w2, #0x0
   a5a6c:	5400194d 	b.le	a5d94 <CString::FormatV(char const*, std::__va_list)+0xc24>
   a5a70:	91003ea3 	add	x3, x21, #0xf
   a5a74:	aa1503e0 	mov	x0, x21
   a5a78:	b90067e2 	str	w2, [sp, #100]
   a5a7c:	927df075 	and	x21, x3, #0xfffffffffffffff8
   a5a80:	17fffe13 	b	a52cc <CString::FormatV(char const*, std::__va_list)+0x15c>
   a5a84:	f9403be3 	ldr	x3, [sp, #112]
   a5a88:	aa0303e0 	mov	x0, x3
   a5a8c:	f90043e3 	str	x3, [sp, #128]
   a5a90:	940005c8 	bl	a71b0 <strlen>
   a5a94:	aa0003e2 	mov	x2, x0
   a5a98:	f94043e3 	ldr	x3, [sp, #128]
   a5a9c:	b40000c0 	cbz	x0, a5ab4 <CString::FormatV(char const*, std::__va_list)+0x944>
   a5aa0:	aa0003e1 	mov	x1, x0
   a5aa4:	aa1b03e0 	mov	x0, x27
   a5aa8:	a9080fe2 	stp	x2, x3, [sp, #128]
   a5aac:	97fffac5 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a5ab0:	a9480fe2 	ldp	x2, x3, [sp, #128]
   a5ab4:	aa0303e1 	mov	x1, x3
   a5ab8:	d2800203 	mov	x3, #0x10                  	// #16
   a5abc:	a9080be3 	stp	x3, x2, [sp, #128]
   a5ac0:	f9400f60 	ldr	x0, [x27, #24]
   a5ac4:	9400064b 	bl	a73f0 <strcpy>
   a5ac8:	f9400f60 	ldr	x0, [x27, #24]
   a5acc:	a9480be3 	ldp	x3, x2, [sp, #128]
   a5ad0:	8b020000 	add	x0, x0, x2
   a5ad4:	f9000f60 	str	x0, [x27, #24]
   a5ad8:	39c00342 	ldrsb	w2, [x26]
   a5adc:	17fffe8d 	b	a5510 <CString::FormatV(char const*, std::__va_list)+0x3a0>
   a5ae0:	110022c1 	add	w1, w22, #0x8
   a5ae4:	7100003f 	cmp	w1, #0x0
   a5ae8:	54001acd 	b.le	a5e40 <CString::FormatV(char const*, std::__va_list)+0xcd0>
   a5aec:	aa1503e0 	mov	x0, x21
   a5af0:	91002ea4 	add	x4, x21, #0xb
   a5af4:	b9400009 	ldr	w9, [x0]
   a5af8:	2a0103f6 	mov	w22, w1
   a5afc:	927df095 	and	x21, x4, #0xfffffffffffffff8
   a5b00:	17fffef6 	b	a56d8 <CString::FormatV(char const*, std::__va_list)+0x568>
   a5b04:	110022c1 	add	w1, w22, #0x8
   a5b08:	7100003f 	cmp	w1, #0x0
   a5b0c:	5400192d 	b.le	a5e30 <CString::FormatV(char const*, std::__va_list)+0xcc0>
   a5b10:	91003ea4 	add	x4, x21, #0xf
   a5b14:	aa1503e0 	mov	x0, x21
   a5b18:	2a0103f6 	mov	w22, w1
   a5b1c:	927df095 	and	x21, x4, #0xfffffffffffffff8
   a5b20:	17fffeed 	b	a56d4 <CString::FormatV(char const*, std::__va_list)+0x564>
   a5b24:	d1000661 	sub	x1, x19, #0x1
   a5b28:	aa1b03e0 	mov	x0, x27
   a5b2c:	97fffaa5 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a5b30:	d1000a73 	sub	x19, x19, #0x2
   a5b34:	52800402 	mov	w2, #0x20                  	// #32
   a5b38:	f9400f60 	ldr	x0, [x27, #24]
   a5b3c:	d1000673 	sub	x19, x19, #0x1
   a5b40:	b100067f 	cmn	x19, #0x1
   a5b44:	91000401 	add	x1, x0, #0x1
   a5b48:	f9000f61 	str	x1, [x27, #24]
   a5b4c:	39000002 	strb	w2, [x0]
   a5b50:	54ffff41 	b.ne	a5b38 <CString::FormatV(char const*, std::__va_list)+0x9c8>  // b.any
   a5b54:	17fffe60 	b	a54d4 <CString::FormatV(char const*, std::__va_list)+0x364>
   a5b58:	f94037e0 	ldr	x0, [sp, #104]
   a5b5c:	8b36c000 	add	x0, x0, w22, sxtw
   a5b60:	2a0103f6 	mov	w22, w1
   a5b64:	17fffe70 	b	a5524 <CString::FormatV(char const*, std::__va_list)+0x3b4>
   a5b68:	cb00027c 	sub	x28, x19, x0
   a5b6c:	aa1b03e0 	mov	x0, x27
   a5b70:	aa1c03e1 	mov	x1, x28
   a5b74:	97fffa93 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a5b78:	d1000780 	sub	x0, x28, #0x1
   a5b7c:	52800404 	mov	w4, #0x20                  	// #32
   a5b80:	f9400f61 	ldr	x1, [x27, #24]
   a5b84:	d1000400 	sub	x0, x0, #0x1
   a5b88:	b100041f 	cmn	x0, #0x1
   a5b8c:	91000423 	add	x3, x1, #0x1
   a5b90:	f9000f63 	str	x3, [x27, #24]
   a5b94:	39000024 	strb	w4, [x1]
   a5b98:	54ffff41 	b.ne	a5b80 <CString::FormatV(char const*, std::__va_list)+0xa10>  // b.any
   a5b9c:	17fffdd7 	b	a52f8 <CString::FormatV(char const*, std::__va_list)+0x188>
   a5ba0:	cb00027c 	sub	x28, x19, x0
   a5ba4:	aa1b03e0 	mov	x0, x27
   a5ba8:	aa1c03e1 	mov	x1, x28
   a5bac:	97fffa85 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a5bb0:	d1000780 	sub	x0, x28, #0x1
   a5bb4:	52800404 	mov	w4, #0x20                  	// #32
   a5bb8:	f9400f61 	ldr	x1, [x27, #24]
   a5bbc:	d1000400 	sub	x0, x0, #0x1
   a5bc0:	b100041f 	cmn	x0, #0x1
   a5bc4:	91000423 	add	x3, x1, #0x1
   a5bc8:	f9000f63 	str	x3, [x27, #24]
   a5bcc:	39000024 	strb	w4, [x1]
   a5bd0:	54ffff41 	b.ne	a5bb8 <CString::FormatV(char const*, std::__va_list)+0xa48>  // b.any
   a5bd4:	17fffe9c 	b	a5644 <CString::FormatV(char const*, std::__va_list)+0x4d4>
   a5bd8:	d2800021 	mov	x1, #0x1                   	// #1
   a5bdc:	aa1b03e0 	mov	x0, x27
   a5be0:	97fffa78 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a5be4:	f9400f60 	ldr	x0, [x27, #24]
   a5be8:	f100067f 	cmp	x19, #0x1
   a5bec:	91000401 	add	x1, x0, #0x1
   a5bf0:	f9000f61 	str	x1, [x27, #24]
   a5bf4:	3900001c 	strb	w28, [x0]
   a5bf8:	54ffb9a9 	b.ls	a532c <CString::FormatV(char const*, std::__va_list)+0x1bc>  // b.plast
   a5bfc:	d1000661 	sub	x1, x19, #0x1
   a5c00:	aa1b03e0 	mov	x0, x27
   a5c04:	97fffa6f 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a5c08:	d1000a73 	sub	x19, x19, #0x2
   a5c0c:	52800402 	mov	w2, #0x20                  	// #32
   a5c10:	f9400f60 	ldr	x0, [x27, #24]
   a5c14:	d1000673 	sub	x19, x19, #0x1
   a5c18:	b100067f 	cmn	x19, #0x1
   a5c1c:	91000401 	add	x1, x0, #0x1
   a5c20:	f9000f61 	str	x1, [x27, #24]
   a5c24:	39000002 	strb	w2, [x0]
   a5c28:	54ffff41 	b.ne	a5c10 <CString::FormatV(char const*, std::__va_list)+0xaa0>  // b.any
   a5c2c:	17fffdc0 	b	a532c <CString::FormatV(char const*, std::__va_list)+0x1bc>
   a5c30:	aa1903e0 	mov	x0, x25
   a5c34:	9400055f 	bl	a71b0 <strlen>
   a5c38:	aa0003f7 	mov	x23, x0
   a5c3c:	b4000080 	cbz	x0, a5c4c <CString::FormatV(char const*, std::__va_list)+0xadc>
   a5c40:	aa0003e1 	mov	x1, x0
   a5c44:	aa1b03e0 	mov	x0, x27
   a5c48:	97fffa5e 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a5c4c:	aa1903e1 	mov	x1, x25
   a5c50:	f9400f60 	ldr	x0, [x27, #24]
   a5c54:	940005e7 	bl	a73f0 <strcpy>
   a5c58:	f9400f60 	ldr	x0, [x27, #24]
   a5c5c:	eb1c027f 	cmp	x19, x28
   a5c60:	8b170000 	add	x0, x0, x23
   a5c64:	f9000f60 	str	x0, [x27, #24]
   a5c68:	54ffb629 	b.ls	a532c <CString::FormatV(char const*, std::__va_list)+0x1bc>  // b.plast
   a5c6c:	cb1c027c 	sub	x28, x19, x28
   a5c70:	aa1b03e0 	mov	x0, x27
   a5c74:	aa1c03e1 	mov	x1, x28
   a5c78:	97fffa52 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a5c7c:	d1000780 	sub	x0, x28, #0x1
   a5c80:	52800403 	mov	w3, #0x20                  	// #32
   a5c84:	f9400f61 	ldr	x1, [x27, #24]
   a5c88:	d1000400 	sub	x0, x0, #0x1
   a5c8c:	b100041f 	cmn	x0, #0x1
   a5c90:	91000422 	add	x2, x1, #0x1
   a5c94:	f9000f62 	str	x2, [x27, #24]
   a5c98:	39000023 	strb	w3, [x1]
   a5c9c:	54ffff41 	b.ne	a5c84 <CString::FormatV(char const*, std::__va_list)+0xb14>  // b.any
   a5ca0:	17fffda3 	b	a532c <CString::FormatV(char const*, std::__va_list)+0x1bc>
   a5ca4:	aa1803e0 	mov	x0, x24
   a5ca8:	94000542 	bl	a71b0 <strlen>
   a5cac:	aa0003f7 	mov	x23, x0
   a5cb0:	b4000080 	cbz	x0, a5cc0 <CString::FormatV(char const*, std::__va_list)+0xb50>
   a5cb4:	aa0003e1 	mov	x1, x0
   a5cb8:	aa1b03e0 	mov	x0, x27
   a5cbc:	97fffa41 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a5cc0:	aa1803e1 	mov	x1, x24
   a5cc4:	f9400f60 	ldr	x0, [x27, #24]
   a5cc8:	940005ca 	bl	a73f0 <strcpy>
   a5ccc:	f9400f60 	ldr	x0, [x27, #24]
   a5cd0:	eb13039f 	cmp	x28, x19
   a5cd4:	8b170000 	add	x0, x0, x23
   a5cd8:	f9000f60 	str	x0, [x27, #24]
   a5cdc:	54ffb282 	b.cs	a532c <CString::FormatV(char const*, std::__va_list)+0x1bc>  // b.hs, b.nlast
   a5ce0:	cb1c027c 	sub	x28, x19, x28
   a5ce4:	aa1b03e0 	mov	x0, x27
   a5ce8:	aa1c03e1 	mov	x1, x28
   a5cec:	97fffa35 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a5cf0:	d1000780 	sub	x0, x28, #0x1
   a5cf4:	52800403 	mov	w3, #0x20                  	// #32
   a5cf8:	f9400f61 	ldr	x1, [x27, #24]
   a5cfc:	d1000400 	sub	x0, x0, #0x1
   a5d00:	b100041f 	cmn	x0, #0x1
   a5d04:	91000422 	add	x2, x1, #0x1
   a5d08:	f9000f62 	str	x2, [x27, #24]
   a5d0c:	39000023 	strb	w3, [x1]
   a5d10:	54ffff41 	b.ne	a5cf8 <CString::FormatV(char const*, std::__va_list)+0xb88>  // b.any
   a5d14:	17fffd86 	b	a532c <CString::FormatV(char const*, std::__va_list)+0x1bc>
   a5d18:	37f809f6 	tbnz	w22, #31, a5e54 <CString::FormatV(char const*, std::__va_list)+0xce4>
   a5d1c:	aa1503e0 	mov	x0, x21
   a5d20:	91002ea1 	add	x1, x21, #0xb
   a5d24:	b9800002 	ldrsw	x2, [x0]
   a5d28:	927df035 	and	x21, x1, #0xfffffffffffffff8
   a5d2c:	17fffef3 	b	a58f8 <CString::FormatV(char const*, std::__va_list)+0x788>
   a5d30:	110022c1 	add	w1, w22, #0x8
   a5d34:	7100003f 	cmp	w1, #0x0
   a5d38:	5400074d 	b.le	a5e20 <CString::FormatV(char const*, std::__va_list)+0xcb0>
   a5d3c:	91003ea2 	add	x2, x21, #0xf
   a5d40:	aa1503e0 	mov	x0, x21
   a5d44:	2a0103f6 	mov	w22, w1
   a5d48:	927df055 	and	x21, x2, #0xfffffffffffffff8
   a5d4c:	17fffd93 	b	a5398 <CString::FormatV(char const*, std::__va_list)+0x228>
   a5d50:	34000e1c 	cbz	w28, a5f10 <CString::FormatV(char const*, std::__va_list)+0xda0>
   a5d54:	eb02027f 	cmp	x19, x2
   a5d58:	54ffad09 	b.ls	a52f8 <CString::FormatV(char const*, std::__va_list)+0x188>  // b.plast
   a5d5c:	cb020273 	sub	x19, x19, x2
   a5d60:	aa1b03e0 	mov	x0, x27
   a5d64:	aa1303e1 	mov	x1, x19
   a5d68:	97fffa16 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a5d6c:	d1000660 	sub	x0, x19, #0x1
   a5d70:	52800604 	mov	w4, #0x30                  	// #48
   a5d74:	f9400f61 	ldr	x1, [x27, #24]
   a5d78:	d1000400 	sub	x0, x0, #0x1
   a5d7c:	b100041f 	cmn	x0, #0x1
   a5d80:	91000423 	add	x3, x1, #0x1
   a5d84:	f9000f63 	str	x3, [x27, #24]
   a5d88:	39000024 	strb	w4, [x1]
   a5d8c:	54ffff41 	b.ne	a5d74 <CString::FormatV(char const*, std::__va_list)+0xc04>  // b.any
   a5d90:	17fffd5a 	b	a52f8 <CString::FormatV(char const*, std::__va_list)+0x188>
   a5d94:	b94067e3 	ldr	w3, [sp, #100]
   a5d98:	b90067e2 	str	w2, [sp, #100]
   a5d9c:	f9400a80 	ldr	x0, [x20, #16]
   a5da0:	8b23c000 	add	x0, x0, w3, sxtw
   a5da4:	17fffd4a 	b	a52cc <CString::FormatV(char const*, std::__va_list)+0x15c>
   a5da8:	f94037e0 	ldr	x0, [sp, #104]
   a5dac:	8b36c000 	add	x0, x0, w22, sxtw
   a5db0:	2a0103f6 	mov	w22, w1
   a5db4:	17fffe1d 	b	a5628 <CString::FormatV(char const*, std::__va_list)+0x4b8>
   a5db8:	aa0903e4 	mov	x4, x9
   a5dbc:	d2800021 	mov	x1, #0x1                   	// #1
   a5dc0:	aa0903e8 	mov	x8, x9
   a5dc4:	17fffe4e 	b	a56fc <CString::FormatV(char const*, std::__va_list)+0x58c>
   a5dc8:	d2800021 	mov	x1, #0x1                   	// #1
   a5dcc:	aa1b03e0 	mov	x0, x27
   a5dd0:	f90043e2 	str	x2, [sp, #128]
   a5dd4:	97fff9fb 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a5dd8:	f9400f60 	ldr	x0, [x27, #24]
   a5ddc:	528005a1 	mov	w1, #0x2d                  	// #45
   a5de0:	f94043e2 	ldr	x2, [sp, #128]
   a5de4:	91000404 	add	x4, x0, #0x1
   a5de8:	f9000f64 	str	x4, [x27, #24]
   a5dec:	39000001 	strb	w1, [x0]
   a5df0:	17fffeea 	b	a5998 <CString::FormatV(char const*, std::__va_list)+0x828>
   a5df4:	aa0903e4 	mov	x4, x9
   a5df8:	d2800021 	mov	x1, #0x1                   	// #1
   a5dfc:	aa0903e8 	mov	x8, x9
   a5e00:	17fffdd3 	b	a554c <CString::FormatV(char const*, std::__va_list)+0x3dc>
   a5e04:	f94037e0 	ldr	x0, [sp, #104]
   a5e08:	8b36c000 	add	x0, x0, w22, sxtw
   a5e0c:	2a0103f6 	mov	w22, w1
   a5e10:	17fffdad 	b	a54c4 <CString::FormatV(char const*, std::__va_list)+0x354>
   a5e14:	aa0503fa 	mov	x26, x5
   a5e18:	52800001 	mov	w1, #0x0                   	// #0
   a5e1c:	17fffd1b 	b	a5288 <CString::FormatV(char const*, std::__va_list)+0x118>
   a5e20:	f94037e0 	ldr	x0, [sp, #104]
   a5e24:	8b36c000 	add	x0, x0, w22, sxtw
   a5e28:	2a0103f6 	mov	w22, w1
   a5e2c:	17fffd5b 	b	a5398 <CString::FormatV(char const*, std::__va_list)+0x228>
   a5e30:	f94037e0 	ldr	x0, [sp, #104]
   a5e34:	8b36c000 	add	x0, x0, w22, sxtw
   a5e38:	2a0103f6 	mov	w22, w1
   a5e3c:	17fffe26 	b	a56d4 <CString::FormatV(char const*, std::__va_list)+0x564>
   a5e40:	f94037e0 	ldr	x0, [sp, #104]
   a5e44:	8b36c000 	add	x0, x0, w22, sxtw
   a5e48:	2a0103f6 	mov	w22, w1
   a5e4c:	b9400009 	ldr	w9, [x0]
   a5e50:	17fffe22 	b	a56d8 <CString::FormatV(char const*, std::__va_list)+0x568>
   a5e54:	110022c1 	add	w1, w22, #0x8
   a5e58:	7100003f 	cmp	w1, #0x0
   a5e5c:	5400046d 	b.le	a5ee8 <CString::FormatV(char const*, std::__va_list)+0xd78>
   a5e60:	91002ea2 	add	x2, x21, #0xb
   a5e64:	aa1503e0 	mov	x0, x21
   a5e68:	2a0103f6 	mov	w22, w1
   a5e6c:	927df055 	and	x21, x2, #0xfffffffffffffff8
   a5e70:	b9800002 	ldrsw	x2, [x0]
   a5e74:	17fffea1 	b	a58f8 <CString::FormatV(char const*, std::__va_list)+0x788>
   a5e78:	110022c1 	add	w1, w22, #0x8
   a5e7c:	7100003f 	cmp	w1, #0x0
   a5e80:	540003ed 	b.le	a5efc <CString::FormatV(char const*, std::__va_list)+0xd8c>
   a5e84:	91003ea2 	add	x2, x21, #0xf
   a5e88:	aa1503e0 	mov	x0, x21
   a5e8c:	2a0103f6 	mov	w22, w1
   a5e90:	927df055 	and	x21, x2, #0xfffffffffffffff8
   a5e94:	f9400002 	ldr	x2, [x0]
   a5e98:	17fffe98 	b	a58f8 <CString::FormatV(char const*, std::__va_list)+0x788>
   a5e9c:	d2800021 	mov	x1, #0x1                   	// #1
   a5ea0:	aa1b03e0 	mov	x0, x27
   a5ea4:	f90043e2 	str	x2, [sp, #128]
   a5ea8:	97fff9c6 	bl	a45c0 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   a5eac:	f9400f60 	ldr	x0, [x27, #24]
   a5eb0:	528005a1 	mov	w1, #0x2d                  	// #45
   a5eb4:	f94043e2 	ldr	x2, [sp, #128]
   a5eb8:	91000404 	add	x4, x0, #0x1
   a5ebc:	f9000f64 	str	x4, [x27, #24]
   a5ec0:	39000001 	strb	w1, [x0]
   a5ec4:	17ffffa4 	b	a5d54 <CString::FormatV(char const*, std::__va_list)+0xbe4>
   a5ec8:	aa0803e1 	mov	x1, x8
   a5ecc:	d2800020 	mov	x0, #0x1                   	// #1
   a5ed0:	17fffd3f 	b	a53cc <CString::FormatV(char const*, std::__va_list)+0x25c>
   a5ed4:	aa0803e1 	mov	x1, x8
   a5ed8:	d2800020 	mov	x0, #0x1                   	// #1
   a5edc:	17fffe94 	b	a592c <CString::FormatV(char const*, std::__va_list)+0x7bc>
   a5ee0:	52800018 	mov	w24, #0x0                   	// #0
   a5ee4:	17fffd30 	b	a53a4 <CString::FormatV(char const*, std::__va_list)+0x234>
   a5ee8:	f94037e0 	ldr	x0, [sp, #104]
   a5eec:	8b36c000 	add	x0, x0, w22, sxtw
   a5ef0:	2a0103f6 	mov	w22, w1
   a5ef4:	b9800002 	ldrsw	x2, [x0]
   a5ef8:	17fffe80 	b	a58f8 <CString::FormatV(char const*, std::__va_list)+0x788>
   a5efc:	f94037e0 	ldr	x0, [sp, #104]
   a5f00:	8b36c000 	add	x0, x0, w22, sxtw
   a5f04:	2a0103f6 	mov	w22, w1
   a5f08:	f9400002 	ldr	x2, [x0]
   a5f0c:	17fffe7b 	b	a58f8 <CString::FormatV(char const*, std::__va_list)+0x788>
   a5f10:	eb13001f 	cmp	x0, x19
   a5f14:	54ff9f22 	b.cs	a52f8 <CString::FormatV(char const*, std::__va_list)+0x188>  // b.hs, b.nlast
   a5f18:	17fffd4c 	b	a5448 <CString::FormatV(char const*, std::__va_list)+0x2d8>
   a5f1c:	34ffaf89 	cbz	w9, a550c <CString::FormatV(char const*, std::__va_list)+0x39c>
   a5f20:	f9403fe3 	ldr	x3, [sp, #120]
   a5f24:	17fffed9 	b	a5a88 <CString::FormatV(char const*, std::__va_list)+0x918>
   a5f28:	d503201f 	nop
   a5f2c:	d503201f 	nop

00000000000a5f30 <CString::Format(char const*, ...)>:
   a5f30:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
   a5f34:	910403e8 	add	x8, sp, #0x100
   a5f38:	910403eb 	add	x11, sp, #0x100
   a5f3c:	910003fd 	mov	x29, sp
   a5f40:	910343ea 	add	x10, sp, #0xd0
   a5f44:	128005e9 	mov	w9, #0xffffffd0            	// #-48
   a5f48:	a9032fe8 	stp	x8, x11, [sp, #48]
   a5f4c:	12800fe8 	mov	w8, #0xffffff80            	// #-128
   a5f50:	f90023ea 	str	x10, [sp, #64]
   a5f54:	b9004be9 	str	w9, [sp, #72]
   a5f58:	b9004fe8 	str	w8, [sp, #76]
   a5f5c:	a9432fea 	ldp	x10, x11, [sp, #48]
   a5f60:	a94427e8 	ldp	x8, x9, [sp, #64]
   a5f64:	a90d0fe2 	stp	x2, x3, [sp, #208]
   a5f68:	910043e2 	add	x2, sp, #0x10
   a5f6c:	a9012fea 	stp	x10, x11, [sp, #16]
   a5f70:	a90227e8 	stp	x8, x9, [sp, #32]
   a5f74:	3d8017e0 	str	q0, [sp, #80]
   a5f78:	3d801be1 	str	q1, [sp, #96]
   a5f7c:	3d801fe2 	str	q2, [sp, #112]
   a5f80:	3d8023e3 	str	q3, [sp, #128]
   a5f84:	3d8027e4 	str	q4, [sp, #144]
   a5f88:	3d802be5 	str	q5, [sp, #160]
   a5f8c:	3d802fe6 	str	q6, [sp, #176]
   a5f90:	3d8033e7 	str	q7, [sp, #192]
   a5f94:	a90e17e4 	stp	x4, x5, [sp, #224]
   a5f98:	a90f1fe6 	stp	x6, x7, [sp, #240]
   a5f9c:	97fffc75 	bl	a5170 <CString::FormatV(char const*, std::__va_list)>
   a5fa0:	a8d07bfd 	ldp	x29, x30, [sp], #256
   a5fa4:	d65f03c0 	ret
	...

00000000000a5fb0 <__aeabi_atexit>:
   a5fb0:	d65f03c0 	ret
   a5fb4:	d503201f 	nop
   a5fb8:	d503201f 	nop
   a5fbc:	d503201f 	nop

00000000000a5fc0 <__cxa_atexit>:
   a5fc0:	d65f03c0 	ret
   a5fc4:	d503201f 	nop
   a5fc8:	d503201f 	nop
   a5fcc:	d503201f 	nop

00000000000a5fd0 <__errno>:
   a5fd0:	900000c0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a5fd4:	9106e000 	add	x0, x0, #0x1b8
   a5fd8:	d65f03c0 	ret
   a5fdc:	d503201f 	nop

00000000000a5fe0 <set_qemu_exit_status>:
   a5fe0:	d65f03c0 	ret
   a5fe4:	d503201f 	nop
   a5fe8:	d503201f 	nop
   a5fec:	d503201f 	nop

00000000000a5ff0 <halt>:
   a5ff0:	d50342df 	msr	daifset, #0x2
   a5ff4:	d50341df 	msr	daifset, #0x1
   a5ff8:	d5033f9f 	dsb	sy
   a5ffc:	d503207f 	wfi
   a6000:	17fffffe 	b	a5ff8 <halt+0x8>
   a6004:	d503201f 	nop
   a6008:	d503201f 	nop
   a600c:	d503201f 	nop

00000000000a6010 <error_halt>:
   a6010:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a6014:	910003fd 	mov	x29, sp
   a6018:	52800001 	mov	w1, #0x0                   	// #0
   a601c:	f9000bf3 	str	x19, [sp, #16]
   a6020:	2a0003f3 	mov	w19, w0
   a6024:	9100a3e0 	add	x0, sp, #0x28
   a6028:	97ffdeba 	bl	9db10 <CActLED::CActLED(bool)>
   a602c:	d503201f 	nop
   a6030:	9100a3e0 	add	x0, sp, #0x28
   a6034:	52802583 	mov	w3, #0x12c                 	// #300
   a6038:	52800c82 	mov	w2, #0x64                  	// #100
   a603c:	2a1303e1 	mov	w1, w19
   a6040:	97ffdf08 	bl	9dc60 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
   a6044:	52807d00 	mov	w0, #0x3e8                 	// #1000
   a6048:	940003ce 	bl	a6f80 <CTimer::SimpleMsDelay(unsigned int)>
   a604c:	17fffff9 	b	a6030 <error_halt+0x20>

00000000000a6050 <reboot>:
   a6050:	d2800482 	mov	x2, #0x24                  	// #36
   a6054:	f2bfc202 	movk	x2, #0xfe10, lsl #16
   a6058:	52800023 	mov	w3, #0x1                   	// #1
   a605c:	72ab4003 	movk	w3, #0x5a00, lsl #16
   a6060:	d2800380 	mov	x0, #0x1c                  	// #28
   a6064:	f2bfc200 	movk	x0, #0xfe10, lsl #16
   a6068:	52800401 	mov	w1, #0x20                  	// #32
   a606c:	72ab4001 	movk	w1, #0x5a00, lsl #16
   a6070:	b9000043 	str	w3, [x2]
   a6074:	b9000001 	str	w1, [x0]
   a6078:	14000000 	b	a6078 <reboot+0x28>
   a607c:	d503201f 	nop

00000000000a6080 <sysinit>:
   a6080:	d282820c 	mov	x12, #0x1410                	// #5136
   a6084:	cb2c63ff 	sub	sp, sp, x12
   a6088:	a9007bfd 	stp	x29, x30, [sp]
   a608c:	910003fd 	mov	x29, sp
   a6090:	a90153f3 	stp	x19, x20, [sp, #16]
   a6094:	f90013f5 	str	x21, [sp, #32]
   a6098:	d50341ff 	msr	daifclr, #0x1
   a609c:	d50342ff 	msr	daifclr, #0x2
   a60a0:	f00000b3 	adrp	x19, bd000 <CNetDevice::s_SpeedString+0x18>
   a60a4:	910e4273 	add	x19, x19, #0x390
   a60a8:	f00000a0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a60ac:	91020000 	add	x0, x0, #0x80
   a60b0:	cb000262 	sub	x2, x19, x0
   a60b4:	52800001 	mov	w1, #0x0                   	// #0
   a60b8:	940005cc 	bl	a77e8 <memset>
   a60bc:	f14a027f 	cmp	x19, #0x280, lsl #12
   a60c0:	540005c8 	b.hi	a6178 <sysinit+0xf8>  // b.pmore
   a60c4:	52800021 	mov	w1, #0x1                   	// #1
   a60c8:	910383e0 	add	x0, sp, #0xe0
   a60cc:	94000bb9 	bl	a8fb0 <CMemorySystem::CMemorySystem(bool)>
   a60d0:	910143e0 	add	x0, sp, #0x50
   a60d4:	97ffea23 	bl	a0960 <CMachineInfo::CMachineInfo()>
   a60d8:	910383e0 	add	x0, sp, #0xe0
   a60dc:	94000b59 	bl	a8e40 <CMemorySystem::SetupHighMem()>
   a60e0:	9100c3e0 	add	x0, sp, #0x30
   a60e4:	97fff95b 	bl	a4650 <CString::CString()>
   a60e8:	b0000061 	adrp	x1, b3000 <_etext+0x2158>
   a60ec:	52800602 	mov	w2, #0x30                  	// #48
   a60f0:	91086021 	add	x1, x1, #0x218
   a60f4:	9100c3e0 	add	x0, sp, #0x30
   a60f8:	97ffff8e 	bl	a5f30 <CString::Format(char const*, ...)>
   a60fc:	9100c3e0 	add	x0, sp, #0x30
   a6100:	97fff998 	bl	a4760 <CString::operator char const*() const>
   a6104:	f00000a2 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   a6108:	9106e042 	add	x2, x2, #0x1b8
   a610c:	aa0003e1 	mov	x1, x0
   a6110:	91002040 	add	x0, x2, #0x8
   a6114:	940004b7 	bl	a73f0 <strcpy>
   a6118:	911043e0 	add	x0, sp, #0x410
   a611c:	9400126d 	bl	aaad0 <CInterruptSystem::CInterruptSystem()>
   a6120:	911043e0 	add	x0, sp, #0x410
   a6124:	94001293 	bl	aab70 <CInterruptSystem::Initialize()>
   a6128:	72001c1f 	tst	w0, #0xff
   a612c:	54000280 	b.eq	a617c <sysinit+0xfc>  // b.none
   a6130:	d00000b5 	adrp	x21, bc000 <font_data+0x9a8>
   a6134:	9133e2b5 	add	x21, x21, #0xcf8
   a6138:	d00000a0 	adrp	x0, bc000 <font_data+0x9a8>
   a613c:	9135a000 	add	x0, x0, #0xd68
   a6140:	eb0002bf 	cmp	x21, x0
   a6144:	54000142 	b.cs	a616c <sysinit+0xec>  // b.hs, b.nlast
   a6148:	d1000414 	sub	x20, x0, #0x1
   a614c:	d2800013 	mov	x19, #0x0                   	// #0
   a6150:	cb150294 	sub	x20, x20, x21
   a6154:	d343fe94 	lsr	x20, x20, #3
   a6158:	f8737aa0 	ldr	x0, [x21, x19, lsl #3]
   a615c:	d63f0000 	blr	x0
   a6160:	eb14027f 	cmp	x19, x20
   a6164:	91000673 	add	x19, x19, #0x1
   a6168:	54ffff81 	b.ne	a6158 <sysinit+0xd8>  // b.any
   a616c:	97ff69a5 	bl	80800 <main>
   a6170:	7100041f 	cmp	w0, #0x1
   a6174:	54000080 	b.eq	a6184 <sysinit+0x104>  // b.none
   a6178:	97ffff9e 	bl	a5ff0 <halt>
   a617c:	52800040 	mov	w0, #0x2                   	// #2
   a6180:	97ffffa4 	bl	a6010 <error_halt>
   a6184:	940006a3 	bl	a7c10 <IsChainBootEnabled>
   a6188:	72001c1f 	tst	w0, #0xff
   a618c:	54000041 	b.ne	a6194 <sysinit+0x114>  // b.any
   a6190:	97ffffb0 	bl	a6050 <reboot>
   a6194:	911043e0 	add	x0, sp, #0x410
   a6198:	9400126a 	bl	aab40 <CInterruptSystem::Destructor()>
   a619c:	910383e0 	add	x0, sp, #0xe0
   a61a0:	94000b00 	bl	a8da0 <CMemorySystem::Destructor()>
   a61a4:	d50341df 	msr	daifset, #0x1
   a61a8:	940006a2 	bl	a7c30 <DoChainBoot>
   a61ac:	97ffffa9 	bl	a6050 <reboot>

00000000000a61b0 <CTimer::CTimer(CInterruptSystem*)>:
   a61b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a61b4:	910003fd 	mov	x29, sp
   a61b8:	d2800022 	mov	x2, #0x1                   	// #1
   a61bc:	f9000bf3 	str	x19, [sp, #16]
   a61c0:	aa0003f3 	mov	x19, x0
   a61c4:	91008000 	add	x0, x0, #0x20
   a61c8:	b9000e7f 	str	wzr, [x19, #12]
   a61cc:	b900127f 	str	wzr, [x19, #16]
   a61d0:	f9000261 	str	x1, [x19]
   a61d4:	b900167f 	str	wzr, [x19, #20]
   a61d8:	f9000e62 	str	x2, [x19, #24]
   a61dc:	97ffeb9d 	bl	a1050 <CPtrList::CPtrList()>
   a61e0:	d2800023 	mov	x3, #0x1                   	// #1
   a61e4:	52801902 	mov	w2, #0xc8                  	// #200
   a61e8:	f9001e7f 	str	xzr, [x19, #56]
   a61ec:	f2c1a803 	movk	x3, #0xd40, lsl #32
   a61f0:	f2e00063 	movk	x3, #0x3, lsl #48
   a61f4:	b900627f 	str	wzr, [x19, #96]
   a61f8:	f00000a0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a61fc:	b9003262 	str	w2, [x19, #48]
   a6200:	f940ec01 	ldr	x1, [x0, #472]
   a6204:	f9001663 	str	x3, [x19, #40]
   a6208:	b50000a1 	cbnz	x1, a621c <CTimer::CTimer(CInterruptSystem*)+0x6c>
   a620c:	f900ec13 	str	x19, [x0, #472]
   a6210:	f9400bf3 	ldr	x19, [sp, #16]
   a6214:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a6218:	d65f03c0 	ret
   a621c:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a6220:	f0000060 	adrp	x0, b5000 <_etext+0x4158>
   a6224:	91104021 	add	x1, x1, #0x410
   a6228:	91108000 	add	x0, x0, #0x420
   a622c:	52800802 	mov	w2, #0x40                  	// #64
   a6230:	97ffdec4 	bl	9dd40 <assertion_failed>
   a6234:	d503201f 	nop
   a6238:	d503201f 	nop
   a623c:	d503201f 	nop

00000000000a6240 <CTimer::~CTimer()>:
   a6240:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a6244:	910003fd 	mov	x29, sp
   a6248:	a90153f3 	stp	x19, x20, [sp, #16]
   a624c:	a9025bf5 	stp	x21, x22, [sp, #32]
   a6250:	aa0003f5 	mov	x21, x0
   a6254:	f9400000 	ldr	x0, [x0]
   a6258:	b40005e0 	cbz	x0, a6314 <CTimer::~CTimer()+0xd4>
   a625c:	d2800001 	mov	x1, #0x0                   	// #0
   a6260:	d51be221 	msr	cntp_ctl_el0, x1
   a6264:	528003c1 	mov	w1, #0x1e                  	// #30
   a6268:	910082b5 	add	x21, x21, #0x20
   a626c:	940012d5 	bl	aadc0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   a6270:	aa1503e0 	mov	x0, x21
   a6274:	5289a876 	mov	w22, #0x4d43                	// #19779
   a6278:	72a96a96 	movk	w22, #0x4b54, lsl #16
   a627c:	97ffeb85 	bl	a1090 <CPtrList::GetFirst() const>
   a6280:	aa0003f4 	mov	x20, x0
   a6284:	b4000220 	cbz	x0, a62c8 <CTimer::~CTimer()+0x88>
   a6288:	97ffeb9e 	bl	a1100 <CPtrList::GetPtr(TPtrListElement*)>
   a628c:	aa0003f3 	mov	x19, x0
   a6290:	b40002a0 	cbz	x0, a62e4 <CTimer::~CTimer()+0xa4>
   a6294:	b9400000 	ldr	w0, [x0]
   a6298:	6b16001f 	cmp	w0, w22
   a629c:	54000301 	b.ne	a62fc <CTimer::~CTimer()+0xbc>  // b.any
   a62a0:	aa1403e1 	mov	x1, x20
   a62a4:	aa1503e0 	mov	x0, x21
   a62a8:	97ffec2e 	bl	a1360 <CPtrList::Remove(TPtrListElement*)>
   a62ac:	aa1303e0 	mov	x0, x19
   a62b0:	d2800501 	mov	x1, #0x28                  	// #40
   a62b4:	94000813 	bl	a8300 <operator delete(void*, unsigned long)>
   a62b8:	aa1503e0 	mov	x0, x21
   a62bc:	97ffeb75 	bl	a1090 <CPtrList::GetFirst() const>
   a62c0:	aa0003f4 	mov	x20, x0
   a62c4:	b5fffe20 	cbnz	x0, a6288 <CTimer::~CTimer()+0x48>
   a62c8:	f00000a1 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   a62cc:	aa1503e0 	mov	x0, x21
   a62d0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a62d4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a62d8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a62dc:	f900ec3f 	str	xzr, [x1, #472]
   a62e0:	17ffeb60 	b	a1060 <CPtrList::~CPtrList()>
   a62e4:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a62e8:	d0000060 	adrp	x0, b4000 <_etext+0x3158>
   a62ec:	91104021 	add	x1, x1, #0x410
   a62f0:	910da000 	add	x0, x0, #0x368
   a62f4:	52800ae2 	mov	w2, #0x57                  	// #87
   a62f8:	97ffde92 	bl	9dd40 <assertion_failed>
   a62fc:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a6300:	f0000060 	adrp	x0, b5000 <_etext+0x4158>
   a6304:	91104021 	add	x1, x1, #0x410
   a6308:	91112000 	add	x0, x0, #0x448
   a630c:	52800b02 	mov	w2, #0x58                  	// #88
   a6310:	97ffde8c 	bl	9dd40 <assertion_failed>
   a6314:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a6318:	f0000060 	adrp	x0, b5000 <_etext+0x4158>
   a631c:	91104021 	add	x1, x1, #0x410
   a6320:	9110c000 	add	x0, x0, #0x430
   a6324:	528008c2 	mov	w2, #0x46                  	// #70
   a6328:	97ffde86 	bl	9dd40 <assertion_failed>
   a632c:	d503201f 	nop

00000000000a6330 <CTimer::SetTimeZone(int)>:
   a6330:	11167c22 	add	w2, w1, #0x59f
   a6334:	712cf85f 	cmp	w2, #0xb3e
   a6338:	54000089 	b.ls	a6348 <CTimer::SetTimeZone(int)+0x18>  // b.plast
   a633c:	52800002 	mov	w2, #0x0                   	// #0
   a6340:	2a0203e0 	mov	w0, w2
   a6344:	d65f03c0 	ret
   a6348:	52800022 	mov	w2, #0x1                   	// #1
   a634c:	b9001c01 	str	w1, [x0, #28]
   a6350:	2a0203e0 	mov	w0, w2
   a6354:	d65f03c0 	ret
   a6358:	d503201f 	nop
   a635c:	d503201f 	nop

00000000000a6360 <CTimer::GetTimeZone() const>:
   a6360:	b9401c00 	ldr	w0, [x0, #28]
   a6364:	d65f03c0 	ret
   a6368:	d503201f 	nop
   a636c:	d503201f 	nop

00000000000a6370 <CTimer::SetTime(unsigned int, bool)>:
   a6370:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a6374:	910003fd 	mov	x29, sp
   a6378:	72001c5f 	tst	w2, #0xff
   a637c:	a90153f3 	stp	x19, x20, [sp, #16]
   a6380:	aa0003f3 	mov	x19, x0
   a6384:	2a0103f4 	mov	w20, w1
   a6388:	b9401c00 	ldr	w0, [x0, #28]
   a638c:	531c6c02 	lsl	w2, w0, #4
   a6390:	4b000042 	sub	w2, w2, w0
   a6394:	531e7442 	lsl	w2, w2, #2
   a6398:	54000061 	b.ne	a63a4 <CTimer::SetTime(unsigned int, bool)+0x34>  // b.any
   a639c:	37f80382 	tbnz	w2, #31, a640c <CTimer::SetTime(unsigned int, bool)+0x9c>
   a63a0:	0b020294 	add	w20, w20, w2
   a63a4:	f9401e63 	ldr	x3, [x19, #56]
   a63a8:	b4000123 	cbz	x3, a63cc <CTimer::SetTime(unsigned int, bool)+0x5c>
   a63ac:	b9401661 	ldr	w1, [x19, #20]
   a63b0:	4b020280 	sub	w0, w20, w2
   a63b4:	6b01005f 	cmp	w2, w1
   a63b8:	4b020021 	sub	w1, w1, w2
   a63bc:	1a9fd021 	csel	w1, w1, wzr, le
   a63c0:	d63f0060 	blr	x3
   a63c4:	72001c1f 	tst	w0, #0xff
   a63c8:	54000280 	b.eq	a6418 <CTimer::SetTime(unsigned int, bool)+0xa8>  // b.none
   a63cc:	b9401a60 	ldr	w0, [x19, #24]
   a63d0:	350000c0 	cbnz	w0, a63e8 <CTimer::SetTime(unsigned int, bool)+0x78>
   a63d4:	52800020 	mov	w0, #0x1                   	// #1
   a63d8:	b9001674 	str	w20, [x19, #20]
   a63dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   a63e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a63e4:	d65f03c0 	ret
   a63e8:	94000b56 	bl	a9140 <EnterCritical>
   a63ec:	b9401a60 	ldr	w0, [x19, #24]
   a63f0:	b9001674 	str	w20, [x19, #20]
   a63f4:	340001a0 	cbz	w0, a6428 <CTimer::SetTime(unsigned int, bool)+0xb8>
   a63f8:	94000b82 	bl	a9200 <LeaveCritical>
   a63fc:	52800020 	mov	w0, #0x1                   	// #1
   a6400:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6404:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a6408:	d65f03c0 	ret
   a640c:	4b0203e0 	neg	w0, w2
   a6410:	6b01001f 	cmp	w0, w1
   a6414:	54fffc6d 	b.le	a63a0 <CTimer::SetTime(unsigned int, bool)+0x30>
   a6418:	52800000 	mov	w0, #0x0                   	// #0
   a641c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6420:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a6424:	d65f03c0 	ret
   a6428:	52800020 	mov	w0, #0x1                   	// #1
   a642c:	17ffffec 	b	a63dc <CTimer::SetTime(unsigned int, bool)+0x6c>

00000000000a6430 <CTimer::GetClockTicks()>:
   a6430:	d5033fdf 	isb
   a6434:	d53be020 	mrs	x0, cntpct_el0
   a6438:	d53be001 	mrs	x1, cntfrq_el0
   a643c:	d2884802 	mov	x2, #0x4240                	// #16960
   a6440:	f2a001e2 	movk	x2, #0xf, lsl #16
   a6444:	9b027c00 	mul	x0, x0, x2
   a6448:	9ac10800 	udiv	x0, x0, x1
   a644c:	d65f03c0 	ret

00000000000a6450 <CTimer::GetClockTicks64()>:
   a6450:	d5033fdf 	isb
   a6454:	d53be020 	mrs	x0, cntpct_el0
   a6458:	d53be001 	mrs	x1, cntfrq_el0
   a645c:	d2884802 	mov	x2, #0x4240                	// #16960
   a6460:	f2a001e2 	movk	x2, #0xf, lsl #16
   a6464:	9b027c00 	mul	x0, x0, x2
   a6468:	9ac10800 	udiv	x0, x0, x1
   a646c:	d65f03c0 	ret

00000000000a6470 <CTimer::GetTicks() const>:
   a6470:	b9400c00 	ldr	w0, [x0, #12]
   a6474:	d65f03c0 	ret
   a6478:	d503201f 	nop
   a647c:	d503201f 	nop

00000000000a6480 <CTimer::GetUptime() const>:
   a6480:	b9401000 	ldr	w0, [x0, #16]
   a6484:	d65f03c0 	ret
   a6488:	d503201f 	nop
   a648c:	d503201f 	nop

00000000000a6490 <CTimer::GetTime() const>:
   a6490:	b9401400 	ldr	w0, [x0, #20]
   a6494:	d65f03c0 	ret
   a6498:	d503201f 	nop
   a649c:	d503201f 	nop

00000000000a64a0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   a64a0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a64a4:	910003fd 	mov	x29, sp
   a64a8:	a90153f3 	stp	x19, x20, [sp, #16]
   a64ac:	aa0003f3 	mov	x19, x0
   a64b0:	aa0103f4 	mov	x20, x1
   a64b4:	b9401800 	ldr	w0, [x0, #24]
   a64b8:	a9025bf5 	stp	x21, x22, [sp, #32]
   a64bc:	aa0203f5 	mov	x21, x2
   a64c0:	f9001bf7 	str	x23, [sp, #48]
   a64c4:	350002a0 	cbnz	w0, a6518 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x78>
   a64c8:	b9401677 	ldr	w23, [x19, #20]
   a64cc:	b9400e76 	ldr	w22, [x19, #12]
   a64d0:	b4000334 	cbz	x20, a6534 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x94>
   a64d4:	b9000297 	str	w23, [x20]
   a64d8:	b40003b5 	cbz	x21, a654c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xac>
   a64dc:	5290a3e0 	mov	w0, #0x851f                	// #34079
   a64e0:	72aa3d60 	movk	w0, #0x51eb, lsl #16
   a64e4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a64e8:	52800c82 	mov	w2, #0x64                  	// #100
   a64ec:	5284e201 	mov	w1, #0x2710                	// #10000
   a64f0:	9ba07ec0 	umull	x0, w22, w0
   a64f4:	f9401bf7 	ldr	x23, [sp, #48]
   a64f8:	d365fc00 	lsr	x0, x0, #37
   a64fc:	1b02d800 	msub	w0, w0, w2, w22
   a6500:	1b017c00 	mul	w0, w0, w1
   a6504:	b90002a0 	str	w0, [x21]
   a6508:	52800020 	mov	w0, #0x1                   	// #1
   a650c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a6510:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a6514:	d65f03c0 	ret
   a6518:	94000b0a 	bl	a9140 <EnterCritical>
   a651c:	b9401677 	ldr	w23, [x19, #20]
   a6520:	b9400e76 	ldr	w22, [x19, #12]
   a6524:	b9401a60 	ldr	w0, [x19, #24]
   a6528:	34fffd40 	cbz	w0, a64d0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x30>
   a652c:	94000b35 	bl	a9200 <LeaveCritical>
   a6530:	b5fffd34 	cbnz	x20, a64d4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x34>
   a6534:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a6538:	f0000060 	adrp	x0, b5000 <_etext+0x4158>
   a653c:	91104021 	add	x1, x1, #0x410
   a6540:	9111c000 	add	x0, x0, #0x470
   a6544:	52802602 	mov	w2, #0x130                 	// #304
   a6548:	97ffddfe 	bl	9dd40 <assertion_failed>
   a654c:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a6550:	f0000060 	adrp	x0, b5000 <_etext+0x4158>
   a6554:	91104021 	add	x1, x1, #0x410
   a6558:	91120000 	add	x0, x0, #0x480
   a655c:	52802662 	mov	w2, #0x133                 	// #307
   a6560:	97ffddf8 	bl	9dd40 <assertion_failed>
   a6564:	d503201f 	nop
   a6568:	d503201f 	nop
   a656c:	d503201f 	nop

00000000000a6570 <CTimer::GetUniversalTime() const>:
   a6570:	b9401c02 	ldr	w2, [x0, #28]
   a6574:	b9401400 	ldr	w0, [x0, #20]
   a6578:	531c6c41 	lsl	w1, w2, #4
   a657c:	4b020021 	sub	w1, w1, w2
   a6580:	531e7421 	lsl	w1, w1, #2
   a6584:	6b010000 	subs	w0, w0, w1
   a6588:	1a9fa000 	csel	w0, w0, wzr, ge	// ge = tcont
   a658c:	d65f03c0 	ret

00000000000a6590 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   a6590:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a6594:	910003fd 	mov	x29, sp
   a6598:	a90153f3 	stp	x19, x20, [sp, #16]
   a659c:	aa0003f3 	mov	x19, x0
   a65a0:	aa0103f4 	mov	x20, x1
   a65a4:	b9401800 	ldr	w0, [x0, #24]
   a65a8:	a9025bf5 	stp	x21, x22, [sp, #32]
   a65ac:	aa0203f5 	mov	x21, x2
   a65b0:	f9001bf7 	str	x23, [sp, #48]
   a65b4:	35000440 	cbnz	w0, a663c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xac>
   a65b8:	b9401676 	ldr	w22, [x19, #20]
   a65bc:	b9400e77 	ldr	w23, [x19, #12]
   a65c0:	b9401e61 	ldr	w1, [x19, #28]
   a65c4:	531c6c20 	lsl	w0, w1, #4
   a65c8:	4b010000 	sub	w0, w0, w1
   a65cc:	531e7400 	lsl	w0, w0, #2
   a65d0:	6b0002df 	cmp	w22, w0
   a65d4:	5400028b 	b.lt	a6624 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x94>  // b.tstop
   a65d8:	b4000414 	cbz	x20, a6658 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xc8>
   a65dc:	4b0002d6 	sub	w22, w22, w0
   a65e0:	b9000296 	str	w22, [x20]
   a65e4:	b4000475 	cbz	x21, a6670 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xe0>
   a65e8:	5290a3e1 	mov	w1, #0x851f                	// #34079
   a65ec:	72aa3d61 	movk	w1, #0x51eb, lsl #16
   a65f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a65f4:	52800c83 	mov	w3, #0x64                  	// #100
   a65f8:	5284e202 	mov	w2, #0x2710                	// #10000
   a65fc:	9ba17ee1 	umull	x1, w23, w1
   a6600:	52800020 	mov	w0, #0x1                   	// #1
   a6604:	d365fc21 	lsr	x1, x1, #37
   a6608:	1b03dc21 	msub	w1, w1, w3, w23
   a660c:	f9401bf7 	ldr	x23, [sp, #48]
   a6610:	1b027c21 	mul	w1, w1, w2
   a6614:	b90002a1 	str	w1, [x21]
   a6618:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a661c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a6620:	d65f03c0 	ret
   a6624:	52800000 	mov	w0, #0x0                   	// #0
   a6628:	a94153f3 	ldp	x19, x20, [sp, #16]
   a662c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a6630:	f9401bf7 	ldr	x23, [sp, #48]
   a6634:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a6638:	d65f03c0 	ret
   a663c:	94000ac1 	bl	a9140 <EnterCritical>
   a6640:	b9401676 	ldr	w22, [x19, #20]
   a6644:	b9400e77 	ldr	w23, [x19, #12]
   a6648:	b9401a60 	ldr	w0, [x19, #24]
   a664c:	34fffba0 	cbz	w0, a65c0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x30>
   a6650:	94000aec 	bl	a9200 <LeaveCritical>
   a6654:	17ffffdb 	b	a65c0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x30>
   a6658:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a665c:	f0000060 	adrp	x0, b5000 <_etext+0x4158>
   a6660:	91104021 	add	x1, x1, #0x410
   a6664:	9111c000 	add	x0, x0, #0x470
   a6668:	52802aa2 	mov	w2, #0x155                 	// #341
   a666c:	97ffddb5 	bl	9dd40 <assertion_failed>
   a6670:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a6674:	f0000060 	adrp	x0, b5000 <_etext+0x4158>
   a6678:	91104021 	add	x1, x1, #0x410
   a667c:	91120000 	add	x0, x0, #0x480
   a6680:	52802b02 	mov	w2, #0x158                 	// #344
   a6684:	97ffddaf 	bl	9dd40 <assertion_failed>
   a6688:	d503201f 	nop
   a668c:	d503201f 	nop

00000000000a6690 <CTimer::GetTimeString()>:
   a6690:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   a6694:	910003fd 	mov	x29, sp
   a6698:	a90153f3 	stp	x19, x20, [sp, #16]
   a669c:	aa0003f3 	mov	x19, x0
   a66a0:	b9401800 	ldr	w0, [x0, #24]
   a66a4:	a9046bf9 	stp	x25, x26, [sp, #64]
   a66a8:	35000dc0 	cbnz	w0, a6860 <CTimer::GetTimeString()+0x1d0>
   a66ac:	b9401674 	ldr	w20, [x19, #20]
   a66b0:	b9400e7a 	ldr	w26, [x19, #12]
   a66b4:	2a140340 	orr	w0, w26, w20
   a66b8:	34000e40 	cbz	w0, a6880 <CTimer::GetTimeString()+0x1f0>
   a66bc:	a9025bf5 	stp	x21, x22, [sp, #32]
   a66c0:	52911136 	mov	w22, #0x8889                	// #34953
   a66c4:	72b11116 	movk	w22, #0x8888, lsl #16
   a66c8:	52955573 	mov	w19, #0xaaab                	// #43691
   a66cc:	72b55553 	movk	w19, #0xaaaa, lsl #16
   a66d0:	528b8525 	mov	w5, #0x5c29                	// #23593
   a66d4:	72b851e5 	movk	w5, #0xc28f, lsl #16
   a66d8:	a90363f7 	stp	x23, x24, [sp, #48]
   a66dc:	9bb67e97 	umull	x23, w20, w22
   a66e0:	528b8503 	mov	w3, #0x5c28                	// #23592
   a66e4:	72a051e3 	movk	w3, #0x28f, lsl #16
   a66e8:	529ae144 	mov	w4, #0xd70a                	// #55050
   a66ec:	72a01464 	movk	w4, #0xa3, lsl #16
   a66f0:	5280f655 	mov	w21, #0x7b2                 	// #1970
   a66f4:	d365fee1 	lsr	x1, x23, #37
   a66f8:	531c6c20 	lsl	w0, w1, #4
   a66fc:	9bb67c36 	umull	x22, w1, w22
   a6700:	4b010000 	sub	w0, w0, w1
   a6704:	4b000a97 	sub	w23, w20, w0, lsl #2
   a6708:	d365fed9 	lsr	x25, x22, #37
   a670c:	531c6f20 	lsl	w0, w25, #4
   a6710:	9bb37f33 	umull	x19, w25, w19
   a6714:	4b190000 	sub	w0, w0, w25
   a6718:	4b000836 	sub	w22, w1, w0, lsl #2
   a671c:	d364fe73 	lsr	x19, x19, #36
   a6720:	14000003 	b	a672c <CTimer::GetTimeString()+0x9c>
   a6724:	4b010273 	sub	w19, w19, w1
   a6728:	110006b5 	add	w21, w21, #0x1
   a672c:	1b057ea1 	mul	w1, w21, w5
   a6730:	f24006bf 	tst	x21, #0x3
   a6734:	1a9f17e0 	cset	w0, eq	// eq = none
   a6738:	13810822 	ror	w2, w1, #2
   a673c:	6b03005f 	cmp	w2, w3
   a6740:	54000088 	b.hi	a6750 <CTimer::GetTimeString()+0xc0>  // b.pmore
   a6744:	13811021 	ror	w1, w1, #4
   a6748:	6b04003f 	cmp	w1, w4
   a674c:	1a9f87e0 	cset	w0, ls	// ls = plast
   a6750:	1105b401 	add	w1, w0, #0x16d
   a6754:	6b01027f 	cmp	w19, w1
   a6758:	54fffe62 	b.cs	a6724 <CTimer::GetTimeString()+0x94>  // b.hs, b.nlast
   a675c:	900000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a6760:	91382021 	add	x1, x1, #0xe08
   a6764:	52800014 	mov	w20, #0x0                   	// #0
   a6768:	14000003 	b	a6774 <CTimer::GetTimeString()+0xe4>
   a676c:	4b020273 	sub	w19, w19, w2
   a6770:	11000694 	add	w20, w20, #0x1
   a6774:	7100001f 	cmp	w0, #0x0
   a6778:	7a411a80 	ccmp	w20, #0x1, #0x0, ne	// ne = any
   a677c:	540003e0 	b.eq	a67f8 <CTimer::GetTimeString()+0x168>  // b.none
   a6780:	b8745822 	ldr	w2, [x1, w20, uxtw #2]
   a6784:	6b02027f 	cmp	w19, w2
   a6788:	54ffff22 	b.cs	a676c <CTimer::GetTimeString()+0xdc>  // b.hs, b.nlast
   a678c:	5290a3f8 	mov	w24, #0x851f                	// #34079
   a6790:	72aa3d78 	movk	w24, #0x51eb, lsl #16
   a6794:	52800c81 	mov	w1, #0x64                  	// #100
   a6798:	d2800400 	mov	x0, #0x20                  	// #32
   a679c:	9bb87f58 	umull	x24, w26, w24
   a67a0:	d365ff18 	lsr	x24, x24, #37
   a67a4:	1b01eb18 	msub	w24, w24, w1, w26
   a67a8:	940006ae 	bl	a8260 <operator new(unsigned long)>
   a67ac:	aa0003fa 	mov	x26, x0
   a67b0:	97fff7a8 	bl	a4650 <CString::CString()>
   a67b4:	711edebf 	cmp	w21, #0x7b7
   a67b8:	54000248 	b.hi	a6800 <CTimer::GetTimeString()+0x170>  // b.pmore
   a67bc:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a67c0:	2a1803e5 	mov	w5, w24
   a67c4:	2a1703e4 	mov	w4, w23
   a67c8:	2a1603e3 	mov	w3, w22
   a67cc:	2a1903e2 	mov	w2, w25
   a67d0:	aa1a03e0 	mov	x0, x26
   a67d4:	9112e021 	add	x1, x1, #0x4b8
   a67d8:	97fffdd6 	bl	a5f30 <CString::Format(char const*, ...)>
   a67dc:	aa1a03e0 	mov	x0, x26
   a67e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a67e4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a67e8:	a94363f7 	ldp	x23, x24, [sp, #48]
   a67ec:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a67f0:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a67f4:	d65f03c0 	ret
   a67f8:	528003a2 	mov	w2, #0x1d                  	// #29
   a67fc:	17ffffe2 	b	a6784 <CTimer::GetTimeString()+0xf4>
   a6800:	52955564 	mov	w4, #0xaaab                	// #43691
   a6804:	72b55544 	movk	w4, #0xaaaa, lsl #16
   a6808:	d00000a0 	adrp	x0, bc000 <font_data+0x9a8>
   a680c:	913e2000 	add	x0, x0, #0xf88
   a6810:	9ba47f24 	umull	x4, w25, w4
   a6814:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a6818:	2a1803e7 	mov	w7, w24
   a681c:	2a1703e6 	mov	w6, w23
   a6820:	2a1603e5 	mov	w5, w22
   a6824:	f8745802 	ldr	x2, [x0, w20, uxtw #3]
   a6828:	11000663 	add	w3, w19, #0x1
   a682c:	aa1a03e0 	mov	x0, x26
   a6830:	d364fc84 	lsr	x4, x4, #36
   a6834:	91126021 	add	x1, x1, #0x498
   a6838:	0b040484 	add	w4, w4, w4, lsl #1
   a683c:	4b040f24 	sub	w4, w25, w4, lsl #3
   a6840:	97fffdbc 	bl	a5f30 <CString::Format(char const*, ...)>
   a6844:	aa1a03e0 	mov	x0, x26
   a6848:	a94153f3 	ldp	x19, x20, [sp, #16]
   a684c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a6850:	a94363f7 	ldp	x23, x24, [sp, #48]
   a6854:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a6858:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a685c:	d65f03c0 	ret
   a6860:	94000a38 	bl	a9140 <EnterCritical>
   a6864:	b9401674 	ldr	w20, [x19, #20]
   a6868:	b9400e7a 	ldr	w26, [x19, #12]
   a686c:	b9401a60 	ldr	w0, [x19, #24]
   a6870:	34fff220 	cbz	w0, a66b4 <CTimer::GetTimeString()+0x24>
   a6874:	94000a63 	bl	a9200 <LeaveCritical>
   a6878:	2a140340 	orr	w0, w26, w20
   a687c:	35fff200 	cbnz	w0, a66bc <CTimer::GetTimeString()+0x2c>
   a6880:	d280001a 	mov	x26, #0x0                   	// #0
   a6884:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6888:	aa1a03e0 	mov	x0, x26
   a688c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   a6890:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a6894:	d65f03c0 	ret
   a6898:	d503201f 	nop
   a689c:	d503201f 	nop

00000000000a68a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)>:
   a68a0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   a68a4:	910003fd 	mov	x29, sp
   a68a8:	a9025bf5 	stp	x21, x22, [sp, #32]
   a68ac:	aa0003f6 	mov	x22, x0
   a68b0:	d2800500 	mov	x0, #0x28                  	// #40
   a68b4:	a90153f3 	stp	x19, x20, [sp, #16]
   a68b8:	aa0203f3 	mov	x19, x2
   a68bc:	a90363f7 	stp	x23, x24, [sp, #48]
   a68c0:	2a0103f7 	mov	w23, w1
   a68c4:	aa0403f8 	mov	x24, x4
   a68c8:	f90023f9 	str	x25, [sp, #64]
   a68cc:	aa0303f9 	mov	x25, x3
   a68d0:	94000664 	bl	a8260 <operator new(unsigned long)>
   a68d4:	b9400ed5 	ldr	w21, [x22, #12]
   a68d8:	0b1702b5 	add	w21, w21, w23
   a68dc:	b4000793 	cbz	x19, a69cc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x12c>
   a68e0:	aa0003f4 	mov	x20, x0
   a68e4:	5289a860 	mov	w0, #0x4d43                	// #19779
   a68e8:	72a96a80 	movk	w0, #0x4b54, lsl #16
   a68ec:	f9000693 	str	x19, [x20, #8]
   a68f0:	b9000280 	str	w0, [x20]
   a68f4:	b9402ac0 	ldr	w0, [x22, #40]
   a68f8:	b9001295 	str	w21, [x20, #16]
   a68fc:	a901e299 	stp	x25, x24, [x20, #24]
   a6900:	350004c0 	cbnz	w0, a6998 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0xf8>
   a6904:	910082d7 	add	x23, x22, #0x20
   a6908:	aa1703e0 	mov	x0, x23
   a690c:	97ffe9e1 	bl	a1090 <CPtrList::GetFirst() const>
   a6910:	aa0003f3 	mov	x19, x0
   a6914:	b40006c0 	cbz	x0, a69ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x14c>
   a6918:	aa1303e0 	mov	x0, x19
   a691c:	5289a878 	mov	w24, #0x4d43                	// #19779
   a6920:	72a96a98 	movk	w24, #0x4b54, lsl #16
   a6924:	97ffe9f7 	bl	a1100 <CPtrList::GetPtr(TPtrListElement*)>
   a6928:	b4000200 	cbz	x0, a6968 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0xc8>
   a692c:	b9400001 	ldr	w1, [x0]
   a6930:	6b18003f 	cmp	w1, w24
   a6934:	54000261 	b.ne	a6980 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0xe0>  // b.any
   a6938:	b9401000 	ldr	w0, [x0, #16]
   a693c:	aa1303e1 	mov	x1, x19
   a6940:	4b150000 	sub	w0, w0, w21
   a6944:	7100001f 	cmp	w0, #0x0
   a6948:	aa1703e0 	mov	x0, x23
   a694c:	540002ac 	b.gt	a69a0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x100>
   a6950:	97ffe9d4 	bl	a10a0 <CPtrList::GetNext(TPtrListElement*) const>
   a6954:	b40004c0 	cbz	x0, a69ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x14c>
   a6958:	aa0003f3 	mov	x19, x0
   a695c:	aa1303e0 	mov	x0, x19
   a6960:	97ffe9e8 	bl	a1100 <CPtrList::GetPtr(TPtrListElement*)>
   a6964:	b5fffe40 	cbnz	x0, a692c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x8c>
   a6968:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a696c:	f0000060 	adrp	x0, b5000 <_etext+0x4158>
   a6970:	91104021 	add	x1, x1, #0x410
   a6974:	91134000 	add	x0, x0, #0x4d0
   a6978:	528037e2 	mov	w2, #0x1bf                 	// #447
   a697c:	97ffdcf1 	bl	9dd40 <assertion_failed>
   a6980:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a6984:	f0000060 	adrp	x0, b5000 <_etext+0x4158>
   a6988:	91104021 	add	x1, x1, #0x410
   a698c:	91138000 	add	x0, x0, #0x4e0
   a6990:	52803802 	mov	w2, #0x1c0                 	// #448
   a6994:	97ffdceb 	bl	9dd40 <assertion_failed>
   a6998:	940009ea 	bl	a9140 <EnterCritical>
   a699c:	17ffffda 	b	a6904 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x64>
   a69a0:	aa1403e2 	mov	x2, x20
   a69a4:	97ffe9ef 	bl	a1160 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   a69a8:	b9402ac0 	ldr	w0, [x22, #40]
   a69ac:	350001c0 	cbnz	w0, a69e4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x144>
   a69b0:	aa1403e0 	mov	x0, x20
   a69b4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a69b8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a69bc:	a94363f7 	ldp	x23, x24, [sp, #48]
   a69c0:	f94023f9 	ldr	x25, [sp, #64]
   a69c4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a69c8:	d65f03c0 	ret
   a69cc:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a69d0:	f0000060 	adrp	x0, b5000 <_etext+0x4158>
   a69d4:	91104021 	add	x1, x1, #0x410
   a69d8:	91290000 	add	x0, x0, #0xa40
   a69dc:	528035e2 	mov	w2, #0x1af                 	// #431
   a69e0:	97ffdcd8 	bl	9dd40 <assertion_failed>
   a69e4:	94000a07 	bl	a9200 <LeaveCritical>
   a69e8:	17fffff2 	b	a69b0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x110>
   a69ec:	aa1303e1 	mov	x1, x19
   a69f0:	aa1703e0 	mov	x0, x23
   a69f4:	aa1403e2 	mov	x2, x20
   a69f8:	97ffea1a 	bl	a1260 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   a69fc:	17ffffeb 	b	a69a8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x108>

00000000000a6a00 <CTimer::CancelKernelTimer(unsigned long)>:
   a6a00:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a6a04:	910003fd 	mov	x29, sp
   a6a08:	a90153f3 	stp	x19, x20, [sp, #16]
   a6a0c:	f90013f5 	str	x21, [sp, #32]
   a6a10:	b4000421 	cbz	x1, a6a94 <CTimer::CancelKernelTimer(unsigned long)+0x94>
   a6a14:	aa0003f4 	mov	x20, x0
   a6a18:	b9402800 	ldr	w0, [x0, #40]
   a6a1c:	aa0103f3 	mov	x19, x1
   a6a20:	350002e0 	cbnz	w0, a6a7c <CTimer::CancelKernelTimer(unsigned long)+0x7c>
   a6a24:	91008295 	add	x21, x20, #0x20
   a6a28:	aa1303e1 	mov	x1, x19
   a6a2c:	aa1503e0 	mov	x0, x21
   a6a30:	97ffea98 	bl	a1490 <CPtrList::Find(void*) const>
   a6a34:	aa0003e1 	mov	x1, x0
   a6a38:	b4000160 	cbz	x0, a6a64 <CTimer::CancelKernelTimer(unsigned long)+0x64>
   a6a3c:	b9400262 	ldr	w2, [x19]
   a6a40:	5289a860 	mov	w0, #0x4d43                	// #19779
   a6a44:	72a96a80 	movk	w0, #0x4b54, lsl #16
   a6a48:	6b00005f 	cmp	w2, w0
   a6a4c:	54000301 	b.ne	a6aac <CTimer::CancelKernelTimer(unsigned long)+0xac>  // b.any
   a6a50:	aa1503e0 	mov	x0, x21
   a6a54:	97ffea43 	bl	a1360 <CPtrList::Remove(TPtrListElement*)>
   a6a58:	aa1303e0 	mov	x0, x19
   a6a5c:	d2800501 	mov	x1, #0x28                  	// #40
   a6a60:	94000628 	bl	a8300 <operator delete(void*, unsigned long)>
   a6a64:	b9402a80 	ldr	w0, [x20, #40]
   a6a68:	350000e0 	cbnz	w0, a6a84 <CTimer::CancelKernelTimer(unsigned long)+0x84>
   a6a6c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6a70:	f94013f5 	ldr	x21, [sp, #32]
   a6a74:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a6a78:	d65f03c0 	ret
   a6a7c:	940009b1 	bl	a9140 <EnterCritical>
   a6a80:	17ffffe9 	b	a6a24 <CTimer::CancelKernelTimer(unsigned long)+0x24>
   a6a84:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6a88:	f94013f5 	ldr	x21, [sp, #32]
   a6a8c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a6a90:	140009dc 	b	a9200 <LeaveCritical>
   a6a94:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a6a98:	d0000060 	adrp	x0, b4000 <_etext+0x3158>
   a6a9c:	91104021 	add	x1, x1, #0x410
   a6aa0:	910da000 	add	x0, x0, #0x368
   a6aa4:	52803b82 	mov	w2, #0x1dc                 	// #476
   a6aa8:	97ffdca6 	bl	9dd40 <assertion_failed>
   a6aac:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a6ab0:	f0000060 	adrp	x0, b5000 <_etext+0x4158>
   a6ab4:	91104021 	add	x1, x1, #0x410
   a6ab8:	91112000 	add	x0, x0, #0x448
   a6abc:	52803c62 	mov	w2, #0x1e3                 	// #483
   a6ac0:	97ffdca0 	bl	9dd40 <assertion_failed>
   a6ac4:	d503201f 	nop
   a6ac8:	d503201f 	nop
   a6acc:	d503201f 	nop

00000000000a6ad0 <CTimer::PollKernelTimers()>:
   a6ad0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a6ad4:	910003fd 	mov	x29, sp
   a6ad8:	a90153f3 	stp	x19, x20, [sp, #16]
   a6adc:	a9025bf5 	stp	x21, x22, [sp, #32]
   a6ae0:	aa0003f5 	mov	x21, x0
   a6ae4:	b9402800 	ldr	w0, [x0, #40]
   a6ae8:	f9001bf7 	str	x23, [sp, #48]
   a6aec:	350005a0 	cbnz	w0, a6ba0 <CTimer::PollKernelTimers()+0xd0>
   a6af0:	5289a877 	mov	w23, #0x4d43                	// #19779
   a6af4:	72a96a97 	movk	w23, #0x4b54, lsl #16
   a6af8:	910082b6 	add	x22, x21, #0x20
   a6afc:	aa1603e0 	mov	x0, x22
   a6b00:	97ffe964 	bl	a1090 <CPtrList::GetFirst() const>
   a6b04:	aa0003f4 	mov	x20, x0
   a6b08:	b4000680 	cbz	x0, a6bd8 <CTimer::PollKernelTimers()+0x108>
   a6b0c:	97ffe97d 	bl	a1100 <CPtrList::GetPtr(TPtrListElement*)>
   a6b10:	aa0003f3 	mov	x19, x0
   a6b14:	b40004a0 	cbz	x0, a6ba8 <CTimer::PollKernelTimers()+0xd8>
   a6b18:	b9400000 	ldr	w0, [x0]
   a6b1c:	6b17001f 	cmp	w0, w23
   a6b20:	54000501 	b.ne	a6bc0 <CTimer::PollKernelTimers()+0xf0>  // b.any
   a6b24:	b9401260 	ldr	w0, [x19, #16]
   a6b28:	b9400ea1 	ldr	w1, [x21, #12]
   a6b2c:	4b010000 	sub	w0, w0, w1
   a6b30:	7100001f 	cmp	w0, #0x0
   a6b34:	5400052c 	b.gt	a6bd8 <CTimer::PollKernelTimers()+0x108>
   a6b38:	aa1603e0 	mov	x0, x22
   a6b3c:	aa1403e1 	mov	x1, x20
   a6b40:	97ffea08 	bl	a1360 <CPtrList::Remove(TPtrListElement*)>
   a6b44:	b9402aa0 	ldr	w0, [x21, #40]
   a6b48:	350001a0 	cbnz	w0, a6b7c <CTimer::PollKernelTimers()+0xac>
   a6b4c:	f9400663 	ldr	x3, [x19, #8]
   a6b50:	b40001c3 	cbz	x3, a6b88 <CTimer::PollKernelTimers()+0xb8>
   a6b54:	a9418a61 	ldp	x1, x2, [x19, #24]
   a6b58:	aa1303e0 	mov	x0, x19
   a6b5c:	d63f0060 	blr	x3
   a6b60:	aa1303e0 	mov	x0, x19
   a6b64:	d2800501 	mov	x1, #0x28                  	// #40
   a6b68:	940005e6 	bl	a8300 <operator delete(void*, unsigned long)>
   a6b6c:	b9402aa0 	ldr	w0, [x21, #40]
   a6b70:	34fffc60 	cbz	w0, a6afc <CTimer::PollKernelTimers()+0x2c>
   a6b74:	94000973 	bl	a9140 <EnterCritical>
   a6b78:	17ffffe1 	b	a6afc <CTimer::PollKernelTimers()+0x2c>
   a6b7c:	940009a1 	bl	a9200 <LeaveCritical>
   a6b80:	f9400663 	ldr	x3, [x19, #8]
   a6b84:	b5fffe83 	cbnz	x3, a6b54 <CTimer::PollKernelTimers()+0x84>
   a6b88:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a6b8c:	f0000060 	adrp	x0, b5000 <_etext+0x4158>
   a6b90:	91104021 	add	x1, x1, #0x410
   a6b94:	91290000 	add	x0, x0, #0xa40
   a6b98:	528040a2 	mov	w2, #0x205                 	// #517
   a6b9c:	97ffdc69 	bl	9dd40 <assertion_failed>
   a6ba0:	94000968 	bl	a9140 <EnterCritical>
   a6ba4:	17ffffd3 	b	a6af0 <CTimer::PollKernelTimers()+0x20>
   a6ba8:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a6bac:	d0000060 	adrp	x0, b4000 <_etext+0x3158>
   a6bb0:	91104021 	add	x1, x1, #0x410
   a6bb4:	910da000 	add	x0, x0, #0x368
   a6bb8:	52803f02 	mov	w2, #0x1f8                 	// #504
   a6bbc:	97ffdc61 	bl	9dd40 <assertion_failed>
   a6bc0:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a6bc4:	f0000060 	adrp	x0, b5000 <_etext+0x4158>
   a6bc8:	91104021 	add	x1, x1, #0x410
   a6bcc:	91112000 	add	x0, x0, #0x448
   a6bd0:	52803f22 	mov	w2, #0x1f9                 	// #505
   a6bd4:	97ffdc5b 	bl	9dd40 <assertion_failed>
   a6bd8:	b9402aa0 	ldr	w0, [x21, #40]
   a6bdc:	350000c0 	cbnz	w0, a6bf4 <CTimer::PollKernelTimers()+0x124>
   a6be0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6be4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a6be8:	f9401bf7 	ldr	x23, [sp, #48]
   a6bec:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a6bf0:	d65f03c0 	ret
   a6bf4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6bf8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a6bfc:	f9401bf7 	ldr	x23, [sp, #48]
   a6c00:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a6c04:	1400097f 	b	a9200 <LeaveCritical>
   a6c08:	d503201f 	nop
   a6c0c:	d503201f 	nop

00000000000a6c10 <CTimer::InterruptHandler()>:
   a6c10:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a6c14:	910003fd 	mov	x29, sp
   a6c18:	a90153f3 	stp	x19, x20, [sp, #16]
   a6c1c:	aa0003f4 	mov	x20, x0
   a6c20:	f90013f5 	str	x21, [sp, #32]
   a6c24:	d53be241 	mrs	x1, cntp_cval_el0
   a6c28:	b9400800 	ldr	w0, [x0, #8]
   a6c2c:	8b010000 	add	x0, x0, x1
   a6c30:	d51be240 	msr	cntp_cval_el0, x0
   a6c34:	b9401a80 	ldr	w0, [x20, #24]
   a6c38:	35000360 	cbnz	w0, a6ca4 <CTimer::InterruptHandler()+0x94>
   a6c3c:	b9400e81 	ldr	w1, [x20, #12]
   a6c40:	5290a3e0 	mov	w0, #0x851f                	// #34079
   a6c44:	72aa3d60 	movk	w0, #0x51eb, lsl #16
   a6c48:	52800c82 	mov	w2, #0x64                  	// #100
   a6c4c:	11000421 	add	w1, w1, #0x1
   a6c50:	9ba07c20 	umull	x0, w1, w0
   a6c54:	b9000e81 	str	w1, [x20, #12]
   a6c58:	d365fc00 	lsr	x0, x0, #37
   a6c5c:	1b028400 	msub	w0, w0, w2, w1
   a6c60:	340003c0 	cbz	w0, a6cd8 <CTimer::InterruptHandler()+0xc8>
   a6c64:	aa1403e0 	mov	x0, x20
   a6c68:	d2800013 	mov	x19, #0x0                   	// #0
   a6c6c:	97ffff99 	bl	a6ad0 <CTimer::PollKernelTimers()>
   a6c70:	b9406280 	ldr	w0, [x20, #96]
   a6c74:	91010295 	add	x21, x20, #0x40
   a6c78:	340000e0 	cbz	w0, a6c94 <CTimer::InterruptHandler()+0x84>
   a6c7c:	f8737aa0 	ldr	x0, [x21, x19, lsl #3]
   a6c80:	91000673 	add	x19, x19, #0x1
   a6c84:	d63f0000 	blr	x0
   a6c88:	b9406280 	ldr	w0, [x20, #96]
   a6c8c:	6b13001f 	cmp	w0, w19
   a6c90:	54ffff68 	b.hi	a6c7c <CTimer::InterruptHandler()+0x6c>  // b.pmore
   a6c94:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6c98:	f94013f5 	ldr	x21, [sp, #32]
   a6c9c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a6ca0:	d65f03c0 	ret
   a6ca4:	94000927 	bl	a9140 <EnterCritical>
   a6ca8:	b9400e82 	ldr	w2, [x20, #12]
   a6cac:	528b8521 	mov	w1, #0x5c29                	// #23593
   a6cb0:	72b851e1 	movk	w1, #0xc28f, lsl #16
   a6cb4:	528b8503 	mov	w3, #0x5c28                	// #23592
   a6cb8:	72a051e3 	movk	w3, #0x28f, lsl #16
   a6cbc:	b9401a80 	ldr	w0, [x20, #24]
   a6cc0:	11000442 	add	w2, w2, #0x1
   a6cc4:	1b017c41 	mul	w1, w2, w1
   a6cc8:	b9000e82 	str	w2, [x20, #12]
   a6ccc:	13810821 	ror	w1, w1, #2
   a6cd0:	6b03003f 	cmp	w1, w3
   a6cd4:	540000e8 	b.hi	a6cf0 <CTimer::InterruptHandler()+0xe0>  // b.pmore
   a6cd8:	b9401281 	ldr	w1, [x20, #16]
   a6cdc:	11000421 	add	w1, w1, #0x1
   a6ce0:	b9001281 	str	w1, [x20, #16]
   a6ce4:	b9401681 	ldr	w1, [x20, #20]
   a6ce8:	11000421 	add	w1, w1, #0x1
   a6cec:	b9001681 	str	w1, [x20, #20]
   a6cf0:	34fffba0 	cbz	w0, a6c64 <CTimer::InterruptHandler()+0x54>
   a6cf4:	94000943 	bl	a9200 <LeaveCritical>
   a6cf8:	17ffffdb 	b	a6c64 <CTimer::InterruptHandler()+0x54>
   a6cfc:	d503201f 	nop

00000000000a6d00 <CTimer::InterruptHandler(void*)>:
   a6d00:	b4000040 	cbz	x0, a6d08 <CTimer::InterruptHandler(void*)+0x8>
   a6d04:	17ffffc3 	b	a6c10 <CTimer::InterruptHandler()>
   a6d08:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a6d0c:	f0000040 	adrp	x0, b1000 <_etext+0x158>
   a6d10:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a6d14:	91104021 	add	x1, x1, #0x410
   a6d18:	910003fd 	mov	x29, sp
   a6d1c:	910b6000 	add	x0, x0, #0x2d8
   a6d20:	52804982 	mov	w2, #0x24c                 	// #588
   a6d24:	97ffdc07 	bl	9dd40 <assertion_failed>
   a6d28:	d503201f 	nop
   a6d2c:	d503201f 	nop

00000000000a6d30 <CTimer::TuneMsDelay()>:
   a6d30:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a6d34:	910003fd 	mov	x29, sp
   a6d38:	52807d01 	mov	w1, #0x3e8                 	// #1000
   a6d3c:	a90153f3 	stp	x19, x20, [sp, #16]
   a6d40:	aa0003f3 	mov	x19, x0
   a6d44:	5290a3f4 	mov	w20, #0x851f                	// #34079
   a6d48:	72aa3d74 	movk	w20, #0x51eb, lsl #16
   a6d4c:	a9025bf5 	stp	x21, x22, [sp, #32]
   a6d50:	5284e215 	mov	w21, #0x2710                	// #10000
   a6d54:	b9400c16 	ldr	w22, [x0, #12]
   a6d58:	b9402c00 	ldr	w0, [x0, #44]
   a6d5c:	1b017c00 	mul	w0, w0, w1
   a6d60:	94001b38 	bl	ada40 <DelayLoop>
   a6d64:	b9400e61 	ldr	w1, [x19, #12]
   a6d68:	5289ba62 	mov	w2, #0x4dd3                	// #19923
   a6d6c:	72a20c42 	movk	w2, #0x1062, lsl #16
   a6d70:	b9402e60 	ldr	w0, [x19, #44]
   a6d74:	4b160021 	sub	w1, w1, w22
   a6d78:	1ac10ab5 	udiv	w21, w21, w1
   a6d7c:	1b007ea0 	mul	w0, w21, w0
   a6d80:	9bb47c00 	umull	x0, w0, w20
   a6d84:	d365fc00 	lsr	x0, x0, #37
   a6d88:	1107d001 	add	w1, w0, #0x1f4
   a6d8c:	b9002e60 	str	w0, [x19, #44]
   a6d90:	9ba27c20 	umull	x0, w1, w2
   a6d94:	d366fc00 	lsr	x0, x0, #38
   a6d98:	b9003260 	str	w0, [x19, #48]
   a6d9c:	97ffe31d 	bl	9fa10 <CLogger::Get()>
   a6da0:	9bb47ea4 	umull	x4, w21, w20
   a6da4:	52800c85 	mov	w5, #0x64                  	// #100
   a6da8:	900000a1 	adrp	x1, ba000 <CursorSymbol+0x188>
   a6dac:	91382021 	add	x1, x1, #0xe08
   a6db0:	f0000063 	adrp	x3, b5000 <_etext+0x4158>
   a6db4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6db8:	9100c021 	add	x1, x1, #0x30
   a6dbc:	91142063 	add	x3, x3, #0x508
   a6dc0:	d365fc84 	lsr	x4, x4, #37
   a6dc4:	52800062 	mov	w2, #0x3                   	// #3
   a6dc8:	1b05d485 	msub	w5, w4, w5, w21
   a6dcc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a6dd0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a6dd4:	17ffe4fb 	b	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a6dd8:	d503201f 	nop
   a6ddc:	d503201f 	nop

00000000000a6de0 <CTimer::Initialize()>:
   a6de0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a6de4:	910003fd 	mov	x29, sp
   a6de8:	a90153f3 	stp	x19, x20, [sp, #16]
   a6dec:	aa0003f3 	mov	x19, x0
   a6df0:	f9400000 	ldr	x0, [x0]
   a6df4:	b40004c0 	cbz	x0, a6e8c <CTimer::Initialize()+0xac>
   a6df8:	aa1303e3 	mov	x3, x19
   a6dfc:	528003c1 	mov	w1, #0x1e                  	// #30
   a6e00:	90000002 	adrp	x2, a6000 <halt+0x10>
   a6e04:	91340042 	add	x2, x2, #0xd00
   a6e08:	94000fc6 	bl	aad20 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   a6e0c:	d53be001 	mrs	x1, cntfrq_el0
   a6e10:	d28b8520 	mov	x0, #0x5c29                	// #23593
   a6e14:	f2b851e0 	movk	x0, #0xc28f, lsl #16
   a6e18:	f2c51ea0 	movk	x0, #0x28f5, lsl #32
   a6e1c:	f2f1eb80 	movk	x0, #0x8f5c, lsl #48
   a6e20:	d291eb82 	mov	x2, #0x8f5c                	// #36700
   a6e24:	f2beb842 	movk	x2, #0xf5c2, lsl #16
   a6e28:	9b007c20 	mul	x0, x1, x0
   a6e2c:	f2cb8502 	movk	x2, #0x5c28, lsl #32
   a6e30:	f2e051e2 	movk	x2, #0x28f, lsl #48
   a6e34:	93c00800 	ror	x0, x0, #2
   a6e38:	eb02001f 	cmp	x0, x2
   a6e3c:	54000348 	b.hi	a6ea4 <CTimer::Initialize()+0xc4>  // b.pmore
   a6e40:	d29eb860 	mov	x0, #0xf5c3                	// #62915
   a6e44:	f2ab8500 	movk	x0, #0x5c28, lsl #16
   a6e48:	d342fc21 	lsr	x1, x1, #2
   a6e4c:	f2d851e0 	movk	x0, #0xc28f, lsl #32
   a6e50:	f2e51ea0 	movk	x0, #0x28f5, lsl #48
   a6e54:	9bc07c21 	umulh	x1, x1, x0
   a6e58:	d342fc21 	lsr	x1, x1, #2
   a6e5c:	b9000a61 	str	w1, [x19, #8]
   a6e60:	d53be020 	mrs	x0, cntpct_el0
   a6e64:	8b214001 	add	x1, x0, w1, uxtw
   a6e68:	d51be241 	msr	cntp_cval_el0, x1
   a6e6c:	d2800034 	mov	x20, #0x1                   	// #1
   a6e70:	d51be234 	msr	cntp_ctl_el0, x20
   a6e74:	aa1303e0 	mov	x0, x19
   a6e78:	97ffffae 	bl	a6d30 <CTimer::TuneMsDelay()>
   a6e7c:	2a1403e0 	mov	w0, w20
   a6e80:	a94153f3 	ldp	x19, x20, [sp, #16]
   a6e84:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a6e88:	d65f03c0 	ret
   a6e8c:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a6e90:	f0000060 	adrp	x0, b5000 <_etext+0x4158>
   a6e94:	91104021 	add	x1, x1, #0x410
   a6e98:	9110c000 	add	x0, x0, #0x430
   a6e9c:	52800c82 	mov	w2, #0x64                  	// #100
   a6ea0:	97ffdba8 	bl	9dd40 <assertion_failed>
   a6ea4:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a6ea8:	f0000060 	adrp	x0, b5000 <_etext+0x4158>
   a6eac:	91104021 	add	x1, x1, #0x410
   a6eb0:	91148000 	add	x0, x0, #0x520
   a6eb4:	52800f82 	mov	w2, #0x7c                  	// #124
   a6eb8:	97ffdba2 	bl	9dd40 <assertion_failed>
   a6ebc:	d503201f 	nop

00000000000a6ec0 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))>:
   a6ec0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a6ec4:	910003fd 	mov	x29, sp
   a6ec8:	f9401c02 	ldr	x2, [x0, #56]
   a6ecc:	b50000a2 	cbnz	x2, a6ee0 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x20>
   a6ed0:	f9001c01 	str	x1, [x0, #56]
   a6ed4:	b4000121 	cbz	x1, a6ef8 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x38>
   a6ed8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a6edc:	d65f03c0 	ret
   a6ee0:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a6ee4:	f0000060 	adrp	x0, b5000 <_etext+0x4158>
   a6ee8:	91104021 	add	x1, x1, #0x410
   a6eec:	9114e000 	add	x0, x0, #0x538
   a6ef0:	52804c42 	mov	w2, #0x262                 	// #610
   a6ef4:	97ffdb93 	bl	9dd40 <assertion_failed>
   a6ef8:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a6efc:	f0000060 	adrp	x0, b5000 <_etext+0x4158>
   a6f00:	91104021 	add	x1, x1, #0x410
   a6f04:	91156000 	add	x0, x0, #0x558
   a6f08:	52804c82 	mov	w2, #0x264                 	// #612
   a6f0c:	97ffdb8d 	bl	9dd40 <assertion_failed>

00000000000a6f10 <CTimer::RegisterPeriodicHandler(void (*)())>:
   a6f10:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a6f14:	910003fd 	mov	x29, sp
   a6f18:	b40001c1 	cbz	x1, a6f50 <CTimer::RegisterPeriodicHandler(void (*)())+0x40>
   a6f1c:	b9406002 	ldr	w2, [x0, #96]
   a6f20:	71000c5f 	cmp	w2, #0x3
   a6f24:	54000228 	b.hi	a6f68 <CTimer::RegisterPeriodicHandler(void (*)())+0x58>  // b.pmore
   a6f28:	b9406002 	ldr	w2, [x0, #96]
   a6f2c:	2a0203e2 	mov	w2, w2
   a6f30:	91002042 	add	x2, x2, #0x8
   a6f34:	f8227801 	str	x1, [x0, x2, lsl #3]
   a6f38:	d5033f9f 	dsb	sy
   a6f3c:	b9406001 	ldr	w1, [x0, #96]
   a6f40:	11000421 	add	w1, w1, #0x1
   a6f44:	b9006001 	str	w1, [x0, #96]
   a6f48:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a6f4c:	d65f03c0 	ret
   a6f50:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a6f54:	f0000060 	adrp	x0, b5000 <_etext+0x4158>
   a6f58:	91104021 	add	x1, x1, #0x410
   a6f5c:	91290000 	add	x0, x0, #0xa40
   a6f60:	52804d22 	mov	w2, #0x269                 	// #617
   a6f64:	97ffdb77 	bl	9dd40 <assertion_failed>
   a6f68:	f0000061 	adrp	x1, b5000 <_etext+0x4158>
   a6f6c:	f0000060 	adrp	x0, b5000 <_etext+0x4158>
   a6f70:	91104021 	add	x1, x1, #0x410
   a6f74:	9115e000 	add	x0, x0, #0x578
   a6f78:	52804d62 	mov	w2, #0x26b                 	// #619
   a6f7c:	97ffdb71 	bl	9dd40 <assertion_failed>

00000000000a6f80 <CTimer::SimpleMsDelay(unsigned int)>:
   a6f80:	34000280 	cbz	w0, a6fd0 <CTimer::SimpleMsDelay(unsigned int)+0x50>
   a6f84:	52807d01 	mov	w1, #0x3e8                 	// #1000
   a6f88:	1b017c00 	mul	w0, w0, w1
   a6f8c:	34000220 	cbz	w0, a6fd0 <CTimer::SimpleMsDelay(unsigned int)+0x50>
   a6f90:	11000401 	add	w1, w0, #0x1
   a6f94:	d5033fdf 	isb
   a6f98:	d53be023 	mrs	x3, cntpct_el0
   a6f9c:	d53be000 	mrs	x0, cntfrq_el0
   a6fa0:	d2884804 	mov	x4, #0x4240                	// #16960
   a6fa4:	f2a001e4 	movk	x4, #0xf, lsl #16
   a6fa8:	9b047c63 	mul	x3, x3, x4
   a6fac:	9ac00863 	udiv	x3, x3, x0
   a6fb0:	d5033fdf 	isb
   a6fb4:	d53be020 	mrs	x0, cntpct_el0
   a6fb8:	d53be002 	mrs	x2, cntfrq_el0
   a6fbc:	9b047c00 	mul	x0, x0, x4
   a6fc0:	9ac20800 	udiv	x0, x0, x2
   a6fc4:	4b030000 	sub	w0, w0, w3
   a6fc8:	6b00003f 	cmp	w1, w0
   a6fcc:	54ffff28 	b.hi	a6fb0 <CTimer::SimpleMsDelay(unsigned int)+0x30>  // b.pmore
   a6fd0:	d65f03c0 	ret
   a6fd4:	d503201f 	nop
   a6fd8:	d503201f 	nop
   a6fdc:	d503201f 	nop

00000000000a6fe0 <CTimer::SimpleusDelay(unsigned int)>:
   a6fe0:	34000240 	cbz	w0, a7028 <CTimer::SimpleusDelay(unsigned int)+0x48>
   a6fe4:	11000401 	add	w1, w0, #0x1
   a6fe8:	d5033fdf 	isb
   a6fec:	d53be023 	mrs	x3, cntpct_el0
   a6ff0:	d53be000 	mrs	x0, cntfrq_el0
   a6ff4:	d2884804 	mov	x4, #0x4240                	// #16960
   a6ff8:	f2a001e4 	movk	x4, #0xf, lsl #16
   a6ffc:	9b047c63 	mul	x3, x3, x4
   a7000:	9ac00863 	udiv	x3, x3, x0
   a7004:	d503201f 	nop
   a7008:	d5033fdf 	isb
   a700c:	d53be020 	mrs	x0, cntpct_el0
   a7010:	d53be002 	mrs	x2, cntfrq_el0
   a7014:	9b047c00 	mul	x0, x0, x4
   a7018:	9ac20800 	udiv	x0, x0, x2
   a701c:	4b030000 	sub	w0, w0, w3
   a7020:	6b00003f 	cmp	w1, w0
   a7024:	54ffff28 	b.hi	a7008 <CTimer::SimpleusDelay(unsigned int)+0x28>  // b.pmore
   a7028:	d65f03c0 	ret
   a702c:	d503201f 	nop

00000000000a7030 <CTimer::IsLeapYear(unsigned int)>:
   a7030:	528b8521 	mov	w1, #0x5c29                	// #23593
   a7034:	72b851e1 	movk	w1, #0xc28f, lsl #16
   a7038:	f240041f 	tst	x0, #0x3
   a703c:	528b8502 	mov	w2, #0x5c28                	// #23592
   a7040:	72a051e2 	movk	w2, #0x28f, lsl #16
   a7044:	1b017c01 	mul	w1, w0, w1
   a7048:	1a9f17e0 	cset	w0, eq	// eq = none
   a704c:	13810823 	ror	w3, w1, #2
   a7050:	6b02007f 	cmp	w3, w2
   a7054:	54000049 	b.ls	a705c <CTimer::IsLeapYear(unsigned int)+0x2c>  // b.plast
   a7058:	d65f03c0 	ret
   a705c:	529ae140 	mov	w0, #0xd70a                	// #55050
   a7060:	72a01460 	movk	w0, #0xa3, lsl #16
   a7064:	13811021 	ror	w1, w1, #4
   a7068:	6b00003f 	cmp	w1, w0
   a706c:	1a9f87e0 	cset	w0, ls	// ls = plast
   a7070:	d65f03c0 	ret
   a7074:	d503201f 	nop
   a7078:	d503201f 	nop
   a707c:	d503201f 	nop

00000000000a7080 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   a7080:	7100041f 	cmp	w0, #0x1
   a7084:	2a0003e2 	mov	w2, w0
   a7088:	540000a0 	b.eq	a709c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x1c>  // b.none
   a708c:	f0000080 	adrp	x0, ba000 <CursorSymbol+0x188>
   a7090:	91382000 	add	x0, x0, #0xe08
   a7094:	b8625800 	ldr	w0, [x0, w2, uxtw #2]
   a7098:	d65f03c0 	ret
   a709c:	528b8520 	mov	w0, #0x5c29                	// #23593
   a70a0:	72b851e0 	movk	w0, #0xc28f, lsl #16
   a70a4:	528b8503 	mov	w3, #0x5c28                	// #23592
   a70a8:	72a051e3 	movk	w3, #0x28f, lsl #16
   a70ac:	1b007c20 	mul	w0, w1, w0
   a70b0:	13800804 	ror	w4, w0, #2
   a70b4:	6b03009f 	cmp	w4, w3
   a70b8:	540000a9 	b.ls	a70cc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x4c>  // b.plast
   a70bc:	f240043f 	tst	x1, #0x3
   a70c0:	528003a0 	mov	w0, #0x1d                  	// #29
   a70c4:	54fffe41 	b.ne	a708c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0xc>  // b.any
   a70c8:	d65f03c0 	ret
   a70cc:	13801000 	ror	w0, w0, #4
   a70d0:	529ae141 	mov	w1, #0xd70a                	// #55050
   a70d4:	72a01461 	movk	w1, #0xa3, lsl #16
   a70d8:	6b01001f 	cmp	w0, w1
   a70dc:	528003a0 	mov	w0, #0x1d                  	// #29
   a70e0:	54fffd68 	b.hi	a708c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0xc>  // b.pmore
   a70e4:	d65f03c0 	ret
   a70e8:	d503201f 	nop
   a70ec:	d503201f 	nop

00000000000a70f0 <CTimer::Get()>:
   a70f0:	d00000a0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a70f4:	f940ec00 	ldr	x0, [x0, #472]
   a70f8:	b4000040 	cbz	x0, a7100 <CTimer::Get()+0x10>
   a70fc:	d65f03c0 	ret
   a7100:	d0000061 	adrp	x1, b5000 <_etext+0x4158>
   a7104:	b0000040 	adrp	x0, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   a7108:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a710c:	91104021 	add	x1, x1, #0x410
   a7110:	910003fd 	mov	x29, sp
   a7114:	913ae000 	add	x0, x0, #0xeb8
   a7118:	52805582 	mov	w2, #0x2ac                 	// #684
   a711c:	97ffdb09 	bl	9dd40 <assertion_failed>

00000000000a7120 <memmove>:
   a7120:	eb01001f 	cmp	x0, x1
   a7124:	54000089 	b.ls	a7134 <memmove+0x14>  // b.plast
   a7128:	8b020023 	add	x3, x1, x2
   a712c:	eb03001f 	cmp	x0, x3
   a7130:	54000043 	b.cc	a7138 <memmove+0x18>  // b.lo, b.ul, b.last
   a7134:	140001c5 	b	a7848 <memcpy>
   a7138:	d1000443 	sub	x3, x2, #0x1
   a713c:	b40000c2 	cbz	x2, a7154 <memmove+0x34>
   a7140:	38e36822 	ldrsb	w2, [x1, x3]
   a7144:	38236802 	strb	w2, [x0, x3]
   a7148:	d1000463 	sub	x3, x3, #0x1
   a714c:	b100047f 	cmn	x3, #0x1
   a7150:	54ffff81 	b.ne	a7140 <memmove+0x20>  // b.any
   a7154:	d65f03c0 	ret
   a7158:	d503201f 	nop
   a715c:	d503201f 	nop

00000000000a7160 <memcmp>:
   a7160:	b40001a2 	cbz	x2, a7194 <memcmp+0x34>
   a7164:	d2800003 	mov	x3, #0x0                   	// #0
   a7168:	14000004 	b	a7178 <memcmp+0x18>
   a716c:	54000183 	b.cc	a719c <memcmp+0x3c>  // b.lo, b.ul, b.last
   a7170:	eb02007f 	cmp	x3, x2
   a7174:	54000100 	b.eq	a7194 <memcmp+0x34>  // b.none
   a7178:	38636805 	ldrb	w5, [x0, x3]
   a717c:	38636824 	ldrb	w4, [x1, x3]
   a7180:	91000463 	add	x3, x3, #0x1
   a7184:	6b0400bf 	cmp	w5, w4
   a7188:	54ffff29 	b.ls	a716c <memcmp+0xc>  // b.plast
   a718c:	52800020 	mov	w0, #0x1                   	// #1
   a7190:	d65f03c0 	ret
   a7194:	52800000 	mov	w0, #0x0                   	// #0
   a7198:	d65f03c0 	ret
   a719c:	12800000 	mov	w0, #0xffffffff            	// #-1
   a71a0:	d65f03c0 	ret
   a71a4:	d503201f 	nop
   a71a8:	d503201f 	nop
   a71ac:	d503201f 	nop

00000000000a71b0 <strlen>:
   a71b0:	aa0003e2 	mov	x2, x0
   a71b4:	39c00000 	ldrsb	w0, [x0]
   a71b8:	340000c0 	cbz	w0, a71d0 <strlen+0x20>
   a71bc:	d2800000 	mov	x0, #0x0                   	// #0
   a71c0:	91000400 	add	x0, x0, #0x1
   a71c4:	38e06841 	ldrsb	w1, [x2, x0]
   a71c8:	35ffffc1 	cbnz	w1, a71c0 <strlen+0x10>
   a71cc:	d65f03c0 	ret
   a71d0:	d2800000 	mov	x0, #0x0                   	// #0
   a71d4:	d65f03c0 	ret
   a71d8:	d503201f 	nop
   a71dc:	d503201f 	nop

00000000000a71e0 <strcmp>:
   a71e0:	39c00002 	ldrsb	w2, [x0]
   a71e4:	35000102 	cbnz	w2, a7204 <strcmp+0x24>
   a71e8:	14000017 	b	a7244 <strcmp+0x64>
   a71ec:	6b02007f 	cmp	w3, w2
   a71f0:	5400018b 	b.lt	a7220 <strcmp+0x40>  // b.tstop
   a71f4:	540001ac 	b.gt	a7228 <strcmp+0x48>
   a71f8:	38c01c02 	ldrsb	w2, [x0, #1]!
   a71fc:	340001a2 	cbz	w2, a7230 <strcmp+0x50>
   a7200:	aa0403e1 	mov	x1, x4
   a7204:	39c00023 	ldrsb	w3, [x1]
   a7208:	91000424 	add	x4, x1, #0x1
   a720c:	35ffff03 	cbnz	w3, a71ec <strcmp+0xc>
   a7210:	6b03005f 	cmp	w2, w3
   a7214:	5a9fa3e0 	csetm	w0, lt	// lt = tstop
   a7218:	1a9fd400 	csinc	w0, w0, wzr, le
   a721c:	d65f03c0 	ret
   a7220:	52800020 	mov	w0, #0x1                   	// #1
   a7224:	d65f03c0 	ret
   a7228:	12800000 	mov	w0, #0xffffffff            	// #-1
   a722c:	d65f03c0 	ret
   a7230:	39c00423 	ldrsb	w3, [x1, #1]
   a7234:	6b03005f 	cmp	w2, w3
   a7238:	5a9fa3e0 	csetm	w0, lt	// lt = tstop
   a723c:	1a9fd400 	csinc	w0, w0, wzr, le
   a7240:	17fffff7 	b	a721c <strcmp+0x3c>
   a7244:	39c00023 	ldrsb	w3, [x1]
   a7248:	17fffff2 	b	a7210 <strcmp+0x30>
   a724c:	d503201f 	nop

00000000000a7250 <strcasecmp>:
   a7250:	1400000c 	b	a7280 <strcasecmp+0x30>
   a7254:	51008063 	sub	w3, w3, #0x20
   a7258:	39c00022 	ldrsb	w2, [x1]
   a725c:	51018444 	sub	w4, w2, #0x61
   a7260:	7100649f 	cmp	w4, #0x19
   a7264:	54000288 	b.hi	a72b4 <strcasecmp+0x64>  // b.pmore
   a7268:	51008042 	sub	w2, w2, #0x20
   a726c:	6b02007f 	cmp	w3, w2
   a7270:	91000400 	add	x0, x0, #0x1
   a7274:	91000421 	add	x1, x1, #0x1
   a7278:	5400028c 	b.gt	a72c8 <strcasecmp+0x78>
   a727c:	540002ab 	b.lt	a72d0 <strcasecmp+0x80>  // b.tstop
   a7280:	39c00003 	ldrsb	w3, [x0]
   a7284:	51018462 	sub	w2, w3, #0x61
   a7288:	7100645f 	cmp	w2, #0x19
   a728c:	54fffe49 	b.ls	a7254 <strcasecmp+0x4>  // b.plast
   a7290:	35fffe43 	cbnz	w3, a7258 <strcasecmp+0x8>
   a7294:	39c00022 	ldrsb	w2, [x1]
   a7298:	51018440 	sub	w0, w2, #0x61
   a729c:	7100641f 	cmp	w0, #0x19
   a72a0:	540000c8 	b.hi	a72b8 <strcasecmp+0x68>  // b.pmore
   a72a4:	51008042 	sub	w2, w2, #0x20
   a72a8:	6b02007f 	cmp	w3, w2
   a72ac:	5a9fa3e0 	csetm	w0, lt	// lt = tstop
   a72b0:	d65f03c0 	ret
   a72b4:	35fffdc2 	cbnz	w2, a726c <strcasecmp+0x1c>
   a72b8:	6b03005f 	cmp	w2, w3
   a72bc:	52800020 	mov	w0, #0x1                   	// #1
   a72c0:	54ffff4a 	b.ge	a72a8 <strcasecmp+0x58>  // b.tcont
   a72c4:	d65f03c0 	ret
   a72c8:	52800020 	mov	w0, #0x1                   	// #1
   a72cc:	d65f03c0 	ret
   a72d0:	12800000 	mov	w0, #0xffffffff            	// #-1
   a72d4:	d65f03c0 	ret
   a72d8:	d503201f 	nop
   a72dc:	d503201f 	nop

00000000000a72e0 <strncmp>:
   a72e0:	d2800003 	mov	x3, #0x0                   	// #0
   a72e4:	b5000102 	cbnz	x2, a7304 <strncmp+0x24>
   a72e8:	1400000f 	b	a7324 <strncmp+0x44>
   a72ec:	34000145 	cbz	w5, a7314 <strncmp+0x34>
   a72f0:	6b05009f 	cmp	w4, w5
   a72f4:	540001cc 	b.gt	a732c <strncmp+0x4c>
   a72f8:	540001eb 	b.lt	a7334 <strncmp+0x54>  // b.tstop
   a72fc:	eb03005f 	cmp	x2, x3
   a7300:	54000120 	b.eq	a7324 <strncmp+0x44>  // b.none
   a7304:	38e36804 	ldrsb	w4, [x0, x3]
   a7308:	38e36825 	ldrsb	w5, [x1, x3]
   a730c:	91000463 	add	x3, x3, #0x1
   a7310:	35fffee4 	cbnz	w4, a72ec <strncmp+0xc>
   a7314:	6b05009f 	cmp	w4, w5
   a7318:	5a9fa3e0 	csetm	w0, lt	// lt = tstop
   a731c:	1a9fd400 	csinc	w0, w0, wzr, le
   a7320:	d65f03c0 	ret
   a7324:	52800000 	mov	w0, #0x0                   	// #0
   a7328:	d65f03c0 	ret
   a732c:	52800020 	mov	w0, #0x1                   	// #1
   a7330:	d65f03c0 	ret
   a7334:	12800000 	mov	w0, #0xffffffff            	// #-1
   a7338:	d65f03c0 	ret
   a733c:	d503201f 	nop

00000000000a7340 <strncasecmp>:
   a7340:	b50001e2 	cbnz	x2, a737c <strncasecmp+0x3c>
   a7344:	1400001b 	b	a73b0 <strncasecmp+0x70>
   a7348:	51008063 	sub	w3, w3, #0x20
   a734c:	39c00024 	ldrsb	w4, [x1]
   a7350:	51018485 	sub	w5, w4, #0x61
   a7354:	710064bf 	cmp	w5, #0x19
   a7358:	54000308 	b.hi	a73b8 <strncasecmp+0x78>  // b.pmore
   a735c:	51008084 	sub	w4, w4, #0x20
   a7360:	6b04007f 	cmp	w3, w4
   a7364:	91000400 	add	x0, x0, #0x1
   a7368:	5400036c 	b.gt	a73d4 <strncasecmp+0x94>
   a736c:	5400038b 	b.lt	a73dc <strncasecmp+0x9c>  // b.tstop
   a7370:	f1000442 	subs	x2, x2, #0x1
   a7374:	91000421 	add	x1, x1, #0x1
   a7378:	540001c0 	b.eq	a73b0 <strncasecmp+0x70>  // b.none
   a737c:	39c00003 	ldrsb	w3, [x0]
   a7380:	51018464 	sub	w4, w3, #0x61
   a7384:	7100649f 	cmp	w4, #0x19
   a7388:	54fffe09 	b.ls	a7348 <strncasecmp+0x8>  // b.plast
   a738c:	35fffe03 	cbnz	w3, a734c <strncasecmp+0xc>
   a7390:	39c00024 	ldrsb	w4, [x1]
   a7394:	51018480 	sub	w0, w4, #0x61
   a7398:	7100641f 	cmp	w0, #0x19
   a739c:	54000108 	b.hi	a73bc <strncasecmp+0x7c>  // b.pmore
   a73a0:	51008084 	sub	w4, w4, #0x20
   a73a4:	6b04007f 	cmp	w3, w4
   a73a8:	5a9fa3e0 	csetm	w0, lt	// lt = tstop
   a73ac:	d65f03c0 	ret
   a73b0:	52800000 	mov	w0, #0x0                   	// #0
   a73b4:	d65f03c0 	ret
   a73b8:	35fffd44 	cbnz	w4, a7360 <strncasecmp+0x20>
   a73bc:	6b04007f 	cmp	w3, w4
   a73c0:	52800020 	mov	w0, #0x1                   	// #1
   a73c4:	54ffff4c 	b.gt	a73ac <strncasecmp+0x6c>
   a73c8:	6b04007f 	cmp	w3, w4
   a73cc:	5a9fa3e0 	csetm	w0, lt	// lt = tstop
   a73d0:	17fffff7 	b	a73ac <strncasecmp+0x6c>
   a73d4:	52800020 	mov	w0, #0x1                   	// #1
   a73d8:	d65f03c0 	ret
   a73dc:	12800000 	mov	w0, #0xffffffff            	// #-1
   a73e0:	d65f03c0 	ret
   a73e4:	d503201f 	nop
   a73e8:	d503201f 	nop
   a73ec:	d503201f 	nop

00000000000a73f0 <strcpy>:
   a73f0:	39c00022 	ldrsb	w2, [x1]
   a73f4:	aa0003e3 	mov	x3, x0
   a73f8:	340000a2 	cbz	w2, a740c <strcpy+0x1c>
   a73fc:	d503201f 	nop
   a7400:	38001462 	strb	w2, [x3], #1
   a7404:	38c01c22 	ldrsb	w2, [x1, #1]!
   a7408:	35ffffc2 	cbnz	w2, a7400 <strcpy+0x10>
   a740c:	3900007f 	strb	wzr, [x3]
   a7410:	d65f03c0 	ret
   a7414:	d503201f 	nop
   a7418:	d503201f 	nop
   a741c:	d503201f 	nop

00000000000a7420 <strncpy>:
   a7420:	b4000162 	cbz	x2, a744c <strncpy+0x2c>
   a7424:	8b020024 	add	x4, x1, x2
   a7428:	aa0003e3 	mov	x3, x0
   a742c:	14000003 	b	a7438 <strncpy+0x18>
   a7430:	38001462 	strb	w2, [x3], #1
   a7434:	540000c0 	b.eq	a744c <strncpy+0x2c>  // b.none
   a7438:	39c00022 	ldrsb	w2, [x1]
   a743c:	91000421 	add	x1, x1, #0x1
   a7440:	eb01009f 	cmp	x4, x1
   a7444:	35ffff62 	cbnz	w2, a7430 <strncpy+0x10>
   a7448:	3900007f 	strb	wzr, [x3]
   a744c:	d65f03c0 	ret

00000000000a7450 <strcat>:
   a7450:	39c00002 	ldrsb	w2, [x0]
   a7454:	34000182 	cbz	w2, a7484 <strcat+0x34>
   a7458:	aa0003e2 	mov	x2, x0
   a745c:	d503201f 	nop
   a7460:	38c01c43 	ldrsb	w3, [x2, #1]!
   a7464:	35ffffe3 	cbnz	w3, a7460 <strcat+0x10>
   a7468:	39c00023 	ldrsb	w3, [x1]
   a746c:	34000083 	cbz	w3, a747c <strcat+0x2c>
   a7470:	38001443 	strb	w3, [x2], #1
   a7474:	38c01c23 	ldrsb	w3, [x1, #1]!
   a7478:	35ffffc3 	cbnz	w3, a7470 <strcat+0x20>
   a747c:	3900005f 	strb	wzr, [x2]
   a7480:	d65f03c0 	ret
   a7484:	aa0003e2 	mov	x2, x0
   a7488:	17fffff8 	b	a7468 <strcat+0x18>
   a748c:	d503201f 	nop

00000000000a7490 <strncat>:
   a7490:	39c00003 	ldrsb	w3, [x0]
   a7494:	34000223 	cbz	w3, a74d8 <strncat+0x48>
   a7498:	aa0003e3 	mov	x3, x0
   a749c:	d503201f 	nop
   a74a0:	38c01c64 	ldrsb	w4, [x3, #1]!
   a74a4:	35ffffe4 	cbnz	w4, a74a0 <strncat+0x10>
   a74a8:	39c00024 	ldrsb	w4, [x1]
   a74ac:	34000124 	cbz	w4, a74d0 <strncat+0x40>
   a74b0:	b4000102 	cbz	x2, a74d0 <strncat+0x40>
   a74b4:	8b020022 	add	x2, x1, x2
   a74b8:	14000003 	b	a74c4 <strncat+0x34>
   a74bc:	eb01005f 	cmp	x2, x1
   a74c0:	54000080 	b.eq	a74d0 <strncat+0x40>  // b.none
   a74c4:	38001464 	strb	w4, [x3], #1
   a74c8:	38c01c24 	ldrsb	w4, [x1, #1]!
   a74cc:	35ffff84 	cbnz	w4, a74bc <strncat+0x2c>
   a74d0:	3900007f 	strb	wzr, [x3]
   a74d4:	d65f03c0 	ret
   a74d8:	aa0003e3 	mov	x3, x0
   a74dc:	17fffff3 	b	a74a8 <strncat+0x18>

00000000000a74e0 <strchr>:
   a74e0:	39c00002 	ldrsb	w2, [x0]
   a74e4:	35000082 	cbnz	w2, a74f4 <strchr+0x14>
   a74e8:	14000006 	b	a7500 <strchr+0x20>
   a74ec:	38c01c02 	ldrsb	w2, [x0, #1]!
   a74f0:	34000082 	cbz	w2, a7500 <strchr+0x20>
   a74f4:	6b01005f 	cmp	w2, w1
   a74f8:	54ffffa1 	b.ne	a74ec <strchr+0xc>  // b.any
   a74fc:	d65f03c0 	ret
   a7500:	d2800000 	mov	x0, #0x0                   	// #0
   a7504:	d65f03c0 	ret
   a7508:	d503201f 	nop
   a750c:	d503201f 	nop

00000000000a7510 <strstr>:
   a7510:	39c00002 	ldrsb	w2, [x0]
   a7514:	39c00025 	ldrsb	w5, [x1]
   a7518:	350000c2 	cbnz	w2, a7530 <strstr+0x20>
   a751c:	710000bf 	cmp	w5, #0x0
   a7520:	9a9f0000 	csel	x0, x0, xzr, eq	// eq = none
   a7524:	d65f03c0 	ret
   a7528:	38c01c02 	ldrsb	w2, [x0, #1]!
   a752c:	34000182 	cbz	w2, a755c <strstr+0x4c>
   a7530:	34ffffa5 	cbz	w5, a7524 <strstr+0x14>
   a7534:	2a0503e3 	mov	w3, w5
   a7538:	d2800002 	mov	x2, #0x0                   	// #0
   a753c:	14000003 	b	a7548 <strstr+0x38>
   a7540:	38e26823 	ldrsb	w3, [x1, x2]
   a7544:	34ffff03 	cbz	w3, a7524 <strstr+0x14>
   a7548:	38e26804 	ldrsb	w4, [x0, x2]
   a754c:	91000442 	add	x2, x2, #0x1
   a7550:	6b03009f 	cmp	w4, w3
   a7554:	54ffff60 	b.eq	a7540 <strstr+0x30>  // b.none
   a7558:	17fffff4 	b	a7528 <strstr+0x18>
   a755c:	d2800000 	mov	x0, #0x0                   	// #0
   a7560:	d65f03c0 	ret
   a7564:	d503201f 	nop
   a7568:	d503201f 	nop
   a756c:	d503201f 	nop

00000000000a7570 <strtok_r>:
   a7570:	aa0003e7 	mov	x7, x0
   a7574:	b4000440 	cbz	x0, a75fc <strtok_r+0x8c>
   a7578:	39c000e4 	ldrsb	w4, [x7]
   a757c:	340004a4 	cbz	w4, a7610 <strtok_r+0xa0>
   a7580:	39c00026 	ldrsb	w6, [x1]
   a7584:	34000166 	cbz	w6, a75b0 <strtok_r+0x40>
   a7588:	aa0103e5 	mov	x5, x1
   a758c:	2a0603e3 	mov	w3, w6
   a7590:	14000003 	b	a759c <strtok_r+0x2c>
   a7594:	38c01ca3 	ldrsb	w3, [x5, #1]!
   a7598:	340000c3 	cbz	w3, a75b0 <strtok_r+0x40>
   a759c:	6b04007f 	cmp	w3, w4
   a75a0:	54ffffa1 	b.ne	a7594 <strtok_r+0x24>  // b.any
   a75a4:	38c01ce4 	ldrsb	w4, [x7, #1]!
   a75a8:	35ffff06 	cbnz	w6, a7588 <strtok_r+0x18>
   a75ac:	d503201f 	nop
   a75b0:	34000304 	cbz	w4, a7610 <strtok_r+0xa0>
   a75b4:	aa0703e8 	mov	x8, x7
   a75b8:	34000186 	cbz	w6, a75e8 <strtok_r+0x78>
   a75bc:	aa0103e5 	mov	x5, x1
   a75c0:	2a0603e3 	mov	w3, w6
   a75c4:	14000003 	b	a75d0 <strtok_r+0x60>
   a75c8:	38c01ca3 	ldrsb	w3, [x5, #1]!
   a75cc:	340000e3 	cbz	w3, a75e8 <strtok_r+0x78>
   a75d0:	6b03009f 	cmp	w4, w3
   a75d4:	54ffffa1 	b.ne	a75c8 <strtok_r+0x58>  // b.any
   a75d8:	aa0703e0 	mov	x0, x7
   a75dc:	3800151f 	strb	wzr, [x8], #1
   a75e0:	f9000048 	str	x8, [x2]
   a75e4:	d65f03c0 	ret
   a75e8:	38c01d04 	ldrsb	w4, [x8, #1]!
   a75ec:	35fffe64 	cbnz	w4, a75b8 <strtok_r+0x48>
   a75f0:	aa0703e0 	mov	x0, x7
   a75f4:	f9000048 	str	x8, [x2]
   a75f8:	17fffffb 	b	a75e4 <strtok_r+0x74>
   a75fc:	f9400047 	ldr	x7, [x2]
   a7600:	d2800000 	mov	x0, #0x0                   	// #0
   a7604:	b4ffff07 	cbz	x7, a75e4 <strtok_r+0x74>
   a7608:	39c000e4 	ldrsb	w4, [x7]
   a760c:	35fffba4 	cbnz	w4, a7580 <strtok_r+0x10>
   a7610:	d2800000 	mov	x0, #0x0                   	// #0
   a7614:	f900005f 	str	xzr, [x2]
   a7618:	d65f03c0 	ret
   a761c:	d503201f 	nop

00000000000a7620 <strtoul>:
   a7620:	aa0003e4 	mov	x4, x0
   a7624:	b4000041 	cbz	x1, a762c <strtoul+0xc>
   a7628:	f9000020 	str	x0, [x1]
   a762c:	51000843 	sub	w3, w2, #0x2
   a7630:	d2800000 	mov	x0, #0x0                   	// #0
   a7634:	7100887f 	cmp	w3, #0x22
   a7638:	7a408844 	ccmp	w2, #0x0, #0x4, hi	// hi = pmore
   a763c:	54000941 	b.ne	a7764 <strtoul+0x144>  // b.any
   a7640:	39c00083 	ldrsb	w3, [x4]
   a7644:	51002460 	sub	w0, w3, #0x9
   a7648:	7100807f 	cmp	w3, #0x20
   a764c:	12001c00 	and	w0, w0, #0xff
   a7650:	54000060 	b.eq	a765c <strtoul+0x3c>  // b.none
   a7654:	7100101f 	cmp	w0, #0x4
   a7658:	54000068 	b.hi	a7664 <strtoul+0x44>  // b.pmore
   a765c:	91000484 	add	x4, x4, #0x1
   a7660:	17fffff8 	b	a7640 <strtoul+0x20>
   a7664:	7100ac7f 	cmp	w3, #0x2b
   a7668:	540002a0 	b.eq	a76bc <strtoul+0x9c>  // b.none
   a766c:	7100b47f 	cmp	w3, #0x2d
   a7670:	52800009 	mov	w9, #0x0                   	// #0
   a7674:	540002a1 	b.ne	a76c8 <strtoul+0xa8>  // b.any
   a7678:	39c00483 	ldrsb	w3, [x4, #1]
   a767c:	52800029 	mov	w9, #0x1                   	// #1
   a7680:	91000484 	add	x4, x4, #0x1
   a7684:	7100c07f 	cmp	w3, #0x30
   a7688:	54000241 	b.ne	a76d0 <strtoul+0xb0>  // b.any
   a768c:	39c00483 	ldrsb	w3, [x4, #1]
   a7690:	91000485 	add	x5, x4, #0x1
   a7694:	121a7860 	and	w0, w3, #0xffffffdf
   a7698:	7101601f 	cmp	w0, #0x58
   a769c:	54000661 	b.ne	a7768 <strtoul+0x148>  // b.any
   a76a0:	721b785f 	tst	w2, #0xffffffef
   a76a4:	d2800000 	mov	x0, #0x0                   	// #0
   a76a8:	540005e1 	b.ne	a7764 <strtoul+0x144>  // b.any
   a76ac:	39c00883 	ldrsb	w3, [x4, #2]
   a76b0:	52800202 	mov	w2, #0x10                  	// #16
   a76b4:	91000884 	add	x4, x4, #0x2
   a76b8:	14000009 	b	a76dc <strtoul+0xbc>
   a76bc:	39c00483 	ldrsb	w3, [x4, #1]
   a76c0:	52800009 	mov	w9, #0x0                   	// #0
   a76c4:	91000484 	add	x4, x4, #0x1
   a76c8:	7100c07f 	cmp	w3, #0x30
   a76cc:	54fffe00 	b.eq	a768c <strtoul+0x6c>  // b.none
   a76d0:	7100005f 	cmp	w2, #0x0
   a76d4:	52800140 	mov	w0, #0xa                   	// #10
   a76d8:	1a801042 	csel	w2, w2, w0, ne	// ne = any
   a76dc:	7100bc7f 	cmp	w3, #0x2f
   a76e0:	2a0303e5 	mov	w5, w3
   a76e4:	5400058d 	b.le	a7794 <strtoul+0x174>
   a76e8:	52800027 	mov	w7, #0x1                   	// #1
   a76ec:	d2800006 	mov	x6, #0x0                   	// #0
   a76f0:	93407c48 	sxtw	x8, w2
   a76f4:	1400000a 	b	a771c <strtoul+0xfc>
   a76f8:	9b060100 	madd	x0, x8, x6, x0
   a76fc:	52800007 	mov	w7, #0x0                   	// #0
   a7700:	eb06001f 	cmp	x0, x6
   a7704:	aa0003e6 	mov	x6, x0
   a7708:	540003a3 	b.cc	a777c <strtoul+0x15c>  // b.lo, b.ul, b.last
   a770c:	38c01c85 	ldrsb	w5, [x4, #1]!
   a7710:	7100bcbf 	cmp	w5, #0x2f
   a7714:	2a0503e3 	mov	w3, w5
   a7718:	540003ad 	b.le	a778c <strtoul+0x16c>
   a771c:	51018463 	sub	w3, w3, #0x61
   a7720:	510080a0 	sub	w0, w5, #0x20
   a7724:	7100687f 	cmp	w3, #0x1a
   a7728:	1a853005 	csel	w5, w0, w5, cc	// cc = lo, ul, last
   a772c:	51001ca0 	sub	w0, w5, #0x7
   a7730:	710100bf 	cmp	w5, #0x40
   a7734:	1a85c005 	csel	w5, w0, w5, gt
   a7738:	5100c0a5 	sub	w5, w5, #0x30
   a773c:	6b0200bf 	cmp	w5, w2
   a7740:	93407ca0 	sxtw	x0, w5
   a7744:	54fffdab 	b.lt	a76f8 <strtoul+0xd8>  // b.tstop
   a7748:	520000e2 	eor	w2, w7, #0x1
   a774c:	aa0603e0 	mov	x0, x6
   a7750:	0a090042 	and	w2, w2, w9
   a7754:	b4000041 	cbz	x1, a775c <strtoul+0x13c>
   a7758:	f9000024 	str	x4, [x1]
   a775c:	7100005f 	cmp	w2, #0x0
   a7760:	da800400 	cneg	x0, x0, ne	// ne = any
   a7764:	d65f03c0 	ret
   a7768:	7100005f 	cmp	w2, #0x0
   a776c:	52800100 	mov	w0, #0x8                   	// #8
   a7770:	1a801042 	csel	w2, w2, w0, ne	// ne = any
   a7774:	aa0503e4 	mov	x4, x5
   a7778:	17ffffd9 	b	a76dc <strtoul+0xbc>
   a777c:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   a7780:	b4ffff21 	cbz	x1, a7764 <strtoul+0x144>
   a7784:	f9000024 	str	x4, [x1]
   a7788:	d65f03c0 	ret
   a778c:	52800022 	mov	w2, #0x1                   	// #1
   a7790:	17fffff0 	b	a7750 <strtoul+0x130>
   a7794:	d2800000 	mov	x0, #0x0                   	// #0
   a7798:	b4fffe61 	cbz	x1, a7764 <strtoul+0x144>
   a779c:	f9000024 	str	x4, [x1]
   a77a0:	17fffffa 	b	a7788 <strtoul+0x168>
   a77a4:	d503201f 	nop
   a77a8:	d503201f 	nop
   a77ac:	d503201f 	nop

00000000000a77b0 <strtoull>:
   a77b0:	17ffff9c 	b	a7620 <strtoul>
   a77b4:	d503201f 	nop
   a77b8:	d503201f 	nop
   a77bc:	d503201f 	nop

00000000000a77c0 <atoi>:
   a77c0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a77c4:	52800142 	mov	w2, #0xa                   	// #10
   a77c8:	910003fd 	mov	x29, sp
   a77cc:	d2800001 	mov	x1, #0x0                   	// #0
   a77d0:	97ffff94 	bl	a7620 <strtoul>
   a77d4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a77d8:	d65f03c0 	ret
   a77dc:	d503201f 	nop

00000000000a77e0 <char2int>:
   a77e0:	13001c00 	sxtb	w0, w0
   a77e4:	d65f03c0 	ret

00000000000a77e8 <memset>:
   a77e8:	f240081f 	tst	x0, #0x7
   a77ec:	540001c1 	b.ne	a7824 <memset+0x3c>  // b.any
   a77f0:	f100405f 	cmp	x2, #0x10
   a77f4:	54000243 	b.cc	a783c <memset+0x54>  // b.lo, b.ul, b.last
   a77f8:	2a012028 	orr	w8, w1, w1, lsl #8
   a77fc:	2a084109 	orr	w9, w8, w8, lsl #16
   a7800:	aa0003ea 	mov	x10, x0
   a7804:	29002549 	stp	w9, w9, [x10]
   a7808:	91004148 	add	x8, x10, #0x10
   a780c:	d1004042 	sub	x2, x2, #0x10
   a7810:	f1003c5f 	cmp	x2, #0xf
   a7814:	29012549 	stp	w9, w9, [x10, #8]
   a7818:	aa0803ea 	mov	x10, x8
   a781c:	54ffff48 	b.hi	a7804 <memset+0x1c>  // b.pmore
   a7820:	14000002 	b	a7828 <memset+0x40>
   a7824:	aa0003e8 	mov	x8, x0
   a7828:	b4000082 	cbz	x2, a7838 <memset+0x50>
   a782c:	f1000442 	subs	x2, x2, #0x1
   a7830:	38001501 	strb	w1, [x8], #1
   a7834:	54ffffc1 	b.ne	a782c <memset+0x44>  // b.any
   a7838:	d65f03c0 	ret
   a783c:	aa0003e8 	mov	x8, x0
   a7840:	b5ffff62 	cbnz	x2, a782c <memset+0x44>
   a7844:	17fffffd 	b	a7838 <memset+0x50>

00000000000a7848 <memcpy>:
   a7848:	aa0003e8 	mov	x8, x0
   a784c:	f101fc5f 	cmp	x2, #0x7f
   a7850:	540001c9 	b.ls	a7888 <memcpy+0x40>  // b.plast
   a7854:	f240083f 	tst	x1, #0x7
   a7858:	54000181 	b.ne	a7888 <memcpy+0x40>  // b.any
   a785c:	f240083f 	tst	x1, #0x7
   a7860:	54000141 	b.ne	a7888 <memcpy+0x40>  // b.any
   a7864:	d2800803 	mov	x3, #0x40                  	// #64
   a7868:	a8c11424 	ldp	x4, x5, [x1], #16
   a786c:	a8c11c26 	ldp	x6, x7, [x1], #16
   a7870:	d1008042 	sub	x2, x2, #0x20
   a7874:	a8811404 	stp	x4, x5, [x0], #16
   a7878:	a8811c06 	stp	x6, x7, [x0], #16
   a787c:	f8a36821 	prfm	pldl1strm, [x1, x3]
   a7880:	f1007c5f 	cmp	x2, #0x1f
   a7884:	54ffff28 	b.hi	a7868 <memcpy+0x20>  // b.pmore
   a7888:	f100005f 	cmp	x2, #0x0
   a788c:	540000a0 	b.eq	a78a0 <memcpy+0x58>  // b.none
   a7890:	38401423 	ldrb	w3, [x1], #1
   a7894:	f1000442 	subs	x2, x2, #0x1
   a7898:	38001403 	strb	w3, [x0], #1
   a789c:	54ffffa1 	b.ne	a7890 <memcpy+0x48>  // b.any
   a78a0:	aa0803e0 	mov	x0, x8
   a78a4:	d65f03c0 	ret
	...

00000000000a78b0 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   a78b0:	d65f03c0 	ret
   a78b4:	d503201f 	nop
   a78b8:	d503201f 	nop
   a78bc:	d503201f 	nop

00000000000a78c0 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   a78c0:	d2800301 	mov	x1, #0x18                  	// #24
   a78c4:	1400028f 	b	a8300 <operator delete(void*, unsigned long)>
   a78c8:	d503201f 	nop
   a78cc:	d503201f 	nop

00000000000a78d0 <CVirtualGPIOPin::Write(unsigned int)>:
   a78d0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   a78d4:	910003fd 	mov	x29, sp
   a78d8:	a90153f3 	stp	x19, x20, [sp, #16]
   a78dc:	2a0103f4 	mov	w20, w1
   a78e0:	aa0003f3 	mov	x19, x0
   a78e4:	39402001 	ldrb	w1, [x0, #8]
   a78e8:	b9400c00 	ldr	w0, [x0, #12]
   a78ec:	34000261 	cbz	w1, a7938 <CVirtualGPIOPin::Write(unsigned int)+0x68>
   a78f0:	350006c0 	cbnz	w0, a79c8 <CVirtualGPIOPin::Write(unsigned int)+0xf8>
   a78f4:	52800001 	mov	w1, #0x0                   	// #0
   a78f8:	9100c3e0 	add	x0, sp, #0x30
   a78fc:	97ffd935 	bl	9ddd0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   a7900:	52801042 	mov	w2, #0x82                  	// #130
   a7904:	9100c3e0 	add	x0, sp, #0x30
   a7908:	52900821 	mov	w1, #0x8041                	// #32833
   a790c:	72a00061 	movk	w1, #0x3, lsl #16
   a7910:	52800104 	mov	w4, #0x8                   	// #8
   a7914:	52800283 	mov	w3, #0x14                  	// #20
   a7918:	2908d3e2 	stp	w2, w20, [sp, #68]
   a791c:	9100e3e2 	add	x2, sp, #0x38
   a7920:	97ffd98c 	bl	9df50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a7924:	9100c3e0 	add	x0, sp, #0x30
   a7928:	97ffd92e 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   a792c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a7930:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a7934:	d65f03c0 	ret
   a7938:	2a000280 	orr	w0, w20, w0
   a793c:	7100041f 	cmp	w0, #0x1
   a7940:	54ffff68 	b.hi	a792c <CVirtualGPIOPin::Write(unsigned int)+0x5c>  // b.pmore
   a7944:	a9025bf5 	stp	x21, x22, [sp, #32]
   a7948:	d00000b5 	adrp	x21, bd000 <CNetDevice::s_SpeedString+0x18>
   a794c:	910782b6 	add	x22, x21, #0x1e0
   a7950:	f940f2a0 	ldr	x0, [x21, #480]
   a7954:	b50000a0 	cbnz	x0, a7968 <CVirtualGPIOPin::Write(unsigned int)+0x98>
   a7958:	a94153f3 	ldp	x19, x20, [sp, #16]
   a795c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a7960:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a7964:	d65f03c0 	ret
   a7968:	b9400ac0 	ldr	w0, [x22, #8]
   a796c:	35000440 	cbnz	w0, a79f4 <CVirtualGPIOPin::Write(unsigned int)+0x124>
   a7970:	79402a60 	ldrh	w0, [x19, #20]
   a7974:	b9001274 	str	w20, [x19, #16]
   a7978:	79402e61 	ldrh	w1, [x19, #22]
   a797c:	4b010002 	sub	w2, w0, w1
   a7980:	13003c42 	sxth	w2, w2
   a7984:	7100005f 	cmp	w2, #0x0
   a7988:	540002cd 	b.le	a79e0 <CVirtualGPIOPin::Write(unsigned int)+0x110>
   a798c:	35000134 	cbnz	w20, a79b0 <CVirtualGPIOPin::Write(unsigned int)+0xe0>
   a7990:	11000421 	add	w1, w1, #0x1
   a7994:	12003c21 	and	w1, w1, #0xffff
   a7998:	79002e61 	strh	w1, [x19, #22]
   a799c:	b9400e62 	ldr	w2, [x19, #12]
   a79a0:	2a004020 	orr	w0, w1, w0, lsl #16
   a79a4:	f940f2a3 	ldr	x3, [x21, #480]
   a79a8:	531e7441 	lsl	w1, w2, #2
   a79ac:	b8214860 	str	w0, [x3, w1, uxtw]
   a79b0:	b9400ac0 	ldr	w0, [x22, #8]
   a79b4:	34fffd20 	cbz	w0, a7958 <CVirtualGPIOPin::Write(unsigned int)+0x88>
   a79b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a79bc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a79c0:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a79c4:	1400060f 	b	a9200 <LeaveCritical>
   a79c8:	f0000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   a79cc:	91398021 	add	x1, x1, #0xe60
   a79d0:	a9025bf5 	stp	x21, x22, [sp, #32]
   a79d4:	91006020 	add	x0, x1, #0x18
   a79d8:	52800b62 	mov	w2, #0x5b                  	// #91
   a79dc:	97ffd8d9 	bl	9dd40 <assertion_failed>
   a79e0:	34fffe94 	cbz	w20, a79b0 <CVirtualGPIOPin::Write(unsigned int)+0xe0>
   a79e4:	11000400 	add	w0, w0, #0x1
   a79e8:	12003c00 	and	w0, w0, #0xffff
   a79ec:	79002a60 	strh	w0, [x19, #20]
   a79f0:	17ffffeb 	b	a799c <CVirtualGPIOPin::Write(unsigned int)+0xcc>
   a79f4:	940005d3 	bl	a9140 <EnterCritical>
   a79f8:	17ffffde 	b	a7970 <CVirtualGPIOPin::Write(unsigned int)+0xa0>
   a79fc:	d503201f 	nop

00000000000a7a00 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   a7a00:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   a7a04:	910003fd 	mov	x29, sp
   a7a08:	72001c42 	ands	w2, w2, #0xff
   a7a0c:	7a410822 	ccmp	w1, #0x1, #0x2, eq	// eq = none
   a7a10:	a90153f3 	stp	x19, x20, [sp, #16]
   a7a14:	aa0003f3 	mov	x19, x0
   a7a18:	f0000080 	adrp	x0, ba000 <CursorSymbol+0x188>
   a7a1c:	91394000 	add	x0, x0, #0xe50
   a7a20:	f9000260 	str	x0, [x19]
   a7a24:	39002262 	strb	w2, [x19, #8]
   a7a28:	b9000e61 	str	w1, [x19, #12]
   a7a2c:	b900167f 	str	wzr, [x19, #20]
   a7a30:	54000089 	b.ls	a7a40 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x40>  // b.plast
   a7a34:	a94153f3 	ldp	x19, x20, [sp, #16]
   a7a38:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a7a3c:	d65f03c0 	ret
   a7a40:	f90013f5 	str	x21, [sp, #32]
   a7a44:	d00000b4 	adrp	x20, bd000 <CNetDevice::s_SpeedString+0x18>
   a7a48:	91078295 	add	x21, x20, #0x1e0
   a7a4c:	b9400aa0 	ldr	w0, [x21, #8]
   a7a50:	350001c0 	cbnz	w0, a7a88 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x88>
   a7a54:	f940f280 	ldr	x0, [x20, #480]
   a7a58:	b40001e0 	cbz	x0, a7a94 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x94>
   a7a5c:	b9400e61 	ldr	w1, [x19, #12]
   a7a60:	531e7421 	lsl	w1, w1, #2
   a7a64:	b821481f 	str	wzr, [x0, w1, uxtw]
   a7a68:	b9400aa0 	ldr	w0, [x21, #8]
   a7a6c:	35000460 	cbnz	w0, a7af8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xf8>
   a7a70:	aa1303e0 	mov	x0, x19
   a7a74:	52800001 	mov	w1, #0x0                   	// #0
   a7a78:	a94153f3 	ldp	x19, x20, [sp, #16]
   a7a7c:	f94013f5 	ldr	x21, [sp, #32]
   a7a80:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a7a84:	17ffff93 	b	a78d0 <CVirtualGPIOPin::Write(unsigned int)>
   a7a88:	940005ae 	bl	a9140 <EnterCritical>
   a7a8c:	f940f280 	ldr	x0, [x20, #480]
   a7a90:	b5fffe60 	cbnz	x0, a7a5c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x5c>
   a7a94:	52800020 	mov	w0, #0x1                   	// #1
   a7a98:	9400059e 	bl	a9110 <CMemorySystem::GetCoherentPage(unsigned int)>
   a7a9c:	aa0003e2 	mov	x2, x0
   a7aa0:	52800001 	mov	w1, #0x0                   	// #0
   a7aa4:	9100e3e0 	add	x0, sp, #0x38
   a7aa8:	f900f282 	str	x2, [x20, #480]
   a7aac:	97ffd8c9 	bl	9ddd0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   a7ab0:	f940f285 	ldr	x5, [x20, #480]
   a7ab4:	9100e3e0 	add	x0, sp, #0x38
   a7ab8:	910103e2 	add	x2, sp, #0x40
   a7abc:	52900401 	mov	w1, #0x8020                	// #32800
   a7ac0:	72a00081 	movk	w1, #0x4, lsl #16
   a7ac4:	52800084 	mov	w4, #0x4                   	// #4
   a7ac8:	52800203 	mov	w3, #0x10                  	// #16
   a7acc:	320204a5 	orr	w5, w5, #0xc0000000
   a7ad0:	b9004fe5 	str	w5, [sp, #76]
   a7ad4:	97ffd91f 	bl	9df50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a7ad8:	72001c1f 	tst	w0, #0xff
   a7adc:	540001c0 	b.eq	a7b14 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x114>  // b.none
   a7ae0:	9100e3e0 	add	x0, sp, #0x38
   a7ae4:	97ffd8bf 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   a7ae8:	f940f280 	ldr	x0, [x20, #480]
   a7aec:	b5fffb80 	cbnz	x0, a7a5c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x5c>
   a7af0:	b9400aa0 	ldr	w0, [x21, #8]
   a7af4:	34fffbe0 	cbz	w0, a7a70 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x70>
   a7af8:	940005c2 	bl	a9200 <LeaveCritical>
   a7afc:	aa1303e0 	mov	x0, x19
   a7b00:	52800001 	mov	w1, #0x0                   	// #0
   a7b04:	a94153f3 	ldp	x19, x20, [sp, #16]
   a7b08:	f94013f5 	ldr	x21, [sp, #32]
   a7b0c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a7b10:	17ffff70 	b	a78d0 <CVirtualGPIOPin::Write(unsigned int)>
   a7b14:	910103e2 	add	x2, sp, #0x40
   a7b18:	52800201 	mov	w1, #0x10                  	// #16
   a7b1c:	72a00081 	movk	w1, #0x4, lsl #16
   a7b20:	52800004 	mov	w4, #0x0                   	// #0
   a7b24:	52800203 	mov	w3, #0x10                  	// #16
   a7b28:	9100e3e0 	add	x0, sp, #0x38
   a7b2c:	97ffd909 	bl	9df50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a7b30:	72001c1f 	tst	w0, #0xff
   a7b34:	540000a0 	b.eq	a7b48 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x148>  // b.none
   a7b38:	b9404fe0 	ldr	w0, [sp, #76]
   a7b3c:	92407400 	and	x0, x0, #0x3fffffff
   a7b40:	f900f280 	str	x0, [x20, #480]
   a7b44:	17ffffe7 	b	a7ae0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xe0>
   a7b48:	f900f29f 	str	xzr, [x20, #480]
   a7b4c:	17ffffe5 	b	a7ae0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xe0>

00000000000a7b50 <CVirtualGPIOPin::Invert()>:
   a7b50:	b9401001 	ldr	w1, [x0, #16]
   a7b54:	52000021 	eor	w1, w1, #0x1
   a7b58:	17ffff5e 	b	a78d0 <CVirtualGPIOPin::Write(unsigned int)>
   a7b5c:	00000000 	udf	#0

00000000000a7b60 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   a7b60:	d00000a0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a7b64:	b901e81f 	str	wzr, [x0, #488]
   a7b68:	d65f03c0 	ret
   a7b6c:	00000000 	udf	#0

00000000000a7b70 <ChainBootStub(void const*, unsigned long)>:
   a7b70:	91000c21 	add	x1, x1, #0x3
   a7b74:	d342fc21 	lsr	x1, x1, #2
   a7b78:	b4000181 	cbz	x1, a7ba8 <ChainBootStub(void const*, unsigned long)+0x38>
   a7b7c:	d1420004 	sub	x4, x0, #0x80, lsl #12
   a7b80:	91408021 	add	x1, x1, #0x20, lsl #12
   a7b84:	d1001084 	sub	x4, x4, #0x4
   a7b88:	d37ef421 	lsl	x1, x1, #2
   a7b8c:	d2a00100 	mov	x0, #0x80000               	// #524288
   a7b90:	aa0003e2 	mov	x2, x0
   a7b94:	91001000 	add	x0, x0, #0x4
   a7b98:	b8646803 	ldr	w3, [x0, x4]
   a7b9c:	eb01001f 	cmp	x0, x1
   a7ba0:	b9000043 	str	w3, [x2]
   a7ba4:	54ffff61 	b.ne	a7b90 <ChainBootStub(void const*, unsigned long)+0x20>  // b.any
   a7ba8:	d508751f 	ic	iallu
   a7bac:	d5033f9f 	dsb	sy
   a7bb0:	d5033fdf 	isb
   a7bb4:	d2a00100 	mov	x0, #0x80000               	// #524288
   a7bb8:	aa0003f0 	mov	x16, x0
   a7bbc:	d61f0200 	br	x16

00000000000a7bc0 <EnableChainBoot>:
   a7bc0:	aa0003e6 	mov	x6, x0
   a7bc4:	aa0103e5 	mov	x5, x1
   a7bc8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a7bcc:	d00000a3 	adrp	x3, bd000 <CNetDevice::s_SpeedString+0x18>
   a7bd0:	9107c064 	add	x4, x3, #0x1f0
   a7bd4:	90000001 	adrp	x1, a7000 <CTimer::SimpleusDelay(unsigned int)+0x20>
   a7bd8:	910003fd 	mov	x29, sp
   a7bdc:	d2808002 	mov	x2, #0x400                 	// #1024
   a7be0:	912dc021 	add	x1, x1, #0xb70
   a7be4:	f900f866 	str	x6, [x3, #496]
   a7be8:	b27623e0 	mov	x0, #0x7fc00               	// #523264
   a7bec:	f9000485 	str	x5, [x4, #8]
   a7bf0:	97ffff16 	bl	a7848 <memcpy>
   a7bf4:	d508751f 	ic	iallu
   a7bf8:	d5033f9f 	dsb	sy
   a7bfc:	d5033fdf 	isb
   a7c00:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a7c04:	d65f03c0 	ret
   a7c08:	d503201f 	nop
   a7c0c:	d503201f 	nop

00000000000a7c10 <IsChainBootEnabled>:
   a7c10:	d00000a0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a7c14:	f940f800 	ldr	x0, [x0, #496]
   a7c18:	f100001f 	cmp	x0, #0x0
   a7c1c:	1a9f07e0 	cset	w0, ne	// ne = any
   a7c20:	d65f03c0 	ret
   a7c24:	d503201f 	nop
   a7c28:	d503201f 	nop
   a7c2c:	d503201f 	nop

00000000000a7c30 <DoChainBoot>:
   a7c30:	d4000002 	hvc	#0x0
   a7c34:	d00000a0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a7c38:	9107c001 	add	x1, x0, #0x1f0
   a7c3c:	b27623e2 	mov	x2, #0x7fc00               	// #523264
   a7c40:	f940f800 	ldr	x0, [x0, #496]
   a7c44:	aa0203f0 	mov	x16, x2
   a7c48:	f9400421 	ldr	x1, [x1, #8]
   a7c4c:	d61f0200 	br	x16

00000000000a7c50 <CMACAddress::CMACAddress()>:
   a7c50:	3900001f 	strb	wzr, [x0]
   a7c54:	d65f03c0 	ret
   a7c58:	d503201f 	nop
   a7c5c:	d503201f 	nop

00000000000a7c60 <CMACAddress::CMACAddress(unsigned char const*)>:
   a7c60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a7c64:	910003fd 	mov	x29, sp
   a7c68:	f9000bf3 	str	x19, [sp, #16]
   a7c6c:	b4000141 	cbz	x1, a7c94 <CMACAddress::CMACAddress(unsigned char const*)+0x34>
   a7c70:	aa0003f3 	mov	x19, x0
   a7c74:	d28000c2 	mov	x2, #0x6                   	// #6
   a7c78:	91000400 	add	x0, x0, #0x1
   a7c7c:	97fffef3 	bl	a7848 <memcpy>
   a7c80:	52800020 	mov	w0, #0x1                   	// #1
   a7c84:	39000260 	strb	w0, [x19]
   a7c88:	f9400bf3 	ldr	x19, [sp, #16]
   a7c8c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a7c90:	d65f03c0 	ret
   a7c94:	d0000061 	adrp	x1, b5000 <_etext+0x4158>
   a7c98:	d0000060 	adrp	x0, b5000 <_etext+0x4158>
   a7c9c:	91184021 	add	x1, x1, #0x610
   a7ca0:	91188000 	add	x0, x0, #0x620
   a7ca4:	52800682 	mov	w2, #0x34                  	// #52
   a7ca8:	97ffd826 	bl	9dd40 <assertion_failed>
   a7cac:	d503201f 	nop

00000000000a7cb0 <CMACAddress::~CMACAddress()>:
   a7cb0:	d65f03c0 	ret
   a7cb4:	d503201f 	nop
   a7cb8:	d503201f 	nop
   a7cbc:	d503201f 	nop

00000000000a7cc0 <CMACAddress::operator==(CMACAddress const&) const>:
   a7cc0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a7cc4:	910003fd 	mov	x29, sp
   a7cc8:	39400002 	ldrb	w2, [x0]
   a7ccc:	34000162 	cbz	w2, a7cf8 <CMACAddress::operator==(CMACAddress const&) const+0x38>
   a7cd0:	39400022 	ldrb	w2, [x1]
   a7cd4:	91000400 	add	x0, x0, #0x1
   a7cd8:	340001c2 	cbz	w2, a7d10 <CMACAddress::operator==(CMACAddress const&) const+0x50>
   a7cdc:	91000421 	add	x1, x1, #0x1
   a7ce0:	d28000c2 	mov	x2, #0x6                   	// #6
   a7ce4:	97fffd1f 	bl	a7160 <memcmp>
   a7ce8:	7100001f 	cmp	w0, #0x0
   a7cec:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a7cf0:	1a9f17e0 	cset	w0, eq	// eq = none
   a7cf4:	d65f03c0 	ret
   a7cf8:	d0000061 	adrp	x1, b5000 <_etext+0x4158>
   a7cfc:	b0000060 	adrp	x0, b4000 <_etext+0x3158>
   a7d00:	91184021 	add	x1, x1, #0x610
   a7d04:	911b4000 	add	x0, x0, #0x6d0
   a7d08:	52800522 	mov	w2, #0x29                  	// #41
   a7d0c:	97ffd80d 	bl	9dd40 <assertion_failed>
   a7d10:	d0000061 	adrp	x1, b5000 <_etext+0x4158>
   a7d14:	b0000060 	adrp	x0, b4000 <_etext+0x3158>
   a7d18:	91184021 	add	x1, x1, #0x610
   a7d1c:	911b4000 	add	x0, x0, #0x6d0
   a7d20:	52800822 	mov	w2, #0x41                  	// #65
   a7d24:	97ffd807 	bl	9dd40 <assertion_failed>
   a7d28:	d503201f 	nop
   a7d2c:	d503201f 	nop

00000000000a7d30 <CMACAddress::operator!=(CMACAddress const&) const>:
   a7d30:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a7d34:	910003fd 	mov	x29, sp
   a7d38:	39400002 	ldrb	w2, [x0]
   a7d3c:	34000162 	cbz	w2, a7d68 <CMACAddress::operator!=(CMACAddress const&) const+0x38>
   a7d40:	39400022 	ldrb	w2, [x1]
   a7d44:	91000400 	add	x0, x0, #0x1
   a7d48:	340001c2 	cbz	w2, a7d80 <CMACAddress::operator!=(CMACAddress const&) const+0x50>
   a7d4c:	91000421 	add	x1, x1, #0x1
   a7d50:	d28000c2 	mov	x2, #0x6                   	// #6
   a7d54:	97fffd03 	bl	a7160 <memcmp>
   a7d58:	7100001f 	cmp	w0, #0x0
   a7d5c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a7d60:	1a9f07e0 	cset	w0, ne	// ne = any
   a7d64:	d65f03c0 	ret
   a7d68:	d0000061 	adrp	x1, b5000 <_etext+0x4158>
   a7d6c:	b0000060 	adrp	x0, b4000 <_etext+0x3158>
   a7d70:	91184021 	add	x1, x1, #0x610
   a7d74:	911b4000 	add	x0, x0, #0x6d0
   a7d78:	52800522 	mov	w2, #0x29                  	// #41
   a7d7c:	97ffd7f1 	bl	9dd40 <assertion_failed>
   a7d80:	d0000061 	adrp	x1, b5000 <_etext+0x4158>
   a7d84:	b0000060 	adrp	x0, b4000 <_etext+0x3158>
   a7d88:	91184021 	add	x1, x1, #0x610
   a7d8c:	911b4000 	add	x0, x0, #0x6d0
   a7d90:	52800822 	mov	w2, #0x41                  	// #65
   a7d94:	97ffd7eb 	bl	9dd40 <assertion_failed>
   a7d98:	d503201f 	nop
   a7d9c:	d503201f 	nop

00000000000a7da0 <CMACAddress::Set(unsigned char const*)>:
   a7da0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a7da4:	910003fd 	mov	x29, sp
   a7da8:	f9000bf3 	str	x19, [sp, #16]
   a7dac:	b4000141 	cbz	x1, a7dd4 <CMACAddress::Set(unsigned char const*)+0x34>
   a7db0:	aa0003f3 	mov	x19, x0
   a7db4:	d28000c2 	mov	x2, #0x6                   	// #6
   a7db8:	91000400 	add	x0, x0, #0x1
   a7dbc:	97fffea3 	bl	a7848 <memcpy>
   a7dc0:	52800020 	mov	w0, #0x1                   	// #1
   a7dc4:	39000260 	strb	w0, [x19]
   a7dc8:	f9400bf3 	ldr	x19, [sp, #16]
   a7dcc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a7dd0:	d65f03c0 	ret
   a7dd4:	d0000061 	adrp	x1, b5000 <_etext+0x4158>
   a7dd8:	d0000060 	adrp	x0, b5000 <_etext+0x4158>
   a7ddc:	91184021 	add	x1, x1, #0x610
   a7de0:	91188000 	add	x0, x0, #0x620
   a7de4:	52800682 	mov	w2, #0x34                  	// #52
   a7de8:	97ffd7d6 	bl	9dd40 <assertion_failed>
   a7dec:	d503201f 	nop

00000000000a7df0 <CMACAddress::SetBroadcast()>:
   a7df0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a7df4:	910003fd 	mov	x29, sp
   a7df8:	d28000c2 	mov	x2, #0x6                   	// #6
   a7dfc:	52801fe1 	mov	w1, #0xff                  	// #255
   a7e00:	f9000bf3 	str	x19, [sp, #16]
   a7e04:	aa0003f3 	mov	x19, x0
   a7e08:	91000400 	add	x0, x0, #0x1
   a7e0c:	97fffe77 	bl	a77e8 <memset>
   a7e10:	52800020 	mov	w0, #0x1                   	// #1
   a7e14:	39000260 	strb	w0, [x19]
   a7e18:	f9400bf3 	ldr	x19, [sp, #16]
   a7e1c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a7e20:	d65f03c0 	ret
   a7e24:	d503201f 	nop
   a7e28:	d503201f 	nop
   a7e2c:	d503201f 	nop

00000000000a7e30 <CMACAddress::Get() const>:
   a7e30:	39400001 	ldrb	w1, [x0]
   a7e34:	34000061 	cbz	w1, a7e40 <CMACAddress::Get() const+0x10>
   a7e38:	91000400 	add	x0, x0, #0x1
   a7e3c:	d65f03c0 	ret
   a7e40:	d0000061 	adrp	x1, b5000 <_etext+0x4158>
   a7e44:	b0000060 	adrp	x0, b4000 <_etext+0x3158>
   a7e48:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a7e4c:	91184021 	add	x1, x1, #0x610
   a7e50:	910003fd 	mov	x29, sp
   a7e54:	911b4000 	add	x0, x0, #0x6d0
   a7e58:	52800822 	mov	w2, #0x41                  	// #65
   a7e5c:	97ffd7b9 	bl	9dd40 <assertion_failed>

00000000000a7e60 <CMACAddress::CopyTo(unsigned char*) const>:
   a7e60:	aa0003e2 	mov	x2, x0
   a7e64:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a7e68:	aa0103e0 	mov	x0, x1
   a7e6c:	910003fd 	mov	x29, sp
   a7e70:	39400041 	ldrb	w1, [x2]
   a7e74:	340000c1 	cbz	w1, a7e8c <CMACAddress::CopyTo(unsigned char*) const+0x2c>
   a7e78:	b4000160 	cbz	x0, a7ea4 <CMACAddress::CopyTo(unsigned char*) const+0x44>
   a7e7c:	91000441 	add	x1, x2, #0x1
   a7e80:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a7e84:	d28000c2 	mov	x2, #0x6                   	// #6
   a7e88:	17fffe70 	b	a7848 <memcpy>
   a7e8c:	d0000061 	adrp	x1, b5000 <_etext+0x4158>
   a7e90:	b0000060 	adrp	x0, b4000 <_etext+0x3158>
   a7e94:	91184021 	add	x1, x1, #0x610
   a7e98:	911b4000 	add	x0, x0, #0x6d0
   a7e9c:	528008e2 	mov	w2, #0x47                  	// #71
   a7ea0:	97ffd7a8 	bl	9dd40 <assertion_failed>
   a7ea4:	d0000061 	adrp	x1, b5000 <_etext+0x4158>
   a7ea8:	d0000040 	adrp	x0, b1000 <_etext+0x158>
   a7eac:	91184021 	add	x1, x1, #0x610
   a7eb0:	911f6000 	add	x0, x0, #0x7d8
   a7eb4:	52800902 	mov	w2, #0x48                  	// #72
   a7eb8:	97ffd7a2 	bl	9dd40 <assertion_failed>
   a7ebc:	d503201f 	nop

00000000000a7ec0 <CMACAddress::IsBroadcast() const>:
   a7ec0:	aa0003e1 	mov	x1, x0
   a7ec4:	91001c03 	add	x3, x0, #0x7
   a7ec8:	38401420 	ldrb	w0, [x1], #1
   a7ecc:	34000140 	cbz	w0, a7ef4 <CMACAddress::IsBroadcast() const+0x34>
   a7ed0:	39400022 	ldrb	w2, [x1]
   a7ed4:	7103fc5f 	cmp	w2, #0xff
   a7ed8:	540000a1 	b.ne	a7eec <CMACAddress::IsBroadcast() const+0x2c>  // b.any
   a7edc:	91000421 	add	x1, x1, #0x1
   a7ee0:	eb03003f 	cmp	x1, x3
   a7ee4:	54ffff61 	b.ne	a7ed0 <CMACAddress::IsBroadcast() const+0x10>  // b.any
   a7ee8:	d65f03c0 	ret
   a7eec:	52800000 	mov	w0, #0x0                   	// #0
   a7ef0:	d65f03c0 	ret
   a7ef4:	d0000061 	adrp	x1, b5000 <_etext+0x4158>
   a7ef8:	b0000060 	adrp	x0, b4000 <_etext+0x3158>
   a7efc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a7f00:	91184021 	add	x1, x1, #0x610
   a7f04:	910003fd 	mov	x29, sp
   a7f08:	911b4000 	add	x0, x0, #0x6d0
   a7f0c:	528009c2 	mov	w2, #0x4e                  	// #78
   a7f10:	97ffd78c 	bl	9dd40 <assertion_failed>
   a7f14:	d503201f 	nop
   a7f18:	d503201f 	nop
   a7f1c:	d503201f 	nop

00000000000a7f20 <CMACAddress::GetSize() const>:
   a7f20:	528000c0 	mov	w0, #0x6                   	// #6
   a7f24:	d65f03c0 	ret
   a7f28:	d503201f 	nop
   a7f2c:	d503201f 	nop

00000000000a7f30 <CMACAddress::Format(CString*) const>:
   a7f30:	aa0003e2 	mov	x2, x0
   a7f34:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a7f38:	aa0103e0 	mov	x0, x1
   a7f3c:	910003fd 	mov	x29, sp
   a7f40:	39400041 	ldrb	w1, [x2]
   a7f44:	34000181 	cbz	w1, a7f74 <CMACAddress::Format(CString*) const+0x44>
   a7f48:	b4000220 	cbz	x0, a7f8c <CMACAddress::Format(CString*) const+0x5c>
   a7f4c:	d0000061 	adrp	x1, b5000 <_etext+0x4158>
   a7f50:	39401847 	ldrb	w7, [x2, #6]
   a7f54:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a7f58:	91190021 	add	x1, x1, #0x640
   a7f5c:	39401446 	ldrb	w6, [x2, #5]
   a7f60:	39401045 	ldrb	w5, [x2, #4]
   a7f64:	39400c44 	ldrb	w4, [x2, #3]
   a7f68:	39400843 	ldrb	w3, [x2, #2]
   a7f6c:	39400442 	ldrb	w2, [x2, #1]
   a7f70:	17fff7f0 	b	a5f30 <CString::Format(char const*, ...)>
   a7f74:	d0000061 	adrp	x1, b5000 <_etext+0x4158>
   a7f78:	b0000060 	adrp	x0, b4000 <_etext+0x3158>
   a7f7c:	91184021 	add	x1, x1, #0x610
   a7f80:	911b4000 	add	x0, x0, #0x6d0
   a7f84:	52800c42 	mov	w2, #0x62                  	// #98
   a7f88:	97ffd76e 	bl	9dd40 <assertion_failed>
   a7f8c:	d0000061 	adrp	x1, b5000 <_etext+0x4158>
   a7f90:	d0000060 	adrp	x0, b5000 <_etext+0x4158>
   a7f94:	91184021 	add	x1, x1, #0x610
   a7f98:	9118c000 	add	x0, x0, #0x630
   a7f9c:	52800c62 	mov	w2, #0x63                  	// #99
   a7fa0:	97ffd768 	bl	9dd40 <assertion_failed>
	...

00000000000a7fb0 <CNetDevice::AddNetDevice()>:
   a7fb0:	d00000a1 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   a7fb4:	91080023 	add	x3, x1, #0x200
   a7fb8:	b9420022 	ldr	w2, [x1, #512]
   a7fbc:	7100105f 	cmp	w2, #0x4
   a7fc0:	540000a8 	b.hi	a7fd4 <CNetDevice::AddNetDevice()+0x24>  // b.pmore
   a7fc4:	91002063 	add	x3, x3, #0x8
   a7fc8:	11000444 	add	w4, w2, #0x1
   a7fcc:	b9020024 	str	w4, [x1, #512]
   a7fd0:	f8225860 	str	x0, [x3, w2, uxtw #3]
   a7fd4:	d65f03c0 	ret
   a7fd8:	d503201f 	nop
   a7fdc:	d503201f 	nop

00000000000a7fe0 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>:
   a7fe0:	7100141f 	cmp	w0, #0x5
   a7fe4:	540000ac 	b.gt	a7ff8 <CNetDevice::GetSpeedString(TNetDeviceSpeed)+0x18>
   a7fe8:	b00000a1 	adrp	x1, bc000 <font_data+0x9a8>
   a7fec:	913fa021 	add	x1, x1, #0xfe8
   a7ff0:	f860d820 	ldr	x0, [x1, w0, sxtw #3]
   a7ff4:	d65f03c0 	ret
   a7ff8:	d0000060 	adrp	x0, b5000 <_etext+0x4158>
   a7ffc:	91198000 	add	x0, x0, #0x660
   a8000:	d65f03c0 	ret
   a8004:	d503201f 	nop
   a8008:	d503201f 	nop
   a800c:	d503201f 	nop

00000000000a8010 <CNetDevice::GetNetDevice(unsigned int)>:
   a8010:	b00000a1 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   a8014:	91080022 	add	x2, x1, #0x200
   a8018:	b9420021 	ldr	w1, [x1, #512]
   a801c:	6b00003f 	cmp	w1, w0
   a8020:	54000089 	b.ls	a8030 <CNetDevice::GetNetDevice(unsigned int)+0x20>  // b.plast
   a8024:	91002042 	add	x2, x2, #0x8
   a8028:	f8605840 	ldr	x0, [x2, w0, uxtw #3]
   a802c:	d65f03c0 	ret
   a8030:	d2800000 	mov	x0, #0x0                   	// #0
   a8034:	d65f03c0 	ret
   a8038:	d503201f 	nop
   a803c:	d503201f 	nop

00000000000a8040 <CNetDevice::GetNetDevice(TNetDeviceType)>:
   a8040:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a8044:	910003fd 	mov	x29, sp
   a8048:	a9025bf5 	stp	x21, x22, [sp, #32]
   a804c:	b00000b6 	adrp	x22, bd000 <CNetDevice::s_SpeedString+0x18>
   a8050:	b94202c1 	ldr	w1, [x22, #512]
   a8054:	a90153f3 	stp	x19, x20, [sp, #16]
   a8058:	34000461 	cbz	w1, a80e4 <CNetDevice::GetNetDevice(TNetDeviceType)+0xa4>
   a805c:	910802d6 	add	x22, x22, #0x200
   a8060:	2a0003f5 	mov	w21, w0
   a8064:	d2800013 	mov	x19, #0x0                   	// #0
   a8068:	a90363f7 	stp	x23, x24, [sp, #48]
   a806c:	90ffff97 	adrp	x23, 98000 <CLAN7800Device::Configure()+0x90>
   a8070:	911102f7 	add	x23, x23, #0x440
   a8074:	910022d8 	add	x24, x22, #0x8
   a8078:	14000006 	b	a8090 <CNetDevice::GetNetDevice(TNetDeviceType)+0x50>
   a807c:	6b15001f 	cmp	w0, w21
   a8080:	54000240 	b.eq	a80c8 <CNetDevice::GetNetDevice(TNetDeviceType)+0x88>  // b.none
   a8084:	b94002c0 	ldr	w0, [x22]
   a8088:	6b13001f 	cmp	w0, w19
   a808c:	540002a9 	b.ls	a80e0 <CNetDevice::GetNetDevice(TNetDeviceType)+0xa0>  // b.plast
   a8090:	f8737b14 	ldr	x20, [x24, x19, lsl #3]
   a8094:	71000abf 	cmp	w21, #0x2
   a8098:	91000673 	add	x19, x19, #0x1
   a809c:	b4000234 	cbz	x20, a80e0 <CNetDevice::GetNetDevice(TNetDeviceType)+0xa0>
   a80a0:	54000140 	b.eq	a80c8 <CNetDevice::GetNetDevice(TNetDeviceType)+0x88>  // b.none
   a80a4:	f9400281 	ldr	x1, [x20]
   a80a8:	52800000 	mov	w0, #0x0                   	// #0
   a80ac:	f9400821 	ldr	x1, [x1, #16]
   a80b0:	eb17003f 	cmp	x1, x23
   a80b4:	54fffe40 	b.eq	a807c <CNetDevice::GetNetDevice(TNetDeviceType)+0x3c>  // b.none
   a80b8:	aa1403e0 	mov	x0, x20
   a80bc:	d63f0020 	blr	x1
   a80c0:	6b15001f 	cmp	w0, w21
   a80c4:	54fffe01 	b.ne	a8084 <CNetDevice::GetNetDevice(TNetDeviceType)+0x44>  // b.any
   a80c8:	aa1403e0 	mov	x0, x20
   a80cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   a80d0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a80d4:	a94363f7 	ldp	x23, x24, [sp, #48]
   a80d8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a80dc:	d65f03c0 	ret
   a80e0:	a94363f7 	ldp	x23, x24, [sp, #48]
   a80e4:	d2800014 	mov	x20, #0x0                   	// #0
   a80e8:	aa1403e0 	mov	x0, x20
   a80ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   a80f0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a80f4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a80f8:	d65f03c0 	ret
   a80fc:	00000000 	udf	#0

00000000000a8100 <operator new(unsigned long, int)>:
   a8100:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a8104:	910003fd 	mov	x29, sp
   a8108:	7100043f 	cmp	w1, #0x1
   a810c:	a90153f3 	stp	x19, x20, [sp, #16]
   a8110:	aa0003f3 	mov	x19, x0
   a8114:	54000100 	b.eq	a8134 <operator new(unsigned long, int)+0x34>  // b.none
   a8118:	7100083f 	cmp	w1, #0x2
   a811c:	54000280 	b.eq	a816c <operator new(unsigned long, int)+0x6c>  // b.none
   a8120:	d2800000 	mov	x0, #0x0                   	// #0
   a8124:	34000161 	cbz	w1, a8150 <operator new(unsigned long, int)+0x50>
   a8128:	a94153f3 	ldp	x19, x20, [sp, #16]
   a812c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a8130:	d65f03c0 	ret
   a8134:	b00000a0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a8138:	aa1303e1 	mov	x1, x19
   a813c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8140:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a8144:	f9411c00 	ldr	x0, [x0, #568]
   a8148:	91064000 	add	x0, x0, #0x190
   a814c:	140000ad 	b	a8400 <CHeapAllocator::Allocate(unsigned long)>
   a8150:	b00000a0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a8154:	aa1303e1 	mov	x1, x19
   a8158:	a94153f3 	ldp	x19, x20, [sp, #16]
   a815c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a8160:	f9411c00 	ldr	x0, [x0, #568]
   a8164:	91006000 	add	x0, x0, #0x18
   a8168:	140000a6 	b	a8400 <CHeapAllocator::Allocate(unsigned long)>
   a816c:	b00000b4 	adrp	x20, bd000 <CNetDevice::s_SpeedString+0x18>
   a8170:	aa0003e1 	mov	x1, x0
   a8174:	f9411e80 	ldr	x0, [x20, #568]
   a8178:	91064000 	add	x0, x0, #0x190
   a817c:	940000a1 	bl	a8400 <CHeapAllocator::Allocate(unsigned long)>
   a8180:	b5fffd40 	cbnz	x0, a8128 <operator new(unsigned long, int)+0x28>
   a8184:	f9411e80 	ldr	x0, [x20, #568]
   a8188:	aa1303e1 	mov	x1, x19
   a818c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8190:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a8194:	91006000 	add	x0, x0, #0x18
   a8198:	1400009a 	b	a8400 <CHeapAllocator::Allocate(unsigned long)>
   a819c:	d503201f 	nop

00000000000a81a0 <operator new[](unsigned long, int)>:
   a81a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a81a4:	910003fd 	mov	x29, sp
   a81a8:	7100043f 	cmp	w1, #0x1
   a81ac:	a90153f3 	stp	x19, x20, [sp, #16]
   a81b0:	aa0003f3 	mov	x19, x0
   a81b4:	54000100 	b.eq	a81d4 <operator new[](unsigned long, int)+0x34>  // b.none
   a81b8:	7100083f 	cmp	w1, #0x2
   a81bc:	54000280 	b.eq	a820c <operator new[](unsigned long, int)+0x6c>  // b.none
   a81c0:	d2800000 	mov	x0, #0x0                   	// #0
   a81c4:	34000161 	cbz	w1, a81f0 <operator new[](unsigned long, int)+0x50>
   a81c8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a81cc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a81d0:	d65f03c0 	ret
   a81d4:	b00000a0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a81d8:	aa1303e1 	mov	x1, x19
   a81dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   a81e0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a81e4:	f9411c00 	ldr	x0, [x0, #568]
   a81e8:	91064000 	add	x0, x0, #0x190
   a81ec:	14000085 	b	a8400 <CHeapAllocator::Allocate(unsigned long)>
   a81f0:	b00000a0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a81f4:	aa1303e1 	mov	x1, x19
   a81f8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a81fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a8200:	f9411c00 	ldr	x0, [x0, #568]
   a8204:	91006000 	add	x0, x0, #0x18
   a8208:	1400007e 	b	a8400 <CHeapAllocator::Allocate(unsigned long)>
   a820c:	b00000b4 	adrp	x20, bd000 <CNetDevice::s_SpeedString+0x18>
   a8210:	aa0003e1 	mov	x1, x0
   a8214:	f9411e80 	ldr	x0, [x20, #568]
   a8218:	91064000 	add	x0, x0, #0x190
   a821c:	94000079 	bl	a8400 <CHeapAllocator::Allocate(unsigned long)>
   a8220:	b5fffd40 	cbnz	x0, a81c8 <operator new[](unsigned long, int)+0x28>
   a8224:	f9411e80 	ldr	x0, [x20, #568]
   a8228:	aa1303e1 	mov	x1, x19
   a822c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8230:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a8234:	91006000 	add	x0, x0, #0x18
   a8238:	14000072 	b	a8400 <CHeapAllocator::Allocate(unsigned long)>
   a823c:	d503201f 	nop

00000000000a8240 <operator new(unsigned long, void*)>:
   a8240:	aa0103e0 	mov	x0, x1
   a8244:	d65f03c0 	ret
   a8248:	d503201f 	nop
   a824c:	d503201f 	nop

00000000000a8250 <operator new[](unsigned long, void*)>:
   a8250:	aa0103e0 	mov	x0, x1
   a8254:	d65f03c0 	ret
   a8258:	d503201f 	nop
   a825c:	d503201f 	nop

00000000000a8260 <operator new(unsigned long)>:
   a8260:	b00000a1 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   a8264:	f9411c22 	ldr	x2, [x1, #568]
   a8268:	aa0003e1 	mov	x1, x0
   a826c:	91006040 	add	x0, x2, #0x18
   a8270:	14000064 	b	a8400 <CHeapAllocator::Allocate(unsigned long)>
   a8274:	d503201f 	nop
   a8278:	d503201f 	nop
   a827c:	d503201f 	nop

00000000000a8280 <operator new[](unsigned long)>:
   a8280:	b00000a1 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   a8284:	f9411c22 	ldr	x2, [x1, #568]
   a8288:	aa0003e1 	mov	x1, x0
   a828c:	91006040 	add	x0, x2, #0x18
   a8290:	1400005c 	b	a8400 <CHeapAllocator::Allocate(unsigned long)>
   a8294:	d503201f 	nop
   a8298:	d503201f 	nop
   a829c:	d503201f 	nop

00000000000a82a0 <operator delete(void*)>:
   a82a0:	aa0003e1 	mov	x1, x0
   a82a4:	b24077e2 	mov	x2, #0x3fffffff            	// #1073741823
   a82a8:	b00000a0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a82ac:	eb02003f 	cmp	x1, x2
   a82b0:	f9411c00 	ldr	x0, [x0, #568]
   a82b4:	54000068 	b.hi	a82c0 <operator delete(void*)+0x20>  // b.pmore
   a82b8:	91006000 	add	x0, x0, #0x18
   a82bc:	140000dd 	b	a8630 <CHeapAllocator::Free(void*)>
   a82c0:	91064000 	add	x0, x0, #0x190
   a82c4:	140000db 	b	a8630 <CHeapAllocator::Free(void*)>
   a82c8:	d503201f 	nop
   a82cc:	d503201f 	nop

00000000000a82d0 <operator delete[](void*)>:
   a82d0:	aa0003e1 	mov	x1, x0
   a82d4:	b24077e2 	mov	x2, #0x3fffffff            	// #1073741823
   a82d8:	b00000a0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a82dc:	eb02003f 	cmp	x1, x2
   a82e0:	f9411c00 	ldr	x0, [x0, #568]
   a82e4:	54000068 	b.hi	a82f0 <operator delete[](void*)+0x20>  // b.pmore
   a82e8:	91006000 	add	x0, x0, #0x18
   a82ec:	140000d1 	b	a8630 <CHeapAllocator::Free(void*)>
   a82f0:	91064000 	add	x0, x0, #0x190
   a82f4:	140000cf 	b	a8630 <CHeapAllocator::Free(void*)>
   a82f8:	d503201f 	nop
   a82fc:	d503201f 	nop

00000000000a8300 <operator delete(void*, unsigned long)>:
   a8300:	aa0003e1 	mov	x1, x0
   a8304:	b24077e2 	mov	x2, #0x3fffffff            	// #1073741823
   a8308:	b00000a0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a830c:	eb02003f 	cmp	x1, x2
   a8310:	f9411c00 	ldr	x0, [x0, #568]
   a8314:	54000068 	b.hi	a8320 <operator delete(void*, unsigned long)+0x20>  // b.pmore
   a8318:	91006000 	add	x0, x0, #0x18
   a831c:	140000c5 	b	a8630 <CHeapAllocator::Free(void*)>
   a8320:	91064000 	add	x0, x0, #0x190
   a8324:	140000c3 	b	a8630 <CHeapAllocator::Free(void*)>
   a8328:	d503201f 	nop
   a832c:	d503201f 	nop

00000000000a8330 <operator delete[](void*, unsigned long)>:
   a8330:	aa0003e1 	mov	x1, x0
   a8334:	b24077e2 	mov	x2, #0x3fffffff            	// #1073741823
   a8338:	b00000a0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a833c:	eb02003f 	cmp	x1, x2
   a8340:	f9411c00 	ldr	x0, [x0, #568]
   a8344:	54000068 	b.hi	a8350 <operator delete[](void*, unsigned long)+0x20>  // b.pmore
   a8348:	91006000 	add	x0, x0, #0x18
   a834c:	140000b9 	b	a8630 <CHeapAllocator::Free(void*)>
   a8350:	91064000 	add	x0, x0, #0x190
   a8354:	140000b7 	b	a8630 <CHeapAllocator::Free(void*)>
	...

00000000000a8360 <CHeapAllocator::CHeapAllocator(char const*)>:
   a8360:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a8364:	aa0003e3 	mov	x3, x0
   a8368:	aa0103e5 	mov	x5, x1
   a836c:	910003fd 	mov	x29, sp
   a8370:	52800024 	mov	w4, #0x1                   	// #1
   a8374:	52800001 	mov	w1, #0x0                   	// #0
   a8378:	d2802a02 	mov	x2, #0x150                 	// #336
   a837c:	f9000bf3 	str	x19, [sp, #16]
   a8380:	91008013 	add	x19, x0, #0x20
   a8384:	aa1303e0 	mov	x0, x19
   a8388:	a9007c65 	stp	x5, xzr, [x3]
   a838c:	a9017c7f 	stp	xzr, xzr, [x3, #16]
   a8390:	b9017064 	str	w4, [x3, #368]
   a8394:	97fffd15 	bl	a77e8 <memset>
   a8398:	b00000a1 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   a839c:	91006021 	add	x1, x1, #0x18
   a83a0:	aa1303e0 	mov	x0, x19
   a83a4:	91007023 	add	x3, x1, #0x1c
   a83a8:	b8404422 	ldr	w2, [x1], #4
   a83ac:	eb03003f 	cmp	x1, x3
   a83b0:	b8010402 	str	w2, [x0], #16
   a83b4:	54ffffa1 	b.ne	a83a8 <CHeapAllocator::CHeapAllocator(char const*)+0x48>  // b.any
   a83b8:	f9400bf3 	ldr	x19, [sp, #16]
   a83bc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a83c0:	d65f03c0 	ret
   a83c4:	d503201f 	nop
   a83c8:	d503201f 	nop
   a83cc:	d503201f 	nop

00000000000a83d0 <CHeapAllocator::~CHeapAllocator()>:
   a83d0:	d65f03c0 	ret
   a83d4:	d503201f 	nop
   a83d8:	d503201f 	nop
   a83dc:	d503201f 	nop

00000000000a83e0 <CHeapAllocator::Setup(unsigned long, unsigned long, unsigned long)>:
   a83e0:	8b020022 	add	x2, x1, x2
   a83e4:	f9000c03 	str	x3, [x0, #24]
   a83e8:	a9008801 	stp	x1, x2, [x0, #8]
   a83ec:	d65f03c0 	ret

00000000000a83f0 <CHeapAllocator::GetFreeSpace() const>:
   a83f0:	a9408001 	ldp	x1, x0, [x0, #8]
   a83f4:	cb010000 	sub	x0, x0, x1
   a83f8:	d65f03c0 	ret
   a83fc:	d503201f 	nop

00000000000a8400 <CHeapAllocator::Allocate(unsigned long)>:
   a8400:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a8404:	910003fd 	mov	x29, sp
   a8408:	f90013f5 	str	x21, [sp, #32]
   a840c:	aa0003f5 	mov	x21, x0
   a8410:	f9400400 	ldr	x0, [x0, #8]
   a8414:	b4000900 	cbz	x0, a8534 <CHeapAllocator::Allocate(unsigned long)+0x134>
   a8418:	b94172a0 	ldr	w0, [x21, #368]
   a841c:	a90153f3 	stp	x19, x20, [sp, #16]
   a8420:	aa0103f3 	mov	x19, x1
   a8424:	35000c00 	cbnz	w0, a85a4 <CHeapAllocator::Allocate(unsigned long)+0x1a4>
   a8428:	910082a3 	add	x3, x21, #0x20
   a842c:	b94022a2 	ldr	w2, [x21, #32]
   a8430:	35000082 	cbnz	w2, a8440 <CHeapAllocator::Allocate(unsigned long)+0x40>
   a8434:	14000035 	b	a8508 <CHeapAllocator::Allocate(unsigned long)+0x108>
   a8438:	b8410c62 	ldr	w2, [x3, #16]!
   a843c:	34000662 	cbz	w2, a8508 <CHeapAllocator::Allocate(unsigned long)+0x108>
   a8440:	2a0203e2 	mov	w2, w2
   a8444:	eb13005f 	cmp	x2, x19
   a8448:	54ffff83 	b.cc	a8438 <CHeapAllocator::Allocate(unsigned long)+0x38>  // b.lo, b.ul, b.last
   a844c:	f9400474 	ldr	x20, [x3, #8]
   a8450:	aa0203f3 	mov	x19, x2
   a8454:	b40005b4 	cbz	x20, a8508 <CHeapAllocator::Allocate(unsigned long)+0x108>
   a8458:	39400285 	ldrb	w5, [x20]
   a845c:	5289a864 	mov	w4, #0x4d43                	// #19779
   a8460:	72a84984 	movk	w4, #0x424c, lsl #16
   a8464:	39400682 	ldrb	w2, [x20, #1]
   a8468:	39400a81 	ldrb	w1, [x20, #2]
   a846c:	39400e80 	ldrb	w0, [x20, #3]
   a8470:	aa0220a2 	orr	x2, x5, x2, lsl #8
   a8474:	aa014041 	orr	x1, x2, x1, lsl #16
   a8478:	aa006020 	orr	x0, x1, x0, lsl #24
   a847c:	6b04001f 	cmp	w0, w4
   a8480:	54000c81 	b.ne	a8610 <CHeapAllocator::Allocate(unsigned long)+0x210>  // b.any
   a8484:	39402284 	ldrb	w4, [x20, #8]
   a8488:	39402682 	ldrb	w2, [x20, #9]
   a848c:	39402a81 	ldrb	w1, [x20, #10]
   a8490:	39402e80 	ldrb	w0, [x20, #11]
   a8494:	aa022082 	orr	x2, x4, x2, lsl #8
   a8498:	39403284 	ldrb	w4, [x20, #12]
   a849c:	aa014041 	orr	x1, x2, x1, lsl #16
   a84a0:	39403682 	ldrb	w2, [x20, #13]
   a84a4:	aa006020 	orr	x0, x1, x0, lsl #24
   a84a8:	39403a81 	ldrb	w1, [x20, #14]
   a84ac:	aa048004 	orr	x4, x0, x4, lsl #32
   a84b0:	39403e80 	ldrb	w0, [x20, #15]
   a84b4:	aa02a082 	orr	x2, x4, x2, lsl #40
   a84b8:	aa01c041 	orr	x1, x2, x1, lsl #48
   a84bc:	aa00e020 	orr	x0, x1, x0, lsl #56
   a84c0:	f9000460 	str	x0, [x3, #8]
   a84c4:	b94172a0 	ldr	w0, [x21, #368]
   a84c8:	350006a0 	cbnz	w0, a859c <CHeapAllocator::Allocate(unsigned long)+0x19c>
   a84cc:	f240169f 	tst	x20, #0x3f
   a84d0:	3900229f 	strb	wzr, [x20, #8]
   a84d4:	91010280 	add	x0, x20, #0x40
   a84d8:	3900269f 	strb	wzr, [x20, #9]
   a84dc:	39002a9f 	strb	wzr, [x20, #10]
   a84e0:	39002e9f 	strb	wzr, [x20, #11]
   a84e4:	3900329f 	strb	wzr, [x20, #12]
   a84e8:	3900369f 	strb	wzr, [x20, #13]
   a84ec:	39003a9f 	strb	wzr, [x20, #14]
   a84f0:	39003e9f 	strb	wzr, [x20, #15]
   a84f4:	54000821 	b.ne	a85f8 <CHeapAllocator::Allocate(unsigned long)+0x1f8>  // b.any
   a84f8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a84fc:	f94013f5 	ldr	x21, [sp, #32]
   a8500:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a8504:	d65f03c0 	ret
   a8508:	f94006b4 	ldr	x20, [x21, #8]
   a850c:	9101fe60 	add	x0, x19, #0x7f
   a8510:	927ae400 	and	x0, x0, #0xffffffffffffffc0
   a8514:	f9400ea1 	ldr	x1, [x21, #24]
   a8518:	8b000280 	add	x0, x20, x0
   a851c:	eb00029f 	cmp	x20, x0
   a8520:	54000123 	b.cc	a8544 <CHeapAllocator::Allocate(unsigned long)+0x144>  // b.lo, b.ul, b.last
   a8524:	b94172a0 	ldr	w0, [x21, #368]
   a8528:	b5000421 	cbnz	x1, a85ac <CHeapAllocator::Allocate(unsigned long)+0x1ac>
   a852c:	350005e0 	cbnz	w0, a85e8 <CHeapAllocator::Allocate(unsigned long)+0x1e8>
   a8530:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8534:	d2800000 	mov	x0, #0x0                   	// #0
   a8538:	f94013f5 	ldr	x21, [sp, #32]
   a853c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a8540:	d65f03c0 	ret
   a8544:	f9400aa2 	ldr	x2, [x21, #16]
   a8548:	cb010042 	sub	x2, x2, x1
   a854c:	eb02001f 	cmp	x0, x2
   a8550:	54fffea8 	b.hi	a8524 <CHeapAllocator::Allocate(unsigned long)+0x124>  // b.pmore
   a8554:	f90006a0 	str	x0, [x21, #8]
   a8558:	53083e61 	ubfx	w1, w19, #8, #8
   a855c:	53105e60 	ubfx	w0, w19, #16, #8
   a8560:	52800865 	mov	w5, #0x43                  	// #67
   a8564:	528009a4 	mov	w4, #0x4d                  	// #77
   a8568:	39001293 	strb	w19, [x20, #4]
   a856c:	52800983 	mov	w3, #0x4c                  	// #76
   a8570:	52800842 	mov	w2, #0x42                  	// #66
   a8574:	39001681 	strb	w1, [x20, #5]
   a8578:	53187e73 	lsr	w19, w19, #24
   a857c:	39000285 	strb	w5, [x20]
   a8580:	39000684 	strb	w4, [x20, #1]
   a8584:	39000a83 	strb	w3, [x20, #2]
   a8588:	39000e82 	strb	w2, [x20, #3]
   a858c:	39001a80 	strb	w0, [x20, #6]
   a8590:	39001e93 	strb	w19, [x20, #7]
   a8594:	b94172a0 	ldr	w0, [x21, #368]
   a8598:	34fff9a0 	cbz	w0, a84cc <CHeapAllocator::Allocate(unsigned long)+0xcc>
   a859c:	94000319 	bl	a9200 <LeaveCritical>
   a85a0:	17ffffcb 	b	a84cc <CHeapAllocator::Allocate(unsigned long)+0xcc>
   a85a4:	940002e7 	bl	a9140 <EnterCritical>
   a85a8:	17ffffa0 	b	a8428 <CHeapAllocator::Allocate(unsigned long)+0x28>
   a85ac:	f9000ebf 	str	xzr, [x21, #24]
   a85b0:	35000180 	cbnz	w0, a85e0 <CHeapAllocator::Allocate(unsigned long)+0x1e0>
   a85b4:	97ffdd17 	bl	9fa10 <CLogger::Get()>
   a85b8:	52800002 	mov	w2, #0x0                   	// #0
   a85bc:	b0000063 	adrp	x3, b5000 <_etext+0x4158>
   a85c0:	911d0063 	add	x3, x3, #0x740
   a85c4:	f94002a1 	ldr	x1, [x21]
   a85c8:	97ffdefe 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a85cc:	d2800000 	mov	x0, #0x0                   	// #0
   a85d0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a85d4:	f94013f5 	ldr	x21, [sp, #32]
   a85d8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a85dc:	d65f03c0 	ret
   a85e0:	94000308 	bl	a9200 <LeaveCritical>
   a85e4:	17fffff4 	b	a85b4 <CHeapAllocator::Allocate(unsigned long)+0x1b4>
   a85e8:	94000306 	bl	a9200 <LeaveCritical>
   a85ec:	d2800000 	mov	x0, #0x0                   	// #0
   a85f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   a85f4:	17ffffc2 	b	a84fc <CHeapAllocator::Allocate(unsigned long)+0xfc>
   a85f8:	b0000061 	adrp	x1, b5000 <_etext+0x4158>
   a85fc:	b0000060 	adrp	x0, b5000 <_etext+0x4158>
   a8600:	911be021 	add	x1, x1, #0x6f8
   a8604:	911d4000 	add	x0, x0, #0x750
   a8608:	528011c2 	mov	w2, #0x8e                  	// #142
   a860c:	97ffd5cd 	bl	9dd40 <assertion_failed>
   a8610:	b0000061 	adrp	x1, b5000 <_etext+0x4158>
   a8614:	b0000060 	adrp	x0, b5000 <_etext+0x4158>
   a8618:	911be021 	add	x1, x1, #0x6f8
   a861c:	911c4000 	add	x0, x0, #0x710
   a8620:	52800bc2 	mov	w2, #0x5e                  	// #94
   a8624:	97ffd5c7 	bl	9dd40 <assertion_failed>
   a8628:	d503201f 	nop
   a862c:	d503201f 	nop

00000000000a8630 <CHeapAllocator::Free(void*)>:
   a8630:	b4000701 	cbz	x1, a8710 <CHeapAllocator::Free(void*)+0xe0>
   a8634:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a8638:	910003fd 	mov	x29, sp
   a863c:	5289a864 	mov	w4, #0x4d43                	// #19779
   a8640:	72a84984 	movk	w4, #0x424c, lsl #16
   a8644:	a90153f3 	stp	x19, x20, [sp, #16]
   a8648:	d1010034 	sub	x20, x1, #0x40
   a864c:	f90013f5 	str	x21, [sp, #32]
   a8650:	aa0003f5 	mov	x21, x0
   a8654:	385c0025 	ldurb	w5, [x1, #-64]
   a8658:	385c1023 	ldurb	w3, [x1, #-63]
   a865c:	385c2022 	ldurb	w2, [x1, #-62]
   a8660:	385c3020 	ldurb	w0, [x1, #-61]
   a8664:	aa0320a1 	orr	x1, x5, x3, lsl #8
   a8668:	aa024021 	orr	x1, x1, x2, lsl #16
   a866c:	aa006020 	orr	x0, x1, x0, lsl #24
   a8670:	6b04001f 	cmp	w0, w4
   a8674:	54000801 	b.ne	a8774 <CHeapAllocator::Free(void*)+0x144>  // b.any
   a8678:	b94022a1 	ldr	w1, [x21, #32]
   a867c:	910082b3 	add	x19, x21, #0x20
   a8680:	34000401 	cbz	w1, a8700 <CHeapAllocator::Free(void*)+0xd0>
   a8684:	39401284 	ldrb	w4, [x20, #4]
   a8688:	39401683 	ldrb	w3, [x20, #5]
   a868c:	39401a80 	ldrb	w0, [x20, #6]
   a8690:	39401e82 	ldrb	w2, [x20, #7]
   a8694:	aa032083 	orr	x3, x4, x3, lsl #8
   a8698:	aa004060 	orr	x0, x3, x0, lsl #16
   a869c:	2a026002 	orr	w2, w0, w2, lsl #24
   a86a0:	14000003 	b	a86ac <CHeapAllocator::Free(void*)+0x7c>
   a86a4:	b8410e61 	ldr	w1, [x19, #16]!
   a86a8:	340002c1 	cbz	w1, a8700 <CHeapAllocator::Free(void*)+0xd0>
   a86ac:	6b02003f 	cmp	w1, w2
   a86b0:	54ffffa1 	b.ne	a86a4 <CHeapAllocator::Free(void*)+0x74>  // b.any
   a86b4:	b94172a0 	ldr	w0, [x21, #368]
   a86b8:	350002e0 	cbnz	w0, a8714 <CHeapAllocator::Free(void*)+0xe4>
   a86bc:	f9400660 	ldr	x0, [x19, #8]
   a86c0:	53083c06 	ubfx	w6, w0, #8, #8
   a86c4:	53105c05 	ubfx	w5, w0, #16, #8
   a86c8:	39002280 	strb	w0, [x20, #8]
   a86cc:	53187c04 	lsr	w4, w0, #24
   a86d0:	d3609c03 	ubfx	x3, x0, #32, #8
   a86d4:	d368bc02 	ubfx	x2, x0, #40, #8
   a86d8:	d370dc01 	ubfx	x1, x0, #48, #8
   a86dc:	39002686 	strb	w6, [x20, #9]
   a86e0:	d378fc00 	lsr	x0, x0, #56
   a86e4:	39002a85 	strb	w5, [x20, #10]
   a86e8:	39002e84 	strb	w4, [x20, #11]
   a86ec:	39003283 	strb	w3, [x20, #12]
   a86f0:	39003682 	strb	w2, [x20, #13]
   a86f4:	39003a81 	strb	w1, [x20, #14]
   a86f8:	39003e80 	strb	w0, [x20, #15]
   a86fc:	f9000674 	str	x20, [x19, #8]
   a8700:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8704:	f94013f5 	ldr	x21, [sp, #32]
   a8708:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a870c:	d65f03c0 	ret
   a8710:	d65f03c0 	ret
   a8714:	9400028b 	bl	a9140 <EnterCritical>
   a8718:	f9400660 	ldr	x0, [x19, #8]
   a871c:	b94172a1 	ldr	w1, [x21, #368]
   a8720:	53083c07 	ubfx	w7, w0, #8, #8
   a8724:	53105c06 	ubfx	w6, w0, #16, #8
   a8728:	39002280 	strb	w0, [x20, #8]
   a872c:	53187c05 	lsr	w5, w0, #24
   a8730:	d3609c04 	ubfx	x4, x0, #32, #8
   a8734:	d368bc03 	ubfx	x3, x0, #40, #8
   a8738:	d370dc02 	ubfx	x2, x0, #48, #8
   a873c:	39002687 	strb	w7, [x20, #9]
   a8740:	d378fc00 	lsr	x0, x0, #56
   a8744:	39002a86 	strb	w6, [x20, #10]
   a8748:	39002e85 	strb	w5, [x20, #11]
   a874c:	39003284 	strb	w4, [x20, #12]
   a8750:	39003683 	strb	w3, [x20, #13]
   a8754:	39003a82 	strb	w2, [x20, #14]
   a8758:	39003e80 	strb	w0, [x20, #15]
   a875c:	f9000674 	str	x20, [x19, #8]
   a8760:	34fffd01 	cbz	w1, a8700 <CHeapAllocator::Free(void*)+0xd0>
   a8764:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8768:	f94013f5 	ldr	x21, [sp, #32]
   a876c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a8770:	140002a4 	b	a9200 <LeaveCritical>
   a8774:	b0000061 	adrp	x1, b5000 <_etext+0x4158>
   a8778:	b0000060 	adrp	x0, b5000 <_etext+0x4158>
   a877c:	911be021 	add	x1, x1, #0x6f8
   a8780:	911c4000 	add	x0, x0, #0x710
   a8784:	528017e2 	mov	w2, #0xbf                  	// #191
   a8788:	97ffd56e 	bl	9dd40 <assertion_failed>
   a878c:	d503201f 	nop

00000000000a8790 <CHeapAllocator::ReAllocate(void*, unsigned long)>:
   a8790:	b4000701 	cbz	x1, a8870 <CHeapAllocator::ReAllocate(void*, unsigned long)+0xe0>
   a8794:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a8798:	910003fd 	mov	x29, sp
   a879c:	a9025bf5 	stp	x21, x22, [sp, #32]
   a87a0:	b40006c2 	cbz	x2, a8878 <CHeapAllocator::ReAllocate(void*, unsigned long)+0xe8>
   a87a4:	5289a865 	mov	w5, #0x4d43                	// #19779
   a87a8:	72a84985 	movk	w5, #0x424c, lsl #16
   a87ac:	a90153f3 	stp	x19, x20, [sp, #16]
   a87b0:	aa0103f3 	mov	x19, x1
   a87b4:	d1010034 	sub	x20, x1, #0x40
   a87b8:	385c0026 	ldurb	w6, [x1, #-64]
   a87bc:	385c1024 	ldurb	w4, [x1, #-63]
   a87c0:	385c2023 	ldurb	w3, [x1, #-62]
   a87c4:	385c3021 	ldurb	w1, [x1, #-61]
   a87c8:	aa0420c4 	orr	x4, x6, x4, lsl #8
   a87cc:	aa034083 	orr	x3, x4, x3, lsl #16
   a87d0:	aa016061 	orr	x1, x3, x1, lsl #24
   a87d4:	6b05003f 	cmp	w1, w5
   a87d8:	54000561 	b.ne	a8884 <CHeapAllocator::ReAllocate(void*, unsigned long)+0xf4>  // b.any
   a87dc:	39401285 	ldrb	w5, [x20, #4]
   a87e0:	aa1303f5 	mov	x21, x19
   a87e4:	39401684 	ldrb	w4, [x20, #5]
   a87e8:	39401a83 	ldrb	w3, [x20, #6]
   a87ec:	39401e81 	ldrb	w1, [x20, #7]
   a87f0:	aa0420a4 	orr	x4, x5, x4, lsl #8
   a87f4:	aa034083 	orr	x3, x4, x3, lsl #16
   a87f8:	aa016061 	orr	x1, x3, x1, lsl #24
   a87fc:	eb02003f 	cmp	x1, x2
   a8800:	540000c3 	b.cc	a8818 <CHeapAllocator::ReAllocate(void*, unsigned long)+0x88>  // b.lo, b.ul, b.last
   a8804:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8808:	aa1503e0 	mov	x0, x21
   a880c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a8810:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a8814:	d65f03c0 	ret
   a8818:	aa0203e1 	mov	x1, x2
   a881c:	aa0003f6 	mov	x22, x0
   a8820:	97fffef8 	bl	a8400 <CHeapAllocator::Allocate(unsigned long)>
   a8824:	aa0003f5 	mov	x21, x0
   a8828:	b4fffee0 	cbz	x0, a8804 <CHeapAllocator::ReAllocate(void*, unsigned long)+0x74>
   a882c:	39401285 	ldrb	w5, [x20, #4]
   a8830:	aa1303e1 	mov	x1, x19
   a8834:	39401683 	ldrb	w3, [x20, #5]
   a8838:	39401a82 	ldrb	w2, [x20, #6]
   a883c:	39401e84 	ldrb	w4, [x20, #7]
   a8840:	aa0320a3 	orr	x3, x5, x3, lsl #8
   a8844:	aa024062 	orr	x2, x3, x2, lsl #16
   a8848:	aa046042 	orr	x2, x2, x4, lsl #24
   a884c:	97fffbff 	bl	a7848 <memcpy>
   a8850:	aa1303e1 	mov	x1, x19
   a8854:	aa1603e0 	mov	x0, x22
   a8858:	97ffff76 	bl	a8630 <CHeapAllocator::Free(void*)>
   a885c:	aa1503e0 	mov	x0, x21
   a8860:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8864:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a8868:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a886c:	d65f03c0 	ret
   a8870:	aa0203e1 	mov	x1, x2
   a8874:	17fffee3 	b	a8400 <CHeapAllocator::Allocate(unsigned long)>
   a8878:	d2800015 	mov	x21, #0x0                   	// #0
   a887c:	97ffff6d 	bl	a8630 <CHeapAllocator::Free(void*)>
   a8880:	17ffffe2 	b	a8808 <CHeapAllocator::ReAllocate(void*, unsigned long)+0x78>
   a8884:	b0000061 	adrp	x1, b5000 <_etext+0x4158>
   a8888:	b0000060 	adrp	x0, b5000 <_etext+0x4158>
   a888c:	911be021 	add	x1, x1, #0x6f8
   a8890:	911c4000 	add	x0, x0, #0x710
   a8894:	52801462 	mov	w2, #0xa3                  	// #163
   a8898:	97ffd52a 	bl	9dd40 <assertion_failed>
   a889c:	00000000 	udf	#0

00000000000a88a0 <CNumberPool::CNumberPool(unsigned int, unsigned int)>:
   a88a0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a88a4:	910003fd 	mov	x29, sp
   a88a8:	7100fc5f 	cmp	w2, #0x3f
   a88ac:	29000801 	stp	w1, w2, [x0]
   a88b0:	f900041f 	str	xzr, [x0, #8]
   a88b4:	540000a8 	b.hi	a88c8 <CNumberPool::CNumberPool(unsigned int, unsigned int)+0x28>  // b.pmore
   a88b8:	6b02003f 	cmp	w1, w2
   a88bc:	54000128 	b.hi	a88e0 <CNumberPool::CNumberPool(unsigned int, unsigned int)+0x40>  // b.pmore
   a88c0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a88c4:	d65f03c0 	ret
   a88c8:	b0000061 	adrp	x1, b5000 <_etext+0x4158>
   a88cc:	b0000060 	adrp	x0, b5000 <_etext+0x4158>
   a88d0:	911e0021 	add	x1, x1, #0x780
   a88d4:	911e4000 	add	x0, x0, #0x790
   a88d8:	528003a2 	mov	w2, #0x1d                  	// #29
   a88dc:	97ffd519 	bl	9dd40 <assertion_failed>
   a88e0:	b0000061 	adrp	x1, b5000 <_etext+0x4158>
   a88e4:	b0000060 	adrp	x0, b5000 <_etext+0x4158>
   a88e8:	911e0021 	add	x1, x1, #0x780
   a88ec:	911e8000 	add	x0, x0, #0x7a0
   a88f0:	528003c2 	mov	w2, #0x1e                  	// #30
   a88f4:	97ffd513 	bl	9dd40 <assertion_failed>
   a88f8:	d503201f 	nop
   a88fc:	d503201f 	nop

00000000000a8900 <CNumberPool::~CNumberPool()>:
   a8900:	d65f03c0 	ret
   a8904:	d503201f 	nop
   a8908:	d503201f 	nop
   a890c:	d503201f 	nop

00000000000a8910 <CNumberPool::AllocateNumber(bool, char const*)>:
   a8910:	aa0003e7 	mov	x7, x0
   a8914:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a8918:	910003fd 	mov	x29, sp
   a891c:	12001c21 	and	w1, w1, #0xff
   a8920:	b9400000 	ldr	w0, [x0]
   a8924:	b94004e4 	ldr	w4, [x7, #4]
   a8928:	f9000bf3 	str	x19, [sp, #16]
   a892c:	aa0203f3 	mov	x19, x2
   a8930:	6b04001f 	cmp	w0, w4
   a8934:	540001e8 	b.hi	a8970 <CNumberPool::AllocateNumber(bool, char const*)+0x60>  // b.pmore
   a8938:	f94004e5 	ldr	x5, [x7, #8]
   a893c:	52800026 	mov	w6, #0x1                   	// #1
   a8940:	1ac020c3 	lsl	w3, w6, w0
   a8944:	93407c63 	sxtw	x3, w3
   a8948:	ea05007f 	tst	x3, x5
   a894c:	540000c1 	b.ne	a8964 <CNumberPool::AllocateNumber(bool, char const*)+0x54>  // b.any
   a8950:	14000015 	b	a89a4 <CNumberPool::AllocateNumber(bool, char const*)+0x94>
   a8954:	1ac020c3 	lsl	w3, w6, w0
   a8958:	93407c63 	sxtw	x3, w3
   a895c:	ea05007f 	tst	x3, x5
   a8960:	54000220 	b.eq	a89a4 <CNumberPool::AllocateNumber(bool, char const*)+0x94>  // b.none
   a8964:	11000400 	add	w0, w0, #0x1
   a8968:	6b04001f 	cmp	w0, w4
   a896c:	54ffff49 	b.ls	a8954 <CNumberPool::AllocateNumber(bool, char const*)+0x44>  // b.plast
   a8970:	52800800 	mov	w0, #0x40                  	// #64
   a8974:	34000121 	cbz	w1, a8998 <CNumberPool::AllocateNumber(bool, char const*)+0x88>
   a8978:	b4000213 	cbz	x19, a89b8 <CNumberPool::AllocateNumber(bool, char const*)+0xa8>
   a897c:	97ffdc25 	bl	9fa10 <CLogger::Get()>
   a8980:	aa1303e1 	mov	x1, x19
   a8984:	b0000063 	adrp	x3, b5000 <_etext+0x4158>
   a8988:	911f0063 	add	x3, x3, #0x7c0
   a898c:	52800002 	mov	w2, #0x0                   	// #0
   a8990:	97ffde0c 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a8994:	52800800 	mov	w0, #0x40                  	// #64
   a8998:	f9400bf3 	ldr	x19, [sp, #16]
   a899c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a89a0:	d65f03c0 	ret
   a89a4:	aa050063 	orr	x3, x3, x5
   a89a8:	f9400bf3 	ldr	x19, [sp, #16]
   a89ac:	f90004e3 	str	x3, [x7, #8]
   a89b0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a89b4:	d65f03c0 	ret
   a89b8:	b0000061 	adrp	x1, b5000 <_etext+0x4158>
   a89bc:	b0000060 	adrp	x0, b5000 <_etext+0x4158>
   a89c0:	911e0021 	add	x1, x1, #0x780
   a89c4:	911ec000 	add	x0, x0, #0x7b0
   a89c8:	52800682 	mov	w2, #0x34                  	// #52
   a89cc:	97ffd4dd 	bl	9dd40 <assertion_failed>

00000000000a89d0 <CNumberPool::FreeNumber(unsigned int)>:
   a89d0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a89d4:	910003fd 	mov	x29, sp
   a89d8:	b9400002 	ldr	w2, [x0]
   a89dc:	6b01005f 	cmp	w2, w1
   a89e0:	54000208 	b.hi	a8a20 <CNumberPool::FreeNumber(unsigned int)+0x50>  // b.pmore
   a89e4:	b9400402 	ldr	w2, [x0, #4]
   a89e8:	6b01005f 	cmp	w2, w1
   a89ec:	540001a3 	b.cc	a8a20 <CNumberPool::FreeNumber(unsigned int)+0x50>  // b.lo, b.ul, b.last
   a89f0:	f9400403 	ldr	x3, [x0, #8]
   a89f4:	52800022 	mov	w2, #0x1                   	// #1
   a89f8:	1ac12041 	lsl	w1, w2, w1
   a89fc:	93407c22 	sxtw	x2, w1
   a8a00:	ea03005f 	tst	x2, x3
   a8a04:	540001a0 	b.eq	a8a38 <CNumberPool::FreeNumber(unsigned int)+0x68>  // b.none
   a8a08:	2a2103e1 	mvn	w1, w1
   a8a0c:	93407c21 	sxtw	x1, w1
   a8a10:	8a030021 	and	x1, x1, x3
   a8a14:	f9000401 	str	x1, [x0, #8]
   a8a18:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a8a1c:	d65f03c0 	ret
   a8a20:	b0000061 	adrp	x1, b5000 <_etext+0x4158>
   a8a24:	b0000060 	adrp	x0, b5000 <_etext+0x4158>
   a8a28:	911e0021 	add	x1, x1, #0x780
   a8a2c:	911f6000 	add	x0, x0, #0x7d8
   a8a30:	52800842 	mov	w2, #0x42                  	// #66
   a8a34:	97ffd4c3 	bl	9dd40 <assertion_failed>
   a8a38:	b0000061 	adrp	x1, b5000 <_etext+0x4158>
   a8a3c:	b0000060 	adrp	x0, b5000 <_etext+0x4158>
   a8a40:	911e0021 	add	x1, x1, #0x780
   a8a44:	91200000 	add	x0, x0, #0x800
   a8a48:	52800862 	mov	w2, #0x43                  	// #67
   a8a4c:	97ffd4bd 	bl	9dd40 <assertion_failed>

00000000000a8a50 <CExceptionHandler::~CExceptionHandler()>:
   a8a50:	b00000a0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a8a54:	f901181f 	str	xzr, [x0, #560]
   a8a58:	d65f03c0 	ret
   a8a5c:	d503201f 	nop

00000000000a8a60 <CExceptionHandler::~CExceptionHandler()>:
   a8a60:	b00000a2 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   a8a64:	d2800101 	mov	x1, #0x8                   	// #8
   a8a68:	f901185f 	str	xzr, [x2, #560]
   a8a6c:	17fffe25 	b	a8300 <operator delete(void*, unsigned long)>

00000000000a8a70 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   a8a70:	d101c3ff 	sub	sp, sp, #0x70
   a8a74:	a9027bfd 	stp	x29, x30, [sp, #32]
   a8a78:	910083fd 	add	x29, sp, #0x20
   a8a7c:	a90353f3 	stp	x19, x20, [sp, #48]
   a8a80:	a9045bf5 	stp	x21, x22, [sp, #64]
   a8a84:	a90563f7 	stp	x23, x24, [sp, #80]
   a8a88:	f90033f9 	str	x25, [sp, #96]
   a8a8c:	b4001142 	cbz	x2, a8cb4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x244>
   a8a90:	aa0203f3 	mov	x19, x2
   a8a94:	39408043 	ldrb	w3, [x2, #32]
   a8a98:	2a0103f7 	mov	w23, w1
   a8a9c:	39408442 	ldrb	w2, [x2, #33]
   a8aa0:	39408a60 	ldrb	w0, [x19, #34]
   a8aa4:	39408e61 	ldrb	w1, [x19, #35]
   a8aa8:	aa022062 	orr	x2, x3, x2, lsl #8
   a8aac:	39409263 	ldrb	w3, [x19, #36]
   a8ab0:	aa004040 	orr	x0, x2, x0, lsl #16
   a8ab4:	39409662 	ldrb	w2, [x19, #37]
   a8ab8:	aa016001 	orr	x1, x0, x1, lsl #24
   a8abc:	39409a60 	ldrb	w0, [x19, #38]
   a8ac0:	aa038023 	orr	x3, x1, x3, lsl #32
   a8ac4:	39402261 	ldrb	w1, [x19, #8]
   a8ac8:	aa02a062 	orr	x2, x3, x2, lsl #40
   a8acc:	39409e76 	ldrb	w22, [x19, #39]
   a8ad0:	aa00c040 	orr	x0, x2, x0, lsl #48
   a8ad4:	92400c21 	and	x1, x1, #0xf
   a8ad8:	f100143f 	cmp	x1, #0x5
   a8adc:	aa16e016 	orr	x22, x0, x22, lsl #56
   a8ae0:	54000201 	b.ne	a8b20 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb0>  // b.any
   a8ae4:	3940a262 	ldrb	w2, [x19, #40]
   a8ae8:	3940a661 	ldrb	w1, [x19, #41]
   a8aec:	3940aa60 	ldrb	w0, [x19, #42]
   a8af0:	3940ae63 	ldrb	w3, [x19, #43]
   a8af4:	aa012041 	orr	x1, x2, x1, lsl #8
   a8af8:	3940b262 	ldrb	w2, [x19, #44]
   a8afc:	aa004020 	orr	x0, x1, x0, lsl #16
   a8b00:	3940b661 	ldrb	w1, [x19, #45]
   a8b04:	aa036003 	orr	x3, x0, x3, lsl #24
   a8b08:	3940ba60 	ldrb	w0, [x19, #46]
   a8b0c:	aa028062 	orr	x2, x3, x2, lsl #32
   a8b10:	3940be76 	ldrb	w22, [x19, #47]
   a8b14:	aa01a041 	orr	x1, x2, x1, lsl #40
   a8b18:	aa00c020 	orr	x0, x1, x0, lsl #48
   a8b1c:	aa16e016 	orr	x22, x0, x22, lsl #56
   a8b20:	39400264 	ldrb	w4, [x19]
   a8b24:	d2c007e2 	mov	x2, #0x3f00000000          	// #270582939648
   a8b28:	f2e00602 	movk	x2, #0x30, lsl #48
   a8b2c:	39400661 	ldrb	w1, [x19, #1]
   a8b30:	39400a60 	ldrb	w0, [x19, #2]
   a8b34:	39400e63 	ldrb	w3, [x19, #3]
   a8b38:	aa012081 	orr	x1, x4, x1, lsl #8
   a8b3c:	aa004020 	orr	x0, x1, x0, lsl #16
   a8b40:	d3429c79 	ubfx	x25, x3, #2, #38
   a8b44:	aa036003 	orr	x3, x0, x3, lsl #24
   a8b48:	9ad92442 	lsr	x2, x2, x25
   a8b4c:	92406075 	and	x21, x3, #0x1ffffff
   a8b50:	92400058 	and	x24, x2, #0x1
   a8b54:	36000202 	tbz	w2, #0, a8b94 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x124>
   a8b58:	3940c262 	ldrb	w2, [x19, #48]
   a8b5c:	3940c661 	ldrb	w1, [x19, #49]
   a8b60:	3940ca60 	ldrb	w0, [x19, #50]
   a8b64:	3940ce63 	ldrb	w3, [x19, #51]
   a8b68:	aa012041 	orr	x1, x2, x1, lsl #8
   a8b6c:	3940d262 	ldrb	w2, [x19, #52]
   a8b70:	aa004020 	orr	x0, x1, x0, lsl #16
   a8b74:	3940d661 	ldrb	w1, [x19, #53]
   a8b78:	aa036003 	orr	x3, x0, x3, lsl #24
   a8b7c:	3940da60 	ldrb	w0, [x19, #54]
   a8b80:	aa028062 	orr	x2, x3, x2, lsl #32
   a8b84:	3940de78 	ldrb	w24, [x19, #55]
   a8b88:	aa01a041 	orr	x1, x2, x1, lsl #40
   a8b8c:	aa00c020 	orr	x0, x1, x0, lsl #48
   a8b90:	aa18e018 	orr	x24, x0, x24, lsl #56
   a8b94:	d0000094 	adrp	x20, ba000 <CursorSymbol+0x188>
   a8b98:	913ac294 	add	x20, x20, #0xeb0
   a8b9c:	aa1403e1 	mov	x1, x20
   a8ba0:	aa1603e0 	mov	x0, x22
   a8ba4:	97ffd677 	bl	9e580 <debug_stacktrace(unsigned long const*, char const*)>
   a8ba8:	97ffdb9a 	bl	9fa10 <CLogger::Get()>
   a8bac:	3940426a 	ldrb	w10, [x19, #16]
   a8bb0:	b00000a4 	adrp	x4, bd000 <CNetDevice::s_SpeedString+0x18>
   a8bb4:	9100e084 	add	x4, x4, #0x38
   a8bb8:	f90003f8 	str	x24, [sp]
   a8bbc:	b0000063 	adrp	x3, b5000 <_etext+0x4158>
   a8bc0:	aa1403e1 	mov	x1, x20
   a8bc4:	39404668 	ldrb	w8, [x19, #17]
   a8bc8:	aa1503e7 	mov	x7, x21
   a8bcc:	aa1903e6 	mov	x6, x25
   a8bd0:	f90007f6 	str	x22, [sp, #8]
   a8bd4:	91210063 	add	x3, x3, #0x840
   a8bd8:	52800002 	mov	w2, #0x0                   	// #0
   a8bdc:	39402269 	ldrb	w9, [x19, #8]
   a8be0:	39402665 	ldrb	w5, [x19, #9]
   a8be4:	aa082148 	orr	x8, x10, x8, lsl #8
   a8be8:	39404a6c 	ldrb	w12, [x19, #18]
   a8bec:	39402a6b 	ldrb	w11, [x19, #10]
   a8bf0:	aa052125 	orr	x5, x9, x5, lsl #8
   a8bf4:	39404e6a 	ldrb	w10, [x19, #19]
   a8bf8:	aa0c410c 	orr	x12, x8, x12, lsl #16
   a8bfc:	3940626d 	ldrb	w13, [x19, #24]
   a8c00:	aa0b40ab 	orr	x11, x5, x11, lsl #16
   a8c04:	39406669 	ldrb	w9, [x19, #25]
   a8c08:	aa0a618a 	orr	x10, x12, x10, lsl #24
   a8c0c:	39402e68 	ldrb	w8, [x19, #11]
   a8c10:	39406a65 	ldrb	w5, [x19, #26]
   a8c14:	aa0921a9 	orr	x9, x13, x9, lsl #8
   a8c18:	3940526c 	ldrb	w12, [x19, #20]
   a8c1c:	aa086168 	orr	x8, x11, x8, lsl #24
   a8c20:	3940326b 	ldrb	w11, [x19, #12]
   a8c24:	aa054125 	orr	x5, x9, x5, lsl #16
   a8c28:	39406e69 	ldrb	w9, [x19, #27]
   a8c2c:	aa0c814c 	orr	x12, x10, x12, lsl #32
   a8c30:	3940566a 	ldrb	w10, [x19, #21]
   a8c34:	aa0b810b 	orr	x11, x8, x11, lsl #32
   a8c38:	39403668 	ldrb	w8, [x19, #13]
   a8c3c:	aa0960a9 	orr	x9, x5, x9, lsl #24
   a8c40:	39407265 	ldrb	w5, [x19, #28]
   a8c44:	aa0aa18a 	orr	x10, x12, x10, lsl #40
   a8c48:	39405a6c 	ldrb	w12, [x19, #22]
   a8c4c:	aa08a168 	orr	x8, x11, x8, lsl #40
   a8c50:	39403a6b 	ldrb	w11, [x19, #14]
   a8c54:	aa058125 	orr	x5, x9, x5, lsl #32
   a8c58:	39407669 	ldrb	w9, [x19, #29]
   a8c5c:	aa0cc14c 	orr	x12, x10, x12, lsl #48
   a8c60:	39405e6a 	ldrb	w10, [x19, #23]
   a8c64:	aa0bc10b 	orr	x11, x8, x11, lsl #48
   a8c68:	39403e68 	ldrb	w8, [x19, #15]
   a8c6c:	aa09a0a9 	orr	x9, x5, x9, lsl #40
   a8c70:	39407a65 	ldrb	w5, [x19, #30]
   a8c74:	aa0ae18a 	orr	x10, x12, x10, lsl #56
   a8c78:	39407e6c 	ldrb	w12, [x19, #31]
   a8c7c:	aa08e168 	orr	x8, x11, x8, lsl #56
   a8c80:	f9000bea 	str	x10, [sp, #16]
   a8c84:	aa05c125 	orr	x5, x9, x5, lsl #48
   a8c88:	f8775884 	ldr	x4, [x4, w23, uxtw #3]
   a8c8c:	f9000fe8 	str	x8, [sp, #24]
   a8c90:	aa0ce0a5 	orr	x5, x5, x12, lsl #56
   a8c94:	97ffdd4b 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a8c98:	a9427bfd 	ldp	x29, x30, [sp, #32]
   a8c9c:	a94353f3 	ldp	x19, x20, [sp, #48]
   a8ca0:	a9445bf5 	ldp	x21, x22, [sp, #64]
   a8ca4:	a94563f7 	ldp	x23, x24, [sp, #80]
   a8ca8:	f94033f9 	ldr	x25, [sp, #96]
   a8cac:	9101c3ff 	add	sp, sp, #0x70
   a8cb0:	d65f03c0 	ret
   a8cb4:	b0000061 	adrp	x1, b5000 <_etext+0x4158>
   a8cb8:	b0000060 	adrp	x0, b5000 <_etext+0x4158>
   a8cbc:	91206021 	add	x1, x1, #0x818
   a8cc0:	9120c000 	add	x0, x0, #0x830
   a8cc4:	528006c2 	mov	w2, #0x36                  	// #54
   a8cc8:	97ffd41e 	bl	9dd40 <assertion_failed>
   a8ccc:	d503201f 	nop

00000000000a8cd0 <CExceptionHandler::CExceptionHandler()>:
   a8cd0:	d0000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   a8cd4:	913a6021 	add	x1, x1, #0xe98
   a8cd8:	b00000a2 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   a8cdc:	f9411843 	ldr	x3, [x2, #560]
   a8ce0:	f9000001 	str	x1, [x0]
   a8ce4:	b5000063 	cbnz	x3, a8cf0 <CExceptionHandler::CExceptionHandler()+0x20>
   a8ce8:	f9011840 	str	x0, [x2, #560]
   a8cec:	d65f03c0 	ret
   a8cf0:	b0000061 	adrp	x1, b5000 <_etext+0x4158>
   a8cf4:	b0000060 	adrp	x0, b5000 <_etext+0x4158>
   a8cf8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a8cfc:	91206021 	add	x1, x1, #0x818
   a8d00:	910003fd 	mov	x29, sp
   a8d04:	91108000 	add	x0, x0, #0x420
   a8d08:	52800562 	mov	w2, #0x2b                  	// #43
   a8d0c:	97ffd40d 	bl	9dd40 <assertion_failed>

00000000000a8d10 <CExceptionHandler::Get()>:
   a8d10:	b00000a0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a8d14:	f9411800 	ldr	x0, [x0, #560]
   a8d18:	b4000040 	cbz	x0, a8d20 <CExceptionHandler::Get()+0x10>
   a8d1c:	d65f03c0 	ret
   a8d20:	b0000061 	adrp	x1, b5000 <_etext+0x4158>
   a8d24:	90000040 	adrp	x0, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   a8d28:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a8d2c:	91206021 	add	x1, x1, #0x818
   a8d30:	910003fd 	mov	x29, sp
   a8d34:	913ae000 	add	x0, x0, #0xeb8
   a8d38:	52800a82 	mov	w2, #0x54                  	// #84
   a8d3c:	97ffd401 	bl	9dd40 <assertion_failed>

00000000000a8d40 <ExceptionHandler>:
   a8d40:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a8d44:	910003fd 	mov	x29, sp
   a8d48:	a90153f3 	stp	x19, x20, [sp, #16]
   a8d4c:	aa0003f3 	mov	x19, x0
   a8d50:	aa0103f4 	mov	x20, x1
   a8d54:	9400093f 	bl	ab250 <CInterruptSystem::DisableFIQ()>
   a8d58:	d50341ff 	msr	daifclr, #0x1
   a8d5c:	b00000a0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a8d60:	f9411800 	ldr	x0, [x0, #560]
   a8d64:	b4000120 	cbz	x0, a8d88 <ExceptionHandler+0x48>
   a8d68:	f9400003 	ldr	x3, [x0]
   a8d6c:	aa1403e2 	mov	x2, x20
   a8d70:	2a1303e1 	mov	w1, w19
   a8d74:	a94153f3 	ldp	x19, x20, [sp, #16]
   a8d78:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a8d7c:	f9400863 	ldr	x3, [x3, #16]
   a8d80:	aa0303f0 	mov	x16, x3
   a8d84:	d61f0200 	br	x16
   a8d88:	b0000061 	adrp	x1, b5000 <_etext+0x4158>
   a8d8c:	90000040 	adrp	x0, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   a8d90:	91206021 	add	x1, x1, #0x818
   a8d94:	913ae000 	add	x0, x0, #0xeb8
   a8d98:	52800a82 	mov	w2, #0x54                  	// #84
   a8d9c:	97ffd3e9 	bl	9dd40 <assertion_failed>

00000000000a8da0 <CMemorySystem::Destructor()>:
   a8da0:	b00000a2 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   a8da4:	f9411c41 	ldr	x1, [x2, #568]
   a8da8:	eb00003f 	cmp	x1, x0
   a8dac:	54000040 	b.eq	a8db4 <CMemorySystem::Destructor()+0x14>  // b.none
   a8db0:	d65f03c0 	ret
   a8db4:	39400020 	ldrb	w0, [x1]
   a8db8:	f9011c5f 	str	xzr, [x2, #568]
   a8dbc:	34ffffa0 	cbz	w0, a8db0 <CMemorySystem::Destructor()+0x10>
   a8dc0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a8dc4:	910003fd 	mov	x29, sp
   a8dc8:	d5381000 	mrs	x0, sctlr_el1
   a8dcc:	928000a1 	mov	x1, #0xfffffffffffffffa    	// #-6
   a8dd0:	8a010000 	and	x0, x0, x1
   a8dd4:	d5181000 	msr	sctlr_el1, x0
   a8dd8:	d5033f9f 	dsb	sy
   a8ddc:	d5033fdf 	isb
   a8de0:	9400017c 	bl	a93d0 <CleanDataCache>
   a8de4:	9400011f 	bl	a9260 <InvalidateDataCache>
   a8de8:	d508871f 	tlbi	vmalle1
   a8dec:	d5033f9f 	dsb	sy
   a8df0:	d5033fdf 	isb
   a8df4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a8df8:	d65f03c0 	ret
   a8dfc:	d503201f 	nop

00000000000a8e00 <CMemorySystem::~CMemorySystem()>:
   a8e00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a8e04:	910003fd 	mov	x29, sp
   a8e08:	f9000bf3 	str	x19, [sp, #16]
   a8e0c:	aa0003f3 	mov	x19, x0
   a8e10:	97ffffe4 	bl	a8da0 <CMemorySystem::Destructor()>
   a8e14:	910c2260 	add	x0, x19, #0x308
   a8e18:	940017ce 	bl	aed50 <CPageAllocator::~CPageAllocator()>
   a8e1c:	91064260 	add	x0, x19, #0x190
   a8e20:	97fffd6c 	bl	a83d0 <CHeapAllocator::~CHeapAllocator()>
   a8e24:	91006260 	add	x0, x19, #0x18
   a8e28:	f9400bf3 	ldr	x19, [sp, #16]
   a8e2c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a8e30:	17fffd68 	b	a83d0 <CHeapAllocator::~CHeapAllocator()>
   a8e34:	d503201f 	nop
   a8e38:	d503201f 	nop
   a8e3c:	d503201f 	nop

00000000000a8e40 <CMemorySystem::SetupHighMem()>:
   a8e40:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a8e44:	910003fd 	mov	x29, sp
   a8e48:	f9000bf3 	str	x19, [sp, #16]
   a8e4c:	aa0003f3 	mov	x19, x0
   a8e50:	97ffe074 	bl	a1020 <CMachineInfo::Get()>
   a8e54:	97ffdd77 	bl	a0430 <CMachineInfo::GetRAMSize() const>
   a8e58:	7110001f 	cmp	w0, #0x400
   a8e5c:	54000088 	b.hi	a8e6c <CMemorySystem::SetupHighMem()+0x2c>  // b.pmore
   a8e60:	f9400bf3 	ldr	x19, [sp, #16]
   a8e64:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a8e68:	d65f03c0 	ret
   a8e6c:	51100002 	sub	w2, w0, #0x400
   a8e70:	d2b00001 	mov	x1, #0x80000000            	// #2147483648
   a8e74:	530c2c42 	lsl	w2, w2, #20
   a8e78:	91064260 	add	x0, x19, #0x190
   a8e7c:	eb01005f 	cmp	x2, x1
   a8e80:	d2800003 	mov	x3, #0x0                   	// #0
   a8e84:	9a819042 	csel	x2, x2, x1, ls	// ls = plast
   a8e88:	d2a80001 	mov	x1, #0x40000000            	// #1073741824
   a8e8c:	f9000a62 	str	x2, [x19, #16]
   a8e90:	f9400bf3 	ldr	x19, [sp, #16]
   a8e94:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a8e98:	17fffd52 	b	a83e0 <CHeapAllocator::Setup(unsigned long, unsigned long, unsigned long)>
   a8e9c:	d503201f 	nop

00000000000a8ea0 <CMemorySystem::GetMemSize() const>:
   a8ea0:	b00000a0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a8ea4:	f9411c01 	ldr	x1, [x0, #568]
   a8ea8:	b4000081 	cbz	x1, a8eb8 <CMemorySystem::GetMemSize() const+0x18>
   a8eac:	a9408022 	ldp	x2, x0, [x1, #8]
   a8eb0:	8b000040 	add	x0, x2, x0
   a8eb4:	d65f03c0 	ret
   a8eb8:	d0000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   a8ebc:	913ae021 	add	x1, x1, #0xeb8
   a8ec0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a8ec4:	91004020 	add	x0, x1, #0x10
   a8ec8:	910003fd 	mov	x29, sp
   a8ecc:	52801202 	mov	w2, #0x90                  	// #144
   a8ed0:	97ffd39c 	bl	9dd40 <assertion_failed>
   a8ed4:	d503201f 	nop
   a8ed8:	d503201f 	nop
   a8edc:	d503201f 	nop

00000000000a8ee0 <CMemorySystem::Get()>:
   a8ee0:	b00000a0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a8ee4:	f9411c00 	ldr	x0, [x0, #568]
   a8ee8:	b4000040 	cbz	x0, a8ef0 <CMemorySystem::Get()+0x10>
   a8eec:	d65f03c0 	ret
   a8ef0:	d0000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   a8ef4:	913ae021 	add	x1, x1, #0xeb8
   a8ef8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a8efc:	91004020 	add	x0, x1, #0x10
   a8f00:	910003fd 	mov	x29, sp
   a8f04:	528012c2 	mov	w2, #0x96                  	// #150
   a8f08:	97ffd38e 	bl	9dd40 <assertion_failed>
   a8f0c:	d503201f 	nop

00000000000a8f10 <CMemorySystem::EnableMMU()>:
   a8f10:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a8f14:	910003fd 	mov	x29, sp
   a8f18:	39400001 	ldrb	w1, [x0]
   a8f1c:	34000341 	cbz	w1, a8f84 <CMemorySystem::EnableMMU()+0x74>
   a8f20:	d2809fe1 	mov	x1, #0x4ff                 	// #1279
   a8f24:	d518a201 	msr	mair_el1, x1
   a8f28:	f9419400 	ldr	x0, [x0, #808]
   a8f2c:	b4000360 	cbz	x0, a8f98 <CMemorySystem::EnableMMU()+0x88>
   a8f30:	940001b4 	bl	a9600 <CTranslationTable::GetBaseAddress() const>
   a8f34:	d5182000 	msr	ttbr0_el1, x0
   a8f38:	d5382040 	mrs	x0, tcr_el1
   a8f3c:	929ff7e2 	mov	x2, #0xffffffffffff0040    	// #-65472
   a8f40:	f2bff7e2 	movk	x2, #0xffbf, lsl #16
   a8f44:	f2dfff02 	movk	x2, #0xfff8, lsl #32
   a8f48:	d28ea381 	mov	x1, #0x751c                	// #29980
   a8f4c:	f2a01001 	movk	x1, #0x80, lsl #16
   a8f50:	8a020000 	and	x0, x0, x2
   a8f54:	f2c00021 	movk	x1, #0x1, lsl #32
   a8f58:	aa010000 	orr	x0, x0, x1
   a8f5c:	d5182040 	msr	tcr_el1, x0
   a8f60:	d5381000 	mrs	x0, sctlr_el1
   a8f64:	92800042 	mov	x2, #0xfffffffffffffffd    	// #-3
   a8f68:	f2bffee2 	movk	x2, #0xfff7, lsl #16
   a8f6c:	d28200a1 	mov	x1, #0x1005                	// #4101
   a8f70:	8a020000 	and	x0, x0, x2
   a8f74:	aa010000 	orr	x0, x0, x1
   a8f78:	d5181000 	msr	sctlr_el1, x0
   a8f7c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a8f80:	d65f03c0 	ret
   a8f84:	d0000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   a8f88:	913ae021 	add	x1, x1, #0xeb8
   a8f8c:	91008020 	add	x0, x1, #0x20
   a8f90:	52801382 	mov	w2, #0x9c                  	// #156
   a8f94:	97ffd36b 	bl	9dd40 <assertion_failed>
   a8f98:	d0000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   a8f9c:	913ae021 	add	x1, x1, #0xeb8
   a8fa0:	9100c020 	add	x0, x1, #0x30
   a8fa4:	52801462 	mov	w2, #0xa3                  	// #163
   a8fa8:	97ffd366 	bl	9dd40 <assertion_failed>
   a8fac:	d503201f 	nop

00000000000a8fb0 <CMemorySystem::CMemorySystem(bool)>:
   a8fb0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   a8fb4:	910003fd 	mov	x29, sp
   a8fb8:	a90153f3 	stp	x19, x20, [sp, #16]
   a8fbc:	aa0003f3 	mov	x19, x0
   a8fc0:	d0000094 	adrp	x20, ba000 <CursorSymbol+0x188>
   a8fc4:	913ae294 	add	x20, x20, #0xeb8
   a8fc8:	a9025bf5 	stp	x21, x22, [sp, #32]
   a8fcc:	91006016 	add	x22, x0, #0x18
   a8fd0:	910c2015 	add	x21, x0, #0x308
   a8fd4:	aa1603e0 	mov	x0, x22
   a8fd8:	39000261 	strb	w1, [x19]
   a8fdc:	91014281 	add	x1, x20, #0x50
   a8fe0:	a900fe7f 	stp	xzr, xzr, [x19, #8]
   a8fe4:	97fffcdf 	bl	a8360 <CHeapAllocator::CHeapAllocator(char const*)>
   a8fe8:	91016281 	add	x1, x20, #0x58
   a8fec:	91064260 	add	x0, x19, #0x190
   a8ff0:	97fffcdc 	bl	a8360 <CHeapAllocator::CHeapAllocator(char const*)>
   a8ff4:	aa1503e0 	mov	x0, x21
   a8ff8:	9400174e 	bl	aed30 <CPageAllocator::CPageAllocator()>
   a8ffc:	b00000a0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a9000:	f901967f 	str	xzr, [x19, #808]
   a9004:	f9411c01 	ldr	x1, [x0, #568]
   a9008:	b40000a1 	cbz	x1, a901c <CMemorySystem::CMemorySystem(bool)+0x6c>
   a900c:	a94153f3 	ldp	x19, x20, [sp, #16]
   a9010:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a9014:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a9018:	d65f03c0 	ret
   a901c:	52800021 	mov	w1, #0x1                   	// #1
   a9020:	f9011c13 	str	x19, [x0, #568]
   a9024:	9100c3e0 	add	x0, sp, #0x30
   a9028:	97ffd36a 	bl	9ddd0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   a902c:	9100c3e0 	add	x0, sp, #0x30
   a9030:	528000a1 	mov	w1, #0x5                   	// #5
   a9034:	72a00021 	movk	w1, #0x1, lsl #16
   a9038:	52800004 	mov	w4, #0x0                   	// #0
   a903c:	52800283 	mov	w3, #0x14                  	// #20
   a9040:	9100e3e2 	add	x2, sp, #0x38
   a9044:	97ffd3c3 	bl	9df50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   a9048:	72001c1f 	tst	w0, #0xff
   a904c:	54000340 	b.eq	a90b4 <CMemorySystem::CMemorySystem(bool)+0x104>  // b.none
   a9050:	b94047e0 	ldr	w0, [sp, #68]
   a9054:	35000500 	cbnz	w0, a90f4 <CMemorySystem::CMemorySystem(bool)+0x144>
   a9058:	b9404be1 	ldr	w1, [sp, #72]
   a905c:	b2689ff4 	mov	x20, #0xffffffffff000000    	// #-16777216
   a9060:	929fffe2 	mov	x2, #0xffffffffffff0000    	// #-65536
   a9064:	f2bfce02 	movk	x2, #0xfe70, lsl #16
   a9068:	8b140034 	add	x20, x1, x20
   a906c:	8b020022 	add	x2, x1, x2
   a9070:	aa1603e0 	mov	x0, x22
   a9074:	d2a00083 	mov	x3, #0x40000               	// #262144
   a9078:	f9000661 	str	x1, [x19, #8]
   a907c:	d2a01201 	mov	x1, #0x900000              	// #9437184
   a9080:	97fffcd8 	bl	a83e0 <CHeapAllocator::Setup(unsigned long, unsigned long, unsigned long)>
   a9084:	aa1503e0 	mov	x0, x21
   a9088:	aa1403e1 	mov	x1, x20
   a908c:	d2a02002 	mov	x2, #0x1000000             	// #16777216
   a9090:	94001734 	bl	aed60 <CPageAllocator::Setup(unsigned long, unsigned long)>
   a9094:	39400260 	ldrb	w0, [x19]
   a9098:	350001a0 	cbnz	w0, a90cc <CMemorySystem::CMemorySystem(bool)+0x11c>
   a909c:	9100c3e0 	add	x0, sp, #0x30
   a90a0:	97ffd350 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   a90a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   a90a8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a90ac:	a8c57bfd 	ldp	x29, x30, [sp], #80
   a90b0:	d65f03c0 	ret
   a90b4:	52a38000 	mov	w0, #0x1c000000            	// #469762048
   a90b8:	d2a34e02 	mov	x2, #0x1a700000            	// #443547648
   a90bc:	d2a36014 	mov	x20, #0x1b000000            	// #452984832
   a90c0:	d2a38001 	mov	x1, #0x1c000000            	// #469762048
   a90c4:	290883ff 	stp	wzr, w0, [sp, #68]
   a90c8:	17ffffea 	b	a9070 <CMemorySystem::CMemorySystem(bool)+0xc0>
   a90cc:	d2800200 	mov	x0, #0x10                  	// #16
   a90d0:	97fffc64 	bl	a8260 <operator new(unsigned long)>
   a90d4:	f9400661 	ldr	x1, [x19, #8]
   a90d8:	aa0003f4 	mov	x20, x0
   a90dc:	94000211 	bl	a9920 <CTranslationTable::CTranslationTable(unsigned long)>
   a90e0:	aa1303e0 	mov	x0, x19
   a90e4:	f9019674 	str	x20, [x19, #808]
   a90e8:	97ffff8a 	bl	a8f10 <CMemorySystem::EnableMMU()>
   a90ec:	d5033fdf 	isb
   a90f0:	17ffffeb 	b	a909c <CMemorySystem::CMemorySystem(bool)+0xec>
   a90f4:	528006e2 	mov	w2, #0x37                  	// #55
   a90f8:	aa1403e1 	mov	x1, x20
   a90fc:	9101a280 	add	x0, x20, #0x68
   a9100:	97ffd310 	bl	9dd40 <assertion_failed>
   a9104:	d503201f 	nop
   a9108:	d503201f 	nop
   a910c:	d503201f 	nop

00000000000a9110 <CMemorySystem::GetCoherentPage(unsigned int)>:
   a9110:	53103c00 	lsl	w0, w0, #16
   a9114:	91540000 	add	x0, x0, #0x500, lsl #12
   a9118:	d65f03c0 	ret
   a911c:	00000000 	udf	#0

00000000000a9120 <CurrentExecutionLevel>:
   a9120:	d53b4221 	mrs	x1, daif
   a9124:	52800040 	mov	w0, #0x2                   	// #2
   a9128:	f27a003f 	tst	x1, #0x40
   a912c:	53071c21 	ubfx	w1, w1, #7, #1
   a9130:	1a800020 	csel	w0, w1, w0, eq	// eq = none
   a9134:	d65f03c0 	ret
   a9138:	d503201f 	nop
   a913c:	d503201f 	nop

00000000000a9140 <EnterCritical>:
   a9140:	51000401 	sub	w1, w0, #0x1
   a9144:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a9148:	910003fd 	mov	x29, sp
   a914c:	7100043f 	cmp	w1, #0x1
   a9150:	540002c8 	b.hi	a91a8 <EnterCritical+0x68>  // b.pmore
   a9154:	d53b4224 	mrs	x4, daif
   a9158:	7100081f 	cmp	w0, #0x2
   a915c:	54000321 	b.ne	a91c0 <EnterCritical+0x80>  // b.any
   a9160:	d50343df 	msr	daifset, #0x3
   a9164:	900000a1 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   a9168:	91090023 	add	x3, x1, #0x240
   a916c:	b9424022 	ldr	w2, [x1, #576]
   a9170:	71004c5f 	cmp	w2, #0x13
   a9174:	54000348 	b.hi	a91dc <EnterCritical+0x9c>  // b.pmore
   a9178:	b9424022 	ldr	w2, [x1, #576]
   a917c:	7100041f 	cmp	w0, #0x1
   a9180:	91002063 	add	x3, x3, #0x8
   a9184:	11000440 	add	w0, w2, #0x1
   a9188:	2a0203e2 	mov	w2, w2
   a918c:	b9024020 	str	w0, [x1, #576]
   a9190:	f8227864 	str	x4, [x3, x2, lsl #3]
   a9194:	54000041 	b.ne	a919c <EnterCritical+0x5c>  // b.any
   a9198:	d50341ff 	msr	daifclr, #0x1
   a919c:	d5033fbf 	dmb	sy
   a91a0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a91a4:	d65f03c0 	ret
   a91a8:	90000061 	adrp	x1, b5000 <_etext+0x4158>
   a91ac:	90000060 	adrp	x0, b5000 <_etext+0x4158>
   a91b0:	91234021 	add	x1, x1, #0x8d0
   a91b4:	9123a000 	add	x0, x0, #0x8e8
   a91b8:	52800d22 	mov	w2, #0x69                  	// #105
   a91bc:	97ffd2e1 	bl	9dd40 <assertion_failed>
   a91c0:	3637fd04 	tbz	w4, #6, a9160 <EnterCritical+0x20>
   a91c4:	90000061 	adrp	x1, b5000 <_etext+0x4158>
   a91c8:	90000060 	adrp	x0, b5000 <_etext+0x4158>
   a91cc:	91234021 	add	x1, x1, #0x8d0
   a91d0:	91248000 	add	x0, x0, #0x920
   a91d4:	52800de2 	mov	w2, #0x6f                  	// #111
   a91d8:	97ffd2da 	bl	9dd40 <assertion_failed>
   a91dc:	90000061 	adrp	x1, b5000 <_etext+0x4158>
   a91e0:	90000060 	adrp	x0, b5000 <_etext+0x4158>
   a91e4:	91234021 	add	x1, x1, #0x8d0
   a91e8:	91254000 	add	x0, x0, #0x950
   a91ec:	52800e62 	mov	w2, #0x73                  	// #115
   a91f0:	97ffd2d4 	bl	9dd40 <assertion_failed>
   a91f4:	d503201f 	nop
   a91f8:	d503201f 	nop
   a91fc:	d503201f 	nop

00000000000a9200 <LeaveCritical>:
   a9200:	d5033fbf 	dmb	sy
   a9204:	d50341df 	msr	daifset, #0x1
   a9208:	900000a0 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   a920c:	b9424001 	ldr	w1, [x0, #576]
   a9210:	34000121 	cbz	w1, a9234 <LeaveCritical+0x34>
   a9214:	b9424001 	ldr	w1, [x0, #576]
   a9218:	91090002 	add	x2, x0, #0x240
   a921c:	91002042 	add	x2, x2, #0x8
   a9220:	51000423 	sub	w3, w1, #0x1
   a9224:	b9024003 	str	w3, [x0, #576]
   a9228:	f8637840 	ldr	x0, [x2, x3, lsl #3]
   a922c:	d51b4220 	msr	daif, x0
   a9230:	d65f03c0 	ret
   a9234:	90000061 	adrp	x1, b5000 <_etext+0x4158>
   a9238:	90000060 	adrp	x0, b5000 <_etext+0x4158>
   a923c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a9240:	91234021 	add	x1, x1, #0x8d0
   a9244:	910003fd 	mov	x29, sp
   a9248:	9125e000 	add	x0, x0, #0x978
   a924c:	52801082 	mov	w2, #0x84                  	// #132
   a9250:	97ffd2bc 	bl	9dd40 <assertion_failed>
   a9254:	d503201f 	nop
   a9258:	d503201f 	nop
   a925c:	d503201f 	nop

00000000000a9260 <InvalidateDataCache>:
   a9260:	d2800000 	mov	x0, #0x0                   	// #0
   a9264:	d503201f 	nop
   a9268:	d5087640 	dc	isw, x0
   a926c:	32010001 	orr	w1, w0, #0x80000000
   a9270:	d5087641 	dc	isw, x1
   a9274:	91010000 	add	x0, x0, #0x40
   a9278:	f140101f 	cmp	x0, #0x4, lsl #12
   a927c:	54ffff61 	b.ne	a9268 <InvalidateDataCache+0x8>  // b.any
   a9280:	52800050 	mov	w16, #0x2                   	// #2
   a9284:	72a20010 	movk	w16, #0x1000, lsl #16
   a9288:	5280004f 	mov	w15, #0x2                   	// #2
   a928c:	72a4000f 	movk	w15, #0x2000, lsl #16
   a9290:	5280004e 	mov	w14, #0x2                   	// #2
   a9294:	72a6000e 	movk	w14, #0x3000, lsl #16
   a9298:	5280004d 	mov	w13, #0x2                   	// #2
   a929c:	72a8000d 	movk	w13, #0x4000, lsl #16
   a92a0:	5280004c 	mov	w12, #0x2                   	// #2
   a92a4:	72aa000c 	movk	w12, #0x5000, lsl #16
   a92a8:	5280004b 	mov	w11, #0x2                   	// #2
   a92ac:	72ac000b 	movk	w11, #0x6000, lsl #16
   a92b0:	5280004a 	mov	w10, #0x2                   	// #2
   a92b4:	72ae000a 	movk	w10, #0x7000, lsl #16
   a92b8:	52800049 	mov	w9, #0x2                   	// #2
   a92bc:	72b00009 	movk	w9, #0x8000, lsl #16
   a92c0:	52800048 	mov	w8, #0x2                   	// #2
   a92c4:	72b20008 	movk	w8, #0x9000, lsl #16
   a92c8:	52800047 	mov	w7, #0x2                   	// #2
   a92cc:	72b40007 	movk	w7, #0xa000, lsl #16
   a92d0:	52800046 	mov	w6, #0x2                   	// #2
   a92d4:	72b60006 	movk	w6, #0xb000, lsl #16
   a92d8:	52800045 	mov	w5, #0x2                   	// #2
   a92dc:	72b80005 	movk	w5, #0xc000, lsl #16
   a92e0:	52800044 	mov	w4, #0x2                   	// #2
   a92e4:	72ba0004 	movk	w4, #0xd000, lsl #16
   a92e8:	52800043 	mov	w3, #0x2                   	// #2
   a92ec:	72bc0003 	movk	w3, #0xe000, lsl #16
   a92f0:	52800042 	mov	w2, #0x2                   	// #2
   a92f4:	72be0002 	movk	w2, #0xf000, lsl #16
   a92f8:	52800000 	mov	w0, #0x0                   	// #0
   a92fc:	d503201f 	nop
   a9300:	321f0001 	orr	w1, w0, #0x2
   a9304:	d5087641 	dc	isw, x1
   a9308:	2a100001 	orr	w1, w0, w16
   a930c:	d5087641 	dc	isw, x1
   a9310:	2a0f0001 	orr	w1, w0, w15
   a9314:	d5087641 	dc	isw, x1
   a9318:	2a0e0001 	orr	w1, w0, w14
   a931c:	d5087641 	dc	isw, x1
   a9320:	2a0d0001 	orr	w1, w0, w13
   a9324:	d5087641 	dc	isw, x1
   a9328:	2a0c0001 	orr	w1, w0, w12
   a932c:	d5087641 	dc	isw, x1
   a9330:	2a0b0001 	orr	w1, w0, w11
   a9334:	d5087641 	dc	isw, x1
   a9338:	2a0a0001 	orr	w1, w0, w10
   a933c:	d5087641 	dc	isw, x1
   a9340:	2a090001 	orr	w1, w0, w9
   a9344:	d5087641 	dc	isw, x1
   a9348:	2a080001 	orr	w1, w0, w8
   a934c:	d5087641 	dc	isw, x1
   a9350:	2a070001 	orr	w1, w0, w7
   a9354:	d5087641 	dc	isw, x1
   a9358:	2a060001 	orr	w1, w0, w6
   a935c:	d5087641 	dc	isw, x1
   a9360:	2a050001 	orr	w1, w0, w5
   a9364:	d5087641 	dc	isw, x1
   a9368:	2a040001 	orr	w1, w0, w4
   a936c:	d5087641 	dc	isw, x1
   a9370:	2a030001 	orr	w1, w0, w3
   a9374:	d5087641 	dc	isw, x1
   a9378:	2a020001 	orr	w1, w0, w2
   a937c:	d5087641 	dc	isw, x1
   a9380:	11010000 	add	w0, w0, #0x40
   a9384:	7140401f 	cmp	w0, #0x10, lsl #12
   a9388:	54fffbc1 	b.ne	a9300 <InvalidateDataCache+0xa0>  // b.any
   a938c:	d5033f9f 	dsb	sy
   a9390:	d65f03c0 	ret
   a9394:	d503201f 	nop
   a9398:	d503201f 	nop
   a939c:	d503201f 	nop

00000000000a93a0 <InvalidateDataCacheL1Only>:
   a93a0:	d2800000 	mov	x0, #0x0                   	// #0
   a93a4:	d503201f 	nop
   a93a8:	d5087640 	dc	isw, x0
   a93ac:	32010001 	orr	w1, w0, #0x80000000
   a93b0:	d5087641 	dc	isw, x1
   a93b4:	91010000 	add	x0, x0, #0x40
   a93b8:	f140101f 	cmp	x0, #0x4, lsl #12
   a93bc:	54ffff61 	b.ne	a93a8 <InvalidateDataCacheL1Only+0x8>  // b.any
   a93c0:	d5033f9f 	dsb	sy
   a93c4:	d65f03c0 	ret
   a93c8:	d503201f 	nop
   a93cc:	d503201f 	nop

00000000000a93d0 <CleanDataCache>:
   a93d0:	d2800000 	mov	x0, #0x0                   	// #0
   a93d4:	d503201f 	nop
   a93d8:	d5087a40 	dc	csw, x0
   a93dc:	32010001 	orr	w1, w0, #0x80000000
   a93e0:	d5087a41 	dc	csw, x1
   a93e4:	91010000 	add	x0, x0, #0x40
   a93e8:	f140101f 	cmp	x0, #0x4, lsl #12
   a93ec:	54ffff61 	b.ne	a93d8 <CleanDataCache+0x8>  // b.any
   a93f0:	52800050 	mov	w16, #0x2                   	// #2
   a93f4:	72a20010 	movk	w16, #0x1000, lsl #16
   a93f8:	5280004f 	mov	w15, #0x2                   	// #2
   a93fc:	72a4000f 	movk	w15, #0x2000, lsl #16
   a9400:	5280004e 	mov	w14, #0x2                   	// #2
   a9404:	72a6000e 	movk	w14, #0x3000, lsl #16
   a9408:	5280004d 	mov	w13, #0x2                   	// #2
   a940c:	72a8000d 	movk	w13, #0x4000, lsl #16
   a9410:	5280004c 	mov	w12, #0x2                   	// #2
   a9414:	72aa000c 	movk	w12, #0x5000, lsl #16
   a9418:	5280004b 	mov	w11, #0x2                   	// #2
   a941c:	72ac000b 	movk	w11, #0x6000, lsl #16
   a9420:	5280004a 	mov	w10, #0x2                   	// #2
   a9424:	72ae000a 	movk	w10, #0x7000, lsl #16
   a9428:	52800049 	mov	w9, #0x2                   	// #2
   a942c:	72b00009 	movk	w9, #0x8000, lsl #16
   a9430:	52800048 	mov	w8, #0x2                   	// #2
   a9434:	72b20008 	movk	w8, #0x9000, lsl #16
   a9438:	52800047 	mov	w7, #0x2                   	// #2
   a943c:	72b40007 	movk	w7, #0xa000, lsl #16
   a9440:	52800046 	mov	w6, #0x2                   	// #2
   a9444:	72b60006 	movk	w6, #0xb000, lsl #16
   a9448:	52800045 	mov	w5, #0x2                   	// #2
   a944c:	72b80005 	movk	w5, #0xc000, lsl #16
   a9450:	52800044 	mov	w4, #0x2                   	// #2
   a9454:	72ba0004 	movk	w4, #0xd000, lsl #16
   a9458:	52800043 	mov	w3, #0x2                   	// #2
   a945c:	72bc0003 	movk	w3, #0xe000, lsl #16
   a9460:	52800042 	mov	w2, #0x2                   	// #2
   a9464:	72be0002 	movk	w2, #0xf000, lsl #16
   a9468:	52800000 	mov	w0, #0x0                   	// #0
   a946c:	d503201f 	nop
   a9470:	321f0001 	orr	w1, w0, #0x2
   a9474:	d5087a41 	dc	csw, x1
   a9478:	2a100001 	orr	w1, w0, w16
   a947c:	d5087a41 	dc	csw, x1
   a9480:	2a0f0001 	orr	w1, w0, w15
   a9484:	d5087a41 	dc	csw, x1
   a9488:	2a0e0001 	orr	w1, w0, w14
   a948c:	d5087a41 	dc	csw, x1
   a9490:	2a0d0001 	orr	w1, w0, w13
   a9494:	d5087a41 	dc	csw, x1
   a9498:	2a0c0001 	orr	w1, w0, w12
   a949c:	d5087a41 	dc	csw, x1
   a94a0:	2a0b0001 	orr	w1, w0, w11
   a94a4:	d5087a41 	dc	csw, x1
   a94a8:	2a0a0001 	orr	w1, w0, w10
   a94ac:	d5087a41 	dc	csw, x1
   a94b0:	2a090001 	orr	w1, w0, w9
   a94b4:	d5087a41 	dc	csw, x1
   a94b8:	2a080001 	orr	w1, w0, w8
   a94bc:	d5087a41 	dc	csw, x1
   a94c0:	2a070001 	orr	w1, w0, w7
   a94c4:	d5087a41 	dc	csw, x1
   a94c8:	2a060001 	orr	w1, w0, w6
   a94cc:	d5087a41 	dc	csw, x1
   a94d0:	2a050001 	orr	w1, w0, w5
   a94d4:	d5087a41 	dc	csw, x1
   a94d8:	2a040001 	orr	w1, w0, w4
   a94dc:	d5087a41 	dc	csw, x1
   a94e0:	2a030001 	orr	w1, w0, w3
   a94e4:	d5087a41 	dc	csw, x1
   a94e8:	2a020001 	orr	w1, w0, w2
   a94ec:	d5087a41 	dc	csw, x1
   a94f0:	11010000 	add	w0, w0, #0x40
   a94f4:	7140401f 	cmp	w0, #0x10, lsl #12
   a94f8:	54fffbc1 	b.ne	a9470 <CleanDataCache+0xa0>  // b.any
   a94fc:	d5033f9f 	dsb	sy
   a9500:	d65f03c0 	ret
   a9504:	d503201f 	nop
   a9508:	d503201f 	nop
   a950c:	d503201f 	nop

00000000000a9510 <InvalidateDataCacheRange>:
   a9510:	d5087620 	dc	ivac, x0
   a9514:	f101003f 	cmp	x1, #0x40
   a9518:	54000149 	b.ls	a9540 <InvalidateDataCacheRange+0x30>  // b.plast
   a951c:	d1010421 	sub	x1, x1, #0x41
   a9520:	91010000 	add	x0, x0, #0x40
   a9524:	927ae421 	and	x1, x1, #0xffffffffffffffc0
   a9528:	8b000021 	add	x1, x1, x0
   a952c:	d503201f 	nop
   a9530:	d5087620 	dc	ivac, x0
   a9534:	eb01001f 	cmp	x0, x1
   a9538:	91010000 	add	x0, x0, #0x40
   a953c:	54ffffa1 	b.ne	a9530 <InvalidateDataCacheRange+0x20>  // b.any
   a9540:	d5033f9f 	dsb	sy
   a9544:	d65f03c0 	ret
   a9548:	d503201f 	nop
   a954c:	d503201f 	nop

00000000000a9550 <CleanDataCacheRange>:
   a9550:	d50b7a20 	dc	cvac, x0
   a9554:	f101003f 	cmp	x1, #0x40
   a9558:	54000149 	b.ls	a9580 <CleanDataCacheRange+0x30>  // b.plast
   a955c:	d1010421 	sub	x1, x1, #0x41
   a9560:	91010000 	add	x0, x0, #0x40
   a9564:	927ae421 	and	x1, x1, #0xffffffffffffffc0
   a9568:	8b000021 	add	x1, x1, x0
   a956c:	d503201f 	nop
   a9570:	d50b7a20 	dc	cvac, x0
   a9574:	eb01001f 	cmp	x0, x1
   a9578:	91010000 	add	x0, x0, #0x40
   a957c:	54ffffa1 	b.ne	a9570 <CleanDataCacheRange+0x20>  // b.any
   a9580:	d5033f9f 	dsb	sy
   a9584:	d65f03c0 	ret
   a9588:	d503201f 	nop
   a958c:	d503201f 	nop

00000000000a9590 <CleanAndInvalidateDataCacheRange>:
   a9590:	d50b7e20 	dc	civac, x0
   a9594:	f101003f 	cmp	x1, #0x40
   a9598:	54000149 	b.ls	a95c0 <CleanAndInvalidateDataCacheRange+0x30>  // b.plast
   a959c:	d1010421 	sub	x1, x1, #0x41
   a95a0:	91010000 	add	x0, x0, #0x40
   a95a4:	927ae421 	and	x1, x1, #0xffffffffffffffc0
   a95a8:	8b000021 	add	x1, x1, x0
   a95ac:	d503201f 	nop
   a95b0:	d50b7e20 	dc	civac, x0
   a95b4:	eb01001f 	cmp	x0, x1
   a95b8:	91010000 	add	x0, x0, #0x40
   a95bc:	54ffffa1 	b.ne	a95b0 <CleanAndInvalidateDataCacheRange+0x20>  // b.any
   a95c0:	d5033f9f 	dsb	sy
   a95c4:	d65f03c0 	ret
   a95c8:	d503201f 	nop
   a95cc:	d503201f 	nop

00000000000a95d0 <SyncDataAndInstructionCache>:
   a95d0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a95d4:	910003fd 	mov	x29, sp
   a95d8:	97ffff7e 	bl	a93d0 <CleanDataCache>
   a95dc:	d508751f 	ic	iallu
   a95e0:	d5033f9f 	dsb	sy
   a95e4:	d5033fdf 	isb
   a95e8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a95ec:	d65f03c0 	ret

00000000000a95f0 <CTranslationTable::~CTranslationTable()>:
   a95f0:	f9400400 	ldr	x0, [x0, #8]
   a95f4:	14000e67 	b	acf90 <pfree>
   a95f8:	d503201f 	nop
   a95fc:	d503201f 	nop

00000000000a9600 <CTranslationTable::GetBaseAddress() const>:
   a9600:	f9400400 	ldr	x0, [x0, #8]
   a9604:	b4000040 	cbz	x0, a960c <CTranslationTable::GetBaseAddress() const+0xc>
   a9608:	d65f03c0 	ret
   a960c:	90000061 	adrp	x1, b5000 <_etext+0x4158>
   a9610:	90000060 	adrp	x0, b5000 <_etext+0x4158>
   a9614:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a9618:	91264021 	add	x1, x1, #0x990
   a961c:	910003fd 	mov	x29, sp
   a9620:	9126a000 	add	x0, x0, #0x9a8
   a9624:	52800ce2 	mov	w2, #0x67                  	// #103
   a9628:	97ffd1c6 	bl	9dd40 <assertion_failed>
   a962c:	d503201f 	nop

00000000000a9630 <CTranslationTable::CreateLevel3Table(unsigned long)>:
   a9630:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a9634:	910003fd 	mov	x29, sp
   a9638:	f9000fe0 	str	x0, [sp, #24]
   a963c:	f9000be1 	str	x1, [sp, #16]
   a9640:	94000e50 	bl	acf80 <palloc>
   a9644:	f9001be0 	str	x0, [sp, #48]
   a9648:	f9401be0 	ldr	x0, [sp, #48]
   a964c:	f100001f 	cmp	x0, #0x0
   a9650:	1a9f07e0 	cset	w0, ne	// ne = any
   a9654:	12001c00 	and	w0, w0, #0xff
   a9658:	92401c00 	and	x0, x0, #0xff
   a965c:	f100001f 	cmp	x0, #0x0
   a9660:	540000e1 	b.ne	a967c <CTranslationTable::CreateLevel3Table(unsigned long)+0x4c>  // b.any
   a9664:	52800dc2 	mov	w2, #0x6e                  	// #110
   a9668:	90000060 	adrp	x0, b5000 <_etext+0x4158>
   a966c:	91264001 	add	x1, x0, #0x990
   a9670:	90000060 	adrp	x0, b5000 <_etext+0x4158>
   a9674:	9126e000 	add	x0, x0, #0x9b8
   a9678:	97ffd1b2 	bl	9dd40 <assertion_failed>
   a967c:	b9003fff 	str	wzr, [sp, #60]
   a9680:	140000a1 	b	a9904 <CTranslationTable::CreateLevel3Table(unsigned long)+0x2d4>
   a9684:	b9403fe0 	ldr	w0, [sp, #60]
   a9688:	d37df000 	lsl	x0, x0, #3
   a968c:	f9401be1 	ldr	x1, [sp, #48]
   a9690:	8b000020 	add	x0, x1, x0
   a9694:	f90017e0 	str	x0, [sp, #40]
   a9698:	f94017e0 	ldr	x0, [sp, #40]
   a969c:	39400001 	ldrb	w1, [x0]
   a96a0:	32000421 	orr	w1, w1, #0x3
   a96a4:	39000001 	strb	w1, [x0]
   a96a8:	f94017e0 	ldr	x0, [sp, #40]
   a96ac:	39400001 	ldrb	w1, [x0]
   a96b0:	121b7021 	and	w1, w1, #0xffffffe3
   a96b4:	39000001 	strb	w1, [x0]
   a96b8:	f94017e0 	ldr	x0, [sp, #40]
   a96bc:	39400001 	ldrb	w1, [x0]
   a96c0:	121a7821 	and	w1, w1, #0xffffffdf
   a96c4:	39000001 	strb	w1, [x0]
   a96c8:	f94017e0 	ldr	x0, [sp, #40]
   a96cc:	39400001 	ldrb	w1, [x0]
   a96d0:	12001421 	and	w1, w1, #0x3f
   a96d4:	39000001 	strb	w1, [x0]
   a96d8:	f94017e0 	ldr	x0, [sp, #40]
   a96dc:	39400401 	ldrb	w1, [x0, #1]
   a96e0:	32000421 	orr	w1, w1, #0x3
   a96e4:	39000401 	strb	w1, [x0, #1]
   a96e8:	f94017e0 	ldr	x0, [sp, #40]
   a96ec:	39400401 	ldrb	w1, [x0, #1]
   a96f0:	321e0021 	orr	w1, w1, #0x4
   a96f4:	39000401 	strb	w1, [x0, #1]
   a96f8:	f94017e0 	ldr	x0, [sp, #40]
   a96fc:	39400401 	ldrb	w1, [x0, #1]
   a9700:	121c7821 	and	w1, w1, #0xfffffff7
   a9704:	39000401 	strb	w1, [x0, #1]
   a9708:	f94017e0 	ldr	x0, [sp, #40]
   a970c:	39400401 	ldrb	w1, [x0, #1]
   a9710:	12000c21 	and	w1, w1, #0xf
   a9714:	39000401 	strb	w1, [x0, #1]
   a9718:	f9400be0 	ldr	x0, [sp, #16]
   a971c:	d350fc00 	lsr	x0, x0, #16
   a9720:	2a0003e1 	mov	w1, w0
   a9724:	f94017e0 	ldr	x0, [sp, #40]
   a9728:	2a0103e2 	mov	w2, w1
   a972c:	92401c44 	and	x4, x2, #0xff
   a9730:	39400802 	ldrb	w2, [x0, #2]
   a9734:	52800003 	mov	w3, #0x0                   	// #0
   a9738:	0a030042 	and	w2, w2, w3
   a973c:	2a0203e3 	mov	w3, w2
   a9740:	2a0403e2 	mov	w2, w4
   a9744:	2a020062 	orr	w2, w3, w2
   a9748:	39000802 	strb	w2, [x0, #2]
   a974c:	53087c22 	lsr	w2, w1, #8
   a9750:	2a0203e2 	mov	w2, w2
   a9754:	92401c44 	and	x4, x2, #0xff
   a9758:	39400c02 	ldrb	w2, [x0, #3]
   a975c:	52800003 	mov	w3, #0x0                   	// #0
   a9760:	0a030042 	and	w2, w2, w3
   a9764:	2a0203e3 	mov	w3, w2
   a9768:	2a0403e2 	mov	w2, w4
   a976c:	2a020062 	orr	w2, w3, w2
   a9770:	39000c02 	strb	w2, [x0, #3]
   a9774:	53107c22 	lsr	w2, w1, #16
   a9778:	2a0203e2 	mov	w2, w2
   a977c:	92401c44 	and	x4, x2, #0xff
   a9780:	39401002 	ldrb	w2, [x0, #4]
   a9784:	52800003 	mov	w3, #0x0                   	// #0
   a9788:	0a030042 	and	w2, w2, w3
   a978c:	2a0203e3 	mov	w3, w2
   a9790:	2a0403e2 	mov	w2, w4
   a9794:	2a020062 	orr	w2, w3, w2
   a9798:	39001002 	strb	w2, [x0, #4]
   a979c:	53187c21 	lsr	w1, w1, #24
   a97a0:	2a0103e3 	mov	w3, w1
   a97a4:	39401401 	ldrb	w1, [x0, #5]
   a97a8:	52800002 	mov	w2, #0x0                   	// #0
   a97ac:	0a020021 	and	w1, w1, w2
   a97b0:	2a0103e2 	mov	w2, w1
   a97b4:	2a0303e1 	mov	w1, w3
   a97b8:	2a010041 	orr	w1, w2, w1
   a97bc:	39001401 	strb	w1, [x0, #5]
   a97c0:	f94017e0 	ldr	x0, [sp, #40]
   a97c4:	39401801 	ldrb	w1, [x0, #6]
   a97c8:	121c6c21 	and	w1, w1, #0xfffffff0
   a97cc:	39001801 	strb	w1, [x0, #6]
   a97d0:	f94017e0 	ldr	x0, [sp, #40]
   a97d4:	39401801 	ldrb	w1, [x0, #6]
   a97d8:	121b7821 	and	w1, w1, #0xffffffef
   a97dc:	39001801 	strb	w1, [x0, #6]
   a97e0:	f94017e0 	ldr	x0, [sp, #40]
   a97e4:	39401801 	ldrb	w1, [x0, #6]
   a97e8:	121a7821 	and	w1, w1, #0xffffffdf
   a97ec:	39001801 	strb	w1, [x0, #6]
   a97f0:	f94017e0 	ldr	x0, [sp, #40]
   a97f4:	39401801 	ldrb	w1, [x0, #6]
   a97f8:	321a0021 	orr	w1, w1, #0x40
   a97fc:	39001801 	strb	w1, [x0, #6]
   a9800:	f94017e0 	ldr	x0, [sp, #40]
   a9804:	39401801 	ldrb	w1, [x0, #6]
   a9808:	12001821 	and	w1, w1, #0x7f
   a980c:	39001801 	strb	w1, [x0, #6]
   a9810:	39401c01 	ldrb	w1, [x0, #7]
   a9814:	52800002 	mov	w2, #0x0                   	// #0
   a9818:	0a020021 	and	w1, w1, w2
   a981c:	39001c01 	strb	w1, [x0, #7]
   a9820:	f0000020 	adrp	x0, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   a9824:	913aa000 	add	x0, x0, #0xea8
   a9828:	f9400be1 	ldr	x1, [sp, #16]
   a982c:	eb00003f 	cmp	x1, x0
   a9830:	540005e3 	b.cc	a98ec <CTranslationTable::CreateLevel3Table(unsigned long)+0x2bc>  // b.lo, b.ul, b.last
   a9834:	f94017e0 	ldr	x0, [sp, #40]
   a9838:	39401801 	ldrb	w1, [x0, #6]
   a983c:	321b0021 	orr	w1, w1, #0x20
   a9840:	39001801 	strb	w1, [x0, #6]
   a9844:	f9400fe0 	ldr	x0, [sp, #24]
   a9848:	f9400000 	ldr	x0, [x0]
   a984c:	f9400be1 	ldr	x1, [sp, #16]
   a9850:	eb00003f 	cmp	x1, x0
   a9854:	540000a3 	b.cc	a9868 <CTranslationTable::CreateLevel3Table(unsigned long)+0x238>  // b.lo, b.ul, b.last
   a9858:	f9400be1 	ldr	x1, [sp, #16]
   a985c:	b24077e0 	mov	x0, #0x3fffffff            	// #1073741823
   a9860:	eb00003f 	cmp	x1, x0
   a9864:	540000a9 	b.ls	a9878 <CTranslationTable::CreateLevel3Table(unsigned long)+0x248>  // b.plast
   a9868:	f9400be1 	ldr	x1, [sp, #16]
   a986c:	12a80000 	mov	w0, #0xbfffffff            	// #-1073741825
   a9870:	eb00003f 	cmp	x1, x0
   a9874:	54000189 	b.ls	a98a4 <CTranslationTable::CreateLevel3Table(unsigned long)+0x274>  // b.plast
   a9878:	f94017e1 	ldr	x1, [sp, #40]
   a987c:	39400020 	ldrb	w0, [x1]
   a9880:	52800022 	mov	w2, #0x1                   	// #1
   a9884:	331e0840 	bfi	w0, w2, #2, #3
   a9888:	39000020 	strb	w0, [x1]
   a988c:	f94017e1 	ldr	x1, [sp, #40]
   a9890:	39400420 	ldrb	w0, [x1, #1]
   a9894:	52800042 	mov	w2, #0x2                   	// #2
   a9898:	33000440 	bfxil	w0, w2, #0, #2
   a989c:	39000420 	strb	w0, [x1, #1]
   a98a0:	14000013 	b	a98ec <CTranslationTable::CreateLevel3Table(unsigned long)+0x2bc>
   a98a4:	f9400be1 	ldr	x1, [sp, #16]
   a98a8:	12bff600 	mov	w0, #0x4fffff              	// #5242879
   a98ac:	eb00003f 	cmp	x1, x0
   a98b0:	540001e9 	b.ls	a98ec <CTranslationTable::CreateLevel3Table(unsigned long)+0x2bc>  // b.plast
   a98b4:	f9400be1 	ldr	x1, [sp, #16]
   a98b8:	12bfee00 	mov	w0, #0x8fffff              	// #9437183
   a98bc:	eb00003f 	cmp	x1, x0
   a98c0:	54000168 	b.hi	a98ec <CTranslationTable::CreateLevel3Table(unsigned long)+0x2bc>  // b.pmore
   a98c4:	f94017e1 	ldr	x1, [sp, #40]
   a98c8:	39400020 	ldrb	w0, [x1]
   a98cc:	52800042 	mov	w2, #0x2                   	// #2
   a98d0:	331e0840 	bfi	w0, w2, #2, #3
   a98d4:	39000020 	strb	w0, [x1]
   a98d8:	f94017e1 	ldr	x1, [sp, #40]
   a98dc:	39400420 	ldrb	w0, [x1, #1]
   a98e0:	52800042 	mov	w2, #0x2                   	// #2
   a98e4:	33000440 	bfxil	w0, w2, #0, #2
   a98e8:	39000420 	strb	w0, [x1, #1]
   a98ec:	f9400be0 	ldr	x0, [sp, #16]
   a98f0:	91404000 	add	x0, x0, #0x10, lsl #12
   a98f4:	f9000be0 	str	x0, [sp, #16]
   a98f8:	b9403fe0 	ldr	w0, [sp, #60]
   a98fc:	11000400 	add	w0, w0, #0x1
   a9900:	b9003fe0 	str	w0, [sp, #60]
   a9904:	b9403fe1 	ldr	w1, [sp, #60]
   a9908:	5283ffe0 	mov	w0, #0x1fff                	// #8191
   a990c:	6b00003f 	cmp	w1, w0
   a9910:	54ffeba9 	b.ls	a9684 <CTranslationTable::CreateLevel3Table(unsigned long)+0x54>  // b.plast
   a9914:	f9401be0 	ldr	x0, [sp, #48]
   a9918:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a991c:	d65f03c0 	ret

00000000000a9920 <CTranslationTable::CTranslationTable(unsigned long)>:
   a9920:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   a9924:	910003fd 	mov	x29, sp
   a9928:	f9000fe0 	str	x0, [sp, #24]
   a992c:	f9000be1 	str	x1, [sp, #16]
   a9930:	f9400fe0 	ldr	x0, [sp, #24]
   a9934:	f9400be1 	ldr	x1, [sp, #16]
   a9938:	f9000001 	str	x1, [x0]
   a993c:	f9400fe0 	ldr	x0, [sp, #24]
   a9940:	f900041f 	str	xzr, [x0, #8]
   a9944:	94000d8f 	bl	acf80 <palloc>
   a9948:	aa0003e1 	mov	x1, x0
   a994c:	f9400fe0 	ldr	x0, [sp, #24]
   a9950:	f9000401 	str	x1, [x0, #8]
   a9954:	f9400fe0 	ldr	x0, [sp, #24]
   a9958:	f9400400 	ldr	x0, [x0, #8]
   a995c:	f100001f 	cmp	x0, #0x0
   a9960:	1a9f07e0 	cset	w0, ne	// ne = any
   a9964:	12001c00 	and	w0, w0, #0xff
   a9968:	92401c00 	and	x0, x0, #0xff
   a996c:	f100001f 	cmp	x0, #0x0
   a9970:	540000e1 	b.ne	a998c <CTranslationTable::CTranslationTable(unsigned long)+0x6c>  // b.any
   a9974:	52800662 	mov	w2, #0x33                  	// #51
   a9978:	90000060 	adrp	x0, b5000 <_etext+0x4158>
   a997c:	91264001 	add	x1, x0, #0x990
   a9980:	90000060 	adrp	x0, b5000 <_etext+0x4158>
   a9984:	9126a000 	add	x0, x0, #0x9a8
   a9988:	97ffd0ee 	bl	9dd40 <assertion_failed>
   a998c:	f9400fe0 	ldr	x0, [sp, #24]
   a9990:	f9400400 	ldr	x0, [x0, #8]
   a9994:	d2a00022 	mov	x2, #0x10000               	// #65536
   a9998:	52800001 	mov	w1, #0x0                   	// #0
   a999c:	97fff793 	bl	a77e8 <memset>
   a99a0:	b9003fff 	str	wzr, [sp, #60]
   a99a4:	1400007e 	b	a9b9c <CTranslationTable::CTranslationTable(unsigned long)+0x27c>
   a99a8:	b9403fe0 	ldr	w0, [sp, #60]
   a99ac:	d3638800 	lsl	x0, x0, #29
   a99b0:	f9001be0 	str	x0, [sp, #48]
   a99b4:	f9401be1 	ldr	x1, [sp, #48]
   a99b8:	b2407fe0 	mov	x0, #0xffffffff            	// #4294967295
   a99bc:	eb00003f 	cmp	x1, x0
   a99c0:	54000149 	b.ls	a99e8 <CTranslationTable::CTranslationTable(unsigned long)+0xc8>  // b.plast
   a99c4:	f9401be1 	ldr	x1, [sp, #48]
   a99c8:	d2c000c0 	mov	x0, #0x600000000           	// #25769803776
   a99cc:	eb00003f 	cmp	x1, x0
   a99d0:	54000de3 	b.cc	a9b8c <CTranslationTable::CTranslationTable(unsigned long)+0x26c>  // b.lo, b.ul, b.last
   a99d4:	f9401be1 	ldr	x1, [sp, #48]
   a99d8:	b24067e0 	mov	x0, #0x3ffffff             	// #67108863
   a99dc:	f2c000c0 	movk	x0, #0x6, lsl #32
   a99e0:	eb00003f 	cmp	x1, x0
   a99e4:	54000d48 	b.hi	a9b8c <CTranslationTable::CTranslationTable(unsigned long)+0x26c>  // b.pmore
   a99e8:	f9401be1 	ldr	x1, [sp, #48]
   a99ec:	f9400fe0 	ldr	x0, [sp, #24]
   a99f0:	97ffff10 	bl	a9630 <CTranslationTable::CreateLevel3Table(unsigned long)>
   a99f4:	f90017e0 	str	x0, [sp, #40]
   a99f8:	f94017e0 	ldr	x0, [sp, #40]
   a99fc:	f100001f 	cmp	x0, #0x0
   a9a00:	1a9f07e0 	cset	w0, ne	// ne = any
   a9a04:	12001c00 	and	w0, w0, #0xff
   a9a08:	92401c00 	and	x0, x0, #0xff
   a9a0c:	f100001f 	cmp	x0, #0x0
   a9a10:	540000e1 	b.ne	a9a2c <CTranslationTable::CTranslationTable(unsigned long)+0x10c>  // b.any
   a9a14:	528009a2 	mov	w2, #0x4d                  	// #77
   a9a18:	90000060 	adrp	x0, b5000 <_etext+0x4158>
   a9a1c:	91264001 	add	x1, x0, #0x990
   a9a20:	90000060 	adrp	x0, b5000 <_etext+0x4158>
   a9a24:	9126e000 	add	x0, x0, #0x9b8
   a9a28:	97ffd0c6 	bl	9dd40 <assertion_failed>
   a9a2c:	f9400fe0 	ldr	x0, [sp, #24]
   a9a30:	f9400401 	ldr	x1, [x0, #8]
   a9a34:	b9403fe0 	ldr	w0, [sp, #60]
   a9a38:	d37df000 	lsl	x0, x0, #3
   a9a3c:	8b000020 	add	x0, x1, x0
   a9a40:	f90013e0 	str	x0, [sp, #32]
   a9a44:	f94013e0 	ldr	x0, [sp, #32]
   a9a48:	39400001 	ldrb	w1, [x0]
   a9a4c:	32000421 	orr	w1, w1, #0x3
   a9a50:	39000001 	strb	w1, [x0]
   a9a54:	f94013e0 	ldr	x0, [sp, #32]
   a9a58:	39400001 	ldrb	w1, [x0]
   a9a5c:	12000421 	and	w1, w1, #0x3
   a9a60:	39000001 	strb	w1, [x0]
   a9a64:	39400401 	ldrb	w1, [x0, #1]
   a9a68:	52800002 	mov	w2, #0x0                   	// #0
   a9a6c:	0a020021 	and	w1, w1, w2
   a9a70:	39000401 	strb	w1, [x0, #1]
   a9a74:	f94017e0 	ldr	x0, [sp, #40]
   a9a78:	d350fc00 	lsr	x0, x0, #16
   a9a7c:	2a0003e1 	mov	w1, w0
   a9a80:	f94013e0 	ldr	x0, [sp, #32]
   a9a84:	2a0103e2 	mov	w2, w1
   a9a88:	92401c44 	and	x4, x2, #0xff
   a9a8c:	39400802 	ldrb	w2, [x0, #2]
   a9a90:	52800003 	mov	w3, #0x0                   	// #0
   a9a94:	0a030042 	and	w2, w2, w3
   a9a98:	2a0203e3 	mov	w3, w2
   a9a9c:	2a0403e2 	mov	w2, w4
   a9aa0:	2a020062 	orr	w2, w3, w2
   a9aa4:	39000802 	strb	w2, [x0, #2]
   a9aa8:	53087c22 	lsr	w2, w1, #8
   a9aac:	2a0203e2 	mov	w2, w2
   a9ab0:	92401c44 	and	x4, x2, #0xff
   a9ab4:	39400c02 	ldrb	w2, [x0, #3]
   a9ab8:	52800003 	mov	w3, #0x0                   	// #0
   a9abc:	0a030042 	and	w2, w2, w3
   a9ac0:	2a0203e3 	mov	w3, w2
   a9ac4:	2a0403e2 	mov	w2, w4
   a9ac8:	2a020062 	orr	w2, w3, w2
   a9acc:	39000c02 	strb	w2, [x0, #3]
   a9ad0:	53107c22 	lsr	w2, w1, #16
   a9ad4:	2a0203e2 	mov	w2, w2
   a9ad8:	92401c44 	and	x4, x2, #0xff
   a9adc:	39401002 	ldrb	w2, [x0, #4]
   a9ae0:	52800003 	mov	w3, #0x0                   	// #0
   a9ae4:	0a030042 	and	w2, w2, w3
   a9ae8:	2a0203e3 	mov	w3, w2
   a9aec:	2a0403e2 	mov	w2, w4
   a9af0:	2a020062 	orr	w2, w3, w2
   a9af4:	39001002 	strb	w2, [x0, #4]
   a9af8:	53187c21 	lsr	w1, w1, #24
   a9afc:	2a0103e3 	mov	w3, w1
   a9b00:	39401401 	ldrb	w1, [x0, #5]
   a9b04:	52800002 	mov	w2, #0x0                   	// #0
   a9b08:	0a020021 	and	w1, w1, w2
   a9b0c:	2a0103e2 	mov	w2, w1
   a9b10:	2a0303e1 	mov	w1, w3
   a9b14:	2a010041 	orr	w1, w2, w1
   a9b18:	39001401 	strb	w1, [x0, #5]
   a9b1c:	f94013e0 	ldr	x0, [sp, #32]
   a9b20:	39401801 	ldrb	w1, [x0, #6]
   a9b24:	121c6c21 	and	w1, w1, #0xfffffff0
   a9b28:	39001801 	strb	w1, [x0, #6]
   a9b2c:	f94013e0 	ldr	x0, [sp, #32]
   a9b30:	39401801 	ldrb	w1, [x0, #6]
   a9b34:	12000c21 	and	w1, w1, #0xf
   a9b38:	39001801 	strb	w1, [x0, #6]
   a9b3c:	39401c01 	ldrb	w1, [x0, #7]
   a9b40:	121d7021 	and	w1, w1, #0xfffffff8
   a9b44:	39001c01 	strb	w1, [x0, #7]
   a9b48:	f94013e0 	ldr	x0, [sp, #32]
   a9b4c:	39401c01 	ldrb	w1, [x0, #7]
   a9b50:	121c7821 	and	w1, w1, #0xfffffff7
   a9b54:	39001c01 	strb	w1, [x0, #7]
   a9b58:	f94013e0 	ldr	x0, [sp, #32]
   a9b5c:	39401c01 	ldrb	w1, [x0, #7]
   a9b60:	121b7821 	and	w1, w1, #0xffffffef
   a9b64:	39001c01 	strb	w1, [x0, #7]
   a9b68:	f94013e0 	ldr	x0, [sp, #32]
   a9b6c:	39401c01 	ldrb	w1, [x0, #7]
   a9b70:	12197421 	and	w1, w1, #0xffffff9f
   a9b74:	39001c01 	strb	w1, [x0, #7]
   a9b78:	f94013e0 	ldr	x0, [sp, #32]
   a9b7c:	39401c01 	ldrb	w1, [x0, #7]
   a9b80:	12001821 	and	w1, w1, #0x7f
   a9b84:	39001c01 	strb	w1, [x0, #7]
   a9b88:	14000002 	b	a9b90 <CTranslationTable::CTranslationTable(unsigned long)+0x270>
   a9b8c:	d503201f 	nop
   a9b90:	b9403fe0 	ldr	w0, [sp, #60]
   a9b94:	11000400 	add	w0, w0, #0x1
   a9b98:	b9003fe0 	str	w0, [sp, #60]
   a9b9c:	b9403fe0 	ldr	w0, [sp, #60]
   a9ba0:	7101fc1f 	cmp	w0, #0x7f
   a9ba4:	54fff029 	b.ls	a99a8 <CTranslationTable::CTranslationTable(unsigned long)+0x88>  // b.plast
   a9ba8:	d5033f9f 	dsb	sy
   a9bac:	d503201f 	nop
   a9bb0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   a9bb4:	d65f03c0 	ret
	...

00000000000a9bc0 <CBcmPCIeHostBridge::InterruptHandler(void*)>:
   a9bc0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a9bc4:	910003fd 	mov	x29, sp
   a9bc8:	a90153f3 	stp	x19, x20, [sp, #16]
   a9bcc:	a9025bf5 	stp	x21, x22, [sp, #32]
   a9bd0:	b40004c0 	cbz	x0, a9c68 <CBcmPCIeHostBridge::InterruptHandler(void*)+0xa8>
   a9bd4:	aa0003f5 	mov	x21, x0
   a9bd8:	52800036 	mov	w22, #0x1                   	// #1
   a9bdc:	f9400800 	ldr	x0, [x0, #16]
   a9be0:	b9400014 	ldr	w20, [x0]
   a9be4:	34000334 	cbz	w20, a9c48 <CBcmPCIeHostBridge::InterruptHandler(void*)+0x88>
   a9be8:	52800013 	mov	w19, #0x0                   	// #0
   a9bec:	1400000a 	b	a9c14 <CBcmPCIeHostBridge::InterruptHandler(void*)+0x54>
   a9bf0:	2a1303e0 	mov	w0, w19
   a9bf4:	f94016a1 	ldr	x1, [x21, #40]
   a9bf8:	0a220294 	bic	w20, w20, w2
   a9bfc:	d63f0060 	blr	x3
   a9c00:	f9400aa0 	ldr	x0, [x21, #16]
   a9c04:	11000673 	add	w19, w19, #0x1
   a9c08:	7100029f 	cmp	w20, #0x0
   a9c0c:	7a5f1a62 	ccmp	w19, #0x1f, #0x2, ne	// ne = any
   a9c10:	54000188 	b.hi	a9c40 <CBcmPCIeHostBridge::InterruptHandler(void*)+0x80>  // b.pmore
   a9c14:	1ad322c2 	lsl	w2, w22, w19
   a9c18:	6a14005f 	tst	w2, w20
   a9c1c:	54ffff40 	b.eq	a9c04 <CBcmPCIeHostBridge::InterruptHandler(void*)+0x44>  // b.none
   a9c20:	f94012a3 	ldr	x3, [x21, #32]
   a9c24:	b9000802 	str	w2, [x0, #8]
   a9c28:	b5fffe43 	cbnz	x3, a9bf0 <CBcmPCIeHostBridge::InterruptHandler(void*)+0x30>
   a9c2c:	b0000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   a9c30:	913d0021 	add	x1, x1, #0xf40
   a9c34:	9100a020 	add	x0, x1, #0x28
   a9c38:	52808682 	mov	w2, #0x434                 	// #1076
   a9c3c:	97ffd041 	bl	9dd40 <assertion_failed>
   a9c40:	b9400014 	ldr	w20, [x0]
   a9c44:	35fffd34 	cbnz	w20, a9be8 <CBcmPCIeHostBridge::InterruptHandler(void*)+0x28>
   a9c48:	f94002a1 	ldr	x1, [x21]
   a9c4c:	d2880c00 	mov	x0, #0x4060                	// #16480
   a9c50:	52800022 	mov	w2, #0x1                   	// #1
   a9c54:	a94153f3 	ldp	x19, x20, [sp, #16]
   a9c58:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a9c5c:	b8206822 	str	w2, [x1, x0]
   a9c60:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a9c64:	d65f03c0 	ret
   a9c68:	b0000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   a9c6c:	913d0021 	add	x1, x1, #0xf40
   a9c70:	91006020 	add	x0, x1, #0x18
   a9c74:	52808462 	mov	w2, #0x423                 	// #1059
   a9c78:	97ffd032 	bl	9dd40 <assertion_failed>
   a9c7c:	d503201f 	nop

00000000000a9c80 <CBcmPCIeHostBridge::CBcmPCIeHostBridge(CInterruptSystem*)>:
   a9c80:	d2bfaa02 	mov	x2, #0xfd500000            	// #4249878528
   a9c84:	b900301f 	str	wzr, [x0, #48]
   a9c88:	b900501f 	str	wzr, [x0, #80]
   a9c8c:	a9000801 	stp	x1, x2, [x0]
   a9c90:	b900601f 	str	wzr, [x0, #96]
   a9c94:	f900381f 	str	xzr, [x0, #112]
   a9c98:	d65f03c0 	ret
   a9c9c:	d503201f 	nop

00000000000a9ca0 <CBcmPCIeHostBridge::DisconnectMSI()>:
   a9ca0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   a9ca4:	910003fd 	mov	x29, sp
   a9ca8:	12800004 	mov	w4, #0xffffffff            	// #-1
   a9cac:	d2880882 	mov	x2, #0x4044                	// #16452
   a9cb0:	f9403801 	ldr	x1, [x0, #112]
   a9cb4:	f9400823 	ldr	x3, [x1, #16]
   a9cb8:	f9400021 	ldr	x1, [x1]
   a9cbc:	f9000bf3 	str	x19, [sp, #16]
   a9cc0:	aa0003f3 	mov	x19, x0
   a9cc4:	f9400000 	ldr	x0, [x0]
   a9cc8:	b9001064 	str	w4, [x3, #16]
   a9ccc:	b822683f 	str	wzr, [x1, x2]
   a9cd0:	b4000160 	cbz	x0, a9cfc <CBcmPCIeHostBridge::DisconnectMSI()+0x5c>
   a9cd4:	52801681 	mov	w1, #0xb4                  	// #180
   a9cd8:	9400043a 	bl	aadc0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   a9cdc:	f9403a60 	ldr	x0, [x19, #112]
   a9ce0:	b4000060 	cbz	x0, a9cec <CBcmPCIeHostBridge::DisconnectMSI()+0x4c>
   a9ce4:	d2800601 	mov	x1, #0x30                  	// #48
   a9ce8:	97fff986 	bl	a8300 <operator delete(void*, unsigned long)>
   a9cec:	f9003a7f 	str	xzr, [x19, #112]
   a9cf0:	f9400bf3 	ldr	x19, [sp, #16]
   a9cf4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   a9cf8:	d65f03c0 	ret
   a9cfc:	b0000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   a9d00:	913d0021 	add	x1, x1, #0xf40
   a9d04:	91010020 	add	x0, x1, #0x40
   a9d08:	52802c62 	mov	w2, #0x163                 	// #355
   a9d0c:	97ffd00d 	bl	9dd40 <assertion_failed>

00000000000a9d10 <CBcmPCIeHostBridge::~CBcmPCIeHostBridge()>:
   a9d10:	f9403801 	ldr	x1, [x0, #112]
   a9d14:	b4000041 	cbz	x1, a9d1c <CBcmPCIeHostBridge::~CBcmPCIeHostBridge()+0xc>
   a9d18:	17ffffe2 	b	a9ca0 <CBcmPCIeHostBridge::DisconnectMSI()>
   a9d1c:	d65f03c0 	ret

00000000000a9d20 <CBcmPCIeHostBridge::DumpStatus(unsigned int, unsigned int)>:
   a9d20:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a9d24:	910003fd 	mov	x29, sp
   a9d28:	a90153f3 	stp	x19, x20, [sp, #16]
   a9d2c:	2a0103f3 	mov	w19, w1
   a9d30:	a9025bf5 	stp	x21, x22, [sp, #32]
   a9d34:	aa0003f5 	mov	x21, x0
   a9d38:	2a0203f6 	mov	w22, w2
   a9d3c:	f9400414 	ldr	x20, [x0, #8]
   a9d40:	97ffd734 	bl	9fa10 <CLogger::Get()>
   a9d44:	12800004 	mov	w4, #0xffffffff            	// #-1
   a9d48:	b4000074 	cbz	x20, a9d54 <CBcmPCIeHostBridge::DumpStatus(unsigned int, unsigned int)+0x34>
   a9d4c:	79400e84 	ldrh	w4, [x20, #6]
   a9d50:	12003c84 	and	w4, w4, #0xffff
   a9d54:	b0000094 	adrp	x20, ba000 <CursorSymbol+0x188>
   a9d58:	913d0294 	add	x20, x20, #0xf40
   a9d5c:	91016283 	add	x3, x20, #0x58
   a9d60:	9101c281 	add	x1, x20, #0x70
   a9d64:	52800082 	mov	w2, #0x4                   	// #4
   a9d68:	97ffd916 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a9d6c:	71007e7f 	cmp	w19, #0x1f
   a9d70:	540002e8 	b.hi	a9dcc <CBcmPCIeHostBridge::DumpStatus(unsigned int, unsigned int)+0xac>  // b.pmore
   a9d74:	71001edf 	cmp	w22, #0x7
   a9d78:	54000328 	b.hi	a9ddc <CBcmPCIeHostBridge::DumpStatus(unsigned int, unsigned int)+0xbc>  // b.pmore
   a9d7c:	f94006b5 	ldr	x21, [x21, #8]
   a9d80:	2a130ed3 	orr	w19, w22, w19, lsl #3
   a9d84:	53144e73 	lsl	w19, w19, #12
   a9d88:	320c0273 	orr	w19, w19, #0x100000
   a9d8c:	914026a0 	add	x0, x21, #0x9, lsl #12
   a9d90:	b9000013 	str	w19, [x0]
   a9d94:	97ffd71f 	bl	9fa10 <CLogger::Get()>
   a9d98:	b14022bf 	cmn	x21, #0x8, lsl #12
   a9d9c:	12800004 	mov	w4, #0xffffffff            	// #-1
   a9da0:	54000080 	b.eq	a9db0 <CBcmPCIeHostBridge::DumpStatus(unsigned int, unsigned int)+0x90>  // b.none
   a9da4:	d29000c1 	mov	x1, #0x8006                	// #32774
   a9da8:	78616aa4 	ldrh	w4, [x21, x1]
   a9dac:	12003c84 	and	w4, w4, #0xffff
   a9db0:	91026283 	add	x3, x20, #0x98
   a9db4:	9101c281 	add	x1, x20, #0x70
   a9db8:	a94153f3 	ldp	x19, x20, [sp, #16]
   a9dbc:	52800082 	mov	w2, #0x4                   	// #4
   a9dc0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   a9dc4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a9dc8:	17ffd8fe 	b	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a9dcc:	52802e42 	mov	w2, #0x172                 	// #370
   a9dd0:	aa1403e1 	mov	x1, x20
   a9dd4:	9101e280 	add	x0, x20, #0x78
   a9dd8:	97ffcfda 	bl	9dd40 <assertion_failed>
   a9ddc:	52802e62 	mov	w2, #0x173                 	// #371
   a9de0:	aa1403e1 	mov	x1, x20
   a9de4:	91022280 	add	x0, x20, #0x88
   a9de8:	97ffcfd6 	bl	9dd40 <assertion_failed>
   a9dec:	d503201f 	nop

00000000000a9df0 <CBcmPCIeHostBridge::enable_bridge()>:
   a9df0:	f9400401 	ldr	x1, [x0, #8]
   a9df4:	b4000441 	cbz	x1, a9e7c <CBcmPCIeHostBridge::enable_bridge()+0x8c>
   a9df8:	b9400822 	ldr	w2, [x1, #8]
   a9dfc:	52808000 	mov	w0, #0x400                 	// #1024
   a9e00:	72a000c0 	movk	w0, #0x6, lsl #16
   a9e04:	6b42201f 	cmp	w0, w2, lsr #8
   a9e08:	540003a1 	b.ne	a9e7c <CBcmPCIeHostBridge::enable_bridge()+0x8c>  // b.any
   a9e0c:	39403820 	ldrb	w0, [x1, #14]
   a9e10:	12001c00 	and	w0, w0, #0xff
   a9e14:	7100041f 	cmp	w0, #0x1
   a9e18:	54000321 	b.ne	a9e7c <CBcmPCIeHostBridge::enable_bridge()+0x8c>  // b.any
   a9e1c:	52800203 	mov	w3, #0x10                  	// #16
   a9e20:	1280ffe2 	mov	w2, #0xfffff800            	// #-2048
   a9e24:	39003023 	strb	w3, [x1, #12]
   a9e28:	39006420 	strb	w0, [x1, #25]
   a9e2c:	39006820 	strb	w0, [x1, #26]
   a9e30:	79004022 	strh	w2, [x1, #32]
   a9e34:	79004422 	strh	w2, [x1, #34]
   a9e38:	3900f820 	strb	w0, [x1, #62]
   a9e3c:	3942b020 	ldrb	w0, [x1, #172]
   a9e40:	12001c00 	and	w0, w0, #0xff
   a9e44:	7100401f 	cmp	w0, #0x10
   a9e48:	540000c1 	b.ne	a9e60 <CBcmPCIeHostBridge::enable_bridge()+0x70>  // b.any
   a9e4c:	528028c2 	mov	w2, #0x146                 	// #326
   a9e50:	39032020 	strb	w0, [x1, #200]
   a9e54:	52800000 	mov	w0, #0x0                   	// #0
   a9e58:	79000822 	strh	w2, [x1, #4]
   a9e5c:	d65f03c0 	ret
   a9e60:	b0000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   a9e64:	913d0021 	add	x1, x1, #0xf40
   a9e68:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a9e6c:	9102c020 	add	x0, x1, #0xb0
   a9e70:	910003fd 	mov	x29, sp
   a9e74:	528058e2 	mov	w2, #0x2c7                 	// #711
   a9e78:	97ffcfb2 	bl	9dd40 <assertion_failed>
   a9e7c:	12800000 	mov	w0, #0xffffffff            	// #-1
   a9e80:	d65f03c0 	ret
   a9e84:	d503201f 	nop
   a9e88:	d503201f 	nop
   a9e8c:	d503201f 	nop

00000000000a9e90 <CBcmPCIeHostBridge::enable_device(unsigned int, unsigned int, unsigned int)>:
   a9e90:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   a9e94:	910003fd 	mov	x29, sp
   a9e98:	6b4163ff 	cmp	wzr, w1, lsr #24
   a9e9c:	a90153f3 	stp	x19, x20, [sp, #16]
   a9ea0:	540006e1 	b.ne	a9f7c <CBcmPCIeHostBridge::enable_device(unsigned int, unsigned int, unsigned int)+0xec>  // b.any
   a9ea4:	71007c5f 	cmp	w2, #0x1f
   a9ea8:	54000768 	b.hi	a9f94 <CBcmPCIeHostBridge::enable_device(unsigned int, unsigned int, unsigned int)+0x104>  // b.pmore
   a9eac:	71001c7f 	cmp	w3, #0x7
   a9eb0:	540007e8 	b.hi	a9fac <CBcmPCIeHostBridge::enable_device(unsigned int, unsigned int, unsigned int)+0x11c>  // b.pmore
   a9eb4:	f9400413 	ldr	x19, [x0, #8]
   a9eb8:	2a020c62 	orr	w2, w3, w2, lsl #3
   a9ebc:	53144c42 	lsl	w2, w2, #12
   a9ec0:	320c0042 	orr	w2, w2, #0x100000
   a9ec4:	91402660 	add	x0, x19, #0x9, lsl #12
   a9ec8:	b140227f 	cmn	x19, #0x8, lsl #12
   a9ecc:	b9000002 	str	w2, [x0]
   a9ed0:	540007a0 	b.eq	a9fc4 <CBcmPCIeHostBridge::enable_device(unsigned int, unsigned int, unsigned int)+0x134>  // b.none
   a9ed4:	d2900100 	mov	x0, #0x8008                	// #32776
   a9ed8:	b8606a60 	ldr	w0, [x19, x0]
   a9edc:	6b40203f 	cmp	w1, w0, lsr #8
   a9ee0:	54000721 	b.ne	a9fc4 <CBcmPCIeHostBridge::enable_device(unsigned int, unsigned int, unsigned int)+0x134>  // b.any
   a9ee4:	d29001c0 	mov	x0, #0x800e                	// #32782
   a9ee8:	38606a60 	ldrb	w0, [x19, x0]
   a9eec:	72001c1f 	tst	w0, #0xff
   a9ef0:	540006a1 	b.ne	a9fc4 <CBcmPCIeHostBridge::enable_device(unsigned int, unsigned int, unsigned int)+0x134>  // b.any
   a9ef4:	d2900183 	mov	x3, #0x800c                	// #32780
   a9ef8:	52800204 	mov	w4, #0x10                  	// #16
   a9efc:	f90013f5 	str	x21, [sp, #32]
   a9f00:	d2900201 	mov	x1, #0x8010                	// #32784
   a9f04:	52800082 	mov	w2, #0x4                   	// #4
   a9f08:	72bf0002 	movk	w2, #0xf800, lsl #16
   a9f0c:	d2900280 	mov	x0, #0x8014                	// #32788
   a9f10:	38236a64 	strb	w4, [x19, x3]
   a9f14:	d29007b5 	mov	x21, #0x803d                	// #32829
   a9f18:	b8216a62 	str	w2, [x19, x1]
   a9f1c:	b8206a7f 	str	wzr, [x19, x0]
   a9f20:	38756a74 	ldrb	w20, [x19, x21]
   a9f24:	12001e94 	and	w20, w20, #0xff
   a9f28:	7100069f 	cmp	w20, #0x1
   a9f2c:	54000121 	b.ne	a9f50 <CBcmPCIeHostBridge::enable_device(unsigned int, unsigned int, unsigned int)+0xc0>  // b.any
   a9f30:	f94013f5 	ldr	x21, [sp, #32]
   a9f34:	d2900081 	mov	x1, #0x8004                	// #32772
   a9f38:	528028c2 	mov	w2, #0x146                 	// #326
   a9f3c:	52800000 	mov	w0, #0x0                   	// #0
   a9f40:	78216a62 	strh	w2, [x19, x1]
   a9f44:	a94153f3 	ldp	x19, x20, [sp, #16]
   a9f48:	a8c37bfd 	ldp	x29, x30, [sp], #48
   a9f4c:	d65f03c0 	ret
   a9f50:	97ffd6b0 	bl	9fa10 <CLogger::Get()>
   a9f54:	b0000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   a9f58:	913d0021 	add	x1, x1, #0xf40
   a9f5c:	91044023 	add	x3, x1, #0x110
   a9f60:	2a1403e4 	mov	w4, w20
   a9f64:	9101c021 	add	x1, x1, #0x70
   a9f68:	52800042 	mov	w2, #0x2                   	// #2
   a9f6c:	97ffd895 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   a9f70:	52800020 	mov	w0, #0x1                   	// #1
   a9f74:	38356a60 	strb	w0, [x19, x21]
   a9f78:	17ffffee 	b	a9f30 <CBcmPCIeHostBridge::enable_device(unsigned int, unsigned int, unsigned int)+0xa0>
   a9f7c:	b0000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   a9f80:	913d0021 	add	x1, x1, #0xf40
   a9f84:	f90013f5 	str	x21, [sp, #32]
   a9f88:	9103e020 	add	x0, x1, #0xf8
   a9f8c:	52805a82 	mov	w2, #0x2d4                 	// #724
   a9f90:	97ffcf6c 	bl	9dd40 <assertion_failed>
   a9f94:	b0000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   a9f98:	913d0021 	add	x1, x1, #0xf40
   a9f9c:	f90013f5 	str	x21, [sp, #32]
   a9fa0:	9101e020 	add	x0, x1, #0x78
   a9fa4:	52805aa2 	mov	w2, #0x2d5                 	// #725
   a9fa8:	97ffcf66 	bl	9dd40 <assertion_failed>
   a9fac:	b0000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   a9fb0:	913d0021 	add	x1, x1, #0xf40
   a9fb4:	f90013f5 	str	x21, [sp, #32]
   a9fb8:	91022020 	add	x0, x1, #0x88
   a9fbc:	52805ac2 	mov	w2, #0x2d6                 	// #726
   a9fc0:	97ffcf60 	bl	9dd40 <assertion_failed>
   a9fc4:	12800000 	mov	w0, #0xffffffff            	// #-1
   a9fc8:	17ffffdf 	b	a9f44 <CBcmPCIeHostBridge::enable_device(unsigned int, unsigned int, unsigned int)+0xb4>
   a9fcc:	d503201f 	nop

00000000000a9fd0 <CBcmPCIeHostBridge::EnableDevice(unsigned int, unsigned int, unsigned int)>:
   a9fd0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   a9fd4:	910003fd 	mov	x29, sp
   a9fd8:	97ffffae 	bl	a9e90 <CBcmPCIeHostBridge::enable_device(unsigned int, unsigned int, unsigned int)>
   a9fdc:	7100001f 	cmp	w0, #0x0
   a9fe0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   a9fe4:	1a9f17e0 	cset	w0, eq	// eq = none
   a9fe8:	d65f03c0 	ret
   a9fec:	d503201f 	nop

00000000000a9ff0 <CBcmPCIeHostBridge::pcie_set_pci_ranges()>:
   a9ff0:	aa0003e1 	mov	x1, x0
   a9ff4:	b9403000 	ldr	w0, [x0, #48]
   a9ff8:	35000140 	cbnz	w0, aa020 <CBcmPCIeHostBridge::pcie_set_pci_ranges()+0x30>
   a9ffc:	d2c000c4 	mov	x4, #0x600000000           	// #25769803776
   aa000:	d2bf0005 	mov	x5, #0xf8000000            	// #4160749568
   aa004:	d2a08003 	mov	x3, #0x4000000             	// #67108864
   aa008:	52800022 	mov	w2, #0x1                   	// #1
   aa00c:	52800000 	mov	w0, #0x0                   	// #0
   aa010:	a9019025 	stp	x5, x4, [x1, #24]
   aa014:	f9001423 	str	x3, [x1, #40]
   aa018:	b9003022 	str	w2, [x1, #48]
   aa01c:	d65f03c0 	ret
   aa020:	90000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   aa024:	913d0021 	add	x1, x1, #0xf40
   aa028:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   aa02c:	9104c020 	add	x0, x1, #0x130
   aa030:	910003fd 	mov	x29, sp
   aa034:	52806162 	mov	w2, #0x30b                 	// #779
   aa038:	97ffcf42 	bl	9dd40 <assertion_failed>
   aa03c:	d503201f 	nop

00000000000aa040 <CBcmPCIeHostBridge::pcie_set_dma_ranges()>:
   aa040:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   aa044:	910003fd 	mov	x29, sp
   aa048:	f9000bf3 	str	x19, [sp, #16]
   aa04c:	aa0003f3 	mov	x19, x0
   aa050:	b9405000 	ldr	w0, [x0, #80]
   aa054:	35000200 	cbnz	w0, aa094 <CBcmPCIeHostBridge::pcie_set_dma_ranges()+0x54>
   aa058:	97ffdbf2 	bl	a1020 <CMachineInfo::Get()>
   aa05c:	9100a3e8 	add	x8, sp, #0x28
   aa060:	97ffdb8c 	bl	a0e90 <CMachineInfo::GetPCIeDMAMemory() const>
   aa064:	52800022 	mov	w2, #0x1                   	// #1
   aa068:	a9428fe1 	ldp	x1, x3, [sp, #40]
   aa06c:	f0000084 	adrp	x4, bd000 <CNetDevice::s_SpeedString+0x18>
   aa070:	52800000 	mov	w0, #0x0                   	// #0
   aa074:	b9005262 	str	w2, [x19, #80]
   aa078:	f9401fe2 	ldr	x2, [sp, #56]
   aa07c:	f9017481 	str	x1, [x4, #744]
   aa080:	a9038e61 	stp	x1, x3, [x19, #56]
   aa084:	f9002662 	str	x2, [x19, #72]
   aa088:	f9400bf3 	ldr	x19, [sp, #16]
   aa08c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   aa090:	d65f03c0 	ret
   aa094:	90000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   aa098:	913d0021 	add	x1, x1, #0xf40
   aa09c:	91052020 	add	x0, x1, #0x148
   aa0a0:	52806302 	mov	w2, #0x318                 	// #792
   aa0a4:	97ffcf27 	bl	9dd40 <assertion_failed>
   aa0a8:	d503201f 	nop
   aa0ac:	d503201f 	nop

00000000000aa0b0 <CBcmPCIeHostBridge::pcie_set_outbound_win(unsigned int, unsigned long, unsigned long, unsigned long)>:
   aa0b0:	f9400406 	ldr	x6, [x0, #8]
   aa0b4:	531d7020 	lsl	w0, w1, #3
   aa0b8:	d2880189 	mov	x9, #0x400c                	// #16396
   aa0bc:	d360fc68 	lsr	x8, x3, #32
   aa0c0:	d2880207 	mov	x7, #0x4010                	// #16400
   aa0c4:	531e7421 	lsl	w1, w1, #2
   aa0c8:	d2880e05 	mov	x5, #0x4070                	// #16496
   aa0cc:	d1000484 	sub	x4, x4, #0x1
   aa0d0:	8b020084 	add	x4, x4, x2
   aa0d4:	8b060000 	add	x0, x0, x6
   aa0d8:	8b060021 	add	x1, x1, x6
   aa0dc:	d2881086 	mov	x6, #0x4084                	// #16516
   aa0e0:	b8296803 	str	w3, [x0, x9]
   aa0e4:	d354fc49 	lsr	x9, x2, #20
   aa0e8:	d360fc42 	lsr	x2, x2, #32
   aa0ec:	b8276808 	str	w8, [x0, x7]
   aa0f0:	d354fc88 	lsr	x8, x4, #20
   aa0f4:	d2881007 	mov	x7, #0x4080                	// #16512
   aa0f8:	b8656823 	ldr	w3, [x1, x5]
   aa0fc:	d360fc84 	lsr	x4, x4, #32
   aa100:	331c2d23 	bfi	w3, w9, #4, #12
   aa104:	b8256823 	str	w3, [x1, x5]
   aa108:	b8656823 	ldr	w3, [x1, x5]
   aa10c:	330c2d03 	bfi	w3, w8, #20, #12
   aa110:	b8256823 	str	w3, [x1, x5]
   aa114:	b8676801 	ldr	w1, [x0, x7]
   aa118:	33001c41 	bfxil	w1, w2, #0, #8
   aa11c:	b8276801 	str	w1, [x0, x7]
   aa120:	b8666801 	ldr	w1, [x0, x6]
   aa124:	33001c81 	bfxil	w1, w4, #0, #8
   aa128:	b8266801 	str	w1, [x0, x6]
   aa12c:	d65f03c0 	ret

00000000000aa130 <CBcmPCIeHostBridge::pcie_setup()>:
   aa130:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   aa134:	910003fd 	mov	x29, sp
   aa138:	a90153f3 	stp	x19, x20, [sp, #16]
   aa13c:	aa0003f3 	mov	x19, x0
   aa140:	d2924214 	mov	x20, #0x9210                	// #37392
   aa144:	52800c80 	mov	w0, #0x64                  	// #100
   aa148:	f9400661 	ldr	x1, [x19, #8]
   aa14c:	a9025bf5 	stp	x21, x22, [sp, #32]
   aa150:	b8746822 	ldr	w2, [x1, x20]
   aa154:	321f0042 	orr	w2, w2, #0x2
   aa158:	b8346822 	str	w2, [x1, x20]
   aa15c:	b8746822 	ldr	w2, [x1, x20]
   aa160:	b8746822 	ldr	w2, [x1, x20]
   aa164:	32000042 	orr	w2, w2, #0x1
   aa168:	b8346822 	str	w2, [x1, x20]
   aa16c:	b8746821 	ldr	w1, [x1, x20]
   aa170:	97fff39c 	bl	a6fe0 <CTimer::SimpleusDelay(unsigned int)>
   aa174:	f9400661 	ldr	x1, [x19, #8]
   aa178:	d2884082 	mov	x2, #0x4204                	// #16900
   aa17c:	52800c80 	mov	w0, #0x64                  	// #100
   aa180:	b8746823 	ldr	w3, [x1, x20]
   aa184:	121e7863 	and	w3, w3, #0xfffffffd
   aa188:	b8346823 	str	w3, [x1, x20]
   aa18c:	b8746823 	ldr	w3, [x1, x20]
   aa190:	b8626823 	ldr	w3, [x1, x2]
   aa194:	12047863 	and	w3, w3, #0xf7ffffff
   aa198:	b8226823 	str	w3, [x1, x2]
   aa19c:	b8626821 	ldr	w1, [x1, x2]
   aa1a0:	97fff390 	bl	a6fe0 <CTimer::SimpleusDelay(unsigned int)>
   aa1a4:	f9400662 	ldr	x2, [x19, #8]
   aa1a8:	d2880d80 	mov	x0, #0x406c                	// #16492
   aa1ac:	d2880107 	mov	x7, #0x4008                	// #16392
   aa1b0:	b8606840 	ldr	w0, [x2, x0]
   aa1b4:	12003c00 	and	w0, w0, #0xffff
   aa1b8:	b9001260 	str	w0, [x19, #16]
   aa1bc:	b8676840 	ldr	w0, [x2, x7]
   aa1c0:	120a7400 	and	w0, w0, #0xffcfffff
   aa1c4:	32140400 	orr	w0, w0, #0x3000
   aa1c8:	b8276840 	str	w0, [x2, x7]
   aa1cc:	b9405261 	ldr	w1, [x19, #80]
   aa1d0:	7100043f 	cmp	w1, #0x1
   aa1d4:	540014c1 	b.ne	aa46c <CBcmPCIeHostBridge::pcie_setup()+0x33c>  // b.any
   aa1d8:	f9402660 	ldr	x0, [x19, #72]
   aa1dc:	b9006261 	str	w1, [x19, #96]
   aa1e0:	f9401e66 	ldr	x6, [x19, #56]
   aa1e4:	d1000401 	sub	x1, x0, #0x1
   aa1e8:	f9002e60 	str	x0, [x19, #88]
   aa1ec:	ea06003f 	tst	x1, x6
   aa1f0:	54001481 	b.ne	aa480 <CBcmPCIeHostBridge::pcie_setup()+0x350>  // b.any
   aa1f4:	b27e77e1 	mov	x1, #0xfffffffc            	// #4294967292
   aa1f8:	eb0100df 	cmp	x6, x1
   aa1fc:	540011a9 	b.ls	aa430 <CBcmPCIeHostBridge::pcie_setup()+0x300>  // b.plast
   aa200:	f100041f 	cmp	x0, #0x1
   aa204:	f9003661 	str	x1, [x19, #104]
   aa208:	121b68c8 	and	w8, w6, #0xffffffe0
   aa20c:	d2800025 	mov	x5, #0x1                   	// #1
   aa210:	52800001 	mov	w1, #0x0                   	// #0
   aa214:	54001409 	b.ls	aa494 <CBcmPCIeHostBridge::pcie_setup()+0x364>  // b.plast
   aa218:	2a0103e4 	mov	w4, w1
   aa21c:	11000421 	add	w1, w1, #0x1
   aa220:	9ac120a3 	lsl	x3, x5, x1
   aa224:	eb03001f 	cmp	x0, x3
   aa228:	54ffff88 	b.hi	aa218 <CBcmPCIeHostBridge::pcie_setup()+0xe8>  // b.pmore
   aa22c:	51002c81 	sub	w1, w4, #0xb
   aa230:	71000c3f 	cmp	w1, #0x3
   aa234:	54001089 	b.ls	aa444 <CBcmPCIeHostBridge::pcie_setup()+0x314>  // b.plast
   aa238:	51003c81 	sub	w1, w4, #0xf
   aa23c:	51003884 	sub	w4, w4, #0xe
   aa240:	7100583f 	cmp	w1, #0x16
   aa244:	2a040104 	orr	w4, w8, w4
   aa248:	1a883088 	csel	w8, w4, w8, cc	// cc = lo, ul, last
   aa24c:	d2880684 	mov	x4, #0x4034                	// #16436
   aa250:	d360fcc6 	lsr	x6, x6, #32
   aa254:	d2880703 	mov	x3, #0x4038                	// #16440
   aa258:	52800001 	mov	w1, #0x0                   	// #0
   aa25c:	d2800025 	mov	x5, #0x1                   	// #1
   aa260:	b8246848 	str	w8, [x2, x4]
   aa264:	b8236846 	str	w6, [x2, x3]
   aa268:	2a0103e3 	mov	w3, w1
   aa26c:	11000421 	add	w1, w1, #0x1
   aa270:	9ac120a4 	lsl	x4, x5, x1
   aa274:	eb04001f 	cmp	x0, x4
   aa278:	54ffff88 	b.hi	aa268 <CBcmPCIeHostBridge::pcie_setup()+0x138>  // b.pmore
   aa27c:	51003863 	sub	w3, w3, #0xe
   aa280:	53051063 	lsl	w3, w3, #27
   aa284:	b8676840 	ldr	w0, [x2, x7]
   aa288:	33006803 	bfxil	w3, w0, #0, #27
   aa28c:	b8276843 	str	w3, [x2, x7]
   aa290:	b9406274 	ldr	w20, [x19, #96]
   aa294:	7100069f 	cmp	w20, #0x1
   aa298:	54001101 	b.ne	aa4b8 <CBcmPCIeHostBridge::pcie_setup()+0x388>  // b.any
   aa29c:	d2880588 	mov	x8, #0x402c                	// #16428
   aa2a0:	d2880787 	mov	x7, #0x403c                	// #16444
   aa2a4:	b8686841 	ldr	w1, [x2, x8]
   aa2a8:	d2886106 	mov	x6, #0x4308                	// #17160
   aa2ac:	12800005 	mov	w5, #0xffffffff            	// #-1
   aa2b0:	d2886203 	mov	x3, #0x4310                	// #17168
   aa2b4:	d2924204 	mov	x4, #0x9210                	// #37392
   aa2b8:	52800c80 	mov	w0, #0x64                  	// #100
   aa2bc:	d2880d16 	mov	x22, #0x4068                	// #16488
   aa2c0:	121b6821 	and	w1, w1, #0xffffffe0
   aa2c4:	b8286841 	str	w1, [x2, x8]
   aa2c8:	b8676841 	ldr	w1, [x2, x7]
   aa2cc:	121b6821 	and	w1, w1, #0xffffffe0
   aa2d0:	b8276841 	str	w1, [x2, x7]
   aa2d4:	b8266845 	str	w5, [x2, x6]
   aa2d8:	b8666841 	ldr	w1, [x2, x6]
   aa2dc:	b8236845 	str	w5, [x2, x3]
   aa2e0:	b8636841 	ldr	w1, [x2, x3]
   aa2e4:	b940b843 	ldr	w3, [x2, #184]
   aa2e8:	7941b841 	ldrh	w1, [x2, #220]
   aa2ec:	121c6c63 	and	w3, w3, #0xfffffff0
   aa2f0:	321f0063 	orr	w3, w3, #0x2
   aa2f4:	121c2c21 	and	w1, w1, #0xfff0
   aa2f8:	321f0021 	orr	w1, w1, #0x2
   aa2fc:	b900b843 	str	w3, [x2, #184]
   aa300:	7901b841 	strh	w1, [x2, #220]
   aa304:	b8646841 	ldr	w1, [x2, x4]
   aa308:	121f7821 	and	w1, w1, #0xfffffffe
   aa30c:	b8246841 	str	w1, [x2, x4]
   aa310:	b8646841 	ldr	w1, [x2, x4]
   aa314:	97fff31b 	bl	a6f80 <CTimer::SimpleMsDelay(unsigned int)>
   aa318:	52800000 	mov	w0, #0x0                   	// #0
   aa31c:	d503201f 	nop
   aa320:	f940066a 	ldr	x10, [x19, #8]
   aa324:	b8766941 	ldr	w1, [x10, x22]
   aa328:	8b160143 	add	x3, x10, x22
   aa32c:	53047c22 	lsr	w2, w1, #4
   aa330:	0a411441 	and	w1, w2, w1, lsr #5
   aa334:	37000121 	tbnz	w1, #0, aa358 <CBcmPCIeHostBridge::pcie_setup()+0x228>
   aa338:	0b000295 	add	w21, w20, w0
   aa33c:	710192bf 	cmp	w21, #0x64
   aa340:	5400088d 	b.le	aa450 <CBcmPCIeHostBridge::pcie_setup()+0x320>
   aa344:	52800c81 	mov	w1, #0x64                  	// #100
   aa348:	4b000020 	sub	w0, w1, w0
   aa34c:	97fff30d 	bl	a6f80 <CTimer::SimpleMsDelay(unsigned int)>
   aa350:	f940066a 	ldr	x10, [x19, #8]
   aa354:	8b160143 	add	x3, x10, x22
   aa358:	b9400060 	ldr	w0, [x3]
   aa35c:	53047c01 	lsr	w1, w0, #4
   aa360:	0a401420 	and	w0, w1, w0, lsr #5
   aa364:	36000b40 	tbz	w0, #0, aa4cc <CBcmPCIeHostBridge::pcie_setup()+0x39c>
   aa368:	b9400060 	ldr	w0, [x3]
   aa36c:	36380c20 	tbz	w0, #7, aa4f0 <CBcmPCIeHostBridge::pcie_setup()+0x3c0>
   aa370:	b9403260 	ldr	w0, [x19, #48]
   aa374:	7100001f 	cmp	w0, #0x0
   aa378:	540000cd 	b.le	aa390 <CBcmPCIeHostBridge::pcie_setup()+0x260>
   aa37c:	52800001 	mov	w1, #0x0                   	// #0
   aa380:	aa1303e0 	mov	x0, x19
   aa384:	a9418a63 	ldp	x3, x2, [x19, #24]
   aa388:	f9401664 	ldr	x4, [x19, #40]
   aa38c:	97ffff49 	bl	aa0b0 <CBcmPCIeHostBridge::pcie_set_outbound_win(unsigned int, unsigned long, unsigned long, unsigned long)>
   aa390:	b9443d40 	ldr	w0, [x10, #1084]
   aa394:	52808001 	mov	w1, #0x400                 	// #1024
   aa398:	72a000c1 	movk	w1, #0x6, lsl #16
   aa39c:	12081c00 	and	w0, w0, #0xff000000
   aa3a0:	2a010000 	orr	w0, w0, w1
   aa3a4:	b9043d40 	str	w0, [x10, #1084]
   aa3a8:	b9443d40 	ldr	w0, [x10, #1084]
   aa3ac:	79417d45 	ldrh	w5, [x10, #190]
   aa3b0:	12003cb4 	and	w20, w5, #0xffff
   aa3b4:	d34424b5 	ubfx	x21, x5, #4, #6
   aa3b8:	97ffd596 	bl	9fa10 <CLogger::Get()>
   aa3bc:	12000e82 	and	w2, w20, #0xf
   aa3c0:	90000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   aa3c4:	913d0021 	add	x1, x1, #0xf40
   aa3c8:	51000442 	sub	w2, w2, #0x1
   aa3cc:	7100085f 	cmp	w2, #0x2
   aa3d0:	91058024 	add	x4, x1, #0x160
   aa3d4:	54000068 	b.hi	aa3e0 <CBcmPCIeHostBridge::pcie_setup()+0x2b0>  // b.pmore
   aa3d8:	9107c023 	add	x3, x1, #0x1f0
   aa3dc:	f8625864 	ldr	x4, [x3, w2, uxtw #3]
   aa3e0:	91082023 	add	x3, x1, #0x208
   aa3e4:	52800062 	mov	w2, #0x3                   	// #3
   aa3e8:	9101c021 	add	x1, x1, #0x70
   aa3ec:	2a1503e5 	mov	w5, w21
   aa3f0:	97ffd774 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   aa3f4:	f9400661 	ldr	x1, [x19, #8]
   aa3f8:	d2884082 	mov	x2, #0x4204                	// #16900
   aa3fc:	52800000 	mov	w0, #0x0                   	// #0
   aa400:	b9418823 	ldr	w3, [x1, #392]
   aa404:	121c7463 	and	w3, w3, #0xfffffff3
   aa408:	b9018823 	str	w3, [x1, #392]
   aa40c:	b9418823 	ldr	w3, [x1, #392]
   aa410:	b8626823 	ldr	w3, [x1, x2]
   aa414:	321f0063 	orr	w3, w3, #0x2
   aa418:	b8226823 	str	w3, [x1, x2]
   aa41c:	b8626821 	ldr	w1, [x1, x2]
   aa420:	a94153f3 	ldp	x19, x20, [sp, #16]
   aa424:	a9425bf5 	ldp	x21, x22, [sp, #32]
   aa428:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aa42c:	d65f03c0 	ret
   aa430:	8b060003 	add	x3, x0, x6
   aa434:	b27e87e4 	mov	x4, #0xffffffffc           	// #68719476732
   aa438:	eb01007f 	cmp	x3, x1
   aa43c:	9a849021 	csel	x1, x1, x4, ls	// ls = plast
   aa440:	17ffff70 	b	aa200 <CBcmPCIeHostBridge::pcie_setup()+0xd0>
   aa444:	11004484 	add	w4, w4, #0x11
   aa448:	2a040108 	orr	w8, w8, w4
   aa44c:	17ffff80 	b	aa24c <CBcmPCIeHostBridge::pcie_setup()+0x11c>
   aa450:	2a1403e0 	mov	w0, w20
   aa454:	531f7a94 	lsl	w20, w20, #1
   aa458:	97fff2ca 	bl	a6f80 <CTimer::SimpleMsDelay(unsigned int)>
   aa45c:	710192bf 	cmp	w21, #0x64
   aa460:	540005a0 	b.eq	aa514 <CBcmPCIeHostBridge::pcie_setup()+0x3e4>  // b.none
   aa464:	2a1503e0 	mov	w0, w21
   aa468:	17ffffae 	b	aa320 <CBcmPCIeHostBridge::pcie_setup()+0x1f0>
   aa46c:	90000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   aa470:	913d0021 	add	x1, x1, #0xf40
   aa474:	9105a020 	add	x0, x1, #0x168
   aa478:	52803b62 	mov	w2, #0x1db                 	// #475
   aa47c:	97ffce31 	bl	9dd40 <assertion_failed>
   aa480:	90000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   aa484:	913d0021 	add	x1, x1, #0xf40
   aa488:	91060020 	add	x0, x1, #0x180
   aa48c:	52803ca2 	mov	w2, #0x1e5                 	// #485
   aa490:	97ffce2c 	bl	9dd40 <assertion_failed>
   aa494:	d2880683 	mov	x3, #0x4034                	// #16436
   aa498:	d360fcc6 	lsr	x6, x6, #32
   aa49c:	d2880701 	mov	x1, #0x4038                	// #16440
   aa4a0:	f100001f 	cmp	x0, #0x0
   aa4a4:	b8236848 	str	w8, [x2, x3]
   aa4a8:	52af0003 	mov	w3, #0x78000000            	// #2013265920
   aa4ac:	5a830463 	cneg	w3, w3, ne	// ne = any
   aa4b0:	b8216846 	str	w6, [x2, x1]
   aa4b4:	17ffff74 	b	aa284 <CBcmPCIeHostBridge::pcie_setup()+0x154>
   aa4b8:	90000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   aa4bc:	913d0021 	add	x1, x1, #0xf40
   aa4c0:	9106a020 	add	x0, x1, #0x1a8
   aa4c4:	52804062 	mov	w2, #0x203                 	// #515
   aa4c8:	97ffce1e 	bl	9dd40 <assertion_failed>
   aa4cc:	97ffd551 	bl	9fa10 <CLogger::Get()>
   aa4d0:	90000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   aa4d4:	913d0021 	add	x1, x1, #0xf40
   aa4d8:	9106e023 	add	x3, x1, #0x1b8
   aa4dc:	52800022 	mov	w2, #0x1                   	// #1
   aa4e0:	9101c021 	add	x1, x1, #0x70
   aa4e4:	97ffd737 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   aa4e8:	12800000 	mov	w0, #0xffffffff            	// #-1
   aa4ec:	17ffffcd 	b	aa420 <CBcmPCIeHostBridge::pcie_setup()+0x2f0>
   aa4f0:	97ffd548 	bl	9fa10 <CLogger::Get()>
   aa4f4:	90000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   aa4f8:	913d0021 	add	x1, x1, #0xf40
   aa4fc:	91072023 	add	x3, x1, #0x1c8
   aa500:	52800022 	mov	w2, #0x1                   	// #1
   aa504:	9101c021 	add	x1, x1, #0x70
   aa508:	97ffd72e 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   aa50c:	12800000 	mov	w0, #0xffffffff            	// #-1
   aa510:	17ffffc4 	b	aa420 <CBcmPCIeHostBridge::pcie_setup()+0x2f0>
   aa514:	f940066a 	ldr	x10, [x19, #8]
   aa518:	8b160143 	add	x3, x10, x22
   aa51c:	17ffff8f 	b	aa358 <CBcmPCIeHostBridge::pcie_setup()+0x228>

00000000000aa520 <CBcmPCIeHostBridge::pcie_probe()>:
   aa520:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   aa524:	910003fd 	mov	x29, sp
   aa528:	b9403001 	ldr	w1, [x0, #48]
   aa52c:	f9000bf3 	str	x19, [sp, #16]
   aa530:	35000241 	cbnz	w1, aa578 <CBcmPCIeHostBridge::pcie_probe()+0x58>
   aa534:	d2c000c3 	mov	x3, #0x600000000           	// #25769803776
   aa538:	d2bf0004 	mov	x4, #0xf8000000            	// #4160749568
   aa53c:	d2a08002 	mov	x2, #0x4000000             	// #67108864
   aa540:	52800021 	mov	w1, #0x1                   	// #1
   aa544:	a9018c04 	stp	x4, x3, [x0, #24]
   aa548:	aa0003f3 	mov	x19, x0
   aa54c:	f9001402 	str	x2, [x0, #40]
   aa550:	b9003001 	str	w1, [x0, #48]
   aa554:	97fffebb 	bl	aa040 <CBcmPCIeHostBridge::pcie_set_dma_ranges()>
   aa558:	34000080 	cbz	w0, aa568 <CBcmPCIeHostBridge::pcie_probe()+0x48>
   aa55c:	f9400bf3 	ldr	x19, [sp, #16]
   aa560:	a8c27bfd 	ldp	x29, x30, [sp], #32
   aa564:	d65f03c0 	ret
   aa568:	aa1303e0 	mov	x0, x19
   aa56c:	f9400bf3 	ldr	x19, [sp, #16]
   aa570:	a8c27bfd 	ldp	x29, x30, [sp], #32
   aa574:	17fffeef 	b	aa130 <CBcmPCIeHostBridge::pcie_setup()>
   aa578:	90000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   aa57c:	913d0021 	add	x1, x1, #0xf40
   aa580:	9104c020 	add	x0, x1, #0x130
   aa584:	52806162 	mov	w2, #0x30b                 	// #779
   aa588:	97ffcdee 	bl	9dd40 <assertion_failed>
   aa58c:	d503201f 	nop

00000000000aa590 <CBcmPCIeHostBridge::Initialize()>:
   aa590:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   aa594:	910003fd 	mov	x29, sp
   aa598:	b9403001 	ldr	w1, [x0, #48]
   aa59c:	a90153f3 	stp	x19, x20, [sp, #16]
   aa5a0:	f90013f5 	str	x21, [sp, #32]
   aa5a4:	35000601 	cbnz	w1, aa664 <CBcmPCIeHostBridge::Initialize()+0xd4>
   aa5a8:	d2c000c2 	mov	x2, #0x600000000           	// #25769803776
   aa5ac:	d2bf0003 	mov	x3, #0xf8000000            	// #4160749568
   aa5b0:	d2a08001 	mov	x1, #0x4000000             	// #67108864
   aa5b4:	52800035 	mov	w21, #0x1                   	// #1
   aa5b8:	a9018803 	stp	x3, x2, [x0, #24]
   aa5bc:	aa0003f3 	mov	x19, x0
   aa5c0:	f9001401 	str	x1, [x0, #40]
   aa5c4:	b9003015 	str	w21, [x0, #48]
   aa5c8:	97fffe9e 	bl	aa040 <CBcmPCIeHostBridge::pcie_set_dma_ranges()>
   aa5cc:	2a0003f4 	mov	w20, w0
   aa5d0:	340001e0 	cbz	w0, aa60c <CBcmPCIeHostBridge::Initialize()+0x7c>
   aa5d4:	97ffd50f 	bl	9fa10 <CLogger::Get()>
   aa5d8:	90000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   aa5dc:	913d0021 	add	x1, x1, #0xf40
   aa5e0:	91088023 	add	x3, x1, #0x220
   aa5e4:	2a1403e4 	mov	w4, w20
   aa5e8:	9101c021 	add	x1, x1, #0x70
   aa5ec:	52800022 	mov	w2, #0x1                   	// #1
   aa5f0:	52800015 	mov	w21, #0x0                   	// #0
   aa5f4:	97ffd6f3 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   aa5f8:	2a1503e0 	mov	w0, w21
   aa5fc:	a94153f3 	ldp	x19, x20, [sp, #16]
   aa600:	f94013f5 	ldr	x21, [sp, #32]
   aa604:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aa608:	d65f03c0 	ret
   aa60c:	aa1303e0 	mov	x0, x19
   aa610:	97fffec8 	bl	aa130 <CBcmPCIeHostBridge::pcie_setup()>
   aa614:	2a0003f4 	mov	w20, w0
   aa618:	35fffde0 	cbnz	w0, aa5d4 <CBcmPCIeHostBridge::Initialize()+0x44>
   aa61c:	aa1303e0 	mov	x0, x19
   aa620:	97fffdf4 	bl	a9df0 <CBcmPCIeHostBridge::enable_bridge()>
   aa624:	2a0003f3 	mov	w19, w0
   aa628:	34fffe80 	cbz	w0, aa5f8 <CBcmPCIeHostBridge::Initialize()+0x68>
   aa62c:	97ffd4f9 	bl	9fa10 <CLogger::Get()>
   aa630:	90000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   aa634:	913d0021 	add	x1, x1, #0xf40
   aa638:	2a1303e4 	mov	w4, w19
   aa63c:	2a1503e2 	mov	w2, w21
   aa640:	91092023 	add	x3, x1, #0x248
   aa644:	9101c021 	add	x1, x1, #0x70
   aa648:	97ffd6de 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   aa64c:	52800015 	mov	w21, #0x0                   	// #0
   aa650:	a94153f3 	ldp	x19, x20, [sp, #16]
   aa654:	2a1503e0 	mov	w0, w21
   aa658:	f94013f5 	ldr	x21, [sp, #32]
   aa65c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aa660:	d65f03c0 	ret
   aa664:	90000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   aa668:	913d0021 	add	x1, x1, #0xf40
   aa66c:	9104c020 	add	x0, x1, #0x130
   aa670:	52806162 	mov	w2, #0x30b                 	// #779
   aa674:	97ffcdb3 	bl	9dd40 <assertion_failed>
   aa678:	d503201f 	nop
   aa67c:	d503201f 	nop

00000000000aa680 <CBcmPCIeHostBridge::pcie_map_conf(unsigned int, unsigned int, int)>:
   aa680:	aa0003e4 	mov	x4, x0
   aa684:	340001a1 	cbz	w1, aa6b8 <CBcmPCIeHostBridge::pcie_map_conf(unsigned int, unsigned int, int)+0x38>
   aa688:	f9400484 	ldr	x4, [x4, #8]
   aa68c:	53140840 	ubfiz	w0, w2, #12, #3
   aa690:	93407c63 	sxtw	x3, w3
   aa694:	2a015001 	orr	w1, w0, w1, lsl #20
   aa698:	13037c42 	asr	w2, w2, #3
   aa69c:	91402063 	add	x3, x3, #0x8, lsl #12
   aa6a0:	53111042 	ubfiz	w2, w2, #15, #5
   aa6a4:	2a020021 	orr	w1, w1, w2
   aa6a8:	8b040060 	add	x0, x3, x4
   aa6ac:	91402484 	add	x4, x4, #0x9, lsl #12
   aa6b0:	b9000081 	str	w1, [x4]
   aa6b4:	d65f03c0 	ret
   aa6b8:	f27d105f 	tst	x2, #0xf8
   aa6bc:	d2800000 	mov	x0, #0x0                   	// #0
   aa6c0:	54ffffa1 	b.ne	aa6b4 <CBcmPCIeHostBridge::pcie_map_conf(unsigned int, unsigned int, int)+0x34>  // b.any
   aa6c4:	f9400480 	ldr	x0, [x4, #8]
   aa6c8:	8b23c000 	add	x0, x0, w3, sxtw
   aa6cc:	d65f03c0 	ret

00000000000aa6d0 <CBcmPCIeHostBridge::find_pci_capability(unsigned long, unsigned char)>:
   aa6d0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   aa6d4:	910003fd 	mov	x29, sp
   aa6d8:	b4000300 	cbz	x0, aa738 <CBcmPCIeHostBridge::find_pci_capability(unsigned long, unsigned char)+0x68>
   aa6dc:	12001c21 	and	w1, w1, #0xff
   aa6e0:	34000361 	cbz	w1, aa74c <CBcmPCIeHostBridge::find_pci_capability(unsigned long, unsigned char)+0x7c>
   aa6e4:	79400c02 	ldrh	w2, [x0, #6]
   aa6e8:	aa0003e3 	mov	x3, x0
   aa6ec:	d2800000 	mov	x0, #0x0                   	// #0
   aa6f0:	362001a2 	tbz	w2, #4, aa724 <CBcmPCIeHostBridge::find_pci_capability(unsigned long, unsigned char)+0x54>
   aa6f4:	3940d062 	ldrb	w2, [x3, #52]
   aa6f8:	72001c42 	ands	w2, w2, #0xff
   aa6fc:	540000a1 	b.ne	aa710 <CBcmPCIeHostBridge::find_pci_capability(unsigned long, unsigned char)+0x40>  // b.any
   aa700:	14000009 	b	aa724 <CBcmPCIeHostBridge::find_pci_capability(unsigned long, unsigned char)+0x54>
   aa704:	39400402 	ldrb	w2, [x0, #1]
   aa708:	72001c42 	ands	w2, w2, #0xff
   aa70c:	54000100 	b.eq	aa72c <CBcmPCIeHostBridge::find_pci_capability(unsigned long, unsigned char)+0x5c>  // b.none
   aa710:	92401c44 	and	x4, x2, #0xff
   aa714:	8b220060 	add	x0, x3, w2, uxtb
   aa718:	38636882 	ldrb	w2, [x4, x3]
   aa71c:	6b22003f 	cmp	w1, w2, uxtb
   aa720:	54ffff21 	b.ne	aa704 <CBcmPCIeHostBridge::find_pci_capability(unsigned long, unsigned char)+0x34>  // b.any
   aa724:	a8c17bfd 	ldp	x29, x30, [sp], #16
   aa728:	d65f03c0 	ret
   aa72c:	d2800000 	mov	x0, #0x0                   	// #0
   aa730:	a8c17bfd 	ldp	x29, x30, [sp], #16
   aa734:	d65f03c0 	ret
   aa738:	90000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   aa73c:	913d0021 	add	x1, x1, #0xf40
   aa740:	9109a020 	add	x0, x1, #0x268
   aa744:	52806b62 	mov	w2, #0x35b                 	// #859
   aa748:	97ffcd7e 	bl	9dd40 <assertion_failed>
   aa74c:	90000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   aa750:	913d0021 	add	x1, x1, #0xf40
   aa754:	9109e020 	add	x0, x1, #0x278
   aa758:	52806b82 	mov	w2, #0x35c                 	// #860
   aa75c:	97ffcd79 	bl	9dd40 <assertion_failed>

00000000000aa760 <CBcmPCIeHostBridge::pcie_bridge_sw_init_set(unsigned int)>:
   aa760:	f9400400 	ldr	x0, [x0, #8]
   aa764:	d2924202 	mov	x2, #0x9210                	// #37392
   aa768:	b8626803 	ldr	w3, [x0, x2]
   aa76c:	331f0023 	bfi	w3, w1, #1, #1
   aa770:	b8226803 	str	w3, [x0, x2]
   aa774:	b8626800 	ldr	w0, [x0, x2]
   aa778:	d65f03c0 	ret
   aa77c:	d503201f 	nop

00000000000aa780 <CBcmPCIeHostBridge::pcie_perst_set(unsigned int)>:
   aa780:	f9400400 	ldr	x0, [x0, #8]
   aa784:	d2924202 	mov	x2, #0x9210                	// #37392
   aa788:	b8626803 	ldr	w3, [x0, x2]
   aa78c:	33000023 	bfxil	w3, w1, #0, #1
   aa790:	b8226803 	str	w3, [x0, x2]
   aa794:	b8626800 	ldr	w0, [x0, x2]
   aa798:	d65f03c0 	ret
   aa79c:	d503201f 	nop

00000000000aa7a0 <CBcmPCIeHostBridge::pcie_link_up()>:
   aa7a0:	f9400400 	ldr	x0, [x0, #8]
   aa7a4:	d2880d01 	mov	x1, #0x4068                	// #16488
   aa7a8:	b8616800 	ldr	w0, [x0, x1]
   aa7ac:	53047c01 	lsr	w1, w0, #4
   aa7b0:	0a401420 	and	w0, w1, w0, lsr #5
   aa7b4:	12000000 	and	w0, w0, #0x1
   aa7b8:	d65f03c0 	ret
   aa7bc:	d503201f 	nop

00000000000aa7c0 <CBcmPCIeHostBridge::pcie_rc_mode()>:
   aa7c0:	f9400400 	ldr	x0, [x0, #8]
   aa7c4:	d2880d01 	mov	x1, #0x4068                	// #16488
   aa7c8:	b8616800 	ldr	w0, [x0, x1]
   aa7cc:	53071c00 	ubfx	w0, w0, #7, #1
   aa7d0:	d65f03c0 	ret
   aa7d4:	d503201f 	nop
   aa7d8:	d503201f 	nop
   aa7dc:	d503201f 	nop

00000000000aa7e0 <CBcmPCIeHostBridge::msi_set_regs(TPCIeMSIData*)>:
   aa7e0:	b9401801 	ldr	w1, [x0, #24]
   aa7e4:	710c083f 	cmp	w1, #0x302
   aa7e8:	54000209 	b.ls	aa828 <CBcmPCIeHostBridge::msi_set_regs(TPCIeMSIData*)+0x48>  // b.plast
   aa7ec:	a9409c01 	ldp	x1, x7, [x0, #8]
   aa7f0:	12800008 	mov	w8, #0xffffffff            	// #-1
   aa7f4:	d2880885 	mov	x5, #0x4044                	// #16452
   aa7f8:	d2880904 	mov	x4, #0x4048                	// #16456
   aa7fc:	d2880982 	mov	x2, #0x404c                	// #16460
   aa800:	528ca803 	mov	w3, #0x6540                	// #25920
   aa804:	72bffc03 	movk	w3, #0xffe0, lsl #16
   aa808:	f9400000 	ldr	x0, [x0]
   aa80c:	32000026 	orr	w6, w1, #0x1
   aa810:	d360fc21 	lsr	x1, x1, #32
   aa814:	b90014e8 	str	w8, [x7, #20]
   aa818:	b8256806 	str	w6, [x0, x5]
   aa81c:	b8246801 	str	w1, [x0, x4]
   aa820:	b8226803 	str	w3, [x0, x2]
   aa824:	d65f03c0 	ret
   aa828:	90000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   aa82c:	913d0021 	add	x1, x1, #0xf40
   aa830:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   aa834:	910a2020 	add	x0, x1, #0x288
   aa838:	910003fd 	mov	x29, sp
   aa83c:	528077c2 	mov	w2, #0x3be                 	// #958
   aa840:	97ffcd40 	bl	9dd40 <assertion_failed>
   aa844:	d503201f 	nop
   aa848:	d503201f 	nop
   aa84c:	d503201f 	nop

00000000000aa850 <CBcmPCIeHostBridge::pcie_enable_msi(void (*)(unsigned int, void*), void*)>:
   aa850:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   aa854:	910003fd 	mov	x29, sp
   aa858:	a90153f3 	stp	x19, x20, [sp, #16]
   aa85c:	f90013f5 	str	x21, [sp, #32]
   aa860:	b4000461 	cbz	x1, aa8ec <CBcmPCIeHostBridge::pcie_enable_msi(void (*)(unsigned int, void*), void*)+0x9c>
   aa864:	aa0003f3 	mov	x19, x0
   aa868:	d2800600 	mov	x0, #0x30                  	// #48
   aa86c:	aa0103f4 	mov	x20, x1
   aa870:	aa0203f5 	mov	x21, x2
   aa874:	97fff67b 	bl	a8260 <operator new(unsigned long)>
   aa878:	d2800602 	mov	x2, #0x30                  	// #48
   aa87c:	52800001 	mov	w1, #0x0                   	// #0
   aa880:	f9003a60 	str	x0, [x19, #112]
   aa884:	97fff3d9 	bl	a77e8 <memset>
   aa888:	b9401261 	ldr	w1, [x19, #16]
   aa88c:	a9401260 	ldp	x0, x4, [x19]
   aa890:	a9468e62 	ldp	x2, x3, [x19, #104]
   aa894:	a9000864 	stp	x4, x2, [x3]
   aa898:	b9001861 	str	w1, [x3, #24]
   aa89c:	a9025474 	stp	x20, x21, [x3, #32]
   aa8a0:	b4000300 	cbz	x0, aa900 <CBcmPCIeHostBridge::pcie_enable_msi(void (*)(unsigned int, void*), void*)+0xb0>
   aa8a4:	f0ffffe2 	adrp	x2, a9000 <CMemorySystem::CMemorySystem(bool)+0x50>
   aa8a8:	912f0042 	add	x2, x2, #0xbc0
   aa8ac:	52801681 	mov	w1, #0xb4                  	// #180
   aa8b0:	9400011c 	bl	aad20 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   aa8b4:	b9401260 	ldr	w0, [x19, #16]
   aa8b8:	710c081f 	cmp	w0, #0x302
   aa8bc:	540002c9 	b.ls	aa914 <CBcmPCIeHostBridge::pcie_enable_msi(void (*)(unsigned int, void*), void*)+0xc4>  // b.plast
   aa8c0:	f9403a60 	ldr	x0, [x19, #112]
   aa8c4:	d288a002 	mov	x2, #0x4500                	// #17664
   aa8c8:	f9400001 	ldr	x1, [x0]
   aa8cc:	8b020021 	add	x1, x1, x2
   aa8d0:	f9000801 	str	x1, [x0, #16]
   aa8d4:	97ffffc3 	bl	aa7e0 <CBcmPCIeHostBridge::msi_set_regs(TPCIeMSIData*)>
   aa8d8:	52800000 	mov	w0, #0x0                   	// #0
   aa8dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   aa8e0:	f94013f5 	ldr	x21, [sp, #32]
   aa8e4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aa8e8:	d65f03c0 	ret
   aa8ec:	90000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   aa8f0:	913d0021 	add	x1, x1, #0xf40
   aa8f4:	910aa020 	add	x0, x1, #0x2a8
   aa8f8:	52807482 	mov	w2, #0x3a4                 	// #932
   aa8fc:	97ffcd11 	bl	9dd40 <assertion_failed>
   aa900:	90000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   aa904:	913d0021 	add	x1, x1, #0xf40
   aa908:	91010020 	add	x0, x1, #0x40
   aa90c:	52807622 	mov	w2, #0x3b1                 	// #945
   aa910:	97ffcd0c 	bl	9dd40 <assertion_failed>
   aa914:	90000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   aa918:	913d0021 	add	x1, x1, #0xf40
   aa91c:	910ae020 	add	x0, x1, #0x2b8
   aa920:	52807682 	mov	w2, #0x3b4                 	// #948
   aa924:	97ffcd07 	bl	9dd40 <assertion_failed>
   aa928:	d503201f 	nop
   aa92c:	d503201f 	nop

00000000000aa930 <CBcmPCIeHostBridge::ConnectMSI(void (*)(unsigned int, void*), void*)>:
   aa930:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   aa934:	910003fd 	mov	x29, sp
   aa938:	97ffffc6 	bl	aa850 <CBcmPCIeHostBridge::pcie_enable_msi(void (*)(unsigned int, void*), void*)>
   aa93c:	7100001f 	cmp	w0, #0x0
   aa940:	a8c17bfd 	ldp	x29, x30, [sp], #16
   aa944:	1a9f17e0 	cset	w0, eq	// eq = none
   aa948:	d65f03c0 	ret
   aa94c:	d503201f 	nop

00000000000aa950 <CBcmPCIeHostBridge::cfg_index(int, int, int)>:
   aa950:	121e7442 	and	w2, w2, #0xfffffffc
   aa954:	53141c21 	ubfiz	w1, w1, #12, #8
   aa958:	2a005040 	orr	w0, w2, w0, lsl #20
   aa95c:	2a000020 	orr	w0, w1, w0
   aa960:	d65f03c0 	ret
   aa964:	d503201f 	nop
   aa968:	d503201f 	nop
   aa96c:	d503201f 	nop

00000000000aa970 <CBcmPCIeHostBridge::set_gen(unsigned long, int)>:
   aa970:	b940b803 	ldr	w3, [x0, #184]
   aa974:	7941b802 	ldrh	w2, [x0, #220]
   aa978:	121c6c63 	and	w3, w3, #0xfffffff0
   aa97c:	2a010063 	orr	w3, w3, w1
   aa980:	121c2c42 	and	w2, w2, #0xfff0
   aa984:	2a010041 	orr	w1, w2, w1
   aa988:	b900b803 	str	w3, [x0, #184]
   aa98c:	12003c21 	and	w1, w1, #0xffff
   aa990:	7901b801 	strh	w1, [x0, #220]
   aa994:	d65f03c0 	ret
   aa998:	d503201f 	nop
   aa99c:	d503201f 	nop

00000000000aa9a0 <CBcmPCIeHostBridge::link_speed_to_str(int)>:
   aa9a0:	51000400 	sub	w0, w0, #0x1
   aa9a4:	7100081f 	cmp	w0, #0x2
   aa9a8:	540000c8 	b.hi	aa9c0 <CBcmPCIeHostBridge::link_speed_to_str(int)+0x20>  // b.pmore
   aa9ac:	90000081 	adrp	x1, ba000 <CursorSymbol+0x188>
   aa9b0:	913d0021 	add	x1, x1, #0xf40
   aa9b4:	9107c021 	add	x1, x1, #0x1f0
   aa9b8:	f8605820 	ldr	x0, [x1, w0, uxtw #3]
   aa9bc:	d65f03c0 	ret
   aa9c0:	90000080 	adrp	x0, ba000 <CursorSymbol+0x188>
   aa9c4:	913d0000 	add	x0, x0, #0xf40
   aa9c8:	91058000 	add	x0, x0, #0x160
   aa9cc:	d65f03c0 	ret

00000000000aa9d0 <CBcmPCIeHostBridge::encode_ibar_size(unsigned long)>:
   aa9d0:	f100041f 	cmp	x0, #0x1
   aa9d4:	54000249 	b.ls	aaa1c <CBcmPCIeHostBridge::encode_ibar_size(unsigned long)+0x4c>  // b.plast
   aa9d8:	52800001 	mov	w1, #0x0                   	// #0
   aa9dc:	d2800024 	mov	x4, #0x1                   	// #1
   aa9e0:	2a0103e3 	mov	w3, w1
   aa9e4:	11000421 	add	w1, w1, #0x1
   aa9e8:	9ac12082 	lsl	x2, x4, x1
   aa9ec:	eb02001f 	cmp	x0, x2
   aa9f0:	54ffff88 	b.hi	aa9e0 <CBcmPCIeHostBridge::encode_ibar_size(unsigned long)+0x10>  // b.pmore
   aa9f4:	51002c60 	sub	w0, w3, #0xb
   aa9f8:	71000c1f 	cmp	w0, #0x3
   aa9fc:	540000c9 	b.ls	aaa14 <CBcmPCIeHostBridge::encode_ibar_size(unsigned long)+0x44>  // b.plast
   aaa00:	51003c60 	sub	w0, w3, #0xf
   aaa04:	51003863 	sub	w3, w3, #0xe
   aaa08:	7100581f 	cmp	w0, #0x16
   aaa0c:	1a9f3060 	csel	w0, w3, wzr, cc	// cc = lo, ul, last
   aaa10:	d65f03c0 	ret
   aaa14:	11004460 	add	w0, w3, #0x11
   aaa18:	d65f03c0 	ret
   aaa1c:	52800000 	mov	w0, #0x0                   	// #0
   aaa20:	d65f03c0 	ret
   aaa24:	d503201f 	nop
   aaa28:	d503201f 	nop
   aaa2c:	d503201f 	nop

00000000000aaa30 <CBcmPCIeHostBridge::rd_fld(unsigned long, unsigned int, int)>:
   aaa30:	b9400000 	ldr	w0, [x0]
   aaa34:	0a000020 	and	w0, w1, w0
   aaa38:	1ac22400 	lsr	w0, w0, w2
   aaa3c:	d65f03c0 	ret

00000000000aaa40 <CBcmPCIeHostBridge::wr_fld(unsigned long, unsigned int, int, unsigned int)>:
   aaa40:	b9400004 	ldr	w4, [x0]
   aaa44:	1ac22063 	lsl	w3, w3, w2
   aaa48:	4a040063 	eor	w3, w3, w4
   aaa4c:	0a010063 	and	w3, w3, w1
   aaa50:	4a040063 	eor	w3, w3, w4
   aaa54:	b9000003 	str	w3, [x0]
   aaa58:	d65f03c0 	ret
   aaa5c:	d503201f 	nop

00000000000aaa60 <CBcmPCIeHostBridge::wr_fld_rb(unsigned long, unsigned int, int, unsigned int)>:
   aaa60:	b9400004 	ldr	w4, [x0]
   aaa64:	1ac22063 	lsl	w3, w3, w2
   aaa68:	4a040063 	eor	w3, w3, w4
   aaa6c:	0a010063 	and	w3, w3, w1
   aaa70:	4a040063 	eor	w3, w3, w4
   aaa74:	b9000003 	str	w3, [x0]
   aaa78:	b9400000 	ldr	w0, [x0]
   aaa7c:	d65f03c0 	ret

00000000000aaa80 <CBcmPCIeHostBridge::usleep_range(unsigned int, unsigned int)>:
   aaa80:	2a0103e0 	mov	w0, w1
   aaa84:	17fff157 	b	a6fe0 <CTimer::SimpleusDelay(unsigned int)>
   aaa88:	d503201f 	nop
   aaa8c:	d503201f 	nop

00000000000aaa90 <CBcmPCIeHostBridge::msleep(unsigned int)>:
   aaa90:	2a0103e0 	mov	w0, w1
   aaa94:	17fff13b 	b	a6f80 <CTimer::SimpleMsDelay(unsigned int)>
   aaa98:	d503201f 	nop
   aaa9c:	d503201f 	nop

00000000000aaaa0 <CBcmPCIeHostBridge::ilog2(unsigned long)>:
   aaaa0:	aa0003e2 	mov	x2, x0
   aaaa4:	52800000 	mov	w0, #0x0                   	// #0
   aaaa8:	f100045f 	cmp	x2, #0x1
   aaaac:	540000e9 	b.ls	aaac8 <CBcmPCIeHostBridge::ilog2(unsigned long)+0x28>  // b.plast
   aaab0:	d2800023 	mov	x3, #0x1                   	// #1
   aaab4:	d503201f 	nop
   aaab8:	11000400 	add	w0, w0, #0x1
   aaabc:	9ac02061 	lsl	x1, x3, x0
   aaac0:	eb02003f 	cmp	x1, x2
   aaac4:	54ffffa3 	b.cc	aaab8 <CBcmPCIeHostBridge::ilog2(unsigned long)+0x18>  // b.lo, b.ul, b.last
   aaac8:	d65f03c0 	ret
   aaacc:	00000000 	udf	#0

00000000000aaad0 <CInterruptSystem::CInterruptSystem()>:
   aaad0:	f0000082 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   aaad4:	f9417841 	ldr	x1, [x2, #752]
   aaad8:	b4000041 	cbz	x1, aaae0 <CInterruptSystem::CInterruptSystem()+0x10>
   aaadc:	d65f03c0 	ret
   aaae0:	aa0003e1 	mov	x1, x0
   aaae4:	f9017840 	str	x0, [x2, #752]
   aaae8:	91200000 	add	x0, x0, #0x800
   aaaec:	d503201f 	nop
   aaaf0:	91002021 	add	x1, x1, #0x8
   aaaf4:	f81f803f 	stur	xzr, [x1, #-8]
   aaaf8:	f903fc3f 	str	xzr, [x1, #2040]
   aaafc:	eb00003f 	cmp	x1, x0
   aab00:	54ffff81 	b.ne	aaaf0 <CInterruptSystem::CInterruptSystem()+0x20>  // b.any
   aab04:	d65f03c0 	ret
   aab08:	d503201f 	nop
   aab0c:	d503201f 	nop

00000000000aab10 <CInterruptSystem::~CInterruptSystem()>:
   aab10:	f0000081 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   aab14:	f9417822 	ldr	x2, [x1, #752]
   aab18:	eb00005f 	cmp	x2, x0
   aab1c:	54000040 	b.eq	aab24 <CInterruptSystem::~CInterruptSystem()+0x14>  // b.none
   aab20:	d65f03c0 	ret
   aab24:	d50342df 	msr	daifset, #0x2
   aab28:	d2820000 	mov	x0, #0x1000                	// #4096
   aab2c:	f2bff080 	movk	x0, #0xff84, lsl #16
   aab30:	b900001f 	str	wzr, [x0]
   aab34:	f901783f 	str	xzr, [x1, #752]
   aab38:	d65f03c0 	ret
   aab3c:	d503201f 	nop

00000000000aab40 <CInterruptSystem::Destructor()>:
   aab40:	f0000081 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   aab44:	f9417822 	ldr	x2, [x1, #752]
   aab48:	eb00005f 	cmp	x2, x0
   aab4c:	54000040 	b.eq	aab54 <CInterruptSystem::Destructor()+0x14>  // b.none
   aab50:	d65f03c0 	ret
   aab54:	d50342df 	msr	daifset, #0x2
   aab58:	d2820000 	mov	x0, #0x1000                	// #4096
   aab5c:	f2bff080 	movk	x0, #0xff84, lsl #16
   aab60:	b900001f 	str	wzr, [x0]
   aab64:	f901783f 	str	xzr, [x1, #752]
   aab68:	d65f03c0 	ret
   aab6c:	d503201f 	nop

00000000000aab70 <CInterruptSystem::Initialize()>:
   aab70:	f0000081 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   aab74:	f9417821 	ldr	x1, [x1, #752]
   aab78:	eb00003f 	cmp	x1, x0
   aab7c:	54000060 	b.eq	aab88 <CInterruptSystem::Initialize()+0x18>  // b.none
   aab80:	52800020 	mov	w0, #0x1                   	// #1
   aab84:	d65f03c0 	ret
   aab88:	d2a000e0 	mov	x0, #0x70000               	// #458752
   aab8c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   aab90:	910003fd 	mov	x29, sp
   aab94:	d2800001 	mov	x1, #0x0                   	// #0
   aab98:	b0000029 	adrp	x9, af000 <VectorTable>
   aab9c:	911e1129 	add	x9, x9, #0x784
   aaba0:	f100203f 	cmp	x1, #0x8
   aaba4:	f9000fe0 	str	x0, [sp, #24]
   aaba8:	b000002a 	adrp	x10, af000 <VectorTable>
   aabac:	9126214a 	add	x10, x10, #0x988
   aabb0:	f9400fe0 	ldr	x0, [sp, #24]
   aabb4:	52a28008 	mov	w8, #0x14000000            	// #335544320
   aabb8:	d3797c24 	ubfiz	x4, x1, #7, #32
   aabbc:	d379e022 	lsl	x2, x1, #7
   aabc0:	540002e0 	b.eq	aac1c <CInterruptSystem::Initialize()+0xac>  // b.none
   aabc4:	d503201f 	nop
   aabc8:	f9400fe5 	ldr	x5, [sp, #24]
   aabcc:	8b020000 	add	x0, x0, x2
   aabd0:	71003c3f 	cmp	w1, #0xf
   aabd4:	cb000120 	sub	x0, x9, x0
   aabd8:	9342fc00 	asr	x0, x0, #2
   aabdc:	2a080003 	orr	w3, w0, w8
   aabe0:	53083c07 	ubfx	w7, w0, #8, #8
   aabe4:	53187c63 	lsr	w3, w3, #24
   aabe8:	53105c06 	ubfx	w6, w0, #16, #8
   aabec:	8b0400a2 	add	x2, x5, x4
   aabf0:	382468a0 	strb	w0, [x5, x4]
   aabf4:	39000447 	strb	w7, [x2, #1]
   aabf8:	39000846 	strb	w6, [x2, #2]
   aabfc:	39000c43 	strb	w3, [x2, #3]
   aac00:	540002a0 	b.eq	aac54 <CInterruptSystem::Initialize()+0xe4>  // b.none
   aac04:	91000421 	add	x1, x1, #0x1
   aac08:	f9400fe0 	ldr	x0, [sp, #24]
   aac0c:	f100203f 	cmp	x1, #0x8
   aac10:	d3797c24 	ubfiz	x4, x1, #7, #32
   aac14:	d379e022 	lsl	x2, x1, #7
   aac18:	54fffd81 	b.ne	aabc8 <CInterruptSystem::Initialize()+0x58>  // b.any
   aac1c:	8b020000 	add	x0, x0, x2
   aac20:	f9400fe3 	ldr	x3, [sp, #24]
   aac24:	91000421 	add	x1, x1, #0x1
   aac28:	cb000140 	sub	x0, x10, x0
   aac2c:	9342fc00 	asr	x0, x0, #2
   aac30:	2a080002 	orr	w2, w0, w8
   aac34:	53083c05 	ubfx	w5, w0, #8, #8
   aac38:	53187c42 	lsr	w2, w2, #24
   aac3c:	53105c04 	ubfx	w4, w0, #16, #8
   aac40:	39100060 	strb	w0, [x3, #1024]
   aac44:	39100465 	strb	w5, [x3, #1025]
   aac48:	39100864 	strb	w4, [x3, #1026]
   aac4c:	39100c62 	strb	w2, [x3, #1027]
   aac50:	17ffffee 	b	aac08 <CInterruptSystem::Initialize()+0x98>
   aac54:	97fffa5f 	bl	a95d0 <SyncDataAndInstructionCache>
   aac58:	d2820003 	mov	x3, #0x1000                	// #4096
   aac5c:	f2bff083 	movk	x3, #0xff84, lsl #16
   aac60:	d2823000 	mov	x0, #0x1180                	// #4480
   aac64:	f2bff080 	movk	x0, #0xff84, lsl #16
   aac68:	d2823402 	mov	x2, #0x11a0                	// #4512
   aac6c:	f2bff082 	movk	x2, #0xff84, lsl #16
   aac70:	b900007f 	str	wzr, [x3]
   aac74:	12800001 	mov	w1, #0xffffffff            	// #-1
   aac78:	b9000001 	str	w1, [x0]
   aac7c:	91001000 	add	x0, x0, #0x4
   aac80:	b900fc01 	str	w1, [x0, #252]
   aac84:	b901fc01 	str	w1, [x0, #508]
   aac88:	eb02001f 	cmp	x0, x2
   aac8c:	54ffff61 	b.ne	aac78 <CInterruptSystem::Initialize()+0x108>  // b.any
   aac90:	d2828000 	mov	x0, #0x1400                	// #5120
   aac94:	f2bff080 	movk	x0, #0xff84, lsl #16
   aac98:	52941403 	mov	w3, #0xa0a0                	// #41120
   aac9c:	72b41403 	movk	w3, #0xa0a0, lsl #16
   aaca0:	d282a001 	mov	x1, #0x1500                	// #5376
   aaca4:	f2bff081 	movk	x1, #0xff84, lsl #16
   aaca8:	3200c3e2 	mov	w2, #0x1010101             	// #16843009
   aacac:	d503201f 	nop
   aacb0:	b9000003 	str	w3, [x0]
   aacb4:	91001000 	add	x0, x0, #0x4
   aacb8:	b903fc02 	str	w2, [x0, #1020]
   aacbc:	eb01001f 	cmp	x0, x1
   aacc0:	54ffff81 	b.ne	aacb0 <CInterruptSystem::Initialize()+0x140>  // b.any
   aacc4:	d2838000 	mov	x0, #0x1c00                	// #7168
   aacc8:	f2bff080 	movk	x0, #0xff84, lsl #16
   aaccc:	d2838801 	mov	x1, #0x1c40                	// #7232
   aacd0:	f2bff081 	movk	x1, #0xff84, lsl #16
   aacd4:	d503201f 	nop
   aacd8:	b800441f 	str	wzr, [x0], #4
   aacdc:	eb01001f 	cmp	x0, x1
   aace0:	54ffffc1 	b.ne	aacd8 <CInterruptSystem::Initialize()+0x168>  // b.any
   aace4:	52800020 	mov	w0, #0x1                   	// #1
   aace8:	d2820004 	mov	x4, #0x1000                	// #4096
   aacec:	f2bff084 	movk	x4, #0xff84, lsl #16
   aacf0:	52801e03 	mov	w3, #0xf0                  	// #240
   aacf4:	d2840082 	mov	x2, #0x2004                	// #8196
   aacf8:	f2bff082 	movk	x2, #0xff84, lsl #16
   aacfc:	d2840001 	mov	x1, #0x2000                	// #8192
   aad00:	f2bff081 	movk	x1, #0xff84, lsl #16
   aad04:	b9000080 	str	w0, [x4]
   aad08:	b9000043 	str	w3, [x2]
   aad0c:	b9000020 	str	w0, [x1]
   aad10:	d50342ff 	msr	daifclr, #0x2
   aad14:	52800020 	mov	w0, #0x1                   	// #1
   aad18:	a8c27bfd 	ldp	x29, x30, [sp], #32
   aad1c:	d65f03c0 	ret

00000000000aad20 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   aad20:	f0000084 	adrp	x4, bd000 <CNetDevice::s_SpeedString+0x18>
   aad24:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   aad28:	910003fd 	mov	x29, sp
   aad2c:	f9417884 	ldr	x4, [x4, #752]
   aad30:	14000002 	b	aad38 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x18>
   aad34:	aa0403e0 	mov	x0, x4
   aad38:	eb00009f 	cmp	x4, x0
   aad3c:	54ffffc1 	b.ne	aad34 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x14>  // b.any
   aad40:	7103fc3f 	cmp	w1, #0xff
   aad44:	54000208 	b.hi	aad84 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>  // b.pmore
   aad48:	2a0103e6 	mov	w6, w1
   aad4c:	8b214c87 	add	x7, x4, w1, uxtw #3
   aad50:	f8667880 	ldr	x0, [x4, x6, lsl #3]
   aad54:	b5000240 	cbnz	x0, aad9c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x7c>
   aad58:	52808800 	mov	w0, #0x440                 	// #1088
   aad5c:	72a7fc20 	movk	w0, #0x3fe1, lsl #16
   aad60:	f8267882 	str	x2, [x4, x6, lsl #3]
   aad64:	0b411400 	add	w0, w0, w1, lsr #5
   aad68:	52800025 	mov	w5, #0x1                   	// #1
   aad6c:	f90400e3 	str	x3, [x7, #2048]
   aad70:	1ac120a1 	lsl	w1, w5, w1
   aad74:	531e7400 	lsl	w0, w0, #2
   aad78:	b9000001 	str	w1, [x0]
   aad7c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   aad80:	d65f03c0 	ret
   aad84:	f0000041 	adrp	x1, b5000 <_etext+0x4158>
   aad88:	f0000040 	adrp	x0, b5000 <_etext+0x4158>
   aad8c:	91272021 	add	x1, x1, #0x9c8
   aad90:	91278000 	add	x0, x0, #0x9e0
   aad94:	52801b42 	mov	w2, #0xda                  	// #218
   aad98:	97ffcbea 	bl	9dd40 <assertion_failed>
   aad9c:	f0000041 	adrp	x1, b5000 <_etext+0x4158>
   aada0:	f0000040 	adrp	x0, b5000 <_etext+0x4158>
   aada4:	91272021 	add	x1, x1, #0x9c8
   aada8:	9127e000 	add	x0, x0, #0x9f8
   aadac:	52801b62 	mov	w2, #0xdb                  	// #219
   aadb0:	97ffcbe4 	bl	9dd40 <assertion_failed>
   aadb4:	d503201f 	nop
   aadb8:	d503201f 	nop
   aadbc:	d503201f 	nop

00000000000aadc0 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   aadc0:	f0000082 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   aadc4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   aadc8:	910003fd 	mov	x29, sp
   aadcc:	f9417842 	ldr	x2, [x2, #752]
   aadd0:	14000002 	b	aadd8 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x18>
   aadd4:	aa0203e0 	mov	x0, x2
   aadd8:	eb00005f 	cmp	x2, x0
   aaddc:	54ffffc1 	b.ne	aadd4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x14>  // b.any
   aade0:	7103fc3f 	cmp	w1, #0xff
   aade4:	54000208 	b.hi	aae24 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>  // b.pmore
   aade8:	2a0103e4 	mov	w4, w1
   aadec:	8b214c45 	add	x5, x2, w1, uxtw #3
   aadf0:	f8647840 	ldr	x0, [x2, x4, lsl #3]
   aadf4:	b4000240 	cbz	x0, aae3c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x7c>
   aadf8:	52808c00 	mov	w0, #0x460                 	// #1120
   aadfc:	72a7fc20 	movk	w0, #0x3fe1, lsl #16
   aae00:	0b411400 	add	w0, w0, w1, lsr #5
   aae04:	52800023 	mov	w3, #0x1                   	// #1
   aae08:	1ac12061 	lsl	w1, w3, w1
   aae0c:	531e7400 	lsl	w0, w0, #2
   aae10:	b9000001 	str	w1, [x0]
   aae14:	f824785f 	str	xzr, [x2, x4, lsl #3]
   aae18:	f90400bf 	str	xzr, [x5, #2048]
   aae1c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   aae20:	d65f03c0 	ret
   aae24:	f0000041 	adrp	x1, b5000 <_etext+0x4158>
   aae28:	f0000040 	adrp	x0, b5000 <_etext+0x4158>
   aae2c:	91272021 	add	x1, x1, #0x9c8
   aae30:	91278000 	add	x0, x0, #0x9e0
   aae34:	52801f02 	mov	w2, #0xf8                  	// #248
   aae38:	97ffcbc2 	bl	9dd40 <assertion_failed>
   aae3c:	f0000041 	adrp	x1, b5000 <_etext+0x4158>
   aae40:	f0000040 	adrp	x0, b5000 <_etext+0x4158>
   aae44:	91272021 	add	x1, x1, #0x9c8
   aae48:	91286000 	add	x0, x0, #0xa18
   aae4c:	52801f22 	mov	w2, #0xf9                  	// #249
   aae50:	97ffcbbc 	bl	9dd40 <assertion_failed>
   aae54:	d503201f 	nop
   aae58:	d503201f 	nop
   aae5c:	d503201f 	nop

00000000000aae60 <CInterruptSystem::DisconnectFIQ()>:
   aae60:	f0000081 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   aae64:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   aae68:	910003fd 	mov	x29, sp
   aae6c:	f9417821 	ldr	x1, [x1, #752]
   aae70:	14000002 	b	aae78 <CInterruptSystem::DisconnectFIQ()+0x18>
   aae74:	aa0103e0 	mov	x0, x1
   aae78:	eb00003f 	cmp	x1, x0
   aae7c:	54ffffc1 	b.ne	aae74 <CInterruptSystem::DisconnectFIQ()+0x14>  // b.any
   aae80:	f0000085 	adrp	x5, bd000 <CNetDevice::s_SpeedString+0x18>
   aae84:	910160a2 	add	x2, x5, #0x58
   aae88:	394160a4 	ldrb	w4, [x5, #88]
   aae8c:	39400443 	ldrb	w3, [x2, #1]
   aae90:	39400841 	ldrb	w1, [x2, #2]
   aae94:	39400c40 	ldrb	w0, [x2, #3]
   aae98:	aa032083 	orr	x3, x4, x3, lsl #8
   aae9c:	39401044 	ldrb	w4, [x2, #4]
   aaea0:	aa014061 	orr	x1, x3, x1, lsl #16
   aaea4:	39401443 	ldrb	w3, [x2, #5]
   aaea8:	aa006020 	orr	x0, x1, x0, lsl #24
   aaeac:	39401841 	ldrb	w1, [x2, #6]
   aaeb0:	aa048004 	orr	x4, x0, x4, lsl #32
   aaeb4:	39401c40 	ldrb	w0, [x2, #7]
   aaeb8:	aa03a083 	orr	x3, x4, x3, lsl #40
   aaebc:	aa01c061 	orr	x1, x3, x1, lsl #48
   aaec0:	aa00e020 	orr	x0, x1, x0, lsl #56
   aaec4:	b4000560 	cbz	x0, aaf70 <CInterruptSystem::DisconnectFIQ()+0x110>
   aaec8:	d2801a81 	mov	x1, #0xd4                  	// #212
   aaecc:	528928c0 	mov	w0, #0x4946                	// #18758
   aaed0:	72aa6a20 	movk	w0, #0x5351, lsl #16
   aaed4:	f9000fe1 	str	x1, [sp, #24]
   aaed8:	f9400fe1 	ldr	x1, [sp, #24]
   aaedc:	b9400021 	ldr	w1, [x1]
   aaee0:	6b00003f 	cmp	w1, w0
   aaee4:	54000221 	b.ne	aaf28 <CInterruptSystem::DisconnectFIQ()+0xc8>  // b.any
   aaee8:	39404044 	ldrb	w4, [x2, #16]
   aaeec:	39404441 	ldrb	w1, [x2, #17]
   aaef0:	39404840 	ldrb	w0, [x2, #18]
   aaef4:	39404c43 	ldrb	w3, [x2, #19]
   aaef8:	aa012081 	orr	x1, x4, x1, lsl #8
   aaefc:	aa004020 	orr	x0, x1, x0, lsl #16
   aaf00:	aa036003 	orr	x3, x0, x3, lsl #24
   aaf04:	b4000123 	cbz	x3, aaf28 <CInterruptSystem::DisconnectFIQ()+0xc8>
   aaf08:	d2800024 	mov	x4, #0x1                   	// #1
   aaf0c:	aa0403e0 	mov	x0, x4
   aaf10:	aa0303e1 	mov	x1, x3
   aaf14:	d4000003 	smc	#0x0
   aaf18:	3900405f 	strb	wzr, [x2, #16]
   aaf1c:	3900445f 	strb	wzr, [x2, #17]
   aaf20:	3900485f 	strb	wzr, [x2, #18]
   aaf24:	39004c5f 	strb	wzr, [x2, #19]
   aaf28:	390160bf 	strb	wzr, [x5, #88]
   aaf2c:	3900045f 	strb	wzr, [x2, #1]
   aaf30:	3900085f 	strb	wzr, [x2, #2]
   aaf34:	39000c5f 	strb	wzr, [x2, #3]
   aaf38:	3900105f 	strb	wzr, [x2, #4]
   aaf3c:	3900145f 	strb	wzr, [x2, #5]
   aaf40:	3900185f 	strb	wzr, [x2, #6]
   aaf44:	39001c5f 	strb	wzr, [x2, #7]
   aaf48:	3900205f 	strb	wzr, [x2, #8]
   aaf4c:	3900245f 	strb	wzr, [x2, #9]
   aaf50:	3900285f 	strb	wzr, [x2, #10]
   aaf54:	39002c5f 	strb	wzr, [x2, #11]
   aaf58:	3900305f 	strb	wzr, [x2, #12]
   aaf5c:	3900345f 	strb	wzr, [x2, #13]
   aaf60:	3900385f 	strb	wzr, [x2, #14]
   aaf64:	39003c5f 	strb	wzr, [x2, #15]
   aaf68:	a8c27bfd 	ldp	x29, x30, [sp], #32
   aaf6c:	d65f03c0 	ret
   aaf70:	f0000041 	adrp	x1, b5000 <_etext+0x4158>
   aaf74:	f0000040 	adrp	x0, b5000 <_etext+0x4158>
   aaf78:	91272021 	add	x1, x1, #0x9c8
   aaf7c:	9128e000 	add	x0, x0, #0xa38
   aaf80:	528023a2 	mov	w2, #0x11d                 	// #285
   aaf84:	97ffcb6f 	bl	9dd40 <assertion_failed>
   aaf88:	d503201f 	nop
   aaf8c:	d503201f 	nop

00000000000aaf90 <CInterruptSystem::EnableIRQ(unsigned int)>:
   aaf90:	7103fc1f 	cmp	w0, #0xff
   aaf94:	54000128 	b.hi	aafb8 <CInterruptSystem::EnableIRQ(unsigned int)+0x28>  // b.pmore
   aaf98:	52808801 	mov	w1, #0x440                 	// #1088
   aaf9c:	72a7fc21 	movk	w1, #0x3fe1, lsl #16
   aafa0:	0b401421 	add	w1, w1, w0, lsr #5
   aafa4:	52800022 	mov	w2, #0x1                   	// #1
   aafa8:	1ac02042 	lsl	w2, w2, w0
   aafac:	531e7420 	lsl	w0, w1, #2
   aafb0:	b9000002 	str	w2, [x0]
   aafb4:	d65f03c0 	ret
   aafb8:	f0000041 	adrp	x1, b5000 <_etext+0x4158>
   aafbc:	f0000040 	adrp	x0, b5000 <_etext+0x4158>
   aafc0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   aafc4:	91272021 	add	x1, x1, #0x9c8
   aafc8:	910003fd 	mov	x29, sp
   aafcc:	91278000 	add	x0, x0, #0x9e0
   aafd0:	52802662 	mov	w2, #0x133                 	// #307
   aafd4:	97ffcb5b 	bl	9dd40 <assertion_failed>
   aafd8:	d503201f 	nop
   aafdc:	d503201f 	nop

00000000000aafe0 <CInterruptSystem::DisableIRQ(unsigned int)>:
   aafe0:	7103fc1f 	cmp	w0, #0xff
   aafe4:	54000128 	b.hi	ab008 <CInterruptSystem::DisableIRQ(unsigned int)+0x28>  // b.pmore
   aafe8:	52808c01 	mov	w1, #0x460                 	// #1120
   aafec:	72a7fc21 	movk	w1, #0x3fe1, lsl #16
   aaff0:	0b401421 	add	w1, w1, w0, lsr #5
   aaff4:	52800022 	mov	w2, #0x1                   	// #1
   aaff8:	1ac02042 	lsl	w2, w2, w0
   aaffc:	531e7420 	lsl	w0, w1, #2
   ab000:	b9000002 	str	w2, [x0]
   ab004:	d65f03c0 	ret
   ab008:	d0000041 	adrp	x1, b5000 <_etext+0x4158>
   ab00c:	d0000040 	adrp	x0, b5000 <_etext+0x4158>
   ab010:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ab014:	91272021 	add	x1, x1, #0x9c8
   ab018:	910003fd 	mov	x29, sp
   ab01c:	91278000 	add	x0, x0, #0x9e0
   ab020:	528028c2 	mov	w2, #0x146                 	// #326
   ab024:	97ffcb47 	bl	9dd40 <assertion_failed>
   ab028:	d503201f 	nop
   ab02c:	d503201f 	nop

00000000000ab030 <CInterruptSystem::EnableFIQ(unsigned int)>:
   ab030:	d2801a82 	mov	x2, #0xd4                  	// #212
   ab034:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ab038:	910003fd 	mov	x29, sp
   ab03c:	528928c1 	mov	w1, #0x4946                	// #18758
   ab040:	72aa6a21 	movk	w1, #0x5351, lsl #16
   ab044:	f9000bf3 	str	x19, [sp, #16]
   ab048:	2a0003f3 	mov	w19, w0
   ab04c:	f90017e2 	str	x2, [sp, #40]
   ab050:	f94017e0 	ldr	x0, [sp, #40]
   ab054:	b9400000 	ldr	w0, [x0]
   ab058:	6b01001f 	cmp	w0, w1
   ab05c:	54000100 	b.eq	ab07c <CInterruptSystem::EnableFIQ(unsigned int)+0x4c>  // b.none
   ab060:	97ffd26c 	bl	9fa10 <CLogger::Get()>
   ab064:	d0000043 	adrp	x3, b5000 <_etext+0x4158>
   ab068:	d0000041 	adrp	x1, b5000 <_etext+0x4158>
   ab06c:	91294063 	add	x3, x3, #0xa50
   ab070:	9129e021 	add	x1, x1, #0xa78
   ab074:	52800002 	mov	w2, #0x0                   	// #0
   ab078:	97ffd452 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   ab07c:	71003e7f 	cmp	w19, #0xf
   ab080:	54000289 	b.ls	ab0d0 <CInterruptSystem::EnableFIQ(unsigned int)+0xa0>  // b.plast
   ab084:	7103fe7f 	cmp	w19, #0xff
   ab088:	54000308 	b.hi	ab0e8 <CInterruptSystem::EnableFIQ(unsigned int)+0xb8>  // b.pmore
   ab08c:	d3483e65 	ubfx	x5, x19, #8, #8
   ab090:	d3505e64 	ubfx	x4, x19, #16, #8
   ab094:	53187e61 	lsr	w1, w19, #24
   ab098:	d0000080 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   ab09c:	91016000 	add	x0, x0, #0x58
   ab0a0:	2a1303e3 	mov	w3, w19
   ab0a4:	d2800002 	mov	x2, #0x0                   	// #0
   ab0a8:	39004013 	strb	w19, [x0, #16]
   ab0ac:	39004405 	strb	w5, [x0, #17]
   ab0b0:	39004804 	strb	w4, [x0, #18]
   ab0b4:	39004c01 	strb	w1, [x0, #19]
   ab0b8:	aa0203e0 	mov	x0, x2
   ab0bc:	aa0303e1 	mov	x1, x3
   ab0c0:	d4000003 	smc	#0x0
   ab0c4:	f9400bf3 	ldr	x19, [sp, #16]
   ab0c8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ab0cc:	d65f03c0 	ret
   ab0d0:	d0000041 	adrp	x1, b5000 <_etext+0x4158>
   ab0d4:	d0000040 	adrp	x0, b5000 <_etext+0x4158>
   ab0d8:	91272021 	add	x1, x1, #0x9c8
   ab0dc:	912a0000 	add	x0, x0, #0xa80
   ab0e0:	52802aa2 	mov	w2, #0x155                 	// #341
   ab0e4:	97ffcb17 	bl	9dd40 <assertion_failed>
   ab0e8:	d0000041 	adrp	x1, b5000 <_etext+0x4158>
   ab0ec:	d0000040 	adrp	x0, b5000 <_etext+0x4158>
   ab0f0:	91272021 	add	x1, x1, #0x9c8
   ab0f4:	912a4000 	add	x0, x0, #0xa90
   ab0f8:	52802ac2 	mov	w2, #0x156                 	// #342
   ab0fc:	97ffcb11 	bl	9dd40 <assertion_failed>

00000000000ab100 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   ab100:	d0000085 	adrp	x5, bd000 <CNetDevice::s_SpeedString+0x18>
   ab104:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ab108:	aa0003e4 	mov	x4, x0
   ab10c:	910003fd 	mov	x29, sp
   ab110:	2a0103e0 	mov	w0, w1
   ab114:	f94178a5 	ldr	x5, [x5, #752]
   ab118:	14000002 	b	ab120 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x20>
   ab11c:	aa0503e4 	mov	x4, x5
   ab120:	eb0400bf 	cmp	x5, x4
   ab124:	54ffffc1 	b.ne	ab11c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x1c>  // b.any
   ab128:	7104001f 	cmp	w0, #0x100
   ab12c:	54000688 	b.hi	ab1fc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xfc>  // b.pmore
   ab130:	b4000722 	cbz	x2, ab214 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x114>
   ab134:	d0000089 	adrp	x9, bd000 <CNetDevice::s_SpeedString+0x18>
   ab138:	91016124 	add	x4, x9, #0x58
   ab13c:	39416121 	ldrb	w1, [x9, #88]
   ab140:	39400487 	ldrb	w7, [x4, #1]
   ab144:	39400886 	ldrb	w6, [x4, #2]
   ab148:	39400c85 	ldrb	w5, [x4, #3]
   ab14c:	aa072027 	orr	x7, x1, x7, lsl #8
   ab150:	39401088 	ldrb	w8, [x4, #4]
   ab154:	aa0640e6 	orr	x6, x7, x6, lsl #16
   ab158:	39401487 	ldrb	w7, [x4, #5]
   ab15c:	aa0560c5 	orr	x5, x6, x5, lsl #24
   ab160:	39401886 	ldrb	w6, [x4, #6]
   ab164:	aa0880a8 	orr	x8, x5, x8, lsl #32
   ab168:	39401c85 	ldrb	w5, [x4, #7]
   ab16c:	aa07a107 	orr	x7, x8, x7, lsl #40
   ab170:	aa06c0e6 	orr	x6, x7, x6, lsl #48
   ab174:	aa05e0c5 	orr	x5, x6, x5, lsl #56
   ab178:	b50005a5 	cbnz	x5, ab22c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x12c>
   ab17c:	53083c47 	ubfx	w7, w2, #8, #8
   ab180:	53105c46 	ubfx	w6, w2, #16, #8
   ab184:	39016122 	strb	w2, [x9, #88]
   ab188:	53187c45 	lsr	w5, w2, #24
   ab18c:	d3609c41 	ubfx	x1, x2, #32, #8
   ab190:	39002083 	strb	w3, [x4, #8]
   ab194:	d368bc4b 	ubfx	x11, x2, #40, #8
   ab198:	d370dc4a 	ubfx	x10, x2, #48, #8
   ab19c:	39000487 	strb	w7, [x4, #1]
   ab1a0:	53083c69 	ubfx	w9, w3, #8, #8
   ab1a4:	53105c68 	ubfx	w8, w3, #16, #8
   ab1a8:	39000886 	strb	w6, [x4, #2]
   ab1ac:	53187c67 	lsr	w7, w3, #24
   ab1b0:	d3609c66 	ubfx	x6, x3, #32, #8
   ab1b4:	39000c85 	strb	w5, [x4, #3]
   ab1b8:	d378fc42 	lsr	x2, x2, #56
   ab1bc:	d368bc65 	ubfx	x5, x3, #40, #8
   ab1c0:	39001081 	strb	w1, [x4, #4]
   ab1c4:	d370dc61 	ubfx	x1, x3, #48, #8
   ab1c8:	d378fc63 	lsr	x3, x3, #56
   ab1cc:	3900148b 	strb	w11, [x4, #5]
   ab1d0:	3900188a 	strb	w10, [x4, #6]
   ab1d4:	39001c82 	strb	w2, [x4, #7]
   ab1d8:	39002489 	strb	w9, [x4, #9]
   ab1dc:	39002888 	strb	w8, [x4, #10]
   ab1e0:	39002c87 	strb	w7, [x4, #11]
   ab1e4:	39003086 	strb	w6, [x4, #12]
   ab1e8:	39003485 	strb	w5, [x4, #13]
   ab1ec:	39003881 	strb	w1, [x4, #14]
   ab1f0:	39003c83 	strb	w3, [x4, #15]
   ab1f4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ab1f8:	17ffff8e 	b	ab030 <CInterruptSystem::EnableFIQ(unsigned int)>
   ab1fc:	d0000041 	adrp	x1, b5000 <_etext+0x4158>
   ab200:	d0000040 	adrp	x0, b5000 <_etext+0x4158>
   ab204:	91272021 	add	x1, x1, #0x9c8
   ab208:	912aa000 	add	x0, x0, #0xaa8
   ab20c:	52802142 	mov	w2, #0x10a                 	// #266
   ab210:	97ffcacc 	bl	9dd40 <assertion_failed>
   ab214:	d0000041 	adrp	x1, b5000 <_etext+0x4158>
   ab218:	d0000040 	adrp	x0, b5000 <_etext+0x4158>
   ab21c:	91272021 	add	x1, x1, #0x9c8
   ab220:	91290000 	add	x0, x0, #0xa40
   ab224:	52802162 	mov	w2, #0x10b                 	// #267
   ab228:	97ffcac6 	bl	9dd40 <assertion_failed>
   ab22c:	d0000041 	adrp	x1, b5000 <_etext+0x4158>
   ab230:	d0000040 	adrp	x0, b5000 <_etext+0x4158>
   ab234:	91272021 	add	x1, x1, #0x9c8
   ab238:	912b0000 	add	x0, x0, #0xac0
   ab23c:	52802182 	mov	w2, #0x10c                 	// #268
   ab240:	97ffcac0 	bl	9dd40 <assertion_failed>
   ab244:	d503201f 	nop
   ab248:	d503201f 	nop
   ab24c:	d503201f 	nop

00000000000ab250 <CInterruptSystem::DisableFIQ()>:
   ab250:	d10043ff 	sub	sp, sp, #0x10
   ab254:	d2801a81 	mov	x1, #0xd4                  	// #212
   ab258:	528928c0 	mov	w0, #0x4946                	// #18758
   ab25c:	72aa6a20 	movk	w0, #0x5351, lsl #16
   ab260:	f90007e1 	str	x1, [sp, #8]
   ab264:	f94007e1 	ldr	x1, [sp, #8]
   ab268:	b9400021 	ldr	w1, [x1]
   ab26c:	6b00003f 	cmp	w1, w0
   ab270:	54000261 	b.ne	ab2bc <CInterruptSystem::DisableFIQ()+0x6c>  // b.any
   ab274:	d0000082 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   ab278:	91016042 	add	x2, x2, #0x58
   ab27c:	39404044 	ldrb	w4, [x2, #16]
   ab280:	39404441 	ldrb	w1, [x2, #17]
   ab284:	39404840 	ldrb	w0, [x2, #18]
   ab288:	39404c43 	ldrb	w3, [x2, #19]
   ab28c:	aa012081 	orr	x1, x4, x1, lsl #8
   ab290:	aa004020 	orr	x0, x1, x0, lsl #16
   ab294:	aa036003 	orr	x3, x0, x3, lsl #24
   ab298:	b4000123 	cbz	x3, ab2bc <CInterruptSystem::DisableFIQ()+0x6c>
   ab29c:	d2800024 	mov	x4, #0x1                   	// #1
   ab2a0:	aa0403e0 	mov	x0, x4
   ab2a4:	aa0303e1 	mov	x1, x3
   ab2a8:	d4000003 	smc	#0x0
   ab2ac:	3900405f 	strb	wzr, [x2, #16]
   ab2b0:	3900445f 	strb	wzr, [x2, #17]
   ab2b4:	3900485f 	strb	wzr, [x2, #18]
   ab2b8:	39004c5f 	strb	wzr, [x2, #19]
   ab2bc:	910043ff 	add	sp, sp, #0x10
   ab2c0:	d65f03c0 	ret
   ab2c4:	d503201f 	nop
   ab2c8:	d503201f 	nop
   ab2cc:	d503201f 	nop

00000000000ab2d0 <CInterruptSystem::Get()>:
   ab2d0:	d0000080 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   ab2d4:	f9417800 	ldr	x0, [x0, #752]
   ab2d8:	b4000040 	cbz	x0, ab2e0 <CInterruptSystem::Get()+0x10>
   ab2dc:	d65f03c0 	ret
   ab2e0:	d0000041 	adrp	x1, b5000 <_etext+0x4158>
   ab2e4:	b0000020 	adrp	x0, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   ab2e8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ab2ec:	91272021 	add	x1, x1, #0x9c8
   ab2f0:	910003fd 	mov	x29, sp
   ab2f4:	913ae000 	add	x0, x0, #0xeb8
   ab2f8:	52802e02 	mov	w2, #0x170                 	// #368
   ab2fc:	97ffca91 	bl	9dd40 <assertion_failed>

00000000000ab300 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   ab300:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ab304:	7103fc3f 	cmp	w1, #0xff
   ab308:	910003fd 	mov	x29, sp
   ab30c:	54000268 	b.hi	ab358 <CInterruptSystem::CallIRQHandler(unsigned int)+0x58>  // b.pmore
   ab310:	f8615802 	ldr	x2, [x0, w1, uxtw #3]
   ab314:	8b214c00 	add	x0, x0, w1, uxtw #3
   ab318:	b40000c2 	cbz	x2, ab330 <CInterruptSystem::CallIRQHandler(unsigned int)+0x30>
   ab31c:	f9440000 	ldr	x0, [x0, #2048]
   ab320:	d63f0040 	blr	x2
   ab324:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ab328:	52800020 	mov	w0, #0x1                   	// #1
   ab32c:	d65f03c0 	ret
   ab330:	52808c02 	mov	w2, #0x460                 	// #1120
   ab334:	72a7fc22 	movk	w2, #0x3fe1, lsl #16
   ab338:	0b411442 	add	w2, w2, w1, lsr #5
   ab33c:	52800023 	mov	w3, #0x1                   	// #1
   ab340:	52800000 	mov	w0, #0x0                   	// #0
   ab344:	1ac12063 	lsl	w3, w3, w1
   ab348:	531e7441 	lsl	w1, w2, #2
   ab34c:	b9000023 	str	w3, [x1]
   ab350:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ab354:	d65f03c0 	ret
   ab358:	d0000041 	adrp	x1, b5000 <_etext+0x4158>
   ab35c:	d0000040 	adrp	x0, b5000 <_etext+0x4158>
   ab360:	91272021 	add	x1, x1, #0x9c8
   ab364:	91278000 	add	x0, x0, #0x9e0
   ab368:	52802ec2 	mov	w2, #0x176                 	// #374
   ab36c:	97ffca75 	bl	9dd40 <assertion_failed>

00000000000ab370 <CInterruptSystem::InterruptHandler()>:
   ab370:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   ab374:	d2840180 	mov	x0, #0x200c                	// #8204
   ab378:	f2bff080 	movk	x0, #0xff84, lsl #16
   ab37c:	910003fd 	mov	x29, sp
   ab380:	f9000bf3 	str	x19, [sp, #16]
   ab384:	b9400013 	ldr	w19, [x0]
   ab388:	7218067f 	tst	w19, #0x300
   ab38c:	12002661 	and	w1, w19, #0x3ff
   ab390:	540001a1 	b.ne	ab3c4 <CInterruptSystem::InterruptHandler()+0x54>  // b.any
   ab394:	721c167f 	tst	w19, #0x3f0
   ab398:	540000a0 	b.eq	ab3ac <CInterruptSystem::InterruptHandler()+0x3c>  // b.none
   ab39c:	d0000080 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   ab3a0:	f9417800 	ldr	x0, [x0, #752]
   ab3a4:	b4000200 	cbz	x0, ab3e4 <CInterruptSystem::InterruptHandler()+0x74>
   ab3a8:	97ffffd6 	bl	ab300 <CInterruptSystem::CallIRQHandler(unsigned int)>
   ab3ac:	d2840200 	mov	x0, #0x2010                	// #8208
   ab3b0:	f2bff080 	movk	x0, #0xff84, lsl #16
   ab3b4:	b9000013 	str	w19, [x0]
   ab3b8:	f9400bf3 	ldr	x19, [sp, #16]
   ab3bc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   ab3c0:	d65f03c0 	ret
   ab3c4:	710fec3f 	cmp	w1, #0x3fb
   ab3c8:	54ffff88 	b.hi	ab3b8 <CInterruptSystem::InterruptHandler()+0x48>  // b.pmore
   ab3cc:	d0000041 	adrp	x1, b5000 <_etext+0x4158>
   ab3d0:	d0000040 	adrp	x0, b5000 <_etext+0x4158>
   ab3d4:	91272021 	add	x1, x1, #0x9c8
   ab3d8:	912b6000 	add	x0, x0, #0xad8
   ab3dc:	52803462 	mov	w2, #0x1a3                 	// #419
   ab3e0:	97ffca58 	bl	9dd40 <assertion_failed>
   ab3e4:	d0000041 	adrp	x1, b5000 <_etext+0x4158>
   ab3e8:	b0000020 	adrp	x0, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   ab3ec:	91272021 	add	x1, x1, #0x9c8
   ab3f0:	913ae000 	add	x0, x0, #0xeb8
   ab3f4:	52803222 	mov	w2, #0x191                 	// #401
   ab3f8:	97ffca52 	bl	9dd40 <assertion_failed>
   ab3fc:	d503201f 	nop

00000000000ab400 <InterruptHandler>:
   ab400:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   ab404:	d2840180 	mov	x0, #0x200c                	// #8204
   ab408:	f2bff080 	movk	x0, #0xff84, lsl #16
   ab40c:	910003fd 	mov	x29, sp
   ab410:	f9000bf3 	str	x19, [sp, #16]
   ab414:	b9400013 	ldr	w19, [x0]
   ab418:	7218067f 	tst	w19, #0x300
   ab41c:	12002661 	and	w1, w19, #0x3ff
   ab420:	540001a1 	b.ne	ab454 <InterruptHandler+0x54>  // b.any
   ab424:	721c167f 	tst	w19, #0x3f0
   ab428:	540000a0 	b.eq	ab43c <InterruptHandler+0x3c>  // b.none
   ab42c:	d0000080 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   ab430:	f9417800 	ldr	x0, [x0, #752]
   ab434:	b4000200 	cbz	x0, ab474 <InterruptHandler+0x74>
   ab438:	97ffffb2 	bl	ab300 <CInterruptSystem::CallIRQHandler(unsigned int)>
   ab43c:	d2840200 	mov	x0, #0x2010                	// #8208
   ab440:	f2bff080 	movk	x0, #0xff84, lsl #16
   ab444:	b9000013 	str	w19, [x0]
   ab448:	f9400bf3 	ldr	x19, [sp, #16]
   ab44c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   ab450:	d65f03c0 	ret
   ab454:	710fec3f 	cmp	w1, #0x3fb
   ab458:	54ffff88 	b.hi	ab448 <InterruptHandler+0x48>  // b.pmore
   ab45c:	d0000041 	adrp	x1, b5000 <_etext+0x4158>
   ab460:	d0000040 	adrp	x0, b5000 <_etext+0x4158>
   ab464:	91272021 	add	x1, x1, #0x9c8
   ab468:	912b6000 	add	x0, x0, #0xad8
   ab46c:	52803462 	mov	w2, #0x1a3                 	// #419
   ab470:	97ffca34 	bl	9dd40 <assertion_failed>
   ab474:	d0000041 	adrp	x1, b5000 <_etext+0x4158>
   ab478:	b0000020 	adrp	x0, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   ab47c:	91272021 	add	x1, x1, #0x9c8
   ab480:	913ae000 	add	x0, x0, #0xeb8
   ab484:	52803222 	mov	w2, #0x191                 	// #401
   ab488:	97ffca2e 	bl	9dd40 <assertion_failed>
   ab48c:	d503201f 	nop

00000000000ab490 <CInterruptSystem::InitializeSecondary()>:
   ab490:	52801e03 	mov	w3, #0xf0                  	// #240
   ab494:	d2840082 	mov	x2, #0x2004                	// #8196
   ab498:	f2bff082 	movk	x2, #0xff84, lsl #16
   ab49c:	52800021 	mov	w1, #0x1                   	// #1
   ab4a0:	d2840000 	mov	x0, #0x2000                	// #8192
   ab4a4:	f2bff080 	movk	x0, #0xff84, lsl #16
   ab4a8:	b9000043 	str	w3, [x2]
   ab4ac:	b9000001 	str	w1, [x0]
   ab4b0:	d65f03c0 	ret
   ab4b4:	d503201f 	nop
   ab4b8:	d503201f 	nop
   ab4bc:	d503201f 	nop

00000000000ab4c0 <CInterruptSystem::SendIPI(unsigned int, unsigned int)>:
   ab4c0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ab4c4:	71001c1f 	cmp	w0, #0x7
   ab4c8:	910003fd 	mov	x29, sp
   ab4cc:	54000188 	b.hi	ab4fc <CInterruptSystem::SendIPI(unsigned int, unsigned int)+0x3c>  // b.pmore
   ab4d0:	71003c3f 	cmp	w1, #0xf
   ab4d4:	54000208 	b.hi	ab514 <CInterruptSystem::SendIPI(unsigned int, unsigned int)+0x54>  // b.pmore
   ab4d8:	52800022 	mov	w2, #0x1                   	// #1
   ab4dc:	11004000 	add	w0, w0, #0x10
   ab4e0:	1ac02040 	lsl	w0, w2, w0
   ab4e4:	d283e002 	mov	x2, #0x1f00                	// #7936
   ab4e8:	f2bff082 	movk	x2, #0xff84, lsl #16
   ab4ec:	2a010001 	orr	w1, w0, w1
   ab4f0:	b9000041 	str	w1, [x2]
   ab4f4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ab4f8:	d65f03c0 	ret
   ab4fc:	d0000041 	adrp	x1, b5000 <_etext+0x4158>
   ab500:	d0000040 	adrp	x0, b5000 <_etext+0x4158>
   ab504:	91272021 	add	x1, x1, #0x9c8
   ab508:	912ba000 	add	x0, x0, #0xae8
   ab50c:	528036c2 	mov	w2, #0x1b6                 	// #438
   ab510:	97ffca0c 	bl	9dd40 <assertion_failed>
   ab514:	d0000041 	adrp	x1, b5000 <_etext+0x4158>
   ab518:	d0000040 	adrp	x0, b5000 <_etext+0x4158>
   ab51c:	91272021 	add	x1, x1, #0x9c8
   ab520:	912be000 	add	x0, x0, #0xaf8
   ab524:	528036e2 	mov	w2, #0x1b7                 	// #439
   ab528:	97ffca06 	bl	9dd40 <assertion_failed>
   ab52c:	d503201f 	nop

00000000000ab530 <CInterruptSystem::CallSecureMonitor(unsigned int, unsigned int)>:
   ab530:	2a0003e2 	mov	w2, w0
   ab534:	2a0103e3 	mov	w3, w1
   ab538:	aa0203e0 	mov	x0, x2
   ab53c:	aa0303e1 	mov	x1, x3
   ab540:	d4000003 	smc	#0x0
   ab544:	d65f03c0 	ret
   ab548:	d503201f 	nop
   ab54c:	d503201f 	nop

00000000000ab550 <CInterruptSystem::SecureMonitorHandler(unsigned int, unsigned int)>:
   ab550:	121e7423 	and	w3, w1, #0xfffffffc
   ab554:	53057c22 	lsr	w2, w1, #5
   ab558:	531d0424 	ubfiz	w4, w1, #3, #2
   ab55c:	52800026 	mov	w6, #0x1                   	// #1
   ab560:	52801fe5 	mov	w5, #0xff                  	// #255
   ab564:	515ef863 	sub	w3, w3, #0x7be, lsl #12
   ab568:	531e7442 	lsl	w2, w2, #2
   ab56c:	51300063 	sub	w3, w3, #0xc00
   ab570:	1ac120c1 	lsl	w1, w6, w1
   ab574:	1ac420a7 	lsl	w7, w5, w4
   ab578:	35000300 	cbnz	w0, ab5d8 <CInterruptSystem::SecureMonitorHandler(unsigned int, unsigned int)+0x88>
   ab57c:	d2820008 	mov	x8, #0x1000                	// #4096
   ab580:	f2bff088 	movk	x8, #0xff84, lsl #16
   ab584:	52800069 	mov	w9, #0x3                   	// #3
   ab588:	52800166 	mov	w6, #0xb                   	// #11
   ab58c:	515ef840 	sub	w0, w2, #0x7be, lsl #12
   ab590:	d2840005 	mov	x5, #0x2000                	// #8192
   ab594:	f2bff085 	movk	x5, #0xff84, lsl #16
   ab598:	513e0000 	sub	w0, w0, #0xf80
   ab59c:	b9000109 	str	w9, [x8]
   ab5a0:	515ef842 	sub	w2, w2, #0x7be, lsl #12
   ab5a4:	b90000a6 	str	w6, [x5]
   ab5a8:	52800805 	mov	w5, #0x40                  	// #64
   ab5ac:	513c0042 	sub	w2, w2, #0xf00
   ab5b0:	b9400006 	ldr	w6, [x0]
   ab5b4:	1ac420a4 	lsl	w4, w5, w4
   ab5b8:	0a2100c5 	bic	w5, w6, w1
   ab5bc:	b9000005 	str	w5, [x0]
   ab5c0:	b9400060 	ldr	w0, [x3]
   ab5c4:	0a270000 	bic	w0, w0, w7
   ab5c8:	2a040000 	orr	w0, w0, w4
   ab5cc:	b9000060 	str	w0, [x3]
   ab5d0:	b9000041 	str	w1, [x2]
   ab5d4:	d65f03c0 	ret
   ab5d8:	7100041f 	cmp	w0, #0x1
   ab5dc:	54ffffc1 	b.ne	ab5d4 <CInterruptSystem::SecureMonitorHandler(unsigned int, unsigned int)+0x84>  // b.any
   ab5e0:	515ef845 	sub	w5, w2, #0x7be, lsl #12
   ab5e4:	52801400 	mov	w0, #0xa0                  	// #160
   ab5e8:	513a00a5 	sub	w5, w5, #0xe80
   ab5ec:	1ac42004 	lsl	w4, w0, w4
   ab5f0:	515ef842 	sub	w2, w2, #0x7be, lsl #12
   ab5f4:	d2840008 	mov	x8, #0x2000                	// #8192
   ab5f8:	f2bff088 	movk	x8, #0xff84, lsl #16
   ab5fc:	b90000a1 	str	w1, [x5]
   ab600:	513e0042 	sub	w2, w2, #0xf80
   ab604:	b9400060 	ldr	w0, [x3]
   ab608:	52800045 	mov	w5, #0x2                   	// #2
   ab60c:	d2820006 	mov	x6, #0x1000                	// #4096
   ab610:	f2bff086 	movk	x6, #0xff84, lsl #16
   ab614:	0a270000 	bic	w0, w0, w7
   ab618:	2a040000 	orr	w0, w0, w4
   ab61c:	b9000060 	str	w0, [x3]
   ab620:	b9400040 	ldr	w0, [x2]
   ab624:	2a000021 	orr	w1, w1, w0
   ab628:	b9000041 	str	w1, [x2]
   ab62c:	b9000105 	str	w5, [x8]
   ab630:	b90000c5 	str	w5, [x6]
   ab634:	d65f03c0 	ret
   ab638:	d503201f 	nop
   ab63c:	d503201f 	nop

00000000000ab640 <SecureMonitorHandler>:
   ab640:	17ffffc4 	b	ab550 <CInterruptSystem::SecureMonitorHandler(unsigned int, unsigned int)>
	...

00000000000ab650 <CDeviceTreeBlob::CDeviceTreeBlob(void const*)>:
   ab650:	f900001f 	str	xzr, [x0]
   ab654:	b40006c1 	cbz	x1, ab72c <CDeviceTreeBlob::CDeviceTreeBlob(void const*)+0xdc>
   ab658:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ab65c:	910003fd 	mov	x29, sp
   ab660:	39400024 	ldrb	w4, [x1]
   ab664:	a90153f3 	stp	x19, x20, [sp, #16]
   ab668:	aa0103f3 	mov	x19, x1
   ab66c:	aa0003f4 	mov	x20, x0
   ab670:	5281ba00 	mov	w0, #0xdd0                 	// #3536
   ab674:	72bdbfc0 	movk	w0, #0xedfe, lsl #16
   ab678:	39400423 	ldrb	w3, [x1, #1]
   ab67c:	39400822 	ldrb	w2, [x1, #2]
   ab680:	39400c21 	ldrb	w1, [x1, #3]
   ab684:	aa032083 	orr	x3, x4, x3, lsl #8
   ab688:	aa024062 	orr	x2, x3, x2, lsl #16
   ab68c:	aa016041 	orr	x1, x2, x1, lsl #24
   ab690:	6b00003f 	cmp	w1, w0
   ab694:	54000301 	b.ne	ab6f4 <CDeviceTreeBlob::CDeviceTreeBlob(void const*)+0xa4>  // b.any
   ab698:	39406263 	ldrb	w3, [x19, #24]
   ab69c:	39406662 	ldrb	w2, [x19, #25]
   ab6a0:	39406a60 	ldrb	w0, [x19, #26]
   ab6a4:	39406e61 	ldrb	w1, [x19, #27]
   ab6a8:	aa022062 	orr	x2, x3, x2, lsl #8
   ab6ac:	aa004040 	orr	x0, x2, x0, lsl #16
   ab6b0:	aa016001 	orr	x1, x0, x1, lsl #24
   ab6b4:	5ac00821 	rev	w1, w1
   ab6b8:	7100403f 	cmp	w1, #0x10
   ab6bc:	540001c1 	b.ne	ab6f4 <CDeviceTreeBlob::CDeviceTreeBlob(void const*)+0xa4>  // b.any
   ab6c0:	39401264 	ldrb	w4, [x19, #4]
   ab6c4:	529ffb03 	mov	w3, #0xffd8                	// #65496
   ab6c8:	72a001e3 	movk	w3, #0xf, lsl #16
   ab6cc:	39401661 	ldrb	w1, [x19, #5]
   ab6d0:	39401a60 	ldrb	w0, [x19, #6]
   ab6d4:	39401e62 	ldrb	w2, [x19, #7]
   ab6d8:	aa012081 	orr	x1, x4, x1, lsl #8
   ab6dc:	aa004020 	orr	x0, x1, x0, lsl #16
   ab6e0:	aa026002 	orr	x2, x0, x2, lsl #24
   ab6e4:	5ac00842 	rev	w2, w2
   ab6e8:	5100a040 	sub	w0, w2, #0x28
   ab6ec:	6b03001f 	cmp	w0, w3
   ab6f0:	54000089 	b.ls	ab700 <CDeviceTreeBlob::CDeviceTreeBlob(void const*)+0xb0>  // b.plast
   ab6f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   ab6f8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ab6fc:	d65f03c0 	ret
   ab700:	f90013f5 	str	x21, [sp, #32]
   ab704:	2a0203f5 	mov	w21, w2
   ab708:	aa1503e0 	mov	x0, x21
   ab70c:	97fff2dd 	bl	a8280 <operator new[](unsigned long)>
   ab710:	aa1503e2 	mov	x2, x21
   ab714:	aa1303e1 	mov	x1, x19
   ab718:	f94013f5 	ldr	x21, [sp, #32]
   ab71c:	f9000280 	str	x0, [x20]
   ab720:	a94153f3 	ldp	x19, x20, [sp, #16]
   ab724:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ab728:	17fff048 	b	a7848 <memcpy>
   ab72c:	d65f03c0 	ret

00000000000ab730 <CDeviceTreeBlob::~CDeviceTreeBlob()>:
   ab730:	f9400000 	ldr	x0, [x0]
   ab734:	b4000040 	cbz	x0, ab73c <CDeviceTreeBlob::~CDeviceTreeBlob()+0xc>
   ab738:	17fff2e6 	b	a82d0 <operator delete[](void*)>
   ab73c:	d65f03c0 	ret

00000000000ab740 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const>:
   ab740:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   ab744:	910003fd 	mov	x29, sp
   ab748:	a90153f3 	stp	x19, x20, [sp, #16]
   ab74c:	aa0203f3 	mov	x19, x2
   ab750:	aa0303f4 	mov	x20, x3
   ab754:	a9025bf5 	stp	x21, x22, [sp, #32]
   ab758:	aa0103f5 	mov	x21, x1
   ab75c:	aa0003f6 	mov	x22, x0
   ab760:	a90363f7 	stp	x23, x24, [sp, #48]
   ab764:	b40007f5 	cbz	x21, ab860 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x120>
   ab768:	f94002c0 	ldr	x0, [x22]
   ab76c:	b4001900 	cbz	x0, aba8c <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x34c>
   ab770:	b4000853 	cbz	x19, ab878 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x138>
   ab774:	39400263 	ldrb	w3, [x19]
   ab778:	39400661 	ldrb	w1, [x19, #1]
   ab77c:	39400a60 	ldrb	w0, [x19, #2]
   ab780:	39400e62 	ldrb	w2, [x19, #3]
   ab784:	aa012061 	orr	x1, x3, x1, lsl #8
   ab788:	aa004020 	orr	x0, x1, x0, lsl #16
   ab78c:	aa026002 	orr	x2, x0, x2, lsl #24
   ab790:	5ac00842 	rev	w2, w2
   ab794:	7100105f 	cmp	w2, #0x4
   ab798:	54000181 	b.ne	ab7c8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x88>  // b.any
   ab79c:	d503201f 	nop
   ab7a0:	38404e63 	ldrb	w3, [x19, #4]!
   ab7a4:	39400666 	ldrb	w6, [x19, #1]
   ab7a8:	39400a65 	ldrb	w5, [x19, #2]
   ab7ac:	39400e62 	ldrb	w2, [x19, #3]
   ab7b0:	aa062066 	orr	x6, x3, x6, lsl #8
   ab7b4:	aa0540c5 	orr	x5, x6, x5, lsl #16
   ab7b8:	aa0260a2 	orr	x2, x5, x2, lsl #24
   ab7bc:	5ac00842 	rev	w2, w2
   ab7c0:	7100105f 	cmp	w2, #0x4
   ab7c4:	54fffee0 	b.eq	ab7a0 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x60>  // b.none
   ab7c8:	7100045f 	cmp	w2, #0x1
   ab7cc:	54001061 	b.ne	ab9d8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x298>  // b.any
   ab7d0:	39c002a0 	ldrsb	w0, [x21]
   ab7d4:	35000100 	cbnz	w0, ab7f4 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0xb4>
   ab7d8:	910003bf 	mov	sp, x29
   ab7dc:	aa1303e0 	mov	x0, x19
   ab7e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   ab7e4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   ab7e8:	a94363f7 	ldp	x23, x24, [sp, #48]
   ab7ec:	a8c57bfd 	ldp	x29, x30, [sp], #80
   ab7f0:	d65f03c0 	ret
   ab7f4:	528005e1 	mov	w1, #0x2f                  	// #47
   ab7f8:	aa1503e0 	mov	x0, x21
   ab7fc:	97ffef39 	bl	a74e0 <strchr>
   ab800:	b40011a0 	cbz	x0, aba34 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x2f4>
   ab804:	cb150017 	sub	x23, x0, x21
   ab808:	b40011f7 	cbz	x23, aba44 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x304>
   ab80c:	910042e0 	add	x0, x23, #0x10
   ab810:	aa1503e1 	mov	x1, x21
   ab814:	927cec00 	and	x0, x0, #0xfffffffffffffff0
   ab818:	aa1703e2 	mov	x2, x23
   ab81c:	cb2063ff 	sub	sp, sp, x0
   ab820:	91001278 	add	x24, x19, #0x4
   ab824:	910003e0 	mov	x0, sp
   ab828:	97fff008 	bl	a7848 <memcpy>
   ab82c:	910003e1 	mov	x1, sp
   ab830:	aa1803e0 	mov	x0, x24
   ab834:	38376bff 	strb	wzr, [sp, x23]
   ab838:	97ffee6a 	bl	a71e0 <strcmp>
   ab83c:	350003c0 	cbnz	w0, ab8b4 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x174>
   ab840:	38f76aa0 	ldrsb	w0, [x21, x23]
   ab844:	8b1702b7 	add	x23, x21, x23
   ab848:	7100bc1f 	cmp	w0, #0x2f
   ab84c:	54fffc61 	b.ne	ab7d8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x98>  // b.any
   ab850:	910006f5 	add	x21, x23, #0x1
   ab854:	d2800014 	mov	x20, #0x0                   	// #0
   ab858:	b5fff895 	cbnz	x21, ab768 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x28>
   ab85c:	d503201f 	nop
   ab860:	d0000041 	adrp	x1, b5000 <_etext+0x4158>
   ab864:	d0000040 	adrp	x0, b5000 <_etext+0x4158>
   ab868:	912c2021 	add	x1, x1, #0xb08
   ab86c:	912c8000 	add	x0, x0, #0xb20
   ab870:	52801082 	mov	w2, #0x84                  	// #132
   ab874:	97ffc933 	bl	9dd40 <assertion_failed>
   ab878:	39402004 	ldrb	w4, [x0, #8]
   ab87c:	39402403 	ldrb	w3, [x0, #9]
   ab880:	39402802 	ldrb	w2, [x0, #10]
   ab884:	39402c01 	ldrb	w1, [x0, #11]
   ab888:	aa032083 	orr	x3, x4, x3, lsl #8
   ab88c:	39c002a4 	ldrsb	w4, [x21]
   ab890:	aa024062 	orr	x2, x3, x2, lsl #16
   ab894:	aa016041 	orr	x1, x2, x1, lsl #24
   ab898:	7100bc9f 	cmp	w4, #0x2f
   ab89c:	5ac00821 	rev	w1, w1
   ab8a0:	8b010000 	add	x0, x0, x1
   ab8a4:	54000e21 	b.ne	aba68 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x328>  // b.any
   ab8a8:	910006b5 	add	x21, x21, #0x1
   ab8ac:	aa0003f3 	mov	x19, x0
   ab8b0:	17ffffb1 	b	ab774 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x34>
   ab8b4:	aa1803e0 	mov	x0, x24
   ab8b8:	97ffee3e 	bl	a71b0 <strlen>
   ab8bc:	91001000 	add	x0, x0, #0x4
   ab8c0:	927ef400 	and	x0, x0, #0xfffffffffffffffc
   ab8c4:	38606b03 	ldrb	w3, [x24, x0]
   ab8c8:	8b000313 	add	x19, x24, x0
   ab8cc:	14000011 	b	ab910 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x1d0>
   ab8d0:	7100105f 	cmp	w2, #0x4
   ab8d4:	d2800081 	mov	x1, #0x4                   	// #4
   ab8d8:	54000180 	b.eq	ab908 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x1c8>  // b.none
   ab8dc:	39401263 	ldrb	w3, [x19, #4]
   ab8e0:	39401662 	ldrb	w2, [x19, #5]
   ab8e4:	39401a60 	ldrb	w0, [x19, #6]
   ab8e8:	39401e61 	ldrb	w1, [x19, #7]
   ab8ec:	aa022062 	orr	x2, x3, x2, lsl #8
   ab8f0:	aa004040 	orr	x0, x2, x0, lsl #16
   ab8f4:	aa016001 	orr	x1, x0, x1, lsl #24
   ab8f8:	5ac00821 	rev	w1, w1
   ab8fc:	11000c21 	add	w1, w1, #0x3
   ab900:	927e7421 	and	x1, x1, #0xfffffffc
   ab904:	91003021 	add	x1, x1, #0xc
   ab908:	8b010273 	add	x19, x19, x1
   ab90c:	39400263 	ldrb	w3, [x19]
   ab910:	39400661 	ldrb	w1, [x19, #1]
   ab914:	39400a60 	ldrb	w0, [x19, #2]
   ab918:	39400e62 	ldrb	w2, [x19, #3]
   ab91c:	aa012061 	orr	x1, x3, x1, lsl #8
   ab920:	aa004020 	orr	x0, x1, x0, lsl #16
   ab924:	aa026002 	orr	x2, x0, x2, lsl #24
   ab928:	5ac00842 	rev	w2, w2
   ab92c:	51000c40 	sub	w0, w2, #0x3
   ab930:	7100041f 	cmp	w0, #0x1
   ab934:	54fffce9 	b.ls	ab8d0 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x190>  // b.plast
   ab938:	7100045f 	cmp	w2, #0x1
   ab93c:	54000401 	b.ne	ab9bc <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x27c>  // b.any
   ab940:	aa1303e2 	mov	x2, x19
   ab944:	910123a3 	add	x3, x29, #0x48
   ab948:	f90027bf 	str	xzr, [x29, #72]
   ab94c:	aa1503e1 	mov	x1, x21
   ab950:	aa1603e0 	mov	x0, x22
   ab954:	97ffff7b 	bl	ab740 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const>
   ab958:	aa0003f3 	mov	x19, x0
   ab95c:	b5fff3e0 	cbnz	x0, ab7d8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x98>
   ab960:	f94027b3 	ldr	x19, [x29, #72]
   ab964:	b4fff3b3 	cbz	x19, ab7d8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x98>
   ab968:	39400263 	ldrb	w3, [x19]
   ab96c:	39400661 	ldrb	w1, [x19, #1]
   ab970:	39400a60 	ldrb	w0, [x19, #2]
   ab974:	39400e62 	ldrb	w2, [x19, #3]
   ab978:	aa012061 	orr	x1, x3, x1, lsl #8
   ab97c:	aa004020 	orr	x0, x1, x0, lsl #16
   ab980:	aa026002 	orr	x2, x0, x2, lsl #24
   ab984:	5ac00842 	rev	w2, w2
   ab988:	7100045f 	cmp	w2, #0x1
   ab98c:	54fffda0 	b.eq	ab940 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x200>  // b.none
   ab990:	14000009 	b	ab9b4 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x274>
   ab994:	38404e63 	ldrb	w3, [x19, #4]!
   ab998:	39400661 	ldrb	w1, [x19, #1]
   ab99c:	39400a60 	ldrb	w0, [x19, #2]
   ab9a0:	39400e62 	ldrb	w2, [x19, #3]
   ab9a4:	aa012061 	orr	x1, x3, x1, lsl #8
   ab9a8:	aa004020 	orr	x0, x1, x0, lsl #16
   ab9ac:	aa026002 	orr	x2, x0, x2, lsl #24
   ab9b0:	5ac00842 	rev	w2, w2
   ab9b4:	7100105f 	cmp	w2, #0x4
   ab9b8:	54fffee0 	b.eq	ab994 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x254>  // b.none
   ab9bc:	f100029f 	cmp	x20, #0x0
   ab9c0:	7a421840 	ccmp	w2, #0x2, #0x0, ne	// ne = any
   ab9c4:	54000761 	b.ne	abab0 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x370>  // b.any
   ab9c8:	91001260 	add	x0, x19, #0x4
   ab9cc:	d2800013 	mov	x19, #0x0                   	// #0
   ab9d0:	f9000280 	str	x0, [x20]
   ab9d4:	17ffff81 	b	ab7d8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x98>
   ab9d8:	97ffd00e 	bl	9fa10 <CLogger::Get()>
   ab9dc:	39400267 	ldrb	w7, [x19]
   ab9e0:	d0000043 	adrp	x3, b5000 <_etext+0x4158>
   ab9e4:	90000081 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ab9e8:	912d8063 	add	x3, x3, #0xb60
   ab9ec:	9108c021 	add	x1, x1, #0x230
   ab9f0:	39400666 	ldrb	w6, [x19, #1]
   ab9f4:	52800042 	mov	w2, #0x2                   	// #2
   ab9f8:	39400a65 	ldrb	w5, [x19, #2]
   ab9fc:	39400e64 	ldrb	w4, [x19, #3]
   aba00:	d2800013 	mov	x19, #0x0                   	// #0
   aba04:	aa0620e6 	orr	x6, x7, x6, lsl #8
   aba08:	aa0540c5 	orr	x5, x6, x5, lsl #16
   aba0c:	aa0460a4 	orr	x4, x5, x4, lsl #24
   aba10:	5ac00884 	rev	w4, w4
   aba14:	97ffd1eb 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   aba18:	910003bf 	mov	sp, x29
   aba1c:	aa1303e0 	mov	x0, x19
   aba20:	a94153f3 	ldp	x19, x20, [sp, #16]
   aba24:	a9425bf5 	ldp	x21, x22, [sp, #32]
   aba28:	a94363f7 	ldp	x23, x24, [sp, #48]
   aba2c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   aba30:	d65f03c0 	ret
   aba34:	aa1503e0 	mov	x0, x21
   aba38:	97ffedde 	bl	a71b0 <strlen>
   aba3c:	aa0003f7 	mov	x23, x0
   aba40:	17ffff72 	b	ab808 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0xc8>
   aba44:	97ffcff3 	bl	9fa10 <CLogger::Get()>
   aba48:	d0000043 	adrp	x3, b5000 <_etext+0x4158>
   aba4c:	90000081 	adrp	x1, bb000 <FromPCIeHost+0x50>
   aba50:	912e0063 	add	x3, x3, #0xb80
   aba54:	9108c021 	add	x1, x1, #0x230
   aba58:	52800042 	mov	w2, #0x2                   	// #2
   aba5c:	d2800013 	mov	x19, #0x0                   	// #0
   aba60:	97ffd1d8 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   aba64:	17ffff5d 	b	ab7d8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x98>
   aba68:	97ffcfea 	bl	9fa10 <CLogger::Get()>
   aba6c:	d0000043 	adrp	x3, b5000 <_etext+0x4158>
   aba70:	90000081 	adrp	x1, bb000 <FromPCIeHost+0x50>
   aba74:	aa1503e4 	mov	x4, x21
   aba78:	912d2063 	add	x3, x3, #0xb48
   aba7c:	9108c021 	add	x1, x1, #0x230
   aba80:	52800042 	mov	w2, #0x2                   	// #2
   aba84:	97ffd1cf 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   aba88:	17ffff54 	b	ab7d8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x98>
   aba8c:	97ffcfe1 	bl	9fa10 <CLogger::Get()>
   aba90:	d0000043 	adrp	x3, b5000 <_etext+0x4158>
   aba94:	90000081 	adrp	x1, bb000 <FromPCIeHost+0x50>
   aba98:	912cc063 	add	x3, x3, #0xb30
   aba9c:	9108c021 	add	x1, x1, #0x230
   abaa0:	52800042 	mov	w2, #0x2                   	// #2
   abaa4:	d2800013 	mov	x19, #0x0                   	// #0
   abaa8:	97ffd1c6 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   abaac:	17ffff4b 	b	ab7d8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x98>
   abab0:	d2800013 	mov	x19, #0x0                   	// #0
   abab4:	17ffff49 	b	ab7d8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x98>
   abab8:	d503201f 	nop
   ababc:	d503201f 	nop

00000000000abac0 <CDeviceTreeBlob::FindNode(char const*, TDeviceTreeNode const*) const>:
   abac0:	d2800003 	mov	x3, #0x0                   	// #0
   abac4:	17ffff1f 	b	ab740 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const>
   abac8:	d503201f 	nop
   abacc:	d503201f 	nop

00000000000abad0 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const>:
   abad0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   abad4:	910003fd 	mov	x29, sp
   abad8:	a90153f3 	stp	x19, x20, [sp, #16]
   abadc:	a9025bf5 	stp	x21, x22, [sp, #32]
   abae0:	b4000f01 	cbz	x1, abcc0 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x1f0>
   abae4:	aa0203f5 	mov	x21, x2
   abae8:	b4000f82 	cbz	x2, abcd8 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x208>
   abaec:	aa0003f4 	mov	x20, x0
   abaf0:	f9400000 	ldr	x0, [x0]
   abaf4:	b4000ac0 	cbz	x0, abc4c <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x17c>
   abaf8:	39400023 	ldrb	w3, [x1]
   abafc:	aa0103f6 	mov	x22, x1
   abb00:	39400422 	ldrb	w2, [x1, #1]
   abb04:	39400821 	ldrb	w1, [x1, #2]
   abb08:	39400ec0 	ldrb	w0, [x22, #3]
   abb0c:	aa022062 	orr	x2, x3, x2, lsl #8
   abb10:	aa014041 	orr	x1, x2, x1, lsl #16
   abb14:	aa006020 	orr	x0, x1, x0, lsl #24
   abb18:	5ac00800 	rev	w0, w0
   abb1c:	7100041f 	cmp	w0, #0x1
   abb20:	540009e1 	b.ne	abc5c <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x18c>  // b.any
   abb24:	910012c0 	add	x0, x22, #0x4
   abb28:	97ffeda2 	bl	a71b0 <strlen>
   abb2c:	91001000 	add	x0, x0, #0x4
   abb30:	927ef400 	and	x0, x0, #0xfffffffffffffffc
   abb34:	91001000 	add	x0, x0, #0x4
   abb38:	8b0002d3 	add	x19, x22, x0
   abb3c:	38606ac2 	ldrb	w2, [x22, x0]
   abb40:	39400661 	ldrb	w1, [x19, #1]
   abb44:	39400a60 	ldrb	w0, [x19, #2]
   abb48:	39400e63 	ldrb	w3, [x19, #3]
   abb4c:	aa012041 	orr	x1, x2, x1, lsl #8
   abb50:	aa004020 	orr	x0, x1, x0, lsl #16
   abb54:	aa036003 	orr	x3, x0, x3, lsl #24
   abb58:	5ac00863 	rev	w3, w3
   abb5c:	51000c60 	sub	w0, w3, #0x3
   abb60:	7100041f 	cmp	w0, #0x1
   abb64:	54000628 	b.hi	abc28 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x158>  // b.pmore
   abb68:	7100107f 	cmp	w3, #0x4
   abb6c:	d2800083 	mov	x3, #0x4                   	// #4
   abb70:	54000440 	b.eq	abbf8 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x128>  // b.none
   abb74:	f9400280 	ldr	x0, [x20]
   abb78:	aa1503e1 	mov	x1, x21
   abb7c:	39402262 	ldrb	w2, [x19, #8]
   abb80:	39402666 	ldrb	w6, [x19, #9]
   abb84:	39403003 	ldrb	w3, [x0, #12]
   abb88:	39403405 	ldrb	w5, [x0, #13]
   abb8c:	aa062046 	orr	x6, x2, x6, lsl #8
   abb90:	39403804 	ldrb	w4, [x0, #14]
   abb94:	39402a62 	ldrb	w2, [x19, #10]
   abb98:	aa052065 	orr	x5, x3, x5, lsl #8
   abb9c:	39403c03 	ldrb	w3, [x0, #15]
   abba0:	aa0440a4 	orr	x4, x5, x4, lsl #16
   abba4:	39402e65 	ldrb	w5, [x19, #11]
   abba8:	aa0240c2 	orr	x2, x6, x2, lsl #16
   abbac:	aa036083 	orr	x3, x4, x3, lsl #24
   abbb0:	aa056045 	orr	x5, x2, x5, lsl #24
   abbb4:	5ac00863 	rev	w3, w3
   abbb8:	5ac008a5 	rev	w5, w5
   abbbc:	8b050063 	add	x3, x3, x5
   abbc0:	8b030000 	add	x0, x0, x3
   abbc4:	97ffed87 	bl	a71e0 <strcmp>
   abbc8:	34000720 	cbz	w0, abcac <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x1dc>
   abbcc:	39401262 	ldrb	w2, [x19, #4]
   abbd0:	39401661 	ldrb	w1, [x19, #5]
   abbd4:	39401a60 	ldrb	w0, [x19, #6]
   abbd8:	39401e63 	ldrb	w3, [x19, #7]
   abbdc:	aa012041 	orr	x1, x2, x1, lsl #8
   abbe0:	aa004020 	orr	x0, x1, x0, lsl #16
   abbe4:	aa036003 	orr	x3, x0, x3, lsl #24
   abbe8:	5ac00863 	rev	w3, w3
   abbec:	11000c63 	add	w3, w3, #0x3
   abbf0:	927e7463 	and	x3, x3, #0xfffffffc
   abbf4:	91003063 	add	x3, x3, #0xc
   abbf8:	8b030273 	add	x19, x19, x3
   abbfc:	39400260 	ldrb	w0, [x19]
   abc00:	39400666 	ldrb	w6, [x19, #1]
   abc04:	39400a65 	ldrb	w5, [x19, #2]
   abc08:	39400e63 	ldrb	w3, [x19, #3]
   abc0c:	aa062006 	orr	x6, x0, x6, lsl #8
   abc10:	aa0540c5 	orr	x5, x6, x5, lsl #16
   abc14:	aa0360a3 	orr	x3, x5, x3, lsl #24
   abc18:	5ac00863 	rev	w3, w3
   abc1c:	51000c60 	sub	w0, w3, #0x3
   abc20:	7100041f 	cmp	w0, #0x1
   abc24:	54fffa29 	b.ls	abb68 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x98>  // b.plast
   abc28:	97ffcf7a 	bl	9fa10 <CLogger::Get()>
   abc2c:	d0000043 	adrp	x3, b5000 <_etext+0x4158>
   abc30:	90000081 	adrp	x1, bb000 <FromPCIeHost+0x50>
   abc34:	aa1503e4 	mov	x4, x21
   abc38:	912ec063 	add	x3, x3, #0xbb0
   abc3c:	9108c021 	add	x1, x1, #0x230
   abc40:	52800042 	mov	w2, #0x2                   	// #2
   abc44:	97ffd15f 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   abc48:	d2800000 	mov	x0, #0x0                   	// #0
   abc4c:	a94153f3 	ldp	x19, x20, [sp, #16]
   abc50:	a9425bf5 	ldp	x21, x22, [sp, #32]
   abc54:	a8c37bfd 	ldp	x29, x30, [sp], #48
   abc58:	d65f03c0 	ret
   abc5c:	97ffcf6d 	bl	9fa10 <CLogger::Get()>
   abc60:	394002c7 	ldrb	w7, [x22]
   abc64:	d0000043 	adrp	x3, b5000 <_etext+0x4158>
   abc68:	90000081 	adrp	x1, bb000 <FromPCIeHost+0x50>
   abc6c:	912d8063 	add	x3, x3, #0xb60
   abc70:	9108c021 	add	x1, x1, #0x230
   abc74:	394006c6 	ldrb	w6, [x22, #1]
   abc78:	52800042 	mov	w2, #0x2                   	// #2
   abc7c:	39400ac5 	ldrb	w5, [x22, #2]
   abc80:	39400ec4 	ldrb	w4, [x22, #3]
   abc84:	aa0620e6 	orr	x6, x7, x6, lsl #8
   abc88:	aa0540c5 	orr	x5, x6, x5, lsl #16
   abc8c:	aa0460a4 	orr	x4, x5, x4, lsl #24
   abc90:	5ac00884 	rev	w4, w4
   abc94:	97ffd14b 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   abc98:	d2800000 	mov	x0, #0x0                   	// #0
   abc9c:	a94153f3 	ldp	x19, x20, [sp, #16]
   abca0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   abca4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   abca8:	d65f03c0 	ret
   abcac:	aa1303e0 	mov	x0, x19
   abcb0:	a94153f3 	ldp	x19, x20, [sp, #16]
   abcb4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   abcb8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   abcbc:	d65f03c0 	ret
   abcc0:	d0000041 	adrp	x1, b5000 <_etext+0x4158>
   abcc4:	d0000040 	adrp	x0, b5000 <_etext+0x4158>
   abcc8:	912c2021 	add	x1, x1, #0xb08
   abccc:	912e8000 	add	x0, x0, #0xba0
   abcd0:	52802162 	mov	w2, #0x10b                 	// #267
   abcd4:	97ffc81b 	bl	9dd40 <assertion_failed>
   abcd8:	d0000041 	adrp	x1, b5000 <_etext+0x4158>
   abcdc:	f0000020 	adrp	x0, b2000 <_etext+0x1158>
   abce0:	912c2021 	add	x1, x1, #0xb08
   abce4:	910dc000 	add	x0, x0, #0x370
   abce8:	52802182 	mov	w2, #0x10c                 	// #268
   abcec:	97ffc815 	bl	9dd40 <assertion_failed>

00000000000abcf0 <CDeviceTreeBlob::GetPropertyValueLength(TDeviceTreeProperty const*) const>:
   abcf0:	b40001c1 	cbz	x1, abd28 <CDeviceTreeBlob::GetPropertyValueLength(TDeviceTreeProperty const*) const+0x38>
   abcf4:	f9400000 	ldr	x0, [x0]
   abcf8:	b4000140 	cbz	x0, abd20 <CDeviceTreeBlob::GetPropertyValueLength(TDeviceTreeProperty const*) const+0x30>
   abcfc:	39401024 	ldrb	w4, [x1, #4]
   abd00:	39401423 	ldrb	w3, [x1, #5]
   abd04:	39401822 	ldrb	w2, [x1, #6]
   abd08:	39401c20 	ldrb	w0, [x1, #7]
   abd0c:	aa032081 	orr	x1, x4, x3, lsl #8
   abd10:	aa024021 	orr	x1, x1, x2, lsl #16
   abd14:	aa006020 	orr	x0, x1, x0, lsl #24
   abd18:	5ac00800 	rev	w0, w0
   abd1c:	d65f03c0 	ret
   abd20:	d2800000 	mov	x0, #0x0                   	// #0
   abd24:	d65f03c0 	ret
   abd28:	d0000041 	adrp	x1, b5000 <_etext+0x4158>
   abd2c:	d0000040 	adrp	x0, b5000 <_etext+0x4158>
   abd30:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   abd34:	912c2021 	add	x1, x1, #0xb08
   abd38:	910003fd 	mov	x29, sp
   abd3c:	912f2000 	add	x0, x0, #0xbc8
   abd40:	52802802 	mov	w2, #0x140                 	// #320
   abd44:	97ffc7ff 	bl	9dd40 <assertion_failed>
   abd48:	d503201f 	nop
   abd4c:	d503201f 	nop

00000000000abd50 <CDeviceTreeBlob::GetPropertyValue(TDeviceTreeProperty const*) const>:
   abd50:	b40000c1 	cbz	x1, abd68 <CDeviceTreeBlob::GetPropertyValue(TDeviceTreeProperty const*) const+0x18>
   abd54:	f9400000 	ldr	x0, [x0]
   abd58:	91003021 	add	x1, x1, #0xc
   abd5c:	f100001f 	cmp	x0, #0x0
   abd60:	9a801020 	csel	x0, x1, x0, ne	// ne = any
   abd64:	d65f03c0 	ret
   abd68:	d0000041 	adrp	x1, b5000 <_etext+0x4158>
   abd6c:	d0000040 	adrp	x0, b5000 <_etext+0x4158>
   abd70:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   abd74:	912c2021 	add	x1, x1, #0xb08
   abd78:	910003fd 	mov	x29, sp
   abd7c:	912f2000 	add	x0, x0, #0xbc8
   abd80:	52802982 	mov	w2, #0x14c                 	// #332
   abd84:	97ffc7ef 	bl	9dd40 <assertion_failed>
   abd88:	d503201f 	nop
   abd8c:	d503201f 	nop

00000000000abd90 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>:
   abd90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   abd94:	910003fd 	mov	x29, sp
   abd98:	b4000581 	cbz	x1, abe48 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const+0xb8>
   abd9c:	f9400000 	ldr	x0, [x0]
   abda0:	b4000280 	cbz	x0, abdf0 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const+0x60>
   abda4:	f9000bf3 	str	x19, [sp, #16]
   abda8:	aa0103f3 	mov	x19, x1
   abdac:	39401025 	ldrb	w5, [x1, #4]
   abdb0:	11000441 	add	w1, w2, #0x1
   abdb4:	39401664 	ldrb	w4, [x19, #5]
   abdb8:	39401a63 	ldrb	w3, [x19, #6]
   abdbc:	39401e60 	ldrb	w0, [x19, #7]
   abdc0:	aa0420a4 	orr	x4, x5, x4, lsl #8
   abdc4:	aa034083 	orr	x3, x4, x3, lsl #16
   abdc8:	aa006060 	orr	x0, x3, x0, lsl #24
   abdcc:	5ac00800 	rev	w0, w0
   abdd0:	eb01081f 	cmp	x0, x1, lsl #2
   abdd4:	54000143 	b.cc	abdfc <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const+0x6c>  // b.lo, b.ul, b.last
   abdd8:	8b224a62 	add	x2, x19, w2, uxtw #2
   abddc:	b9400c40 	ldr	w0, [x2, #12]
   abde0:	f9400bf3 	ldr	x19, [sp, #16]
   abde4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   abde8:	5ac00800 	rev	w0, w0
   abdec:	d65f03c0 	ret
   abdf0:	52800000 	mov	w0, #0x0                   	// #0
   abdf4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   abdf8:	d65f03c0 	ret
   abdfc:	97ffcf05 	bl	9fa10 <CLogger::Get()>
   abe00:	39401267 	ldrb	w7, [x19, #4]
   abe04:	d0000043 	adrp	x3, b5000 <_etext+0x4158>
   abe08:	90000081 	adrp	x1, bb000 <FromPCIeHost+0x50>
   abe0c:	912f6063 	add	x3, x3, #0xbd8
   abe10:	9108c021 	add	x1, x1, #0x230
   abe14:	39401666 	ldrb	w6, [x19, #5]
   abe18:	52800042 	mov	w2, #0x2                   	// #2
   abe1c:	39401a65 	ldrb	w5, [x19, #6]
   abe20:	39401e64 	ldrb	w4, [x19, #7]
   abe24:	aa0620e6 	orr	x6, x7, x6, lsl #8
   abe28:	aa0540c5 	orr	x5, x6, x5, lsl #16
   abe2c:	aa0460a4 	orr	x4, x5, x4, lsl #24
   abe30:	5ac00884 	rev	w4, w4
   abe34:	97ffd0e3 	bl	a01c0 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   abe38:	52800000 	mov	w0, #0x0                   	// #0
   abe3c:	f9400bf3 	ldr	x19, [sp, #16]
   abe40:	a8c27bfd 	ldp	x29, x30, [sp], #32
   abe44:	d65f03c0 	ret
   abe48:	d0000041 	adrp	x1, b5000 <_etext+0x4158>
   abe4c:	d0000040 	adrp	x0, b5000 <_etext+0x4158>
   abe50:	f9000bf3 	str	x19, [sp, #16]
   abe54:	912c2021 	add	x1, x1, #0xb08
   abe58:	912f2000 	add	x0, x0, #0xbc8
   abe5c:	52802b22 	mov	w2, #0x159                 	// #345
   abe60:	97ffc7b8 	bl	9dd40 <assertion_failed>
	...

00000000000abe70 <CGPIOPin::~CGPIOPin()>:
   abe70:	d65f03c0 	ret
   abe74:	d503201f 	nop
   abe78:	d503201f 	nop
   abe7c:	d503201f 	nop

00000000000abe80 <CGPIOPin::~CGPIOPin()>:
   abe80:	d2800901 	mov	x1, #0x48                  	// #72
   abe84:	17fff11f 	b	a8300 <operator delete(void*, unsigned long)>
   abe88:	d503201f 	nop
   abe8c:	d503201f 	nop

00000000000abe90 <CGPIOPin::CGPIOPin()>:
   abe90:	528006c4 	mov	w4, #0x36                  	// #54
   abe94:	52800163 	mov	w3, #0xb                   	// #11
   abe98:	a9027c1f 	stp	xzr, xzr, [x0, #32]
   abe9c:	528000c2 	mov	w2, #0x6                   	// #6
   abea0:	90000081 	adrp	x1, bb000 <FromPCIeHost+0x50>
   abea4:	91092021 	add	x1, x1, #0x248
   abea8:	b9000804 	str	w4, [x0, #8]
   abeac:	f9000001 	str	x1, [x0]
   abeb0:	b9001403 	str	w3, [x0, #20]
   abeb4:	29078802 	stp	w2, w2, [x0, #60]
   abeb8:	d65f03c0 	ret
   abebc:	d503201f 	nop

00000000000abec0 <CGPIOPin::AssignPin(unsigned int)>:
   abec0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   abec4:	910003fd 	mov	x29, sp
   abec8:	a90153f3 	stp	x19, x20, [sp, #16]
   abecc:	aa0003f4 	mov	x20, x0
   abed0:	b9400800 	ldr	w0, [x0, #8]
   abed4:	7100d81f 	cmp	w0, #0x36
   abed8:	54000321 	b.ne	abf3c <CGPIOPin::AssignPin(unsigned int)+0x7c>  // b.any
   abedc:	7100d43f 	cmp	w1, #0x35
   abee0:	b9000a81 	str	w1, [x20, #8]
   abee4:	2a0103f3 	mov	w19, w1
   abee8:	54000128 	b.hi	abf0c <CGPIOPin::AssignPin(unsigned int)+0x4c>  // b.pmore
   abeec:	53057e61 	lsr	w1, w19, #5
   abef0:	52800020 	mov	w0, #0x1                   	// #1
   abef4:	1ad32000 	lsl	w0, w0, w19
   abef8:	531e7421 	lsl	w1, w1, #2
   abefc:	29018281 	stp	w1, w0, [x20, #12]
   abf00:	a94153f3 	ldp	x19, x20, [sp, #16]
   abf04:	a8c27bfd 	ldp	x29, x30, [sp], #32
   abf08:	d65f03c0 	ret
   abf0c:	97ffd445 	bl	a1020 <CMachineInfo::Get()>
   abf10:	2a1303e1 	mov	w1, w19
   abf14:	97ffd1b7 	bl	a05f0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   abf18:	7100d41f 	cmp	w0, #0x35
   abf1c:	b9000a80 	str	w0, [x20, #8]
   abf20:	2a0003f3 	mov	w19, w0
   abf24:	54fffe49 	b.ls	abeec <CGPIOPin::AssignPin(unsigned int)+0x2c>  // b.plast
   abf28:	90000081 	adrp	x1, bb000 <FromPCIeHost+0x50>
   abf2c:	91096021 	add	x1, x1, #0x258
   abf30:	9100a020 	add	x0, x1, #0x28
   abf34:	528008e2 	mov	w2, #0x47                  	// #71
   abf38:	97ffc782 	bl	9dd40 <assertion_failed>
   abf3c:	90000081 	adrp	x1, bb000 <FromPCIeHost+0x50>
   abf40:	91096021 	add	x1, x1, #0x258
   abf44:	91004020 	add	x0, x1, #0x10
   abf48:	52800802 	mov	w2, #0x40                  	// #64
   abf4c:	97ffc77d 	bl	9dd40 <assertion_failed>

00000000000abf50 <CGPIOPin::Write(unsigned int)>:
   abf50:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   abf54:	910003fd 	mov	x29, sp
   abf58:	b9400802 	ldr	w2, [x0, #8]
   abf5c:	7100d45f 	cmp	w2, #0x35
   abf60:	54000268 	b.hi	abfac <CGPIOPin::Write(unsigned int)+0x5c>  // b.pmore
   abf64:	b9401402 	ldr	w2, [x0, #20]
   abf68:	7100105f 	cmp	w2, #0x4
   abf6c:	540002ac 	b.gt	abfc0 <CGPIOPin::Write(unsigned int)+0x70>
   abf70:	7100043f 	cmp	w1, #0x1
   abf74:	54000308 	b.hi	abfd4 <CGPIOPin::Write(unsigned int)+0x84>  // b.pmore
   abf78:	b9400c03 	ldr	w3, [x0, #12]
   abf7c:	7100003f 	cmp	w1, #0x0
   abf80:	52800382 	mov	w2, #0x1c                  	// #28
   abf84:	72bfc402 	movk	w2, #0xfe20, lsl #16
   abf88:	b9001801 	str	w1, [x0, #24]
   abf8c:	52800504 	mov	w4, #0x28                  	// #40
   abf90:	72bfc404 	movk	w4, #0xfe20, lsl #16
   abf94:	b9401001 	ldr	w1, [x0, #16]
   abf98:	1a841042 	csel	w2, w2, w4, ne	// ne = any
   abf9c:	0b030040 	add	w0, w2, w3
   abfa0:	b9000001 	str	w1, [x0]
   abfa4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   abfa8:	d65f03c0 	ret
   abfac:	90000081 	adrp	x1, bb000 <FromPCIeHost+0x50>
   abfb0:	91096021 	add	x1, x1, #0x258
   abfb4:	9100a020 	add	x0, x1, #0x28
   abfb8:	528012a2 	mov	w2, #0x95                  	// #149
   abfbc:	97ffc761 	bl	9dd40 <assertion_failed>
   abfc0:	90000081 	adrp	x1, bb000 <FromPCIeHost+0x50>
   abfc4:	91096021 	add	x1, x1, #0x258
   abfc8:	91010020 	add	x0, x1, #0x40
   abfcc:	52801302 	mov	w2, #0x98                  	// #152
   abfd0:	97ffc75c 	bl	9dd40 <assertion_failed>
   abfd4:	90000081 	adrp	x1, bb000 <FromPCIeHost+0x50>
   abfd8:	91096021 	add	x1, x1, #0x258
   abfdc:	9101a020 	add	x0, x1, #0x68
   abfe0:	52801382 	mov	w2, #0x9c                  	// #156
   abfe4:	97ffc757 	bl	9dd40 <assertion_failed>
   abfe8:	d503201f 	nop
   abfec:	d503201f 	nop

00000000000abff0 <CGPIOPin::Read() const>:
   abff0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   abff4:	910003fd 	mov	x29, sp
   abff8:	b9400801 	ldr	w1, [x0, #8]
   abffc:	7100d43f 	cmp	w1, #0x35
   ac000:	540001e8 	b.hi	ac03c <CGPIOPin::Read() const+0x4c>  // b.pmore
   ac004:	b9401401 	ldr	w1, [x0, #20]
   ac008:	51000c22 	sub	w2, w1, #0x3
   ac00c:	7100045f 	cmp	w2, #0x1
   ac010:	7a418824 	ccmp	w1, #0x1, #0x4, hi	// hi = pmore
   ac014:	540001e1 	b.ne	ac050 <CGPIOPin::Read() const+0x60>  // b.any
   ac018:	29418801 	ldp	w1, w2, [x0, #12]
   ac01c:	52800683 	mov	w3, #0x34                  	// #52
   ac020:	72bfc403 	movk	w3, #0xfe20, lsl #16
   ac024:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ac028:	0b030020 	add	w0, w1, w3
   ac02c:	b9400000 	ldr	w0, [x0]
   ac030:	6a02001f 	tst	w0, w2
   ac034:	1a9f07e0 	cset	w0, ne	// ne = any
   ac038:	d65f03c0 	ret
   ac03c:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac040:	91096021 	add	x1, x1, #0x258
   ac044:	9100a020 	add	x0, x1, #0x28
   ac048:	52801502 	mov	w2, #0xa8                  	// #168
   ac04c:	97ffc73d 	bl	9dd40 <assertion_failed>
   ac050:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac054:	91096021 	add	x1, x1, #0x258
   ac058:	91022020 	add	x0, x1, #0x88
   ac05c:	52801542 	mov	w2, #0xaa                  	// #170
   ac060:	97ffc738 	bl	9dd40 <assertion_failed>
   ac064:	d503201f 	nop
   ac068:	d503201f 	nop
   ac06c:	d503201f 	nop

00000000000ac070 <CGPIOPin::Invert()>:
   ac070:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ac074:	910003fd 	mov	x29, sp
   ac078:	b9401401 	ldr	w1, [x0, #20]
   ac07c:	7100083f 	cmp	w1, #0x2
   ac080:	540002a1 	b.ne	ac0d4 <CGPIOPin::Invert()+0x64>  // b.any
   ac084:	b9400802 	ldr	w2, [x0, #8]
   ac088:	b9401801 	ldr	w1, [x0, #24]
   ac08c:	7100d45f 	cmp	w2, #0x35
   ac090:	52000022 	eor	w2, w1, #0x1
   ac094:	540002a8 	b.hi	ac0e8 <CGPIOPin::Invert()+0x78>  // b.pmore
   ac098:	7100045f 	cmp	w2, #0x1
   ac09c:	54000308 	b.hi	ac0fc <CGPIOPin::Invert()+0x8c>  // b.pmore
   ac0a0:	b9400c03 	ldr	w3, [x0, #12]
   ac0a4:	7100043f 	cmp	w1, #0x1
   ac0a8:	52800504 	mov	w4, #0x28                  	// #40
   ac0ac:	72bfc404 	movk	w4, #0xfe20, lsl #16
   ac0b0:	b9001802 	str	w2, [x0, #24]
   ac0b4:	52800381 	mov	w1, #0x1c                  	// #28
   ac0b8:	72bfc401 	movk	w1, #0xfe20, lsl #16
   ac0bc:	b9401002 	ldr	w2, [x0, #16]
   ac0c0:	1a841021 	csel	w1, w1, w4, ne	// ne = any
   ac0c4:	0b030020 	add	w0, w1, w3
   ac0c8:	b9000002 	str	w2, [x0]
   ac0cc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ac0d0:	d65f03c0 	ret
   ac0d4:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac0d8:	91096021 	add	x1, x1, #0x258
   ac0dc:	9103a020 	add	x0, x1, #0xe8
   ac0e0:	52801722 	mov	w2, #0xb9                  	// #185
   ac0e4:	97ffc717 	bl	9dd40 <assertion_failed>
   ac0e8:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac0ec:	91096021 	add	x1, x1, #0x258
   ac0f0:	9100a020 	add	x0, x1, #0x28
   ac0f4:	528012a2 	mov	w2, #0x95                  	// #149
   ac0f8:	97ffc712 	bl	9dd40 <assertion_failed>
   ac0fc:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac100:	91096021 	add	x1, x1, #0x258
   ac104:	9101a020 	add	x0, x1, #0x68
   ac108:	52801382 	mov	w2, #0x9c                  	// #156
   ac10c:	97ffc70d 	bl	9dd40 <assertion_failed>

00000000000ac110 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
   ac110:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ac114:	aa0003e4 	mov	x4, x0
   ac118:	910003fd 	mov	x29, sp
   ac11c:	b9401400 	ldr	w0, [x0, #20]
   ac120:	51000c05 	sub	w5, w0, #0x3
   ac124:	710004bf 	cmp	w5, #0x1
   ac128:	7a418804 	ccmp	w0, #0x1, #0x4, hi	// hi = pmore
   ac12c:	54000561 	b.ne	ac1d8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xc8>  // b.any
   ac130:	b9403c80 	ldr	w0, [x4, #60]
   ac134:	7100181f 	cmp	w0, #0x6
   ac138:	540001e1 	b.ne	ac174 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x64>  // b.any
   ac13c:	b9404080 	ldr	w0, [x4, #64]
   ac140:	7100181f 	cmp	w0, #0x6
   ac144:	54000221 	b.ne	ac188 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x78>  // b.any
   ac148:	b40002a1 	cbz	x1, ac19c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
   ac14c:	f9401480 	ldr	x0, [x4, #40]
   ac150:	b5000300 	cbnz	x0, ac1b0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xa0>
   ac154:	12001c63 	and	w3, w3, #0xff
   ac158:	a9028881 	stp	x1, x2, [x4, #40]
   ac15c:	3900e083 	strb	w3, [x4, #56]
   ac160:	f9401080 	ldr	x0, [x4, #32]
   ac164:	b4000300 	cbz	x0, ac1c4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xb4>
   ac168:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ac16c:	aa0403e1 	mov	x1, x4
   ac170:	140012b8 	b	b0c50 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   ac174:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac178:	91096021 	add	x1, x1, #0x258
   ac17c:	91042020 	add	x0, x1, #0x108
   ac180:	52801882 	mov	w2, #0xc4                  	// #196
   ac184:	97ffc6ef 	bl	9dd40 <assertion_failed>
   ac188:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac18c:	91096021 	add	x1, x1, #0x258
   ac190:	9104c020 	add	x0, x1, #0x130
   ac194:	528018a2 	mov	w2, #0xc5                  	// #197
   ac198:	97ffc6ea 	bl	9dd40 <assertion_failed>
   ac19c:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac1a0:	91096021 	add	x1, x1, #0x258
   ac1a4:	91056020 	add	x0, x1, #0x158
   ac1a8:	528018e2 	mov	w2, #0xc7                  	// #199
   ac1ac:	97ffc6e5 	bl	9dd40 <assertion_failed>
   ac1b0:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac1b4:	91096021 	add	x1, x1, #0x258
   ac1b8:	9105a020 	add	x0, x1, #0x168
   ac1bc:	52801902 	mov	w2, #0xc8                  	// #200
   ac1c0:	97ffc6e0 	bl	9dd40 <assertion_failed>
   ac1c4:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac1c8:	91096021 	add	x1, x1, #0x258
   ac1cc:	9105e020 	add	x0, x1, #0x178
   ac1d0:	528019e2 	mov	w2, #0xcf                  	// #207
   ac1d4:	97ffc6db 	bl	9dd40 <assertion_failed>
   ac1d8:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac1dc:	91096021 	add	x1, x1, #0x258
   ac1e0:	91022020 	add	x0, x1, #0x88
   ac1e4:	52801802 	mov	w2, #0xc0                  	// #192
   ac1e8:	97ffc6d6 	bl	9dd40 <assertion_failed>
   ac1ec:	d503201f 	nop

00000000000ac1f0 <CGPIOPin::DisconnectInterrupt()>:
   ac1f0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ac1f4:	aa0003e1 	mov	x1, x0
   ac1f8:	910003fd 	mov	x29, sp
   ac1fc:	b9401400 	ldr	w0, [x0, #20]
   ac200:	51000c02 	sub	w2, w0, #0x3
   ac204:	7100045f 	cmp	w2, #0x1
   ac208:	7a418804 	ccmp	w0, #0x1, #0x4, hi	// hi = pmore
   ac20c:	54000441 	b.ne	ac294 <CGPIOPin::DisconnectInterrupt()+0xa4>  // b.any
   ac210:	b9403c20 	ldr	w0, [x1, #60]
   ac214:	7100181f 	cmp	w0, #0x6
   ac218:	54000161 	b.ne	ac244 <CGPIOPin::DisconnectInterrupt()+0x54>  // b.any
   ac21c:	b9404020 	ldr	w0, [x1, #64]
   ac220:	7100181f 	cmp	w0, #0x6
   ac224:	540001a1 	b.ne	ac258 <CGPIOPin::DisconnectInterrupt()+0x68>  // b.any
   ac228:	f9401420 	ldr	x0, [x1, #40]
   ac22c:	b4000200 	cbz	x0, ac26c <CGPIOPin::DisconnectInterrupt()+0x7c>
   ac230:	f900143f 	str	xzr, [x1, #40]
   ac234:	f9401020 	ldr	x0, [x1, #32]
   ac238:	b4000240 	cbz	x0, ac280 <CGPIOPin::DisconnectInterrupt()+0x90>
   ac23c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ac240:	140012ac 	b	b0cf0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   ac244:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac248:	91096021 	add	x1, x1, #0x258
   ac24c:	91042020 	add	x0, x1, #0x108
   ac250:	52801b22 	mov	w2, #0xd9                  	// #217
   ac254:	97ffc6bb 	bl	9dd40 <assertion_failed>
   ac258:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac25c:	91096021 	add	x1, x1, #0x258
   ac260:	9104c020 	add	x0, x1, #0x130
   ac264:	52801b42 	mov	w2, #0xda                  	// #218
   ac268:	97ffc6b6 	bl	9dd40 <assertion_failed>
   ac26c:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac270:	91096021 	add	x1, x1, #0x258
   ac274:	91062020 	add	x0, x1, #0x188
   ac278:	52801b82 	mov	w2, #0xdc                  	// #220
   ac27c:	97ffc6b1 	bl	9dd40 <assertion_failed>
   ac280:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac284:	91096021 	add	x1, x1, #0x258
   ac288:	9105e020 	add	x0, x1, #0x178
   ac28c:	52801be2 	mov	w2, #0xdf                  	// #223
   ac290:	97ffc6ac 	bl	9dd40 <assertion_failed>
   ac294:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac298:	91096021 	add	x1, x1, #0x258
   ac29c:	91022020 	add	x0, x1, #0x88
   ac2a0:	52801aa2 	mov	w2, #0xd5                  	// #213
   ac2a4:	97ffc6a7 	bl	9dd40 <assertion_failed>
   ac2a8:	d503201f 	nop
   ac2ac:	d503201f 	nop

00000000000ac2b0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   ac2b0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ac2b4:	910003fd 	mov	x29, sp
   ac2b8:	a90153f3 	stp	x19, x20, [sp, #16]
   ac2bc:	aa0003f3 	mov	x19, x0
   ac2c0:	b9401400 	ldr	w0, [x0, #20]
   ac2c4:	f90013f5 	str	x21, [sp, #32]
   ac2c8:	51000c02 	sub	w2, w0, #0x3
   ac2cc:	7100045f 	cmp	w2, #0x1
   ac2d0:	7a418804 	ccmp	w0, #0x1, #0x4, hi	// hi = pmore
   ac2d4:	540007e1 	b.ne	ac3d0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x120>  // b.any
   ac2d8:	f9401660 	ldr	x0, [x19, #40]
   ac2dc:	b4000520 	cbz	x0, ac380 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd0>
   ac2e0:	b9403e60 	ldr	w0, [x19, #60]
   ac2e4:	7100181f 	cmp	w0, #0x6
   ac2e8:	54000561 	b.ne	ac394 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xe4>  // b.any
   ac2ec:	7100143f 	cmp	w1, #0x5
   ac2f0:	540005cc 	b.gt	ac3a8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf8>
   ac2f4:	b9404260 	ldr	w0, [x19, #64]
   ac2f8:	6b01001f 	cmp	w0, w1
   ac2fc:	54000600 	b.eq	ac3bc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x10c>  // b.none
   ac300:	b9400e62 	ldr	w2, [x19, #12]
   ac304:	0b010434 	add	w20, w1, w1, lsl #1
   ac308:	52800983 	mov	w3, #0x4c                  	// #76
   ac30c:	72bfc403 	movk	w3, #0xfe20, lsl #16
   ac310:	b0000095 	adrp	x21, bd000 <CNetDevice::s_SpeedString+0x18>
   ac314:	b9003e61 	str	w1, [x19, #60]
   ac318:	b942faa0 	ldr	w0, [x21, #760]
   ac31c:	0b030041 	add	w1, w2, w3
   ac320:	0b140834 	add	w20, w1, w20, lsl #2
   ac324:	350001e0 	cbnz	w0, ac360 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb0>
   ac328:	b9401261 	ldr	w1, [x19, #16]
   ac32c:	b9400280 	ldr	w0, [x20]
   ac330:	2a010000 	orr	w0, w0, w1
   ac334:	b9000280 	str	w0, [x20]
   ac338:	b942faa0 	ldr	w0, [x21, #760]
   ac33c:	350000a0 	cbnz	w0, ac350 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xa0>
   ac340:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac344:	f94013f5 	ldr	x21, [sp, #32]
   ac348:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ac34c:	d65f03c0 	ret
   ac350:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac354:	f94013f5 	ldr	x21, [sp, #32]
   ac358:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ac35c:	17fff3a9 	b	a9200 <LeaveCritical>
   ac360:	97fff378 	bl	a9140 <EnterCritical>
   ac364:	b9401261 	ldr	w1, [x19, #16]
   ac368:	b9400280 	ldr	w0, [x20]
   ac36c:	2a010000 	orr	w0, w0, w1
   ac370:	b9000280 	str	w0, [x20]
   ac374:	b942faa0 	ldr	w0, [x21, #760]
   ac378:	34fffe40 	cbz	w0, ac340 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x90>
   ac37c:	17fffff5 	b	ac350 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xa0>
   ac380:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac384:	91096021 	add	x1, x1, #0x258
   ac388:	91062020 	add	x0, x1, #0x188
   ac38c:	52801d02 	mov	w2, #0xe8                  	// #232
   ac390:	97ffc66c 	bl	9dd40 <assertion_failed>
   ac394:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac398:	91096021 	add	x1, x1, #0x258
   ac39c:	91042020 	add	x0, x1, #0x108
   ac3a0:	52801d42 	mov	w2, #0xea                  	// #234
   ac3a4:	97ffc667 	bl	9dd40 <assertion_failed>
   ac3a8:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac3ac:	91096021 	add	x1, x1, #0x258
   ac3b0:	91066020 	add	x0, x1, #0x198
   ac3b4:	52801d62 	mov	w2, #0xeb                  	// #235
   ac3b8:	97ffc662 	bl	9dd40 <assertion_failed>
   ac3bc:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac3c0:	91096021 	add	x1, x1, #0x258
   ac3c4:	91070020 	add	x0, x1, #0x1c0
   ac3c8:	52801d82 	mov	w2, #0xec                  	// #236
   ac3cc:	97ffc65d 	bl	9dd40 <assertion_failed>
   ac3d0:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac3d4:	91096021 	add	x1, x1, #0x258
   ac3d8:	91022020 	add	x0, x1, #0x88
   ac3dc:	52801ca2 	mov	w2, #0xe5                  	// #229
   ac3e0:	97ffc658 	bl	9dd40 <assertion_failed>
   ac3e4:	d503201f 	nop
   ac3e8:	d503201f 	nop
   ac3ec:	d503201f 	nop

00000000000ac3f0 <CGPIOPin::DisableInterrupt()>:
   ac3f0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ac3f4:	910003fd 	mov	x29, sp
   ac3f8:	a90153f3 	stp	x19, x20, [sp, #16]
   ac3fc:	aa0003f4 	mov	x20, x0
   ac400:	b9401400 	ldr	w0, [x0, #20]
   ac404:	f90013f5 	str	x21, [sp, #32]
   ac408:	51000c01 	sub	w1, w0, #0x3
   ac40c:	7100043f 	cmp	w1, #0x1
   ac410:	7a418804 	ccmp	w0, #0x1, #0x4, hi	// hi = pmore
   ac414:	54000581 	b.ne	ac4c4 <CGPIOPin::DisableInterrupt()+0xd4>  // b.any
   ac418:	b9403e81 	ldr	w1, [x20, #60]
   ac41c:	7100143f 	cmp	w1, #0x5
   ac420:	5400048c 	b.gt	ac4b0 <CGPIOPin::DisableInterrupt()+0xc0>
   ac424:	b9400e82 	ldr	w2, [x20, #12]
   ac428:	0b010421 	add	w1, w1, w1, lsl #1
   ac42c:	52800983 	mov	w3, #0x4c                  	// #76
   ac430:	72bfc403 	movk	w3, #0xfe20, lsl #16
   ac434:	b0000095 	adrp	x21, bd000 <CNetDevice::s_SpeedString+0x18>
   ac438:	b942faa0 	ldr	w0, [x21, #760]
   ac43c:	0b030042 	add	w2, w2, w3
   ac440:	0b010853 	add	w19, w2, w1, lsl #2
   ac444:	350001a0 	cbnz	w0, ac478 <CGPIOPin::DisableInterrupt()+0x88>
   ac448:	b9400261 	ldr	w1, [x19]
   ac44c:	b9401280 	ldr	w0, [x20, #16]
   ac450:	0a200020 	bic	w0, w1, w0
   ac454:	b9000260 	str	w0, [x19]
   ac458:	b942faa0 	ldr	w0, [x21, #760]
   ac45c:	350001c0 	cbnz	w0, ac494 <CGPIOPin::DisableInterrupt()+0xa4>
   ac460:	528000c0 	mov	w0, #0x6                   	// #6
   ac464:	f94013f5 	ldr	x21, [sp, #32]
   ac468:	b9003e80 	str	w0, [x20, #60]
   ac46c:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac470:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ac474:	d65f03c0 	ret
   ac478:	97fff332 	bl	a9140 <EnterCritical>
   ac47c:	b9400261 	ldr	w1, [x19]
   ac480:	b9401280 	ldr	w0, [x20, #16]
   ac484:	0a200020 	bic	w0, w1, w0
   ac488:	b9000260 	str	w0, [x19]
   ac48c:	b942faa0 	ldr	w0, [x21, #760]
   ac490:	34fffe80 	cbz	w0, ac460 <CGPIOPin::DisableInterrupt()+0x70>
   ac494:	97fff35b 	bl	a9200 <LeaveCritical>
   ac498:	528000c0 	mov	w0, #0x6                   	// #6
   ac49c:	f94013f5 	ldr	x21, [sp, #32]
   ac4a0:	b9003e80 	str	w0, [x20, #60]
   ac4a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac4a8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ac4ac:	d65f03c0 	ret
   ac4b0:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac4b4:	91096021 	add	x1, x1, #0x258
   ac4b8:	91078020 	add	x0, x1, #0x1e0
   ac4bc:	52801fe2 	mov	w2, #0xff                  	// #255
   ac4c0:	97ffc620 	bl	9dd40 <assertion_failed>
   ac4c4:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac4c8:	91096021 	add	x1, x1, #0x258
   ac4cc:	91022020 	add	x0, x1, #0x88
   ac4d0:	52801f62 	mov	w2, #0xfb                  	// #251
   ac4d4:	97ffc61b 	bl	9dd40 <assertion_failed>
   ac4d8:	d503201f 	nop
   ac4dc:	d503201f 	nop

00000000000ac4e0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   ac4e0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ac4e4:	910003fd 	mov	x29, sp
   ac4e8:	a90153f3 	stp	x19, x20, [sp, #16]
   ac4ec:	aa0003f3 	mov	x19, x0
   ac4f0:	b9401400 	ldr	w0, [x0, #20]
   ac4f4:	f90013f5 	str	x21, [sp, #32]
   ac4f8:	51000c02 	sub	w2, w0, #0x3
   ac4fc:	7100045f 	cmp	w2, #0x1
   ac500:	7a418804 	ccmp	w0, #0x1, #0x4, hi	// hi = pmore
   ac504:	540007e1 	b.ne	ac600 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x120>  // b.any
   ac508:	f9401660 	ldr	x0, [x19, #40]
   ac50c:	b4000520 	cbz	x0, ac5b0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd0>
   ac510:	b9404260 	ldr	w0, [x19, #64]
   ac514:	7100181f 	cmp	w0, #0x6
   ac518:	54000561 	b.ne	ac5c4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xe4>  // b.any
   ac51c:	7100143f 	cmp	w1, #0x5
   ac520:	540005cc 	b.gt	ac5d8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf8>
   ac524:	b9403e60 	ldr	w0, [x19, #60]
   ac528:	6b01001f 	cmp	w0, w1
   ac52c:	54000600 	b.eq	ac5ec <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x10c>  // b.none
   ac530:	b9400e62 	ldr	w2, [x19, #12]
   ac534:	0b010434 	add	w20, w1, w1, lsl #1
   ac538:	52800983 	mov	w3, #0x4c                  	// #76
   ac53c:	72bfc403 	movk	w3, #0xfe20, lsl #16
   ac540:	b0000095 	adrp	x21, bd000 <CNetDevice::s_SpeedString+0x18>
   ac544:	b9004261 	str	w1, [x19, #64]
   ac548:	b942faa0 	ldr	w0, [x21, #760]
   ac54c:	0b030041 	add	w1, w2, w3
   ac550:	0b140834 	add	w20, w1, w20, lsl #2
   ac554:	350001e0 	cbnz	w0, ac590 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb0>
   ac558:	b9401261 	ldr	w1, [x19, #16]
   ac55c:	b9400280 	ldr	w0, [x20]
   ac560:	2a010000 	orr	w0, w0, w1
   ac564:	b9000280 	str	w0, [x20]
   ac568:	b942faa0 	ldr	w0, [x21, #760]
   ac56c:	350000a0 	cbnz	w0, ac580 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xa0>
   ac570:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac574:	f94013f5 	ldr	x21, [sp, #32]
   ac578:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ac57c:	d65f03c0 	ret
   ac580:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac584:	f94013f5 	ldr	x21, [sp, #32]
   ac588:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ac58c:	17fff31d 	b	a9200 <LeaveCritical>
   ac590:	97fff2ec 	bl	a9140 <EnterCritical>
   ac594:	b9401261 	ldr	w1, [x19, #16]
   ac598:	b9400280 	ldr	w0, [x20]
   ac59c:	2a010000 	orr	w0, w0, w1
   ac5a0:	b9000280 	str	w0, [x20]
   ac5a4:	b942faa0 	ldr	w0, [x21, #760]
   ac5a8:	34fffe40 	cbz	w0, ac570 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x90>
   ac5ac:	17fffff5 	b	ac580 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xa0>
   ac5b0:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac5b4:	91096021 	add	x1, x1, #0x258
   ac5b8:	91062020 	add	x0, x1, #0x188
   ac5bc:	52802222 	mov	w2, #0x111                 	// #273
   ac5c0:	97ffc5e0 	bl	9dd40 <assertion_failed>
   ac5c4:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac5c8:	91096021 	add	x1, x1, #0x258
   ac5cc:	9104c020 	add	x0, x1, #0x130
   ac5d0:	52802262 	mov	w2, #0x113                 	// #275
   ac5d4:	97ffc5db 	bl	9dd40 <assertion_failed>
   ac5d8:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac5dc:	91096021 	add	x1, x1, #0x258
   ac5e0:	91066020 	add	x0, x1, #0x198
   ac5e4:	52802282 	mov	w2, #0x114                 	// #276
   ac5e8:	97ffc5d6 	bl	9dd40 <assertion_failed>
   ac5ec:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac5f0:	91096021 	add	x1, x1, #0x258
   ac5f4:	91082020 	add	x0, x1, #0x208
   ac5f8:	528022a2 	mov	w2, #0x115                 	// #277
   ac5fc:	97ffc5d1 	bl	9dd40 <assertion_failed>
   ac600:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac604:	91096021 	add	x1, x1, #0x258
   ac608:	91022020 	add	x0, x1, #0x88
   ac60c:	528021c2 	mov	w2, #0x10e                 	// #270
   ac610:	97ffc5cc 	bl	9dd40 <assertion_failed>
   ac614:	d503201f 	nop
   ac618:	d503201f 	nop
   ac61c:	d503201f 	nop

00000000000ac620 <CGPIOPin::DisableInterrupt2()>:
   ac620:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ac624:	910003fd 	mov	x29, sp
   ac628:	a90153f3 	stp	x19, x20, [sp, #16]
   ac62c:	aa0003f4 	mov	x20, x0
   ac630:	b9401400 	ldr	w0, [x0, #20]
   ac634:	f90013f5 	str	x21, [sp, #32]
   ac638:	51000c01 	sub	w1, w0, #0x3
   ac63c:	7100043f 	cmp	w1, #0x1
   ac640:	7a418804 	ccmp	w0, #0x1, #0x4, hi	// hi = pmore
   ac644:	54000581 	b.ne	ac6f4 <CGPIOPin::DisableInterrupt2()+0xd4>  // b.any
   ac648:	b9404281 	ldr	w1, [x20, #64]
   ac64c:	7100143f 	cmp	w1, #0x5
   ac650:	5400048c 	b.gt	ac6e0 <CGPIOPin::DisableInterrupt2()+0xc0>
   ac654:	b9400e82 	ldr	w2, [x20, #12]
   ac658:	0b010421 	add	w1, w1, w1, lsl #1
   ac65c:	52800983 	mov	w3, #0x4c                  	// #76
   ac660:	72bfc403 	movk	w3, #0xfe20, lsl #16
   ac664:	b0000095 	adrp	x21, bd000 <CNetDevice::s_SpeedString+0x18>
   ac668:	b942faa0 	ldr	w0, [x21, #760]
   ac66c:	0b030042 	add	w2, w2, w3
   ac670:	0b010853 	add	w19, w2, w1, lsl #2
   ac674:	350001a0 	cbnz	w0, ac6a8 <CGPIOPin::DisableInterrupt2()+0x88>
   ac678:	b9400261 	ldr	w1, [x19]
   ac67c:	b9401280 	ldr	w0, [x20, #16]
   ac680:	0a200020 	bic	w0, w1, w0
   ac684:	b9000260 	str	w0, [x19]
   ac688:	b942faa0 	ldr	w0, [x21, #760]
   ac68c:	350001c0 	cbnz	w0, ac6c4 <CGPIOPin::DisableInterrupt2()+0xa4>
   ac690:	528000c0 	mov	w0, #0x6                   	// #6
   ac694:	f94013f5 	ldr	x21, [sp, #32]
   ac698:	b9004280 	str	w0, [x20, #64]
   ac69c:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac6a0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ac6a4:	d65f03c0 	ret
   ac6a8:	97fff2a6 	bl	a9140 <EnterCritical>
   ac6ac:	b9400261 	ldr	w1, [x19]
   ac6b0:	b9401280 	ldr	w0, [x20, #16]
   ac6b4:	0a200020 	bic	w0, w1, w0
   ac6b8:	b9000260 	str	w0, [x19]
   ac6bc:	b942faa0 	ldr	w0, [x21, #760]
   ac6c0:	34fffe80 	cbz	w0, ac690 <CGPIOPin::DisableInterrupt2()+0x70>
   ac6c4:	97fff2cf 	bl	a9200 <LeaveCritical>
   ac6c8:	528000c0 	mov	w0, #0x6                   	// #6
   ac6cc:	f94013f5 	ldr	x21, [sp, #32]
   ac6d0:	b9004280 	str	w0, [x20, #64]
   ac6d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac6d8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ac6dc:	d65f03c0 	ret
   ac6e0:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac6e4:	91096021 	add	x1, x1, #0x258
   ac6e8:	9108a020 	add	x0, x1, #0x228
   ac6ec:	52802502 	mov	w2, #0x128                 	// #296
   ac6f0:	97ffc594 	bl	9dd40 <assertion_failed>
   ac6f4:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac6f8:	91096021 	add	x1, x1, #0x258
   ac6fc:	91022020 	add	x0, x1, #0x88
   ac700:	52802482 	mov	w2, #0x124                 	// #292
   ac704:	97ffc58f 	bl	9dd40 <assertion_failed>
   ac708:	d503201f 	nop
   ac70c:	d503201f 	nop

00000000000ac710 <CGPIOPin::AcknowledgeInterrupt()>:
   ac710:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ac714:	910003fd 	mov	x29, sp
   ac718:	f9401401 	ldr	x1, [x0, #40]
   ac71c:	b4000141 	cbz	x1, ac744 <CGPIOPin::AcknowledgeInterrupt()+0x34>
   ac720:	3940e001 	ldrb	w1, [x0, #56]
   ac724:	350001a1 	cbnz	w1, ac758 <CGPIOPin::AcknowledgeInterrupt()+0x48>
   ac728:	29418801 	ldp	w1, w2, [x0, #12]
   ac72c:	52800803 	mov	w3, #0x40                  	// #64
   ac730:	72bfc403 	movk	w3, #0xfe20, lsl #16
   ac734:	0b030020 	add	w0, w1, w3
   ac738:	b9000002 	str	w2, [x0]
   ac73c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   ac740:	d65f03c0 	ret
   ac744:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac748:	91096021 	add	x1, x1, #0x258
   ac74c:	91062020 	add	x0, x1, #0x188
   ac750:	528026e2 	mov	w2, #0x137                 	// #311
   ac754:	97ffc57b 	bl	9dd40 <assertion_failed>
   ac758:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac75c:	91096021 	add	x1, x1, #0x258
   ac760:	91094020 	add	x0, x1, #0x250
   ac764:	52802702 	mov	w2, #0x138                 	// #312
   ac768:	97ffc576 	bl	9dd40 <assertion_failed>
   ac76c:	d503201f 	nop

00000000000ac770 <CGPIOPin::SetModeAll(unsigned int, unsigned int)>:
   ac770:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ac774:	910003fd 	mov	x29, sp
   ac778:	6a01001f 	tst	w0, w1
   ac77c:	a90153f3 	stp	x19, x20, [sp, #16]
   ac780:	f90013f5 	str	x21, [sp, #32]
   ac784:	54000661 	b.ne	ac850 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0xe0>  // b.any
   ac788:	b0000095 	adrp	x21, bd000 <CNetDevice::s_SpeedString+0x18>
   ac78c:	2a010013 	orr	w19, w0, w1
   ac790:	b942faa0 	ldr	w0, [x21, #760]
   ac794:	2a0103f4 	mov	w20, w1
   ac798:	35000500 	cbnz	w0, ac838 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0xc8>
   ac79c:	52800007 	mov	w7, #0x0                   	// #0
   ac7a0:	d2bfc409 	mov	x9, #0xfe200000            	// #4263510016
   ac7a4:	52807fea 	mov	w10, #0x3ff                 	// #1023
   ac7a8:	52800028 	mov	w8, #0x1                   	// #1
   ac7ac:	528000e1 	mov	w1, #0x7                   	// #7
   ac7b0:	1ac72140 	lsl	w0, w10, w7
   ac7b4:	6a13001f 	tst	w0, w19
   ac7b8:	54000161 	b.ne	ac7e4 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0x74>  // b.any
   ac7bc:	110028e7 	add	w7, w7, #0xa
   ac7c0:	91001129 	add	x9, x9, #0x4
   ac7c4:	7100a0ff 	cmp	w7, #0x28
   ac7c8:	54ffff41 	b.ne	ac7b0 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0x40>  // b.any
   ac7cc:	b942faa0 	ldr	w0, [x21, #760]
   ac7d0:	35000380 	cbnz	w0, ac840 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0xd0>
   ac7d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac7d8:	f94013f5 	ldr	x21, [sp, #32]
   ac7dc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ac7e0:	d65f03c0 	ret
   ac7e4:	b9400124 	ldr	w4, [x9]
   ac7e8:	52800000 	mov	w0, #0x0                   	// #0
   ac7ec:	2a0703e2 	mov	w2, w7
   ac7f0:	14000005 	b	ac804 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0x94>
   ac7f4:	11000442 	add	w2, w2, #0x1
   ac7f8:	11000c00 	add	w0, w0, #0x3
   ac7fc:	7100805f 	cmp	w2, #0x20
   ac800:	54000180 	b.eq	ac830 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0xc0>  // b.none
   ac804:	1ac22105 	lsl	w5, w8, w2
   ac808:	6a05027f 	tst	w19, w5
   ac80c:	540000e0 	b.eq	ac828 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0xb8>  // b.none
   ac810:	1ac02026 	lsl	w6, w1, w0
   ac814:	1ac02103 	lsl	w3, w8, w0
   ac818:	0a260084 	bic	w4, w4, w6
   ac81c:	6a05029f 	tst	w20, w5
   ac820:	2a030083 	orr	w3, w4, w3
   ac824:	1a841064 	csel	w4, w3, w4, ne	// ne = any
   ac828:	71006c1f 	cmp	w0, #0x1b
   ac82c:	54fffe41 	b.ne	ac7f4 <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0x84>  // b.any
   ac830:	b9000124 	str	w4, [x9]
   ac834:	17ffffe2 	b	ac7bc <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0x4c>
   ac838:	97fff242 	bl	a9140 <EnterCritical>
   ac83c:	17ffffd8 	b	ac79c <CGPIOPin::SetModeAll(unsigned int, unsigned int)+0x2c>
   ac840:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac844:	f94013f5 	ldr	x21, [sp, #32]
   ac848:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ac84c:	17fff26d 	b	a9200 <LeaveCritical>
   ac850:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac854:	91096021 	add	x1, x1, #0x258
   ac858:	91098020 	add	x0, x1, #0x260
   ac85c:	52802862 	mov	w2, #0x143                 	// #323
   ac860:	97ffc538 	bl	9dd40 <assertion_failed>
   ac864:	d503201f 	nop
   ac868:	d503201f 	nop
   ac86c:	d503201f 	nop

00000000000ac870 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
   ac870:	6a200022 	bics	w2, w1, w0
   ac874:	54000080 	b.eq	ac884 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x14>  // b.none
   ac878:	d2800503 	mov	x3, #0x28                  	// #40
   ac87c:	f2bfc403 	movk	x3, #0xfe20, lsl #16
   ac880:	b9000062 	str	w2, [x3]
   ac884:	6a010000 	ands	w0, w0, w1
   ac888:	54000080 	b.eq	ac898 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x28>  // b.none
   ac88c:	d2800381 	mov	x1, #0x1c                  	// #28
   ac890:	f2bfc401 	movk	x1, #0xfe20, lsl #16
   ac894:	b9000020 	str	w0, [x1]
   ac898:	d65f03c0 	ret
   ac89c:	d503201f 	nop

00000000000ac8a0 <CGPIOPin::ReadAll()>:
   ac8a0:	d2800680 	mov	x0, #0x34                  	// #52
   ac8a4:	f2bfc400 	movk	x0, #0xfe20, lsl #16
   ac8a8:	b9400000 	ldr	w0, [x0]
   ac8ac:	d65f03c0 	ret

00000000000ac8b0 <CGPIOPin::SetPullMode(TGPIOPullMode)>:
   ac8b0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ac8b4:	910003fd 	mov	x29, sp
   ac8b8:	f90013f5 	str	x21, [sp, #32]
   ac8bc:	b0000095 	adrp	x21, bd000 <CNetDevice::s_SpeedString+0x18>
   ac8c0:	b942faa2 	ldr	w2, [x21, #760]
   ac8c4:	a90153f3 	stp	x19, x20, [sp, #16]
   ac8c8:	aa0003f4 	mov	x20, x0
   ac8cc:	2a0103f3 	mov	w19, w1
   ac8d0:	35000382 	cbnz	w2, ac940 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x90>
   ac8d4:	b9400a80 	ldr	w0, [x20, #8]
   ac8d8:	7100d41f 	cmp	w0, #0x35
   ac8dc:	540003c8 	b.hi	ac954 <CGPIOPin::SetPullMode(TGPIOPullMode)+0xa4>  // b.pmore
   ac8e0:	52800722 	mov	w2, #0x39                  	// #57
   ac8e4:	72a7f102 	movk	w2, #0x3f88, lsl #16
   ac8e8:	0b401042 	add	w2, w2, w0, lsr #4
   ac8ec:	71000a7f 	cmp	w19, #0x2
   ac8f0:	531f0c00 	ubfiz	w0, w0, #1, #4
   ac8f4:	531e7442 	lsl	w2, w2, #2
   ac8f8:	5400040c 	b.gt	ac978 <CGPIOPin::SetPullMode(TGPIOPullMode)+0xc8>
   ac8fc:	f0000064 	adrp	x4, bb000 <FromPCIeHost+0x50>
   ac900:	91096084 	add	x4, x4, #0x258
   ac904:	b9400045 	ldr	w5, [x2]
   ac908:	910a4084 	add	x4, x4, #0x290
   ac90c:	52800063 	mov	w3, #0x3                   	// #3
   ac910:	b873d881 	ldr	w1, [x4, w19, sxtw #2]
   ac914:	1ac02063 	lsl	w3, w3, w0
   ac918:	0a2300a3 	bic	w3, w5, w3
   ac91c:	1ac02020 	lsl	w0, w1, w0
   ac920:	2a030000 	orr	w0, w0, w3
   ac924:	b9000040 	str	w0, [x2]
   ac928:	b942faa0 	ldr	w0, [x21, #760]
   ac92c:	350001e0 	cbnz	w0, ac968 <CGPIOPin::SetPullMode(TGPIOPullMode)+0xb8>
   ac930:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac934:	f94013f5 	ldr	x21, [sp, #32]
   ac938:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ac93c:	d65f03c0 	ret
   ac940:	2a0203e0 	mov	w0, w2
   ac944:	97fff1ff 	bl	a9140 <EnterCritical>
   ac948:	b9400a80 	ldr	w0, [x20, #8]
   ac94c:	7100d41f 	cmp	w0, #0x35
   ac950:	54fffc89 	b.ls	ac8e0 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x30>  // b.plast
   ac954:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac958:	91096021 	add	x1, x1, #0x258
   ac95c:	9100a020 	add	x0, x1, #0x28
   ac960:	528033c2 	mov	w2, #0x19e                 	// #414
   ac964:	97ffc4f7 	bl	9dd40 <assertion_failed>
   ac968:	a94153f3 	ldp	x19, x20, [sp, #16]
   ac96c:	f94013f5 	ldr	x21, [sp, #32]
   ac970:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ac974:	17fff223 	b	a9200 <LeaveCritical>
   ac978:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ac97c:	91096021 	add	x1, x1, #0x258
   ac980:	910a0020 	add	x0, x1, #0x280
   ac984:	52803442 	mov	w2, #0x1a2                 	// #418
   ac988:	97ffc4ee 	bl	9dd40 <assertion_failed>
   ac98c:	d503201f 	nop

00000000000ac990 <CGPIOPin::SetAlternateFunction(unsigned int)>:
   ac990:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ac994:	910003fd 	mov	x29, sp
   ac998:	b9400803 	ldr	w3, [x0, #8]
   ac99c:	a90153f3 	stp	x19, x20, [sp, #16]
   ac9a0:	a9025bf5 	stp	x21, x22, [sp, #32]
   ac9a4:	7100d47f 	cmp	w3, #0x35
   ac9a8:	54000508 	b.hi	aca48 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>  // b.pmore
   ac9ac:	529999a0 	mov	w0, #0xcccd                	// #52429
   ac9b0:	72b99980 	movk	w0, #0xcccc, lsl #16
   ac9b4:	2a0103f5 	mov	w21, w1
   ac9b8:	52a7f101 	mov	w1, #0x3f880000            	// #1065877504
   ac9bc:	9ba07c60 	umull	x0, w3, w0
   ac9c0:	710016bf 	cmp	w21, #0x5
   ac9c4:	d363fc00 	lsr	x0, x0, #35
   ac9c8:	0b000802 	add	w2, w0, w0, lsl #2
   ac9cc:	0b010000 	add	w0, w0, w1
   ac9d0:	531e7413 	lsl	w19, w0, #2
   ac9d4:	4b020460 	sub	w0, w3, w2, lsl #1
   ac9d8:	0b000414 	add	w20, w0, w0, lsl #1
   ac9dc:	54000408 	b.hi	aca5c <CGPIOPin::SetAlternateFunction(unsigned int)+0xcc>  // b.pmore
   ac9e0:	b0000096 	adrp	x22, bd000 <CNetDevice::s_SpeedString+0x18>
   ac9e4:	b942fac0 	ldr	w0, [x22, #760]
   ac9e8:	35000240 	cbnz	w0, aca30 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa0>
   ac9ec:	f0000060 	adrp	x0, bb000 <FromPCIeHost+0x50>
   ac9f0:	91096000 	add	x0, x0, #0x258
   ac9f4:	b9400263 	ldr	w3, [x19]
   ac9f8:	910ac000 	add	x0, x0, #0x2b0
   ac9fc:	528000e2 	mov	w2, #0x7                   	// #7
   aca00:	b8755800 	ldr	w0, [x0, w21, uxtw #2]
   aca04:	1ad42041 	lsl	w1, w2, w20
   aca08:	0a210061 	bic	w1, w3, w1
   aca0c:	1ad42000 	lsl	w0, w0, w20
   aca10:	2a010000 	orr	w0, w0, w1
   aca14:	b9000260 	str	w0, [x19]
   aca18:	b942fac0 	ldr	w0, [x22, #760]
   aca1c:	350000e0 	cbnz	w0, aca38 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa8>
   aca20:	a94153f3 	ldp	x19, x20, [sp, #16]
   aca24:	a9425bf5 	ldp	x21, x22, [sp, #32]
   aca28:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aca2c:	d65f03c0 	ret
   aca30:	97fff1c4 	bl	a9140 <EnterCritical>
   aca34:	17ffffee 	b	ac9ec <CGPIOPin::SetAlternateFunction(unsigned int)+0x5c>
   aca38:	a94153f3 	ldp	x19, x20, [sp, #16]
   aca3c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   aca40:	a8c37bfd 	ldp	x29, x30, [sp], #48
   aca44:	17fff1ef 	b	a9200 <LeaveCritical>
   aca48:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   aca4c:	91096021 	add	x1, x1, #0x258
   aca50:	9100a020 	add	x0, x1, #0x28
   aca54:	52803642 	mov	w2, #0x1b2                 	// #434
   aca58:	97ffc4ba 	bl	9dd40 <assertion_failed>
   aca5c:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   aca60:	91096021 	add	x1, x1, #0x258
   aca64:	910a8020 	add	x0, x1, #0x2a0
   aca68:	528036c2 	mov	w2, #0x1b6                 	// #438
   aca6c:	97ffc4b5 	bl	9dd40 <assertion_failed>

00000000000aca70 <CGPIOPin::SetMode(TGPIOMode, bool)>:
   aca70:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   aca74:	910003fd 	mov	x29, sp
   aca78:	7100283f 	cmp	w1, #0xa
   aca7c:	a90153f3 	stp	x19, x20, [sp, #16]
   aca80:	a9025bf5 	stp	x21, x22, [sp, #32]
   aca84:	54000bec 	b.gt	acc00 <CGPIOPin::SetMode(TGPIOMode, bool)+0x190>
   aca88:	7100003f 	cmp	w1, #0x0
   aca8c:	2a0103e3 	mov	w3, w1
   aca90:	1a9f1424 	csinc	w4, w1, wzr, ne	// ne = any
   aca94:	51001481 	sub	w1, w4, #0x5
   aca98:	b9001404 	str	w4, [x0, #20]
   aca9c:	12001c56 	and	w22, w2, #0xff
   acaa0:	7100143f 	cmp	w1, #0x5
   acaa4:	aa0003f4 	mov	x20, x0
   acaa8:	54000709 	b.ls	acb88 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>  // b.plast
   acaac:	710002df 	cmp	w22, #0x0
   acab0:	f9001bf7 	str	x23, [sp, #48]
   acab4:	7a421860 	ccmp	w3, #0x2, #0x0, ne	// ne = any
   acab8:	54000b00 	b.eq	acc18 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1a8>  // b.none
   acabc:	b9400a83 	ldr	w3, [x20, #8]
   acac0:	7100d47f 	cmp	w3, #0x35
   acac4:	54000b08 	b.hi	acc24 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b4>  // b.pmore
   acac8:	529999a1 	mov	w1, #0xcccd                	// #52429
   acacc:	72b99981 	movk	w1, #0xcccc, lsl #16
   acad0:	52a7f102 	mov	w2, #0x3f880000            	// #1065877504
   acad4:	b0000097 	adrp	x23, bd000 <CNetDevice::s_SpeedString+0x18>
   acad8:	9ba17c61 	umull	x1, w3, w1
   acadc:	b942fae0 	ldr	w0, [x23, #760]
   acae0:	d363fc21 	lsr	x1, x1, #35
   acae4:	0b010835 	add	w21, w1, w1, lsl #2
   acae8:	0b020021 	add	w1, w1, w2
   acaec:	531e7433 	lsl	w19, w1, #2
   acaf0:	4b150475 	sub	w21, w3, w21, lsl #1
   acaf4:	0b1506b5 	add	w21, w21, w21, lsl #1
   acaf8:	35000620 	cbnz	w0, acbbc <CGPIOPin::SetMode(TGPIOMode, bool)+0x14c>
   acafc:	b9401680 	ldr	w0, [x20, #20]
   acb00:	528000e1 	mov	w1, #0x7                   	// #7
   acb04:	1ad52021 	lsl	w1, w1, w21
   acb08:	b9400262 	ldr	w2, [x19]
   acb0c:	7100081f 	cmp	w0, #0x2
   acb10:	1a9f17e0 	cset	w0, eq	// eq = none
   acb14:	1ad52000 	lsl	w0, w0, w21
   acb18:	0a210041 	bic	w1, w2, w1
   acb1c:	2a010000 	orr	w0, w0, w1
   acb20:	b9000260 	str	w0, [x19]
   acb24:	b942fae0 	ldr	w0, [x23, #760]
   acb28:	350004e0 	cbnz	w0, acbc4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x154>
   acb2c:	34000256 	cbz	w22, acb74 <CGPIOPin::SetMode(TGPIOMode, bool)+0x104>
   acb30:	b9401680 	ldr	w0, [x20, #20]
   acb34:	71000c1f 	cmp	w0, #0x3
   acb38:	54000800 	b.eq	acc38 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1c8>  // b.none
   acb3c:	54000188 	b.hi	acb6c <CGPIOPin::SetMode(TGPIOMode, bool)+0xfc>  // b.pmore
   acb40:	7100041f 	cmp	w0, #0x1
   acb44:	54000460 	b.eq	acbd0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x160>  // b.none
   acb48:	7100081f 	cmp	w0, #0x2
   acb4c:	54000141 	b.ne	acb74 <CGPIOPin::SetMode(TGPIOMode, bool)+0x104>  // b.any
   acb50:	aa1403e0 	mov	x0, x20
   acb54:	52800001 	mov	w1, #0x0                   	// #0
   acb58:	a94153f3 	ldp	x19, x20, [sp, #16]
   acb5c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   acb60:	f9401bf7 	ldr	x23, [sp, #48]
   acb64:	a8c47bfd 	ldp	x29, x30, [sp], #64
   acb68:	17fffcfa 	b	abf50 <CGPIOPin::Write(unsigned int)>
   acb6c:	7100101f 	cmp	w0, #0x4
   acb70:	54000180 	b.eq	acba0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x130>  // b.none
   acb74:	a94153f3 	ldp	x19, x20, [sp, #16]
   acb78:	a9425bf5 	ldp	x21, x22, [sp, #32]
   acb7c:	f9401bf7 	ldr	x23, [sp, #48]
   acb80:	a8c47bfd 	ldp	x29, x30, [sp], #64
   acb84:	d65f03c0 	ret
   acb88:	350002b6 	cbnz	w22, acbdc <CGPIOPin::SetMode(TGPIOMode, bool)+0x16c>
   acb8c:	aa1403e0 	mov	x0, x20
   acb90:	a94153f3 	ldp	x19, x20, [sp, #16]
   acb94:	a9425bf5 	ldp	x21, x22, [sp, #32]
   acb98:	a8c47bfd 	ldp	x29, x30, [sp], #64
   acb9c:	17ffff7d 	b	ac990 <CGPIOPin::SetAlternateFunction(unsigned int)>
   acba0:	aa1403e0 	mov	x0, x20
   acba4:	52800021 	mov	w1, #0x1                   	// #1
   acba8:	a94153f3 	ldp	x19, x20, [sp, #16]
   acbac:	a9425bf5 	ldp	x21, x22, [sp, #32]
   acbb0:	f9401bf7 	ldr	x23, [sp, #48]
   acbb4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   acbb8:	17ffff3e 	b	ac8b0 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   acbbc:	97fff161 	bl	a9140 <EnterCritical>
   acbc0:	17ffffcf 	b	acafc <CGPIOPin::SetMode(TGPIOMode, bool)+0x8c>
   acbc4:	97fff18f 	bl	a9200 <LeaveCritical>
   acbc8:	34fffd76 	cbz	w22, acb74 <CGPIOPin::SetMode(TGPIOMode, bool)+0x104>
   acbcc:	17ffffd9 	b	acb30 <CGPIOPin::SetMode(TGPIOMode, bool)+0xc0>
   acbd0:	aa1403e0 	mov	x0, x20
   acbd4:	52800001 	mov	w1, #0x0                   	// #0
   acbd8:	17fffff4 	b	acba8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x138>
   acbdc:	52800001 	mov	w1, #0x0                   	// #0
   acbe0:	97ffff34 	bl	ac8b0 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   acbe4:	b9401684 	ldr	w4, [x20, #20]
   acbe8:	aa1403e0 	mov	x0, x20
   acbec:	a94153f3 	ldp	x19, x20, [sp, #16]
   acbf0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   acbf4:	51001481 	sub	w1, w4, #0x5
   acbf8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   acbfc:	17ffff65 	b	ac990 <CGPIOPin::SetAlternateFunction(unsigned int)>
   acc00:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   acc04:	91096021 	add	x1, x1, #0x258
   acc08:	f9001bf7 	str	x23, [sp, #48]
   acc0c:	910b2020 	add	x0, x1, #0x2c8
   acc10:	528009e2 	mov	w2, #0x4f                  	// #79
   acc14:	97ffc44b 	bl	9dd40 <assertion_failed>
   acc18:	52800001 	mov	w1, #0x0                   	// #0
   acc1c:	97ffff25 	bl	ac8b0 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   acc20:	17ffffa7 	b	acabc <CGPIOPin::SetMode(TGPIOMode, bool)+0x4c>
   acc24:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   acc28:	91096021 	add	x1, x1, #0x258
   acc2c:	9100a020 	add	x0, x1, #0x28
   acc30:	52800d82 	mov	w2, #0x6c                  	// #108
   acc34:	97ffc443 	bl	9dd40 <assertion_failed>
   acc38:	aa1403e0 	mov	x0, x20
   acc3c:	52800041 	mov	w1, #0x2                   	// #2
   acc40:	17ffffda 	b	acba8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x138>
   acc44:	d503201f 	nop
   acc48:	d503201f 	nop
   acc4c:	d503201f 	nop

00000000000acc50 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   acc50:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   acc54:	910003fd 	mov	x29, sp
   acc58:	52800164 	mov	w4, #0xb                   	// #11
   acc5c:	7100d43f 	cmp	w1, #0x35
   acc60:	a90153f3 	stp	x19, x20, [sp, #16]
   acc64:	aa0003f3 	mov	x19, x0
   acc68:	2a0103f4 	mov	w20, w1
   acc6c:	f0000060 	adrp	x0, bb000 <FromPCIeHost+0x50>
   acc70:	91092000 	add	x0, x0, #0x248
   acc74:	f90013f5 	str	x21, [sp, #32]
   acc78:	2a0203f5 	mov	w21, w2
   acc7c:	b9000a61 	str	w1, [x19, #8]
   acc80:	528000c1 	mov	w1, #0x6                   	// #6
   acc84:	f9000260 	str	x0, [x19]
   acc88:	b9001664 	str	w4, [x19, #20]
   acc8c:	a9027e63 	stp	x3, xzr, [x19, #32]
   acc90:	29078661 	stp	w1, w1, [x19, #60]
   acc94:	54000188 	b.hi	accc4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x74>  // b.pmore
   acc98:	53057e83 	lsr	w3, w20, #5
   acc9c:	52800022 	mov	w2, #0x1                   	// #1
   acca0:	1ad42054 	lsl	w20, w2, w20
   acca4:	531e7463 	lsl	w3, w3, #2
   acca8:	2a1503e1 	mov	w1, w21
   accac:	aa1303e0 	mov	x0, x19
   accb0:	f94013f5 	ldr	x21, [sp, #32]
   accb4:	2901d263 	stp	w3, w20, [x19, #12]
   accb8:	a94153f3 	ldp	x19, x20, [sp, #16]
   accbc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   accc0:	17ffff6c 	b	aca70 <CGPIOPin::SetMode(TGPIOMode, bool)>
   accc4:	97ffd0d7 	bl	a1020 <CMachineInfo::Get()>
   accc8:	2a1403e1 	mov	w1, w20
   acccc:	97ffce49 	bl	a05f0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   accd0:	7100d41f 	cmp	w0, #0x35
   accd4:	b9000a60 	str	w0, [x19, #8]
   accd8:	2a0003f4 	mov	w20, w0
   accdc:	54fffde9 	b.ls	acc98 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x48>  // b.plast
   acce0:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   acce4:	91096021 	add	x1, x1, #0x258
   acce8:	9100a020 	add	x0, x1, #0x28
   accec:	528008e2 	mov	w2, #0x47                  	// #71
   accf0:	97ffc414 	bl	9dd40 <assertion_failed>
   accf4:	d503201f 	nop
   accf8:	d503201f 	nop
   accfc:	d503201f 	nop

00000000000acd00 <CGPIOPin::InterruptHandler()>:
   acd00:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   acd04:	910003fd 	mov	x29, sp
   acd08:	b9401401 	ldr	w1, [x0, #20]
   acd0c:	51000c22 	sub	w2, w1, #0x3
   acd10:	7100045f 	cmp	w2, #0x1
   acd14:	7a418824 	ccmp	w1, #0x1, #0x4, hi	// hi = pmore
   acd18:	540002e1 	b.ne	acd74 <CGPIOPin::InterruptHandler()+0x74>  // b.any
   acd1c:	b9403c01 	ldr	w1, [x0, #60]
   acd20:	7100143f 	cmp	w1, #0x5
   acd24:	540000ec 	b.gt	acd40 <CGPIOPin::InterruptHandler()+0x40>
   acd28:	f9401401 	ldr	x1, [x0, #40]
   acd2c:	b40001a1 	cbz	x1, acd60 <CGPIOPin::InterruptHandler()+0x60>
   acd30:	a8c17bfd 	ldp	x29, x30, [sp], #16
   acd34:	aa0103f0 	mov	x16, x1
   acd38:	f9401800 	ldr	x0, [x0, #48]
   acd3c:	d61f0200 	br	x16
   acd40:	b9404001 	ldr	w1, [x0, #64]
   acd44:	7100143f 	cmp	w1, #0x5
   acd48:	54ffff0d 	b.le	acd28 <CGPIOPin::InterruptHandler()+0x28>
   acd4c:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   acd50:	91096021 	add	x1, x1, #0x258
   acd54:	910b8020 	add	x0, x1, #0x2e0
   acd58:	528038c2 	mov	w2, #0x1c6                 	// #454
   acd5c:	97ffc3f9 	bl	9dd40 <assertion_failed>
   acd60:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   acd64:	91096021 	add	x1, x1, #0x258
   acd68:	91062020 	add	x0, x1, #0x188
   acd6c:	52803922 	mov	w2, #0x1c9                 	// #457
   acd70:	97ffc3f4 	bl	9dd40 <assertion_failed>
   acd74:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   acd78:	91096021 	add	x1, x1, #0x258
   acd7c:	91022020 	add	x0, x1, #0x88
   acd80:	52803862 	mov	w2, #0x1c3                 	// #451
   acd84:	97ffc3ef 	bl	9dd40 <assertion_failed>
   acd88:	d503201f 	nop
   acd8c:	d503201f 	nop

00000000000acd90 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   acd90:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   acd94:	910003fd 	mov	x29, sp
   acd98:	7100d41f 	cmp	w0, #0x35
   acd9c:	a90153f3 	stp	x19, x20, [sp, #16]
   acda0:	f90013f5 	str	x21, [sp, #32]
   acda4:	54000408 	b.hi	ace24 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x94>  // b.pmore
   acda8:	52800273 	mov	w19, #0x13                  	// #19
   acdac:	72a7f113 	movk	w19, #0x3f88, lsl #16
   acdb0:	0b401673 	add	w19, w19, w0, lsr #5
   acdb4:	b0000095 	adrp	x21, bd000 <CNetDevice::s_SpeedString+0x18>
   acdb8:	2a0003e2 	mov	w2, w0
   acdbc:	52800021 	mov	w1, #0x1                   	// #1
   acdc0:	b942faa0 	ldr	w0, [x21, #760]
   acdc4:	1ac22034 	lsl	w20, w1, w2
   acdc8:	531e7673 	lsl	w19, w19, #2
   acdcc:	35000200 	cbnz	w0, ace0c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x7c>
   acdd0:	d2801162 	mov	x2, #0x8b                  	// #139
   acdd4:	f2bfc402 	movk	x2, #0xfe20, lsl #16
   acdd8:	2a3403e1 	mvn	w1, w20
   acddc:	d503201f 	nop
   acde0:	b9400260 	ldr	w0, [x19]
   acde4:	0a000020 	and	w0, w1, w0
   acde8:	b800c660 	str	w0, [x19], #12
   acdec:	eb02027f 	cmp	x19, x2
   acdf0:	54ffff89 	b.ls	acde0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>  // b.plast
   acdf4:	b942faa0 	ldr	w0, [x21, #760]
   acdf8:	350000e0 	cbnz	w0, ace14 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
   acdfc:	a94153f3 	ldp	x19, x20, [sp, #16]
   ace00:	f94013f5 	ldr	x21, [sp, #32]
   ace04:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ace08:	d65f03c0 	ret
   ace0c:	97fff0cd 	bl	a9140 <EnterCritical>
   ace10:	17fffff0 	b	acdd0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x40>
   ace14:	a94153f3 	ldp	x19, x20, [sp, #16]
   ace18:	f94013f5 	ldr	x21, [sp, #32]
   ace1c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ace20:	17fff0f8 	b	a9200 <LeaveCritical>
   ace24:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ace28:	91096021 	add	x1, x1, #0x258
   ace2c:	910cc020 	add	x0, x1, #0x330
   ace30:	528039e2 	mov	w2, #0x1cf                 	// #463
   ace34:	97ffc3c3 	bl	9dd40 <assertion_failed>
	...

00000000000ace40 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   ace40:	b0000080 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   ace44:	52800021 	mov	w1, #0x1                   	// #1
   ace48:	b902f801 	str	w1, [x0, #760]
   ace4c:	d65f03c0 	ret

00000000000ace50 <malloc>:
   ace50:	b0000081 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   ace54:	f9411c22 	ldr	x2, [x1, #568]
   ace58:	aa0003e1 	mov	x1, x0
   ace5c:	91006040 	add	x0, x2, #0x18
   ace60:	17ffed68 	b	a8400 <CHeapAllocator::Allocate(unsigned long)>
   ace64:	d503201f 	nop
   ace68:	d503201f 	nop
   ace6c:	d503201f 	nop

00000000000ace70 <memalign>:
   ace70:	f101001f 	cmp	x0, #0x40
   ace74:	540000a8 	b.hi	ace88 <memalign+0x18>  // b.pmore
   ace78:	b0000080 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   ace7c:	f9411c00 	ldr	x0, [x0, #568]
   ace80:	91006000 	add	x0, x0, #0x18
   ace84:	17ffed5f 	b	a8400 <CHeapAllocator::Allocate(unsigned long)>
   ace88:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ace8c:	91168021 	add	x1, x1, #0x5a0
   ace90:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ace94:	91004020 	add	x0, x1, #0x10
   ace98:	910003fd 	mov	x29, sp
   ace9c:	52800422 	mov	w2, #0x21                  	// #33
   acea0:	97ffc3a8 	bl	9dd40 <assertion_failed>
   acea4:	d503201f 	nop
   acea8:	d503201f 	nop
   aceac:	d503201f 	nop

00000000000aceb0 <free>:
   aceb0:	aa0003e1 	mov	x1, x0
   aceb4:	b24077e2 	mov	x2, #0x3fffffff            	// #1073741823
   aceb8:	b0000080 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   acebc:	eb02003f 	cmp	x1, x2
   acec0:	f9411c00 	ldr	x0, [x0, #568]
   acec4:	54000068 	b.hi	aced0 <free+0x20>  // b.pmore
   acec8:	91006000 	add	x0, x0, #0x18
   acecc:	17ffedd9 	b	a8630 <CHeapAllocator::Free(void*)>
   aced0:	91064000 	add	x0, x0, #0x190
   aced4:	17ffedd7 	b	a8630 <CHeapAllocator::Free(void*)>
   aced8:	d503201f 	nop
   acedc:	d503201f 	nop

00000000000acee0 <calloc>:
   acee0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   acee4:	910003fd 	mov	x29, sp
   acee8:	a90153f3 	stp	x19, x20, [sp, #16]
   aceec:	9b007c33 	mul	x19, x1, x0
   acef0:	f100027f 	cmp	x19, #0x0
   acef4:	9a9f1673 	csinc	x19, x19, xzr, ne	// ne = any
   acef8:	eb13001f 	cmp	x0, x19
   acefc:	540001e8 	b.hi	acf38 <calloc+0x58>  // b.pmore
   acf00:	b0000080 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   acf04:	aa1303e1 	mov	x1, x19
   acf08:	f9411c00 	ldr	x0, [x0, #568]
   acf0c:	91006000 	add	x0, x0, #0x18
   acf10:	97ffed3c 	bl	a8400 <CHeapAllocator::Allocate(unsigned long)>
   acf14:	aa0003f4 	mov	x20, x0
   acf18:	b4000080 	cbz	x0, acf28 <calloc+0x48>
   acf1c:	aa1303e2 	mov	x2, x19
   acf20:	52800001 	mov	w1, #0x0                   	// #0
   acf24:	97ffea31 	bl	a77e8 <memset>
   acf28:	aa1403e0 	mov	x0, x20
   acf2c:	a94153f3 	ldp	x19, x20, [sp, #16]
   acf30:	a8c27bfd 	ldp	x29, x30, [sp], #32
   acf34:	d65f03c0 	ret
   acf38:	f0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   acf3c:	91168021 	add	x1, x1, #0x5a0
   acf40:	9100c020 	add	x0, x1, #0x30
   acf44:	52800622 	mov	w2, #0x31                  	// #49
   acf48:	97ffc37e 	bl	9dd40 <assertion_failed>
   acf4c:	d503201f 	nop

00000000000acf50 <realloc>:
   acf50:	b24077e2 	mov	x2, #0x3fffffff            	// #1073741823
   acf54:	b0000083 	adrp	x3, bd000 <CNetDevice::s_SpeedString+0x18>
   acf58:	eb02001f 	cmp	x0, x2
   acf5c:	f9411c63 	ldr	x3, [x3, #568]
   acf60:	aa0103e2 	mov	x2, x1
   acf64:	aa0003e1 	mov	x1, x0
   acf68:	54000068 	b.hi	acf74 <realloc+0x24>  // b.pmore
   acf6c:	91006060 	add	x0, x3, #0x18
   acf70:	17ffee08 	b	a8790 <CHeapAllocator::ReAllocate(void*, unsigned long)>
   acf74:	91064060 	add	x0, x3, #0x190
   acf78:	17ffee06 	b	a8790 <CHeapAllocator::ReAllocate(void*, unsigned long)>
   acf7c:	d503201f 	nop

00000000000acf80 <palloc>:
   acf80:	b0000080 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   acf84:	f9411c00 	ldr	x0, [x0, #568]
   acf88:	910c2000 	add	x0, x0, #0x308
   acf8c:	14000791 	b	aedd0 <CPageAllocator::Allocate()>

00000000000acf90 <pfree>:
   acf90:	b0000081 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   acf94:	f9411c22 	ldr	x2, [x1, #568]
   acf98:	aa0003e1 	mov	x1, x0
   acf9c:	910c2040 	add	x0, x2, #0x308
   acfa0:	140007c0 	b	aeea0 <CPageAllocator::Free(void*)>
	...

00000000000acfb0 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>:
   acfb0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   acfb4:	910003fd 	mov	x29, sp
   acfb8:	52800001 	mov	w1, #0x0                   	// #0
   acfbc:	f9000bf3 	str	x19, [sp, #16]
   acfc0:	aa0003f3 	mov	x19, x0
   acfc4:	9100a3e0 	add	x0, sp, #0x28
   acfc8:	97ffc382 	bl	9ddd0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   acfcc:	b9401665 	ldr	w5, [x19, #20]
   acfd0:	9100a3e0 	add	x0, sp, #0x28
   acfd4:	52900261 	mov	w1, #0x8013                	// #32787
   acfd8:	72a00081 	movk	w1, #0x4, lsl #16
   acfdc:	52800084 	mov	w4, #0x4                   	// #4
   acfe0:	52800203 	mov	w3, #0x10                  	// #16
   acfe4:	9100c3e2 	add	x2, sp, #0x30
   acfe8:	b9003fe5 	str	w5, [sp, #60]
   acfec:	97ffc3d9 	bl	9df50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   acff0:	72001c1f 	tst	w0, #0xff
   acff4:	54000080 	b.eq	ad004 <CBcmFrameBuffer::SetDisplay() [clone .part.0]+0x54>  // b.none
   acff8:	b9401661 	ldr	w1, [x19, #20]
   acffc:	b0000080 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   ad000:	b9005001 	str	w1, [x0, #80]
   ad004:	9100a3e0 	add	x0, sp, #0x28
   ad008:	97ffc376 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   ad00c:	f9400bf3 	ldr	x19, [sp, #16]
   ad010:	a8c47bfd 	ldp	x29, x30, [sp], #64
   ad014:	d65f03c0 	ret
   ad018:	d503201f 	nop
   ad01c:	d503201f 	nop

00000000000ad020 <CBcmFrameBuffer::GetNumDisplays() [clone .part.0]>:
   ad020:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   ad024:	52800001 	mov	w1, #0x0                   	// #0
   ad028:	910003fd 	mov	x29, sp
   ad02c:	9100a3e0 	add	x0, sp, #0x28
   ad030:	f9000bf3 	str	x19, [sp, #16]
   ad034:	97ffc367 	bl	9ddd0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   ad038:	9100c3e2 	add	x2, sp, #0x30
   ad03c:	52800004 	mov	w4, #0x0                   	// #0
   ad040:	52800203 	mov	w3, #0x10                  	// #16
   ad044:	9100a3e0 	add	x0, sp, #0x28
   ad048:	52800261 	mov	w1, #0x13                  	// #19
   ad04c:	72a00081 	movk	w1, #0x4, lsl #16
   ad050:	97ffc3c0 	bl	9df50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   ad054:	90000081 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   ad058:	72001c1f 	tst	w0, #0xff
   ad05c:	b9403ff3 	ldr	w19, [sp, #60]
   ad060:	9100a3e0 	add	x0, sp, #0x28
   ad064:	1a9f1673 	csinc	w19, w19, wzr, ne	// ne = any
   ad068:	b902fc33 	str	w19, [x1, #764]
   ad06c:	97ffc35d 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   ad070:	2a1303e0 	mov	w0, w19
   ad074:	f9400bf3 	ldr	x19, [sp, #16]
   ad078:	a8c47bfd 	ldp	x29, x30, [sp], #64
   ad07c:	d65f03c0 	ret

00000000000ad080 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   ad080:	90000081 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   ad084:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ad088:	910003fd 	mov	x29, sp
   ad08c:	b9405021 	ldr	w1, [x1, #80]
   ad090:	a90153f3 	stp	x19, x20, [sp, #16]
   ad094:	aa0003f3 	mov	x19, x0
   ad098:	b9401402 	ldr	w2, [x0, #20]
   ad09c:	6b01005f 	cmp	w2, w1
   ad0a0:	54000040 	b.eq	ad0a8 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x28>  // b.none
   ad0a4:	97ffffc3 	bl	acfb0 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>
   ad0a8:	f9401662 	ldr	x2, [x19, #40]
   ad0ac:	52800023 	mov	w3, #0x1                   	// #1
   ad0b0:	9100a3e0 	add	x0, sp, #0x28
   ad0b4:	52800001 	mov	w1, #0x0                   	// #0
   ad0b8:	3900305f 	strb	wzr, [x2, #12]
   ad0bc:	3900345f 	strb	wzr, [x2, #13]
   ad0c0:	3900385f 	strb	wzr, [x2, #14]
   ad0c4:	39003c5f 	strb	wzr, [x2, #15]
   ad0c8:	3900405f 	strb	wzr, [x2, #16]
   ad0cc:	39004443 	strb	w3, [x2, #17]
   ad0d0:	3900485f 	strb	wzr, [x2, #18]
   ad0d4:	39004c5f 	strb	wzr, [x2, #19]
   ad0d8:	97ffc33e 	bl	9ddd0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   ad0dc:	9100a3e0 	add	x0, sp, #0x28
   ad0e0:	52900161 	mov	w1, #0x800b                	// #32779
   ad0e4:	72a00081 	movk	w1, #0x4, lsl #16
   ad0e8:	52808104 	mov	w4, #0x408                 	// #1032
   ad0ec:	f9401662 	ldr	x2, [x19, #40]
   ad0f0:	52808283 	mov	w3, #0x414                 	// #1044
   ad0f4:	97ffc397 	bl	9df50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   ad0f8:	72001c14 	ands	w20, w0, #0xff
   ad0fc:	54000140 	b.eq	ad124 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xa4>  // b.none
   ad100:	f9401660 	ldr	x0, [x19, #40]
   ad104:	39403003 	ldrb	w3, [x0, #12]
   ad108:	39403402 	ldrb	w2, [x0, #13]
   ad10c:	39403801 	ldrb	w1, [x0, #14]
   ad110:	39403c00 	ldrb	w0, [x0, #15]
   ad114:	aa022062 	orr	x2, x3, x2, lsl #8
   ad118:	aa014041 	orr	x1, x2, x1, lsl #16
   ad11c:	aa006020 	orr	x0, x1, x0, lsl #24
   ad120:	b4000100 	cbz	x0, ad140 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xc0>
   ad124:	9100a3e0 	add	x0, sp, #0x28
   ad128:	52800014 	mov	w20, #0x0                   	// #0
   ad12c:	97ffc32d 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   ad130:	2a1403e0 	mov	w0, w20
   ad134:	a94153f3 	ldp	x19, x20, [sp, #16]
   ad138:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ad13c:	d65f03c0 	ret
   ad140:	9100a3e0 	add	x0, sp, #0x28
   ad144:	97ffc327 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   ad148:	2a1403e0 	mov	w0, w20
   ad14c:	a94153f3 	ldp	x19, x20, [sp, #16]
   ad150:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ad154:	d65f03c0 	ret
   ad158:	d503201f 	nop
   ad15c:	d503201f 	nop

00000000000ad160 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>:
   ad160:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   ad164:	910003fd 	mov	x29, sp
   ad168:	a90153f3 	stp	x19, x20, [sp, #16]
   ad16c:	aa0003f3 	mov	x19, x0
   ad170:	90000080 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   ad174:	2a0603f4 	mov	w20, w6
   ad178:	f90013f5 	str	x21, [sp, #32]
   ad17c:	12001cf5 	and	w21, w7, #0xff
   ad180:	b942fc00 	ldr	w0, [x0, #764]
   ad184:	29000a61 	stp	w1, w2, [x19]
   ad188:	29011664 	stp	w4, w5, [x19, #8]
   ad18c:	29021a63 	stp	w3, w6, [x19, #16]
   ad190:	f9000e7f 	str	xzr, [x19, #24]
   ad194:	b900227f 	str	wzr, [x19, #32]
   ad198:	f900167f 	str	xzr, [x19, #40]
   ad19c:	35000040 	cbnz	w0, ad1a4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x44>
   ad1a0:	97ffffa0 	bl	ad020 <CBcmFrameBuffer::GetNumDisplays() [clone .part.0]>
   ad1a4:	6b00029f 	cmp	w20, w0
   ad1a8:	540006e2 	b.cs	ad284 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x124>  // b.hs, b.nlast
   ad1ac:	b9400260 	ldr	w0, [x19]
   ad1b0:	34000060 	cbz	w0, ad1bc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x5c>
   ad1b4:	b9400660 	ldr	w0, [x19, #4]
   ad1b8:	35000420 	cbnz	w0, ad23c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xdc>
   ad1bc:	90000080 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   ad1c0:	b9401661 	ldr	w1, [x19, #20]
   ad1c4:	b9405000 	ldr	w0, [x0, #80]
   ad1c8:	6b00003f 	cmp	w1, w0
   ad1cc:	54000060 	b.eq	ad1d8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x78>  // b.none
   ad1d0:	aa1303e0 	mov	x0, x19
   ad1d4:	97ffff77 	bl	acfb0 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>
   ad1d8:	52800001 	mov	w1, #0x0                   	// #0
   ad1dc:	9100c3e0 	add	x0, sp, #0x30
   ad1e0:	97ffc2fc 	bl	9ddd0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   ad1e4:	9100c3e0 	add	x0, sp, #0x30
   ad1e8:	52800061 	mov	w1, #0x3                   	// #3
   ad1ec:	72a00081 	movk	w1, #0x4, lsl #16
   ad1f0:	52800004 	mov	w4, #0x0                   	// #0
   ad1f4:	52800283 	mov	w3, #0x14                  	// #20
   ad1f8:	9100e3e2 	add	x2, sp, #0x38
   ad1fc:	97ffc355 	bl	9df50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   ad200:	72001c1f 	tst	w0, #0xff
   ad204:	54000120 	b.eq	ad228 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xc8>  // b.none
   ad208:	294887e0 	ldp	w0, w1, [sp, #68]
   ad20c:	5281b002 	mov	w2, #0xd80                 	// #3456
   ad210:	51078023 	sub	w3, w1, #0x1e0
   ad214:	29000660 	stp	w0, w1, [x19]
   ad218:	510a0001 	sub	w1, w0, #0x280
   ad21c:	711a407f 	cmp	w3, #0x690
   ad220:	7a429022 	ccmp	w1, w2, #0x2, ls	// ls = plast
   ad224:	54000089 	b.ls	ad234 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xd4>  // b.plast
   ad228:	d2805000 	mov	x0, #0x280                 	// #640
   ad22c:	f2c03c00 	movk	x0, #0x1e0, lsl #32
   ad230:	f9000260 	str	x0, [x19]
   ad234:	9100c3e0 	add	x0, sp, #0x30
   ad238:	97ffc2ea 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   ad23c:	b9400a60 	ldr	w0, [x19, #8]
   ad240:	340002a0 	cbz	w0, ad294 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x134>
   ad244:	b9400e60 	ldr	w0, [x19, #12]
   ad248:	34000260 	cbz	w0, ad294 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x134>
   ad24c:	b9401260 	ldr	w0, [x19, #16]
   ad250:	7100201f 	cmp	w0, #0x8
   ad254:	540002c9 	b.ls	ad2ac <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x14c>  // b.plast
   ad258:	d0000061 	adrp	x1, bb000 <FromPCIeHost+0x50>
   ad25c:	d2800e02 	mov	x2, #0x70                  	// #112
   ad260:	9117a021 	add	x1, x1, #0x5e8
   ad264:	9100c260 	add	x0, x19, #0x30
   ad268:	97ffe978 	bl	a7848 <memcpy>
   ad26c:	29400a60 	ldp	w0, w2, [x19]
   ad270:	f9400661 	ldr	x1, [x19, #8]
   ad274:	29078a60 	stp	w0, w2, [x19, #60]
   ad278:	b9401260 	ldr	w0, [x19, #16]
   ad27c:	f9002a61 	str	x1, [x19, #80]
   ad280:	b9006660 	str	w0, [x19, #100]
   ad284:	a94153f3 	ldp	x19, x20, [sp, #16]
   ad288:	f94013f5 	ldr	x21, [sp, #32]
   ad28c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   ad290:	d65f03c0 	ret
   ad294:	29400261 	ldp	w1, w0, [x19]
   ad298:	1b0002a0 	madd	w0, w21, w0, w0
   ad29c:	29010261 	stp	w1, w0, [x19, #8]
   ad2a0:	b9401260 	ldr	w0, [x19, #16]
   ad2a4:	7100201f 	cmp	w0, #0x8
   ad2a8:	54fffd88 	b.hi	ad258 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xf8>  // b.pmore
   ad2ac:	d2808280 	mov	x0, #0x414                 	// #1044
   ad2b0:	97ffebf4 	bl	a8280 <operator new[](unsigned long)>
   ad2b4:	aa0003e3 	mov	x3, x0
   ad2b8:	d2808002 	mov	x2, #0x400                 	// #1024
   ad2bc:	52800001 	mov	w1, #0x0                   	// #0
   ad2c0:	91005000 	add	x0, x0, #0x14
   ad2c4:	f9001663 	str	x3, [x19, #40]
   ad2c8:	97ffe948 	bl	a77e8 <memset>
   ad2cc:	17ffffe3 	b	ad258 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xf8>

00000000000ad2d0 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   ad2d0:	f9401400 	ldr	x0, [x0, #40]
   ad2d4:	b4000060 	cbz	x0, ad2e0 <CBcmFrameBuffer::~CBcmFrameBuffer()+0x10>
   ad2d8:	d2800281 	mov	x1, #0x14                  	// #20
   ad2dc:	17ffec09 	b	a8300 <operator delete(void*, unsigned long)>
   ad2e0:	d65f03c0 	ret
   ad2e4:	d503201f 	nop
   ad2e8:	d503201f 	nop
   ad2ec:	d503201f 	nop

00000000000ad2f0 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   ad2f0:	b9401003 	ldr	w3, [x0, #16]
   ad2f4:	12001c21 	and	w1, w1, #0xff
   ad2f8:	12003c42 	and	w2, w2, #0xffff
   ad2fc:	7100207f 	cmp	w3, #0x8
   ad300:	54000248 	b.hi	ad348 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)+0x58>  // b.pmore
   ad304:	53057c43 	lsr	w3, w2, #5
   ad308:	530d1044 	ubfiz	w4, w2, #19, #5
   ad30c:	f9401405 	ldr	x5, [x0, #40]
   ad310:	530b7c42 	lsr	w2, w2, #11
   ad314:	53161460 	ubfiz	w0, w3, #10, #6
   ad318:	8b21c8a1 	add	x1, x5, w1, sxtw #2
   ad31c:	2a020c82 	orr	w2, w4, w2, lsl #3
   ad320:	32081c00 	orr	w0, w0, #0xff000000
   ad324:	d3483c04 	ubfx	x4, x0, #8, #8
   ad328:	2a020003 	orr	w3, w0, w2
   ad32c:	2a020000 	orr	w0, w0, w2
   ad330:	d3505c62 	ubfx	x2, x3, #16, #8
   ad334:	53187c63 	lsr	w3, w3, #24
   ad338:	39005424 	strb	w4, [x1, #21]
   ad33c:	39005020 	strb	w0, [x1, #20]
   ad340:	39005822 	strb	w2, [x1, #22]
   ad344:	39005c23 	strb	w3, [x1, #23]
   ad348:	d65f03c0 	ret
   ad34c:	d503201f 	nop

00000000000ad350 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   ad350:	b9401003 	ldr	w3, [x0, #16]
   ad354:	12001c21 	and	w1, w1, #0xff
   ad358:	7100207f 	cmp	w3, #0x8
   ad35c:	54000148 	b.hi	ad384 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)+0x34>  // b.pmore
   ad360:	d3483c44 	ubfx	x4, x2, #8, #8
   ad364:	d3505c43 	ubfx	x3, x2, #16, #8
   ad368:	f9401405 	ldr	x5, [x0, #40]
   ad36c:	53187c40 	lsr	w0, w2, #24
   ad370:	8b21c8a1 	add	x1, x5, w1, sxtw #2
   ad374:	39005022 	strb	w2, [x1, #20]
   ad378:	39005424 	strb	w4, [x1, #21]
   ad37c:	39005823 	strb	w3, [x1, #22]
   ad380:	39005c20 	strb	w0, [x1, #23]
   ad384:	d65f03c0 	ret
   ad388:	d503201f 	nop
   ad38c:	d503201f 	nop

00000000000ad390 <CBcmFrameBuffer::GetWidth() const>:
   ad390:	b9400000 	ldr	w0, [x0]
   ad394:	d65f03c0 	ret
   ad398:	d503201f 	nop
   ad39c:	d503201f 	nop

00000000000ad3a0 <CBcmFrameBuffer::GetHeight() const>:
   ad3a0:	b9400400 	ldr	w0, [x0, #4]
   ad3a4:	d65f03c0 	ret
   ad3a8:	d503201f 	nop
   ad3ac:	d503201f 	nop

00000000000ad3b0 <CBcmFrameBuffer::GetVirtWidth() const>:
   ad3b0:	b9400800 	ldr	w0, [x0, #8]
   ad3b4:	d65f03c0 	ret
   ad3b8:	d503201f 	nop
   ad3bc:	d503201f 	nop

00000000000ad3c0 <CBcmFrameBuffer::GetVirtHeight() const>:
   ad3c0:	b9400c00 	ldr	w0, [x0, #12]
   ad3c4:	d65f03c0 	ret
   ad3c8:	d503201f 	nop
   ad3cc:	d503201f 	nop

00000000000ad3d0 <CBcmFrameBuffer::GetPitch() const>:
   ad3d0:	b9402000 	ldr	w0, [x0, #32]
   ad3d4:	d65f03c0 	ret
   ad3d8:	d503201f 	nop
   ad3dc:	d503201f 	nop

00000000000ad3e0 <CBcmFrameBuffer::GetDepth() const>:
   ad3e0:	b9401000 	ldr	w0, [x0, #16]
   ad3e4:	d65f03c0 	ret
   ad3e8:	d503201f 	nop
   ad3ec:	d503201f 	nop

00000000000ad3f0 <CBcmFrameBuffer::GetBuffer() const>:
   ad3f0:	b9401800 	ldr	w0, [x0, #24]
   ad3f4:	d65f03c0 	ret
   ad3f8:	d503201f 	nop
   ad3fc:	d503201f 	nop

00000000000ad400 <CBcmFrameBuffer::GetSize() const>:
   ad400:	b9401c00 	ldr	w0, [x0, #28]
   ad404:	d65f03c0 	ret
   ad408:	d503201f 	nop
   ad40c:	d503201f 	nop

00000000000ad410 <CBcmFrameBuffer::UpdatePalette()>:
   ad410:	b9401001 	ldr	w1, [x0, #16]
   ad414:	7100203f 	cmp	w1, #0x8
   ad418:	54000069 	b.ls	ad424 <CBcmFrameBuffer::UpdatePalette()+0x14>  // b.plast
   ad41c:	52800020 	mov	w0, #0x1                   	// #1
   ad420:	d65f03c0 	ret
   ad424:	17ffff17 	b	ad080 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   ad428:	d503201f 	nop
   ad42c:	d503201f 	nop

00000000000ad430 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   ad430:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   ad434:	90000083 	adrp	x3, bd000 <CNetDevice::s_SpeedString+0x18>
   ad438:	910003fd 	mov	x29, sp
   ad43c:	b9405063 	ldr	w3, [x3, #80]
   ad440:	a90153f3 	stp	x19, x20, [sp, #16]
   ad444:	2a0103f4 	mov	w20, w1
   ad448:	b9401401 	ldr	w1, [x0, #20]
   ad44c:	f90013f5 	str	x21, [sp, #32]
   ad450:	2a0203f5 	mov	w21, w2
   ad454:	6b03003f 	cmp	w1, w3
   ad458:	54000040 	b.eq	ad460 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x30>  // b.none
   ad45c:	97fffed5 	bl	acfb0 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>
   ad460:	52800001 	mov	w1, #0x0                   	// #0
   ad464:	9100c3e0 	add	x0, sp, #0x30
   ad468:	97ffc25a 	bl	9ddd0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   ad46c:	9100c3e0 	add	x0, sp, #0x30
   ad470:	52900121 	mov	w1, #0x8009                	// #32777
   ad474:	72a00081 	movk	w1, #0x4, lsl #16
   ad478:	52800104 	mov	w4, #0x8                   	// #8
   ad47c:	2908d7f4 	stp	w20, w21, [sp, #68]
   ad480:	52800283 	mov	w3, #0x14                  	// #20
   ad484:	9100e3e2 	add	x2, sp, #0x38
   ad488:	97ffc2b2 	bl	9df50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   ad48c:	72001c13 	ands	w19, w0, #0xff
   ad490:	540000a0 	b.eq	ad4a4 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x74>  // b.none
   ad494:	b94047e0 	ldr	w0, [sp, #68]
   ad498:	52800013 	mov	w19, #0x0                   	// #0
   ad49c:	6b14001f 	cmp	w0, w20
   ad4a0:	54000100 	b.eq	ad4c0 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x90>  // b.none
   ad4a4:	9100c3e0 	add	x0, sp, #0x30
   ad4a8:	97ffc24e 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   ad4ac:	2a1303e0 	mov	w0, w19
   ad4b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   ad4b4:	f94013f5 	ldr	x21, [sp, #32]
   ad4b8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   ad4bc:	d65f03c0 	ret
   ad4c0:	b9404be0 	ldr	w0, [sp, #72]
   ad4c4:	6b15001f 	cmp	w0, w21
   ad4c8:	9100c3e0 	add	x0, sp, #0x30
   ad4cc:	1a9f17f3 	cset	w19, eq	// eq = none
   ad4d0:	97ffc244 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   ad4d4:	2a1303e0 	mov	w0, w19
   ad4d8:	a94153f3 	ldp	x19, x20, [sp, #16]
   ad4dc:	f94013f5 	ldr	x21, [sp, #32]
   ad4e0:	a8c57bfd 	ldp	x29, x30, [sp], #80
   ad4e4:	d65f03c0 	ret
   ad4e8:	d503201f 	nop
   ad4ec:	d503201f 	nop

00000000000ad4f0 <CBcmFrameBuffer::WaitForVerticalSync()>:
   ad4f0:	90000081 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   ad4f4:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   ad4f8:	910003fd 	mov	x29, sp
   ad4fc:	b9401402 	ldr	w2, [x0, #20]
   ad500:	f9000bf3 	str	x19, [sp, #16]
   ad504:	b9405021 	ldr	w1, [x1, #80]
   ad508:	6b01005f 	cmp	w2, w1
   ad50c:	54000040 	b.eq	ad514 <CBcmFrameBuffer::WaitForVerticalSync()+0x24>  // b.none
   ad510:	97fffea8 	bl	acfb0 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>
   ad514:	9100a3e0 	add	x0, sp, #0x28
   ad518:	52800001 	mov	w1, #0x0                   	// #0
   ad51c:	97ffc22d 	bl	9ddd0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   ad520:	9100c3e2 	add	x2, sp, #0x30
   ad524:	52800004 	mov	w4, #0x0                   	// #0
   ad528:	52800203 	mov	w3, #0x10                  	// #16
   ad52c:	9100a3e0 	add	x0, sp, #0x28
   ad530:	529001c1 	mov	w1, #0x800e                	// #32782
   ad534:	72a00081 	movk	w1, #0x4, lsl #16
   ad538:	97ffc286 	bl	9df50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   ad53c:	2a0003f3 	mov	w19, w0
   ad540:	9100a3e0 	add	x0, sp, #0x28
   ad544:	97ffc227 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   ad548:	2a1303e0 	mov	w0, w19
   ad54c:	f9400bf3 	ldr	x19, [sp, #16]
   ad550:	a8c47bfd 	ldp	x29, x30, [sp], #64
   ad554:	d65f03c0 	ret
   ad558:	d503201f 	nop
   ad55c:	d503201f 	nop

00000000000ad560 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   ad560:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   ad564:	90000082 	adrp	x2, bd000 <CNetDevice::s_SpeedString+0x18>
   ad568:	910003fd 	mov	x29, sp
   ad56c:	b9405042 	ldr	w2, [x2, #80]
   ad570:	f9000bf3 	str	x19, [sp, #16]
   ad574:	2a0103f3 	mov	w19, w1
   ad578:	b9401401 	ldr	w1, [x0, #20]
   ad57c:	6b02003f 	cmp	w1, w2
   ad580:	54000040 	b.eq	ad588 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)+0x28>  // b.none
   ad584:	97fffe8b 	bl	acfb0 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>
   ad588:	9100a3e0 	add	x0, sp, #0x28
   ad58c:	52800001 	mov	w1, #0x0                   	// #0
   ad590:	97ffc210 	bl	9ddd0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   ad594:	9100c3e2 	add	x2, sp, #0x30
   ad598:	52800084 	mov	w4, #0x4                   	// #4
   ad59c:	b9003ff3 	str	w19, [sp, #60]
   ad5a0:	52800203 	mov	w3, #0x10                  	// #16
   ad5a4:	9100a3e0 	add	x0, sp, #0x28
   ad5a8:	529001e1 	mov	w1, #0x800f                	// #32783
   ad5ac:	72a00081 	movk	w1, #0x4, lsl #16
   ad5b0:	97ffc268 	bl	9df50 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   ad5b4:	2a0003f3 	mov	w19, w0
   ad5b8:	9100a3e0 	add	x0, sp, #0x28
   ad5bc:	97ffc209 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   ad5c0:	2a1303e0 	mov	w0, w19
   ad5c4:	f9400bf3 	ldr	x19, [sp, #16]
   ad5c8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   ad5cc:	d65f03c0 	ret

00000000000ad5d0 <CBcmFrameBuffer::Initialize()>:
   ad5d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ad5d4:	90000081 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   ad5d8:	910003fd 	mov	x29, sp
   ad5dc:	a90153f3 	stp	x19, x20, [sp, #16]
   ad5e0:	aa0003f3 	mov	x19, x0
   ad5e4:	b942fc20 	ldr	w0, [x1, #764]
   ad5e8:	b9401674 	ldr	w20, [x19, #20]
   ad5ec:	35000040 	cbnz	w0, ad5f4 <CBcmFrameBuffer::Initialize()+0x24>
   ad5f0:	97fffe8c 	bl	ad020 <CBcmFrameBuffer::GetNumDisplays() [clone .part.0]>
   ad5f4:	6b00029f 	cmp	w20, w0
   ad5f8:	52800014 	mov	w20, #0x0                   	// #0
   ad5fc:	540000a3 	b.cc	ad610 <CBcmFrameBuffer::Initialize()+0x40>  // b.lo, b.ul, b.last
   ad600:	2a1403e0 	mov	w0, w20
   ad604:	a94153f3 	ldp	x19, x20, [sp, #16]
   ad608:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ad60c:	d65f03c0 	ret
   ad610:	90000080 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   ad614:	b9401661 	ldr	w1, [x19, #20]
   ad618:	b9405000 	ldr	w0, [x0, #80]
   ad61c:	6b00003f 	cmp	w1, w0
   ad620:	54000060 	b.eq	ad62c <CBcmFrameBuffer::Initialize()+0x5c>  // b.none
   ad624:	aa1303e0 	mov	x0, x19
   ad628:	97fffe62 	bl	acfb0 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>
   ad62c:	52800001 	mov	w1, #0x0                   	// #0
   ad630:	9100a3e0 	add	x0, sp, #0x28
   ad634:	97ffc1e7 	bl	9ddd0 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   ad638:	9100a3e0 	add	x0, sp, #0x28
   ad63c:	52800e02 	mov	w2, #0x70                  	// #112
   ad640:	9100c261 	add	x1, x19, #0x30
   ad644:	97ffc1eb 	bl	9ddf0 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   ad648:	72001c14 	ands	w20, w0, #0xff
   ad64c:	54000460 	b.eq	ad6d8 <CBcmFrameBuffer::Initialize()+0x108>  // b.none
   ad650:	b9403e60 	ldr	w0, [x19, #60]
   ad654:	34000420 	cbz	w0, ad6d8 <CBcmFrameBuffer::Initialize()+0x108>
   ad658:	b9404260 	ldr	w0, [x19, #64]
   ad65c:	340003e0 	cbz	w0, ad6d8 <CBcmFrameBuffer::Initialize()+0x108>
   ad660:	b9405260 	ldr	w0, [x19, #80]
   ad664:	340003a0 	cbz	w0, ad6d8 <CBcmFrameBuffer::Initialize()+0x108>
   ad668:	b9405660 	ldr	w0, [x19, #84]
   ad66c:	34000360 	cbz	w0, ad6d8 <CBcmFrameBuffer::Initialize()+0x108>
   ad670:	b9406660 	ldr	w0, [x19, #100]
   ad674:	34000320 	cbz	w0, ad6d8 <CBcmFrameBuffer::Initialize()+0x108>
   ad678:	b9408a60 	ldr	w0, [x19, #136]
   ad67c:	340002e0 	cbz	w0, ad6d8 <CBcmFrameBuffer::Initialize()+0x108>
   ad680:	b9408e61 	ldr	w1, [x19, #140]
   ad684:	12007400 	and	w0, w0, #0x3fffffff
   ad688:	b9401262 	ldr	w2, [x19, #16]
   ad68c:	29030660 	stp	w0, w1, [x19, #24]
   ad690:	b9409e60 	ldr	w0, [x19, #156]
   ad694:	7100205f 	cmp	w2, #0x8
   ad698:	b9002260 	str	w0, [x19, #32]
   ad69c:	54000149 	b.ls	ad6c4 <CBcmFrameBuffer::Initialize()+0xf4>  // b.plast
   ad6a0:	97ffc6c4 	bl	9f1b0 <CKernelOptions::Get()>
   ad6a4:	b40001c0 	cbz	x0, ad6dc <CBcmFrameBuffer::Initialize()+0x10c>
   ad6a8:	97ffc6a2 	bl	9f130 <CKernelOptions::GetBacklight() const>
   ad6ac:	34000180 	cbz	w0, ad6dc <CBcmFrameBuffer::Initialize()+0x10c>
   ad6b0:	2a0003e1 	mov	w1, w0
   ad6b4:	aa1303e0 	mov	x0, x19
   ad6b8:	97ffffaa 	bl	ad560 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>
   ad6bc:	12001c14 	and	w20, w0, #0xff
   ad6c0:	14000007 	b	ad6dc <CBcmFrameBuffer::Initialize()+0x10c>
   ad6c4:	aa1303e0 	mov	x0, x19
   ad6c8:	97fffe6e 	bl	ad080 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   ad6cc:	72001c1f 	tst	w0, #0xff
   ad6d0:	54fffe81 	b.ne	ad6a0 <CBcmFrameBuffer::Initialize()+0xd0>  // b.any
   ad6d4:	d503201f 	nop
   ad6d8:	52800014 	mov	w20, #0x0                   	// #0
   ad6dc:	9100a3e0 	add	x0, sp, #0x28
   ad6e0:	97ffc1c0 	bl	9dde0 <CBcmPropertyTags::~CBcmPropertyTags()>
   ad6e4:	2a1403e0 	mov	w0, w20
   ad6e8:	a94153f3 	ldp	x19, x20, [sp, #16]
   ad6ec:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ad6f0:	d65f03c0 	ret
   ad6f4:	d503201f 	nop
   ad6f8:	d503201f 	nop
   ad6fc:	d503201f 	nop

00000000000ad700 <CBcmFrameBuffer::SetDisplay()>:
   ad700:	90000081 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   ad704:	b9401402 	ldr	w2, [x0, #20]
   ad708:	b9405021 	ldr	w1, [x1, #80]
   ad70c:	6b01005f 	cmp	w2, w1
   ad710:	54000040 	b.eq	ad718 <CBcmFrameBuffer::SetDisplay()+0x18>  // b.none
   ad714:	17fffe27 	b	acfb0 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>
   ad718:	d65f03c0 	ret
   ad71c:	d503201f 	nop

00000000000ad720 <CBcmFrameBuffer::GetNumDisplays()>:
   ad720:	90000080 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   ad724:	b942fc00 	ldr	w0, [x0, #764]
   ad728:	34000040 	cbz	w0, ad730 <CBcmFrameBuffer::GetNumDisplays()+0x10>
   ad72c:	d65f03c0 	ret
   ad730:	17fffe3c 	b	ad020 <CBcmFrameBuffer::GetNumDisplays() [clone .part.0]>
	...

00000000000ad740 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   ad740:	b9000001 	str	w1, [x0]
   ad744:	39001002 	strb	w2, [x0, #4]
   ad748:	d65f03c0 	ret
   ad74c:	d503201f 	nop

00000000000ad750 <CBcmMailBox::~CBcmMailBox()>:
   ad750:	d65f03c0 	ret
   ad754:	d503201f 	nop
   ad758:	d503201f 	nop
   ad75c:	d503201f 	nop

00000000000ad760 <CBcmMailBox::WriteRead(unsigned int)>:
   ad760:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   ad764:	910003fd 	mov	x29, sp
   ad768:	a90153f3 	stp	x19, x20, [sp, #16]
   ad76c:	aa0003f4 	mov	x20, x0
   ad770:	39401000 	ldrb	w0, [x0, #4]
   ad774:	a9025bf5 	stp	x21, x22, [sp, #32]
   ad778:	2a0103f6 	mov	w22, w1
   ad77c:	35000080 	cbnz	w0, ad78c <CBcmMailBox::WriteRead(unsigned int)+0x2c>
   ad780:	90000080 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   ad784:	b9430000 	ldr	w0, [x0, #768]
   ad788:	350005c0 	cbnz	w0, ad840 <CBcmMailBox::WriteRead(unsigned int)+0xe0>
   ad78c:	d2971313 	mov	x19, #0xb898                	// #47256
   ad790:	f2bfc013 	movk	x19, #0xfe00, lsl #16
   ad794:	b9400260 	ldr	w0, [x19]
   ad798:	37f00120 	tbnz	w0, #30, ad7bc <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   ad79c:	d2971015 	mov	x21, #0xb880                	// #47232
   ad7a0:	f2bfc015 	movk	x21, #0xfe00, lsl #16
   ad7a4:	d503201f 	nop
   ad7a8:	b94002a2 	ldr	w2, [x21]
   ad7ac:	52800280 	mov	w0, #0x14                  	// #20
   ad7b0:	97ffe5f4 	bl	a6f80 <CTimer::SimpleMsDelay(unsigned int)>
   ad7b4:	b9400262 	ldr	w2, [x19]
   ad7b8:	36f7ff82 	tbz	w2, #30, ad7a8 <CBcmMailBox::WriteRead(unsigned int)+0x48>
   ad7bc:	d2971703 	mov	x3, #0xb8b8                	// #47288
   ad7c0:	f2bfc003 	movk	x3, #0xfe00, lsl #16
   ad7c4:	d503201f 	nop
   ad7c8:	b9400062 	ldr	w2, [x3]
   ad7cc:	37ffffe2 	tbnz	w2, #31, ad7c8 <CBcmMailBox::WriteRead(unsigned int)+0x68>
   ad7d0:	f2400edf 	tst	x22, #0xf
   ad7d4:	54000481 	b.ne	ad864 <CBcmMailBox::WriteRead(unsigned int)+0x104>  // b.any
   ad7d8:	b9400283 	ldr	w3, [x20]
   ad7dc:	d2971401 	mov	x1, #0xb8a0                	// #47264
   ad7e0:	f2bfc001 	movk	x1, #0xfe00, lsl #16
   ad7e4:	d2971302 	mov	x2, #0xb898                	// #47256
   ad7e8:	f2bfc002 	movk	x2, #0xfe00, lsl #16
   ad7ec:	d2971000 	mov	x0, #0xb880                	// #47232
   ad7f0:	f2bfc000 	movk	x0, #0xfe00, lsl #16
   ad7f4:	2a0302d6 	orr	w22, w22, w3
   ad7f8:	b9000036 	str	w22, [x1]
   ad7fc:	b9400284 	ldr	w4, [x20]
   ad800:	b9400041 	ldr	w1, [x2]
   ad804:	37f7ffe1 	tbnz	w1, #30, ad800 <CBcmMailBox::WriteRead(unsigned int)+0xa0>
   ad808:	b9400001 	ldr	w1, [x0]
   ad80c:	12000c23 	and	w3, w1, #0xf
   ad810:	6b04007f 	cmp	w3, w4
   ad814:	54ffff61 	b.ne	ad800 <CBcmMailBox::WriteRead(unsigned int)+0xa0>  // b.any
   ad818:	39401282 	ldrb	w2, [x20, #4]
   ad81c:	121c6c20 	and	w0, w1, #0xfffffff0
   ad820:	35000082 	cbnz	w2, ad830 <CBcmMailBox::WriteRead(unsigned int)+0xd0>
   ad824:	90000081 	adrp	x1, bd000 <CNetDevice::s_SpeedString+0x18>
   ad828:	b9430021 	ldr	w1, [x1, #768]
   ad82c:	350000e1 	cbnz	w1, ad848 <CBcmMailBox::WriteRead(unsigned int)+0xe8>
   ad830:	a94153f3 	ldp	x19, x20, [sp, #16]
   ad834:	a9425bf5 	ldp	x21, x22, [sp, #32]
   ad838:	a8c47bfd 	ldp	x29, x30, [sp], #64
   ad83c:	d65f03c0 	ret
   ad840:	97ffee40 	bl	a9140 <EnterCritical>
   ad844:	17ffffd2 	b	ad78c <CBcmMailBox::WriteRead(unsigned int)+0x2c>
   ad848:	b9003fe0 	str	w0, [sp, #60]
   ad84c:	97ffee6d 	bl	a9200 <LeaveCritical>
   ad850:	b9403fe0 	ldr	w0, [sp, #60]
   ad854:	a94153f3 	ldp	x19, x20, [sp, #16]
   ad858:	a9425bf5 	ldp	x21, x22, [sp, #32]
   ad85c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   ad860:	d65f03c0 	ret
   ad864:	90000041 	adrp	x1, b5000 <_etext+0x4158>
   ad868:	90000040 	adrp	x0, b5000 <_etext+0x4158>
   ad86c:	912fe021 	add	x1, x1, #0xbf8
   ad870:	91302000 	add	x0, x0, #0xc08
   ad874:	52800c42 	mov	w2, #0x62                  	// #98
   ad878:	97ffc132 	bl	9dd40 <assertion_failed>
   ad87c:	d503201f 	nop

00000000000ad880 <CBcmMailBox::Flush()>:
   ad880:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   ad884:	910003fd 	mov	x29, sp
   ad888:	a90153f3 	stp	x19, x20, [sp, #16]
   ad88c:	d2971313 	mov	x19, #0xb898                	// #47256
   ad890:	f2bfc013 	movk	x19, #0xfe00, lsl #16
   ad894:	b9400260 	ldr	w0, [x19]
   ad898:	37f00120 	tbnz	w0, #30, ad8bc <CBcmMailBox::Flush()+0x3c>
   ad89c:	d2971014 	mov	x20, #0xb880                	// #47232
   ad8a0:	f2bfc014 	movk	x20, #0xfe00, lsl #16
   ad8a4:	d503201f 	nop
   ad8a8:	b9400281 	ldr	w1, [x20]
   ad8ac:	52800280 	mov	w0, #0x14                  	// #20
   ad8b0:	97ffe5b4 	bl	a6f80 <CTimer::SimpleMsDelay(unsigned int)>
   ad8b4:	b9400260 	ldr	w0, [x19]
   ad8b8:	36f7ff80 	tbz	w0, #30, ad8a8 <CBcmMailBox::Flush()+0x28>
   ad8bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   ad8c0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   ad8c4:	d65f03c0 	ret
   ad8c8:	d503201f 	nop
   ad8cc:	d503201f 	nop

00000000000ad8d0 <CBcmMailBox::Read()>:
   ad8d0:	b9400004 	ldr	w4, [x0]
   ad8d4:	d2971301 	mov	x1, #0xb898                	// #47256
   ad8d8:	f2bfc001 	movk	x1, #0xfe00, lsl #16
   ad8dc:	d2971003 	mov	x3, #0xb880                	// #47232
   ad8e0:	f2bfc003 	movk	x3, #0xfe00, lsl #16
   ad8e4:	d503201f 	nop
   ad8e8:	b9400020 	ldr	w0, [x1]
   ad8ec:	37f7ffe0 	tbnz	w0, #30, ad8e8 <CBcmMailBox::Read()+0x18>
   ad8f0:	b9400060 	ldr	w0, [x3]
   ad8f4:	12000c02 	and	w2, w0, #0xf
   ad8f8:	6b04005f 	cmp	w2, w4
   ad8fc:	54ffff61 	b.ne	ad8e8 <CBcmMailBox::Read()+0x18>  // b.any
   ad900:	121c6c00 	and	w0, w0, #0xfffffff0
   ad904:	d65f03c0 	ret
   ad908:	d503201f 	nop
   ad90c:	d503201f 	nop

00000000000ad910 <CBcmMailBox::Write(unsigned int)>:
   ad910:	d2971703 	mov	x3, #0xb8b8                	// #47288
   ad914:	f2bfc003 	movk	x3, #0xfe00, lsl #16
   ad918:	b9400062 	ldr	w2, [x3]
   ad91c:	37ffffe2 	tbnz	w2, #31, ad918 <CBcmMailBox::Write(unsigned int)+0x8>
   ad920:	f2400c3f 	tst	x1, #0xf
   ad924:	540000e1 	b.ne	ad940 <CBcmMailBox::Write(unsigned int)+0x30>  // b.any
   ad928:	b9400002 	ldr	w2, [x0]
   ad92c:	d2971400 	mov	x0, #0xb8a0                	// #47264
   ad930:	f2bfc000 	movk	x0, #0xfe00, lsl #16
   ad934:	2a020021 	orr	w1, w1, w2
   ad938:	b9000001 	str	w1, [x0]
   ad93c:	d65f03c0 	ret
   ad940:	90000041 	adrp	x1, b5000 <_etext+0x4158>
   ad944:	90000040 	adrp	x0, b5000 <_etext+0x4158>
   ad948:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ad94c:	912fe021 	add	x1, x1, #0xbf8
   ad950:	910003fd 	mov	x29, sp
   ad954:	91302000 	add	x0, x0, #0xc08
   ad958:	52800c42 	mov	w2, #0x62                  	// #98
   ad95c:	97ffc0f9 	bl	9dd40 <assertion_failed>

00000000000ad960 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   ad960:	90000080 	adrp	x0, bd000 <CNetDevice::s_SpeedString+0x18>
   ad964:	b903001f 	str	wzr, [x0, #768]
   ad968:	d65f03c0 	ret
   ad96c:	00000000 	udf	#0

00000000000ad970 <CCharGenerator::CCharGenerator()>:
   ad970:	52800101 	mov	w1, #0x8                   	// #8
   ad974:	b9000001 	str	w1, [x0]
   ad978:	d65f03c0 	ret
   ad97c:	d503201f 	nop

00000000000ad980 <CCharGenerator::~CCharGenerator()>:
   ad980:	d65f03c0 	ret
   ad984:	d503201f 	nop
   ad988:	d503201f 	nop
   ad98c:	d503201f 	nop

00000000000ad990 <CCharGenerator::GetCharWidth() const>:
   ad990:	b9400000 	ldr	w0, [x0]
   ad994:	d65f03c0 	ret
   ad998:	d503201f 	nop
   ad99c:	d503201f 	nop

00000000000ad9a0 <CCharGenerator::GetCharHeight() const>:
   ad9a0:	52800260 	mov	w0, #0x13                  	// #19
   ad9a4:	d65f03c0 	ret
   ad9a8:	d503201f 	nop
   ad9ac:	d503201f 	nop

00000000000ad9b0 <CCharGenerator::GetUnderline() const>:
   ad9b0:	52800200 	mov	w0, #0x10                  	// #16
   ad9b4:	d65f03c0 	ret
   ad9b8:	d503201f 	nop
   ad9bc:	d503201f 	nop

00000000000ad9c0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   ad9c0:	12001c21 	and	w1, w1, #0xff
   ad9c4:	51008421 	sub	w1, w1, #0x21
   ad9c8:	7103783f 	cmp	w1, #0xde
   ad9cc:	54000228 	b.hi	ada10 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>  // b.pmore
   ad9d0:	b9400000 	ldr	w0, [x0]
   ad9d4:	6b02001f 	cmp	w0, w2
   ad9d8:	54000209 	b.ls	ada18 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x58>  // b.plast
   ad9dc:	71003c7f 	cmp	w3, #0xf
   ad9e0:	52800000 	mov	w0, #0x0                   	// #0
   ad9e4:	54000188 	b.hi	ada14 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>  // b.pmore
   ad9e8:	d37c7c21 	ubfiz	x1, x1, #4, #32
   ad9ec:	d0000060 	adrp	x0, bb000 <FromPCIeHost+0x50>
   ad9f0:	91196000 	add	x0, x0, #0x658
   ad9f4:	52801004 	mov	w4, #0x80                  	// #128
   ad9f8:	8b010000 	add	x0, x0, x1
   ad9fc:	1ac22881 	asr	w1, w4, w2
   ada00:	38634800 	ldrb	w0, [x0, w3, uxtw]
   ada04:	6a01001f 	tst	w0, w1
   ada08:	1a9f07e0 	cset	w0, ne	// ne = any
   ada0c:	d65f03c0 	ret
   ada10:	52800000 	mov	w0, #0x0                   	// #0
   ada14:	d65f03c0 	ret
   ada18:	90000041 	adrp	x1, b5000 <_etext+0x4158>
   ada1c:	90000040 	adrp	x0, b5000 <_etext+0x4158>
   ada20:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   ada24:	91308021 	add	x1, x1, #0xc20
   ada28:	910003fd 	mov	x29, sp
   ada2c:	9130e000 	add	x0, x0, #0xc38
   ada30:	528009c2 	mov	w2, #0x4e                  	// #78
   ada34:	97ffc0c3 	bl	9dd40 <assertion_failed>
	...

00000000000ada40 <DelayLoop>:
   ada40:	2a0103e1 	mov	w1, w1
   ada44:	2a0203e2 	mov	w2, w2
   ada48:	71000400 	subs	w0, w0, #0x1
   ada4c:	54ffffa1 	b.ne	ada40 <DelayLoop>  // b.any
   ada50:	d65f03c0 	ret
	...

00000000000ada60 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>:
   ada60:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ada64:	910003fd 	mov	x29, sp
   ada68:	a90153f3 	stp	x19, x20, [sp, #16]
   ada6c:	aa0003f3 	mov	x19, x0
   ada70:	2a0103f4 	mov	w20, w1
   ada74:	f90013f5 	str	x21, [sp, #32]
   ada78:	aa0203f5 	mov	x21, x2
   ada7c:	97ffcd69 	bl	a1020 <CMachineInfo::Get()>
   ada80:	2a1403e1 	mov	w1, w20
   ada84:	97ffcb2f 	bl	a0740 <CMachineInfo::AllocateDMAChannel(unsigned int)>
   ada88:	71020e9f 	cmp	w20, #0x83
   ada8c:	51002e94 	sub	w20, w20, #0xb
   ada90:	b9000260 	str	w0, [x19]
   ada94:	7a431a80 	ccmp	w20, #0x3, #0x0, ne	// ne = any
   ada98:	b9002a7f 	str	wzr, [x19, #40]
   ada9c:	f9002a75 	str	x21, [x19, #80]
   adaa0:	3901627f 	strb	wzr, [x19, #88]
   adaa4:	a9067e7f 	stp	xzr, xzr, [x19, #96]
   adaa8:	3901c27f 	strb	wzr, [x19, #112]
   adaac:	f900467f 	str	xzr, [x19, #136]
   adab0:	540001c8 	b.hi	adae8 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x88>  // b.pmore
   adab4:	7102001f 	cmp	w0, #0x80
   adab8:	540006c0 	b.eq	adb90 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x130>  // b.none
   adabc:	d2801100 	mov	x0, #0x88                  	// #136
   adac0:	97ffe9e8 	bl	a8260 <operator new(unsigned long)>
   adac4:	aa0003f4 	mov	x20, x0
   adac8:	b9400261 	ldr	w1, [x19]
   adacc:	f9402a62 	ldr	x2, [x19, #80]
   adad0:	940007c4 	bl	af9e0 <CDMA4Channel::CDMA4Channel(unsigned int, CInterruptSystem*)>
   adad4:	f9004674 	str	x20, [x19, #136]
   adad8:	a94153f3 	ldp	x19, x20, [sp, #16]
   adadc:	f94013f5 	ldr	x21, [sp, #32]
   adae0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   adae4:	d65f03c0 	ret
   adae8:	7102001f 	cmp	w0, #0x80
   adaec:	540005c0 	b.eq	adba4 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x144>  // b.none
   adaf0:	71001c1f 	cmp	w0, #0x7
   adaf4:	d2800034 	mov	x20, #0x1                   	// #1
   adaf8:	54000608 	b.hi	adbb8 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x158>  // b.pmore
   adafc:	52800001 	mov	w1, #0x0                   	// #0
   adb00:	d2800400 	mov	x0, #0x20                  	// #32
   adb04:	97ffe97f 	bl	a8100 <operator new(unsigned long, int)>
   adb08:	f8347a60 	str	x0, [x19, x20, lsl #3]
   adb0c:	91000694 	add	x20, x20, #0x1
   adb10:	f100169f 	cmp	x20, #0x5
   adb14:	3900601f 	strb	wzr, [x0, #24]
   adb18:	3900641f 	strb	wzr, [x0, #25]
   adb1c:	3900681f 	strb	wzr, [x0, #26]
   adb20:	39006c1f 	strb	wzr, [x0, #27]
   adb24:	3900701f 	strb	wzr, [x0, #28]
   adb28:	3900741f 	strb	wzr, [x0, #29]
   adb2c:	3900781f 	strb	wzr, [x0, #30]
   adb30:	39007c1f 	strb	wzr, [x0, #31]
   adb34:	54fffe41 	b.ne	adafc <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x9c>  // b.any
   adb38:	b9400264 	ldr	w4, [x19]
   adb3c:	d28ffe02 	mov	x2, #0x7ff0                	// #32752
   adb40:	f2bfc002 	movk	x2, #0xfe00, lsl #16
   adb44:	52800021 	mov	w1, #0x1                   	// #1
   adb48:	52807d00 	mov	w0, #0x3e8                 	// #1000
   adb4c:	b9400043 	ldr	w3, [x2]
   adb50:	1ac42021 	lsl	w1, w1, w4
   adb54:	2a030021 	orr	w1, w1, w3
   adb58:	b9000041 	str	w1, [x2]
   adb5c:	97ffe521 	bl	a6fe0 <CTimer::SimpleusDelay(unsigned int)>
   adb60:	b9400261 	ldr	w1, [x19]
   adb64:	52b00000 	mov	w0, #0x80000000            	// #-2147483648
   adb68:	117f8021 	add	w1, w1, #0xfe0, lsl #12
   adb6c:	1101c021 	add	w1, w1, #0x70
   adb70:	53185c21 	lsl	w1, w1, #8
   adb74:	b9000020 	str	w0, [x1]
   adb78:	b9400020 	ldr	w0, [x1]
   adb7c:	37ffffe0 	tbnz	w0, #31, adb78 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x118>
   adb80:	a94153f3 	ldp	x19, x20, [sp, #16]
   adb84:	f94013f5 	ldr	x21, [sp, #32]
   adb88:	a8c37bfd 	ldp	x29, x30, [sp], #48
   adb8c:	d65f03c0 	ret
   adb90:	f0000061 	adrp	x1, bc000 <font_data+0x9a8>
   adb94:	91112021 	add	x1, x1, #0x448
   adb98:	91004020 	add	x0, x1, #0x10
   adb9c:	528005c2 	mov	w2, #0x2e                  	// #46
   adba0:	97ffc068 	bl	9dd40 <assertion_failed>
   adba4:	f0000061 	adrp	x1, bc000 <font_data+0x9a8>
   adba8:	91112021 	add	x1, x1, #0x448
   adbac:	91004020 	add	x0, x1, #0x10
   adbb0:	52800702 	mov	w2, #0x38                  	// #56
   adbb4:	97ffc063 	bl	9dd40 <assertion_failed>
   adbb8:	f0000061 	adrp	x1, bc000 <font_data+0x9a8>
   adbbc:	91112021 	add	x1, x1, #0x448
   adbc0:	9100c020 	add	x0, x1, #0x30
   adbc4:	52800722 	mov	w2, #0x39                  	// #57
   adbc8:	97ffc05e 	bl	9dd40 <assertion_failed>
   adbcc:	d503201f 	nop

00000000000adbd0 <CDMAChannel::~CDMAChannel()>:
   adbd0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   adbd4:	910003fd 	mov	x29, sp
   adbd8:	a90153f3 	stp	x19, x20, [sp, #16]
   adbdc:	aa0003f3 	mov	x19, x0
   adbe0:	f9404414 	ldr	x20, [x0, #136]
   adbe4:	b9400001 	ldr	w1, [x0]
   adbe8:	b40001f4 	cbz	x20, adc24 <CDMAChannel::~CDMAChannel()+0x54>
   adbec:	51002c21 	sub	w1, w1, #0xb
   adbf0:	71000c3f 	cmp	w1, #0x3
   adbf4:	54000768 	b.hi	adce0 <CDMAChannel::~CDMAChannel()+0x110>  // b.pmore
   adbf8:	aa1403e0 	mov	x0, x20
   adbfc:	940007b9 	bl	afae0 <CDMA4Channel::~CDMA4Channel()>
   adc00:	aa1403e0 	mov	x0, x20
   adc04:	d2801101 	mov	x1, #0x88                  	// #136
   adc08:	97ffe9be 	bl	a8300 <operator delete(void*, unsigned long)>
   adc0c:	f900467f 	str	xzr, [x19, #136]
   adc10:	97ffcd04 	bl	a1020 <CMachineInfo::Get()>
   adc14:	b9400261 	ldr	w1, [x19]
   adc18:	a94153f3 	ldp	x19, x20, [sp, #16]
   adc1c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   adc20:	17ffcb0c 	b	a0850 <CMachineInfo::FreeDMAChannel(unsigned int)>
   adc24:	71001c3f 	cmp	w1, #0x7
   adc28:	54000668 	b.hi	adcf4 <CDMAChannel::~CDMAChannel()+0x124>  // b.pmore
   adc2c:	52800e00 	mov	w0, #0x70                  	// #112
   adc30:	72a01fc0 	movk	w0, #0xfe, lsl #16
   adc34:	0b000021 	add	w1, w1, w0
   adc38:	52b00002 	mov	w2, #0x80000000            	// #-2147483648
   adc3c:	53185c21 	lsl	w1, w1, #8
   adc40:	b9000022 	str	w2, [x1]
   adc44:	b9400263 	ldr	w3, [x19]
   adc48:	0b000061 	add	w1, w3, w0
   adc4c:	53185c21 	lsl	w1, w1, #8
   adc50:	b9400020 	ldr	w0, [x1]
   adc54:	37ffffe0 	tbnz	w0, #31, adc50 <CDMAChannel::~CDMAChannel()+0x80>
   adc58:	d28ffe02 	mov	x2, #0x7ff0                	// #32752
   adc5c:	f2bfc002 	movk	x2, #0xfe00, lsl #16
   adc60:	f9402a60 	ldr	x0, [x19, #80]
   adc64:	52800021 	mov	w1, #0x1                   	// #1
   adc68:	1ac32021 	lsl	w1, w1, w3
   adc6c:	b9400043 	ldr	w3, [x2]
   adc70:	0a210061 	bic	w1, w3, w1
   adc74:	b9000041 	str	w1, [x2]
   adc78:	f900327f 	str	xzr, [x19, #96]
   adc7c:	b4000080 	cbz	x0, adc8c <CDMAChannel::~CDMAChannel()+0xbc>
   adc80:	39416261 	ldrb	w1, [x19, #88]
   adc84:	35000221 	cbnz	w1, adcc8 <CDMAChannel::~CDMAChannel()+0xf8>
   adc88:	f9002a7f 	str	xzr, [x19, #80]
   adc8c:	97ffcce5 	bl	a1020 <CMachineInfo::Get()>
   adc90:	b9400261 	ldr	w1, [x19]
   adc94:	d2800034 	mov	x20, #0x1                   	// #1
   adc98:	97ffcaee 	bl	a0850 <CMachineInfo::FreeDMAChannel(unsigned int)>
   adc9c:	f8747a60 	ldr	x0, [x19, x20, lsl #3]
   adca0:	b4000060 	cbz	x0, adcac <CDMAChannel::~CDMAChannel()+0xdc>
   adca4:	d2800401 	mov	x1, #0x20                  	// #32
   adca8:	97ffe996 	bl	a8300 <operator delete(void*, unsigned long)>
   adcac:	f8347a7f 	str	xzr, [x19, x20, lsl #3]
   adcb0:	91000694 	add	x20, x20, #0x1
   adcb4:	f100169f 	cmp	x20, #0x5
   adcb8:	54ffff21 	b.ne	adc9c <CDMAChannel::~CDMAChannel()+0xcc>  // b.any
   adcbc:	a94153f3 	ldp	x19, x20, [sp, #16]
   adcc0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   adcc4:	d65f03c0 	ret
   adcc8:	b9400261 	ldr	w1, [x19]
   adccc:	7100303f 	cmp	w1, #0xc
   adcd0:	540001c8 	b.hi	add08 <CDMAChannel::~CDMAChannel()+0x138>  // b.pmore
   adcd4:	1101c021 	add	w1, w1, #0x70
   adcd8:	97fff43a 	bl	aadc0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   adcdc:	17ffffeb 	b	adc88 <CDMAChannel::~CDMAChannel()+0xb8>
   adce0:	f0000061 	adrp	x1, bc000 <font_data+0x9a8>
   adce4:	91112021 	add	x1, x1, #0x448
   adce8:	91014020 	add	x0, x1, #0x50
   adcec:	52800ac2 	mov	w2, #0x56                  	// #86
   adcf0:	97ffc014 	bl	9dd40 <assertion_failed>
   adcf4:	f0000061 	adrp	x1, bc000 <font_data+0x9a8>
   adcf8:	91112021 	add	x1, x1, #0x448
   adcfc:	9100c020 	add	x0, x1, #0x30
   add00:	52800c62 	mov	w2, #0x63                  	// #99
   add04:	97ffc00f 	bl	9dd40 <assertion_failed>
   add08:	f0000061 	adrp	x1, bc000 <font_data+0x9a8>
   add0c:	91112021 	add	x1, x1, #0x448
   add10:	91026020 	add	x0, x1, #0x98
   add14:	52800ea2 	mov	w2, #0x75                  	// #117
   add18:	97ffc00a 	bl	9dd40 <assertion_failed>
   add1c:	d503201f 	nop

00000000000add20 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)>:
   add20:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   add24:	910003fd 	mov	x29, sp
   add28:	12001ca5 	and	w5, w5, #0xff
   add2c:	a90153f3 	stp	x19, x20, [sp, #16]
   add30:	aa0003f4 	mov	x20, x0
   add34:	f9404400 	ldr	x0, [x0, #136]
   add38:	b5000920 	cbnz	x0, ade5c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x13c>
   add3c:	f90013f5 	str	x21, [sp, #32]
   add40:	aa0103f5 	mov	x21, x1
   add44:	b4000b61 	cbz	x1, adeb0 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x190>
   add48:	aa0203e8 	mov	x8, x2
   add4c:	b4000bc2 	cbz	x2, adec4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x1a4>
   add50:	aa0303f3 	mov	x19, x3
   add54:	b40008a3 	cbz	x3, ade68 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x148>
   add58:	71003c9f 	cmp	w4, #0xf
   add5c:	54000be8 	b.hi	aded8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x1b8>  // b.pmore
   add60:	f9400686 	ldr	x6, [x20, #8]
   add64:	b4000c46 	cbz	x6, adeec <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x1cc>
   add68:	b24077e0 	mov	x0, #0x3fffffff            	// #1073741823
   add6c:	eb00007f 	cmp	x3, x0
   add70:	54000c88 	b.hi	adf00 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x1e0>  // b.pmore
   add74:	b9400282 	ldr	w2, [x20]
   add78:	d29fffe0 	mov	x0, #0xffff                	// #65535
   add7c:	117f8042 	add	w2, w2, #0xfe0, lsl #12
   add80:	1101c042 	add	w2, w2, #0x70
   add84:	53185c42 	lsl	w2, w2, #8
   add88:	11008042 	add	w2, w2, #0x20
   add8c:	b9400041 	ldr	w1, [x2]
   add90:	f264003f 	tst	x1, #0x10000000
   add94:	fa401060 	ccmp	x3, x0, #0x0, ne	// ne = any
   add98:	54000be8 	b.hi	adf14 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x1f4>  // b.pmore
   add9c:	52806603 	mov	w3, #0x330                 	// #816
   adda0:	32020501 	orr	w1, w8, #0xc0000000
   adda4:	390010c8 	strb	w8, [x6, #4]
   adda8:	2a043064 	orr	w4, w3, w4, lsl #12
   addac:	53187c21 	lsr	w1, w1, #24
   addb0:	53083d02 	ubfx	w2, w8, #8, #8
   addb4:	390000c3 	strb	w3, [x6]
   addb8:	320206a0 	orr	w0, w21, #0xc0000000
   addbc:	53105d0a 	ubfx	w10, w8, #16, #8
   addc0:	53087c83 	lsr	w3, w4, #8
   addc4:	d3505c8b 	ubfx	x11, x4, #16, #8
   addc8:	390014c2 	strb	w2, [x6, #5]
   addcc:	53187c00 	lsr	w0, w0, #24
   addd0:	53187c84 	lsr	w4, w4, #24
   addd4:	39001cc1 	strb	w1, [x6, #7]
   addd8:	53083ea9 	ubfx	w9, w21, #8, #8
   adddc:	53105ea7 	ubfx	w7, w21, #16, #8
   adde0:	390004c3 	strb	w3, [x6, #1]
   adde4:	53105e62 	ubfx	w2, w19, #16, #8
   adde8:	53083e63 	ubfx	w3, w19, #8, #8
   addec:	390008cb 	strb	w11, [x6, #2]
   addf0:	53187e61 	lsr	w1, w19, #24
   addf4:	39000cc4 	strb	w4, [x6, #3]
   addf8:	390018ca 	strb	w10, [x6, #6]
   addfc:	390020d5 	strb	w21, [x6, #8]
   ade00:	390024c9 	strb	w9, [x6, #9]
   ade04:	390028c7 	strb	w7, [x6, #10]
   ade08:	39002cc0 	strb	w0, [x6, #11]
   ade0c:	390030d3 	strb	w19, [x6, #12]
   ade10:	390034c3 	strb	w3, [x6, #13]
   ade14:	390038c2 	strb	w2, [x6, #14]
   ade18:	39003cc1 	strb	w1, [x6, #15]
   ade1c:	390040df 	strb	wzr, [x6, #16]
   ade20:	390044df 	strb	wzr, [x6, #17]
   ade24:	390048df 	strb	wzr, [x6, #18]
   ade28:	39004cdf 	strb	wzr, [x6, #19]
   ade2c:	390050df 	strb	wzr, [x6, #20]
   ade30:	390054df 	strb	wzr, [x6, #21]
   ade34:	390058df 	strb	wzr, [x6, #22]
   ade38:	39005cdf 	strb	wzr, [x6, #23]
   ade3c:	35000205 	cbnz	w5, ade7c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x15c>
   ade40:	52800020 	mov	w0, #0x1                   	// #1
   ade44:	f9003e9f 	str	xzr, [x20, #120]
   ade48:	f94013f5 	ldr	x21, [sp, #32]
   ade4c:	b9002a80 	str	w0, [x20, #40]
   ade50:	a94153f3 	ldp	x19, x20, [sp, #16]
   ade54:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ade58:	d65f03c0 	ret
   ade5c:	a94153f3 	ldp	x19, x20, [sp, #16]
   ade60:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ade64:	1400075f 	b	afbe0 <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)>
   ade68:	f0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ade6c:	91112021 	add	x1, x1, #0x448
   ade70:	91036020 	add	x0, x1, #0xd8
   ade74:	52801262 	mov	w2, #0x93                  	// #147
   ade78:	97ffbfb2 	bl	9dd40 <assertion_failed>
   ade7c:	aa0803e0 	mov	x0, x8
   ade80:	aa1303e1 	mov	x1, x19
   ade84:	a907ce95 	stp	x21, x19, [x20, #120]
   ade88:	97ffedc2 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   ade8c:	aa1303e1 	mov	x1, x19
   ade90:	aa1503e0 	mov	x0, x21
   ade94:	97ffedbf 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   ade98:	52800020 	mov	w0, #0x1                   	// #1
   ade9c:	f94013f5 	ldr	x21, [sp, #32]
   adea0:	b9002a80 	str	w0, [x20, #40]
   adea4:	a94153f3 	ldp	x19, x20, [sp, #16]
   adea8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   adeac:	d65f03c0 	ret
   adeb0:	f0000061 	adrp	x1, bc000 <font_data+0x9a8>
   adeb4:	91112021 	add	x1, x1, #0x448
   adeb8:	9102c020 	add	x0, x1, #0xb0
   adebc:	52801222 	mov	w2, #0x91                  	// #145
   adec0:	97ffbfa0 	bl	9dd40 <assertion_failed>
   adec4:	f0000061 	adrp	x1, bc000 <font_data+0x9a8>
   adec8:	91112021 	add	x1, x1, #0x448
   adecc:	91032020 	add	x0, x1, #0xc8
   aded0:	52801242 	mov	w2, #0x92                  	// #146
   aded4:	97ffbf9b 	bl	9dd40 <assertion_failed>
   aded8:	f0000061 	adrp	x1, bc000 <font_data+0x9a8>
   adedc:	91112021 	add	x1, x1, #0x448
   adee0:	9103a020 	add	x0, x1, #0xe8
   adee4:	52801282 	mov	w2, #0x94                  	// #148
   adee8:	97ffbf96 	bl	9dd40 <assertion_failed>
   adeec:	f0000061 	adrp	x1, bc000 <font_data+0x9a8>
   adef0:	91112021 	add	x1, x1, #0x448
   adef4:	91040020 	add	x0, x1, #0x100
   adef8:	528012c2 	mov	w2, #0x96                  	// #150
   adefc:	97ffbf91 	bl	9dd40 <assertion_failed>
   adf00:	f0000061 	adrp	x1, bc000 <font_data+0x9a8>
   adf04:	91112021 	add	x1, x1, #0x448
   adf08:	91046020 	add	x0, x1, #0x118
   adf0c:	528012e2 	mov	w2, #0x97                  	// #151
   adf10:	97ffbf8c 	bl	9dd40 <assertion_failed>
   adf14:	f0000061 	adrp	x1, bc000 <font_data+0x9a8>
   adf18:	91112021 	add	x1, x1, #0x448
   adf1c:	9104c020 	add	x0, x1, #0x130
   adf20:	52801302 	mov	w2, #0x98                  	// #152
   adf24:	97ffbf87 	bl	9dd40 <assertion_failed>
   adf28:	d503201f 	nop
   adf2c:	d503201f 	nop

00000000000adf30 <CDMAChannel::SetupIORead(void*, unsigned long, unsigned long, TDREQ)>:
   adf30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   adf34:	910003fd 	mov	x29, sp
   adf38:	f9000bf3 	str	x19, [sp, #16]
   adf3c:	aa0003f3 	mov	x19, x0
   adf40:	f9404400 	ldr	x0, [x0, #136]
   adf44:	b5000900 	cbnz	x0, ae064 <CDMAChannel::SetupIORead(void*, unsigned long, unsigned long, TDREQ)+0x134>
   adf48:	aa0103e8 	mov	x8, x1
   adf4c:	b40009c1 	cbz	x1, ae084 <CDMAChannel::SetupIORead(void*, unsigned long, unsigned long, TDREQ)+0x154>
   adf50:	aa0303e6 	mov	x6, x3
   adf54:	b4000a23 	cbz	x3, ae098 <CDMAChannel::SetupIORead(void*, unsigned long, unsigned long, TDREQ)+0x168>
   adf58:	b24077e0 	mov	x0, #0x3fffffff            	// #1073741823
   adf5c:	eb00007f 	cmp	x3, x0
   adf60:	54000888 	b.hi	ae070 <CDMAChannel::SetupIORead(void*, unsigned long, unsigned long, TDREQ)+0x140>  // b.pmore
   adf64:	aa0203e5 	mov	x5, x2
   adf68:	b9400262 	ldr	w2, [x19]
   adf6c:	d29fffe0 	mov	x0, #0xffff                	// #65535
   adf70:	117f8042 	add	w2, w2, #0xfe0, lsl #12
   adf74:	1101c042 	add	w2, w2, #0x70
   adf78:	53185c42 	lsl	w2, w2, #8
   adf7c:	11008042 	add	w2, w2, #0x20
   adf80:	b9400041 	ldr	w1, [x2]
   adf84:	f264003f 	tst	x1, #0x10000000
   adf88:	fa401060 	ccmp	x3, x0, #0x0, ne	// ne = any
   adf8c:	54000a48 	b.hi	ae0d4 <CDMAChannel::SetupIORead(void*, unsigned long, unsigned long, TDREQ)+0x1a4>  // b.pmore
   adf90:	f2405ca2 	ands	x2, x5, #0xffffff
   adf94:	540008c0 	b.eq	ae0ac <CDMAChannel::SetupIORead(void*, unsigned long, unsigned long, TDREQ)+0x17c>  // b.none
   adf98:	d2afc000 	mov	x0, #0x7e000000            	// #2113929216
   adf9c:	f9400665 	ldr	x5, [x19, #8]
   adfa0:	8b000042 	add	x2, x2, x0
   adfa4:	b40008e5 	cbz	x5, ae0c0 <CDMAChannel::SetupIORead(void*, unsigned long, unsigned long, TDREQ)+0x190>
   adfa8:	52808700 	mov	w0, #0x438                 	// #1080
   adfac:	2a0403e7 	mov	w7, w4
   adfb0:	390008a4 	strb	w4, [x5, #2]
   adfb4:	d3483ce4 	ubfx	x4, x7, #8, #8
   adfb8:	53087c07 	lsr	w7, w0, #8
   adfbc:	390010a2 	strb	w2, [x5, #4]
   adfc0:	32020503 	orr	w3, w8, #0xc0000000
   adfc4:	53083c41 	ubfx	w1, w2, #8, #8
   adfc8:	390000a0 	strb	w0, [x5]
   adfcc:	53187c63 	lsr	w3, w3, #24
   adfd0:	53105c40 	ubfx	w0, w2, #16, #8
   adfd4:	390004a7 	strb	w7, [x5, #1]
   adfd8:	53187c42 	lsr	w2, w2, #24
   adfdc:	53083d0b 	ubfx	w11, w8, #8, #8
   adfe0:	39000ca4 	strb	w4, [x5, #3]
   adfe4:	53105d0a 	ubfx	w10, w8, #16, #8
   adfe8:	53083cc9 	ubfx	w9, w6, #8, #8
   adfec:	390014a1 	strb	w1, [x5, #5]
   adff0:	53105cc7 	ubfx	w7, w6, #16, #8
   adff4:	53187cc4 	lsr	w4, w6, #24
   adff8:	390018a0 	strb	w0, [x5, #6]
   adffc:	39001ca2 	strb	w2, [x5, #7]
   ae000:	aa0803e0 	mov	x0, x8
   ae004:	aa0603e1 	mov	x1, x6
   ae008:	390020a8 	strb	w8, [x5, #8]
   ae00c:	390024ab 	strb	w11, [x5, #9]
   ae010:	390028aa 	strb	w10, [x5, #10]
   ae014:	39002ca3 	strb	w3, [x5, #11]
   ae018:	390030a6 	strb	w6, [x5, #12]
   ae01c:	390034a9 	strb	w9, [x5, #13]
   ae020:	390038a7 	strb	w7, [x5, #14]
   ae024:	39003ca4 	strb	w4, [x5, #15]
   ae028:	390040bf 	strb	wzr, [x5, #16]
   ae02c:	390044bf 	strb	wzr, [x5, #17]
   ae030:	390048bf 	strb	wzr, [x5, #18]
   ae034:	39004cbf 	strb	wzr, [x5, #19]
   ae038:	390050bf 	strb	wzr, [x5, #20]
   ae03c:	390054bf 	strb	wzr, [x5, #21]
   ae040:	390058bf 	strb	wzr, [x5, #22]
   ae044:	39005cbf 	strb	wzr, [x5, #23]
   ae048:	a9079a68 	stp	x8, x6, [x19, #120]
   ae04c:	97ffed51 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   ae050:	52800020 	mov	w0, #0x1                   	// #1
   ae054:	b9002a60 	str	w0, [x19, #40]
   ae058:	f9400bf3 	ldr	x19, [sp, #16]
   ae05c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   ae060:	d65f03c0 	ret
   ae064:	f9400bf3 	ldr	x19, [sp, #16]
   ae068:	a8c27bfd 	ldp	x29, x30, [sp], #32
   ae06c:	14000755 	b	afdc0 <CDMA4Channel::SetupIORead(void*, unsigned long, unsigned long, TDREQ)>
   ae070:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae074:	91112021 	add	x1, x1, #0x448
   ae078:	91046020 	add	x0, x1, #0x118
   ae07c:	52801862 	mov	w2, #0xc3                  	// #195
   ae080:	97ffbf30 	bl	9dd40 <assertion_failed>
   ae084:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae088:	91112021 	add	x1, x1, #0x448
   ae08c:	9102c020 	add	x0, x1, #0xb0
   ae090:	52801822 	mov	w2, #0xc1                  	// #193
   ae094:	97ffbf2b 	bl	9dd40 <assertion_failed>
   ae098:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae09c:	91112021 	add	x1, x1, #0x448
   ae0a0:	91036020 	add	x0, x1, #0xd8
   ae0a4:	52801842 	mov	w2, #0xc2                  	// #194
   ae0a8:	97ffbf26 	bl	9dd40 <assertion_failed>
   ae0ac:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae0b0:	91112021 	add	x1, x1, #0x448
   ae0b4:	91062020 	add	x0, x1, #0x188
   ae0b8:	52801902 	mov	w2, #0xc8                  	// #200
   ae0bc:	97ffbf21 	bl	9dd40 <assertion_failed>
   ae0c0:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae0c4:	91112021 	add	x1, x1, #0x448
   ae0c8:	91040020 	add	x0, x1, #0x100
   ae0cc:	52801962 	mov	w2, #0xcb                  	// #203
   ae0d0:	97ffbf1c 	bl	9dd40 <assertion_failed>
   ae0d4:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae0d8:	91112021 	add	x1, x1, #0x448
   ae0dc:	9104c020 	add	x0, x1, #0x130
   ae0e0:	52801882 	mov	w2, #0xc4                  	// #196
   ae0e4:	97ffbf17 	bl	9dd40 <assertion_failed>
   ae0e8:	d503201f 	nop
   ae0ec:	d503201f 	nop

00000000000ae0f0 <CDMAChannel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)>:
   ae0f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   ae0f4:	910003fd 	mov	x29, sp
   ae0f8:	f9000bf3 	str	x19, [sp, #16]
   ae0fc:	aa0003f3 	mov	x19, x0
   ae100:	f9404408 	ldr	x8, [x0, #136]
   ae104:	b5000908 	cbnz	x8, ae224 <CDMAChannel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0x134>
   ae108:	aa0203e0 	mov	x0, x2
   ae10c:	b40009e2 	cbz	x2, ae248 <CDMAChannel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0x158>
   ae110:	aa0303e6 	mov	x6, x3
   ae114:	b4000a43 	cbz	x3, ae25c <CDMAChannel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0x16c>
   ae118:	aa0103e5 	mov	x5, x1
   ae11c:	b24077e1 	mov	x1, #0x3fffffff            	// #1073741823
   ae120:	eb01007f 	cmp	x3, x1
   ae124:	54000888 	b.hi	ae234 <CDMAChannel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0x144>  // b.pmore
   ae128:	b9400261 	ldr	w1, [x19]
   ae12c:	d29fffe2 	mov	x2, #0xffff                	// #65535
   ae130:	117f8021 	add	w1, w1, #0xfe0, lsl #12
   ae134:	1101c021 	add	w1, w1, #0x70
   ae138:	53185c21 	lsl	w1, w1, #8
   ae13c:	11008021 	add	w1, w1, #0x20
   ae140:	b9400021 	ldr	w1, [x1]
   ae144:	f264003f 	tst	x1, #0x10000000
   ae148:	fa421060 	ccmp	x3, x2, #0x0, ne	// ne = any
   ae14c:	54000a68 	b.hi	ae298 <CDMAChannel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0x1a8>  // b.pmore
   ae150:	f2405ca1 	ands	x1, x5, #0xffffff
   ae154:	540008e0 	b.eq	ae270 <CDMAChannel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0x180>  // b.none
   ae158:	d2afc002 	mov	x2, #0x7e000000            	// #2113929216
   ae15c:	f9400665 	ldr	x5, [x19, #8]
   ae160:	8b020021 	add	x1, x1, x2
   ae164:	b4000905 	cbz	x5, ae284 <CDMAChannel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0x194>
   ae168:	52806903 	mov	w3, #0x348                 	// #840
   ae16c:	53083c07 	ubfx	w7, w0, #8, #8
   ae170:	390010a0 	strb	w0, [x5, #4]
   ae174:	2a044064 	orr	w4, w3, w4, lsl #16
   ae178:	32020402 	orr	w2, w0, #0xc0000000
   ae17c:	53105c0b 	ubfx	w11, w0, #16, #8
   ae180:	53083c2a 	ubfx	w10, w1, #8, #8
   ae184:	53105c29 	ubfx	w9, w1, #16, #8
   ae188:	390014a7 	strb	w7, [x5, #5]
   ae18c:	d3482483 	ubfx	x3, x4, #8, #2
   ae190:	d3505c8d 	ubfx	x13, x4, #16, #8
   ae194:	390018ab 	strb	w11, [x5, #6]
   ae198:	53187c8c 	lsr	w12, w4, #24
   ae19c:	53187c42 	lsr	w2, w2, #24
   ae1a0:	390000a4 	strb	w4, [x5]
   ae1a4:	53083cc8 	ubfx	w8, w6, #8, #8
   ae1a8:	53187c24 	lsr	w4, w1, #24
   ae1ac:	390004a3 	strb	w3, [x5, #1]
   ae1b0:	53105cc7 	ubfx	w7, w6, #16, #8
   ae1b4:	53187cc3 	lsr	w3, w6, #24
   ae1b8:	390008ad 	strb	w13, [x5, #2]
   ae1bc:	39000cac 	strb	w12, [x5, #3]
   ae1c0:	39001ca2 	strb	w2, [x5, #7]
   ae1c4:	390020a1 	strb	w1, [x5, #8]
   ae1c8:	aa0603e1 	mov	x1, x6
   ae1cc:	390024aa 	strb	w10, [x5, #9]
   ae1d0:	390028a9 	strb	w9, [x5, #10]
   ae1d4:	39002ca4 	strb	w4, [x5, #11]
   ae1d8:	390030a6 	strb	w6, [x5, #12]
   ae1dc:	390034a8 	strb	w8, [x5, #13]
   ae1e0:	390038a7 	strb	w7, [x5, #14]
   ae1e4:	39003ca3 	strb	w3, [x5, #15]
   ae1e8:	390040bf 	strb	wzr, [x5, #16]
   ae1ec:	390044bf 	strb	wzr, [x5, #17]
   ae1f0:	390048bf 	strb	wzr, [x5, #18]
   ae1f4:	39004cbf 	strb	wzr, [x5, #19]
   ae1f8:	390050bf 	strb	wzr, [x5, #20]
   ae1fc:	390054bf 	strb	wzr, [x5, #21]
   ae200:	390058bf 	strb	wzr, [x5, #22]
   ae204:	39005cbf 	strb	wzr, [x5, #23]
   ae208:	f9003e7f 	str	xzr, [x19, #120]
   ae20c:	97ffece1 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   ae210:	52800020 	mov	w0, #0x1                   	// #1
   ae214:	b9002a60 	str	w0, [x19, #40]
   ae218:	f9400bf3 	ldr	x19, [sp, #16]
   ae21c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   ae220:	d65f03c0 	ret
   ae224:	aa0803e0 	mov	x0, x8
   ae228:	f9400bf3 	ldr	x19, [sp, #16]
   ae22c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   ae230:	14000744 	b	aff40 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)>
   ae234:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae238:	91112021 	add	x1, x1, #0x448
   ae23c:	91046020 	add	x0, x1, #0x118
   ae240:	52801da2 	mov	w2, #0xed                  	// #237
   ae244:	97ffbebf 	bl	9dd40 <assertion_failed>
   ae248:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae24c:	91112021 	add	x1, x1, #0x448
   ae250:	91032020 	add	x0, x1, #0xc8
   ae254:	52801d62 	mov	w2, #0xeb                  	// #235
   ae258:	97ffbeba 	bl	9dd40 <assertion_failed>
   ae25c:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae260:	91112021 	add	x1, x1, #0x448
   ae264:	91036020 	add	x0, x1, #0xd8
   ae268:	52801d82 	mov	w2, #0xec                  	// #236
   ae26c:	97ffbeb5 	bl	9dd40 <assertion_failed>
   ae270:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae274:	91112021 	add	x1, x1, #0x448
   ae278:	91062020 	add	x0, x1, #0x188
   ae27c:	52801e42 	mov	w2, #0xf2                  	// #242
   ae280:	97ffbeb0 	bl	9dd40 <assertion_failed>
   ae284:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae288:	91112021 	add	x1, x1, #0x448
   ae28c:	91040020 	add	x0, x1, #0x100
   ae290:	52801ea2 	mov	w2, #0xf5                  	// #245
   ae294:	97ffbeab 	bl	9dd40 <assertion_failed>
   ae298:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae29c:	91112021 	add	x1, x1, #0x448
   ae2a0:	9104c020 	add	x0, x1, #0x130
   ae2a4:	52801dc2 	mov	w2, #0xee                  	// #238
   ae2a8:	97ffbea6 	bl	9dd40 <assertion_failed>
   ae2ac:	d503201f 	nop

00000000000ae2b0 <CDMAChannel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)>:
   ae2b0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   ae2b4:	910003fd 	mov	x29, sp
   ae2b8:	a9046bf9 	stp	x25, x26, [sp, #64]
   ae2bc:	aa0003f9 	mov	x25, x0
   ae2c0:	f9404400 	ldr	x0, [x0, #136]
   ae2c4:	b5000e60 	cbnz	x0, ae490 <CDMAChannel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)+0x1e0>
   ae2c8:	a90153f3 	stp	x19, x20, [sp, #16]
   ae2cc:	a90363f7 	stp	x23, x24, [sp, #48]
   ae2d0:	aa0203f8 	mov	x24, x2
   ae2d4:	b4001062 	cbz	x2, ae4e0 <CDMAChannel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)+0x230>
   ae2d8:	aa0403f3 	mov	x19, x4
   ae2dc:	b4001104 	cbz	x4, ae4fc <CDMAChannel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)+0x24c>
   ae2e0:	b24077e0 	mov	x0, #0x3fffffff            	// #1073741823
   ae2e4:	eb00009f 	cmp	x4, x0
   ae2e8:	54000da8 	b.hi	ae49c <CDMAChannel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)+0x1ec>  // b.pmore
   ae2ec:	b9400320 	ldr	w0, [x25]
   ae2f0:	aa0103f4 	mov	x20, x1
   ae2f4:	d29fffe1 	mov	x1, #0xffff                	// #65535
   ae2f8:	117f8000 	add	w0, w0, #0xfe0, lsl #12
   ae2fc:	1101c000 	add	w0, w0, #0x70
   ae300:	53185c00 	lsl	w0, w0, #8
   ae304:	11008000 	add	w0, w0, #0x20
   ae308:	b9400000 	ldr	w0, [x0]
   ae30c:	f264001f 	tst	x0, #0x10000000
   ae310:	fa411080 	ccmp	x4, x1, #0x0, ne	// ne = any
   ae314:	54001108 	b.hi	ae534 <CDMAChannel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)+0x284>  // b.pmore
   ae318:	f2405e94 	ands	x20, x20, #0xffffff
   ae31c:	54000fe0 	b.eq	ae518 <CDMAChannel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)+0x268>  // b.none
   ae320:	d2afc000 	mov	x0, #0x7e000000            	// #2113929216
   ae324:	a90573fb 	stp	x27, x28, [sp, #80]
   ae328:	2a0303fb 	mov	w27, w3
   ae32c:	8b000294 	add	x20, x20, x0
   ae330:	340008a3 	cbz	w3, ae444 <CDMAChannel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)+0x194>
   ae334:	52806900 	mov	w0, #0x348                 	// #840
   ae338:	9100c33c 	add	x28, x25, #0x30
   ae33c:	a9025bf5 	stp	x21, x22, [sp, #32]
   ae340:	2a054016 	orr	w22, w0, w5, lsl #16
   ae344:	d2800015 	mov	x21, #0x0                   	// #0
   ae348:	aa1603fa 	mov	x26, x22
   ae34c:	d34826d7 	ubfx	x23, x22, #8, #2
   ae350:	92401ed6 	and	x22, x22, #0xff
   ae354:	f9400300 	ldr	x0, [x24]
   ae358:	b4000b00 	cbz	x0, ae4b8 <CDMAChannel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)+0x208>
   ae35c:	f85d8386 	ldur	x6, [x28, #-40]
   ae360:	b4000b66 	cbz	x6, ae4cc <CDMAChannel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)+0x21c>
   ae364:	d3505f43 	ubfx	x3, x26, #16, #8
   ae368:	53187f42 	lsr	w2, w26, #24
   ae36c:	390000d6 	strb	w22, [x6]
   ae370:	32020401 	orr	w1, w0, #0xc0000000
   ae374:	53083c0a 	ubfx	w10, w0, #8, #8
   ae378:	390004d7 	strb	w23, [x6, #1]
   ae37c:	53187c21 	lsr	w1, w1, #24
   ae380:	53105c09 	ubfx	w9, w0, #16, #8
   ae384:	390008c3 	strb	w3, [x6, #2]
   ae388:	53083e88 	ubfx	w8, w20, #8, #8
   ae38c:	53105e87 	ubfx	w7, w20, #16, #8
   ae390:	39000cc2 	strb	w2, [x6, #3]
   ae394:	53187e85 	lsr	w5, w20, #24
   ae398:	53083e64 	ubfx	w4, w19, #8, #8
   ae39c:	390010c0 	strb	w0, [x6, #4]
   ae3a0:	53105e63 	ubfx	w3, w19, #16, #8
   ae3a4:	53187e62 	lsr	w2, w19, #24
   ae3a8:	390014ca 	strb	w10, [x6, #5]
   ae3ac:	7100077f 	cmp	w27, #0x1
   ae3b0:	390018c9 	strb	w9, [x6, #6]
   ae3b4:	39001cc1 	strb	w1, [x6, #7]
   ae3b8:	390020d4 	strb	w20, [x6, #8]
   ae3bc:	390024c8 	strb	w8, [x6, #9]
   ae3c0:	390028c7 	strb	w7, [x6, #10]
   ae3c4:	39002cc5 	strb	w5, [x6, #11]
   ae3c8:	390030d3 	strb	w19, [x6, #12]
   ae3cc:	390034c4 	strb	w4, [x6, #13]
   ae3d0:	390038c3 	strb	w3, [x6, #14]
   ae3d4:	39003cc2 	strb	w2, [x6, #15]
   ae3d8:	390040df 	strb	wzr, [x6, #16]
   ae3dc:	390044df 	strb	wzr, [x6, #17]
   ae3e0:	390048df 	strb	wzr, [x6, #18]
   ae3e4:	39004cdf 	strb	wzr, [x6, #19]
   ae3e8:	540003e0 	b.eq	ae464 <CDMAChannel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)+0x1b4>  // b.none
   ae3ec:	51000761 	sub	w1, w27, #0x1
   ae3f0:	6b0102bf 	cmp	w21, w1
   ae3f4:	1a9507e1 	csinc	w1, wzr, w21, eq	// eq = none
   ae3f8:	8b214f21 	add	x1, x25, w1, uxtw #3
   ae3fc:	f9400422 	ldr	x2, [x1, #8]
   ae400:	aa1303e1 	mov	x1, x19
   ae404:	110006b5 	add	w21, w21, #0x1
   ae408:	32020443 	orr	w3, w2, #0xc0000000
   ae40c:	53083c44 	ubfx	w4, w2, #8, #8
   ae410:	390050c2 	strb	w2, [x6, #20]
   ae414:	53187c63 	lsr	w3, w3, #24
   ae418:	53105c42 	ubfx	w2, w2, #16, #8
   ae41c:	390054c4 	strb	w4, [x6, #21]
   ae420:	390058c2 	strb	w2, [x6, #22]
   ae424:	39005cc3 	strb	w3, [x6, #23]
   ae428:	f9003f3f 	str	xzr, [x25, #120]
   ae42c:	97ffec59 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   ae430:	f8408700 	ldr	x0, [x24], #8
   ae434:	6b1b02bf 	cmp	w21, w27
   ae438:	f8008780 	str	x0, [x28], #8
   ae43c:	54fff8c1 	b.ne	ae354 <CDMAChannel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)+0xa4>  // b.any
   ae440:	a9425bf5 	ldp	x21, x22, [sp, #32]
   ae444:	a94363f7 	ldp	x23, x24, [sp, #48]
   ae448:	b9002b3b 	str	w27, [x25, #40]
   ae44c:	f9004333 	str	x19, [x25, #128]
   ae450:	a94153f3 	ldp	x19, x20, [sp, #16]
   ae454:	a9446bf9 	ldp	x25, x26, [sp, #64]
   ae458:	a94573fb 	ldp	x27, x28, [sp, #80]
   ae45c:	a8c67bfd 	ldp	x29, x30, [sp], #96
   ae460:	d65f03c0 	ret
   ae464:	390050df 	strb	wzr, [x6, #20]
   ae468:	aa1303e1 	mov	x1, x19
   ae46c:	91001ab5 	add	x21, x21, #0x6
   ae470:	390054df 	strb	wzr, [x6, #21]
   ae474:	390058df 	strb	wzr, [x6, #22]
   ae478:	39005cdf 	strb	wzr, [x6, #23]
   ae47c:	f9003f3f 	str	xzr, [x25, #120]
   ae480:	97ffec44 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   ae484:	f9400300 	ldr	x0, [x24]
   ae488:	f8357b20 	str	x0, [x25, x21, lsl #3]
   ae48c:	17ffffed 	b	ae440 <CDMAChannel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)+0x190>
   ae490:	a9446bf9 	ldp	x25, x26, [sp, #64]
   ae494:	a8c67bfd 	ldp	x29, x30, [sp], #96
   ae498:	1400070a 	b	b00c0 <CDMA4Channel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)>
   ae49c:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae4a0:	91112021 	add	x1, x1, #0x448
   ae4a4:	a9025bf5 	stp	x21, x22, [sp, #32]
   ae4a8:	91070020 	add	x0, x1, #0x1c0
   ae4ac:	52802302 	mov	w2, #0x118                 	// #280
   ae4b0:	a90573fb 	stp	x27, x28, [sp, #80]
   ae4b4:	97ffbe23 	bl	9dd40 <assertion_failed>
   ae4b8:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae4bc:	91112021 	add	x1, x1, #0x448
   ae4c0:	91090020 	add	x0, x1, #0x240
   ae4c4:	52802442 	mov	w2, #0x122                 	// #290
   ae4c8:	97ffbe1e 	bl	9dd40 <assertion_failed>
   ae4cc:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae4d0:	91112021 	add	x1, x1, #0x448
   ae4d4:	91094020 	add	x0, x1, #0x250
   ae4d8:	52802462 	mov	w2, #0x123                 	// #291
   ae4dc:	97ffbe19 	bl	9dd40 <assertion_failed>
   ae4e0:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae4e4:	91112021 	add	x1, x1, #0x448
   ae4e8:	a9025bf5 	stp	x21, x22, [sp, #32]
   ae4ec:	91068020 	add	x0, x1, #0x1a0
   ae4f0:	528022c2 	mov	w2, #0x116                 	// #278
   ae4f4:	a90573fb 	stp	x27, x28, [sp, #80]
   ae4f8:	97ffbe12 	bl	9dd40 <assertion_failed>
   ae4fc:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae500:	91112021 	add	x1, x1, #0x448
   ae504:	a9025bf5 	stp	x21, x22, [sp, #32]
   ae508:	9106c020 	add	x0, x1, #0x1b0
   ae50c:	528022e2 	mov	w2, #0x117                 	// #279
   ae510:	a90573fb 	stp	x27, x28, [sp, #80]
   ae514:	97ffbe0b 	bl	9dd40 <assertion_failed>
   ae518:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae51c:	91112021 	add	x1, x1, #0x448
   ae520:	a9025bf5 	stp	x21, x22, [sp, #32]
   ae524:	91062020 	add	x0, x1, #0x188
   ae528:	528023a2 	mov	w2, #0x11d                 	// #285
   ae52c:	a90573fb 	stp	x27, x28, [sp, #80]
   ae530:	97ffbe04 	bl	9dd40 <assertion_failed>
   ae534:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae538:	91112021 	add	x1, x1, #0x448
   ae53c:	a9025bf5 	stp	x21, x22, [sp, #32]
   ae540:	91078020 	add	x0, x1, #0x1e0
   ae544:	52802322 	mov	w2, #0x119                 	// #281
   ae548:	a90573fb 	stp	x27, x28, [sp, #80]
   ae54c:	97ffbdfd 	bl	9dd40 <assertion_failed>

00000000000ae550 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)>:
   ae550:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   ae554:	910003fd 	mov	x29, sp
   ae558:	f9000bf3 	str	x19, [sp, #16]
   ae55c:	aa0003f3 	mov	x19, x0
   ae560:	f9404400 	ldr	x0, [x0, #136]
   ae564:	b5000a40 	cbnz	x0, ae6ac <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x15c>
   ae568:	aa0103e8 	mov	x8, x1
   ae56c:	b4000b01 	cbz	x1, ae6cc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x17c>
   ae570:	aa0203ed 	mov	x13, x2
   ae574:	b4000b62 	cbz	x2, ae6e0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x190>
   ae578:	aa0303ec 	mov	x12, x3
   ae57c:	b40009e3 	cbz	x3, ae6b8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x168>
   ae580:	d29fffe0 	mov	x0, #0xffff                	// #65535
   ae584:	eb00007f 	cmp	x3, x0
   ae588:	54000b68 	b.hi	ae6f4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x1a4>  // b.pmore
   ae58c:	2a0403e9 	mov	w9, w4
   ae590:	34000bc4 	cbz	w4, ae708 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x1b8>
   ae594:	5287ffe1 	mov	w1, #0x3fff                	// #16383
   ae598:	6b01009f 	cmp	w4, w1
   ae59c:	54000c08 	b.hi	ae71c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x1cc>  // b.pmore
   ae5a0:	eb0000bf 	cmp	x5, x0
   ae5a4:	aa0503eb 	mov	x11, x5
   ae5a8:	54000c48 	b.hi	ae730 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x1e0>  // b.pmore
   ae5ac:	71003cdf 	cmp	w6, #0xf
   ae5b0:	54000ca8 	b.hi	ae744 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x1f4>  // b.pmore
   ae5b4:	b9400261 	ldr	w1, [x19]
   ae5b8:	117f8021 	add	w1, w1, #0xfe0, lsl #12
   ae5bc:	1101c021 	add	w1, w1, #0x70
   ae5c0:	53185c21 	lsl	w1, w1, #8
   ae5c4:	11008021 	add	w1, w1, #0x20
   ae5c8:	b9400020 	ldr	w0, [x1]
   ae5cc:	37e00c60 	tbnz	w0, #28, ae758 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x208>
   ae5d0:	f9400667 	ldr	x7, [x19, #8]
   ae5d4:	b4000cc7 	cbz	x7, ae76c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x21c>
   ae5d8:	52806641 	mov	w1, #0x332                 	// #818
   ae5dc:	51000480 	sub	w0, w4, #0x1
   ae5e0:	390010e2 	strb	w2, [x7, #4]
   ae5e4:	2a063026 	orr	w6, w1, w6, lsl #12
   ae5e8:	32020444 	orr	w4, w2, #0xc0000000
   ae5ec:	32020503 	orr	w3, w8, #0xc0000000
   ae5f0:	2a004180 	orr	w0, w12, w0, lsl #16
   ae5f4:	53083ca5 	ubfx	w5, w5, #8, #8
   ae5f8:	53083d8e 	ubfx	w14, w12, #8, #8
   ae5fc:	53087ccf 	lsr	w15, w6, #8
   ae600:	53187cc1 	lsr	w1, w6, #24
   ae604:	390020e8 	strb	w8, [x7, #8]
   ae608:	d3505cd0 	ubfx	x16, x6, #16, #8
   ae60c:	d3505c0a 	ubfx	x10, x0, #16, #8
   ae610:	390000e6 	strb	w6, [x7]
   ae614:	53187c02 	lsr	w2, w0, #24
   ae618:	53083d06 	ubfx	w6, w8, #8, #8
   ae61c:	390004ef 	strb	w15, [x7, #1]
   ae620:	53105da0 	ubfx	w0, w13, #16, #8
   ae624:	53187c84 	lsr	w4, w4, #24
   ae628:	39000ce1 	strb	w1, [x7, #3]
   ae62c:	53187c63 	lsr	w3, w3, #24
   ae630:	53083daf 	ubfx	w15, w13, #8, #8
   ae634:	390008f0 	strb	w16, [x7, #2]
   ae638:	53105d08 	ubfx	w8, w8, #16, #8
   ae63c:	2a0903e1 	mov	w1, w9
   ae640:	390018e0 	strb	w0, [x7, #6]
   ae644:	390014ef 	strb	w15, [x7, #5]
   ae648:	aa0d03e0 	mov	x0, x13
   ae64c:	39001ce4 	strb	w4, [x7, #7]
   ae650:	9b0c7c21 	mul	x1, x1, x12
   ae654:	390024e6 	strb	w6, [x7, #9]
   ae658:	390028e8 	strb	w8, [x7, #10]
   ae65c:	39002ce3 	strb	w3, [x7, #11]
   ae660:	390030ec 	strb	w12, [x7, #12]
   ae664:	390034ee 	strb	w14, [x7, #13]
   ae668:	390038ea 	strb	w10, [x7, #14]
   ae66c:	39003ce2 	strb	w2, [x7, #15]
   ae670:	390040ff 	strb	wzr, [x7, #16]
   ae674:	390044ff 	strb	wzr, [x7, #17]
   ae678:	390048eb 	strb	w11, [x7, #18]
   ae67c:	39004ce5 	strb	w5, [x7, #19]
   ae680:	390050ff 	strb	wzr, [x7, #20]
   ae684:	390054ff 	strb	wzr, [x7, #21]
   ae688:	390058ff 	strb	wzr, [x7, #22]
   ae68c:	39005cff 	strb	wzr, [x7, #23]
   ae690:	f9003e7f 	str	xzr, [x19, #120]
   ae694:	97ffebbf 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   ae698:	52800020 	mov	w0, #0x1                   	// #1
   ae69c:	b9002a60 	str	w0, [x19, #40]
   ae6a0:	f9400bf3 	ldr	x19, [sp, #16]
   ae6a4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   ae6a8:	d65f03c0 	ret
   ae6ac:	f9400bf3 	ldr	x19, [sp, #16]
   ae6b0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   ae6b4:	1400071f 	b	b0330 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)>
   ae6b8:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae6bc:	91112021 	add	x1, x1, #0x448
   ae6c0:	9109a020 	add	x0, x1, #0x268
   ae6c4:	52802a82 	mov	w2, #0x154                 	// #340
   ae6c8:	97ffbd9e 	bl	9dd40 <assertion_failed>
   ae6cc:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae6d0:	91112021 	add	x1, x1, #0x448
   ae6d4:	9102c020 	add	x0, x1, #0xb0
   ae6d8:	52802a42 	mov	w2, #0x152                 	// #338
   ae6dc:	97ffbd99 	bl	9dd40 <assertion_failed>
   ae6e0:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae6e4:	91112021 	add	x1, x1, #0x448
   ae6e8:	91032020 	add	x0, x1, #0xc8
   ae6ec:	52802a62 	mov	w2, #0x153                 	// #339
   ae6f0:	97ffbd94 	bl	9dd40 <assertion_failed>
   ae6f4:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae6f8:	91112021 	add	x1, x1, #0x448
   ae6fc:	910a0020 	add	x0, x1, #0x280
   ae700:	52802aa2 	mov	w2, #0x155                 	// #341
   ae704:	97ffbd8f 	bl	9dd40 <assertion_failed>
   ae708:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae70c:	91112021 	add	x1, x1, #0x448
   ae710:	910a6020 	add	x0, x1, #0x298
   ae714:	52802ac2 	mov	w2, #0x156                 	// #342
   ae718:	97ffbd8a 	bl	9dd40 <assertion_failed>
   ae71c:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae720:	91112021 	add	x1, x1, #0x448
   ae724:	910aa020 	add	x0, x1, #0x2a8
   ae728:	52802ae2 	mov	w2, #0x157                 	// #343
   ae72c:	97ffbd85 	bl	9dd40 <assertion_failed>
   ae730:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae734:	91112021 	add	x1, x1, #0x448
   ae738:	910b0020 	add	x0, x1, #0x2c0
   ae73c:	52802b02 	mov	w2, #0x158                 	// #344
   ae740:	97ffbd80 	bl	9dd40 <assertion_failed>
   ae744:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae748:	91112021 	add	x1, x1, #0x448
   ae74c:	9103a020 	add	x0, x1, #0xe8
   ae750:	52802b22 	mov	w2, #0x159                 	// #345
   ae754:	97ffbd7b 	bl	9dd40 <assertion_failed>
   ae758:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae75c:	91112021 	add	x1, x1, #0x448
   ae760:	910b6020 	add	x0, x1, #0x2d8
   ae764:	52802b62 	mov	w2, #0x15b                 	// #347
   ae768:	97ffbd76 	bl	9dd40 <assertion_failed>
   ae76c:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae770:	91112021 	add	x1, x1, #0x448
   ae774:	91040020 	add	x0, x1, #0x100
   ae778:	52802ba2 	mov	w2, #0x15d                 	// #349
   ae77c:	97ffbd71 	bl	9dd40 <assertion_failed>

00000000000ae780 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, unsigned int, bool, void*), void*)>:
   ae780:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ae784:	910003fd 	mov	x29, sp
   ae788:	a90153f3 	stp	x19, x20, [sp, #16]
   ae78c:	aa0003f3 	mov	x19, x0
   ae790:	f9404400 	ldr	x0, [x0, #136]
   ae794:	b5000240 	cbnz	x0, ae7dc <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, unsigned int, bool, void*), void*)+0x5c>
   ae798:	aa0103f4 	mov	x20, x1
   ae79c:	b9400261 	ldr	w1, [x19]
   ae7a0:	f90013f5 	str	x21, [sp, #32]
   ae7a4:	7100203f 	cmp	w1, #0x8
   ae7a8:	540003c8 	b.hi	ae820 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, unsigned int, bool, void*), void*)+0xa0>  // b.pmore
   ae7ac:	f9402a60 	ldr	x0, [x19, #80]
   ae7b0:	b4000420 	cbz	x0, ae834 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, unsigned int, bool, void*), void*)+0xb4>
   ae7b4:	aa0203f5 	mov	x21, x2
   ae7b8:	39416262 	ldrb	w2, [x19, #88]
   ae7bc:	34000162 	cbz	w2, ae7e8 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, unsigned int, bool, void*), void*)+0x68>
   ae7c0:	f9003274 	str	x20, [x19, #96]
   ae7c4:	b4000254 	cbz	x20, ae80c <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, unsigned int, bool, void*), void*)+0x8c>
   ae7c8:	f9003675 	str	x21, [x19, #104]
   ae7cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   ae7d0:	f94013f5 	ldr	x21, [sp, #32]
   ae7d4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ae7d8:	d65f03c0 	ret
   ae7dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   ae7e0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ae7e4:	14000757 	b	b0540 <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, unsigned int, bool, void*), void*)>
   ae7e8:	90000002 	adrp	x2, ae000 <CDMAChannel::SetupIORead(void*, unsigned long, unsigned long, TDREQ)+0xd0>
   ae7ec:	1101c021 	add	w1, w1, #0x70
   ae7f0:	91340042 	add	x2, x2, #0xd00
   ae7f4:	aa1303e3 	mov	x3, x19
   ae7f8:	97fff14a 	bl	aad20 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   ae7fc:	52800020 	mov	w0, #0x1                   	// #1
   ae800:	f9003274 	str	x20, [x19, #96]
   ae804:	39016260 	strb	w0, [x19, #88]
   ae808:	b5fffe14 	cbnz	x20, ae7c8 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, unsigned int, bool, void*), void*)+0x48>
   ae80c:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae810:	91112021 	add	x1, x1, #0x448
   ae814:	910d2020 	add	x0, x1, #0x348
   ae818:	52803122 	mov	w2, #0x189                 	// #393
   ae81c:	97ffbd49 	bl	9dd40 <assertion_failed>
   ae820:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae824:	91112021 	add	x1, x1, #0x448
   ae828:	910c4020 	add	x0, x1, #0x310
   ae82c:	52802fc2 	mov	w2, #0x17e                 	// #382
   ae830:	97ffbd44 	bl	9dd40 <assertion_failed>
   ae834:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae838:	91112021 	add	x1, x1, #0x448
   ae83c:	910cc020 	add	x0, x1, #0x330
   ae840:	52802fe2 	mov	w2, #0x17f                 	// #383
   ae844:	97ffbd3f 	bl	9dd40 <assertion_failed>
   ae848:	d503201f 	nop
   ae84c:	d503201f 	nop

00000000000ae850 <CDMAChannel::Start()>:
   ae850:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   ae854:	910003fd 	mov	x29, sp
   ae858:	a90153f3 	stp	x19, x20, [sp, #16]
   ae85c:	aa0003f3 	mov	x19, x0
   ae860:	f9404400 	ldr	x0, [x0, #136]
   ae864:	b5000860 	cbnz	x0, ae970 <CDMAChannel::Start()+0x120>
   ae868:	b9402a60 	ldr	w0, [x19, #40]
   ae86c:	d2800014 	mov	x20, #0x0                   	// #0
   ae870:	f90013f5 	str	x21, [sp, #32]
   ae874:	91002275 	add	x21, x19, #0x8
   ae878:	340003c0 	cbz	w0, ae8f0 <CDMAChannel::Start()+0xa0>
   ae87c:	f8747aa0 	ldr	x0, [x21, x20, lsl #3]
   ae880:	b40007e0 	cbz	x0, ae97c <CDMAChannel::Start()+0x12c>
   ae884:	f9403261 	ldr	x1, [x19, #96]
   ae888:	b4000281 	cbz	x1, ae8d8 <CDMAChannel::Start()+0x88>
   ae88c:	f9402a61 	ldr	x1, [x19, #80]
   ae890:	b4000801 	cbz	x1, ae990 <CDMAChannel::Start()+0x140>
   ae894:	39416261 	ldrb	w1, [x19, #88]
   ae898:	34000861 	cbz	w1, ae9a4 <CDMAChannel::Start()+0x154>
   ae89c:	39400004 	ldrb	w4, [x0]
   ae8a0:	39400403 	ldrb	w3, [x0, #1]
   ae8a4:	39400802 	ldrb	w2, [x0, #2]
   ae8a8:	39400c01 	ldrb	w1, [x0, #3]
   ae8ac:	aa032083 	orr	x3, x4, x3, lsl #8
   ae8b0:	aa024062 	orr	x2, x3, x2, lsl #16
   ae8b4:	aa016041 	orr	x1, x2, x1, lsl #24
   ae8b8:	32000024 	orr	w4, w1, #0x1
   ae8bc:	53083c23 	ubfx	w3, w1, #8, #8
   ae8c0:	53105c22 	ubfx	w2, w1, #16, #8
   ae8c4:	d358dc21 	ubfx	x1, x1, #24, #32
   ae8c8:	39000004 	strb	w4, [x0]
   ae8cc:	39000403 	strb	w3, [x0, #1]
   ae8d0:	39000802 	strb	w2, [x0, #2]
   ae8d4:	39000c01 	strb	w1, [x0, #3]
   ae8d8:	d2800401 	mov	x1, #0x20                  	// #32
   ae8dc:	91000694 	add	x20, x20, #0x1
   ae8e0:	97ffeb2c 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   ae8e4:	b9402a60 	ldr	w0, [x19, #40]
   ae8e8:	6b14001f 	cmp	w0, w20
   ae8ec:	54fffc88 	b.hi	ae87c <CDMAChannel::Start()+0x2c>  // b.pmore
   ae8f0:	b9400261 	ldr	w1, [x19]
   ae8f4:	71001c3f 	cmp	w1, #0x7
   ae8f8:	540006a8 	b.hi	ae9cc <CDMAChannel::Start()+0x17c>  // b.pmore
   ae8fc:	52800e03 	mov	w3, #0x70                  	// #112
   ae900:	72a01fc3 	movk	w3, #0xfe, lsl #16
   ae904:	0b030020 	add	w0, w1, w3
   ae908:	53185c02 	lsl	w2, w0, #8
   ae90c:	53185c00 	lsl	w0, w0, #8
   ae910:	b9400042 	ldr	w2, [x2]
   ae914:	37100662 	tbnz	w2, #2, ae9e0 <CDMAChannel::Start()+0x190>
   ae918:	d28ffc04 	mov	x4, #0x7fe0                	// #32736
   ae91c:	f2bfc004 	movk	x4, #0xfe00, lsl #16
   ae920:	b9400084 	ldr	w4, [x4]
   ae924:	52800022 	mov	w2, #0x1                   	// #1
   ae928:	1ac12041 	lsl	w1, w2, w1
   ae92c:	6a04003f 	tst	w1, w4
   ae930:	54000441 	b.ne	ae9b8 <CDMAChannel::Start()+0x168>  // b.any
   ae934:	f9400661 	ldr	x1, [x19, #8]
   ae938:	11001000 	add	w0, w0, #0x4
   ae93c:	52800022 	mov	w2, #0x1                   	// #1
   ae940:	72a21e22 	movk	w2, #0x10f1, lsl #16
   ae944:	f94013f5 	ldr	x21, [sp, #32]
   ae948:	b9002e7f 	str	wzr, [x19, #44]
   ae94c:	32020421 	orr	w1, w1, #0xc0000000
   ae950:	b9000001 	str	w1, [x0]
   ae954:	b9400260 	ldr	w0, [x19]
   ae958:	a94153f3 	ldp	x19, x20, [sp, #16]
   ae95c:	0b030000 	add	w0, w0, w3
   ae960:	53185c00 	lsl	w0, w0, #8
   ae964:	b9000002 	str	w2, [x0]
   ae968:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ae96c:	d65f03c0 	ret
   ae970:	a94153f3 	ldp	x19, x20, [sp, #16]
   ae974:	a8c37bfd 	ldp	x29, x30, [sp], #48
   ae978:	14000726 	b	b0610 <CDMA4Channel::Start()>
   ae97c:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae980:	91112021 	add	x1, x1, #0x448
   ae984:	91094020 	add	x0, x1, #0x250
   ae988:	52803362 	mov	w2, #0x19b                 	// #411
   ae98c:	97ffbced 	bl	9dd40 <assertion_failed>
   ae990:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae994:	91112021 	add	x1, x1, #0x448
   ae998:	910cc020 	add	x0, x1, #0x330
   ae99c:	528033e2 	mov	w2, #0x19f                 	// #415
   ae9a0:	97ffbce8 	bl	9dd40 <assertion_failed>
   ae9a4:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae9a8:	91112021 	add	x1, x1, #0x448
   ae9ac:	910da020 	add	x0, x1, #0x368
   ae9b0:	52803402 	mov	w2, #0x1a0                 	// #416
   ae9b4:	97ffbce3 	bl	9dd40 <assertion_failed>
   ae9b8:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae9bc:	91112021 	add	x1, x1, #0x448
   ae9c0:	910ec020 	add	x0, x1, #0x3b0
   ae9c4:	52803582 	mov	w2, #0x1ac                 	// #428
   ae9c8:	97ffbcde 	bl	9dd40 <assertion_failed>
   ae9cc:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae9d0:	91112021 	add	x1, x1, #0x448
   ae9d4:	9100c020 	add	x0, x1, #0x30
   ae9d8:	52803542 	mov	w2, #0x1aa                 	// #426
   ae9dc:	97ffbcd9 	bl	9dd40 <assertion_failed>
   ae9e0:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   ae9e4:	91112021 	add	x1, x1, #0x448
   ae9e8:	910de020 	add	x0, x1, #0x378
   ae9ec:	52803562 	mov	w2, #0x1ab                 	// #427
   ae9f0:	97ffbcd4 	bl	9dd40 <assertion_failed>
   ae9f4:	d503201f 	nop
   ae9f8:	d503201f 	nop
   ae9fc:	d503201f 	nop

00000000000aea00 <CDMAChannel::Wait()>:
   aea00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   aea04:	910003fd 	mov	x29, sp
   aea08:	f9000bf3 	str	x19, [sp, #16]
   aea0c:	aa0003f3 	mov	x19, x0
   aea10:	f9404400 	ldr	x0, [x0, #136]
   aea14:	b4000080 	cbz	x0, aea24 <CDMAChannel::Wait()+0x24>
   aea18:	f9400bf3 	ldr	x19, [sp, #16]
   aea1c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   aea20:	14000768 	b	b07c0 <CDMA4Channel::Wait()>
   aea24:	b9400260 	ldr	w0, [x19]
   aea28:	71001c1f 	cmp	w0, #0x7
   aea2c:	54000328 	b.hi	aea90 <CDMAChannel::Wait()+0x90>  // b.pmore
   aea30:	f9403261 	ldr	x1, [x19, #96]
   aea34:	b5000381 	cbnz	x1, aeaa4 <CDMAChannel::Wait()+0xa4>
   aea38:	117f8000 	add	w0, w0, #0xfe0, lsl #12
   aea3c:	1101c000 	add	w0, w0, #0x70
   aea40:	53185c00 	lsl	w0, w0, #8
   aea44:	d503201f 	nop
   aea48:	b9400001 	ldr	w1, [x0]
   aea4c:	3707ffe1 	tbnz	w1, #0, aea48 <CDMAChannel::Wait()+0x48>
   aea50:	d2780021 	eor	x1, x1, #0x100
   aea54:	f9403e60 	ldr	x0, [x19, #120]
   aea58:	53082021 	ubfx	w1, w1, #8, #1
   aea5c:	3901c261 	strb	w1, [x19, #112]
   aea60:	b50000a0 	cbnz	x0, aea74 <CDMAChannel::Wait()+0x74>
   aea64:	2a0103e0 	mov	w0, w1
   aea68:	f9400bf3 	ldr	x19, [sp, #16]
   aea6c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   aea70:	d65f03c0 	ret
   aea74:	f9404261 	ldr	x1, [x19, #128]
   aea78:	97ffeac6 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   aea7c:	3941c261 	ldrb	w1, [x19, #112]
   aea80:	f9400bf3 	ldr	x19, [sp, #16]
   aea84:	a8c27bfd 	ldp	x29, x30, [sp], #32
   aea88:	2a0103e0 	mov	w0, w1
   aea8c:	d65f03c0 	ret
   aea90:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   aea94:	91112021 	add	x1, x1, #0x448
   aea98:	9100c020 	add	x0, x1, #0x30
   aea9c:	52803842 	mov	w2, #0x1c2                 	// #450
   aeaa0:	97ffbca8 	bl	9dd40 <assertion_failed>
   aeaa4:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   aeaa8:	91112021 	add	x1, x1, #0x448
   aeaac:	910fa020 	add	x0, x1, #0x3e8
   aeab0:	52803862 	mov	w2, #0x1c3                 	// #451
   aeab4:	97ffbca3 	bl	9dd40 <assertion_failed>
   aeab8:	d503201f 	nop
   aeabc:	d503201f 	nop

00000000000aeac0 <CDMAChannel::GetStatus()>:
   aeac0:	aa0003e1 	mov	x1, x0
   aeac4:	f9404400 	ldr	x0, [x0, #136]
   aeac8:	b4000040 	cbz	x0, aead0 <CDMAChannel::GetStatus()+0x10>
   aeacc:	1400076d 	b	b0880 <CDMA4Channel::GetStatus()>
   aead0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   aead4:	910003fd 	mov	x29, sp
   aead8:	b9400020 	ldr	w0, [x1]
   aeadc:	71001c1f 	cmp	w0, #0x7
   aeae0:	54000128 	b.hi	aeb04 <CDMAChannel::GetStatus()+0x44>  // b.pmore
   aeae4:	117f8000 	add	w0, w0, #0xfe0, lsl #12
   aeae8:	1101c000 	add	w0, w0, #0x70
   aeaec:	53185c00 	lsl	w0, w0, #8
   aeaf0:	b9400000 	ldr	w0, [x0]
   aeaf4:	37000120 	tbnz	w0, #0, aeb18 <CDMAChannel::GetStatus()+0x58>
   aeaf8:	3941c020 	ldrb	w0, [x1, #112]
   aeafc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   aeb00:	d65f03c0 	ret
   aeb04:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   aeb08:	91112021 	add	x1, x1, #0x448
   aeb0c:	9100c020 	add	x0, x1, #0x30
   aeb10:	52803c42 	mov	w2, #0x1e2                 	// #482
   aeb14:	97ffbc8b 	bl	9dd40 <assertion_failed>
   aeb18:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   aeb1c:	91112021 	add	x1, x1, #0x448
   aeb20:	91102020 	add	x0, x1, #0x408
   aeb24:	52803c62 	mov	w2, #0x1e3                 	// #483
   aeb28:	97ffbc86 	bl	9dd40 <assertion_failed>
   aeb2c:	d503201f 	nop

00000000000aeb30 <CDMAChannel::Cancel()>:
   aeb30:	aa0003e1 	mov	x1, x0
   aeb34:	f9404400 	ldr	x0, [x0, #136]
   aeb38:	b5000120 	cbnz	x0, aeb5c <CDMAChannel::Cancel()+0x2c>
   aeb3c:	b9400020 	ldr	w0, [x1]
   aeb40:	71001c1f 	cmp	w0, #0x7
   aeb44:	540000e8 	b.hi	aeb60 <CDMAChannel::Cancel()+0x30>  // b.pmore
   aeb48:	117f8000 	add	w0, w0, #0xfe0, lsl #12
   aeb4c:	1101c000 	add	w0, w0, #0x70
   aeb50:	53185c00 	lsl	w0, w0, #8
   aeb54:	b900001f 	str	wzr, [x0]
   aeb58:	d65f03c0 	ret
   aeb5c:	14000769 	b	b0900 <CDMA4Channel::Cancel()>
   aeb60:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   aeb64:	91112021 	add	x1, x1, #0x448
   aeb68:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   aeb6c:	9100c020 	add	x0, x1, #0x30
   aeb70:	910003fd 	mov	x29, sp
   aeb74:	52803ea2 	mov	w2, #0x1f5                 	// #501
   aeb78:	97ffbc72 	bl	9dd40 <assertion_failed>
   aeb7c:	d503201f 	nop

00000000000aeb80 <CDMAChannel::InterruptHandler()>:
   aeb80:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   aeb84:	910003fd 	mov	x29, sp
   aeb88:	f9000bf3 	str	x19, [sp, #16]
   aeb8c:	aa0003f3 	mov	x19, x0
   aeb90:	f9403c00 	ldr	x0, [x0, #120]
   aeb94:	b50006e0 	cbnz	x0, aec70 <CDMAChannel::InterruptHandler()+0xf0>
   aeb98:	b9400261 	ldr	w1, [x19]
   aeb9c:	71001c3f 	cmp	w1, #0x7
   aeba0:	54000728 	b.hi	aec84 <CDMAChannel::InterruptHandler()+0x104>  // b.pmore
   aeba4:	d28ffc02 	mov	x2, #0x7fe0                	// #32736
   aeba8:	f2bfc002 	movk	x2, #0xfe00, lsl #16
   aebac:	b9400043 	ldr	w3, [x2]
   aebb0:	52800020 	mov	w0, #0x1                   	// #1
   aebb4:	1ac12000 	lsl	w0, w0, w1
   aebb8:	6a03001f 	tst	w0, w3
   aebbc:	540006e0 	b.eq	aec98 <CDMAChannel::InterruptHandler()+0x118>  // b.none
   aebc0:	b9000040 	str	w0, [x2]
   aebc4:	b9400260 	ldr	w0, [x19]
   aebc8:	117f8000 	add	w0, w0, #0xfe0, lsl #12
   aebcc:	1101c000 	add	w0, w0, #0x70
   aebd0:	53185c00 	lsl	w0, w0, #8
   aebd4:	b9400001 	ldr	w1, [x0]
   aebd8:	361006a1 	tbz	w1, #2, aecac <CDMAChannel::InterruptHandler()+0x12c>
   aebdc:	d2780022 	eor	x2, x1, #0x100
   aebe0:	f9403264 	ldr	x4, [x19, #96]
   aebe4:	53082042 	ubfx	w2, w2, #8, #1
   aebe8:	b9000001 	str	w1, [x0]
   aebec:	3901c262 	strb	w2, [x19, #112]
   aebf0:	b4000684 	cbz	x4, aecc0 <CDMAChannel::InterruptHandler()+0x140>
   aebf4:	b9402e60 	ldr	w0, [x19, #44]
   aebf8:	71000c1f 	cmp	w0, #0x3
   aebfc:	540006c8 	b.hi	aecd4 <CDMAChannel::InterruptHandler()+0x154>  // b.pmore
   aec00:	b9400260 	ldr	w0, [x19]
   aec04:	b9402e61 	ldr	w1, [x19, #44]
   aec08:	f9403663 	ldr	x3, [x19, #104]
   aec0c:	d63f0080 	blr	x4
   aec10:	3941c260 	ldrb	w0, [x19, #112]
   aec14:	34000280 	cbz	w0, aec64 <CDMAChannel::InterruptHandler()+0xe4>
   aec18:	b9402a60 	ldr	w0, [x19, #40]
   aec1c:	7100041f 	cmp	w0, #0x1
   aec20:	54000229 	b.ls	aec64 <CDMAChannel::InterruptHandler()+0xe4>  // b.plast
   aec24:	b9402e61 	ldr	w1, [x19, #44]
   aec28:	6b01001f 	cmp	w0, w1
   aec2c:	540005e9 	b.ls	aece8 <CDMAChannel::InterruptHandler()+0x168>  // b.plast
   aec30:	b9402e60 	ldr	w0, [x19, #44]
   aec34:	f9404261 	ldr	x1, [x19, #128]
   aec38:	2a0003e0 	mov	w0, w0
   aec3c:	91001800 	add	x0, x0, #0x6
   aec40:	f8607a60 	ldr	x0, [x19, x0, lsl #3]
   aec44:	97ffea53 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   aec48:	b9402e60 	ldr	w0, [x19, #44]
   aec4c:	b9402a61 	ldr	w1, [x19, #40]
   aec50:	11000400 	add	w0, w0, #0x1
   aec54:	6b01001f 	cmp	w0, w1
   aec58:	b9002e60 	str	w0, [x19, #44]
   aec5c:	54000041 	b.ne	aec64 <CDMAChannel::InterruptHandler()+0xe4>  // b.any
   aec60:	b9002e7f 	str	wzr, [x19, #44]
   aec64:	f9400bf3 	ldr	x19, [sp, #16]
   aec68:	a8c27bfd 	ldp	x29, x30, [sp], #32
   aec6c:	d65f03c0 	ret
   aec70:	f9404261 	ldr	x1, [x19, #128]
   aec74:	97ffea47 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   aec78:	b9400261 	ldr	w1, [x19]
   aec7c:	71001c3f 	cmp	w1, #0x7
   aec80:	54fff929 	b.ls	aeba4 <CDMAChannel::InterruptHandler()+0x24>  // b.plast
   aec84:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   aec88:	91112021 	add	x1, x1, #0x448
   aec8c:	9100c020 	add	x0, x1, #0x30
   aec90:	52804082 	mov	w2, #0x204                 	// #516
   aec94:	97ffbc2b 	bl	9dd40 <assertion_failed>
   aec98:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   aec9c:	91112021 	add	x1, x1, #0x448
   aeca0:	91110020 	add	x0, x1, #0x440
   aeca4:	52804142 	mov	w2, #0x20a                 	// #522
   aeca8:	97ffbc26 	bl	9dd40 <assertion_failed>
   aecac:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   aecb0:	91112021 	add	x1, x1, #0x448
   aecb4:	91116020 	add	x0, x1, #0x458
   aecb8:	528041c2 	mov	w2, #0x20e                 	// #526
   aecbc:	97ffbc21 	bl	9dd40 <assertion_failed>
   aecc0:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   aecc4:	91112021 	add	x1, x1, #0x448
   aecc8:	910d2020 	add	x0, x1, #0x348
   aeccc:	528042a2 	mov	w2, #0x215                 	// #533
   aecd0:	97ffbc1c 	bl	9dd40 <assertion_failed>
   aecd4:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   aecd8:	91112021 	add	x1, x1, #0x448
   aecdc:	9111a020 	add	x0, x1, #0x468
   aece0:	528042c2 	mov	w2, #0x216                 	// #534
   aece4:	97ffbc17 	bl	9dd40 <assertion_failed>
   aece8:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   aecec:	91112021 	add	x1, x1, #0x448
   aecf0:	91124020 	add	x0, x1, #0x490
   aecf4:	52804382 	mov	w2, #0x21c                 	// #540
   aecf8:	97ffbc12 	bl	9dd40 <assertion_failed>
   aecfc:	d503201f 	nop

00000000000aed00 <CDMAChannel::InterruptStub(void*)>:
   aed00:	b4000040 	cbz	x0, aed08 <CDMAChannel::InterruptStub(void*)+0x8>
   aed04:	17ffff9f 	b	aeb80 <CDMAChannel::InterruptHandler()>
   aed08:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   aed0c:	91112021 	add	x1, x1, #0x448
   aed10:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   aed14:	9112c020 	add	x0, x1, #0x4b0
   aed18:	910003fd 	mov	x29, sp
   aed1c:	52804562 	mov	w2, #0x22b                 	// #555
   aed20:	97ffbc08 	bl	9dd40 <assertion_failed>
	...

00000000000aed30 <CPageAllocator::CPageAllocator()>:
   aed30:	52800021 	mov	w1, #0x1                   	// #1
   aed34:	a9007c1f 	stp	xzr, xzr, [x0]
   aed38:	f900081f 	str	xzr, [x0, #16]
   aed3c:	b9001801 	str	w1, [x0, #24]
   aed40:	d65f03c0 	ret
   aed44:	d503201f 	nop
   aed48:	d503201f 	nop
   aed4c:	d503201f 	nop

00000000000aed50 <CPageAllocator::~CPageAllocator()>:
   aed50:	d65f03c0 	ret
   aed54:	d503201f 	nop
   aed58:	d503201f 	nop
   aed5c:	d503201f 	nop

00000000000aed60 <CPageAllocator::Setup(unsigned long, unsigned long)>:
   aed60:	d10083ff 	sub	sp, sp, #0x20
   aed64:	f9000fe0 	str	x0, [sp, #24]
   aed68:	f9000be1 	str	x1, [sp, #16]
   aed6c:	f90007e2 	str	x2, [sp, #8]
   aed70:	f9400be1 	ldr	x1, [sp, #16]
   aed74:	d29fffe0 	mov	x0, #0xffff                	// #65535
   aed78:	8b000020 	add	x0, x1, x0
   aed7c:	9270bc00 	and	x0, x0, #0xffffffffffff0000
   aed80:	aa0003e1 	mov	x1, x0
   aed84:	f9400fe0 	ldr	x0, [sp, #24]
   aed88:	f9000001 	str	x1, [x0]
   aed8c:	f9400be1 	ldr	x1, [sp, #16]
   aed90:	f94007e0 	ldr	x0, [sp, #8]
   aed94:	8b000020 	add	x0, x1, x0
   aed98:	9270bc00 	and	x0, x0, #0xffffffffffff0000
   aed9c:	aa0003e1 	mov	x1, x0
   aeda0:	f9400fe0 	ldr	x0, [sp, #24]
   aeda4:	f9000401 	str	x1, [x0, #8]
   aeda8:	d503201f 	nop
   aedac:	910083ff 	add	sp, sp, #0x20
   aedb0:	d65f03c0 	ret
   aedb4:	d503201f 	nop
   aedb8:	d503201f 	nop
   aedbc:	d503201f 	nop

00000000000aedc0 <CPageAllocator::GetFreeSpace() const>:
   aedc0:	a9400001 	ldp	x1, x0, [x0]
   aedc4:	cb010000 	sub	x0, x0, x1
   aedc8:	d65f03c0 	ret
   aedcc:	d503201f 	nop

00000000000aedd0 <CPageAllocator::Allocate()>:
   aedd0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   aedd4:	910003fd 	mov	x29, sp
   aedd8:	a90153f3 	stp	x19, x20, [sp, #16]
   aeddc:	aa0003f3 	mov	x19, x0
   aede0:	f9400000 	ldr	x0, [x0]
   aede4:	b4000460 	cbz	x0, aee70 <CPageAllocator::Allocate()+0xa0>
   aede8:	b9401a60 	ldr	w0, [x19, #24]
   aedec:	35000220 	cbnz	w0, aee30 <CPageAllocator::Allocate()+0x60>
   aedf0:	f9400a74 	ldr	x20, [x19, #16]
   aedf4:	b4000254 	cbz	x20, aee3c <CPageAllocator::Allocate()+0x6c>
   aedf8:	b9400281 	ldr	w1, [x20]
   aedfc:	5289a860 	mov	w0, #0x4d43                	// #19779
   aee00:	72aa08e0 	movk	w0, #0x5047, lsl #16
   aee04:	6b00003f 	cmp	w1, w0
   aee08:	540003e1 	b.ne	aee84 <CPageAllocator::Allocate()+0xb4>  // b.any
   aee0c:	f9400681 	ldr	x1, [x20, #8]
   aee10:	b9401a60 	ldr	w0, [x19, #24]
   aee14:	f9000a61 	str	x1, [x19, #16]
   aee18:	b900029f 	str	wzr, [x20]
   aee1c:	35000200 	cbnz	w0, aee5c <CPageAllocator::Allocate()+0x8c>
   aee20:	aa1403e0 	mov	x0, x20
   aee24:	a94153f3 	ldp	x19, x20, [sp, #16]
   aee28:	a8c27bfd 	ldp	x29, x30, [sp], #32
   aee2c:	d65f03c0 	ret
   aee30:	97ffe8c4 	bl	a9140 <EnterCritical>
   aee34:	f9400a74 	ldr	x20, [x19, #16]
   aee38:	b5fffe14 	cbnz	x20, aedf8 <CPageAllocator::Allocate()+0x28>
   aee3c:	a9400e62 	ldp	x2, x3, [x19]
   aee40:	b9401a60 	ldr	w0, [x19, #24]
   aee44:	91404041 	add	x1, x2, #0x10, lsl #12
   aee48:	eb03003f 	cmp	x1, x3
   aee4c:	f9000261 	str	x1, [x19]
   aee50:	54fffe68 	b.hi	aee1c <CPageAllocator::Allocate()+0x4c>  // b.pmore
   aee54:	aa0203f4 	mov	x20, x2
   aee58:	34fffe40 	cbz	w0, aee20 <CPageAllocator::Allocate()+0x50>
   aee5c:	97ffe8e9 	bl	a9200 <LeaveCritical>
   aee60:	aa1403e0 	mov	x0, x20
   aee64:	a94153f3 	ldp	x19, x20, [sp, #16]
   aee68:	a8c27bfd 	ldp	x29, x30, [sp], #32
   aee6c:	d65f03c0 	ret
   aee70:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   aee74:	91242021 	add	x1, x1, #0x908
   aee78:	91006020 	add	x0, x1, #0x18
   aee7c:	528006c2 	mov	w2, #0x36                  	// #54
   aee80:	97ffbbb0 	bl	9dd40 <assertion_failed>
   aee84:	d0000061 	adrp	x1, bc000 <font_data+0x9a8>
   aee88:	91242021 	add	x1, x1, #0x908
   aee8c:	9100a020 	add	x0, x1, #0x28
   aee90:	52800882 	mov	w2, #0x44                  	// #68
   aee94:	97ffbbab 	bl	9dd40 <assertion_failed>
   aee98:	d503201f 	nop
   aee9c:	d503201f 	nop

00000000000aeea0 <CPageAllocator::Free(void*)>:
   aeea0:	b40003a1 	cbz	x1, aef14 <CPageAllocator::Free(void*)+0x74>
   aeea4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   aeea8:	910003fd 	mov	x29, sp
   aeeac:	a90153f3 	stp	x19, x20, [sp, #16]
   aeeb0:	aa0003f4 	mov	x20, x0
   aeeb4:	aa0103f3 	mov	x19, x1
   aeeb8:	b9401800 	ldr	w0, [x0, #24]
   aeebc:	35000140 	cbnz	w0, aeee4 <CPageAllocator::Free(void*)+0x44>
   aeec0:	f9400a80 	ldr	x0, [x20, #16]
   aeec4:	5289a861 	mov	w1, #0x4d43                	// #19779
   aeec8:	72aa08e1 	movk	w1, #0x5047, lsl #16
   aeecc:	b9000261 	str	w1, [x19]
   aeed0:	f9000660 	str	x0, [x19, #8]
   aeed4:	f9000a93 	str	x19, [x20, #16]
   aeed8:	a94153f3 	ldp	x19, x20, [sp, #16]
   aeedc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   aeee0:	d65f03c0 	ret
   aeee4:	97ffe897 	bl	a9140 <EnterCritical>
   aeee8:	f9400a81 	ldr	x1, [x20, #16]
   aeeec:	5289a862 	mov	w2, #0x4d43                	// #19779
   aeef0:	72aa08e2 	movk	w2, #0x5047, lsl #16
   aeef4:	b9401a80 	ldr	w0, [x20, #24]
   aeef8:	b9000262 	str	w2, [x19]
   aeefc:	f9000661 	str	x1, [x19, #8]
   aef00:	f9000a93 	str	x19, [x20, #16]
   aef04:	34fffea0 	cbz	w0, aeed8 <CPageAllocator::Free(void*)+0x38>
   aef08:	a94153f3 	ldp	x19, x20, [sp, #16]
   aef0c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   aef10:	17ffe8bc 	b	a9200 <LeaveCritical>
   aef14:	d65f03c0 	ret
	...

00000000000af000 <VectorTable>:
   af000:	140001ef 	b	af7bc <SynchronousStub>
   af004:	d503201f 	nop
   af008:	d503201f 	nop
   af00c:	d503201f 	nop
   af010:	d503201f 	nop
   af014:	d503201f 	nop
   af018:	d503201f 	nop
   af01c:	d503201f 	nop
   af020:	d503201f 	nop
   af024:	d503201f 	nop
   af028:	d503201f 	nop
   af02c:	d503201f 	nop
   af030:	d503201f 	nop
   af034:	d503201f 	nop
   af038:	d503201f 	nop
   af03c:	d503201f 	nop
   af040:	d503201f 	nop
   af044:	d503201f 	nop
   af048:	d503201f 	nop
   af04c:	d503201f 	nop
   af050:	d503201f 	nop
   af054:	d503201f 	nop
   af058:	d503201f 	nop
   af05c:	d503201f 	nop
   af060:	d503201f 	nop
   af064:	d503201f 	nop
   af068:	d503201f 	nop
   af06c:	d503201f 	nop
   af070:	d503201f 	nop
   af074:	d503201f 	nop
   af078:	d503201f 	nop
   af07c:	d503201f 	nop
   af080:	140001eb 	b	af82c <IRQStub>
   af084:	d503201f 	nop
   af088:	d503201f 	nop
   af08c:	d503201f 	nop
   af090:	d503201f 	nop
   af094:	d503201f 	nop
   af098:	d503201f 	nop
   af09c:	d503201f 	nop
   af0a0:	d503201f 	nop
   af0a4:	d503201f 	nop
   af0a8:	d503201f 	nop
   af0ac:	d503201f 	nop
   af0b0:	d503201f 	nop
   af0b4:	d503201f 	nop
   af0b8:	d503201f 	nop
   af0bc:	d503201f 	nop
   af0c0:	d503201f 	nop
   af0c4:	d503201f 	nop
   af0c8:	d503201f 	nop
   af0cc:	d503201f 	nop
   af0d0:	d503201f 	nop
   af0d4:	d503201f 	nop
   af0d8:	d503201f 	nop
   af0dc:	d503201f 	nop
   af0e0:	d503201f 	nop
   af0e4:	d503201f 	nop
   af0e8:	d503201f 	nop
   af0ec:	d503201f 	nop
   af0f0:	d503201f 	nop
   af0f4:	d503201f 	nop
   af0f8:	d503201f 	nop
   af0fc:	d503201f 	nop
   af100:	140001f7 	b	af8dc <FIQStub>
   af104:	d503201f 	nop
   af108:	d503201f 	nop
   af10c:	d503201f 	nop
   af110:	d503201f 	nop
   af114:	d503201f 	nop
   af118:	d503201f 	nop
   af11c:	d503201f 	nop
   af120:	d503201f 	nop
   af124:	d503201f 	nop
   af128:	d503201f 	nop
   af12c:	d503201f 	nop
   af130:	d503201f 	nop
   af134:	d503201f 	nop
   af138:	d503201f 	nop
   af13c:	d503201f 	nop
   af140:	d503201f 	nop
   af144:	d503201f 	nop
   af148:	d503201f 	nop
   af14c:	d503201f 	nop
   af150:	d503201f 	nop
   af154:	d503201f 	nop
   af158:	d503201f 	nop
   af15c:	d503201f 	nop
   af160:	d503201f 	nop
   af164:	d503201f 	nop
   af168:	d503201f 	nop
   af16c:	d503201f 	nop
   af170:	d503201f 	nop
   af174:	d503201f 	nop
   af178:	d503201f 	nop
   af17c:	d503201f 	nop
   af180:	1400019d 	b	af7f4 <SErrorStub>
   af184:	d503201f 	nop
   af188:	d503201f 	nop
   af18c:	d503201f 	nop
   af190:	d503201f 	nop
   af194:	d503201f 	nop
   af198:	d503201f 	nop
   af19c:	d503201f 	nop
   af1a0:	d503201f 	nop
   af1a4:	d503201f 	nop
   af1a8:	d503201f 	nop
   af1ac:	d503201f 	nop
   af1b0:	d503201f 	nop
   af1b4:	d503201f 	nop
   af1b8:	d503201f 	nop
   af1bc:	d503201f 	nop
   af1c0:	d503201f 	nop
   af1c4:	d503201f 	nop
   af1c8:	d503201f 	nop
   af1cc:	d503201f 	nop
   af1d0:	d503201f 	nop
   af1d4:	d503201f 	nop
   af1d8:	d503201f 	nop
   af1dc:	d503201f 	nop
   af1e0:	d503201f 	nop
   af1e4:	d503201f 	nop
   af1e8:	d503201f 	nop
   af1ec:	d503201f 	nop
   af1f0:	d503201f 	nop
   af1f4:	d503201f 	nop
   af1f8:	d503201f 	nop
   af1fc:	d503201f 	nop
   af200:	1400016f 	b	af7bc <SynchronousStub>
   af204:	d503201f 	nop
   af208:	d503201f 	nop
   af20c:	d503201f 	nop
   af210:	d503201f 	nop
   af214:	d503201f 	nop
   af218:	d503201f 	nop
   af21c:	d503201f 	nop
   af220:	d503201f 	nop
   af224:	d503201f 	nop
   af228:	d503201f 	nop
   af22c:	d503201f 	nop
   af230:	d503201f 	nop
   af234:	d503201f 	nop
   af238:	d503201f 	nop
   af23c:	d503201f 	nop
   af240:	d503201f 	nop
   af244:	d503201f 	nop
   af248:	d503201f 	nop
   af24c:	d503201f 	nop
   af250:	d503201f 	nop
   af254:	d503201f 	nop
   af258:	d503201f 	nop
   af25c:	d503201f 	nop
   af260:	d503201f 	nop
   af264:	d503201f 	nop
   af268:	d503201f 	nop
   af26c:	d503201f 	nop
   af270:	d503201f 	nop
   af274:	d503201f 	nop
   af278:	d503201f 	nop
   af27c:	d503201f 	nop
   af280:	1400016b 	b	af82c <IRQStub>
   af284:	d503201f 	nop
   af288:	d503201f 	nop
   af28c:	d503201f 	nop
   af290:	d503201f 	nop
   af294:	d503201f 	nop
   af298:	d503201f 	nop
   af29c:	d503201f 	nop
   af2a0:	d503201f 	nop
   af2a4:	d503201f 	nop
   af2a8:	d503201f 	nop
   af2ac:	d503201f 	nop
   af2b0:	d503201f 	nop
   af2b4:	d503201f 	nop
   af2b8:	d503201f 	nop
   af2bc:	d503201f 	nop
   af2c0:	d503201f 	nop
   af2c4:	d503201f 	nop
   af2c8:	d503201f 	nop
   af2cc:	d503201f 	nop
   af2d0:	d503201f 	nop
   af2d4:	d503201f 	nop
   af2d8:	d503201f 	nop
   af2dc:	d503201f 	nop
   af2e0:	d503201f 	nop
   af2e4:	d503201f 	nop
   af2e8:	d503201f 	nop
   af2ec:	d503201f 	nop
   af2f0:	d503201f 	nop
   af2f4:	d503201f 	nop
   af2f8:	d503201f 	nop
   af2fc:	d503201f 	nop
   af300:	14000177 	b	af8dc <FIQStub>
   af304:	d503201f 	nop
   af308:	d503201f 	nop
   af30c:	d503201f 	nop
   af310:	d503201f 	nop
   af314:	d503201f 	nop
   af318:	d503201f 	nop
   af31c:	d503201f 	nop
   af320:	d503201f 	nop
   af324:	d503201f 	nop
   af328:	d503201f 	nop
   af32c:	d503201f 	nop
   af330:	d503201f 	nop
   af334:	d503201f 	nop
   af338:	d503201f 	nop
   af33c:	d503201f 	nop
   af340:	d503201f 	nop
   af344:	d503201f 	nop
   af348:	d503201f 	nop
   af34c:	d503201f 	nop
   af350:	d503201f 	nop
   af354:	d503201f 	nop
   af358:	d503201f 	nop
   af35c:	d503201f 	nop
   af360:	d503201f 	nop
   af364:	d503201f 	nop
   af368:	d503201f 	nop
   af36c:	d503201f 	nop
   af370:	d503201f 	nop
   af374:	d503201f 	nop
   af378:	d503201f 	nop
   af37c:	d503201f 	nop
   af380:	1400011d 	b	af7f4 <SErrorStub>
   af384:	d503201f 	nop
   af388:	d503201f 	nop
   af38c:	d503201f 	nop
   af390:	d503201f 	nop
   af394:	d503201f 	nop
   af398:	d503201f 	nop
   af39c:	d503201f 	nop
   af3a0:	d503201f 	nop
   af3a4:	d503201f 	nop
   af3a8:	d503201f 	nop
   af3ac:	d503201f 	nop
   af3b0:	d503201f 	nop
   af3b4:	d503201f 	nop
   af3b8:	d503201f 	nop
   af3bc:	d503201f 	nop
   af3c0:	d503201f 	nop
   af3c4:	d503201f 	nop
   af3c8:	d503201f 	nop
   af3cc:	d503201f 	nop
   af3d0:	d503201f 	nop
   af3d4:	d503201f 	nop
   af3d8:	d503201f 	nop
   af3dc:	d503201f 	nop
   af3e0:	d503201f 	nop
   af3e4:	d503201f 	nop
   af3e8:	d503201f 	nop
   af3ec:	d503201f 	nop
   af3f0:	d503201f 	nop
   af3f4:	d503201f 	nop
   af3f8:	d503201f 	nop
   af3fc:	d503201f 	nop
   af400:	14000168 	b	af9a0 <HVCStub>
   af404:	d503201f 	nop
   af408:	d503201f 	nop
   af40c:	d503201f 	nop
   af410:	d503201f 	nop
   af414:	d503201f 	nop
   af418:	d503201f 	nop
   af41c:	d503201f 	nop
   af420:	d503201f 	nop
   af424:	d503201f 	nop
   af428:	d503201f 	nop
   af42c:	d503201f 	nop
   af430:	d503201f 	nop
   af434:	d503201f 	nop
   af438:	d503201f 	nop
   af43c:	d503201f 	nop
   af440:	d503201f 	nop
   af444:	d503201f 	nop
   af448:	d503201f 	nop
   af44c:	d503201f 	nop
   af450:	d503201f 	nop
   af454:	d503201f 	nop
   af458:	d503201f 	nop
   af45c:	d503201f 	nop
   af460:	d503201f 	nop
   af464:	d503201f 	nop
   af468:	d503201f 	nop
   af46c:	d503201f 	nop
   af470:	d503201f 	nop
   af474:	d503201f 	nop
   af478:	d503201f 	nop
   af47c:	d503201f 	nop
   af480:	140000c1 	b	af784 <UnexpectedStub>
   af484:	d503201f 	nop
   af488:	d503201f 	nop
   af48c:	d503201f 	nop
   af490:	d503201f 	nop
   af494:	d503201f 	nop
   af498:	d503201f 	nop
   af49c:	d503201f 	nop
   af4a0:	d503201f 	nop
   af4a4:	d503201f 	nop
   af4a8:	d503201f 	nop
   af4ac:	d503201f 	nop
   af4b0:	d503201f 	nop
   af4b4:	d503201f 	nop
   af4b8:	d503201f 	nop
   af4bc:	d503201f 	nop
   af4c0:	d503201f 	nop
   af4c4:	d503201f 	nop
   af4c8:	d503201f 	nop
   af4cc:	d503201f 	nop
   af4d0:	d503201f 	nop
   af4d4:	d503201f 	nop
   af4d8:	d503201f 	nop
   af4dc:	d503201f 	nop
   af4e0:	d503201f 	nop
   af4e4:	d503201f 	nop
   af4e8:	d503201f 	nop
   af4ec:	d503201f 	nop
   af4f0:	d503201f 	nop
   af4f4:	d503201f 	nop
   af4f8:	d503201f 	nop
   af4fc:	d503201f 	nop
   af500:	140000a1 	b	af784 <UnexpectedStub>
   af504:	d503201f 	nop
   af508:	d503201f 	nop
   af50c:	d503201f 	nop
   af510:	d503201f 	nop
   af514:	d503201f 	nop
   af518:	d503201f 	nop
   af51c:	d503201f 	nop
   af520:	d503201f 	nop
   af524:	d503201f 	nop
   af528:	d503201f 	nop
   af52c:	d503201f 	nop
   af530:	d503201f 	nop
   af534:	d503201f 	nop
   af538:	d503201f 	nop
   af53c:	d503201f 	nop
   af540:	d503201f 	nop
   af544:	d503201f 	nop
   af548:	d503201f 	nop
   af54c:	d503201f 	nop
   af550:	d503201f 	nop
   af554:	d503201f 	nop
   af558:	d503201f 	nop
   af55c:	d503201f 	nop
   af560:	d503201f 	nop
   af564:	d503201f 	nop
   af568:	d503201f 	nop
   af56c:	d503201f 	nop
   af570:	d503201f 	nop
   af574:	d503201f 	nop
   af578:	d503201f 	nop
   af57c:	d503201f 	nop
   af580:	14000081 	b	af784 <UnexpectedStub>
   af584:	d503201f 	nop
   af588:	d503201f 	nop
   af58c:	d503201f 	nop
   af590:	d503201f 	nop
   af594:	d503201f 	nop
   af598:	d503201f 	nop
   af59c:	d503201f 	nop
   af5a0:	d503201f 	nop
   af5a4:	d503201f 	nop
   af5a8:	d503201f 	nop
   af5ac:	d503201f 	nop
   af5b0:	d503201f 	nop
   af5b4:	d503201f 	nop
   af5b8:	d503201f 	nop
   af5bc:	d503201f 	nop
   af5c0:	d503201f 	nop
   af5c4:	d503201f 	nop
   af5c8:	d503201f 	nop
   af5cc:	d503201f 	nop
   af5d0:	d503201f 	nop
   af5d4:	d503201f 	nop
   af5d8:	d503201f 	nop
   af5dc:	d503201f 	nop
   af5e0:	d503201f 	nop
   af5e4:	d503201f 	nop
   af5e8:	d503201f 	nop
   af5ec:	d503201f 	nop
   af5f0:	d503201f 	nop
   af5f4:	d503201f 	nop
   af5f8:	d503201f 	nop
   af5fc:	d503201f 	nop
   af600:	14000061 	b	af784 <UnexpectedStub>
   af604:	d503201f 	nop
   af608:	d503201f 	nop
   af60c:	d503201f 	nop
   af610:	d503201f 	nop
   af614:	d503201f 	nop
   af618:	d503201f 	nop
   af61c:	d503201f 	nop
   af620:	d503201f 	nop
   af624:	d503201f 	nop
   af628:	d503201f 	nop
   af62c:	d503201f 	nop
   af630:	d503201f 	nop
   af634:	d503201f 	nop
   af638:	d503201f 	nop
   af63c:	d503201f 	nop
   af640:	d503201f 	nop
   af644:	d503201f 	nop
   af648:	d503201f 	nop
   af64c:	d503201f 	nop
   af650:	d503201f 	nop
   af654:	d503201f 	nop
   af658:	d503201f 	nop
   af65c:	d503201f 	nop
   af660:	d503201f 	nop
   af664:	d503201f 	nop
   af668:	d503201f 	nop
   af66c:	d503201f 	nop
   af670:	d503201f 	nop
   af674:	d503201f 	nop
   af678:	d503201f 	nop
   af67c:	d503201f 	nop
   af680:	14000041 	b	af784 <UnexpectedStub>
   af684:	d503201f 	nop
   af688:	d503201f 	nop
   af68c:	d503201f 	nop
   af690:	d503201f 	nop
   af694:	d503201f 	nop
   af698:	d503201f 	nop
   af69c:	d503201f 	nop
   af6a0:	d503201f 	nop
   af6a4:	d503201f 	nop
   af6a8:	d503201f 	nop
   af6ac:	d503201f 	nop
   af6b0:	d503201f 	nop
   af6b4:	d503201f 	nop
   af6b8:	d503201f 	nop
   af6bc:	d503201f 	nop
   af6c0:	d503201f 	nop
   af6c4:	d503201f 	nop
   af6c8:	d503201f 	nop
   af6cc:	d503201f 	nop
   af6d0:	d503201f 	nop
   af6d4:	d503201f 	nop
   af6d8:	d503201f 	nop
   af6dc:	d503201f 	nop
   af6e0:	d503201f 	nop
   af6e4:	d503201f 	nop
   af6e8:	d503201f 	nop
   af6ec:	d503201f 	nop
   af6f0:	d503201f 	nop
   af6f4:	d503201f 	nop
   af6f8:	d503201f 	nop
   af6fc:	d503201f 	nop
   af700:	14000021 	b	af784 <UnexpectedStub>
   af704:	d503201f 	nop
   af708:	d503201f 	nop
   af70c:	d503201f 	nop
   af710:	d503201f 	nop
   af714:	d503201f 	nop
   af718:	d503201f 	nop
   af71c:	d503201f 	nop
   af720:	d503201f 	nop
   af724:	d503201f 	nop
   af728:	d503201f 	nop
   af72c:	d503201f 	nop
   af730:	d503201f 	nop
   af734:	d503201f 	nop
   af738:	d503201f 	nop
   af73c:	d503201f 	nop
   af740:	d503201f 	nop
   af744:	d503201f 	nop
   af748:	d503201f 	nop
   af74c:	d503201f 	nop
   af750:	d503201f 	nop
   af754:	d503201f 	nop
   af758:	d503201f 	nop
   af75c:	d503201f 	nop
   af760:	d503201f 	nop
   af764:	d503201f 	nop
   af768:	d503201f 	nop
   af76c:	d503201f 	nop
   af770:	d503201f 	nop
   af774:	d503201f 	nop
   af778:	d503201f 	nop
   af77c:	d503201f 	nop
   af780:	14000001 	b	af784 <UnexpectedStub>

00000000000af784 <UnexpectedStub>:
   af784:	d5385200 	mrs	x0, esr_el1
   af788:	d5384001 	mrs	x1, spsr_el1
   af78c:	aa1e03e2 	mov	x2, x30
   af790:	d5384023 	mrs	x3, elr_el1
   af794:	d5384104 	mrs	x4, sp_el0
   af798:	910003e5 	mov	x5, sp
   af79c:	d5386006 	mrs	x6, far_el1
   af7a0:	f81f0fe6 	str	x6, [sp, #-16]!
   af7a4:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   af7a8:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   af7ac:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   af7b0:	d2800000 	mov	x0, #0x0                   	// #0
   af7b4:	910003e1 	mov	x1, sp
   af7b8:	17ffe562 	b	a8d40 <ExceptionHandler>

00000000000af7bc <SynchronousStub>:
   af7bc:	d5385200 	mrs	x0, esr_el1
   af7c0:	d5384001 	mrs	x1, spsr_el1
   af7c4:	aa1e03e2 	mov	x2, x30
   af7c8:	d5384023 	mrs	x3, elr_el1
   af7cc:	d5384104 	mrs	x4, sp_el0
   af7d0:	910003e5 	mov	x5, sp
   af7d4:	d5386006 	mrs	x6, far_el1
   af7d8:	f81f0fe6 	str	x6, [sp, #-16]!
   af7dc:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   af7e0:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   af7e4:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   af7e8:	d2800020 	mov	x0, #0x1                   	// #1
   af7ec:	910003e1 	mov	x1, sp
   af7f0:	17ffe554 	b	a8d40 <ExceptionHandler>

00000000000af7f4 <SErrorStub>:
   af7f4:	d5385200 	mrs	x0, esr_el1
   af7f8:	d5384001 	mrs	x1, spsr_el1
   af7fc:	aa1e03e2 	mov	x2, x30
   af800:	d5384023 	mrs	x3, elr_el1
   af804:	d5384104 	mrs	x4, sp_el0
   af808:	910003e5 	mov	x5, sp
   af80c:	d5386006 	mrs	x6, far_el1
   af810:	f81f0fe6 	str	x6, [sp, #-16]!
   af814:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   af818:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   af81c:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   af820:	d2800040 	mov	x0, #0x2                   	// #2
   af824:	910003e1 	mov	x1, sp
   af828:	17ffe546 	b	a8d40 <ExceptionHandler>

00000000000af82c <IRQStub>:
   af82c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   af830:	d538403d 	mrs	x29, elr_el1
   af834:	d538401e 	mrs	x30, spsr_el1
   af838:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   af83c:	d50341ff 	msr	daifclr, #0x1
   af840:	a9bf73fb 	stp	x27, x28, [sp, #-16]!
   af844:	a9bf6bf9 	stp	x25, x26, [sp, #-16]!
   af848:	a9bf63f7 	stp	x23, x24, [sp, #-16]!
   af84c:	a9bf5bf5 	stp	x21, x22, [sp, #-16]!
   af850:	a9bf53f3 	stp	x19, x20, [sp, #-16]!
   af854:	a9bf4bf1 	stp	x17, x18, [sp, #-16]!
   af858:	a9bf43ef 	stp	x15, x16, [sp, #-16]!
   af85c:	a9bf3bed 	stp	x13, x14, [sp, #-16]!
   af860:	a9bf33eb 	stp	x11, x12, [sp, #-16]!
   af864:	a9bf2be9 	stp	x9, x10, [sp, #-16]!
   af868:	a9bf23e7 	stp	x7, x8, [sp, #-16]!
   af86c:	a9bf1be5 	stp	x5, x6, [sp, #-16]!
   af870:	a9bf13e3 	stp	x3, x4, [sp, #-16]!
   af874:	a9bf0be1 	stp	x1, x2, [sp, #-16]!
   af878:	f81f0fe0 	str	x0, [sp, #-16]!
   af87c:	580009e0 	ldr	x0, af9b8 <HVCStub+0x18>
   af880:	f900001d 	str	x29, [x0]
   af884:	97ffeedf 	bl	ab400 <InterruptHandler>
   af888:	f84107e0 	ldr	x0, [sp], #16
   af88c:	a8c10be1 	ldp	x1, x2, [sp], #16
   af890:	a8c113e3 	ldp	x3, x4, [sp], #16
   af894:	a8c11be5 	ldp	x5, x6, [sp], #16
   af898:	a8c123e7 	ldp	x7, x8, [sp], #16
   af89c:	a8c12be9 	ldp	x9, x10, [sp], #16
   af8a0:	a8c133eb 	ldp	x11, x12, [sp], #16
   af8a4:	a8c13bed 	ldp	x13, x14, [sp], #16
   af8a8:	a8c143ef 	ldp	x15, x16, [sp], #16
   af8ac:	a8c14bf1 	ldp	x17, x18, [sp], #16
   af8b0:	a8c153f3 	ldp	x19, x20, [sp], #16
   af8b4:	a8c15bf5 	ldp	x21, x22, [sp], #16
   af8b8:	a8c163f7 	ldp	x23, x24, [sp], #16
   af8bc:	a8c16bf9 	ldp	x25, x26, [sp], #16
   af8c0:	a8c173fb 	ldp	x27, x28, [sp], #16
   af8c4:	d50341df 	msr	daifset, #0x1
   af8c8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   af8cc:	d518403d 	msr	elr_el1, x29
   af8d0:	d518401e 	msr	spsr_el1, x30
   af8d4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   af8d8:	d69f03e0 	eret

00000000000af8dc <FIQStub>:
   af8dc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   af8e0:	a9bf73fb 	stp	x27, x28, [sp, #-16]!
   af8e4:	a9bf6bf9 	stp	x25, x26, [sp, #-16]!
   af8e8:	a9bf63f7 	stp	x23, x24, [sp, #-16]!
   af8ec:	a9bf5bf5 	stp	x21, x22, [sp, #-16]!
   af8f0:	a9bf53f3 	stp	x19, x20, [sp, #-16]!
   af8f4:	a9bf4bf1 	stp	x17, x18, [sp, #-16]!
   af8f8:	a9bf43ef 	stp	x15, x16, [sp, #-16]!
   af8fc:	a9bf3bed 	stp	x13, x14, [sp, #-16]!
   af900:	a9bf33eb 	stp	x11, x12, [sp, #-16]!
   af904:	a9bf2be9 	stp	x9, x10, [sp, #-16]!
   af908:	a9bf23e7 	stp	x7, x8, [sp, #-16]!
   af90c:	a9bf1be5 	stp	x5, x6, [sp, #-16]!
   af910:	a9bf13e3 	stp	x3, x4, [sp, #-16]!
   af914:	a9bf0be1 	stp	x1, x2, [sp, #-16]!
   af918:	f81f0fe0 	str	x0, [sp, #-16]!
   af91c:	58000522 	ldr	x2, af9c0 <HVCStub+0x20>
   af920:	f9400041 	ldr	x1, [x2]
   af924:	f100003f 	cmp	x1, #0x0
   af928:	54000280 	b.eq	af978 <FIQStub+0x9c>  // b.none
   af92c:	f9400440 	ldr	x0, [x2, #8]
   af930:	d63f0020 	blr	x1
   af934:	f84107e0 	ldr	x0, [sp], #16
   af938:	a8c10be1 	ldp	x1, x2, [sp], #16
   af93c:	a8c113e3 	ldp	x3, x4, [sp], #16
   af940:	a8c11be5 	ldp	x5, x6, [sp], #16
   af944:	a8c123e7 	ldp	x7, x8, [sp], #16
   af948:	a8c12be9 	ldp	x9, x10, [sp], #16
   af94c:	a8c133eb 	ldp	x11, x12, [sp], #16
   af950:	a8c13bed 	ldp	x13, x14, [sp], #16
   af954:	a8c143ef 	ldp	x15, x16, [sp], #16
   af958:	a8c14bf1 	ldp	x17, x18, [sp], #16
   af95c:	a8c153f3 	ldp	x19, x20, [sp], #16
   af960:	a8c15bf5 	ldp	x21, x22, [sp], #16
   af964:	a8c163f7 	ldp	x23, x24, [sp], #16
   af968:	a8c16bf9 	ldp	x25, x26, [sp], #16
   af96c:	a8c173fb 	ldp	x27, x28, [sp], #16
   af970:	a8c17bfd 	ldp	x29, x30, [sp], #16
   af974:	d69f03e0 	eret
   af978:	58000281 	ldr	x1, af9c8 <HVCStub+0x28>
   af97c:	52800000 	mov	w0, #0x0                   	// #0
   af980:	b9000020 	str	w0, [x1]
   af984:	17ffffec 	b	af934 <FIQStub+0x58>

00000000000af988 <SMCStub>:
   af988:	58000242 	ldr	x2, af9d0 <HVCStub+0x30>
   af98c:	9100005f 	mov	sp, x2
   af990:	f81f0ffe 	str	x30, [sp, #-16]!
   af994:	97ffef2b 	bl	ab640 <SecureMonitorHandler>
   af998:	f84107fe 	ldr	x30, [sp], #16
   af99c:	d69f03e0 	eret

00000000000af9a0 <HVCStub>:
   af9a0:	d53c4000 	mrs	x0, spsr_el2
   af9a4:	927cec00 	and	x0, x0, #0xfffffffffffffff0
   af9a8:	d2800121 	mov	x1, #0x9                   	// #9
   af9ac:	aa010000 	orr	x0, x0, x1
   af9b0:	d51c4000 	msr	spsr_el2, x0
   af9b4:	d69f03e0 	eret
   af9b8:	000bd070 	.word	0x000bd070
   af9bc:	00000000 	.word	0x00000000
   af9c0:	000bd058 	.word	0x000bd058
   af9c4:	00000000 	.word	0x00000000
   af9c8:	fe00b20c 	.word	0xfe00b20c
   af9cc:	00000000 	.word	0x00000000
   af9d0:	000bd390 	.word	0x000bd390
	...

00000000000af9e0 <CDMA4Channel::CDMA4Channel(unsigned int, CInterruptSystem*)>:
   af9e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   af9e4:	910003fd 	mov	x29, sp
   af9e8:	7100283f 	cmp	w1, #0xa
   af9ec:	a90153f3 	stp	x19, x20, [sp, #16]
   af9f0:	b9000001 	str	w1, [x0]
   af9f4:	b900281f 	str	wzr, [x0, #40]
   af9f8:	f9002802 	str	x2, [x0, #80]
   af9fc:	3901601f 	strb	wzr, [x0, #88]
   afa00:	a9067c1f 	stp	xzr, xzr, [x0, #96]
   afa04:	3901c01f 	strb	wzr, [x0, #112]
   afa08:	54000549 	b.ls	afab0 <CDMA4Channel::CDMA4Channel(unsigned int, CInterruptSystem*)+0xd0>  // b.plast
   afa0c:	7100383f 	cmp	w1, #0xe
   afa10:	aa0003f3 	mov	x19, x0
   afa14:	d2800034 	mov	x20, #0x1                   	// #1
   afa18:	54000568 	b.hi	afac4 <CDMA4Channel::CDMA4Channel(unsigned int, CInterruptSystem*)+0xe4>  // b.pmore
   afa1c:	52800041 	mov	w1, #0x2                   	// #2
   afa20:	d2800400 	mov	x0, #0x20                  	// #32
   afa24:	97ffe1b7 	bl	a8100 <operator new(unsigned long, int)>
   afa28:	f8347a60 	str	x0, [x19, x20, lsl #3]
   afa2c:	91000694 	add	x20, x20, #0x1
   afa30:	f100169f 	cmp	x20, #0x5
   afa34:	3900701f 	strb	wzr, [x0, #28]
   afa38:	3900741f 	strb	wzr, [x0, #29]
   afa3c:	3900781f 	strb	wzr, [x0, #30]
   afa40:	39007c1f 	strb	wzr, [x0, #31]
   afa44:	54fffec1 	b.ne	afa1c <CDMA4Channel::CDMA4Channel(unsigned int, CInterruptSystem*)+0x3c>  // b.any
   afa48:	b9400264 	ldr	w4, [x19]
   afa4c:	52800e14 	mov	w20, #0x70                  	// #112
   afa50:	72a01fd4 	movk	w20, #0xfe, lsl #16
   afa54:	d28ffe03 	mov	x3, #0x7ff0                	// #32752
   afa58:	f2bfc003 	movk	x3, #0xfe00, lsl #16
   afa5c:	52800022 	mov	w2, #0x1                   	// #1
   afa60:	52807d00 	mov	w0, #0x3e8                 	// #1000
   afa64:	0b140081 	add	w1, w4, w20
   afa68:	1ac42042 	lsl	w2, w2, w4
   afa6c:	53185c21 	lsl	w1, w1, #8
   afa70:	11001021 	add	w1, w1, #0x4
   afa74:	b900003f 	str	wzr, [x1]
   afa78:	b9400061 	ldr	w1, [x3]
   afa7c:	2a010041 	orr	w1, w2, w1
   afa80:	b9000061 	str	w1, [x3]
   afa84:	97ffdd57 	bl	a6fe0 <CTimer::SimpleusDelay(unsigned int)>
   afa88:	b9400261 	ldr	w1, [x19]
   afa8c:	52a01002 	mov	w2, #0x800000              	// #8388608
   afa90:	52807d00 	mov	w0, #0x3e8                 	// #1000
   afa94:	0b140021 	add	w1, w1, w20
   afa98:	a94153f3 	ldp	x19, x20, [sp, #16]
   afa9c:	53185c21 	lsl	w1, w1, #8
   afaa0:	11003021 	add	w1, w1, #0xc
   afaa4:	b9000022 	str	w2, [x1]
   afaa8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   afaac:	17ffdd4d 	b	a6fe0 <CTimer::SimpleusDelay(unsigned int)>
   afab0:	b0000061 	adrp	x1, bc000 <font_data+0x9a8>
   afab4:	91256021 	add	x1, x1, #0x958
   afab8:	91004020 	add	x0, x1, #0x10
   afabc:	52800ea2 	mov	w2, #0x75                  	// #117
   afac0:	97ffb8a0 	bl	9dd40 <assertion_failed>
   afac4:	b0000061 	adrp	x1, bc000 <font_data+0x9a8>
   afac8:	91256021 	add	x1, x1, #0x958
   afacc:	9100c020 	add	x0, x1, #0x30
   afad0:	52800ec2 	mov	w2, #0x76                  	// #118
   afad4:	97ffb89b 	bl	9dd40 <assertion_failed>
   afad8:	d503201f 	nop
   afadc:	d503201f 	nop

00000000000afae0 <CDMA4Channel::~CDMA4Channel()>:
   afae0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   afae4:	910003fd 	mov	x29, sp
   afae8:	a90153f3 	stp	x19, x20, [sp, #16]
   afaec:	aa0003f4 	mov	x20, x0
   afaf0:	b9400000 	ldr	w0, [x0]
   afaf4:	7100281f 	cmp	w0, #0xa
   afaf8:	54000549 	b.ls	afba0 <CDMA4Channel::~CDMA4Channel()+0xc0>  // b.plast
   afafc:	7100381f 	cmp	w0, #0xe
   afb00:	540005a8 	b.hi	afbb4 <CDMA4Channel::~CDMA4Channel()+0xd4>  // b.pmore
   afb04:	117f8001 	add	w1, w0, #0xfe0, lsl #12
   afb08:	52a01002 	mov	w2, #0x800000              	// #8388608
   afb0c:	1101c021 	add	w1, w1, #0x70
   afb10:	52807d00 	mov	w0, #0x3e8                 	// #1000
   afb14:	53185c21 	lsl	w1, w1, #8
   afb18:	11003021 	add	w1, w1, #0xc
   afb1c:	b9000022 	str	w2, [x1]
   afb20:	97ffdd30 	bl	a6fe0 <CTimer::SimpleusDelay(unsigned int)>
   afb24:	b9400284 	ldr	w4, [x20]
   afb28:	d28ffe02 	mov	x2, #0x7ff0                	// #32752
   afb2c:	f2bfc002 	movk	x2, #0xfe00, lsl #16
   afb30:	52800021 	mov	w1, #0x1                   	// #1
   afb34:	b9400043 	ldr	w3, [x2]
   afb38:	f9402a80 	ldr	x0, [x20, #80]
   afb3c:	1ac42021 	lsl	w1, w1, w4
   afb40:	0a210061 	bic	w1, w3, w1
   afb44:	b9000041 	str	w1, [x2]
   afb48:	f900329f 	str	xzr, [x20, #96]
   afb4c:	b4000120 	cbz	x0, afb70 <CDMA4Channel::~CDMA4Channel()+0x90>
   afb50:	39416281 	ldrb	w1, [x20, #88]
   afb54:	340000c1 	cbz	w1, afb6c <CDMA4Channel::~CDMA4Channel()+0x8c>
   afb58:	b9400281 	ldr	w1, [x20]
   afb5c:	7100283f 	cmp	w1, #0xa
   afb60:	54000349 	b.ls	afbc8 <CDMA4Channel::~CDMA4Channel()+0xe8>  // b.plast
   afb64:	1101b821 	add	w1, w1, #0x6e
   afb68:	97ffec96 	bl	aadc0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   afb6c:	f9002a9f 	str	xzr, [x20, #80]
   afb70:	d2800033 	mov	x19, #0x1                   	// #1
   afb74:	f8737a80 	ldr	x0, [x20, x19, lsl #3]
   afb78:	b4000060 	cbz	x0, afb84 <CDMA4Channel::~CDMA4Channel()+0xa4>
   afb7c:	d2800401 	mov	x1, #0x20                  	// #32
   afb80:	97ffe1e0 	bl	a8300 <operator delete(void*, unsigned long)>
   afb84:	f8337a9f 	str	xzr, [x20, x19, lsl #3]
   afb88:	91000673 	add	x19, x19, #0x1
   afb8c:	f100167f 	cmp	x19, #0x5
   afb90:	54ffff21 	b.ne	afb74 <CDMA4Channel::~CDMA4Channel()+0x94>  // b.any
   afb94:	a94153f3 	ldp	x19, x20, [sp, #16]
   afb98:	a8c27bfd 	ldp	x29, x30, [sp], #32
   afb9c:	d65f03c0 	ret
   afba0:	b0000061 	adrp	x1, bc000 <font_data+0x9a8>
   afba4:	91256021 	add	x1, x1, #0x958
   afba8:	91004020 	add	x0, x1, #0x10
   afbac:	52801202 	mov	w2, #0x90                  	// #144
   afbb0:	97ffb864 	bl	9dd40 <assertion_failed>
   afbb4:	b0000061 	adrp	x1, bc000 <font_data+0x9a8>
   afbb8:	91256021 	add	x1, x1, #0x958
   afbbc:	9100c020 	add	x0, x1, #0x30
   afbc0:	52801222 	mov	w2, #0x91                  	// #145
   afbc4:	97ffb85f 	bl	9dd40 <assertion_failed>
   afbc8:	b0000061 	adrp	x1, bc000 <font_data+0x9a8>
   afbcc:	91256021 	add	x1, x1, #0x958
   afbd0:	91014020 	add	x0, x1, #0x50
   afbd4:	52801422 	mov	w2, #0xa1                  	// #161
   afbd8:	97ffb85a 	bl	9dd40 <assertion_failed>
   afbdc:	d503201f 	nop

00000000000afbe0 <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)>:
   afbe0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   afbe4:	910003fd 	mov	x29, sp
   afbe8:	a90153f3 	stp	x19, x20, [sp, #16]
   afbec:	f90013f5 	str	x21, [sp, #32]
   afbf0:	b4000ac1 	cbz	x1, afd48 <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x168>
   afbf4:	b4000b42 	cbz	x2, afd5c <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x17c>
   afbf8:	aa0303f3 	mov	x19, x3
   afbfc:	b4000ba3 	cbz	x3, afd70 <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x190>
   afc00:	71003c9f 	cmp	w4, #0xf
   afc04:	54000c08 	b.hi	afd84 <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x1a4>  // b.pmore
   afc08:	f9400406 	ldr	x6, [x0, #8]
   afc0c:	aa0003f5 	mov	x21, x0
   afc10:	b4000c46 	cbz	x6, afd98 <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x1b8>
   afc14:	b24077e0 	mov	x0, #0x3fffffff            	// #1073741823
   afc18:	eb00007f 	cmp	x3, x0
   afc1c:	54000c88 	b.hi	afdac <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x1cc>  // b.pmore
   afc20:	53185c84 	lsl	w4, w4, #8
   afc24:	d3609c47 	ubfx	x7, x2, #32, #8
   afc28:	390000df 	strb	wzr, [x6]
   afc2c:	2a0400e7 	orr	w7, w7, w4
   afc30:	528a0000 	mov	w0, #0x5000                	// #20480
   afc34:	390004df 	strb	wzr, [x6, #1]
   afc38:	aa0103f4 	mov	x20, x1
   afc3c:	d3609c23 	ubfx	x3, x1, #32, #8
   afc40:	390008df 	strb	wzr, [x6, #2]
   afc44:	2a0000e1 	orr	w1, w7, w0
   afc48:	2a040063 	orr	w3, w3, w4
   afc4c:	390020c7 	strb	w7, [x6, #8]
   afc50:	d3483c24 	ubfx	x4, x1, #8, #8
   afc54:	d3505c28 	ubfx	x8, x1, #16, #8
   afc58:	39000cdf 	strb	wzr, [x6, #3]
   afc5c:	53187c21 	lsr	w1, w1, #24
   afc60:	2a000060 	orr	w0, w3, w0
   afc64:	390010c2 	strb	w2, [x6, #4]
   afc68:	390024c4 	strb	w4, [x6, #9]
   afc6c:	53083c44 	ubfx	w4, w2, #8, #8
   afc70:	d3483c0e 	ubfx	x14, x0, #8, #8
   afc74:	d3505c0d 	ubfx	x13, x0, #16, #8
   afc78:	53105c4c 	ubfx	w12, w2, #16, #8
   afc7c:	390028c8 	strb	w8, [x6, #10]
   afc80:	53187c00 	lsr	w0, w0, #24
   afc84:	53187c4b 	lsr	w11, w2, #24
   afc88:	390014c4 	strb	w4, [x6, #5]
   afc8c:	53083e8a 	ubfx	w10, w20, #8, #8
   afc90:	53105e89 	ubfx	w9, w20, #16, #8
   afc94:	39002cc1 	strb	w1, [x6, #11]
   afc98:	53187e88 	lsr	w8, w20, #24
   afc9c:	53083e67 	ubfx	w7, w19, #8, #8
   afca0:	390018cc 	strb	w12, [x6, #6]
   afca4:	53105e64 	ubfx	w4, w19, #16, #8
   afca8:	53187e61 	lsr	w1, w19, #24
   afcac:	39001ccb 	strb	w11, [x6, #7]
   afcb0:	12001ca5 	and	w5, w5, #0xff
   afcb4:	390030d4 	strb	w20, [x6, #12]
   afcb8:	390034ca 	strb	w10, [x6, #13]
   afcbc:	390038c9 	strb	w9, [x6, #14]
   afcc0:	39003cc8 	strb	w8, [x6, #15]
   afcc4:	390040c3 	strb	w3, [x6, #16]
   afcc8:	390044ce 	strb	w14, [x6, #17]
   afccc:	390048cd 	strb	w13, [x6, #18]
   afcd0:	39004cc0 	strb	w0, [x6, #19]
   afcd4:	390050d3 	strb	w19, [x6, #20]
   afcd8:	390054c7 	strb	w7, [x6, #21]
   afcdc:	390058c4 	strb	w4, [x6, #22]
   afce0:	39005cc1 	strb	w1, [x6, #23]
   afce4:	390060df 	strb	wzr, [x6, #24]
   afce8:	390064df 	strb	wzr, [x6, #25]
   afcec:	390068df 	strb	wzr, [x6, #26]
   afcf0:	39006cdf 	strb	wzr, [x6, #27]
   afcf4:	35000105 	cbnz	w5, afd14 <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned long, unsigned int, bool)+0x134>
   afcf8:	52800020 	mov	w0, #0x1                   	// #1
   afcfc:	f9003ebf 	str	xzr, [x21, #120]
   afd00:	a94153f3 	ldp	x19, x20, [sp, #16]
   afd04:	b9002aa0 	str	w0, [x21, #40]
   afd08:	f94013f5 	ldr	x21, [sp, #32]
   afd0c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   afd10:	d65f03c0 	ret
   afd14:	aa0203e0 	mov	x0, x2
   afd18:	aa1303e1 	mov	x1, x19
   afd1c:	a907ceb4 	stp	x20, x19, [x21, #120]
   afd20:	97ffe61c 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   afd24:	aa1303e1 	mov	x1, x19
   afd28:	aa1403e0 	mov	x0, x20
   afd2c:	97ffe619 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   afd30:	52800020 	mov	w0, #0x1                   	// #1
   afd34:	a94153f3 	ldp	x19, x20, [sp, #16]
   afd38:	b9002aa0 	str	w0, [x21, #40]
   afd3c:	f94013f5 	ldr	x21, [sp, #32]
   afd40:	a8c37bfd 	ldp	x29, x30, [sp], #48
   afd44:	d65f03c0 	ret
   afd48:	b0000061 	adrp	x1, bc000 <font_data+0x9a8>
   afd4c:	91256021 	add	x1, x1, #0x958
   afd50:	9101a020 	add	x0, x1, #0x68
   afd54:	528016c2 	mov	w2, #0xb6                  	// #182
   afd58:	97ffb7fa 	bl	9dd40 <assertion_failed>
   afd5c:	b0000061 	adrp	x1, bc000 <font_data+0x9a8>
   afd60:	91256021 	add	x1, x1, #0x958
   afd64:	91020020 	add	x0, x1, #0x80
   afd68:	528016e2 	mov	w2, #0xb7                  	// #183
   afd6c:	97ffb7f5 	bl	9dd40 <assertion_failed>
   afd70:	b0000061 	adrp	x1, bc000 <font_data+0x9a8>
   afd74:	91256021 	add	x1, x1, #0x958
   afd78:	91024020 	add	x0, x1, #0x90
   afd7c:	52801702 	mov	w2, #0xb8                  	// #184
   afd80:	97ffb7f0 	bl	9dd40 <assertion_failed>
   afd84:	b0000061 	adrp	x1, bc000 <font_data+0x9a8>
   afd88:	91256021 	add	x1, x1, #0x958
   afd8c:	91028020 	add	x0, x1, #0xa0
   afd90:	52801722 	mov	w2, #0xb9                  	// #185
   afd94:	97ffb7eb 	bl	9dd40 <assertion_failed>
   afd98:	b0000061 	adrp	x1, bc000 <font_data+0x9a8>
   afd9c:	91256021 	add	x1, x1, #0x958
   afda0:	91030020 	add	x0, x1, #0xc0
   afda4:	52801762 	mov	w2, #0xbb                  	// #187
   afda8:	97ffb7e6 	bl	9dd40 <assertion_failed>
   afdac:	b0000061 	adrp	x1, bc000 <font_data+0x9a8>
   afdb0:	91256021 	add	x1, x1, #0x958
   afdb4:	91036020 	add	x0, x1, #0xd8
   afdb8:	52801782 	mov	w2, #0xbc                  	// #188
   afdbc:	97ffb7e1 	bl	9dd40 <assertion_failed>

00000000000afdc0 <CDMA4Channel::SetupIORead(void*, unsigned long, unsigned long, TDREQ)>:
   afdc0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   afdc4:	910003fd 	mov	x29, sp
   afdc8:	f9000bf3 	str	x19, [sp, #16]
   afdcc:	b4000861 	cbz	x1, afed8 <CDMA4Channel::SetupIORead(void*, unsigned long, unsigned long, TDREQ)+0x118>
   afdd0:	b40008e3 	cbz	x3, afeec <CDMA4Channel::SetupIORead(void*, unsigned long, unsigned long, TDREQ)+0x12c>
   afdd4:	aa0003f3 	mov	x19, x0
   afdd8:	b24077e0 	mov	x0, #0x3fffffff            	// #1073741823
   afddc:	eb00007f 	cmp	x3, x0
   afde0:	54000908 	b.hi	aff00 <CDMA4Channel::SetupIORead(void*, unsigned long, unsigned long, TDREQ)+0x140>  // b.pmore
   afde4:	f2405c42 	ands	x2, x2, #0xffffff
   afde8:	54000960 	b.eq	aff14 <CDMA4Channel::SetupIORead(void*, unsigned long, unsigned long, TDREQ)+0x154>  // b.none
   afdec:	d2afc000 	mov	x0, #0x7e000000            	// #2113929216
   afdf0:	f9400665 	ldr	x5, [x19, #8]
   afdf4:	8b000042 	add	x2, x2, x0
   afdf8:	b4000985 	cbz	x5, aff28 <CDMA4Channel::SetupIORead(void*, unsigned long, unsigned long, TDREQ)+0x168>
   afdfc:	52880180 	mov	w0, #0x400c                	// #16396
   afe00:	53083c48 	ubfx	w8, w2, #8, #8
   afe04:	390010a2 	strb	w2, [x5, #4]
   afe08:	2a042404 	orr	w4, w0, w4, lsl #9
   afe0c:	53105c47 	ubfx	w7, w2, #16, #8
   afe10:	aa0103e6 	mov	x6, x1
   afe14:	53083c2e 	ubfx	w14, w1, #8, #8
   afe18:	53187c42 	lsr	w2, w2, #24
   afe1c:	390000a0 	strb	w0, [x5]
   afe20:	5280008f 	mov	w15, #0x4                   	// #4
   afe24:	53087c81 	lsr	w1, w4, #8
   afe28:	390014a8 	strb	w8, [x5, #5]
   afe2c:	d3505c80 	ubfx	x0, x4, #16, #8
   afe30:	53105ccd 	ubfx	w13, w6, #16, #8
   afe34:	390018a7 	strb	w7, [x5, #6]
   afe38:	53187c84 	lsr	w4, w4, #24
   afe3c:	53187ccc 	lsr	w12, w6, #24
   afe40:	390004a1 	strb	w1, [x5, #1]
   afe44:	d3609ccb 	ubfx	x11, x6, #32, #8
   afe48:	52800a0a 	mov	w10, #0x50                  	// #80
   afe4c:	390008a0 	strb	w0, [x5, #2]
   afe50:	53083c69 	ubfx	w9, w3, #8, #8
   afe54:	53105c68 	ubfx	w8, w3, #16, #8
   afe58:	39000ca4 	strb	w4, [x5, #3]
   afe5c:	53187c67 	lsr	w7, w3, #24
   afe60:	39001ca2 	strb	w2, [x5, #7]
   afe64:	aa0603e0 	mov	x0, x6
   afe68:	390020af 	strb	w15, [x5, #8]
   afe6c:	aa0303e1 	mov	x1, x3
   afe70:	390024bf 	strb	wzr, [x5, #9]
   afe74:	390028bf 	strb	wzr, [x5, #10]
   afe78:	39002cbf 	strb	wzr, [x5, #11]
   afe7c:	390030a6 	strb	w6, [x5, #12]
   afe80:	390034ae 	strb	w14, [x5, #13]
   afe84:	390038ad 	strb	w13, [x5, #14]
   afe88:	39003cac 	strb	w12, [x5, #15]
   afe8c:	390040ab 	strb	w11, [x5, #16]
   afe90:	390044aa 	strb	w10, [x5, #17]
   afe94:	390048bf 	strb	wzr, [x5, #18]
   afe98:	39004cbf 	strb	wzr, [x5, #19]
   afe9c:	390050a3 	strb	w3, [x5, #20]
   afea0:	390054a9 	strb	w9, [x5, #21]
   afea4:	390058a8 	strb	w8, [x5, #22]
   afea8:	39005ca7 	strb	w7, [x5, #23]
   afeac:	390060bf 	strb	wzr, [x5, #24]
   afeb0:	390064bf 	strb	wzr, [x5, #25]
   afeb4:	390068bf 	strb	wzr, [x5, #26]
   afeb8:	39006cbf 	strb	wzr, [x5, #27]
   afebc:	a9078e66 	stp	x6, x3, [x19, #120]
   afec0:	97ffe5b4 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   afec4:	52800020 	mov	w0, #0x1                   	// #1
   afec8:	b9002a60 	str	w0, [x19, #40]
   afecc:	f9400bf3 	ldr	x19, [sp, #16]
   afed0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   afed4:	d65f03c0 	ret
   afed8:	b0000061 	adrp	x1, bc000 <font_data+0x9a8>
   afedc:	91256021 	add	x1, x1, #0x958
   afee0:	9101a020 	add	x0, x1, #0x68
   afee4:	52801c02 	mov	w2, #0xe0                  	// #224
   afee8:	97ffb796 	bl	9dd40 <assertion_failed>
   afeec:	b0000061 	adrp	x1, bc000 <font_data+0x9a8>
   afef0:	91256021 	add	x1, x1, #0x958
   afef4:	91024020 	add	x0, x1, #0x90
   afef8:	52801c22 	mov	w2, #0xe1                  	// #225
   afefc:	97ffb791 	bl	9dd40 <assertion_failed>
   aff00:	b0000061 	adrp	x1, bc000 <font_data+0x9a8>
   aff04:	91256021 	add	x1, x1, #0x958
   aff08:	91036020 	add	x0, x1, #0xd8
   aff0c:	52801c42 	mov	w2, #0xe2                  	// #226
   aff10:	97ffb78c 	bl	9dd40 <assertion_failed>
   aff14:	b0000061 	adrp	x1, bc000 <font_data+0x9a8>
   aff18:	91256021 	add	x1, x1, #0x958
   aff1c:	9103e020 	add	x0, x1, #0xf8
   aff20:	52801cc2 	mov	w2, #0xe6                  	// #230
   aff24:	97ffb787 	bl	9dd40 <assertion_failed>
   aff28:	b0000061 	adrp	x1, bc000 <font_data+0x9a8>
   aff2c:	91256021 	add	x1, x1, #0x958
   aff30:	91030020 	add	x0, x1, #0xc0
   aff34:	52801d42 	mov	w2, #0xea                  	// #234
   aff38:	97ffb782 	bl	9dd40 <assertion_failed>
   aff3c:	d503201f 	nop

00000000000aff40 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)>:
   aff40:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   aff44:	910003fd 	mov	x29, sp
   aff48:	f9000bf3 	str	x19, [sp, #16]
   aff4c:	b4000862 	cbz	x2, b0058 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0x118>
   aff50:	aa0103e6 	mov	x6, x1
   aff54:	aa0303e1 	mov	x1, x3
   aff58:	b40008a3 	cbz	x3, b006c <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0x12c>
   aff5c:	aa0003f3 	mov	x19, x0
   aff60:	b24077e0 	mov	x0, #0x3fffffff            	// #1073741823
   aff64:	eb00007f 	cmp	x3, x0
   aff68:	540008c8 	b.hi	b0080 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0x140>  // b.pmore
   aff6c:	f2405cc6 	ands	x6, x6, #0xffffff
   aff70:	54000920 	b.eq	b0094 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0x154>  // b.none
   aff74:	d2afc000 	mov	x0, #0x7e000000            	// #2113929216
   aff78:	f9400665 	ldr	x5, [x19, #8]
   aff7c:	8b0000c6 	add	x6, x6, x0
   aff80:	b4000945 	cbz	x5, b00a8 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0x168>
   aff84:	52900180 	mov	w0, #0x800c                	// #32780
   aff88:	53083c48 	ubfx	w8, w2, #8, #8
   aff8c:	390010a2 	strb	w2, [x5, #4]
   aff90:	2a042404 	orr	w4, w0, w4, lsl #9
   aff94:	53105c47 	ubfx	w7, w2, #16, #8
   aff98:	53187c4f 	lsr	w15, w2, #24
   aff9c:	d3609c4e 	ubfx	x14, x2, #32, #8
   affa0:	52800a0d 	mov	w13, #0x50                  	// #80
   affa4:	390000a0 	strb	w0, [x5]
   affa8:	53087c83 	lsr	w3, w4, #8
   affac:	d3505c80 	ubfx	x0, x4, #16, #8
   affb0:	390014a8 	strb	w8, [x5, #5]
   affb4:	53187c84 	lsr	w4, w4, #24
   affb8:	53083ccc 	ubfx	w12, w6, #8, #8
   affbc:	390018a7 	strb	w7, [x5, #6]
   affc0:	53105ccb 	ubfx	w11, w6, #16, #8
   affc4:	53187cca 	lsr	w10, w6, #24
   affc8:	390004a3 	strb	w3, [x5, #1]
   affcc:	52800089 	mov	w9, #0x4                   	// #4
   affd0:	53083c28 	ubfx	w8, w1, #8, #8
   affd4:	390008a0 	strb	w0, [x5, #2]
   affd8:	53105c27 	ubfx	w7, w1, #16, #8
   affdc:	53187c23 	lsr	w3, w1, #24
   affe0:	39000ca4 	strb	w4, [x5, #3]
   affe4:	39001caf 	strb	w15, [x5, #7]
   affe8:	aa0203e0 	mov	x0, x2
   affec:	390020ae 	strb	w14, [x5, #8]
   afff0:	390024ad 	strb	w13, [x5, #9]
   afff4:	390028bf 	strb	wzr, [x5, #10]
   afff8:	39002cbf 	strb	wzr, [x5, #11]
   afffc:	390030a6 	strb	w6, [x5, #12]
   b0000:	390034ac 	strb	w12, [x5, #13]
   b0004:	390038ab 	strb	w11, [x5, #14]
   b0008:	39003caa 	strb	w10, [x5, #15]
   b000c:	390040a9 	strb	w9, [x5, #16]
   b0010:	390044bf 	strb	wzr, [x5, #17]
   b0014:	390048bf 	strb	wzr, [x5, #18]
   b0018:	39004cbf 	strb	wzr, [x5, #19]
   b001c:	390050a1 	strb	w1, [x5, #20]
   b0020:	390054a8 	strb	w8, [x5, #21]
   b0024:	390058a7 	strb	w7, [x5, #22]
   b0028:	39005ca3 	strb	w3, [x5, #23]
   b002c:	390060bf 	strb	wzr, [x5, #24]
   b0030:	390064bf 	strb	wzr, [x5, #25]
   b0034:	390068bf 	strb	wzr, [x5, #26]
   b0038:	39006cbf 	strb	wzr, [x5, #27]
   b003c:	f9003e7f 	str	xzr, [x19, #120]
   b0040:	97ffe554 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   b0044:	52800020 	mov	w0, #0x1                   	// #1
   b0048:	b9002a60 	str	w0, [x19, #40]
   b004c:	f9400bf3 	ldr	x19, [sp, #16]
   b0050:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b0054:	d65f03c0 	ret
   b0058:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b005c:	91256021 	add	x1, x1, #0x958
   b0060:	91020020 	add	x0, x1, #0x80
   b0064:	52802142 	mov	w2, #0x10a                 	// #266
   b0068:	97ffb736 	bl	9dd40 <assertion_failed>
   b006c:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0070:	91256021 	add	x1, x1, #0x958
   b0074:	91024020 	add	x0, x1, #0x90
   b0078:	52802162 	mov	w2, #0x10b                 	// #267
   b007c:	97ffb731 	bl	9dd40 <assertion_failed>
   b0080:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0084:	91256021 	add	x1, x1, #0x958
   b0088:	91036020 	add	x0, x1, #0xd8
   b008c:	52802182 	mov	w2, #0x10c                 	// #268
   b0090:	97ffb72c 	bl	9dd40 <assertion_failed>
   b0094:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0098:	91256021 	add	x1, x1, #0x958
   b009c:	9103e020 	add	x0, x1, #0xf8
   b00a0:	52802202 	mov	w2, #0x110                 	// #272
   b00a4:	97ffb727 	bl	9dd40 <assertion_failed>
   b00a8:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b00ac:	91256021 	add	x1, x1, #0x958
   b00b0:	91030020 	add	x0, x1, #0xc0
   b00b4:	52802282 	mov	w2, #0x114                 	// #276
   b00b8:	97ffb722 	bl	9dd40 <assertion_failed>
   b00bc:	d503201f 	nop

00000000000b00c0 <CDMA4Channel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)>:
   b00c0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   b00c4:	910003fd 	mov	x29, sp
   b00c8:	a90153f3 	stp	x19, x20, [sp, #16]
   b00cc:	b4000f22 	cbz	x2, b02b0 <CDMA4Channel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)+0x1f0>
   b00d0:	aa0403f4 	mov	x20, x4
   b00d4:	b4001004 	cbz	x4, b02d4 <CDMA4Channel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)+0x214>
   b00d8:	a90573fb 	stp	x27, x28, [sp, #80]
   b00dc:	aa0003fb 	mov	x27, x0
   b00e0:	b24077e0 	mov	x0, #0x3fffffff            	// #1073741823
   b00e4:	eb00009f 	cmp	x4, x0
   b00e8:	a9025bf5 	stp	x21, x22, [sp, #32]
   b00ec:	54001068 	b.hi	b02f8 <CDMA4Channel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)+0x238>  // b.pmore
   b00f0:	f2405c21 	ands	x1, x1, #0xffffff
   b00f4:	54001100 	b.eq	b0314 <CDMA4Channel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)+0x254>  // b.none
   b00f8:	d2afc000 	mov	x0, #0x7e000000            	// #2113929216
   b00fc:	a9046bf9 	stp	x25, x26, [sp, #64]
   b0100:	2a0303fa 	mov	w26, w3
   b0104:	8b000035 	add	x21, x1, x0
   b0108:	340009a3 	cbz	w3, b023c <CDMA4Channel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)+0x17c>
   b010c:	aa0203f6 	mov	x22, x2
   b0110:	9100c37c 	add	x28, x27, #0x30
   b0114:	a90363f7 	stp	x23, x24, [sp, #48]
   b0118:	52900197 	mov	w23, #0x800c                	// #32780
   b011c:	d2800013 	mov	x19, #0x0                   	// #0
   b0120:	2a0526f9 	orr	w25, w23, w5, lsl #9
   b0124:	927e06f7 	and	x23, x23, #0xc
   b0128:	53087f38 	lsr	w24, w25, #8
   b012c:	92401f18 	and	x24, x24, #0xff
   b0130:	f94002c0 	ldr	x0, [x22]
   b0134:	b4000aa0 	cbz	x0, b0288 <CDMA4Channel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)+0x1c8>
   b0138:	f85d8385 	ldur	x5, [x28, #-40]
   b013c:	b4000b05 	cbz	x5, b029c <CDMA4Channel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)+0x1dc>
   b0140:	d3505f23 	ubfx	x3, x25, #16, #8
   b0144:	53187f22 	lsr	w2, w25, #24
   b0148:	390000b7 	strb	w23, [x5]
   b014c:	53083c01 	ubfx	w1, w0, #8, #8
   b0150:	53105c09 	ubfx	w9, w0, #16, #8
   b0154:	390004b8 	strb	w24, [x5, #1]
   b0158:	53187c08 	lsr	w8, w0, #24
   b015c:	d3609c0c 	ubfx	x12, x0, #32, #8
   b0160:	390008a3 	strb	w3, [x5, #2]
   b0164:	52800a0b 	mov	w11, #0x50                  	// #80
   b0168:	53083ea3 	ubfx	w3, w21, #8, #8
   b016c:	39000ca2 	strb	w2, [x5, #3]
   b0170:	53105ea7 	ubfx	w7, w21, #16, #8
   b0174:	53187ea6 	lsr	w6, w21, #24
   b0178:	390014a1 	strb	w1, [x5, #5]
   b017c:	5280008a 	mov	w10, #0x4                   	// #4
   b0180:	53083e84 	ubfx	w4, w20, #8, #8
   b0184:	390010a0 	strb	w0, [x5, #4]
   b0188:	53105e82 	ubfx	w2, w20, #16, #8
   b018c:	53187e81 	lsr	w1, w20, #24
   b0190:	390018a9 	strb	w9, [x5, #6]
   b0194:	7100075f 	cmp	w26, #0x1
   b0198:	39001ca8 	strb	w8, [x5, #7]
   b019c:	390020ac 	strb	w12, [x5, #8]
   b01a0:	390024ab 	strb	w11, [x5, #9]
   b01a4:	390028bf 	strb	wzr, [x5, #10]
   b01a8:	39002cbf 	strb	wzr, [x5, #11]
   b01ac:	390030b5 	strb	w21, [x5, #12]
   b01b0:	390034a3 	strb	w3, [x5, #13]
   b01b4:	390038a7 	strb	w7, [x5, #14]
   b01b8:	39003ca6 	strb	w6, [x5, #15]
   b01bc:	390040aa 	strb	w10, [x5, #16]
   b01c0:	390044bf 	strb	wzr, [x5, #17]
   b01c4:	390048bf 	strb	wzr, [x5, #18]
   b01c8:	39004cbf 	strb	wzr, [x5, #19]
   b01cc:	390050b4 	strb	w20, [x5, #20]
   b01d0:	390054a4 	strb	w4, [x5, #21]
   b01d4:	390058a2 	strb	w2, [x5, #22]
   b01d8:	39005ca1 	strb	w1, [x5, #23]
   b01dc:	54000400 	b.eq	b025c <CDMA4Channel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)+0x19c>  // b.none
   b01e0:	51000741 	sub	w1, w26, #0x1
   b01e4:	6b01027f 	cmp	w19, w1
   b01e8:	1a9307e1 	csinc	w1, wzr, w19, eq	// eq = none
   b01ec:	8b214f61 	add	x1, x27, w1, uxtw #3
   b01f0:	f9400422 	ldr	x2, [x1, #8]
   b01f4:	aa1403e1 	mov	x1, x20
   b01f8:	11000673 	add	w19, w19, #0x1
   b01fc:	53053046 	ubfx	w6, w2, #5, #8
   b0200:	530d5044 	ubfx	w4, w2, #13, #8
   b0204:	53157043 	ubfx	w3, w2, #21, #8
   b0208:	d35d9042 	ubfx	x2, x2, #29, #8
   b020c:	390060a6 	strb	w6, [x5, #24]
   b0210:	390064a4 	strb	w4, [x5, #25]
   b0214:	390068a3 	strb	w3, [x5, #26]
   b0218:	39006ca2 	strb	w2, [x5, #27]
   b021c:	f9003f7f 	str	xzr, [x27, #120]
   b0220:	97ffe4dc 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   b0224:	f84086c0 	ldr	x0, [x22], #8
   b0228:	6b1a027f 	cmp	w19, w26
   b022c:	f8008780 	str	x0, [x28], #8
   b0230:	54fff801 	b.ne	b0130 <CDMA4Channel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)+0x70>  // b.any
   b0234:	d503201f 	nop
   b0238:	a94363f7 	ldp	x23, x24, [sp, #48]
   b023c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   b0240:	b9002b7a 	str	w26, [x27, #40]
   b0244:	f9004374 	str	x20, [x27, #128]
   b0248:	a94153f3 	ldp	x19, x20, [sp, #16]
   b024c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   b0250:	a94573fb 	ldp	x27, x28, [sp, #80]
   b0254:	a8c67bfd 	ldp	x29, x30, [sp], #96
   b0258:	d65f03c0 	ret
   b025c:	390060bf 	strb	wzr, [x5, #24]
   b0260:	aa1403e1 	mov	x1, x20
   b0264:	91001a73 	add	x19, x19, #0x6
   b0268:	390064bf 	strb	wzr, [x5, #25]
   b026c:	390068bf 	strb	wzr, [x5, #26]
   b0270:	39006cbf 	strb	wzr, [x5, #27]
   b0274:	f9003f7f 	str	xzr, [x27, #120]
   b0278:	97ffe4c6 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   b027c:	f94002c0 	ldr	x0, [x22]
   b0280:	f8337b60 	str	x0, [x27, x19, lsl #3]
   b0284:	17ffffed 	b	b0238 <CDMA4Channel::SetupCyclicIOWrite(unsigned long, void const**, unsigned int, unsigned long, TDREQ)+0x178>
   b0288:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b028c:	91256021 	add	x1, x1, #0x958
   b0290:	91054020 	add	x0, x1, #0x150
   b0294:	52802802 	mov	w2, #0x140                 	// #320
   b0298:	97ffb6aa 	bl	9dd40 <assertion_failed>
   b029c:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b02a0:	91256021 	add	x1, x1, #0x958
   b02a4:	91058020 	add	x0, x1, #0x160
   b02a8:	52802822 	mov	w2, #0x141                 	// #321
   b02ac:	97ffb6a5 	bl	9dd40 <assertion_failed>
   b02b0:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b02b4:	91256021 	add	x1, x1, #0x958
   b02b8:	a9025bf5 	stp	x21, x22, [sp, #32]
   b02bc:	91044020 	add	x0, x1, #0x110
   b02c0:	52802682 	mov	w2, #0x134                 	// #308
   b02c4:	a90363f7 	stp	x23, x24, [sp, #48]
   b02c8:	a9046bf9 	stp	x25, x26, [sp, #64]
   b02cc:	a90573fb 	stp	x27, x28, [sp, #80]
   b02d0:	97ffb69c 	bl	9dd40 <assertion_failed>
   b02d4:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b02d8:	91256021 	add	x1, x1, #0x958
   b02dc:	a9025bf5 	stp	x21, x22, [sp, #32]
   b02e0:	91048020 	add	x0, x1, #0x120
   b02e4:	528026a2 	mov	w2, #0x135                 	// #309
   b02e8:	a90363f7 	stp	x23, x24, [sp, #48]
   b02ec:	a9046bf9 	stp	x25, x26, [sp, #64]
   b02f0:	a90573fb 	stp	x27, x28, [sp, #80]
   b02f4:	97ffb693 	bl	9dd40 <assertion_failed>
   b02f8:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b02fc:	91256021 	add	x1, x1, #0x958
   b0300:	a90363f7 	stp	x23, x24, [sp, #48]
   b0304:	9104c020 	add	x0, x1, #0x130
   b0308:	528026c2 	mov	w2, #0x136                 	// #310
   b030c:	a9046bf9 	stp	x25, x26, [sp, #64]
   b0310:	97ffb68c 	bl	9dd40 <assertion_failed>
   b0314:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0318:	91256021 	add	x1, x1, #0x958
   b031c:	a90363f7 	stp	x23, x24, [sp, #48]
   b0320:	9103e020 	add	x0, x1, #0xf8
   b0324:	52802742 	mov	w2, #0x13a                 	// #314
   b0328:	a9046bf9 	stp	x25, x26, [sp, #64]
   b032c:	97ffb685 	bl	9dd40 <assertion_failed>

00000000000b0330 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)>:
   b0330:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   b0334:	910003fd 	mov	x29, sp
   b0338:	f9000bf3 	str	x19, [sp, #16]
   b033c:	b4000ae1 	cbz	x1, b0498 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x168>
   b0340:	aa0003f3 	mov	x19, x0
   b0344:	aa0203e0 	mov	x0, x2
   b0348:	b4000b22 	cbz	x2, b04ac <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x17c>
   b034c:	b4000ba3 	cbz	x3, b04c0 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x190>
   b0350:	d29fffe2 	mov	x2, #0xffff                	// #65535
   b0354:	eb02007f 	cmp	x3, x2
   b0358:	54000be8 	b.hi	b04d4 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x1a4>  // b.pmore
   b035c:	34000c64 	cbz	w4, b04e8 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x1b8>
   b0360:	5287ffe7 	mov	w7, #0x3fff                	// #16383
   b0364:	6b07009f 	cmp	w4, w7
   b0368:	54000ca8 	b.hi	b04fc <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x1cc>  // b.pmore
   b036c:	eb0200bf 	cmp	x5, x2
   b0370:	540008a8 	b.hi	b0484 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x154>  // b.pmore
   b0374:	71003cdf 	cmp	w6, #0xf
   b0378:	54000cc8 	b.hi	b0510 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x1e0>  // b.pmore
   b037c:	f9400667 	ldr	x7, [x19, #8]
   b0380:	b4000d27 	cbz	x7, b0524 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned long, unsigned int, unsigned long, unsigned int)+0x1f4>
   b0384:	53185cc6 	lsl	w6, w6, #8
   b0388:	d3609c0a 	ubfx	x10, x0, #32, #8
   b038c:	390030e1 	strb	w1, [x7, #12]
   b0390:	2a06014a 	orr	w10, w10, w6
   b0394:	528a0002 	mov	w2, #0x5000                	// #20480
   b0398:	390004ff 	strb	wzr, [x7, #1]
   b039c:	51000488 	sub	w8, w4, #0x1
   b03a0:	2a054045 	orr	w5, w2, w5, lsl #16
   b03a4:	d3609c29 	ubfx	x9, x1, #32, #8
   b03a8:	2a020142 	orr	w2, w10, w2
   b03ac:	2a060129 	orr	w9, w9, w6
   b03b0:	2a084066 	orr	w6, w3, w8, lsl #16
   b03b4:	d3505c4d 	ubfx	x13, x2, #16, #8
   b03b8:	d3483c48 	ubfx	x8, x2, #8, #8
   b03bc:	390020ea 	strb	w10, [x7, #8]
   b03c0:	53187c42 	lsr	w2, w2, #24
   b03c4:	2a050125 	orr	w5, w9, w5
   b03c8:	390008ff 	strb	wzr, [x7, #2]
   b03cc:	d3483cac 	ubfx	x12, x5, #8, #8
   b03d0:	d3505cab 	ubfx	x11, x5, #16, #8
   b03d4:	390024e8 	strb	w8, [x7, #9]
   b03d8:	53083c11 	ubfx	w17, w0, #8, #8
   b03dc:	d3505cc8 	ubfx	x8, x6, #16, #8
   b03e0:	390028ed 	strb	w13, [x7, #10]
   b03e4:	53105c10 	ubfx	w16, w0, #16, #8
   b03e8:	53187c0f 	lsr	w15, w0, #24
   b03ec:	39002ce2 	strb	w2, [x7, #11]
   b03f0:	53083c2e 	ubfx	w14, w1, #8, #8
   b03f4:	53105c2d 	ubfx	w13, w1, #16, #8
   b03f8:	39000cff 	strb	wzr, [x7, #3]
   b03fc:	53187c22 	lsr	w2, w1, #24
   b0400:	53187ca5 	lsr	w5, w5, #24
   b0404:	390010e0 	strb	w0, [x7, #4]
   b0408:	53083c6a 	ubfx	w10, w3, #8, #8
   b040c:	53187cc6 	lsr	w6, w6, #24
   b0410:	390014f1 	strb	w17, [x7, #5]
   b0414:	528001d2 	mov	w18, #0xe                   	// #14
   b0418:	2a0403e1 	mov	w1, w4
   b041c:	390018f0 	strb	w16, [x7, #6]
   b0420:	39001cef 	strb	w15, [x7, #7]
   b0424:	390000f2 	strb	w18, [x7]
   b0428:	9b037c21 	mul	x1, x1, x3
   b042c:	390034ee 	strb	w14, [x7, #13]
   b0430:	390038ed 	strb	w13, [x7, #14]
   b0434:	39003ce2 	strb	w2, [x7, #15]
   b0438:	390040e9 	strb	w9, [x7, #16]
   b043c:	390044ec 	strb	w12, [x7, #17]
   b0440:	390048eb 	strb	w11, [x7, #18]
   b0444:	39004ce5 	strb	w5, [x7, #19]
   b0448:	390050e3 	strb	w3, [x7, #20]
   b044c:	390054ea 	strb	w10, [x7, #21]
   b0450:	390058e8 	strb	w8, [x7, #22]
   b0454:	39005ce6 	strb	w6, [x7, #23]
   b0458:	390060ff 	strb	wzr, [x7, #24]
   b045c:	390064ff 	strb	wzr, [x7, #25]
   b0460:	390068ff 	strb	wzr, [x7, #26]
   b0464:	39006cff 	strb	wzr, [x7, #27]
   b0468:	f9003e7f 	str	xzr, [x19, #120]
   b046c:	97ffe449 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   b0470:	52800020 	mov	w0, #0x1                   	// #1
   b0474:	b9002a60 	str	w0, [x19, #40]
   b0478:	f9400bf3 	ldr	x19, [sp, #16]
   b047c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b0480:	d65f03c0 	ret
   b0484:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0488:	91256021 	add	x1, x1, #0x958
   b048c:	9107a020 	add	x0, x1, #0x1e8
   b0490:	52802ea2 	mov	w2, #0x175                 	// #373
   b0494:	97ffb62b 	bl	9dd40 <assertion_failed>
   b0498:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b049c:	91256021 	add	x1, x1, #0x958
   b04a0:	9101a020 	add	x0, x1, #0x68
   b04a4:	52802de2 	mov	w2, #0x16f                 	// #367
   b04a8:	97ffb626 	bl	9dd40 <assertion_failed>
   b04ac:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b04b0:	91256021 	add	x1, x1, #0x958
   b04b4:	91020020 	add	x0, x1, #0x80
   b04b8:	52802e02 	mov	w2, #0x170                 	// #368
   b04bc:	97ffb621 	bl	9dd40 <assertion_failed>
   b04c0:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b04c4:	91256021 	add	x1, x1, #0x958
   b04c8:	9105e020 	add	x0, x1, #0x178
   b04cc:	52802e22 	mov	w2, #0x171                 	// #369
   b04d0:	97ffb61c 	bl	9dd40 <assertion_failed>
   b04d4:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b04d8:	91256021 	add	x1, x1, #0x958
   b04dc:	91064020 	add	x0, x1, #0x190
   b04e0:	52802e42 	mov	w2, #0x172                 	// #370
   b04e4:	97ffb617 	bl	9dd40 <assertion_failed>
   b04e8:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b04ec:	91256021 	add	x1, x1, #0x958
   b04f0:	9106e020 	add	x0, x1, #0x1b8
   b04f4:	52802e62 	mov	w2, #0x173                 	// #371
   b04f8:	97ffb612 	bl	9dd40 <assertion_failed>
   b04fc:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0500:	91256021 	add	x1, x1, #0x958
   b0504:	91072020 	add	x0, x1, #0x1c8
   b0508:	52802e82 	mov	w2, #0x174                 	// #372
   b050c:	97ffb60d 	bl	9dd40 <assertion_failed>
   b0510:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0514:	91256021 	add	x1, x1, #0x958
   b0518:	91028020 	add	x0, x1, #0xa0
   b051c:	52802ec2 	mov	w2, #0x176                 	// #374
   b0520:	97ffb608 	bl	9dd40 <assertion_failed>
   b0524:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0528:	91256021 	add	x1, x1, #0x958
   b052c:	91030020 	add	x0, x1, #0xc0
   b0530:	52802f02 	mov	w2, #0x178                 	// #376
   b0534:	97ffb603 	bl	9dd40 <assertion_failed>
   b0538:	d503201f 	nop
   b053c:	d503201f 	nop

00000000000b0540 <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, unsigned int, bool, void*), void*)>:
   b0540:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   b0544:	910003fd 	mov	x29, sp
   b0548:	b9400003 	ldr	w3, [x0]
   b054c:	a90153f3 	stp	x19, x20, [sp, #16]
   b0550:	f90013f5 	str	x21, [sp, #32]
   b0554:	7100287f 	cmp	w3, #0xa
   b0558:	54000329 	b.ls	b05bc <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, unsigned int, bool, void*), void*)+0x7c>  // b.plast
   b055c:	7100387f 	cmp	w3, #0xe
   b0560:	54000388 	b.hi	b05d0 <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, unsigned int, bool, void*), void*)+0x90>  // b.pmore
   b0564:	aa0003f3 	mov	x19, x0
   b0568:	f9402800 	ldr	x0, [x0, #80]
   b056c:	b40003c0 	cbz	x0, b05e4 <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, unsigned int, bool, void*), void*)+0xa4>
   b0570:	aa0103f4 	mov	x20, x1
   b0574:	39416261 	ldrb	w1, [x19, #88]
   b0578:	aa0203f5 	mov	x21, x2
   b057c:	34000101 	cbz	w1, b059c <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, unsigned int, bool, void*), void*)+0x5c>
   b0580:	f9003274 	str	x20, [x19, #96]
   b0584:	b40003b4 	cbz	x20, b05f8 <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, unsigned int, bool, void*), void*)+0xb8>
   b0588:	f9003675 	str	x21, [x19, #104]
   b058c:	a94153f3 	ldp	x19, x20, [sp, #16]
   b0590:	f94013f5 	ldr	x21, [sp, #32]
   b0594:	a8c37bfd 	ldp	x29, x30, [sp], #48
   b0598:	d65f03c0 	ret
   b059c:	90000002 	adrp	x2, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   b05a0:	1101b861 	add	w1, w3, #0x6e
   b05a4:	912c0042 	add	x2, x2, #0xb00
   b05a8:	aa1303e3 	mov	x3, x19
   b05ac:	97ffe9dd 	bl	aad20 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   b05b0:	52800020 	mov	w0, #0x1                   	// #1
   b05b4:	39016260 	strb	w0, [x19, #88]
   b05b8:	17fffff2 	b	b0580 <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, unsigned int, bool, void*), void*)+0x40>
   b05bc:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b05c0:	91256021 	add	x1, x1, #0x958
   b05c4:	91004020 	add	x0, x1, #0x10
   b05c8:	528032e2 	mov	w2, #0x197                 	// #407
   b05cc:	97ffb5dd 	bl	9dd40 <assertion_failed>
   b05d0:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b05d4:	91256021 	add	x1, x1, #0x958
   b05d8:	9100c020 	add	x0, x1, #0x30
   b05dc:	52803302 	mov	w2, #0x198                 	// #408
   b05e0:	97ffb5d8 	bl	9dd40 <assertion_failed>
   b05e4:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b05e8:	91256021 	add	x1, x1, #0x958
   b05ec:	91084020 	add	x0, x1, #0x210
   b05f0:	52803322 	mov	w2, #0x199                 	// #409
   b05f4:	97ffb5d3 	bl	9dd40 <assertion_failed>
   b05f8:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b05fc:	91256021 	add	x1, x1, #0x958
   b0600:	9108a020 	add	x0, x1, #0x228
   b0604:	52803522 	mov	w2, #0x1a9                 	// #425
   b0608:	97ffb5ce 	bl	9dd40 <assertion_failed>
   b060c:	d503201f 	nop

00000000000b0610 <CDMA4Channel::Start()>:
   b0610:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   b0614:	910003fd 	mov	x29, sp
   b0618:	a90153f3 	stp	x19, x20, [sp, #16]
   b061c:	aa0003f3 	mov	x19, x0
   b0620:	b9402800 	ldr	w0, [x0, #40]
   b0624:	f90013f5 	str	x21, [sp, #32]
   b0628:	34000400 	cbz	w0, b06a8 <CDMA4Channel::Start()+0x98>
   b062c:	d2800014 	mov	x20, #0x0                   	// #0
   b0630:	91002275 	add	x21, x19, #0x8
   b0634:	f8747aa0 	ldr	x0, [x21, x20, lsl #3]
   b0638:	b40007c0 	cbz	x0, b0730 <CDMA4Channel::Start()+0x120>
   b063c:	f9403261 	ldr	x1, [x19, #96]
   b0640:	b4000281 	cbz	x1, b0690 <CDMA4Channel::Start()+0x80>
   b0644:	f9402a61 	ldr	x1, [x19, #80]
   b0648:	b40007e1 	cbz	x1, b0744 <CDMA4Channel::Start()+0x134>
   b064c:	39416261 	ldrb	w1, [x19, #88]
   b0650:	34000841 	cbz	w1, b0758 <CDMA4Channel::Start()+0x148>
   b0654:	39400004 	ldrb	w4, [x0]
   b0658:	39400403 	ldrb	w3, [x0, #1]
   b065c:	39400802 	ldrb	w2, [x0, #2]
   b0660:	39400c01 	ldrb	w1, [x0, #3]
   b0664:	aa032083 	orr	x3, x4, x3, lsl #8
   b0668:	aa024062 	orr	x2, x3, x2, lsl #16
   b066c:	aa016041 	orr	x1, x2, x1, lsl #24
   b0670:	32000024 	orr	w4, w1, #0x1
   b0674:	53083c23 	ubfx	w3, w1, #8, #8
   b0678:	53105c22 	ubfx	w2, w1, #16, #8
   b067c:	d358dc21 	ubfx	x1, x1, #24, #32
   b0680:	39000004 	strb	w4, [x0]
   b0684:	39000403 	strb	w3, [x0, #1]
   b0688:	39000802 	strb	w2, [x0, #2]
   b068c:	39000c01 	strb	w1, [x0, #3]
   b0690:	d2800401 	mov	x1, #0x20                  	// #32
   b0694:	91000694 	add	x20, x20, #0x1
   b0698:	97ffe3be 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   b069c:	b9402a60 	ldr	w0, [x19, #40]
   b06a0:	6b14001f 	cmp	w0, w20
   b06a4:	54fffc88 	b.hi	b0634 <CDMA4Channel::Start()+0x24>  // b.pmore
   b06a8:	b9400261 	ldr	w1, [x19]
   b06ac:	7100283f 	cmp	w1, #0xa
   b06b0:	540005e9 	b.ls	b076c <CDMA4Channel::Start()+0x15c>  // b.plast
   b06b4:	7100383f 	cmp	w1, #0xe
   b06b8:	54000648 	b.hi	b0780 <CDMA4Channel::Start()+0x170>  // b.pmore
   b06bc:	52800e03 	mov	w3, #0x70                  	// #112
   b06c0:	72a01fc3 	movk	w3, #0xfe, lsl #16
   b06c4:	0b030020 	add	w0, w1, w3
   b06c8:	53185c02 	lsl	w2, w0, #8
   b06cc:	53185c00 	lsl	w0, w0, #8
   b06d0:	b9400042 	ldr	w2, [x2]
   b06d4:	37100602 	tbnz	w2, #2, b0794 <CDMA4Channel::Start()+0x184>
   b06d8:	d28ffc04 	mov	x4, #0x7fe0                	// #32736
   b06dc:	f2bfc004 	movk	x4, #0xfe00, lsl #16
   b06e0:	b9400084 	ldr	w4, [x4]
   b06e4:	52800022 	mov	w2, #0x1                   	// #1
   b06e8:	1ac12041 	lsl	w1, w2, w1
   b06ec:	6a04003f 	tst	w1, w4
   b06f0:	540005c1 	b.ne	b07a8 <CDMA4Channel::Start()+0x198>  // b.any
   b06f4:	f9400661 	ldr	x1, [x19, #8]
   b06f8:	11001000 	add	w0, w0, #0x4
   b06fc:	52800022 	mov	w2, #0x1                   	// #1
   b0700:	72a21e22 	movk	w2, #0x10f1, lsl #16
   b0704:	f94013f5 	ldr	x21, [sp, #32]
   b0708:	b9002e7f 	str	wzr, [x19, #44]
   b070c:	d345fc21 	lsr	x1, x1, #5
   b0710:	b9000001 	str	w1, [x0]
   b0714:	b9400260 	ldr	w0, [x19]
   b0718:	a94153f3 	ldp	x19, x20, [sp, #16]
   b071c:	0b030000 	add	w0, w0, w3
   b0720:	53185c00 	lsl	w0, w0, #8
   b0724:	b9000002 	str	w2, [x0]
   b0728:	a8c37bfd 	ldp	x29, x30, [sp], #48
   b072c:	d65f03c0 	ret
   b0730:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0734:	91256021 	add	x1, x1, #0x958
   b0738:	91058020 	add	x0, x1, #0x160
   b073c:	52803642 	mov	w2, #0x1b2                 	// #434
   b0740:	97ffb580 	bl	9dd40 <assertion_failed>
   b0744:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0748:	91256021 	add	x1, x1, #0x958
   b074c:	91084020 	add	x0, x1, #0x210
   b0750:	528036c2 	mov	w2, #0x1b6                 	// #438
   b0754:	97ffb57b 	bl	9dd40 <assertion_failed>
   b0758:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b075c:	91256021 	add	x1, x1, #0x958
   b0760:	91092020 	add	x0, x1, #0x248
   b0764:	528036e2 	mov	w2, #0x1b7                 	// #439
   b0768:	97ffb576 	bl	9dd40 <assertion_failed>
   b076c:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0770:	91256021 	add	x1, x1, #0x958
   b0774:	91004020 	add	x0, x1, #0x10
   b0778:	52803822 	mov	w2, #0x1c1                 	// #449
   b077c:	97ffb571 	bl	9dd40 <assertion_failed>
   b0780:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0784:	91256021 	add	x1, x1, #0x958
   b0788:	9100c020 	add	x0, x1, #0x30
   b078c:	52803842 	mov	w2, #0x1c2                 	// #450
   b0790:	97ffb56c 	bl	9dd40 <assertion_failed>
   b0794:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0798:	91256021 	add	x1, x1, #0x958
   b079c:	91096020 	add	x0, x1, #0x258
   b07a0:	52803862 	mov	w2, #0x1c3                 	// #451
   b07a4:	97ffb567 	bl	9dd40 <assertion_failed>
   b07a8:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b07ac:	91256021 	add	x1, x1, #0x958
   b07b0:	910a4020 	add	x0, x1, #0x290
   b07b4:	528038a2 	mov	w2, #0x1c5                 	// #453
   b07b8:	97ffb562 	bl	9dd40 <assertion_failed>
   b07bc:	d503201f 	nop

00000000000b07c0 <CDMA4Channel::Wait()>:
   b07c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   b07c4:	910003fd 	mov	x29, sp
   b07c8:	b9400002 	ldr	w2, [x0]
   b07cc:	f9000bf3 	str	x19, [sp, #16]
   b07d0:	7100285f 	cmp	w2, #0xa
   b07d4:	54000369 	b.ls	b0840 <CDMA4Channel::Wait()+0x80>  // b.plast
   b07d8:	7100385f 	cmp	w2, #0xe
   b07dc:	540003c8 	b.hi	b0854 <CDMA4Channel::Wait()+0x94>  // b.pmore
   b07e0:	aa0003f3 	mov	x19, x0
   b07e4:	f9403000 	ldr	x0, [x0, #96]
   b07e8:	b5000400 	cbnz	x0, b0868 <CDMA4Channel::Wait()+0xa8>
   b07ec:	117f8042 	add	w2, w2, #0xfe0, lsl #12
   b07f0:	1101c042 	add	w2, w2, #0x70
   b07f4:	53185c42 	lsl	w2, w2, #8
   b07f8:	b9400041 	ldr	w1, [x2]
   b07fc:	3707ffe1 	tbnz	w1, #0, b07f8 <CDMA4Channel::Wait()+0x38>
   b0800:	d2760021 	eor	x1, x1, #0x400
   b0804:	f9403e60 	ldr	x0, [x19, #120]
   b0808:	530a2821 	ubfx	w1, w1, #10, #1
   b080c:	3901c261 	strb	w1, [x19, #112]
   b0810:	b50000a0 	cbnz	x0, b0824 <CDMA4Channel::Wait()+0x64>
   b0814:	2a0103e0 	mov	w0, w1
   b0818:	f9400bf3 	ldr	x19, [sp, #16]
   b081c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b0820:	d65f03c0 	ret
   b0824:	f9404261 	ldr	x1, [x19, #128]
   b0828:	97ffe35a 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   b082c:	3941c261 	ldrb	w1, [x19, #112]
   b0830:	f9400bf3 	ldr	x19, [sp, #16]
   b0834:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b0838:	2a0103e0 	mov	w0, w1
   b083c:	d65f03c0 	ret
   b0840:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0844:	91256021 	add	x1, x1, #0x958
   b0848:	91004020 	add	x0, x1, #0x10
   b084c:	52803ac2 	mov	w2, #0x1d6                 	// #470
   b0850:	97ffb53c 	bl	9dd40 <assertion_failed>
   b0854:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0858:	91256021 	add	x1, x1, #0x958
   b085c:	9100c020 	add	x0, x1, #0x30
   b0860:	52803ae2 	mov	w2, #0x1d7                 	// #471
   b0864:	97ffb537 	bl	9dd40 <assertion_failed>
   b0868:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b086c:	91256021 	add	x1, x1, #0x958
   b0870:	910b2020 	add	x0, x1, #0x2c8
   b0874:	52803b02 	mov	w2, #0x1d8                 	// #472
   b0878:	97ffb532 	bl	9dd40 <assertion_failed>
   b087c:	d503201f 	nop

00000000000b0880 <CDMA4Channel::GetStatus()>:
   b0880:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   b0884:	910003fd 	mov	x29, sp
   b0888:	b9400001 	ldr	w1, [x0]
   b088c:	7100283f 	cmp	w1, #0xa
   b0890:	54000169 	b.ls	b08bc <CDMA4Channel::GetStatus()+0x3c>  // b.plast
   b0894:	7100383f 	cmp	w1, #0xe
   b0898:	540001c8 	b.hi	b08d0 <CDMA4Channel::GetStatus()+0x50>  // b.pmore
   b089c:	117f8021 	add	w1, w1, #0xfe0, lsl #12
   b08a0:	1101c021 	add	w1, w1, #0x70
   b08a4:	53185c21 	lsl	w1, w1, #8
   b08a8:	b9400021 	ldr	w1, [x1]
   b08ac:	370001c1 	tbnz	w1, #0, b08e4 <CDMA4Channel::GetStatus()+0x64>
   b08b0:	3941c000 	ldrb	w0, [x0, #112]
   b08b4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   b08b8:	d65f03c0 	ret
   b08bc:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b08c0:	91256021 	add	x1, x1, #0x958
   b08c4:	91004020 	add	x0, x1, #0x10
   b08c8:	52803e02 	mov	w2, #0x1f0                 	// #496
   b08cc:	97ffb51d 	bl	9dd40 <assertion_failed>
   b08d0:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b08d4:	91256021 	add	x1, x1, #0x958
   b08d8:	9100c020 	add	x0, x1, #0x30
   b08dc:	52803e22 	mov	w2, #0x1f1                 	// #497
   b08e0:	97ffb518 	bl	9dd40 <assertion_failed>
   b08e4:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b08e8:	91256021 	add	x1, x1, #0x958
   b08ec:	910ba020 	add	x0, x1, #0x2e8
   b08f0:	52803e42 	mov	w2, #0x1f2                 	// #498
   b08f4:	97ffb513 	bl	9dd40 <assertion_failed>
   b08f8:	d503201f 	nop
   b08fc:	d503201f 	nop

00000000000b0900 <CDMA4Channel::Cancel()>:
   b0900:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   b0904:	910003fd 	mov	x29, sp
   b0908:	b9400000 	ldr	w0, [x0]
   b090c:	7100281f 	cmp	w0, #0xa
   b0910:	54000129 	b.ls	b0934 <CDMA4Channel::Cancel()+0x34>  // b.plast
   b0914:	7100381f 	cmp	w0, #0xe
   b0918:	54000188 	b.hi	b0948 <CDMA4Channel::Cancel()+0x48>  // b.pmore
   b091c:	117f8000 	add	w0, w0, #0xfe0, lsl #12
   b0920:	1101c000 	add	w0, w0, #0x70
   b0924:	53185c00 	lsl	w0, w0, #8
   b0928:	b900001f 	str	wzr, [x0]
   b092c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   b0930:	d65f03c0 	ret
   b0934:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0938:	91256021 	add	x1, x1, #0x958
   b093c:	91004020 	add	x0, x1, #0x10
   b0940:	52803f62 	mov	w2, #0x1fb                 	// #507
   b0944:	97ffb4ff 	bl	9dd40 <assertion_failed>
   b0948:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b094c:	91256021 	add	x1, x1, #0x958
   b0950:	9100c020 	add	x0, x1, #0x30
   b0954:	52803f82 	mov	w2, #0x1fc                 	// #508
   b0958:	97ffb4fa 	bl	9dd40 <assertion_failed>
   b095c:	d503201f 	nop

00000000000b0960 <CDMA4Channel::InterruptHandler()>:
   b0960:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   b0964:	910003fd 	mov	x29, sp
   b0968:	f9000bf3 	str	x19, [sp, #16]
   b096c:	aa0003f3 	mov	x19, x0
   b0970:	f9403c00 	ldr	x0, [x0, #120]
   b0974:	b5000700 	cbnz	x0, b0a54 <CDMA4Channel::InterruptHandler()+0xf4>
   b0978:	b9400261 	ldr	w1, [x19]
   b097c:	7100283f 	cmp	w1, #0xa
   b0980:	54000749 	b.ls	b0a68 <CDMA4Channel::InterruptHandler()+0x108>  // b.plast
   b0984:	7100383f 	cmp	w1, #0xe
   b0988:	540007a8 	b.hi	b0a7c <CDMA4Channel::InterruptHandler()+0x11c>  // b.pmore
   b098c:	d28ffc02 	mov	x2, #0x7fe0                	// #32736
   b0990:	f2bfc002 	movk	x2, #0xfe00, lsl #16
   b0994:	b9400043 	ldr	w3, [x2]
   b0998:	52800020 	mov	w0, #0x1                   	// #1
   b099c:	1ac12000 	lsl	w0, w0, w1
   b09a0:	6a03001f 	tst	w0, w3
   b09a4:	54000760 	b.eq	b0a90 <CDMA4Channel::InterruptHandler()+0x130>  // b.none
   b09a8:	b9000040 	str	w0, [x2]
   b09ac:	b9400260 	ldr	w0, [x19]
   b09b0:	117f8000 	add	w0, w0, #0xfe0, lsl #12
   b09b4:	1101c000 	add	w0, w0, #0x70
   b09b8:	53185c00 	lsl	w0, w0, #8
   b09bc:	b9400001 	ldr	w1, [x0]
   b09c0:	36100721 	tbz	w1, #2, b0aa4 <CDMA4Channel::InterruptHandler()+0x144>
   b09c4:	d2760022 	eor	x2, x1, #0x400
   b09c8:	f9403264 	ldr	x4, [x19, #96]
   b09cc:	530a2842 	ubfx	w2, w2, #10, #1
   b09d0:	b9000001 	str	w1, [x0]
   b09d4:	3901c262 	strb	w2, [x19, #112]
   b09d8:	b4000704 	cbz	x4, b0ab8 <CDMA4Channel::InterruptHandler()+0x158>
   b09dc:	b9402e60 	ldr	w0, [x19, #44]
   b09e0:	71000c1f 	cmp	w0, #0x3
   b09e4:	54000748 	b.hi	b0acc <CDMA4Channel::InterruptHandler()+0x16c>  // b.pmore
   b09e8:	b9400260 	ldr	w0, [x19]
   b09ec:	b9402e61 	ldr	w1, [x19, #44]
   b09f0:	f9403663 	ldr	x3, [x19, #104]
   b09f4:	d63f0080 	blr	x4
   b09f8:	3941c260 	ldrb	w0, [x19, #112]
   b09fc:	34000260 	cbz	w0, b0a48 <CDMA4Channel::InterruptHandler()+0xe8>
   b0a00:	b9402a60 	ldr	w0, [x19, #40]
   b0a04:	7100041f 	cmp	w0, #0x1
   b0a08:	54000209 	b.ls	b0a48 <CDMA4Channel::InterruptHandler()+0xe8>  // b.plast
   b0a0c:	b9402e61 	ldr	w1, [x19, #44]
   b0a10:	6b01001f 	cmp	w0, w1
   b0a14:	540006a9 	b.ls	b0ae8 <CDMA4Channel::InterruptHandler()+0x188>  // b.plast
   b0a18:	b9402e60 	ldr	w0, [x19, #44]
   b0a1c:	f9404261 	ldr	x1, [x19, #128]
   b0a20:	2a0003e0 	mov	w0, w0
   b0a24:	91001800 	add	x0, x0, #0x6
   b0a28:	f8607a60 	ldr	x0, [x19, x0, lsl #3]
   b0a2c:	97ffe2d9 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   b0a30:	b9402e60 	ldr	w0, [x19, #44]
   b0a34:	b9402a61 	ldr	w1, [x19, #40]
   b0a38:	11000400 	add	w0, w0, #0x1
   b0a3c:	6b01001f 	cmp	w0, w1
   b0a40:	b9002e60 	str	w0, [x19, #44]
   b0a44:	540004e0 	b.eq	b0ae0 <CDMA4Channel::InterruptHandler()+0x180>  // b.none
   b0a48:	f9400bf3 	ldr	x19, [sp, #16]
   b0a4c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b0a50:	d65f03c0 	ret
   b0a54:	f9404261 	ldr	x1, [x19, #128]
   b0a58:	97ffe2ce 	bl	a9590 <CleanAndInvalidateDataCacheRange>
   b0a5c:	b9400261 	ldr	w1, [x19]
   b0a60:	7100283f 	cmp	w1, #0xa
   b0a64:	54fff908 	b.hi	b0984 <CDMA4Channel::InterruptHandler()+0x24>  // b.pmore
   b0a68:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0a6c:	91256021 	add	x1, x1, #0x958
   b0a70:	91004020 	add	x0, x1, #0x10
   b0a74:	52804122 	mov	w2, #0x209                 	// #521
   b0a78:	97ffb4b2 	bl	9dd40 <assertion_failed>
   b0a7c:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0a80:	91256021 	add	x1, x1, #0x958
   b0a84:	9100c020 	add	x0, x1, #0x30
   b0a88:	52804142 	mov	w2, #0x20a                 	// #522
   b0a8c:	97ffb4ad 	bl	9dd40 <assertion_failed>
   b0a90:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0a94:	91256021 	add	x1, x1, #0x958
   b0a98:	910c8020 	add	x0, x1, #0x320
   b0a9c:	52804222 	mov	w2, #0x211                 	// #529
   b0aa0:	97ffb4a8 	bl	9dd40 <assertion_failed>
   b0aa4:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0aa8:	91256021 	add	x1, x1, #0x958
   b0aac:	910ce020 	add	x0, x1, #0x338
   b0ab0:	528042c2 	mov	w2, #0x216                 	// #534
   b0ab4:	97ffb4a3 	bl	9dd40 <assertion_failed>
   b0ab8:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0abc:	91256021 	add	x1, x1, #0x958
   b0ac0:	9108a020 	add	x0, x1, #0x228
   b0ac4:	52804362 	mov	w2, #0x21b                 	// #539
   b0ac8:	97ffb49e 	bl	9dd40 <assertion_failed>
   b0acc:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0ad0:	91256021 	add	x1, x1, #0x958
   b0ad4:	910d2020 	add	x0, x1, #0x348
   b0ad8:	52804382 	mov	w2, #0x21c                 	// #540
   b0adc:	97ffb499 	bl	9dd40 <assertion_failed>
   b0ae0:	b9002e7f 	str	wzr, [x19, #44]
   b0ae4:	17ffffd9 	b	b0a48 <CDMA4Channel::InterruptHandler()+0xe8>
   b0ae8:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0aec:	91256021 	add	x1, x1, #0x958
   b0af0:	910dc020 	add	x0, x1, #0x370
   b0af4:	52804442 	mov	w2, #0x222                 	// #546
   b0af8:	97ffb492 	bl	9dd40 <assertion_failed>
   b0afc:	d503201f 	nop

00000000000b0b00 <CDMA4Channel::InterruptStub(void*)>:
   b0b00:	b4000040 	cbz	x0, b0b08 <CDMA4Channel::InterruptStub(void*)+0x8>
   b0b04:	17ffff97 	b	b0960 <CDMA4Channel::InterruptHandler()>
   b0b08:	90000061 	adrp	x1, bc000 <font_data+0x9a8>
   b0b0c:	91256021 	add	x1, x1, #0x958
   b0b10:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   b0b14:	910e4020 	add	x0, x1, #0x390
   b0b18:	910003fd 	mov	x29, sp
   b0b1c:	52804622 	mov	w2, #0x231                 	// #561
   b0b20:	97ffb488 	bl	9dd40 <assertion_failed>
	...

00000000000b0b30 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   b0b30:	91004002 	add	x2, x0, #0x10
   b0b34:	91070003 	add	x3, x0, #0x1c0
   b0b38:	f9000001 	str	x1, [x0]
   b0b3c:	3900201f 	strb	wzr, [x0, #8]
   b0b40:	f800845f 	str	xzr, [x2], #8
   b0b44:	eb03005f 	cmp	x2, x3
   b0b48:	54ffffc1 	b.ne	b0b40 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x10>  // b.any
   b0b4c:	d65f03c0 	ret

00000000000b0b50 <CGPIOManager::~CGPIOManager()>:
   b0b50:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   b0b54:	91004001 	add	x1, x0, #0x10
   b0b58:	910003fd 	mov	x29, sp
   b0b5c:	91070003 	add	x3, x0, #0x1c0
   b0b60:	14000004 	b	b0b70 <CGPIOManager::~CGPIOManager()+0x20>
   b0b64:	91002021 	add	x1, x1, #0x8
   b0b68:	eb01007f 	cmp	x3, x1
   b0b6c:	54000120 	b.eq	b0b90 <CGPIOManager::~CGPIOManager()+0x40>  // b.none
   b0b70:	f9400022 	ldr	x2, [x1]
   b0b74:	b4ffff82 	cbz	x2, b0b64 <CGPIOManager::~CGPIOManager()+0x14>
   b0b78:	b0000021 	adrp	x1, b5000 <_etext+0x4158>
   b0b7c:	b0000020 	adrp	x0, b5000 <_etext+0x4158>
   b0b80:	91314021 	add	x1, x1, #0xc50
   b0b84:	91318000 	add	x0, x0, #0xc60
   b0b88:	52800582 	mov	w2, #0x2c                  	// #44
   b0b8c:	97ffb46d 	bl	9dd40 <assertion_failed>
   b0b90:	39402001 	ldrb	w1, [x0, #8]
   b0b94:	340000c1 	cbz	w1, b0bac <CGPIOManager::~CGPIOManager()+0x5c>
   b0b98:	f9400000 	ldr	x0, [x0]
   b0b9c:	b40000c0 	cbz	x0, b0bb4 <CGPIOManager::~CGPIOManager()+0x64>
   b0ba0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   b0ba4:	52801281 	mov	w1, #0x94                  	// #148
   b0ba8:	17ffe886 	b	aadc0 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   b0bac:	a8c17bfd 	ldp	x29, x30, [sp], #16
   b0bb0:	d65f03c0 	ret
   b0bb4:	b0000021 	adrp	x1, b5000 <_etext+0x4158>
   b0bb8:	b0000020 	adrp	x0, b5000 <_etext+0x4158>
   b0bbc:	91314021 	add	x1, x1, #0xc50
   b0bc0:	9131e000 	add	x0, x0, #0xc78
   b0bc4:	52800642 	mov	w2, #0x32                  	// #50
   b0bc8:	97ffb45e 	bl	9dd40 <assertion_failed>
   b0bcc:	d503201f 	nop

00000000000b0bd0 <CGPIOManager::Initialize()>:
   b0bd0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   b0bd4:	910003fd 	mov	x29, sp
   b0bd8:	f9000bf3 	str	x19, [sp, #16]
   b0bdc:	aa0003f3 	mov	x19, x0
   b0be0:	39402000 	ldrb	w0, [x0, #8]
   b0be4:	350001a0 	cbnz	w0, b0c18 <CGPIOManager::Initialize()+0x48>
   b0be8:	f9400260 	ldr	x0, [x19]
   b0bec:	b4000220 	cbz	x0, b0c30 <CGPIOManager::Initialize()+0x60>
   b0bf0:	aa1303e3 	mov	x3, x19
   b0bf4:	52801281 	mov	w1, #0x94                  	// #148
   b0bf8:	90000002 	adrp	x2, b0000 <CDMA4Channel::SetupIOWrite(unsigned long, void const*, unsigned long, TDREQ)+0xc0>
   b0bfc:	913a0042 	add	x2, x2, #0xe80
   b0c00:	97ffe848 	bl	aad20 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   b0c04:	52800020 	mov	w0, #0x1                   	// #1
   b0c08:	39002260 	strb	w0, [x19, #8]
   b0c0c:	f9400bf3 	ldr	x19, [sp, #16]
   b0c10:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b0c14:	d65f03c0 	ret
   b0c18:	b0000021 	adrp	x1, b5000 <_etext+0x4158>
   b0c1c:	b0000020 	adrp	x0, b5000 <_etext+0x4158>
   b0c20:	91314021 	add	x1, x1, #0xc50
   b0c24:	91324000 	add	x0, x0, #0xc90
   b0c28:	52800762 	mov	w2, #0x3b                  	// #59
   b0c2c:	97ffb445 	bl	9dd40 <assertion_failed>
   b0c30:	b0000021 	adrp	x1, b5000 <_etext+0x4158>
   b0c34:	b0000020 	adrp	x0, b5000 <_etext+0x4158>
   b0c38:	91314021 	add	x1, x1, #0xc50
   b0c3c:	9131e000 	add	x0, x0, #0xc78
   b0c40:	52800782 	mov	w2, #0x3c                  	// #60
   b0c44:	97ffb43f 	bl	9dd40 <assertion_failed>
   b0c48:	d503201f 	nop
   b0c4c:	d503201f 	nop

00000000000b0c50 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   b0c50:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   b0c54:	910003fd 	mov	x29, sp
   b0c58:	39402002 	ldrb	w2, [x0, #8]
   b0c5c:	34000162 	cbz	w2, b0c88 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x38>
   b0c60:	b4000201 	cbz	x1, b0ca0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x50>
   b0c64:	b9400822 	ldr	w2, [x1, #8]
   b0c68:	7100d45f 	cmp	w2, #0x35
   b0c6c:	54000268 	b.hi	b0cb8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x68>  // b.pmore
   b0c70:	8b224c02 	add	x2, x0, w2, uxtw #3
   b0c74:	f9400840 	ldr	x0, [x2, #16]
   b0c78:	b50002c0 	cbnz	x0, b0cd0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x80>
   b0c7c:	f9000841 	str	x1, [x2, #16]
   b0c80:	a8c17bfd 	ldp	x29, x30, [sp], #16
   b0c84:	d65f03c0 	ret
   b0c88:	b0000021 	adrp	x1, b5000 <_etext+0x4158>
   b0c8c:	b0000020 	adrp	x0, b5000 <_etext+0x4158>
   b0c90:	91314021 	add	x1, x1, #0xc50
   b0c94:	9132a000 	add	x0, x0, #0xca8
   b0c98:	528008a2 	mov	w2, #0x45                  	// #69
   b0c9c:	97ffb429 	bl	9dd40 <assertion_failed>
   b0ca0:	b0000021 	adrp	x1, b5000 <_etext+0x4158>
   b0ca4:	b0000020 	adrp	x0, b5000 <_etext+0x4158>
   b0ca8:	91314021 	add	x1, x1, #0xc50
   b0cac:	9132e000 	add	x0, x0, #0xcb8
   b0cb0:	528008e2 	mov	w2, #0x47                  	// #71
   b0cb4:	97ffb423 	bl	9dd40 <assertion_failed>
   b0cb8:	b0000021 	adrp	x1, b5000 <_etext+0x4158>
   b0cbc:	b0000020 	adrp	x0, b5000 <_etext+0x4158>
   b0cc0:	91314021 	add	x1, x1, #0xc50
   b0cc4:	91332000 	add	x0, x0, #0xcc8
   b0cc8:	52800922 	mov	w2, #0x49                  	// #73
   b0ccc:	97ffb41d 	bl	9dd40 <assertion_failed>
   b0cd0:	b0000021 	adrp	x1, b5000 <_etext+0x4158>
   b0cd4:	b0000020 	adrp	x0, b5000 <_etext+0x4158>
   b0cd8:	91314021 	add	x1, x1, #0xc50
   b0cdc:	91318000 	add	x0, x0, #0xc60
   b0ce0:	52800962 	mov	w2, #0x4b                  	// #75
   b0ce4:	97ffb417 	bl	9dd40 <assertion_failed>
   b0ce8:	d503201f 	nop
   b0cec:	d503201f 	nop

00000000000b0cf0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   b0cf0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   b0cf4:	910003fd 	mov	x29, sp
   b0cf8:	39402002 	ldrb	w2, [x0, #8]
   b0cfc:	34000162 	cbz	w2, b0d28 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x38>
   b0d00:	b4000201 	cbz	x1, b0d40 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x50>
   b0d04:	b9400821 	ldr	w1, [x1, #8]
   b0d08:	7100d43f 	cmp	w1, #0x35
   b0d0c:	54000268 	b.hi	b0d58 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x68>  // b.pmore
   b0d10:	8b214c01 	add	x1, x0, w1, uxtw #3
   b0d14:	f9400820 	ldr	x0, [x1, #16]
   b0d18:	b40002c0 	cbz	x0, b0d70 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   b0d1c:	f900083f 	str	xzr, [x1, #16]
   b0d20:	a8c17bfd 	ldp	x29, x30, [sp], #16
   b0d24:	d65f03c0 	ret
   b0d28:	b0000021 	adrp	x1, b5000 <_etext+0x4158>
   b0d2c:	b0000020 	adrp	x0, b5000 <_etext+0x4158>
   b0d30:	91314021 	add	x1, x1, #0xc50
   b0d34:	9132a000 	add	x0, x0, #0xca8
   b0d38:	52800a42 	mov	w2, #0x52                  	// #82
   b0d3c:	97ffb401 	bl	9dd40 <assertion_failed>
   b0d40:	b0000021 	adrp	x1, b5000 <_etext+0x4158>
   b0d44:	b0000020 	adrp	x0, b5000 <_etext+0x4158>
   b0d48:	91314021 	add	x1, x1, #0xc50
   b0d4c:	9132e000 	add	x0, x0, #0xcb8
   b0d50:	52800a82 	mov	w2, #0x54                  	// #84
   b0d54:	97ffb3fb 	bl	9dd40 <assertion_failed>
   b0d58:	b0000021 	adrp	x1, b5000 <_etext+0x4158>
   b0d5c:	b0000020 	adrp	x0, b5000 <_etext+0x4158>
   b0d60:	91314021 	add	x1, x1, #0xc50
   b0d64:	91332000 	add	x0, x0, #0xcc8
   b0d68:	52800ac2 	mov	w2, #0x56                  	// #86
   b0d6c:	97ffb3f5 	bl	9dd40 <assertion_failed>
   b0d70:	b0000021 	adrp	x1, b5000 <_etext+0x4158>
   b0d74:	b0000020 	adrp	x0, b5000 <_etext+0x4158>
   b0d78:	91314021 	add	x1, x1, #0xc50
   b0d7c:	91338000 	add	x0, x0, #0xce0
   b0d80:	52800b02 	mov	w2, #0x58                  	// #88
   b0d84:	97ffb3ef 	bl	9dd40 <assertion_failed>
   b0d88:	d503201f 	nop
   b0d8c:	d503201f 	nop

00000000000b0d90 <CGPIOManager::InterruptHandler()>:
   b0d90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   b0d94:	910003fd 	mov	x29, sp
   b0d98:	39402001 	ldrb	w1, [x0, #8]
   b0d9c:	a90153f3 	stp	x19, x20, [sp, #16]
   b0da0:	340005e1 	cbz	w1, b0e5c <CGPIOManager::InterruptHandler()+0xcc>
   b0da4:	d2800801 	mov	x1, #0x40                  	// #64
   b0da8:	f2bfc401 	movk	x1, #0xfe20, lsl #16
   b0dac:	b9400021 	ldr	w1, [x1]
   b0db0:	d2800882 	mov	x2, #0x44                  	// #68
   b0db4:	f2bfc402 	movk	x2, #0xfe20, lsl #16
   b0db8:	52800013 	mov	w19, #0x0                   	// #0
   b0dbc:	d503201f 	nop
   b0dc0:	37000161 	tbnz	w1, #0, b0dec <CGPIOManager::InterruptHandler()+0x5c>
   b0dc4:	11000673 	add	w19, w19, #0x1
   b0dc8:	53017c21 	lsr	w1, w1, #1
   b0dcc:	f240127f 	tst	x19, #0x1f
   b0dd0:	54000041 	b.ne	b0dd8 <CGPIOManager::InterruptHandler()+0x48>  // b.any
   b0dd4:	b9400041 	ldr	w1, [x2]
   b0dd8:	7100da7f 	cmp	w19, #0x36
   b0ddc:	54ffff21 	b.ne	b0dc0 <CGPIOManager::InterruptHandler()+0x30>  // b.any
   b0de0:	a94153f3 	ldp	x19, x20, [sp, #16]
   b0de4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b0de8:	d65f03c0 	ret
   b0dec:	2a1303e1 	mov	w1, w19
   b0df0:	91000821 	add	x1, x1, #0x2
   b0df4:	f8617814 	ldr	x20, [x0, x1, lsl #3]
   b0df8:	b40001b4 	cbz	x20, b0e2c <CGPIOManager::InterruptHandler()+0x9c>
   b0dfc:	aa1403e0 	mov	x0, x20
   b0e00:	97ffefc0 	bl	acd00 <CGPIOPin::InterruptHandler()>
   b0e04:	3940e280 	ldrb	w0, [x20, #56]
   b0e08:	34fffec0 	cbz	w0, b0de0 <CGPIOManager::InterruptHandler()+0x50>
   b0e0c:	29418680 	ldp	w0, w1, [x20, #12]
   b0e10:	52800802 	mov	w2, #0x40                  	// #64
   b0e14:	72bfc402 	movk	w2, #0xfe20, lsl #16
   b0e18:	a94153f3 	ldp	x19, x20, [sp, #16]
   b0e1c:	0b020000 	add	w0, w0, w2
   b0e20:	b9000001 	str	w1, [x0]
   b0e24:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b0e28:	d65f03c0 	ret
   b0e2c:	2a1303e0 	mov	w0, w19
   b0e30:	97ffefd8 	bl	acd90 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   b0e34:	52800200 	mov	w0, #0x10                  	// #16
   b0e38:	72a7f100 	movk	w0, #0x3f88, lsl #16
   b0e3c:	0b531400 	add	w0, w0, w19, lsr #5
   b0e40:	52800021 	mov	w1, #0x1                   	// #1
   b0e44:	1ad32021 	lsl	w1, w1, w19
   b0e48:	a94153f3 	ldp	x19, x20, [sp, #16]
   b0e4c:	531e7400 	lsl	w0, w0, #2
   b0e50:	b9000001 	str	w1, [x0]
   b0e54:	a8c27bfd 	ldp	x29, x30, [sp], #32
   b0e58:	d65f03c0 	ret
   b0e5c:	b0000021 	adrp	x1, b5000 <_etext+0x4158>
   b0e60:	b0000020 	adrp	x0, b5000 <_etext+0x4158>
   b0e64:	91314021 	add	x1, x1, #0xc50
   b0e68:	9132a000 	add	x0, x0, #0xca8
   b0e6c:	52800bc2 	mov	w2, #0x5e                  	// #94
   b0e70:	97ffb3b4 	bl	9dd40 <assertion_failed>
   b0e74:	d503201f 	nop
   b0e78:	d503201f 	nop
   b0e7c:	d503201f 	nop

00000000000b0e80 <CGPIOManager::InterruptStub(void*)>:
   b0e80:	b4000040 	cbz	x0, b0e88 <CGPIOManager::InterruptStub(void*)+0x8>
   b0e84:	17ffffc3 	b	b0d90 <CGPIOManager::InterruptHandler()>
   b0e88:	b0000021 	adrp	x1, b5000 <_etext+0x4158>
   b0e8c:	b0000020 	adrp	x0, b5000 <_etext+0x4158>
   b0e90:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   b0e94:	91314021 	add	x1, x1, #0xc50
   b0e98:	910003fd 	mov	x29, sp
   b0e9c:	9133e000 	add	x0, x0, #0xcf8
   b0ea0:	528011c2 	mov	w2, #0x8e                  	// #142
   b0ea4:	97ffb3a7 	bl	9dd40 <assertion_failed>
